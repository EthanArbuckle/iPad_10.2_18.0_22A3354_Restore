uint64_t sub_207D2EAA4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  __int128 *v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD *v47;
  __int128 *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  __int128 *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  char v107;
  void *__p[3];
  char v109;
  char v110;

  if (a1 != a2)
    sub_207CDADA0((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  sub_207D0CAFC(a1 + 56, (_QWORD *)(a2 + 56));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v5 = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v5;
  v6 = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 156) = v6;
  v7 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v7;
  v8 = *(_QWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 180) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_QWORD *)(a1 + 204) = v10;
  v11 = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v11;
  v12 = *(_QWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_QWORD *)(a1 + 228) = v12;
  v13 = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v13;
  v14 = *(_QWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_QWORD *)(a1 + 252) = v14;
  sub_207D27414(a1 + 264, (uint64_t *)(a2 + 264));
  v15 = *(_OWORD *)(a2 + 456);
  v16 = *(_OWORD *)(a2 + 472);
  v17 = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = v17;
  *(_OWORD *)(a1 + 456) = v15;
  *(_OWORD *)(a1 + 472) = v16;
  v18 = (_OWORD *)(a1 + 520);
  v19 = (__int128 *)(a2 + 520);
  if (*(unsigned __int8 *)(a1 + 584) != *(unsigned __int8 *)(a2 + 584))
  {
    if (!*(_BYTE *)(a1 + 584))
    {
      v32 = *v19;
      v33 = *(_OWORD *)(a2 + 536);
      v34 = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 568) = v34;
      *v18 = v32;
      *(_OWORD *)(a1 + 536) = v33;
      *(_BYTE *)(a1 + 584) = 1;
      v23 = (_OWORD *)(a1 + 588);
      v24 = (__int128 *)(a2 + 588);
      v25 = *(unsigned __int8 *)(a1 + 652);
      if (v25 != *(unsigned __int8 *)(a2 + 652))
        goto LABEL_14;
LABEL_10:
      if (v25)
      {
        v26 = *v24;
        v27 = v24[1];
        v28 = v24[3];
        v23[2] = v24[2];
        v23[3] = v28;
        *v23 = v26;
        v23[1] = v27;
        v29 = (_OWORD *)(a1 + 656);
        v30 = (__int128 *)(a2 + 656);
        v31 = *(unsigned __int8 *)(a1 + 720);
        if (v31 == *(unsigned __int8 *)(a2 + 720))
          goto LABEL_17;
        goto LABEL_21;
      }
LABEL_16:
      v29 = (_OWORD *)(a1 + 656);
      v30 = (__int128 *)(a2 + 656);
      v31 = *(unsigned __int8 *)(a1 + 720);
      if (v31 == *(unsigned __int8 *)(a2 + 720))
        goto LABEL_17;
LABEL_21:
      if (!v31)
      {
        v50 = *v30;
        v51 = v30[1];
        v52 = v30[3];
        v29[2] = v30[2];
        v29[3] = v52;
        *v29 = v50;
        v29[1] = v51;
        *(_BYTE *)(a1 + 720) = 1;
        v38 = (_OWORD *)(a1 + 724);
        v39 = (__int128 *)(a2 + 724);
        v40 = *(unsigned __int8 *)(a1 + 788);
        if (v40 != *(unsigned __int8 *)(a2 + 788))
          goto LABEL_28;
LABEL_24:
        if (v40)
        {
          v44 = *v39;
          v45 = v39[1];
          v46 = v39[3];
          v38[2] = v39[2];
          v38[3] = v46;
          *v38 = v44;
          v38[1] = v45;
          v47 = (_OWORD *)(a1 + 792);
          v48 = (__int128 *)(a2 + 792);
          v49 = *(unsigned __int8 *)(a1 + 856);
          if (v49 == *(unsigned __int8 *)(a2 + 856))
            goto LABEL_31;
          goto LABEL_35;
        }
LABEL_30:
        v47 = (_OWORD *)(a1 + 792);
        v48 = (__int128 *)(a2 + 792);
        v49 = *(unsigned __int8 *)(a1 + 856);
        if (v49 == *(unsigned __int8 *)(a2 + 856))
          goto LABEL_31;
LABEL_35:
        if (!v49)
        {
          v66 = *v48;
          v67 = v48[1];
          v68 = v48[3];
          v47[2] = v48[2];
          v47[3] = v68;
          *v47 = v66;
          v47[1] = v67;
          *(_BYTE *)(a1 + 856) = 1;
          v56 = (_OWORD *)(a1 + 860);
          v57 = (__int128 *)(a2 + 860);
          v58 = *(unsigned __int8 *)(a1 + 924);
          if (v58 != *(unsigned __int8 *)(a2 + 924))
            goto LABEL_42;
LABEL_38:
          if (!v58)
            goto LABEL_44;
          v62 = *v57;
          v63 = v57[1];
          v64 = v57[3];
          v56[2] = v57[2];
          v56[3] = v64;
          *v56 = v62;
          v56[1] = v63;
          v65 = *(_OWORD *)(a2 + 928);
          *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
          *(_OWORD *)(a1 + 928) = v65;
          if (a1 == a2)
            goto LABEL_46;
LABEL_45:
          sub_207CDADA0((_QWORD *)(a1 + 952), *(char **)(a2 + 952), *(char **)(a2 + 960), (uint64_t)(*(_QWORD *)(a2 + 960) - *(_QWORD *)(a2 + 952)) >> 3);
          goto LABEL_46;
        }
        *(_BYTE *)(a1 + 856) = 0;
LABEL_37:
        v56 = (_OWORD *)(a1 + 860);
        v57 = (__int128 *)(a2 + 860);
        v58 = *(unsigned __int8 *)(a1 + 924);
        if (v58 != *(unsigned __int8 *)(a2 + 924))
          goto LABEL_42;
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 720) = 0;
LABEL_23:
      v38 = (_OWORD *)(a1 + 724);
      v39 = (__int128 *)(a2 + 724);
      v40 = *(unsigned __int8 *)(a1 + 788);
      if (v40 != *(unsigned __int8 *)(a2 + 788))
        goto LABEL_28;
      goto LABEL_24;
    }
    *(_BYTE *)(a1 + 584) = 0;
LABEL_9:
    v23 = (_OWORD *)(a1 + 588);
    v24 = (__int128 *)(a2 + 588);
    v25 = *(unsigned __int8 *)(a1 + 652);
    if (v25 != *(unsigned __int8 *)(a2 + 652))
      goto LABEL_14;
    goto LABEL_10;
  }
  if (!*(_BYTE *)(a1 + 584))
    goto LABEL_9;
  v20 = *v19;
  v21 = *(_OWORD *)(a2 + 536);
  v22 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = v22;
  *v18 = v20;
  *(_OWORD *)(a1 + 536) = v21;
  v23 = (_OWORD *)(a1 + 588);
  v24 = (__int128 *)(a2 + 588);
  v25 = *(unsigned __int8 *)(a1 + 652);
  if (v25 == *(unsigned __int8 *)(a2 + 652))
    goto LABEL_10;
LABEL_14:
  if (v25)
  {
    *(_BYTE *)(a1 + 652) = 0;
    goto LABEL_16;
  }
  v41 = *v24;
  v42 = v24[1];
  v43 = v24[3];
  v23[2] = v24[2];
  v23[3] = v43;
  *v23 = v41;
  v23[1] = v42;
  *(_BYTE *)(a1 + 652) = 1;
  v29 = (_OWORD *)(a1 + 656);
  v30 = (__int128 *)(a2 + 656);
  v31 = *(unsigned __int8 *)(a1 + 720);
  if (v31 != *(unsigned __int8 *)(a2 + 720))
    goto LABEL_21;
LABEL_17:
  if (!v31)
    goto LABEL_23;
  v35 = *v30;
  v36 = v30[1];
  v37 = v30[3];
  v29[2] = v30[2];
  v29[3] = v37;
  *v29 = v35;
  v29[1] = v36;
  v38 = (_OWORD *)(a1 + 724);
  v39 = (__int128 *)(a2 + 724);
  v40 = *(unsigned __int8 *)(a1 + 788);
  if (v40 == *(unsigned __int8 *)(a2 + 788))
    goto LABEL_24;
LABEL_28:
  if (v40)
  {
    *(_BYTE *)(a1 + 788) = 0;
    goto LABEL_30;
  }
  v59 = *v39;
  v60 = v39[1];
  v61 = v39[3];
  v38[2] = v39[2];
  v38[3] = v61;
  *v38 = v59;
  v38[1] = v60;
  *(_BYTE *)(a1 + 788) = 1;
  v47 = (_OWORD *)(a1 + 792);
  v48 = (__int128 *)(a2 + 792);
  v49 = *(unsigned __int8 *)(a1 + 856);
  if (v49 != *(unsigned __int8 *)(a2 + 856))
    goto LABEL_35;
LABEL_31:
  if (!v49)
    goto LABEL_37;
  v53 = *v48;
  v54 = v48[1];
  v55 = v48[3];
  v47[2] = v48[2];
  v47[3] = v55;
  *v47 = v53;
  v47[1] = v54;
  v56 = (_OWORD *)(a1 + 860);
  v57 = (__int128 *)(a2 + 860);
  v58 = *(unsigned __int8 *)(a1 + 924);
  if (v58 == *(unsigned __int8 *)(a2 + 924))
    goto LABEL_38;
LABEL_42:
  if (v58)
  {
    *(_BYTE *)(a1 + 924) = 0;
LABEL_44:
    v69 = *(_OWORD *)(a2 + 928);
    *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
    *(_OWORD *)(a1 + 928) = v69;
    if (a1 == a2)
      goto LABEL_46;
    goto LABEL_45;
  }
  v102 = *v57;
  v103 = v57[1];
  v104 = v57[3];
  v56[2] = v57[2];
  v56[3] = v104;
  *v56 = v102;
  v56[1] = v103;
  *(_BYTE *)(a1 + 924) = 1;
  v105 = *(_OWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 928) = v105;
  if (a1 != a2)
    goto LABEL_45;
LABEL_46:
  v70 = *(_OWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 976) = v70;
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v71 = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1019) = *(_OWORD *)(a2 + 1019);
  *(_OWORD *)(a1 + 1008) = v71;
  v72 = (int *)(a2 + 1040);
  v110 = *(_BYTE *)(a2 + 1080);
  if (v110)
  {
    v106 = *v72;
    v107 = *(_BYTE *)(a2 + 1044);
    sub_207D095B4((uint64_t)__p, a2 + 1048);
    sub_207D2F188(&v106, (int *)(a1 + 1040));
    if (!v110)
      goto LABEL_53;
  }
  else
  {
    LOBYTE(v106) = *(_BYTE *)v72;
    sub_207D2F188(&v106, (int *)(a1 + 1040));
    if (!v110)
      goto LABEL_53;
  }
  if (v109 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_53:
  v73 = *(_QWORD *)(a2 + 1088);
  v74 = *(_QWORD *)(a2 + 1096);
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  *(_QWORD *)(a1 + 1088) = v73;
  v77 = *(std::__shared_weak_count **)(a1 + 1096);
  *(_QWORD *)(a1 + 1096) = v74;
  if (!v77)
    goto LABEL_60;
  p_shared_owners = (unint64_t *)&v77->__shared_owners_;
  do
    v79 = __ldaxr(p_shared_owners);
  while (__stlxr(v79 - 1, p_shared_owners));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    v80 = *(_QWORD *)(a2 + 1104);
    v81 = *(_QWORD *)(a2 + 1112);
    if (!v81)
      goto LABEL_63;
  }
  else
  {
LABEL_60:
    v80 = *(_QWORD *)(a2 + 1104);
    v81 = *(_QWORD *)(a2 + 1112);
    if (!v81)
      goto LABEL_63;
  }
  v82 = (unint64_t *)(v81 + 8);
  do
    v83 = __ldxr(v82);
  while (__stxr(v83 + 1, v82));
LABEL_63:
  *(_QWORD *)(a1 + 1104) = v80;
  v84 = *(std::__shared_weak_count **)(a1 + 1112);
  *(_QWORD *)(a1 + 1112) = v81;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(_OWORD *)(a2 + 1120);
  v88 = *(_OWORD *)(a2 + 1136);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v88;
  *(_OWORD *)(a1 + 1120) = v87;
  v89 = *(_QWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1160) = v89;
  v90 = *(_OWORD *)(a2 + 1172);
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1172) = v90;
  v91 = *(_QWORD *)(a2 + 1200);
  *(_DWORD *)(a1 + 1208) = *(_DWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1200) = v91;
  v92 = *(_QWORD *)(a2 + 1212);
  *(_DWORD *)(a1 + 1220) = *(_DWORD *)(a2 + 1220);
  *(_QWORD *)(a1 + 1212) = v92;
  v93 = *(_QWORD *)(a2 + 1224);
  *(_DWORD *)(a1 + 1232) = *(_DWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1224) = v93;
  v94 = *(_QWORD *)(a2 + 1236);
  *(_DWORD *)(a1 + 1244) = *(_DWORD *)(a2 + 1244);
  *(_QWORD *)(a1 + 1236) = v94;
  v95 = *(_QWORD *)(a2 + 1248);
  *(_DWORD *)(a1 + 1256) = *(_DWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1248) = v95;
  v96 = *(_QWORD *)(a2 + 1260);
  *(_DWORD *)(a1 + 1268) = *(_DWORD *)(a2 + 1268);
  *(_QWORD *)(a1 + 1260) = v96;
  v97 = *(_QWORD *)(a2 + 1272);
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1272) = v97;
  v98 = *(_QWORD *)(a2 + 1284);
  *(_DWORD *)(a1 + 1292) = *(_DWORD *)(a2 + 1292);
  *(_QWORD *)(a1 + 1284) = v98;
  v99 = *(_OWORD *)(a2 + 1296);
  v100 = *(_OWORD *)(a2 + 1312);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(_OWORD *)(a1 + 1312) = v100;
  *(_OWORD *)(a1 + 1296) = v99;
  return a1;
}

void sub_207D2F188(int *a1, int *a2)
{
  BOOL v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  char v10;
  int v11;
  char v12;

  if (*((_BYTE *)a1 + 40))
    v2 = *((_BYTE *)a2 + 40) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    sub_207D2F2C0(a1, a2);
    return;
  }
  if (*((_BYTE *)a1 + 40))
  {
    if (!*((_BYTE *)a2 + 40))
    {
      v3 = *(_BYTE *)a2;
      v4 = *((_BYTE *)a1 + 4);
      *a2 = *a1;
      *((_BYTE *)a2 + 4) = v4;
      *((_BYTE *)a2 + 8) = 0;
      *((_BYTE *)a2 + 32) = 0;
      if (*((_BYTE *)a1 + 32))
      {
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = 0;
        *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 2);
        *((_QWORD *)a2 + 3) = *((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 1) = 0;
        *((_QWORD *)a1 + 2) = 0;
        *((_QWORD *)a1 + 3) = 0;
        *((_BYTE *)a2 + 32) = 1;
      }
      *(_BYTE *)a1 = v3;
      v5 = *((_BYTE *)a1 + 40);
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      *((_BYTE *)a2 + 40) = v5;
      return;
    }
LABEL_14:
    v9 = *(_BYTE *)a1;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v9;
    return;
  }
  if (!*((_BYTE *)a2 + 40))
    goto LABEL_14;
  v11 = *a2;
  v12 = *((_BYTE *)a2 + 4);
  v6 = *((_BYTE *)a2 + 32);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 3);
    v8 = *(_OWORD *)(a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *((_BYTE *)a1 + 4) = v12;
    *a1 = v11;
    *(_OWORD *)(a1 + 2) = v8;
    v6 = 1;
    *((_QWORD *)a1 + 3) = v7;
  }
  else
  {
    *(_BYTE *)a2 = *(_BYTE *)a1;
    *((_BYTE *)a1 + 4) = v12;
    *a1 = v11;
    *((_BYTE *)a1 + 8) = 0;
  }
  *((_BYTE *)a1 + 32) = v6;
  v10 = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v10;
}

void sub_207D2F2C0(int *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  char v7;
  _BYTE *v8;
  void **v9;
  int v10;
  char v11;
  void *v12;
  void *v13;
  int v14;
  char v15;

  v14 = *a1;
  v15 = *((_BYTE *)a1 + 4);
  v5 = *((unsigned __int8 *)a1 + 32);
  if (*((_BYTE *)a1 + 32))
  {
    v6 = (void *)*((_QWORD *)a1 + 1);
    v3 = *((_QWORD *)a1 + 2);
    v2 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 2) = 0;
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 1) = 0;
    v7 = *((_BYTE *)a2 + 4);
    *a1 = *a2;
    *((_BYTE *)a1 + 4) = v7;
    v8 = a2 + 8;
    v9 = (void **)(a2 + 2);
    if (*((_BYTE *)a2 + 32))
    {
      *(_OWORD *)(a1 + 2) = *(_OWORD *)(a2 + 2);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *v9 = 0;
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
    }
    else
    {
      *((_BYTE *)a1 + 32) = 0;
    }
    v10 = 1;
  }
  else
  {
    v11 = *((_BYTE *)a2 + 4);
    *a1 = *a2;
    *((_BYTE *)a1 + 4) = v11;
    v8 = a2 + 8;
    v10 = *((unsigned __int8 *)a2 + 32);
    v9 = (void **)(a2 + 2);
    if (*((_BYTE *)a2 + 32))
    {
      v10 = 0;
      v6 = 0;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *((_QWORD *)a1 + 3) = 0;
      *(_OWORD *)(a1 + 2) = *(_OWORD *)(a2 + 2);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *v9 = 0;
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *((_BYTE *)a1 + 32) = 1;
    }
    else
    {
      v6 = 0;
    }
  }
  *a2 = v14;
  *((_BYTE *)a2 + 4) = v15;
  if (*((unsigned __int8 *)a2 + 32) == v10)
  {
    if (*((_BYTE *)a2 + 32))
    {
      v12 = *v9;
      if (*v9)
      {
        *((_QWORD *)a2 + 2) = v12;
        operator delete(v12);
      }
      *((_QWORD *)a2 + 1) = v6;
      *((_QWORD *)a2 + 2) = v3;
      *((_QWORD *)a2 + 3) = v2;
      return;
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + 32))
    {
      *((_QWORD *)a2 + 1) = v6;
      *((_QWORD *)a2 + 2) = v3;
      *((_QWORD *)a2 + 3) = v2;
      *((_BYTE *)a2 + 32) = 1;
      return;
    }
    v13 = *v9;
    if (*v9)
    {
      *((_QWORD *)a2 + 2) = v13;
      operator delete(v13);
    }
    *v8 = 0;
  }
  if (v5 && v6)
    operator delete(v6);
}

uint64_t *sub_207D2F45C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v6;

  v6 = (uint64_t *)operator new(0x30uLL);
  *v6 = 0;
  v6[1] = 0;
  v4 = a2[1];
  v6[2] = *a2;
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = 0;
  sub_207D08C50((uint64_t)(v6 + 3), v4, a2[2], 0xCF3CF3CF3CF3CF3DLL * ((a2[2] - v4) >> 6));
  v6[1] = v6[2];
  return sub_207D27200(a1, v6);
}

void sub_207D2F4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D08BD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D2F50C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D08BD4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D2F520(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_207D0CD58();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_207CA3AB8();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

uint64_t sub_207D2F690(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE *v40;
  _BYTE *v41;
  int64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE *v62;
  _BYTE *v63;
  int64_t v64;
  char *v65;
  char *v66;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_207D2FB20(a1 + 8, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  sub_207D2FCA8(a1 + 32, a2 + 32);
  v4 = *(_OWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  v6 = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 124) = v7;
  v8 = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v8;
  v9 = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 164) = v9;
  v10 = *(_QWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v10;
  v11 = *(_QWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_QWORD *)(a1 + 188) = v11;
  v12 = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v12;
  v13 = *(_QWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_QWORD *)(a1 + 212) = v13;
  v14 = *(_QWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v14;
  v15 = *(_QWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_QWORD *)(a1 + 236) = v15;
  v16 = *(_OWORD *)(a2 + 248);
  v17 = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v17;
  *(_OWORD *)(a1 + 248) = v16;
  v18 = *(_QWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v18;
  v19 = *(_OWORD *)(a2 + 300);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 300) = v19;
  v20 = *(_QWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v20;
  v21 = *(_QWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  *(_QWORD *)(a1 + 340) = v21;
  v22 = *(_QWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v22;
  v23 = *(_QWORD *)(a2 + 364);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(_QWORD *)(a1 + 364) = v23;
  v24 = *(_QWORD *)(a2 + 376);
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v24;
  v25 = *(_QWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_QWORD *)(a1 + 388) = v25;
  v26 = *(_QWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = v26;
  v27 = *(_QWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_QWORD *)(a1 + 412) = v27;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  v28 = *(_OWORD *)(a2 + 440);
  v29 = *(_OWORD *)(a2 + 456);
  v30 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v30;
  *(_OWORD *)(a1 + 440) = v28;
  *(_OWORD *)(a1 + 456) = v29;
  v31 = *(_OWORD *)(a2 + 504);
  v32 = *(_OWORD *)(a2 + 520);
  v33 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 552) = v33;
  *(_OWORD *)(a1 + 504) = v31;
  *(_OWORD *)(a1 + 520) = v32;
  v34 = *(_OWORD *)(a2 + 568);
  v35 = *(_OWORD *)(a2 + 584);
  v36 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v36;
  *(_OWORD *)(a1 + 568) = v34;
  *(_OWORD *)(a1 + 584) = v35;
  v37 = *(_OWORD *)(a2 + 632);
  v38 = *(_OWORD *)(a2 + 648);
  v39 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = v39;
  *(_OWORD *)(a1 + 632) = v37;
  *(_OWORD *)(a1 + 648) = v38;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  v40 = *(_BYTE **)(a2 + 696);
  v41 = *(_BYTE **)(a2 + 704);
  v42 = v41 - v40;
  if (v41 != v40)
  {
    if (v42 < 0)
      sub_207CA420C();
    v43 = (char *)operator new(v41 - v40);
    *(_QWORD *)(a1 + 696) = v43;
    *(_QWORD *)(a1 + 704) = v43;
    v44 = &v43[4 * (v42 >> 2)];
    *(_QWORD *)(a1 + 712) = v44;
    memcpy(v43, v40, v42);
    *(_QWORD *)(a1 + 704) = v44;
  }
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  v45 = *(_OWORD *)(a2 + 724);
  v46 = *(_OWORD *)(a2 + 740);
  *(_QWORD *)(a1 + 756) = *(_QWORD *)(a2 + 756);
  *(_OWORD *)(a1 + 740) = v46;
  *(_OWORD *)(a1 + 724) = v45;
  v47 = *(_QWORD *)(a2 + 764);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
  *(_QWORD *)(a1 + 764) = v47;
  v48 = *(_OWORD *)(a2 + 776);
  *(_OWORD *)(a1 + 788) = *(_OWORD *)(a2 + 788);
  *(_OWORD *)(a1 + 776) = v48;
  v49 = *(_QWORD *)(a2 + 804);
  *(_DWORD *)(a1 + 812) = *(_DWORD *)(a2 + 812);
  *(_QWORD *)(a1 + 804) = v49;
  v50 = *(_QWORD *)(a2 + 816);
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  *(_QWORD *)(a1 + 816) = v50;
  v51 = *(_QWORD *)(a2 + 828);
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
  *(_QWORD *)(a1 + 828) = v51;
  v52 = *(_QWORD *)(a2 + 840);
  *(_DWORD *)(a1 + 848) = *(_DWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 840) = v52;
  v53 = *(_QWORD *)(a2 + 852);
  *(_DWORD *)(a1 + 860) = *(_DWORD *)(a2 + 860);
  *(_QWORD *)(a1 + 852) = v53;
  v54 = *(_QWORD *)(a2 + 864);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 864) = v54;
  v55 = *(_QWORD *)(a2 + 876);
  *(_DWORD *)(a1 + 884) = *(_DWORD *)(a2 + 884);
  *(_QWORD *)(a1 + 876) = v55;
  v56 = *(_QWORD *)(a2 + 888);
  *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 888) = v56;
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a2 + 904);
  v57 = *(_OWORD *)(a2 + 920);
  v58 = *(_OWORD *)(a2 + 936);
  v59 = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(a1 + 964) = *(_OWORD *)(a2 + 964);
  *(_OWORD *)(a1 + 936) = v58;
  *(_OWORD *)(a1 + 952) = v59;
  *(_OWORD *)(a1 + 920) = v57;
  sub_207D3015C(a1 + 984, a2 + 984);
  v60 = *(_OWORD *)(a2 + 1024);
  v61 = *(_OWORD *)(a2 + 1040);
  *(_DWORD *)(a1 + 1056) = *(_DWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1040) = v61;
  *(_OWORD *)(a1 + 1024) = v60;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  v62 = *(_BYTE **)(a2 + 1064);
  v63 = *(_BYTE **)(a2 + 1072);
  v64 = v63 - v62;
  if (v63 != v62)
  {
    if (v64 < 0)
      sub_207D0CD58();
    v65 = (char *)operator new(v63 - v62);
    *(_QWORD *)(a1 + 1064) = v65;
    *(_QWORD *)(a1 + 1072) = v65;
    v66 = &v65[4 * (v64 >> 2)];
    *(_QWORD *)(a1 + 1080) = v66;
    memcpy(v65, v62, v64);
    *(_QWORD *)(a1 + 1072) = v66;
  }
  return a1;
}

void sub_207D2FABC(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 704) = v6;
    operator delete(v6);
  }
  sub_207D04630(v3);
  sub_207D0468C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D2FB20(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x9A90E7D95BC60ALL)
      sub_207CA420C();
    result = (uint64_t)operator new(424 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 424 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_207D26438(v8 + v9, a2 + v9);
        v9 += 424;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_207D2FBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207D2FC24(&a9);
  _Unwind_Resume(a1);
}

void sub_207D2FBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 424)
    sub_207D049E4(v10 - 424 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_207D2FC24(&a9);
  _Unwind_Resume(a1);
}

void ***sub_207D2FC24(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_207D049E4(v4 - 424);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D2FCA8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_207D2FDE8(a1, i + 2, i + 2);
  return a1;
}

void sub_207D2FDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D04630(v1);
  _Unwind_Resume(a1);
}

void sub_207D2FDD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D04630(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D2FDE8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (result[2] == v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = operator new(0x2C0uLL);
  *v27 = 0;
  v27[1] = v6;
  v27[2] = *a3;
  sub_207D280EC((uint64_t)(v27 + 3), (uint64_t)(a3 + 1));
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v21)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v21)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < *(_QWORD *)&v21)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v25 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v16 = v27;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v16 = v27;
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v25 & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v25 & v6));
      v16 = v27;
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v27)
    {
      v26 = *(_QWORD *)(*v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7)
          v26 %= v7;
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v16 = v27;
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v16 = *v15;
  *v15 = v27;
LABEL_61:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_207D30134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D04FE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D30148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D04FE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D3015C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_207D3029C(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_207D30274(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CBD56C(v1);
  _Unwind_Resume(a1);
}

void sub_207D30288(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CBD56C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D3029C(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207D305A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D305BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C073000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D305CC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C073000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

_QWORD *sub_207D305EC(uint64_t a1)
{
  void *v2;
  void **v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void **v12;
  _QWORD *v13;
  uint64_t v14;

  if (!*(_BYTE *)(a1 + 1808) || (*(char *)(a1 + 1807) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 1728);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 1784));
  v2 = *(void **)(a1 + 1728);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 1736) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = *(void ***)(a1 + 1680);
  if (v3)
  {
    do
    {
      v12 = (void **)*v3;
      if (*((char *)v3 + 39) < 0)
        operator delete(v3[2]);
      operator delete(v3);
      v3 = v12;
    }
    while (v12);
  }
  v4 = *(void **)(a1 + 1664);
  *(_QWORD *)(a1 + 1664) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)(a1 + 1632) = off_24C06E9E8;
  v5 = *(std::__shared_weak_count **)(a1 + 1656);
  if (!v5)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_12:
    sub_207D31050(a1 + 1184);
    v8 = *(void **)(a1 + 1152);
    if (!v8)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  sub_207D31050(a1 + 1184);
  v8 = *(void **)(a1 + 1152);
  if (v8)
  {
LABEL_13:
    *(_QWORD *)(a1 + 1160) = v8;
    operator delete(v8);
  }
LABEL_14:
  v9 = *(_QWORD **)(a1 + 1128);
  if (v9)
  {
    do
    {
      v13 = (_QWORD *)*v9;
      v14 = v9[3];
      v9[3] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      operator delete(v9);
      v9 = v13;
    }
    while (v13);
  }
  v10 = *(void **)(a1 + 1112);
  *(_QWORD *)(a1 + 1112) = 0;
  if (v10)
    operator delete(v10);
  return sub_207D04BC4((_QWORD *)(a1 + 24));
}

uint64_t sub_207D30744(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  size_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  void **v18;
  void **v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *__p[2];
  int64_t v33;

  v5 = sub_207D2F690(a1, a2);
  *(_OWORD *)(v5 + 1104) = 0u;
  *(_OWORD *)(v5 + 1088) = 0u;
  *(_DWORD *)(v5 + 1120) = 1065353216;
  *(_QWORD *)(v5 + 1128) = 0;
  *(_QWORD *)(v5 + 1144) = 0;
  *(_QWORD *)(v5 + 1136) = 0;
  sub_207D30C0C(v5 + 1160);
  *(_QWORD *)(a1 + 1608) = off_24C06E9E8;
  *(_BYTE *)(a1 + 1616) = 0;
  v6 = operator new(0x18uLL);
  v6[23] = 0;
  *v6 = 0;
  *(_QWORD *)(a1 + 1624) = v6;
  v7 = operator new(0x20uLL);
  *v7 = &unk_24C06F1C0;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  *(_QWORD *)(a1 + 1632) = v7;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_DWORD *)(a1 + 1672) = 1065353216;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  v8 = operator new(0xF0uLL);
  *(_QWORD *)(a1 + 1704) = v8;
  *(_QWORD *)(a1 + 1720) = v8 + 15;
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  *(_QWORD *)(a1 + 1712) = v8 + 15;
  v9 = (_OWORD *)(a1 + 1760);
  *(_BYTE *)(a1 + 1784) = 0;
  *(_BYTE *)(a1 + 1760) = 0;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  if (!*((_BYTE *)a3 + 24))
    goto LABEL_36;
  if (*((char *)a3 + 23) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 1760), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 1776) = *((_QWORD *)a3 + 2);
    *v9 = v10;
  }
  *(_BYTE *)(a1 + 1784) = 1;
  v11 = *(char *)(a1 + 1783);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 1783);
  else
    v12 = *(_QWORD *)(a1 + 1768);
  v13 = v12 + 9;
  if (v12 + 9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __p[1] = (void *)(v12 + 9);
    v33 = v16 | 0x8000000000000000;
    __p[0] = v14;
  }
  else
  {
    __p[1] = 0;
    v33 = 0;
    __p[0] = 0;
    v14 = __p;
    HIBYTE(v33) = v12 + 9;
    if (!v12)
      goto LABEL_19;
  }
  if (v11 >= 0)
    v17 = (const void *)(a1 + 1760);
  else
    v17 = *(const void **)v9;
  memmove(v14, v17, v12);
LABEL_19:
  strcpy((char *)v14 + v12, ".detector");
  v18 = (void **)(a1 + 1544);
  if (*(_BYTE *)(a1 + 1568))
  {
    if (v18 != __p)
    {
      if (*(char *)(a1 + 1567) < 0)
      {
        if (v33 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        if (v33 >= 0)
          v20 = HIBYTE(v33);
        else
          v20 = (size_t)__p[1];
        sub_207CC2244(v18, v19, v20);
      }
      else if (v33 < 0)
      {
        sub_207CC2180(v18, __p[0], (size_t)__p[1]);
      }
      else
      {
        *(_OWORD *)v18 = *(_OWORD *)__p;
        *(_QWORD *)(a1 + 1560) = v33;
      }
    }
  }
  else
  {
    if (SHIBYTE(v33) < 0)
    {
      sub_207CA40D8(v18, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 1560) = v33;
    }
    *(_BYTE *)(a1 + 1568) = 1;
  }
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_36:
    v21 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (!v21)
      goto LABEL_42;
    goto LABEL_37;
  }
  operator delete(__p[0]);
  v21 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  if (!v21)
    goto LABEL_42;
LABEL_37:
  v22 = 0;
  v23 = v21 / 424;
  v24 = 88;
  do
  {
    v25 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v24);
    v27 = *v25;
    v26 = v25 - 24;
    if (v27)
    {
      __p[0] = v26;
      sub_207D2CF4C(a1 + 1640, (uint64_t)v26, (uint64_t)&unk_20822AD51, (__int128 **)__p)[5] = v22;
    }
    ++v22;
    v24 += 424;
  }
  while (v23 != v22);
LABEL_42:
  sub_207D29B3C((uint64_t)__p, a1);
  v28 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v29 = (unint64_t *)((char *)__p[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_207D30AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;

  if (*(_BYTE *)(v14 + 1784) && *(char *)(v14 + 1783) < 0)
    operator delete(*v17);
  v19 = *(void **)(v14 + 1704);
  if (v19)
  {
    *(_QWORD *)(v14 + 1712) = v19;
    operator delete(v19);
  }
  sub_207C9BBC4(v16);
  sub_207C9C674((_QWORD *)(v14 + 1608));
  sub_207D31050(v15);
  v20 = *(void **)(v14 + 1128);
  if (v20)
  {
    *(_QWORD *)(v14 + 1136) = v20;
    operator delete(v20);
  }
  sub_207D30B9C(v14 + 1088);
  sub_207D04BC4((_QWORD *)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_207D30B9C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_207D30C0C(uint64_t a1)
{
  _DWORD *v2;

  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 47) = 7;
  strcpy((char *)(a1 + 24), "image_y");
  *(_BYTE *)(a1 + 71) = 10;
  strcpy((char *)(a1 + 48), "image_cbcr");
  *(_WORD *)(a1 + 72) = 257;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  v2 = operator new(4uLL);
  *(_QWORD *)(a1 + 424) = v2;
  *v2++ = 0;
  *(_QWORD *)(a1 + 432) = v2;
  *(_QWORD *)(a1 + 440) = v2;
  return a1;
}

void sub_207D30D34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v9;
  void *v10;

  sub_207C9BBC4(v4);
  sub_207D30DA0(v3);
  sub_207D30DA0(v6);
  sub_207D30F74(v5);
  sub_207D30E54(v1 + 160);
  v9 = *(void **)(v1 + 136);
  if (v9)
  {
    *(_QWORD *)(v1 + 144) = v9;
    operator delete(v9);
  }
  v10 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v1 + 120) = v10;
    operator delete(v10);
  }
  sub_207CFF9E4(v2, *(char **)(v1 + 88));
  sub_207D30F1C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D30DA0(uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

uint64_t sub_207D30E54(uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v2[5] = &off_24C08A5D8;
        v4 = (std::__shared_weak_count *)v2[7];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

uint64_t sub_207D30F1C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_207D30F74(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  void (**v6)(void);
  void (*v7)(void);

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (void (**)(void))*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v6)
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
          v6[1]();
        operator delete(v6);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_207D31008(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

uint64_t sub_207D31050(uint64_t a1)
{
  void *v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  void **v12;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void **v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;

  v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(_QWORD *)(a1 + 432) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 408) && *(char *)(a1 + 407) < 0)
  {
    operator delete(*(void **)(a1 + 384));
    if ((*(char *)(a1 + 383) & 0x80000000) == 0)
    {
LABEL_6:
      v3 = *(void ***)(a1 + 336);
      if (!v3)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else if ((*(char *)(a1 + 383) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 360));
  v3 = *(void ***)(a1 + 336);
  if (!v3)
    goto LABEL_10;
  do
  {
LABEL_15:
    v6 = (void **)*v3;
    if (*((char *)v3 + 39) < 0)
      operator delete(v3[2]);
    operator delete(v3);
    v3 = v6;
  }
  while (v6);
LABEL_10:
  v4 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void ***)(a1 + 296);
  if (v5)
  {
    do
    {
      while (1)
      {
        v7 = (void **)*v5;
        v8 = (std::__shared_weak_count *)v5[6];
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        if (*((char *)v5 + 39) < 0)
          break;
        operator delete(v5);
        v5 = v7;
        if (!v7)
          goto LABEL_25;
      }
      operator delete(v5[2]);
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
LABEL_25:
  v11 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(void ***)(a1 + 256);
  if (v12)
  {
    do
    {
      while (1)
      {
        v13 = (void **)*v12;
        v14 = (std::__shared_weak_count *)v12[6];
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (*((char *)v12 + 39) < 0)
          break;
        operator delete(v12);
        v12 = v13;
        if (!v13)
          goto LABEL_37;
      }
      operator delete(v12[2]);
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
LABEL_37:
  v17 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v17)
    operator delete(v17);
  sub_207D30F74(a1 + 200);
  v18 = *(void ***)(a1 + 176);
  if (v18)
  {
    do
    {
      while (1)
      {
        v19 = (void **)*v18;
        v18[5] = &off_24C08A5D8;
        v20 = (std::__shared_weak_count *)v18[7];
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (*((char *)v18 + 39) < 0)
          break;
        operator delete(v18);
        v18 = v19;
        if (!v19)
          goto LABEL_49;
      }
      operator delete(v18[2]);
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
LABEL_49:
  v23 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v23)
    operator delete(v23);
  v24 = *(void **)(a1 + 136);
  if (v24)
  {
    *(_QWORD *)(a1 + 144) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 112);
  if (v25)
  {
    *(_QWORD *)(a1 + 120) = v25;
    operator delete(v25);
  }
  sub_207CFF9E4(a1 + 80, *(char **)(a1 + 88));
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_207D31330(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  size_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t **v24;
  size_t v25;
  uint8x8_t v26;
  unint64_t v27;
  size_t v28;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  uint64_t *v34;
  size_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  int v53;
  uint8x8_t v54;
  uint64_t *v55;
  char v56;
  uint64_t v57;
  int v58;
  _BOOL4 v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const void **v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  char v73;
  BOOL v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  _BOOL4 v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void **v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  uint8x8_t v94;
  size_t v95;
  void *v96;
  uint8x8_t v97;
  void *__s1;
  unint64_t v99;
  unsigned __int8 *v100;
  _QWORD *v101;
  unint64_t v102;
  char v103;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = sub_207CA77C0((uint64_t)&v103, v7, v8);
  v2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  v101 = v2;
  v102 = v9;
  if (v10 && (float)(v12 * (float)v10) >= v11)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] <= 1uLL)
      goto LABEL_10;
    goto LABEL_99;
  }
  v100 = v4;
  v16 = 1;
  if (v10 >= 3)
    v16 = (v10 & (v10 - 1)) != 0;
  v17 = v16 | (2 * v10);
  v18 = vcvtps_u32_f32(v11 / v12);
  if (v17 <= v18)
    v19 = v18;
  else
    v19 = v17;
  if (v19 == 1)
  {
    v19 = 2;
  }
  else if ((v19 & (v19 - 1)) != 0)
  {
    prime = std::__next_prime(v19);
    v9 = v102;
    v19 = prime;
    v10 = *(_QWORD *)(a1 + 8);
  }
  if (v19 > v10)
    goto LABEL_21;
  if (v19 >= v10)
    goto LABEL_98;
  v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
  {
    v95 = std::__next_prime(v28);
    v9 = v102;
    if (v19 <= v95)
      v19 = v95;
    if (v19 >= v10)
      goto LABEL_37;
  }
  else
  {
    v30 = 1 << -(char)__clz(v28 - 1);
    if (v28 >= 2)
      v28 = v30;
    if (v19 <= v28)
      v19 = v28;
    if (v19 >= v10)
    {
LABEL_37:
      v10 = *(_QWORD *)(a1 + 8);
      goto LABEL_98;
    }
  }
  if (!v19)
  {
    v96 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    v4 = v100;
    if (v96)
    {
      operator delete(v96);
      v9 = v102;
    }
    v10 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v97 = (uint8x8_t)vcnt_s8(0);
    v97.i16[0] = vaddlv_u8(v97);
    v14 = v97.u32[0];
    if (v97.u32[0] > 1uLL)
      goto LABEL_99;
LABEL_10:
    v15 = (v10 - 1) & v9;
    goto LABEL_101;
  }
LABEL_21:
  if (v19 >> 61)
    sub_207CA3AB8();
  v21 = operator new(8 * v19);
  v22 = *(void **)a1;
  *(_QWORD *)a1 = v21;
  if (v22)
    operator delete(v22);
  v23 = 0;
  *(_QWORD *)(a1 + 8) = v19;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
  while (v19 != v23);
  v24 = *(uint64_t ***)(a1 + 16);
  v9 = v102;
  if (!v24)
    goto LABEL_97;
  v25 = (size_t)v24[1];
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
  v26.i16[0] = vaddlv_u8(v26);
  v27 = v26.u32[0];
  if (v26.u32[0] > 1uLL)
  {
    if (v25 >= v19)
      v25 %= v19;
  }
  else
  {
    v25 &= v19 - 1;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 16;
  v31 = *v24;
  if (!*v24)
  {
LABEL_97:
    v10 = v19;
LABEL_98:
    v4 = v100;
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v54.i16[0] = vaddlv_u8(v54);
    v14 = v54.u32[0];
    if (v54.u32[0] <= 1uLL)
      goto LABEL_10;
    goto LABEL_99;
  }
  v32 = v19 - 1;
  v99 = v26.u32[0];
  do
  {
    v33 = v31[1];
    if (v27 > 1)
    {
      if (v33 >= v19)
        v33 %= v19;
    }
    else
    {
      v33 &= v32;
    }
    if (v33 == v25)
    {
      v24 = (uint64_t **)v31;
      goto LABEL_43;
    }
    if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v24;
      v24 = (uint64_t **)v31;
      v25 = v33;
      goto LABEL_43;
    }
    v34 = (uint64_t *)*v31;
    if (!*v31)
      goto LABEL_77;
    v35 = v31[3];
    if (*((char *)v31 + 39) >= 0)
      v36 = *((unsigned __int8 *)v31 + 39);
    else
      v36 = v31[3];
    if ((*((_BYTE *)v31 + 39) & 0x80) == 0)
    {
      if (*((_BYTE *)v31 + 39))
      {
        v37 = (uint64_t *)*v31;
        v38 = v31;
LABEL_57:
        v34 = v37;
        v39 = *((unsigned __int8 *)v37 + 39);
        v40 = (char)v39;
        if ((v39 & 0x80u) != 0)
          v39 = v34[3];
        if (v36 == v39)
        {
          if (v40 >= 0)
            v41 = (unsigned __int8 *)(v34 + 2);
          else
            v41 = (unsigned __int8 *)v34[2];
          v42 = (unsigned __int8 *)(v31 + 2);
          v43 = *((unsigned __int8 *)v31 + 39);
          while (*v42 == *v41)
          {
            ++v42;
            ++v41;
            if (!--v43)
            {
              v37 = (uint64_t *)*v34;
              v38 = v34;
              v34 = 0;
              if (v37)
                goto LABEL_57;
              goto LABEL_78;
            }
          }
        }
      }
      else
      {
        v48 = *((unsigned __int8 *)v34 + 39);
        if ((v48 & 0x80u) != 0)
          v48 = v34[3];
        v38 = v31;
        if (v48 == *((unsigned __int8 *)v31 + 39))
        {
          do
          {
            v38 = v34;
            v34 = (uint64_t *)*v34;
            if (!v34)
              break;
            v49 = *((unsigned __int8 *)v34 + 39);
            if ((v49 & 0x80u) != 0)
              v49 = v34[3];
          }
          while (v36 == v49);
        }
      }
      goto LABEL_78;
    }
    v44 = *((unsigned __int8 *)v34 + 39);
    v45 = (char)v44;
    if ((v44 & 0x80u) != 0)
      v44 = v34[3];
    if (v35 == v44)
    {
      v46 = (void *)v31[2];
      if (v45 >= 0)
        v47 = v34 + 2;
      else
        v47 = (const void *)v34[2];
      if (!memcmp((const void *)v31[2], v47, v31[3]))
      {
        __s1 = v46;
        v9 = v102;
        v32 = v19 - 1;
        v27 = v99;
        do
        {
          v38 = v34;
          v34 = (uint64_t *)*v34;
          if (!v34)
            break;
          v50 = *((unsigned __int8 *)v34 + 39);
          v51 = (char)v50;
          if ((v50 & 0x80u) != 0)
            v50 = v34[3];
          if (v36 != v50)
            break;
          v52 = v51 >= 0 ? v34 + 2 : (uint64_t *)v34[2];
          v53 = memcmp(__s1, v52, v35);
          v32 = v19 - 1;
          v27 = v99;
          v9 = v102;
        }
        while (!v53);
      }
      else
      {
        v38 = v31;
        v9 = v102;
        v32 = v19 - 1;
        v27 = v99;
      }
    }
    else
    {
LABEL_77:
      v38 = v31;
    }
LABEL_78:
    *v24 = v34;
    *v38 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
    **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v31;
LABEL_43:
    v31 = *v24;
  }
  while (*v24);
  v10 = v19;
  v4 = v100;
  v2 = v101;
  v94 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v94.i16[0] = vaddlv_u8(v94);
  v14 = v94.u32[0];
  if (v94.u32[0] <= 1uLL)
    goto LABEL_10;
LABEL_99:
  v15 = v9;
  if (v10 <= v9)
    v15 = v9 % v10;
LABEL_101:
  v55 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v15);
  if (v55)
  {
    v56 = *((_BYTE *)v2 + 39);
    if (v56 >= 0)
      v57 = *((unsigned __int8 *)v2 + 39);
    else
      v57 = v2[3];
    if (v56 < 0)
      v4 = (unsigned __int8 *)v2[2];
    if (v14 >= 2)
    {
      v78 = 0;
      do
      {
        v61 = v55;
        v55 = (uint64_t *)*v55;
        if (!v55)
          break;
        v81 = v55[1];
        v82 = v81;
        if (v81 >= v10)
          v82 = v81 % v10;
        if (v82 != v15)
          break;
        if (v81 == v9
          && ((v83 = *((unsigned __int8 *)v55 + 39), (v83 & 0x80u) == 0)
            ? (v84 = *((unsigned __int8 *)v55 + 39))
            : (v84 = v55[3]),
              v84 == v57))
        {
          v85 = (const void **)(v55 + 2);
          if ((v83 & 0x80) != 0)
          {
            v93 = memcmp(*v85, v4, v55[3]);
            v9 = v102;
            v79 = v93 == 0;
          }
          else if (*((_BYTE *)v55 + 39))
          {
            v86 = v83 - 1;
            v87 = v4;
            do
            {
              v89 = *(unsigned __int8 *)v85;
              v85 = (const void **)((char *)v85 + 1);
              v88 = v89;
              v91 = *v87++;
              v90 = v91;
              v72 = v86-- != 0;
              v92 = v72;
              v74 = v88 == v90;
              v79 = v88 == v90;
            }
            while (v74 && (v92 & 1) != 0);
          }
          else
          {
            v79 = 1;
          }
        }
        else
        {
          v79 = 0;
        }
        v80 = v78 & !v79;
        v78 |= v79;
      }
      while (v80 != 1);
    }
    else
    {
      v58 = 0;
      do
      {
        v61 = v55;
        v55 = (uint64_t *)*v55;
        if (!v55)
          break;
        v62 = v55[1];
        if ((v62 & (v10 - 1)) != v15)
          break;
        if (v62 == v9
          && ((v63 = *((unsigned __int8 *)v55 + 39), (v63 & 0x80u) == 0)
            ? (v64 = *((unsigned __int8 *)v55 + 39))
            : (v64 = v55[3]),
              v64 == v57))
        {
          v65 = (const void **)(v55 + 2);
          if ((v63 & 0x80) != 0)
          {
            v75 = memcmp(*v65, v4, v55[3]);
            v9 = v102;
            v59 = v75 == 0;
          }
          else if (*((_BYTE *)v55 + 39))
          {
            v66 = v63 - 1;
            v67 = v4;
            do
            {
              v69 = *(unsigned __int8 *)v65;
              v65 = (const void **)((char *)v65 + 1);
              v68 = v69;
              v71 = *v67++;
              v70 = v71;
              v72 = v66-- != 0;
              v73 = v72;
              v74 = v68 == v70;
              v59 = v68 == v70;
            }
            while (v74 && (v73 & 1) != 0);
          }
          else
          {
            v59 = 1;
          }
        }
        else
        {
          v59 = 0;
        }
        v60 = v58 & !v59;
        v58 |= v59;
      }
      while ((v60 & 1) == 0);
    }
  }
  else
  {
    v61 = 0;
  }
  v76 = v101[1];
  if (v14 > 1)
  {
    if (v76 >= v10)
      v76 %= v10;
  }
  else
  {
    v76 &= v10 - 1;
  }
  if (!v61)
  {
    *v101 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v101;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v76) = a1 + 16;
    if (!*v101)
      goto LABEL_173;
    v77 = *(_QWORD *)(*v101 + 8);
    if (v14 > 1)
    {
      if (v77 >= v10)
        v77 %= v10;
    }
    else
    {
      v77 &= v10 - 1;
    }
LABEL_172:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v77) = v101;
    goto LABEL_173;
  }
  *v101 = *v61;
  *v61 = v101;
  if (*v101)
  {
    v77 = *(_QWORD *)(*v101 + 8);
    if (v14 > 1)
    {
      if (v77 >= v10)
        v77 %= v10;
    }
    else
    {
      v77 &= v10 - 1;
    }
    if (v77 != v76)
      goto LABEL_172;
  }
LABEL_173:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t sub_207D31AD0(uint64_t a1, double a2, double a3, double a4, double a5, int64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  unsigned int v8;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  _BOOL4 v51;
  _BOOL4 v52;

  v8 = *(_DWORD *)(a1 + 992);
  if (!v8)
    return 0;
  if (v8 == -1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v8 = *(_DWORD *)(a1 + 992);
  }
  if (v8 <= 7)
  {
    if (v8 <= 3)
    {
      if (v8 <= 1)
      {
        if (!v8)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821CCC2, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
          abort();
        }
        v10 = 0;
        do
        {
          v11 = (*(_QWORD *)(a1 + v10) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v10 == 64;
          v10 += 8;
        }
        while (!v15);
        if (v11)
        {
          v12 = 0;
          do
          {
            v13 = (*(_QWORD *)(a1 + 72 + v12) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 72 + v12) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              break;
            v15 = v12 == 64;
            v12 += 8;
          }
          while (!v15);
          if (v13 && fabs(*(double *)(a1 + 48)) < 0.00000001 && fabs(*(double *)(a1 + 56)) < 0.00000001)
            return fabs(*(double *)(a1 + 64) + -1.0) < 0.00000001;
        }
        return 0;
      }
      if (v8 == 2)
      {
        v31 = 0;
        do
        {
          v32 = (*(_QWORD *)(a1 + v31) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v31) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v31 == 64;
          v31 += 8;
        }
        while (!v15);
        if (v32)
        {
          v33 = 0;
          do
          {
            v34 = (*(_QWORD *)(a1 + 72 + v33) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 72 + v33) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              break;
            v15 = v33 == 64;
            v33 += 8;
          }
          while (!v15);
          if (v34
            && fabs(*(double *)(a1 + 48)) < 0.00000001
            && fabs(*(double *)(a1 + 56)) < 0.00000001
            && fabs(*(double *)(a1 + 64) + -1.0) < 0.00000001)
          {
            v35 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v35 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                v35 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            }
            if (v35)
            {
              result = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                return (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              return result;
            }
          }
        }
        return 0;
      }
      v45 = 0;
      do
      {
        v46 = (*(_QWORD *)(a1 + v45) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + v45) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v45 == 64;
        v45 += 8;
      }
      while (!v15);
      if (!v46)
        return 0;
      v47 = 0;
      do
      {
        v28 = (*(_QWORD *)(a1 + 72 + v47) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 72 + v47) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v47 == 64;
        v47 += 8;
      }
      while (!v15);
      goto LABEL_159;
    }
    v24 = v8 == 5;
    if (v8 <= 5)
    {
      v25 = 0;
      if (v24)
      {
        do
        {
          v26 = (*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v25 == 64;
          v25 += 8;
        }
        while (!v15);
        if (!v26)
          return 0;
        v27 = 0;
        do
        {
          v28 = (*(_QWORD *)(a1 + 72 + v27) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 72 + v27) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v27 == 64;
          v27 += 8;
        }
        while (!v15);
      }
      else
      {
        do
        {
          v29 = (*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v25 == 64;
          v25 += 8;
        }
        while (!v15);
        if (!v29)
          return 0;
        v30 = 0;
        do
        {
          v28 = (*(_QWORD *)(a1 + 72 + v30) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 72 + v30) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          v15 = v30 == 64;
          v30 += 8;
        }
        while (!v15);
      }
      goto LABEL_159;
    }
    if (v8 == 6)
    {
      v36 = 0;
      do
      {
        v37 = (*(_QWORD *)(a1 + v36) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + v36) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v36 == 64;
        v36 += 8;
      }
      while (!v15);
      if (!v37)
        return 0;
      v38 = 0;
      do
      {
        v39 = (*(_QWORD *)(a1 + 72 + v38) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 72 + v38) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v38 == 64;
        v38 += 8;
      }
      while (!v15);
      if (!v39
        || fabs(*(double *)(a1 + 48)) >= 0.00000001
        || fabs(*(double *)(a1 + 56)) >= 0.00000001
        || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
      {
        return 0;
      }
      v40 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v40 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          v40 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
      if (!v40)
        return 0;
      v41 = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v41 = (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (!v41)
        return 0;
      result = (*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        return (*(_QWORD *)(a1 + 216) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      return result;
    }
    v48 = 0;
    do
    {
      v49 = (*(_QWORD *)(a1 + v48) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + v48) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v48 == 64;
      v48 += 8;
    }
    while (!v15);
    if (!v49)
      return 0;
    v50 = 0;
    do
    {
      v51 = (*(_QWORD *)(a1 + 72 + v50) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 72 + v50) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v50 == 64;
      v50 += 8;
    }
    while (!v15);
    if (!v51
      || fabs(*(double *)(a1 + 48)) >= 0.00000001
      || fabs(*(double *)(a1 + 56)) >= 0.00000001
      || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
    {
      return 0;
    }
    v52 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v52 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v52 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          v52 = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
    }
    if (!v52)
      return 0;
    result = *(_QWORD *)(a1 + 472);
    if (!result)
      return result;
    return sub_208110298(result);
  }
  if (v8 <= 0xB)
  {
    v15 = v8 == 9;
    if (v8 > 9)
    {
      if (v8 == 10)
        return sub_207D327C8(a1);
      else
        return sub_208116DF0(a1);
    }
    v16 = 0;
    if (!v15)
    {
      do
      {
        v21 = (*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v16 == 64;
        v16 += 8;
      }
      while (!v15);
      if (!v21)
        return 0;
      v22 = 0;
      do
      {
        v23 = (*(_QWORD *)(a1 + 72 + v22) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 72 + v22) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          break;
        v15 = v22 == 64;
        v22 += 8;
      }
      while (!v15);
      if (!v23
        || fabs(*(double *)(a1 + 48)) >= 0.00000001
        || fabs(*(double *)(a1 + 56)) >= 0.00000001
        || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
      {
        return 0;
      }
      result = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        result = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          result = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            result = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              result = (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                result = (*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                if ((*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                  return (*(_QWORD *)(a1 + 216) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              }
            }
          }
        }
      }
      return result;
    }
    do
    {
      v17 = (*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + v16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v16 == 64;
      v16 += 8;
    }
    while (!v15);
    if (!v17)
      return 0;
    v18 = 0;
    do
    {
      v19 = (*(_QWORD *)(a1 + 72 + v18) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 72 + v18) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        break;
      v15 = v18 == 64;
      v18 += 8;
    }
    while (!v15);
    if (!v19
      || fabs(*(double *)(a1 + 48)) >= 0.00000001
      || fabs(*(double *)(a1 + 56)) >= 0.00000001
      || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
    {
      return 0;
    }
    v20 = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v20 = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v20 = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v20 = (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v20 = (*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            if ((*(_QWORD *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              v20 = (*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(a1 + 208) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                v20 = (*(_QWORD *)(a1 + 216) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
            }
          }
        }
      }
    }
    if (!v20)
      return 0;
    result = *(_QWORD *)(a1 + 496);
    if (!result)
      return result;
    return sub_208110298(result);
  }
  if (v8 > 0xD)
  {
    if (v8 == 14)
      return sub_207D32B98(a1);
    else
      return sub_208117AA0(a1);
  }
  if (v8 == 13)
    return sub_2081181D8(a1, a2, a3, a4, a5, a6, a7, a8);
  v42 = 0;
  do
  {
    v43 = (*(_QWORD *)(a1 + v42) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v42) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v15 = v42 == 64;
    v42 += 8;
  }
  while (!v15);
  if (!v43)
    return 0;
  v44 = 0;
  do
  {
    v28 = (*(_QWORD *)(a1 + 72 + v44) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 72 + v44) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v15 = v44 == 64;
    v44 += 8;
  }
  while (!v15);
LABEL_159:
  if (!v28
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  result = (*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    result = (*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      result = (*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        return (*(_QWORD *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    }
  }
  return result;
}

void sub_207D32610(uint64_t a1, uint64_t a2, double a3, double a4, int8x16_t a5, int8x16_t a6, int64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  int v11;
  double v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;

  v11 = *(_DWORD *)(a1 + 992);
  if (v11 == -1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_10;
    }
    v11 = *(_DWORD *)(a1 + 992);
  }
  if (!v11)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821CCC2, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
LABEL_10:
    abort();
  }
  if (*(_BYTE *)(a2 + 8))
  {
    LODWORD(a3) = *(_DWORD *)a2;
    LODWORD(a4) = *(_DWORD *)(a2 + 4);
    *(double *)a5.i64 = (double)*(unint64_t *)&a3;
    v12 = (double)*(unint64_t *)&a4;
    v13 = *(double *)(a1 + 16);
    a6.i64[0] = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v13 = *(double *)(a1 + 16);
    *(double *)a5.i64 = v13 + v13;
    a6.i64[0] = *(_QWORD *)(a1 + 40);
    v12 = *(double *)a6.i64 + *(double *)a6.i64;
  }
  v37.f64[0] = v13;
  *(_QWORD *)&v37.f64[1] = a6.i64[0];
  v33 = (float64x2_t)*(unint64_t *)&v13;
  v34.f64[0] = 0.0;
  *(_QWORD *)&v34.f64[1] = a6.i64[0];
  *(_QWORD *)&v35.f64[0] = a5.i64[0];
  *(_QWORD *)&v35.f64[1] = a6.i64[0];
  v36.f64[0] = v13;
  v36.f64[1] = v12;
  sub_207D32E64(a1, &v37, &v33, &v32, a5, a6, a7, a8, a9);
  sub_207D32E64(a1, &v37, &v34, &v31, v14, v15, v16, v17, v18);
  sub_207D32E64(a1, &v37, &v35, &v30, v19, v20, v21, v22, v23);
  sub_207D32E64(a1, &v37, &v36, &v29, v24, v25, v26, v27, v28);
}

uint64_t sub_207D327C8(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __n128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t *p_shared_owners;
  unint64_t *v26;
  _OWORD v27[4];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  _QWORD v36[63];
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;

  v1 = 0;
  v43 = *MEMORY[0x24BDAC8D0];
  do
  {
    v2 = (*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v1 == 64;
    v1 += 8;
  }
  while (!v3);
  if (!v2)
    return 0;
  v4 = 72;
  do
  {
    v5 = (*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v4 == 136;
    v4 += 8;
  }
  while (!v3);
  if (!v5
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v6 = 168;
  do
  {
    v7 = (*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v6 == 272;
    v6 += 8;
  }
  while (!v3);
  if (!v7)
    return 0;
  v8 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v9;
  v10 = *(_OWORD *)(a1 + 72);
  v30 = *(_OWORD *)(a1 + 88);
  v11 = *(_OWORD *)(a1 + 120);
  v31 = *(_OWORD *)(a1 + 104);
  v32 = v11;
  v28 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 136);
  v29 = v10;
  v35 = *(_BYTE *)(a1 + 160);
  v34 = *(_OWORD *)(a1 + 144);
  memcpy(v36, (const void *)(a1 + 168), 0x1E9uLL);
  v39 = 10;
  v40 = 0x7FF8000000000000;
  v41 = 0xFFEFFFFFFFFFFFFFLL;
  v12.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v42 = xmmword_2082339B0;
  v12.n128_u64[0] = 0.5;
  v19 = sub_20811851C((uint64_t)v27, 0, 0, v12, v13, v14, v15, v16, v17, v18);
  if (v39 != -1)
  {
    if (v39 > 7)
    {
      if (v39 > 0xB)
      {
        if (v39 < 0xF)
          return v19;
        v20 = v38;
        if (!v38)
          return v19;
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
      }
      else if (v39 > 9)
      {
        if (v39 == 10)
          return v19;
        v20 = v37;
        if (!v37)
          return v19;
        v26 = (unint64_t *)&v37->__shared_owners_;
        do
          v22 = __ldaxr(v26);
        while (__stlxr(v22 - 1, v26));
      }
      else
      {
        if (v39 != 9)
          return v19;
        v20 = (std::__shared_weak_count *)v36[42];
        if (!v36[42])
          return v19;
        v24 = (unint64_t *)(v36[42] + 8);
        do
          v22 = __ldaxr(v24);
        while (__stlxr(v22 - 1, v24));
      }
    }
    else
    {
      if (v39 != 7)
        return v19;
      v20 = (std::__shared_weak_count *)v36[39];
      if (!v36[39])
        return v19;
      v21 = (unint64_t *)(v36[39] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
    }
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v19;
}

void sub_207D32A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D32A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207D32A94(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t *v8;

  v1 = result;
  v2 = *(_DWORD *)(result + 992);
  if (v2 != -1)
  {
    if (v2 > 7)
    {
      if (v2 > 0xB)
      {
        if (v2 >= 0xF)
        {
          v3 = *(std::__shared_weak_count **)(result + 896);
          if (v3)
          {
            p_shared_owners = (unint64_t *)&v3->__shared_owners_;
            do
              v5 = __ldaxr(p_shared_owners);
            while (__stlxr(v5 - 1, p_shared_owners));
            goto LABEL_24;
          }
        }
      }
      else if (v2 > 9)
      {
        if (v2 != 10)
        {
          v3 = *(std::__shared_weak_count **)(result + 672);
          if (v3)
          {
            v8 = (unint64_t *)&v3->__shared_owners_;
            do
              v5 = __ldaxr(v8);
            while (__stlxr(v5 - 1, v8));
            goto LABEL_24;
          }
        }
      }
      else if (v2 == 9)
      {
        v3 = *(std::__shared_weak_count **)(result + 504);
        if (v3)
        {
          v6 = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(v6);
          while (__stlxr(v5 - 1, v6));
          goto LABEL_24;
        }
      }
    }
    else if (v2 == 7)
    {
      v3 = *(std::__shared_weak_count **)(result + 480);
      if (v3)
      {
        v4 = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 - 1, v4));
LABEL_24:
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          return v1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_207D32B98(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __n128 v13;
  int8x16_t v14;
  double v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t *p_shared_owners;
  unint64_t *v26;
  _OWORD v27[4];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  _QWORD v36[91];
  std::__shared_weak_count *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;

  v1 = 0;
  v42 = *MEMORY[0x24BDAC8D0];
  do
  {
    v2 = (*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v1 == 64;
    v1 += 8;
  }
  while (!v3);
  if (!v2)
    return 0;
  v4 = 72;
  do
  {
    v5 = (*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v4) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v4 == 136;
    v4 += 8;
  }
  while (!v3);
  if (!v5
    || fabs(*(double *)(a1 + 48)) >= 0.00000001
    || fabs(*(double *)(a1 + 56)) >= 0.00000001
    || fabs(*(double *)(a1 + 64) + -1.0) >= 0.00000001)
  {
    return 0;
  }
  v6 = 168;
  do
  {
    v7 = (*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + v6) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    v3 = v6 == 384;
    v6 += 8;
  }
  while (!v3);
  if (!v7)
    return 0;
  v8 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v9;
  v10 = *(_OWORD *)(a1 + 72);
  v30 = *(_OWORD *)(a1 + 88);
  v11 = *(_OWORD *)(a1 + 120);
  v31 = *(_OWORD *)(a1 + 104);
  v32 = v11;
  v28 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 136);
  v29 = v10;
  v35 = *(_BYTE *)(a1 + 160);
  v34 = *(_OWORD *)(a1 + 144);
  memcpy(v36, (const void *)(a1 + 168), 0x2C9uLL);
  v38 = 14;
  v39 = 0x7FF8000000000000;
  v40 = 0xFFEFFFFFFFFFFFFFLL;
  v12.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
  v41 = xmmword_2082339B0;
  v12.n128_u64[0] = 0.5;
  v19 = sub_20811851C((uint64_t)v27, 0, 0, v12, v13, v14, v15, v16, v17, v18);
  if (v38 != -1)
  {
    if (v38 > 7)
    {
      if (v38 > 0xB)
      {
        if (v38 < 0xF)
          return v19;
        v20 = v37;
        if (!v37)
          return v19;
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
      }
      else if (v38 > 9)
      {
        if (v38 == 10)
          return v19;
        v20 = (std::__shared_weak_count *)v36[63];
        if (!v36[63])
          return v19;
        v26 = (unint64_t *)(v36[63] + 8);
        do
          v22 = __ldaxr(v26);
        while (__stlxr(v22 - 1, v26));
      }
      else
      {
        if (v38 != 9)
          return v19;
        v20 = (std::__shared_weak_count *)v36[42];
        if (!v36[42])
          return v19;
        v24 = (unint64_t *)(v36[42] + 8);
        do
          v22 = __ldaxr(v24);
        while (__stlxr(v22 - 1, v24));
      }
    }
    else
    {
      if (v38 != 7)
        return v19;
      v20 = (std::__shared_weak_count *)v36[39];
      if (!v36[39])
        return v19;
      v21 = (unint64_t *)(v36[39] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
    }
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v19;
}

void sub_207D32E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D32A94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_207D32E64@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, __n128 *a4@<X8>, int8x16_t _Q2@<Q2>, int8x16_t a6@<Q3>, int64x2_t a7@<Q4>, float64x2_t a8@<Q5>, float64x2_t a9@<Q6>)
{
  double v18;
  uint64_t v19;
  float64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  char v26;
  double v27;
  float64x2_t v28;
  double v29;
  double v30;
  char v31;
  double v33;
  char v34;
  __n128 result;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  __n128 v39;
  __n128 v40;

  v36 = *a3;
  v37 = *a2;
  _Q0 = vsubq_f64(*a2, *a3);
  _Q1 = vmulq_f64(_Q0, _Q0);
  _Q2.i64[0] = *(_QWORD *)&_Q0.f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  v18 = sqrt(_Q1.f64[0]);
  v40 = *(__n128 *)a2;
  v19 = sub_207D33038(a1, (float64x2_t *)&v40, v40.n128_f64[0], _Q1, _Q2, a6, a7, a8, a9);
  if (!v26
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 67, (uint64_t)"fov", 3, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v27 = *(double *)&v19;
  v28 = *a2;
  v39 = *(__n128 *)a2;
  if (v18 * 0.03125 < v18)
  {
    v20 = (float64x2_t)vdupq_n_s64(0x3FA0000000000000uLL);
    v28 = vmulq_f64(vsubq_f64(v36, v37), v20);
    v38 = v28;
    v29 = v18 * 0.03125;
    do
    {
      v30 = COERCE_DOUBLE(sub_207D33038(a1, (float64x2_t *)&v40, v28.f64[0], v20, v21, v22, v23, v24, v25));
      if (v31)
        _NF = v27 < v30;
      else
        _NF = 0;
      if (_NF)
      {
        v39 = v40;
        v27 = v30;
      }
      v29 = v18 * 0.03125 + v29;
      v20 = v38;
      v28 = vaddq_f64(v38, (float64x2_t)v40);
      v40 = (__n128)v28;
    }
    while (v29 < v18);
  }
  v33 = COERCE_DOUBLE(sub_207D33038(a1, a3, v28.f64[0], v20, v21, v22, v23, v24, v25));
  if (v34 && v27 < v33)
  {
    v39 = *(__n128 *)a3;
    v27 = v33;
  }
  result = v39;
  *a4 = v39;
  a4[1].n128_f64[0] = v27;
  return result;
}

uint64_t sub_207D33038(uint64_t a1, float64x2_t *a2, double a3, float64x2_t _Q1, int8x16_t a5, int8x16_t a6, int64x2_t a7, float64x2_t a8, float64x2_t a9)
{
  int8x16_t v11;
  unsigned int v12;
  double v13;
  float64_t v14;
  _OWORD *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  uint64_t v29;
  float64x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  float64x2_t *v33;
  uint64_t v34;
  double v35;
  int8x16_t v36;
  float64x2_t v37;
  __int128 v38;
  double v45;
  int v46;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  float64x2_t *v52;
  uint64_t v53;
  double v54;
  unsigned int v55;
  char v56;
  double v57;
  double v58;
  double v60;
  double v63;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  double v70;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  int v79;
  int v80;
  float64x2_t v81;
  float64x2_t v82;
  double v84;
  double v86;
  int v87;
  double v88;
  int v89;
  double v90;
  double v91;
  double v92;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  int v100;
  int v101;
  double v102;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  int v111;
  int v112;
  double v113;
  float64x2_t v116;
  const double *v118;
  float64x2_t v120;
  double v121;
  float64x2_t v122;
  const double *v123;
  float64x2_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  BOOL v133;
  float64x2_t v134;
  double v135;
  double v137;
  int v138;
  double v139;
  int v140;
  double v141;
  float64x2_t v142;
  float64x2_t v143;
  double v144;
  double v145;
  BOOL v146;
  float64x2_t v147;
  double v148;
  double v150;
  int v151;
  double v152;
  int v153;
  double v154;
  float64x2_t v155;
  double v156;
  float64x2_t v157;
  unsigned int v158;
  BOOL v159;
  double v160;
  double v161;
  double v162;
  float64x2_t v169;
  double __x;
  int64x2_t v171;
  double v172;
  int64x2_t v173;
  uint64_t v174;
  float64x2_t v175;
  uint64_t v176;
  float64x2_t v177;
  int8x16_t v178;
  int64x2_t v179;
  int64x2_t v180;
  float64x2_t v181;
  uint64_t v182;
  float64x2_t v183;
  double v184;
  __int128 v185;
  unint64_t v186;
  __int128 v187;
  uint64_t v188;
  double v189;
  unint64_t v190;
  float64x2_t v191;
  float64x2_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float64x2x3_t v196;
  float64x2x3_t v197;

  v195 = *MEMORY[0x24BDAC8D0];
  v11 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v169 = (float64x2_t)v11;
  __x = NAN;
  v12 = *(_DWORD *)(a1 + 992);
  if (v12 == -1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v12 = *(_DWORD *)(a1 + 992);
    if (v12 <= 7)
      goto LABEL_3;
  }
  else if (v12 <= 7)
  {
LABEL_3:
    if (!v12)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821CCC2, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
      abort();
    }
    goto LABEL_8;
  }
  if (v12 <= 0xD)
  {
LABEL_8:
    v13 = a2->f64[1];
    *(double *)a6.i64 = *(double *)(a1 + 88) + *(double *)(a1 + 72) * a2->f64[0] + *(double *)(a1 + 80) * v13;
    _Q1.f64[0] = *(float64_t *)(a1 + 104);
    a5.i64[0] = *(_QWORD *)(a1 + 112);
    *(double *)v11.i64 = v13 * _Q1.f64[0] + *(double *)a5.i64;
    v189 = *(double *)a6.i64;
    v190 = v11.i64[0];
    goto LABEL_9;
  }
  a6.i64[0] = *(_QWORD *)&a2->f64[1];
  *(double *)v11.i64 = *(double *)(a1 + 88)
                     + *(double *)(a1 + 72) * a2->f64[0]
                     + *(double *)(a1 + 80) * *(double *)a6.i64;
  a5.i64[0] = *(_QWORD *)(a1 + 112);
  _Q1.f64[0] = *(double *)a6.i64 * *(double *)(a1 + 104) + *(double *)a5.i64;
  v189 = *(double *)v11.i64;
  v190 = *(_QWORD *)&_Q1.f64[0];
  if (v12 == 14)
  {
LABEL_9:
    *(_QWORD *)&v191.f64[0] = &v169;
    *(_QWORD *)&v191.f64[1] = &v189;
    v193 = 0;
    v194 = 0;
    v192 = 0;
    if (v12 <= 7)
      goto LABEL_10;
    goto LABEL_51;
  }
  v23 = (uint64_t)&v169;
  v24 = (uint64_t)&v189;
  *(_QWORD *)&v191.f64[0] = &v169;
  *(_QWORD *)&v191.f64[1] = &v189;
  v193 = 0;
  v194 = 0;
  v192 = 0;
  if (v12 != -1)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_78;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v12 = *(_DWORD *)(a1 + 992);
  if (v12 <= 7)
  {
LABEL_10:
    if (v12 > 3)
    {
      v18 = v191;
      v19 = v192;
      v20 = (float64x2_t *)v193;
      v21 = v194;
      if (v12 > 5)
      {
        if (v12 == 6)
          v22 = sub_208117DD4((double *)a1, *(uint64_t *)&v191.f64[0], *(double **)&v191.f64[1], v192, v193, v194);
        else
          v22 = sub_208114CF4(a1, *(uint64_t *)&v191.f64[0], *(float64x2_t **)&v191.f64[1], v192, v193, v194, *(double *)v11.i64, _Q1.f64[0], a5, a6, *(double *)a7.i64, a8.f64[0], a9);
      }
      else if (v12 == 5)
      {
        if (v192)
        {
          v192->f64[0] = 0.0;
          v19->f64[1] = 0.0;
          v19[1].f64[0] = 0.0;
        }
        if (v21)
        {
          *(_QWORD *)(v21 + 64) = 0;
          *(_OWORD *)(v21 + 32) = 0u;
          *(_OWORD *)(v21 + 48) = 0u;
          *(_OWORD *)v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
        }
        if (v20)
          v22 = sub_208114414(*(uint64_t *)&v18.f64[0], (uint64_t)v20, *(double **)&v18.f64[1], a1 + 168, 5);
        else
          v22 = sub_208113D70(*(uint64_t *)&v18.f64[0], *(double **)&v18.f64[1], a1 + 168, 5);
      }
      else
      {
        if (v192)
        {
          v192->f64[0] = 0.0;
          v19->f64[1] = 0.0;
          v19[1].f64[0] = 0.0;
        }
        if (v21)
        {
          *(_QWORD *)(v21 + 64) = 0;
          v11 = 0uLL;
          *(_OWORD *)(v21 + 32) = 0u;
          *(_OWORD *)(v21 + 48) = 0u;
          *(_OWORD *)v21 = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
        }
        if (v20)
        {
          if (!*(_BYTE *)(a1 + 468))
          {
            v11.i64[0] = sub_208113224(a1 + 204, (double *)(a1 + 168), 0x32uLL, v11, _Q1.f64[0], a5, a6).u64[0];
            *(_BYTE *)(a1 + 468) = 1;
          }
          v22 = sub_207D34B98(*(uint64_t *)&v18.f64[0], *(uint64_t *)&v18.f64[1], (int64x2_t *)(a1 + 168), (float *)(a1 + 204), v20, 5, *(double *)v11.i64, _Q1.f64[0], *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64, a8.f64[0], a9);
        }
        else
        {
          if (!*(_BYTE *)(a1 + 468))
          {
            v11.i64[0] = sub_208113224(a1 + 204, (double *)(a1 + 168), 0x32uLL, v11, _Q1.f64[0], a5, a6).u64[0];
            *(_BYTE *)(a1 + 468) = 1;
          }
          v22 = sub_207D34B98(*(uint64_t *)&v18.f64[0], *(uint64_t *)&v18.f64[1], (int64x2_t *)(a1 + 168), (float *)(a1 + 204), 0, 5, *(double *)v11.i64, _Q1.f64[0], *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64, a8.f64[0], a9);
        }
      }
    }
    else
    {
      if (v12 <= 1)
      {
        if (!v12)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821CCC2, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
          abort();
        }
        v14 = v191.f64[0];
        v16 = v192;
        v15 = (_OWORD *)v193;
        v17 = v194;
        **(_OWORD **)&v191.f64[0] = **(_OWORD **)&v191.f64[1];
        *(_QWORD *)(*(_QWORD *)&v14 + 16) = 0x3FF0000000000000;
        if (v16)
        {
          v16->f64[0] = 0.0;
          v16->f64[1] = 0.0;
          v16[1].f64[0] = 0.0;
        }
        if (v15)
        {
          *(_QWORD *)&_Q1.f64[1] = unk_208233B90;
          *v15 = xmmword_208233B78;
          v15[1] = unk_208233B88;
          v15[2] = xmmword_208233B98;
        }
        if (v17)
        {
          *(_QWORD *)(v17 + 64) = 0;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)v17 = 0u;
          *(_OWORD *)(v17 + 16) = 0u;
        }
        goto LABEL_99;
      }
      if (v12 == 2)
      {
        v22 = sub_207D34740((uint64_t)&v191, a1);
      }
      else
      {
        v28 = v191;
        v30 = v192;
        v29 = v193;
        v31 = v194;
        if (v192)
        {
          v192->f64[0] = 0.0;
          v30->f64[1] = 0.0;
          v30[1].f64[0] = 0.0;
        }
        if (v31)
        {
          *(_QWORD *)(v31 + 64) = 0;
          v11.i64[0] = 0;
          *(_OWORD *)(v31 + 32) = 0u;
          *(_OWORD *)(v31 + 48) = 0u;
          *(_OWORD *)v31 = 0u;
          *(_OWORD *)(v31 + 16) = 0u;
        }
        if (v29)
          v22 = sub_2081129B0(*(double **)&v28.f64[0], v29, *(double **)&v28.f64[1], (int64x2_t *)(a1 + 168), 20, *(double *)v11.i64, _Q1.f64[0], *(double *)a5.i64, *(double *)a6.i64, a7);
        else
          v22 = sub_208111090(*(uint64_t *)&v28.f64[0], *(double **)&v28.f64[1], (int64x2_t *)(a1 + 168), 20, *(double *)v11.i64, _Q1.f64[0], *(double *)a5.i64, *(double *)a6.i64, a7, a8);
      }
    }
    goto LABEL_98;
  }
LABEL_51:
  v23 = *(_QWORD *)&v191.f64[0];
  if (v12 > 0xB)
  {
    if (v12 <= 0xD)
    {
      if (v12 != 13)
      {
        v52 = v192;
        v51 = (_OWORD *)v193;
        v53 = v194;
        if (v192)
        {
          v192->f64[0] = 0.0;
          v52->f64[1] = 0.0;
          v52[1].f64[0] = 0.0;
        }
        if (v53)
        {
          *(_QWORD *)(v53 + 64) = 0;
          *(_OWORD *)(v53 + 32) = 0u;
          *(_OWORD *)(v53 + 48) = 0u;
          *(_OWORD *)v53 = 0u;
          *(_OWORD *)(v53 + 16) = 0u;
        }
        *(_QWORD *)v23 = 0;
        *(_QWORD *)(v23 + 8) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        if (v51)
        {
          v51[1] = 0u;
          v51[2] = 0u;
          *v51 = 0u;
        }
        return 0;
      }
      v22 = sub_208118068((double *)a1, *(uint64_t *)&v191.f64[0], *(uint64_t *)&v191.f64[1], v192, v193, v194);
      goto LABEL_98;
    }
    v24 = *(_QWORD *)&v191.f64[1];
    v27 = v192;
    v26 = v193;
    v25 = v194;
    if (v12 == 14)
    {
      if (v192)
      {
        v192->f64[0] = 0.0;
        v27->f64[1] = 0.0;
        v27[1].f64[0] = 0.0;
      }
      if (v25)
      {
        *(_QWORD *)(v25 + 64) = 0;
        *(_OWORD *)(v25 + 32) = 0u;
        *(_OWORD *)(v25 + 48) = 0u;
        *(_OWORD *)v25 = 0u;
        *(_OWORD *)(v25 + 16) = 0u;
      }
      v45 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
      v46 = sub_2081122E4(v23, v24, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, v45);
      if (!v26)
      {
        if (!v46)
          return 0;
        goto LABEL_99;
      }
      if ((v46 & 1) == 0)
        return 0;
      if (!sub_208111C2C(&v177, (uint64_t)&v178, &v175, v23, (double *)(a1 + 168), v45))
        return 0;
      v36.i64[0] = *(_QWORD *)(v23 + 16);
      v37 = *(float64x2_t *)v23;
      *(_QWORD *)&v38 = v179.i64[0];
      _Q3 = (float64x2_t)v178;
      v181 = v37;
      v182 = v36.i64[0];
      v176 = 0;
      *(_QWORD *)&_Q5.f64[0] = v36.i64[0];
      _Q5.f64[1] = v37.f64[0];
      _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v180, _Q5), (float64x2_t)vzip2q_s64(v180, v179), (float64x2_t)vextq_s8(*(int8x16_t *)&v37, v36, 8uLL)).f64[1];
      __asm { FMLA            D6, D5, V3.D[1] }
      if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v179, v37), 1), (float64x2_t)v180, v37).f64[0], *(double *)v179.i64)) < 0.00000001)return 0;
LABEL_77:
      *(_QWORD *)&v49 = vextq_s8(v178, v178, 8uLL).u64[0];
      *(_QWORD *)&_Q3.f64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
      *((_QWORD *)&v49 + 1) = v180.i64[0];
      *((_QWORD *)&v38 + 1) = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u64[0];
      v183 = _Q3;
      v184 = v37.f64[0];
      v186 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
      v185 = v49;
      v188 = v36.i64[0];
      v187 = v38;
      sub_207CC48B4((uint64_t)&v171);
      *(double *)&v50 = v172;
      _Q1 = (float64x2_t)vzip2q_s64(v171, v173);
      *((_QWORD *)&v50 + 1) = v174;
      *(int64x2_t *)v26 = vzip1q_s64(v171, v173);
      *(float64x2_t *)(v26 + 16) = _Q1;
      *(_OWORD *)(v26 + 32) = v50;
      goto LABEL_99;
    }
LABEL_78:
    v22 = sub_208117124(a1, v23, (float64x2_t *)v24, v27, v26, v25);
    goto LABEL_98;
  }
  v32 = *(_QWORD *)&v191.f64[1];
  v33 = v192;
  v26 = v193;
  v34 = v194;
  if (v12 <= 9)
  {
    if (v12 == 9)
    {
      v22 = sub_2081158C4(a1, *(uint64_t *)&v191.f64[0], *(float64x2_t **)&v191.f64[1], v192, v193, v194, *(double *)v11.i64, _Q1.f64[0], *(double *)a5.i64, (int32x4_t)a6, (int32x4_t)a7);
    }
    else
    {
      if (v192)
      {
        v192->f64[0] = 0.0;
        v33->f64[1] = 0.0;
        v33[1].f64[0] = 0.0;
      }
      if (v34)
      {
        *(_QWORD *)(v34 + 64) = 0;
        v11.i64[0] = 0;
        *(_OWORD *)(v34 + 32) = 0u;
        *(_OWORD *)(v34 + 48) = 0u;
        *(_OWORD *)v34 = 0u;
        *(_OWORD *)(v34 + 16) = 0u;
      }
      if (v26)
      {
        v22 = sub_208112DDC(v23, v26, (double *)v32, a1 + 168, 20, *(double *)v11.i64, _Q1.f64[0], *(double *)a5.i64, (int32x4_t)a6, (int32x4_t)a7);
      }
      else
      {
        v54 = sqrt(*(double *)v32 * *(double *)v32 + *(double *)(v32 + 8) * *(double *)(v32 + 8));
        v22 = sub_2081112B8(v23, (double *)v32, (double *)(a1 + 168), 20, v54, v54, *(double *)a5.i64, (int32x4_t)a6, (int32x4_t)a7);
      }
    }
    goto LABEL_98;
  }
  if (v12 != 10)
  {
    v22 = sub_208116474(a1, *(uint64_t *)&v191.f64[0], *(float64x2_t **)&v191.f64[1], v192, v193, v194);
    goto LABEL_98;
  }
  if (v192)
  {
    v192->f64[0] = 0.0;
    v33->f64[1] = 0.0;
    v33[1].f64[0] = 0.0;
  }
  if (v34)
  {
    *(_QWORD *)(v34 + 64) = 0;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)(v34 + 16) = 0u;
  }
  v35 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
  v22 = sub_2081121D8(v23, v32, a1 + 168, (double *)(a1 + 280), 0x14u, v35);
  if (v26)
  {
    if ((v22 & 1) == 0)
      return 0;
    if (!sub_2081117AC(&v177, (uint64_t)&v178, &v175, v23, (double *)(a1 + 168), v35))
      return 0;
    v36.i64[0] = *(_QWORD *)(v23 + 16);
    v37 = *(float64x2_t *)v23;
    *(_QWORD *)&v38 = v179.i64[0];
    _Q3 = (float64x2_t)v178;
    v181 = v37;
    v182 = v36.i64[0];
    v176 = 0;
    *(_QWORD *)&_Q5.f64[0] = v36.i64[0];
    _Q5.f64[1] = v37.f64[0];
    _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v180, _Q5), (float64x2_t)vzip2q_s64(v180, v179), (float64x2_t)vextq_s8(*(int8x16_t *)&v37, v36, 8uLL)).f64[1];
    __asm { FMLA            D6, D5, V3.D[1] }
    if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v179, v37), 1), (float64x2_t)v180, v37).f64[0], *(double *)v179.i64)) < 0.00000001)return 0;
    goto LABEL_77;
  }
LABEL_98:
  if ((v22 & 1) == 0)
    return 0;
LABEL_99:
  v55 = *(_DWORD *)(a1 + 992);
  if (v55 != -1)
  {
    if (v55 <= 7)
      goto LABEL_101;
LABEL_108:
    if (v55 > 0xB)
    {
      if (v55 <= 0xD)
      {
        if (v55 != 13 || __x < 0.00000001)
          return 0;
        _Q0 = vdivq_f64(v169, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0));
        v60 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
        _D3 = _Q0.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v63 = v60 * (_D2 * v60);
        v191 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v63* (*(double *)(a1 + 168)+ v60 * *(double *)(a1 + 224)+ v63* (*(double *)(a1 + 176)+ v60 * *(double *)(a1 + 232)+ v63* (*(double *)(a1 + 184)+ v60 * *(double *)(a1 + 240)+ v63* (*(double *)(a1 + 192)+ v60 * *(double *)(a1 + 248)+ v63* (*(double *)(a1 + 200)+ v60 * *(double *)(a1 + 256)+ v63
                                     * (*(double *)(a1 + 208)
                                      + v60 * *(double *)(a1 + 264)
                                      + v63 * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v60 + v63 * 0.0)))))))
                                / 100.0
                                + 1.0),
                                0));
        goto LABEL_268;
      }
      if (v55 == 14)
      {
        v56 = sub_208111A60(&v191, (uint64_t)&v169, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        goto LABEL_200;
      }
      _D2 = *(_QWORD *)(a1 + 944);
      _V7.D[1] = v169.f64[1];
      __asm { FMLA            D1, D2, V7.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + *(double *)(a1 + 968) * __x;
      v178 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 904), v169.f64[0]), *(float64x2_t *)(a1 + 928), v169, 1), *(float64x2_t *)(a1 + 952), __x);
      v179.i64[0] = *(_QWORD *)&_Q1.f64[0];
      sub_20810F6CC(*(_QWORD *)(a1 + 888), (uint64_t)&v178, 30, 0, 0, (uint64_t)&v183, 0.00000001, _Q1);
      if (!(_BYTE)v185)
        return 0;
      v123 = (const double *)(a1 + 904);
      v197 = vld3q_f64(v123);
      _Q5 = *(_OWORD *)(a1 + 952);
      v127 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197.val[0], v183.f64[0]), v197.val[1], v183, 1), v197.val[2], v184);
      v197.val[1].f64[0] = v183.f64[1];
      __asm { FMLA            D1, D2, V5.D[1] }
      v128 = v197.val[0].f64[0] + *(double *)(a1 + 968) * v184;
      v172 = v128;
      v171 = (int64x2_t)v127;
      if (v128 < 0.0)
        return 0;
      v171 = (int64x2_t)vsubq_f64(v127, vmulq_n_f64(*(float64x2_t *)(a1 + 976), v128));
      if ((sub_208111A60(&v191, (uint64_t)&v171, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) == 0)
        return 0;
      v122 = *(float64x2_t *)(a1 + 976);
    }
    else
    {
      if (v55 <= 9)
      {
        if (v55 != 9)
        {
          v70 = __x;
          _Q0 = v169;
          _D1 = v169.f64[1];
          __asm { FMLA            D16, D1, V0.D[1] }
          v74 = sqrt(_D16);
          v75 = fabs(__x);
          v76 = fabs(v74);
          v77 = v75 / v76;
          if (v75 >= v76)
            v77 = v76 / v75;
          v78 = (v76 - v75) / (v75 + v76);
          if (v75 >= v76)
            v78 = -v78;
          if (v77 > 0.414213562)
            v79 = 1;
          else
            v79 = 2;
          if (v77 > 0.414213562)
            v80 = -1;
          else
            v80 = 1;
          if (v77 <= 0.414213562)
            v78 = v77;
          if (_D16 < 0.00000001)
          {
LABEL_180:
            v102 = 1.0 / v70;
LABEL_236:
            v143 = vmulq_n_f64(_Q0, v102);
            v144 = *(double *)a1;
            v145 = v143.f64[1];
            goto LABEL_286;
          }
          if (v75 < v76)
            v80 = -v80;
          else
            v79 = v77 > 0.414213562;
          v81 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v78 * v78), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v78 * v78), (float64x2_t)xmmword_208233A20), v78 * v78 * (v78 * v78))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v78 * v78), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v78 * v78), (float64x2_t)xmmword_208233A30), v78 * v78 * (v78 * v78))), v78 * v78 * (v78 * v78) * (v78 * v78 * (v78 * v78))));
          v82 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v81, 1);
          _ZF = v74 == INFINITY && v75 == INFINITY;
          v84 = v78 + v78 * vdivq_f64(v81, v82).f64[0];
          if (_ZF)
            v84 = 0.785398163;
          if (v74 == 0.0 && __x == 0.0)
            v86 = 0.0;
          else
            v86 = v84;
          if (__x < 0.0)
          {
            v79 = 4 - v79;
            v80 = -v80;
          }
          if (v74 >= 0.0)
            v87 = v79;
          else
            v87 = -v79;
          v88 = (double)v87;
          if (v74 >= 0.0)
            v89 = v80;
          else
            v89 = -v80;
          v90 = v88 * 3.061617e-17 + v88 * 0.785398163 + v86 * (double)v89;
          v91 = v90
              * (v90
               * v90
               * (*(double *)(a1 + 168)
                + v90
                * v90
                * (*(double *)(a1 + 176)
                 + v90
                 * v90
                 * (*(double *)(a1 + 184)
                  + v90
                  * v90
                  * (*(double *)(a1 + 192)
                   + v90
                   * v90
                   * (*(double *)(a1 + 200) + v90 * v90 * (*(double *)(a1 + 208) + v90 * v90 * *(double *)(a1 + 216)))))))
               + 1.0);
          v92 = 1.0 / v74;
LABEL_235:
          v102 = v92 * v91;
          goto LABEL_236;
        }
        v56 = sub_208116140(a1, &v191, &v169);
LABEL_200:
        if ((v56 & 1) == 0)
          return 0;
        goto LABEL_268;
      }
      if (v55 == 10)
      {
        v56 = sub_208111528(&v191, (uint64_t)&v169, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        goto LABEL_200;
      }
      _D2 = *(_QWORD *)(a1 + 720);
      _V7.D[1] = v169.f64[1];
      v116 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 680), v169.f64[0]), *(float64x2_t *)(a1 + 704), v169, 1), *(float64x2_t *)(a1 + 728), __x);
      __asm { FMLA            D0, D2, V7.D[1] }
      *(double *)v179.i64 = _D0 + *(double *)(a1 + 744) * __x;
      v178 = (int8x16_t)v116;
      sub_20810F6CC(*(_QWORD *)(a1 + 664), (uint64_t)&v178, 30, 0, 0, (uint64_t)&v183, 0.00000001, v116);
      if (!(_BYTE)v185)
        return 0;
      v118 = (const double *)(a1 + 680);
      v196 = vld3q_f64(v118);
      v118 += 6;
      _Q5 = *(_OWORD *)v118;
      v120 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v196.val[0], v183.f64[0]), v196.val[1], v183, 1), v196.val[2], v184);
      v196.val[1].f64[0] = v183.f64[1];
      __asm { FMLA            D1, D2, V5.D[1] }
      v121 = v196.val[0].f64[0] + *(double *)(a1 + 744) * v184;
      v171 = (int64x2_t)v120;
      v172 = v121;
      if (v121 < 0.0)
        return 0;
      v171 = (int64x2_t)vsubq_f64(v120, vmulq_n_f64(*(float64x2_t *)(a1 + 752), v121));
      if ((sub_208111528(&v191, (uint64_t)&v171, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5) & 1) == 0)
        return 0;
      v122 = *(float64x2_t *)(a1 + 752);
    }
    v191 = vaddq_f64(v122, v191);
    goto LABEL_268;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v55 = *(_DWORD *)(a1 + 992);
  if (v55 > 7)
    goto LABEL_108;
LABEL_101:
  if (v55 > 3)
  {
    if (v55 <= 5)
    {
      if (v55 == 5)
      {
        v57 = v169.f64[0] * v169.f64[0] + v169.f64[1] * v169.f64[1];
        if (v57 >= 0.00000001)
        {
          v129 = sqrt(v57);
          if (v129 <= __x)
          {
            v156 = v129 / __x * 0.785398163
                 - v129 / __x * (v129 / __x + -1.0) * (v129 / __x * 0.0663008339 + 0.244711287);
          }
          else
          {
            if (v129 <= -__x)
            {
              v131 = v129 / __x * 0.785398163
                   - v129 / __x * (-1.0 - v129 / __x) * (v129 / __x * -0.0663008339 + 0.244711287);
              v132 = 3.14159265;
            }
            else
            {
              v130 = fabs(__x / v129);
              v131 = __x / v129 * (v130 + -1.0) * (v130 * 0.0663008339 + 0.244711287) + __x / v129 * -0.785398163;
              v132 = 1.57079633;
            }
            v156 = v131 + v132;
          }
          v157 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v156 * v156)), v156 * v156);
          v58 = (v156 + v156 * (v157.f64[0] + vmuld_lane_f64(v156 * v156 * (v156 * v156), v157, 1))) / v129;
        }
        else
        {
          if (__x == 0.0)
            return 0;
          v58 = 1.0 / __x;
        }
        v191.f64[0] = v169.f64[0] * v58;
        v191.f64[1] = v169.f64[1] * v58;
        goto LABEL_268;
      }
      v70 = __x;
      _Q0 = v169;
      _D1 = v169.f64[1];
      __asm { FMLA            D16, D1, V0.D[1] }
      v95 = sqrt(_D16);
      v96 = fabs(__x);
      v97 = fabs(v95);
      v98 = v96 / v97;
      if (v96 >= v97)
        v98 = v97 / v96;
      v99 = (v97 - v96) / (v96 + v97);
      if (v96 >= v97)
        v99 = -v99;
      if (v98 > 0.414213562)
        v100 = 1;
      else
        v100 = 2;
      if (v98 > 0.414213562)
        v101 = -1;
      else
        v101 = 1;
      if (v98 <= 0.414213562)
        v99 = v98;
      if (_D16 < 0.00000001)
        goto LABEL_180;
      if (v96 < v97)
        v101 = -v101;
      else
        v100 = v98 > 0.414213562;
      v133 = v95 == INFINITY && v96 == INFINITY;
      v134 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v99 * v99), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v99 * v99), (float64x2_t)xmmword_208233A20), v99 * v99 * (v99 * v99))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v99 * v99), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v99 * v99), (float64x2_t)xmmword_208233A30), v99 * v99 * (v99 * v99))), v99 * v99 * (v99 * v99) * (v99 * v99 * (v99 * v99))));
      v135 = v99 + v99 * vdivq_f64(v134, (float64x2_t)vdupq_laneq_s64((int64x2_t)v134, 1)).f64[0];
      if (v133)
        v135 = 0.785398163;
      if (v95 == 0.0 && __x == 0.0)
        v137 = 0.0;
      else
        v137 = v135;
      if (__x < 0.0)
      {
        v100 = 4 - v100;
        v101 = -v101;
      }
      if (v95 >= 0.0)
        v138 = v100;
      else
        v138 = -v100;
      v139 = (double)v138;
      if (v95 >= 0.0)
        v140 = v101;
      else
        v140 = -v101;
      v141 = v139 * 3.061617e-17 + v139 * 0.785398163 + v137 * (double)v140;
      v142 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v141 * v141)), v141 * v141);
      v91 = v141 + v141 * (v142.f64[0] + vmuld_lane_f64(v141 * v141 * (v141 * v141), v142, 1));
      v92 = 1.0 / v95;
      goto LABEL_235;
    }
    if (v55 == 6)
    {
      v68 = vaddq_f64(vdivq_f64(v169, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0)), *(float64x2_t *)(a1 + 192));
      v69 = sqrt(vaddvq_f64(vmulq_f64(v68, v68)));
      v191 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v68, v69 * (v69 * (*(double *)(a1 + 168) + v69 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v69)))+ 1.0));
      goto LABEL_268;
    }
    v56 = sub_2081155AC(a1, &v191, &v169);
    goto LABEL_200;
  }
  if (v55 <= 1)
  {
    if (!v55)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821CCC2, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
      abort();
    }
    if (__x < 0.00000001)
      return 0;
    v191 = vmulq_n_f64(v169, 1.0 / __x);
    goto LABEL_268;
  }
  if (v55 != 2)
  {
    _V0.D[1] = v169.f64[1];
    _D1 = v169.f64[1];
    __asm { FMLA            D16, D1, V0.D[1] }
    v106 = sqrt(_D16);
    v107 = fabs(__x);
    v108 = fabs(v106);
    v109 = v107 / v108;
    if (v107 >= v108)
      v109 = v108 / v107;
    v110 = (v108 - v107) / (v107 + v108);
    if (v107 >= v108)
      v110 = -v110;
    if (v109 > 0.414213562)
      v111 = 1;
    else
      v111 = 2;
    if (v109 > 0.414213562)
      v112 = -1;
    else
      v112 = 1;
    if (v109 <= 0.414213562)
      v110 = v109;
    if (_D16 >= 0.00000001)
    {
      if (v107 < v108)
        v112 = -v112;
      else
        v111 = v109 > 0.414213562;
      v146 = v106 == INFINITY && v107 == INFINITY;
      v147 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v110 * v110), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v110 * v110), (float64x2_t)xmmword_208233A20), v110 * v110 * (v110 * v110))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v110 * v110), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v110 * v110), (float64x2_t)xmmword_208233A30), v110 * v110 * (v110 * v110))), v110 * v110 * (v110 * v110) * (v110 * v110 * (v110 * v110))));
      v148 = v110 + v110 * vdivq_f64(v147, (float64x2_t)vdupq_laneq_s64((int64x2_t)v147, 1)).f64[0];
      if (v146)
        v148 = 0.785398163;
      if (v106 == 0.0 && __x == 0.0)
        v150 = 0.0;
      else
        v150 = v148;
      if (__x < 0.0)
      {
        v111 = 4 - v111;
        v112 = -v112;
      }
      if (v106 >= 0.0)
        v151 = v111;
      else
        v151 = -v111;
      v152 = (double)v151;
      if (v106 >= 0.0)
        v153 = v112;
      else
        v153 = -v112;
      v154 = v152 * 3.061617e-17 + v152 * 0.785398163 + v150 * (double)v153;
      v155 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v154 * v154)), v154 * v154);
      v113 = 1.0 / v106 * (v154 + v154 * (v155.f64[0] + vmuld_lane_f64(v154 * v154 * (v154 * v154), v155, 1)));
    }
    else
    {
      v113 = 1.0 / __x;
    }
    v67 = vmulq_n_f64(v169, v113);
    goto LABEL_285;
  }
  if (*(_DWORD *)(a1 + 212))
  {
    if (__x >= 0.00000001)
    {
      _Q3 = vmulq_n_f64(v169, 1.0 / __x);
      _D0 = vmuld_lane_f64(1.0 / __x, v169, 1);
      __asm { FMLA            D2, D0, V3.D[1] }
      v67 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D2, 0), vmulq_f64(_Q3, vaddq_f64(_Q3, _Q3))), (float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), _Q3.f64[0]), _Q3, 1)), vmulq_n_f64(_Q3, *(double *)(a1 + 168) * *(double *)&_D2+ 1.0+ *(double *)&_D2 * (*(double *)(a1 + 176) * *(double *)&_D2)+ *(double *)&_D2 * (*(double *)&_D2 * (*(double *)(a1 + 184) * *(double *)&_D2))));
      goto LABEL_284;
    }
    return 0;
  }
  if (!sub_207D34F48(&v191, &v169, (double *)(a1 + 168)))
    return 0;
LABEL_268:
  v158 = *(_DWORD *)(a1 + 992);
  if (v158 != -1)
  {
    if (v158 <= 7)
      goto LABEL_270;
LABEL_276:
    if (v158 > 0xB)
      goto LABEL_278;
    v159 = v158 == 9;
    if (v158 > 9)
      goto LABEL_278;
LABEL_280:
    v144 = *(double *)a1;
    v143.f64[0] = v191.f64[0];
    if (v159)
    {
      v161 = v144 * v191.f64[0];
      v160 = *(double *)(a1 + 8);
      v145 = v191.f64[1];
      goto LABEL_287;
    }
    v145 = v191.f64[1];
LABEL_286:
    v161 = v144 * v143.f64[0];
    v160 = *(double *)(a1 + 8);
    goto LABEL_287;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v158 = *(_DWORD *)(a1 + 992);
  if (v158 > 7)
    goto LABEL_276;
LABEL_270:
  if (v158 <= 3)
  {
    if (v158 <= 1)
    {
      if (!v158)
      {
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821CCC2, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
        abort();
      }
      goto LABEL_278;
    }
    v67 = v191;
    if (v158 == 2)
    {
LABEL_284:
      v162 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v67));
      v145 = v67.f64[1];
      goto LABEL_288;
    }
LABEL_285:
    v145 = v67.f64[1];
    v162 = *(double *)a1 * v67.f64[0] + vmuld_lane_f64(*(double *)(a1 + 8), v67, 1);
    goto LABEL_288;
  }
  v159 = v158 == 5;
  if (v158 <= 5)
    goto LABEL_280;
LABEL_278:
  v160 = *(double *)(a1 + 8);
  v145 = v191.f64[1];
  v161 = *(double *)a1 * v191.f64[0];
LABEL_287:
  v162 = v161 + v160 * v145;
LABEL_288:
  _Q1.f64[0] = v162 + *(double *)(a1 + 16);
  _Q1.f64[1] = v145 * *(double *)(a1 + 32) + *(double *)(a1 + 40);
  _D2 = vsubq_f64(_Q1, *a2).f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  if (_Q1.f64[0] > 1.0)
    return 0;
  _V0.D[1] = v169.f64[1];
  _D2 = v169.f64[1];
  __asm { FMLA            D1, D2, V0.D[1] }
  return atan2(sqrt(_D1), __x);
}

uint64_t sub_207D34740(uint64_t a1, uint64_t a2)
{
  float64x2_t *v2;
  float64x2_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  simd_double2 v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  simd_double2x2 v64;
  simd_double2x2 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = *(float64x2_t **)a1;
  v2 = *(float64x2_t **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    if (*(_DWORD *)(a2 + 212))
    {
      v8 = *(float64x2_t *)(a2 + 192);
      v9 = vaddq_f64(v8, v8);
      v10 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
      v11 = 20;
      v12 = *v2;
      do
      {
        v13 = vmulq_f64(v12, v12);
        v14 = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1), v13);
        v13.f64[0] = vaddvq_f64(v13);
        v15 = *(double *)(a2 + 168) * v13.f64[0]
            + 1.0
            + v13.f64[0] * (*(double *)(a2 + 176) * v13.f64[0])
            + v13.f64[0] * (v13.f64[0] * (*(double *)(a2 + 184) * v13.f64[0]));
        v16 = vmulq_n_f64(v9, v12.f64[0]);
        v17 = vaddq_f64(v12, v12);
        if (v15 == 0.0)
          v15 = 1.0;
        v12 = vdivq_f64(vsubq_f64(*v2, vaddq_f64(vmulq_laneq_f64(v16, v12, 1), vmulq_f64(v10, vaddq_f64(vmulq_f64(v12, v17), (float64x2_t)vdupq_lane_s64(v14, 0))))), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0));
        --v11;
      }
      while (v11);
      *v3 = v12;
      v3[1].f64[0] = 1.0;
      if (!v4)
        goto LABEL_34;
    }
    else
    {
      v37 = *(double *)(a2 + 168);
      v38 = *(double *)(a2 + 176);
      if (*(_DWORD *)(a2 + 208) > 2u)
      {
        v59 = 20;
        v60 = v2->f64[1];
        v61 = v2->f64[0];
        do
        {
          v62 = v60 * v60 + v61 * v61;
          v63 = v37 * v62 + 1.0 + v62 * (v38 * v62) + v62 * (v62 * (*(double *)(a2 + 184) * v62));
          if (v63 == 0.0)
            v63 = 1.0;
          v61 = v2->f64[0] / v63;
          v60 = v2->f64[1] / v63;
          --v59;
        }
        while (v59);
        v3->f64[0] = v61;
        v3->f64[1] = v60;
        v3[1].f64[0] = 1.0;
        if (!v4)
          goto LABEL_34;
      }
      else
      {
        v39 = 20;
        v40 = v2->f64[1];
        v41 = v2->f64[0];
        do
        {
          v42 = v37 * (v40 * v40 + v41 * v41) + 1.0 + (v40 * v40 + v41 * v41) * (v38 * (v40 * v40 + v41 * v41));
          if (v42 == 0.0)
            v42 = 1.0;
          v41 = v2->f64[0] / v42;
          v40 = v2->f64[1] / v42;
          --v39;
        }
        while (v39);
        v3->f64[0] = v41;
        v3->f64[1] = v40;
        v3[1].f64[0] = 1.0;
        if (!v4)
          goto LABEL_34;
      }
    }
    goto LABEL_33;
  }
  if (*(_DWORD *)(a2 + 212))
  {
    if (!sub_208113994(*(float64x2_t **)a1, v65.columns, v2, (double *)(a2 + 168), (float64x2_t *)(a2 + 192), 20))
      return 0;
  }
  else
  {
    v18 = *(double *)(a2 + 168);
    v19 = *(double *)(a2 + 176);
    if (*(_DWORD *)(a2 + 208) > 2u)
    {
      v43 = 20;
      v44 = v2->f64[1];
      v45 = v2->f64[0];
      do
      {
        v46 = v44 * v44 + v45 * v45;
        v47 = v18 * v46 + 1.0 + v46 * (v19 * v46) + v46 * (v46 * (*(double *)(a2 + 184) * v46));
        if (v47 == 0.0)
          v47 = 1.0;
        v45 = v2->f64[0] / v47;
        v44 = v2->f64[1] / v47;
        --v43;
      }
      while (v43);
      v3->f64[0] = v45;
      v3->f64[1] = v44;
      v48 = *(double *)(a2 + 168);
      v49 = *(double *)(a2 + 176);
      v50 = *(double *)(a2 + 184);
      _Q3 = *v3;
      _D5 = v3->f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      v54 = v48 * _D4 + 1.0 + _D4 * _D4 * (v49 + v50 * _D4);
      v55 = vmulq_n_f64(*v3, v48 + v48 + _D4 * (v49 * 4.0 + v50 * 6.0 * _D4));
      v56 = vmulq_n_f64(v55, v3->f64[0]);
      v57 = vmulq_laneq_f64(v55, *v3, 1);
      v64.columns[1].f64[0] = v57.f64[0];
      v56.f64[0] = v54 + v56.f64[0];
      v64.columns[0] = (simd_double2)v56;
      v64.columns[1].f64[1] = v54 + v57.f64[1];
      if (sub_207CC482C((double *)&v64) == 0.0)
        return 0;
    }
    else
    {
      v20 = 20;
      v21 = v2->f64[1];
      v22 = v2->f64[0];
      do
      {
        v23 = v18 * (v21 * v21 + v22 * v22) + 1.0 + (v21 * v21 + v22 * v22) * (v19 * (v21 * v21 + v22 * v22));
        if (v23 == 0.0)
          v23 = 1.0;
        v22 = v2->f64[0] / v23;
        v21 = v2->f64[1] / v23;
        --v20;
      }
      while (v20);
      v3->f64[0] = v22;
      v3->f64[1] = v21;
      v24 = *(double *)(a2 + 168);
      v25 = *(double *)(a2 + 176);
      _Q2 = *v3;
      _D4 = v3->f64[1];
      __asm { FMLA            D3, D4, V2.D[1] }
      v33 = v24 * _D3 + 1.0 + _D3 * _D3 * (v25 + _D3 * 0.0);
      v34 = vmulq_n_f64(*v3, v24 + v24 + _D3 * (v25 * 4.0 + _D3 * 0.0));
      v35 = vmulq_n_f64(v34, v3->f64[0]);
      v36 = vmulq_laneq_f64(v34, *v3, 1);
      v64.columns[1].f64[0] = v36.f64[0];
      v35.f64[0] = v33 + v35.f64[0];
      v64.columns[0] = (simd_double2)v35;
      v64.columns[1].f64[1] = v33 + v36.f64[1];
      if (sub_207CC482C((double *)&v64) == 0.0)
        return 0;
    }
    sub_207CC4840(&v64, &v65);
  }
  v58 = v65.columns[1];
  *(simd_double2 *)v5 = v65.columns[0];
  *(simd_double2 *)(v5 + 16) = v58;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v3[1].f64[0] = 1.0;
  if (v4)
  {
LABEL_33:
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
LABEL_34:
  if (v6)
  {
    *(_QWORD *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
  return 1;
}

uint64_t sub_207D34B98(uint64_t a1, uint64_t a2, int64x2_t *a3, float *a4, float64x2_t *a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  double v20;
  double v21;
  unint64_t v22;
  double v23;
  int64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v45;
  int v46;
  float64x2_t v47;
  int64x2_t v48;
  double v49;
  float64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int64x2_t v54;
  int64x2_t v55;
  double v56;
  float64x2_t v57;
  double v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;

  _Q1 = *(float64x2_t *)a2;
  _D2 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D0, D2, V1.D[1] }
  v20 = sqrt(_D0);
  v21 = v20 * *a4;
  v22 = (unint64_t)v21;
  if ((unint64_t)v21 >= 0x1F)
    v22 = 31;
  v23 = v20 * a4[v22 + 2] + a4[v22 + 34];
  if (v21 <= 32.0)
  {
    v33 = a3[1];
    v34 = (float64x2_t)vzip2q_s64(*a3, v33);
    v35 = (float64x2_t)vzip1q_s64(*a3, v33);
    v36 = v23 * v23;
    a13 = vmulq_n_f64(vaddq_f64(vmulq_f64(v35, (float64x2_t)xmmword_208233A40), vmulq_n_f64(vmulq_f64(v34, (float64x2_t)xmmword_208233A50), v23 * v23)), v23 * v23);
    a13.f64[0] = a13.f64[0] + vmuld_lane_f64(v36 * v36, a13, 1) + 1.0;
    if (a13.f64[0] != 0.0)
    {
      v37 = vmulq_n_f64(vaddq_f64(v35, vmulq_n_f64(v34, v36)), v36);
      v23 = v23 + (v20 - (v23 + v23 * (v37.f64[0] + vmuld_lane_f64(v36 * v36, v37, 1)))) / a13.f64[0];
      v38 = 0.0;
      if (v23 <= 0.0)
        goto LABEL_12;
    }
  }
  else if (a6)
  {
    v24 = a3[1];
    v25 = (float64x2_t)vzip1q_s64(*a3, v24);
    v26 = (float64x2_t)vzip2q_s64(*a3, v24);
    v27 = vmulq_f64(v26, (float64x2_t)xmmword_208233A50);
    a13 = vmulq_f64(v25, (float64x2_t)xmmword_208233A40);
    do
    {
      v28 = v23 * v23;
      v29 = vmulq_n_f64(vaddq_f64(a13, vmulq_n_f64(v27, v23 * v23)), v23 * v23);
      v30 = v28 * v28;
      v31 = v29.f64[0] + vmuld_lane_f64(v28 * v28, v29, 1) + 1.0;
      if (v31 == 0.0)
        break;
      v32 = vmulq_n_f64(vaddq_f64(v25, vmulq_n_f64(v26, v28)), v28);
      v23 = fmax(v23 + (v20 - (v23 + v23 * (v32.f64[0] + vmuld_lane_f64(v30, v32, 1)))) / v31, 0.0);
      --a6;
    }
    while (a6);
  }
  v38 = v23;
  if (v23 > 3.14159265)
    return 0;
LABEL_12:
  v39 = v38 * 0.636619772 + 6.75539944e15 + -6.75539944e15;
  a13.f64[0] = v38 + v39 * -1.57079633 + v39 * -5.39030286e-15 + v39 * -8.84372057e-29;
  v40 = a13.f64[0] * a13.f64[0] * (a13.f64[0] * a13.f64[0]);
  __asm { FMOV            V4.2D, #1.0 }
  v41 = vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A60, a13.f64[0] * a13.f64[0]), _Q4), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233AA0, a13.f64[0] * a13.f64[0]), (float64x2_t)xmmword_208233AB0), v40));
  v42 = vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A70, a13.f64[0] * a13.f64[0]), (float64x2_t)xmmword_208233A80), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A90, a13.f64[0] * a13.f64[0]), (float64x2_t)xmmword_208233AC0), v40)), v40 * v40);
  v43 = vaddq_f64(v41, v42);
  _Q4.f64[0] = a13.f64[0];
  v45 = (int)v39 & 3;
  if (v20 >= 0.0001)
  {
    LODWORD(a13.f64[0]) = 0;
    v42 = xmmword_208233BB0[v45];
    v51 = vmulq_f64(_Q4, v42);
    v48 = (int64x2_t)vmulq_f64(v43, v51);
    v46 = (int)v39 & 1;
    LODWORD(v51.f64[0]) = v46;
    v52 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v51, (int32x4_t)a13), 0);
    v47 = (float64x2_t)vdupq_laneq_s64(v48, 1);
    v49 = *(double *)vbslq_s8(v52, (int8x16_t)v48, (int8x16_t)v47).i64 / v20;
  }
  else
  {
    v46 = (int)v39 & 1;
    v47 = xmmword_208233BB0[v45];
    v48 = (int64x2_t)vmulq_f64(v43, vmulq_f64(_Q4, v47));
    v49 = 1.0;
  }
  LODWORD(v47.f64[0]) = 0;
  LODWORD(v42.f64[0]) = v46;
  v53 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, (int32x4_t)v47), 0), (int8x16_t)v48, (int8x16_t)vdupq_lane_s64(v48.i64[0], 0));
  *(float64x2_t *)a1 = vmulq_n_f64(_Q1, v49);
  *(_QWORD *)(a1 + 16) = v53.i64[1];
  if (a5)
  {
    v54 = (int64x2_t)vmulq_f64((float64x2_t)a3[1], (float64x2_t)xmmword_208233AD0);
    v55 = (int64x2_t)vmulq_f64(*(float64x2_t *)a3, (float64x2_t)xmmword_208233AE0);
    v56 = v38 * v38;
    v57 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(v55, v54), vmulq_n_f64((float64x2_t)vzip2q_s64(v55, v54), v56)), v56);
    v58 = v57.f64[0] + vmuld_lane_f64(v56 * v56, v57, 1) + 1.0;
    if (v20 >= 0.0001)
      v59 = (*(double *)&v53.i64[1] / v58 - v49) / (v20 * v20);
    else
      v59 = -0.333333333;
    v60.f64[0] = 0.0;
    v60.f64[1] = v49;
    v61 = vmulq_n_f64(*(float64x2_t *)a2, v59);
    v62 = vmlaq_laneq_f64(v60, v61, *(float64x2_t *)a2, 1);
    *a5 = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v49, v61, *(double *)a2);
    a5[1] = v62;
    a5[2] = vdivq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v58), 0));
  }
  return 1;
}

BOOL sub_207D34F48(float64x2_t *a1, float64x2_t *a2, double *a3)
{
  double v3;

  v3 = a2[1].f64[0];
  if (v3 >= 0.00000001)
  {
    _Q5 = vmulq_n_f64(*a2, 1.0 / v3);
    _D3 = vmuld_lane_f64(1.0 / v3, *a2, 1);
    __asm { FMLA            D4, D3, V5.D[1] }
    *a1 = vmulq_n_f64(_Q5, *a3 * _D4 + 1.0 + _D4 * _D4 * (a3[1] + a3[2] * _D4));
  }
  return v3 >= 0.00000001;
}

void sub_207D34FB0(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  double v19;
  double v20;
  double v21;
  double v22;
  float v25;
  uint64_t v26;
  float v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  _QWORD *v41;
  void *v42;
  char *v43;
  void *v44;
  void *v45;
  void *__p[2];
  _BYTE v47[56];
  _BYTE v48[80];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[26];
  double v55;
  double v56;
  double v57[3];
  double v58[5];

  v58[2] = *(double *)MEMORY[0x24BDAC8D0];
  memset(&v48[8], 0, 72);
  *(_OWORD *)__p = 0u;
  memset(v47, 0, 48);
  v49 = xmmword_208233D70;
  v50 = unk_208233D80;
  LOBYTE(v51) = 0;
  v54[0] = 0;
  v54[8] = 0;
  v54[16] = 0;
  *(_WORD *)&v54[24] = 0;
  if (a2 && a3)
  {
    *(_QWORD *)&v47[24] = (unint64_t)((double)a2 * 1.5);
    *(_QWORD *)&v47[32] = (unint64_t)((double)a3 * 1.5);
    *(_DWORD *)&v47[40] = (int)((double)a2 * 0.5 * 0.5);
    *(_DWORD *)&v47[44] = (int)((double)a3 * 0.5 * 0.5);
    sub_207D454F4((uint64_t)__p, 2uLL);
    v10 = __p[0];
    v11 = *(_DWORD *)&v47[24] * *(_DWORD *)&v47[32];
    LODWORD(v57[0]) = -1082130432;
    v12 = (uint64_t)(v10[1] - *v10) >> 2;
    if (v11 <= v12)
    {
      if (v11 < v12)
        *((_QWORD *)__p[0] + 1) = *(_QWORD *)__p[0] + 4 * v11;
    }
    else
    {
      sub_207D456CC((uint64_t)__p[0], v11 - v12, (const float *)v57);
      v10 = __p[0];
    }
    LODWORD(v57[0]) = -1082130432;
    v13 = v10[3];
    v14 = (v10[4] - v13) >> 2;
    if (v11 <= v14)
    {
      if (v11 < v14)
        v10[4] = v13 + 4 * v11;
    }
    else
    {
      sub_207D456CC((uint64_t)(v10 + 3), v11 - v14, (const float *)v57);
      v10 = __p[0];
    }
    v15 = *(_QWORD *)&v47[32];
    if (*(_QWORD *)&v47[32] && *(_QWORD *)&v47[24])
    {
      v16 = 0;
      v17 = 1;
      do
      {
        if (v17)
        {
          for (i = 0; i < v17; ++i)
          {
            v19 = ((double)i - (double)*(int *)&v47[40] - *(double *)(a4 + 16)) / *(double *)a4;
            v20 = *(double *)(a4 + 32);
            v21 = (double)v16 - (double)*(int *)&v47[44] - *(double *)(a4 + 40);
            v55 = 0.0;
            v56 = 0.0;
            v57[0] = v19;
            v57[1] = v21 / v20;
            v57[2] = 1.0;
            sub_20811471C(v58, v57, (int64x2_t *)a5);
            v22 = v58[1] * *(double *)(a4 + 32) + *(double *)(a4 + 40);
            v55 = v58[0] * *(double *)a4 + *(double *)(a4 + 16);
            v56 = v22;
            v17 = *(_QWORD *)&v47[24];
            if (v55 >= 0.0 && v22 <= (double)(a3 - 1) && v22 >= 0.0 && v55 <= (double)(a2 - 1))
            {
              v25 = v55;
              v26 = 4 * (i + v16 * *(_QWORD *)&v47[24]);
              *(float *)(*v10 + v26) = v25;
              v27 = v22;
              *(float *)(v10[3] + v26) = v27;
            }
          }
          v15 = *(_QWORD *)&v47[32];
        }
        ++v16;
      }
      while (v16 < v15);
    }
    *(_QWORD *)&v47[8] = a2;
    *(_QWORD *)&v47[16] = a3;
    v28 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v48[40] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v48[56] = v28;
    *(_QWORD *)&v48[72] = *(_QWORD *)(a4 + 64);
    v29 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v48[8] = *(_OWORD *)a4;
    *(_OWORD *)&v48[24] = v29;
    v30 = *(_OWORD *)(a5 + 16);
    v49 = *(_OWORD *)a5;
    v50 = v30;
    *(_DWORD *)&v47[48] = 1 - *(_DWORD *)&v47[40];
    *(_DWORD *)&v47[52] = 1 - *(_DWORD *)&v47[44];
    *(_DWORD *)v48 = a2 + *(_DWORD *)&v47[40] - 1;
    *(_DWORD *)&v48[4] = a3 + *(_DWORD *)&v47[44] - 1;
  }
  else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 118, (uint64_t)"odt::image_detection_and_tracking::CreateLookUpTableData<>( lookup_table_data, width, height, cam_intrinsics, distortion_coefficients, scale, use_rajan)", 152, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v31 = (char *)operator new(0x120uLL);
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = 0;
  *(_QWORD *)v31 = off_24C0730C0;
  v32 = sub_207D159C4((_QWORD *)v31 + 3, (uint64_t *)__p);
  v33 = v52;
  v34 = *(_OWORD *)v54;
  *((_OWORD *)v31 + 15) = v53;
  *((_OWORD *)v31 + 16) = v34;
  v35 = *(_OWORD *)&v48[64];
  v36 = v50;
  *((_OWORD *)v31 + 11) = v49;
  *((_OWORD *)v31 + 12) = v36;
  *((_OWORD *)v31 + 13) = v51;
  *((_OWORD *)v31 + 14) = v33;
  v37 = *(_OWORD *)v48;
  v38 = *(_OWORD *)&v48[32];
  *((_OWORD *)v31 + 7) = *(_OWORD *)&v48[16];
  *((_OWORD *)v31 + 8) = v38;
  *((_OWORD *)v31 + 9) = *(_OWORD *)&v48[48];
  *((_OWORD *)v31 + 10) = v35;
  v39 = *(_OWORD *)&v47[24];
  *((_OWORD *)v31 + 3) = *(_OWORD *)&v47[8];
  *((_OWORD *)v31 + 4) = v39;
  *((_OWORD *)v31 + 5) = *(_OWORD *)&v47[40];
  *((_OWORD *)v31 + 6) = v37;
  *(_OWORD *)(v31 + 266) = *(_OWORD *)&v54[10];
  *a1 = v32;
  a1[1] = v31;
  v40 = (char *)__p[0];
  if (__p[0])
  {
    v41 = __p[1];
    v42 = __p[0];
    if (__p[1] != __p[0])
    {
      v43 = (char *)__p[1];
      do
      {
        v45 = (void *)*((_QWORD *)v43 - 3);
        v43 -= 24;
        v44 = v45;
        if (v45)
        {
          *(v41 - 2) = v44;
          operator delete(v44);
        }
        v41 = v43;
      }
      while (v43 != v40);
      v42 = __p[0];
    }
    __p[1] = v40;
    operator delete(v42);
  }
}

void sub_207D354A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_207D14AB4(&a11);
  _Unwind_Resume(a1);
}

void sub_207D354C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  sub_207C99D78((uint64_t)&a9);
  sub_207D14AB4(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_207D354F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  unsigned __int16 v23;
  _QWORD *v24;
  const void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned __int8 v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void **v53;
  _QWORD *v54;
  void *v55;
  __n128 v56;
  uint64_t v57;
  void *v58;
  void **v59;
  _QWORD *v60;
  void *v61;
  void **v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *__p;

  *(_QWORD *)a1 = off_24C073050;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_DWORD *)(a1 + 120) = 0;
  kdebug_trace();
  v6 = (char *)operator new(0x708uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C073110;
  sub_207D2F690((uint64_t)(v6 + 24), a2);
  *((_DWORD *)v6 + 278) = 0;
  sub_207D28A00((uint64_t)(v6 + 1120), a2, (__int128 *)a3);
  v7 = *(_OWORD *)(a2 + 664);
  *((_OWORD *)v6 + 87) = *(_OWORD *)(a2 + 680);
  *((_OWORD *)v6 + 86) = v7;
  v8 = *(_OWORD *)(a2 + 632);
  *((_OWORD *)v6 + 85) = *(_OWORD *)(a2 + 648);
  *((_OWORD *)v6 + 76) = 0u;
  *((_OWORD *)v6 + 75) = 0u;
  *((_DWORD *)v6 + 308) = 1065353216;
  *((_QWORD *)v6 + 159) = 0;
  *(_OWORD *)(v6 + 1240) = 0u;
  *(_OWORD *)(v6 + 1256) = 0u;
  *((_DWORD *)v6 + 320) = 1065353216;
  *(_OWORD *)(v6 + 1288) = 0u;
  *(_OWORD *)(v6 + 1304) = 0u;
  *((_DWORD *)v6 + 330) = 1065353216;
  *((_OWORD *)v6 + 83) = 0u;
  *((_OWORD *)v6 + 84) = v8;
  *((_QWORD *)v6 + 178) = 0;
  *((_OWORD *)v6 + 88) = 0u;
  v9 = *(_BYTE **)(a2 + 696);
  v10 = *(_BYTE **)(a2 + 704);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    if (v11 < 0)
      sub_207CA420C();
    v12 = (char *)operator new(v10 - v9);
    *((_QWORD *)v6 + 176) = v12;
    *((_QWORD *)v6 + 177) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *((_QWORD *)v6 + 178) = v13;
    memcpy(v12, v9, v11);
    *((_QWORD *)v6 + 177) = v13;
  }
  *((_QWORD *)v6 + 181) = 0;
  *(_OWORD *)(v6 + 1432) = 0u;
  *((_DWORD *)v6 + 364) = *(_DWORD *)(a2 + 720);
  v14 = *(_OWORD *)(a2 + 740);
  *(_OWORD *)(v6 + 1460) = *(_OWORD *)(a2 + 724);
  *(_OWORD *)(v6 + 1476) = v14;
  *(_QWORD *)(v6 + 1492) = *(_QWORD *)(a2 + 756);
  *((_DWORD *)v6 + 377) = *(_DWORD *)(a2 + 772);
  *(_QWORD *)(v6 + 1500) = *(_QWORD *)(a2 + 764);
  *(_OWORD *)(v6 + 1512) = *(_OWORD *)(a2 + 776);
  *(_OWORD *)(v6 + 1524) = *(_OWORD *)(a2 + 788);
  *(_QWORD *)(v6 + 1540) = *(_QWORD *)(a2 + 804);
  *((_DWORD *)v6 + 387) = *(_DWORD *)(a2 + 812);
  *((_QWORD *)v6 + 194) = *(_QWORD *)(a2 + 816);
  *((_DWORD *)v6 + 390) = *(_DWORD *)(a2 + 824);
  *(_QWORD *)(v6 + 1564) = *(_QWORD *)(a2 + 828);
  *((_DWORD *)v6 + 393) = *(_DWORD *)(a2 + 836);
  *((_DWORD *)v6 + 396) = *(_DWORD *)(a2 + 848);
  *((_QWORD *)v6 + 197) = *(_QWORD *)(a2 + 840);
  v15 = *(_QWORD *)(a2 + 852);
  *((_DWORD *)v6 + 399) = *(_DWORD *)(a2 + 860);
  *(_QWORD *)(v6 + 1588) = v15;
  *((_DWORD *)v6 + 402) = *(_DWORD *)(a2 + 872);
  *((_QWORD *)v6 + 200) = *(_QWORD *)(a2 + 864);
  *((_DWORD *)v6 + 405) = *(_DWORD *)(a2 + 884);
  *(_QWORD *)(v6 + 1612) = *(_QWORD *)(a2 + 876);
  *((_DWORD *)v6 + 408) = *(_DWORD *)(a2 + 896);
  *((_QWORD *)v6 + 203) = *(_QWORD *)(a2 + 888);
  v6[1640] = 0;
  v6[1648] = 0;
  *(_OWORD *)(v6 + 1656) = 0u;
  *(_OWORD *)(v6 + 1672) = 0u;
  *(_OWORD *)(v6 + 1688) = 0u;
  v16 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 210) = v16;
  *((_QWORD *)v6 + 212) = v16 + 64;
  *(_DWORD *)v16 = 1065353216;
  *(_QWORD *)(v16 + 12) = 0;
  *(_QWORD *)(v16 + 4) = 0;
  *((_DWORD *)v16 + 5) = 1065353216;
  *((_QWORD *)v16 + 3) = 0;
  *((_QWORD *)v16 + 4) = 0;
  *((_DWORD *)v16 + 10) = 1065353216;
  *(_QWORD *)(v16 + 52) = 0;
  *(_QWORD *)(v16 + 44) = 0;
  *((_DWORD *)v16 + 15) = 1065353216;
  *((_QWORD *)v6 + 211) = v16 + 64;
  v6[1704] = 0;
  *((_QWORD *)v6 + 214) = 0;
  *((_QWORD *)v6 + 216) = 0;
  *((_QWORD *)v6 + 215) = 0;
  v17 = a1;
  v18 = operator new(0xF0uLL);
  *((_QWORD *)v6 + 214) = v18;
  *((_QWORD *)v6 + 216) = v18 + 15;
  *v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[14] = 0u;
  *((_QWORD *)v6 + 215) = v18 + 15;
  v6[1792] = 0;
  v6[1768] = 0;
  *(_OWORD *)(v6 + 1752) = 0u;
  *(_OWORD *)(v6 + 1736) = 0u;
  if (*(_BYTE *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_207CA40D8(v6 + 1768, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)(v6 + 1768) = *(_OWORD *)a3;
      *((_QWORD *)v6 + 223) = *(_QWORD *)(a3 + 16);
    }
    v6[1792] = 1;
  }
  v19 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6 + 24;
  *(_QWORD *)(a1 + 16) = v6;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD **)v5;
  v23 = sub_207C95CD8("com.apple.odt.read_config_from_user_defaults");
  if (v23 >= 0x100u)
    *((_BYTE *)v22 + 1680) = v23;
  v24 = *(_QWORD **)v5;
  if (*(_BYTE *)(*(_QWORD *)v5 + 1680))
  {
    sub_207D35E44(a1, (uint64_t)v24);
    v24 = *(_QWORD **)v5;
  }
  v25 = (const void **)a3;
  v26 = v24[1];
  v27 = v24[2];
  if (v26 == v27)
  {
    v24[152] = v24[7];
  }
  else
  {
    v28 = 0;
    v29 = 0x21CFB2B78C13521DLL * ((v27 - v26) >> 3);
    v30 = (_QWORD *)(v26 + 120);
    if (v29 > 1)
      v30 = v24 + 7;
    v24[152] = *v30;
    v31 = 88;
    do
    {
      v32 = *(_QWORD *)v5;
      v33 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + v31);
      v35 = *v33;
      v34 = v33 - 24;
      if (v35)
      {
        __p = v34;
        sub_207D2CF4C(v32 + 1224, (uint64_t)v34, (uint64_t)&unk_20822AD51, (__int128 **)&__p)[5] = v28;
      }
      ++v28;
      v31 += 424;
    }
    while (v29 != v28);
  }
  v36 = *(_QWORD *)v5;
  v37 = *(uint64_t **)(*(_QWORD *)v5 + 48);
  if (v37)
  {
    v38 = 0;
    while (1)
    {
      v39 = (unint64_t *)(v37 + 3);
      if (*((_BYTE *)v37 + 56))
      {
        v40 = *(_QWORD *)v5 + 1224;
        __p = v37 + 4;
        v41 = sub_207D2CF4C(v40, (uint64_t)(v37 + 4), (uint64_t)&unk_20822AD51, (__int128 **)&__p)[5];
        *v39 = v41;
        if (v41 < *(_QWORD *)(*(_QWORD *)v5 + 1216))
          goto LABEL_34;
      }
      else if (*v39 < *(_QWORD *)(*(_QWORD *)v5 + 1216))
      {
        goto LABEL_34;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 341, (uint64_t)"tracker_config.class_id < m_->num_classes", 41, (uint64_t)" Class ID out of range!", 23, (void (*)(void **))sub_208216974))
      {
        abort();
      }
LABEL_34:
      v42 = *((_BYTE *)v37 + 676) != 0;
      if (*((char *)v37 + 95) < 0)
      {
        if (v37[10])
        {
LABEL_38:
          if (*((_BYTE *)v37 + 676))
          {
            v43 = operator new(0x3C0uLL);
            sub_207DB2B10((uint64_t)v43, (uint64_t)(v37 + 3), v25);
            __p = v43;
            v44 = sub_207D45E8C(*(_QWORD *)v5 + 1176, *v39, v37 + 3);
            v45 = v44[3];
            v44[3] = v43;
            if (v45)
            {
              v46 = (void *)sub_207D43610(v45);
              operator delete(v46);
            }
          }
        }
      }
      else if (*((_BYTE *)v37 + 95))
      {
        goto LABEL_38;
      }
      v38 |= v42;
      v37 = (uint64_t *)*v37;
      if (!v37)
      {
        v36 = *(_QWORD *)v5;
        if (((*(_QWORD *)(*(_QWORD *)v5 + 1200) == 0) & v38) != 0)
        {
          *(_QWORD *)(v36 + 928) = 0x7FEFFFFFFFFFFFFFLL;
          *(_OWORD *)(v36 + 904) = 0u;
        }
        v17 = a1;
        break;
      }
    }
  }
  v47 = (char *)operator new(0x98uLL);
  *((_QWORD *)v47 + 4) = 0;
  *(_OWORD *)v47 = 0u;
  *((_OWORD *)v47 + 1) = 0u;
  *((_DWORD *)v47 + 8) = 1065353216;
  *((_QWORD *)v47 + 18) = 0;
  v48 = *(_OWORD *)(v36 + 528);
  v49 = *(_OWORD *)(v36 + 544);
  *(_OWORD *)(v47 + 72) = *(_OWORD *)(v36 + 560);
  *(_OWORD *)(v47 + 56) = v49;
  *(_OWORD *)(v47 + 40) = v48;
  v50 = *(_OWORD *)(v36 + 576);
  v51 = *(_OWORD *)(v36 + 592);
  v52 = *(_OWORD *)(v36 + 608);
  *((_QWORD *)v47 + 17) = *(_QWORD *)(v36 + 624);
  *(_OWORD *)(v47 + 120) = v52;
  *(_OWORD *)(v47 + 104) = v51;
  *(_OWORD *)(v47 + 88) = v50;
  v53 = *(void ***)(*(_QWORD *)v5 + 1312);
  *(_QWORD *)(*(_QWORD *)v5 + 1312) = v47;
  if (v53)
  {
    v54 = v53[2];
    if (v54)
    {
      do
      {
        v66 = (_QWORD *)*v54;
        v67 = (uint64_t *)v54[3];
        v54[3] = 0;
        if (v67)
        {
          v68 = sub_207D43990(v67);
          operator delete(v68);
        }
        operator delete(v54);
        v54 = v66;
      }
      while (v66);
    }
    v55 = *v53;
    *v53 = 0;
    if (v55)
      operator delete(v55);
    operator delete(v53);
  }
  v56 = sub_207DF6F84(*(_QWORD *)v5 + 72, (__int128 *)(*(_QWORD *)v5 + 248), &__p);
  v57 = *(_QWORD *)v5;
  v58 = __p;
  __p = 0;
  v59 = *(void ***)(v57 + 1304);
  *(_QWORD *)(v57 + 1304) = v58;
  if (v59)
  {
    v60 = v59[2];
    while (v60)
    {
      v69 = v60;
      v60 = (_QWORD *)*v60;
      v70 = (std::__shared_weak_count *)v69[4];
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v56);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      operator delete(v69);
    }
    v61 = *v59;
    *v59 = 0;
    if (v61)
      operator delete(v61);
    operator delete(v59);
    v62 = (void **)__p;
    __p = 0;
    if (v62)
    {
      v63 = v62[2];
      while (v63)
      {
        v73 = v63;
        v63 = (_QWORD *)*v63;
        v74 = (std::__shared_weak_count *)v73[4];
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        operator delete(v73);
      }
      v64 = *v62;
      *v62 = 0;
      if (v64)
        operator delete(v64);
      operator delete(v62);
    }
  }
  kdebug_trace();
  return v17;
}

void sub_207D35CE8(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, ...)
{
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a5);
  if (*(_BYTE *)(v8 + 1792) && *(char *)(v8 + 1791) < 0)
    operator delete(*v7);
  v13 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v8 + 1720) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v8 + 1680);
  if (v14)
  {
    *(_QWORD *)(v8 + 1688) = v14;
    operator delete(v14);
  }
  sub_207CBE108((void **)(v11 + 1632));
  sub_207CBE108((void **)(v11 + 1408));
  v15 = *a3;
  if (*a3)
  {
    *(_QWORD *)(v8 + 1416) = v15;
    operator delete(v15);
  }
  sub_207D360A4((void **)(v8 + 1336));
  sub_207D36124((void **)(v8 + 1328));
  sub_207D45D5C(v11 + 1264);
  sub_207C9BBC4(v8 + 1248);
  sub_207D45D94(v8 + 1200);
  sub_207D2CC9C(v10);
  sub_207D04BC4(v9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v8);
  operator delete(v16);
  sub_207CD822C((uint64_t)va);
  sub_207D361D0(a4);
  sub_207D061C4(a5 + 24);
  sub_207C99D78(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_207D35E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *i;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  char v25;
  uint64_t v26;

  v4 = sub_207C95DF0("com.apple.odt.diff_threshold");
  if ((v4 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 1032) = v4;
  v5 = sub_207C95DF0("com.apple.odt.raw_and_filtered_diff_threshold");
  if ((v5 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 1040) = v5;
  v6 = sub_207C95D50("com.apple.odt.static_tracking_time_interval_s");
  if (v7)
    *(_QWORD *)(a2 + 952) = v6;
  v8 = sub_207C95D50("com.apple.odt.max_dynamic_tracking_budget_time_interval_s");
  if (v9)
    *(_QWORD *)(a2 + 936) = v8;
  v10 = sub_207C95DF0("com.apple.odt.pose_filter_beta");
  if ((v10 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 304) = v10;
  v11 = sub_207C95DF0("com.apple.odt.pose_filter_tau_fcmin");
  if ((v11 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 300) = v11;
  v12 = sub_207C95D50("com.apple.odt.tracking_interval_annealing_factor");
  if (v13)
    *(_QWORD *)(a2 + 960) = v12;
  v14 = sub_207C95DF0("com.apple.odt.static_out_of_fov_threshold");
  if ((v14 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 1048) = v14;
  v15 = sub_207C95DF0("com.apple.odt.dynamic_out_of_fov_threshold");
  if ((v15 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 1052) = v15;
  v16 = sub_207C95DF0("com.apple.odt.duplicates_visibility_threshold");
  if ((v16 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 1056) = v16;
  v17 = sub_207C95DF0("com.apple.odt.minimum_tracking_confidence_value");
  if ((v17 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 632) = v17;
  v18 = sub_207C95DF0("com.apple.odt.minimum_prediction_confidence_value");
  if ((v18 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 636) = v18;
  v19 = sub_207C95DF0("com.apple.odt.minimum_tracking_confidence_value_for_detection_verification");
  if ((v19 & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 648) = v19;
  result = sub_207C95DF0("com.apple.odt.minimum_prediction_visibility_value");
  if ((result & 0xFF00000000) != 0)
    *(_DWORD *)(a2 + 644) = result;
  for (i = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 48); i; i = (uint64_t *)*i)
  {
    v22 = sub_207C95DF0("com.apple.odt.heatmap_confidence_threshold");
    if ((v22 & 0xFF00000000) != 0)
      *((_DWORD *)i + 152) = v22;
    v23 = sub_207C95DF0("com.apple.odt.epipolar_heatmap_confidence");
    if ((v23 & 0xFF00000000) != 0)
      *((_DWORD *)i + 155) = v23;
    v24 = sub_207C95EA0("com.apple.odt.min_num_matches");
    if (v25)
      i[82] = v24;
    v26 = sub_207C95DF0("com.apple.odt.rotation_span_tolerance");
    if ((v26 & 0xFF00000000) != 0)
      *((_DWORD *)i + 168) = v26;
    result = sub_207C95CD8("com.apple.odt.use_truncated_kpts_as_inliers");
    if ((unsigned __int16)result >= 0x100u)
      *((_BYTE *)i + 677) = result;
  }
  return result;
}

uint64_t *sub_207D36070(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)sub_207D43610(v2);
    operator delete(v3);
  }
  return a1;
}

void **sub_207D360A4(void **a1)
{
  void **v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;

  v2 = (void **)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[2];
    if (v3)
    {
      do
      {
        v6 = (_QWORD *)*v3;
        v7 = (uint64_t *)v3[3];
        v3[3] = 0;
        if (v7)
        {
          v8 = sub_207D43990(v7);
          operator delete(v8);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6);
    }
    v4 = *v2;
    *v2 = 0;
    if (v4)
      operator delete(v4);
    operator delete(v2);
  }
  return a1;
}

void **sub_207D36124(void **a1)
{
  void **v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (void **)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[2];
    while (v3)
    {
      v6 = v3;
      v3 = (_QWORD *)*v3;
      v7 = (std::__shared_weak_count *)v6[4];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      operator delete(v6);
    }
    v4 = *v2;
    *v2 = 0;
    if (v4)
      operator delete(v4);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207D361D0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[5];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_207D36260(uint64_t a1@<X0>, unint64_t **a2@<X1>, CFErrorRef *a3@<X8>)
{
  unint64_t *v6;
  unint64_t *v7;
  int8x8_t *v8;
  unint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  std::error_category *v60;
  std::error_category *v61;
  const std::error_category *cat;
  unint64_t *v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _QWORD *v69;
  int64_t v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  std::error_category *v78;
  uint64_t v79;
  __int128 v80;
  unsigned __int8 v81;
  void *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  void *v124;
  char *v125;
  char *v126;
  void *v127;
  uint64_t v128;
  char *v129;
  uint64_t **i;
  _QWORD *v131;
  uint64_t v132;
  uint64_t j;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  CFErrorRef *v142;
  CFErrorRef *v143;
  char v144[8];
  std::__shared_weak_count *v145;
  std::error_condition v146;
  std::error_category *v147;
  void *v148;
  char *v149;
  char *v150;
  void *__p;
  __int128 v152;
  void *v153;
  int v154;

  if (!*(_QWORD *)(a1 + 8)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 365, (uint64_t)"m_ != nullptr", 13, (uint64_t)"The DetectTrackRefinePipeline doesn't seem to exist, it has to be created once before reconfiguring", 99, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
    goto LABEL_81;
  do
  {
    v8 = *(int8x8_t **)(a1 + 8);
    v9 = *v6;
    v10 = v8[148];
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8(v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v12 = *v6;
        if (v9 >= *(_QWORD *)&v10)
          v12 = v9 % *(_QWORD *)&v10;
      }
      else
      {
        v12 = (*(_QWORD *)&v10 - 1) & v9;
      }
      v13 = *(_QWORD **)(*(_QWORD *)&v8[147] + 8 * v12);
      if (v13)
      {
        v14 = (_QWORD *)*v13;
        if (v14)
        {
          if (v11.u32[0] < 2uLL)
          {
            v15 = *(_QWORD *)&v10 - 1;
            while (1)
            {
              v17 = v14[1];
              if (v17 == v9)
              {
                if (v14[2] == v9)
                  goto LABEL_80;
              }
              else if ((v17 & v15) != v12)
              {
                goto LABEL_24;
              }
              v14 = (_QWORD *)*v14;
              if (!v14)
                goto LABEL_24;
            }
          }
          do
          {
            v16 = v14[1];
            if (v16 == v9)
            {
              if (v14[2] == v9)
                goto LABEL_80;
            }
            else
            {
              if (v16 >= *(_QWORD *)&v10)
                v16 %= *(_QWORD *)&v10;
              if (v16 != v12)
                break;
            }
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
      }
    }
LABEL_24:
    v18 = v8[5];
    if (!*(_QWORD *)&v18)
      goto LABEL_118;
    v19 = (uint8x8_t)vcnt_s8(v18);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v20 = *v6;
      if (v9 >= *(_QWORD *)&v18)
        v20 = v9 % *(_QWORD *)&v18;
    }
    else
    {
      v20 = (*(_QWORD *)&v18 - 1) & v9;
    }
    v21 = *(uint64_t ***)(*(_QWORD *)&v8[4] + 8 * v20);
    if (!v21)
      goto LABEL_118;
    v22 = *v21;
    if (!*v21)
      goto LABEL_118;
    if (v19.u32[0] < 2uLL)
    {
      v23 = *(_QWORD *)&v18 - 1;
      while (1)
      {
        v25 = v22[1];
        if (v25 == v9)
        {
          if (v22[2] == v9)
            goto LABEL_45;
        }
        else if ((v25 & v23) != v20)
        {
          goto LABEL_118;
        }
        v22 = (uint64_t *)*v22;
        if (!v22)
          goto LABEL_118;
      }
    }
    while (1)
    {
      v24 = v22[1];
      if (v24 == v9)
        break;
      if (v24 >= *(_QWORD *)&v18)
        v24 %= *(_QWORD *)&v18;
      if (v24 != v20)
        goto LABEL_118;
LABEL_34:
      v22 = (uint64_t *)*v22;
      if (!v22)
        goto LABEL_118;
    }
    if (v22[2] != v9)
      goto LABEL_34;
LABEL_45:
    if (*((char *)v22 + 95) < 0)
    {
      if (v22[10])
        goto LABEL_49;
LABEL_118:
      __p = operator new(0x40uLL);
      v152 = xmmword_208233CA0;
      strcpy((char *)__p, "The requested tracker wasn't found in the tracker configs.");
      LOBYTE(v153) = 1;
      v81 = atomic_load((unsigned __int8 *)&qword_25452B598);
      if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
      {
        __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
        __cxa_guard_release(&qword_25452B598);
      }
      *(_QWORD *)&v146.__val_ = 15;
      v146.__cat_ = (const std::error_category *)&off_253E50C48;
      sub_207DEB8A0(&v146, (uint64_t)&__p, a3);
      if ((_BYTE)v153 && SHIBYTE(v152) < 0)
      {
        v82 = __p;
        goto LABEL_234;
      }
      goto LABEL_235;
    }
    if (!*((_BYTE *)v22 + 95))
      goto LABEL_118;
LABEL_49:
    v26 = v149;
    if (v149 < v150)
    {
      *(_QWORD *)v149 = v9;
      v27 = (uint64_t)(v26 + 8);
      goto LABEL_71;
    }
    v141 = v7;
    v142 = a3;
    v28 = (char *)v148;
    v29 = v149 - (_BYTE *)v148;
    v30 = (v149 - (_BYTE *)v148) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      sub_207CA420C();
    v32 = v150 - (_BYTE *)v148;
    if ((v150 - (_BYTE *)v148) >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (!v33)
    {
      v35 = 0;
      v36 = (unint64_t *)(8 * v30);
      *(_QWORD *)(8 * v30) = v9;
      v27 = 8 * v30 + 8;
      v37 = v26 - v28;
      if (v26 != v28)
        goto LABEL_60;
LABEL_63:
      v7 = v141;
      a3 = v142;
      goto LABEL_69;
    }
    if (v33 >> 61)
      sub_207CA3AB8();
    v34 = v33;
    v35 = (char *)operator new(8 * v33);
    v33 = v34;
    v36 = (unint64_t *)&v35[8 * v30];
    *v36 = *v6;
    v27 = (uint64_t)(v36 + 1);
    v37 = v26 - v28;
    if (v26 == v28)
      goto LABEL_63;
LABEL_60:
    v38 = v37 - 8;
    if (v38 < 0x58)
    {
      v7 = v141;
      a3 = v142;
      goto LABEL_68;
    }
    v39 = v26 - &v35[v29];
    v7 = v141;
    a3 = v142;
    if (v39 < 0x20)
      goto LABEL_254;
    v40 = (v38 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v26[-v41];
    v36 = (unint64_t *)((char *)v36 - v41);
    v43 = &v35[8 * v30 - 16];
    v44 = v26 - 16;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
      *(_OWORD *)v43 = v46;
      v43 -= 32;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    v26 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_254:
      do
      {
LABEL_68:
        v47 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v36 = v47;
      }
      while (v26 != v28);
    }
LABEL_69:
    v148 = v36;
    v150 = &v35[8 * v33];
    if (v28)
    {
      v48 = v27;
      operator delete(v28);
      v27 = v48;
      v8 = *(int8x8_t **)(a1 + 8);
    }
LABEL_71:
    v149 = (char *)v27;
    v49 = operator new(0x3C0uLL);
    sub_207DB2B10((uint64_t)v49, (uint64_t)(v22 + 3), (const void **)&v8[218]);
    __p = v49;
    v50 = sub_207D45E8C(*(_QWORD *)(a1 + 8) + 1176, *v6, v6);
    v51 = v50[3];
    v50[3] = v49;
    if (v51)
    {
      v52 = (void *)sub_207D43610(v51);
      operator delete(v52);
    }
    v53 = sub_207D45E8C(*(_QWORD *)(a1 + 8) + 1176, *v6, v6);
    v54 = v53[3];
    v55 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v54 + 576) != (uint64_t)(*(_QWORD *)(v55 + 1664) - *(_QWORD *)(v55 + 1656)) >> 6
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/include/ODT/Tracking/Patchbased3dModelTracker.h", 331, (uint64_t)"T_c0cn_vec.size() == cfg_.num_camera_streams", 44, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    if (v54 + 760 != v55 + 1656)
      sub_207D43AA8((_QWORD *)(v54 + 760), *(char **)(v55 + 1656), *(char **)(v55 + 1664), (uint64_t)(*(_QWORD *)(v55 + 1664) - *(_QWORD *)(v55 + 1656)) >> 6);
    sub_207D37120(v53[3], (_QWORD *)(*(_QWORD *)(a1 + 8) + 1632));
    v56 = v53[3];
    if (!*(_BYTE *)(v56 + 472))
    {
      v57 = *(_QWORD *)(a1 + 8);
      if (v56 + 736 != v57 + 1408)
        sub_207D43C58(v56 + 736, *(_QWORD **)(v57 + 1408), *(_QWORD **)(v57 + 1416), (uint64_t)(*(_QWORD *)(v57 + 1416) - *(_QWORD *)(v57 + 1408)) >> 4);
    }
LABEL_80:
    ++v6;
  }
  while (v6 != v7);
LABEL_81:
  v143 = a3;
  *(_QWORD *)&v146.__val_ = 0;
  v146.__cat_ = 0;
  v147 = 0;
  v58 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 1192);
  if (!v58)
    goto LABEL_124;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  cat = v146.__cat_;
  while (2)
  {
    v63 = *a2;
    v64 = a2[1];
    if (*a2 != v64)
    {
      while (*v63 != v58[2])
      {
        if (++v63 == v64)
        {
          v63 = a2[1];
          break;
        }
      }
    }
    if (v63 == v64)
    {
      if (v61 < v60)
      {
        v61->__vftable = (std::error_category_vtbl *)v58[2];
        cat = ++v61;
        goto LABEL_84;
      }
      v65 = ((char *)v61 - (char *)v59) >> 3;
      v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 61)
      {
        v146.__cat_ = cat;
        sub_207CA420C();
      }
      if (((char *)v60 - (char *)v59) >> 2 > v66)
        v66 = ((char *)v60 - (char *)v59) >> 2;
      if ((unint64_t)((char *)v60 - (char *)v59) >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
      {
        if (v67 >> 61)
        {
          v146.__cat_ = cat;
          sub_207CA3AB8();
        }
        v68 = operator new(8 * v67);
        v69 = &v68[8 * v65];
        *v69 = v58[2];
        cat = (const std::error_category *)(v69 + 1);
        v70 = (char *)v61 - (char *)v59;
        if (v61 == (std::error_category *)v59)
          goto LABEL_105;
      }
      else
      {
        v68 = 0;
        v69 = (_QWORD *)(8 * v65);
        *(_QWORD *)(8 * v65) = v58[2];
        cat = (const std::error_category *)(8 * v65 + 8);
        v70 = (char *)v61 - (char *)v59;
        if (v61 == (std::error_category *)v59)
          goto LABEL_105;
      }
      v71 = v70 - 8;
      if (v71 >= 0x168)
      {
        v74 = ((char *)&v61[-1] - (char *)v59) & 0xFFFFFFFFFFFFFFF8;
        if (&v68[(char *)v61 - (char *)v59 - 8 - v74] > &v68[(char *)v61 - (char *)v59 - 8])
        {
          v72 = (unint64_t *)v61;
        }
        else if ((std::error_category *)((char *)&v61[-1] - v74) > &v61[-1])
        {
          v72 = (unint64_t *)v61;
        }
        else if ((unint64_t)((char *)v59 - v68) >= 0x20)
        {
          v75 = (v71 >> 3) + 1;
          v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
          v72 = (unint64_t *)&v61[v76 / 0xFFFFFFFFFFFFFFF8];
          v69 = (_QWORD *)((char *)v69 - v76);
          v77 = &v68[8 * v65 - 16];
          v78 = v61 - 2;
          v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v80 = *(_OWORD *)&v78->__vftable;
            *(v77 - 1) = *(_OWORD *)&v78[-2].__vftable;
            *v77 = v80;
            v77 -= 2;
            v78 -= 4;
            v79 -= 4;
          }
          while (v79);
          if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_105;
        }
        else
        {
          v72 = (unint64_t *)v61;
        }
      }
      else
      {
        v72 = (unint64_t *)v61;
      }
      do
      {
        v73 = *--v72;
        *--v69 = v73;
      }
      while (v72 != v59);
LABEL_105:
      v60 = (std::error_category *)&v68[8 * v67];
      *(_QWORD *)&v146.__val_ = v69;
      v147 = v60;
      if (v59)
        operator delete(v59);
      v59 = v69;
      v61 = (std::error_category *)cat;
    }
LABEL_84:
    v58 = (_QWORD *)*v58;
    if (v58)
      continue;
    break;
  }
  v146.__cat_ = cat;
  while (v59 != (unint64_t *)v61)
  {
    v83 = *v59++;
    sub_207D461D0((uint64_t *)(*(_QWORD *)(a1 + 8) + 1176), v83);
  }
LABEL_124:
  v84 = *(_QWORD **)(a1 + 56);
  if (v84)
  {
    while (2)
    {
      while (2)
      {
        v85 = v84[3];
        v86 = v84[4];
        if (v85 != v86)
        {
          v87 = a2[1];
          v88 = v84[3];
          if (*a2 != v87)
          {
            v88 = v84[3];
            while (1)
            {
              v89 = *a2;
              while (*v89 != *(_QWORD *)(v88 + 32))
              {
                if (++v89 == v87)
                {
                  v89 = a2[1];
                  break;
                }
              }
              if (v89 == v87)
                break;
              v88 += 1344;
              if (v88 == v86)
                goto LABEL_153;
            }
          }
          if (v88 == v86)
            goto LABEL_153;
          v90 = v88 + 1344;
          if (v88 + 1344 != v86)
          {
            v91 = v88;
            do
            {
              v92 = v90;
              v93 = *a2;
              v94 = a2[1];
              if (*a2 != v94)
              {
                v95 = *(_QWORD *)(v88 + 1376);
                while (*v93 != v95)
                {
                  if (++v93 == v94)
                  {
                    v93 = a2[1];
                    break;
                  }
                }
              }
              if (v93 != v94)
              {
                sub_207D463D0(v91, v92);
                v91 += 1344;
              }
              v90 = v92 + 1344;
              v88 = v92;
            }
            while (v92 + 1344 != v86);
            v85 = v84[3];
            v86 = v84[4];
            if (v91 == v86)
              goto LABEL_153;
LABEL_151:
            if (v86 == v91)
            {
LABEL_152:
              v84[4] = v91;
              v85 = v84[3];
              v86 = v91;
              goto LABEL_153;
            }
            while (2)
            {
              v103 = *(std::__shared_weak_count **)(v86 - 232);
              if (!v103)
                goto LABEL_166;
              p_shared_owners = (unint64_t *)&v103->__shared_owners_;
              do
                v105 = __ldaxr(p_shared_owners);
              while (__stlxr(v105 - 1, p_shared_owners));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
                v106 = *(std::__shared_weak_count **)(v86 - 248);
                if (v106)
                {
LABEL_167:
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
              }
              else
              {
LABEL_166:
                v106 = *(std::__shared_weak_count **)(v86 - 248);
                if (v106)
                  goto LABEL_167;
              }
              if (*(_BYTE *)(v86 - 264))
              {
                if (*(_BYTE *)(v86 - 272))
                {
                  v109 = *(void **)(v86 - 296);
                  if (v109)
                  {
                    *(_QWORD *)(v86 - 288) = v109;
                    operator delete(v109);
                  }
                }
              }
              v110 = *(void **)(v86 - 392);
              if (v110)
              {
                *(_QWORD *)(v86 - 384) = v110;
                operator delete(v110);
              }
              v111 = *(void **)(v86 - 960);
              if (v111)
              {
                *(_QWORD *)(v86 - 952) = v111;
                operator delete(v111);
              }
              v112 = *(void **)(v86 - 984);
              if (v112)
              {
                *(_QWORD *)(v86 - 976) = v112;
                operator delete(v112);
              }
              if (*(_BYTE *)(v86 - 1264) && *(char *)(v86 - 1265) < 0)
              {
                operator delete(*(void **)(v86 - 1288));
                v101 = v86 - 1344;
                v102 = *(void **)(v86 - 1344);
                if (!v102)
                {
LABEL_161:
                  v86 = v101;
                  if (v101 == v91)
                    goto LABEL_152;
                  continue;
                }
              }
              else
              {
                v101 = v86 - 1344;
                v102 = *(void **)(v86 - 1344);
                if (!v102)
                  goto LABEL_161;
              }
              break;
            }
            *(_QWORD *)(v86 - 1336) = v102;
            operator delete(v102);
            goto LABEL_161;
          }
          v91 = v88;
          if (v88 != v86)
            goto LABEL_151;
LABEL_153:
          if (v85 != v86)
          {
            v84 = (_QWORD *)*v84;
            if (!v84)
              goto LABEL_217;
            continue;
          }
        }
        break;
      }
      v96 = (_QWORD *)*v84;
      sub_207D46B24((uint64_t)&__p, (_QWORD *)(a1 + 40), v84);
      v97 = __p;
      __p = 0;
      if (v97)
      {
        if (BYTE8(v152))
        {
          v98 = v97[3];
          if (v98)
          {
            v99 = v97[4];
            v100 = (void *)v97[3];
            if (v99 == v98)
            {
LABEL_214:
              v97[4] = v98;
              operator delete(v100);
              goto LABEL_215;
            }
            while (2)
            {
              v113 = *(std::__shared_weak_count **)(v99 - 232);
              if (!v113)
                goto LABEL_191;
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
                v116 = *(std::__shared_weak_count **)(v99 - 248);
                if (v116)
                {
LABEL_192:
                  v117 = (unint64_t *)&v116->__shared_owners_;
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                  }
                }
              }
              else
              {
LABEL_191:
                v116 = *(std::__shared_weak_count **)(v99 - 248);
                if (v116)
                  goto LABEL_192;
              }
              if (*(_BYTE *)(v99 - 264))
              {
                if (*(_BYTE *)(v99 - 272))
                {
                  v119 = *(void **)(v99 - 296);
                  if (v119)
                  {
                    *(_QWORD *)(v99 - 288) = v119;
                    operator delete(v119);
                  }
                }
              }
              v120 = *(void **)(v99 - 392);
              if (v120)
              {
                *(_QWORD *)(v99 - 384) = v120;
                operator delete(v120);
              }
              v121 = *(void **)(v99 - 960);
              if (v121)
              {
                *(_QWORD *)(v99 - 952) = v121;
                operator delete(v121);
              }
              v122 = *(void **)(v99 - 984);
              if (v122)
              {
                *(_QWORD *)(v99 - 976) = v122;
                operator delete(v122);
              }
              if (*(_BYTE *)(v99 - 1264) && *(char *)(v99 - 1265) < 0)
              {
                operator delete(*(void **)(v99 - 1288));
                v123 = v99 - 1344;
                v124 = *(void **)(v99 - 1344);
                if (v124)
                {
LABEL_210:
                  *(_QWORD *)(v99 - 1336) = v124;
                  operator delete(v124);
                }
              }
              else
              {
                v123 = v99 - 1344;
                v124 = *(void **)(v99 - 1344);
                if (v124)
                  goto LABEL_210;
              }
              v99 = v123;
              if (v123 == v98)
              {
                v100 = (void *)v97[3];
                goto LABEL_214;
              }
              continue;
            }
          }
        }
LABEL_215:
        operator delete(v97);
      }
      v84 = v96;
      if (v96)
        continue;
      break;
    }
  }
LABEL_217:
  sub_207D28B60(*(_QWORD *)(a1 + 8) + 1096, *(_QWORD *)(a1 + 8), (int8x8_t *)(*(_QWORD *)(a1 + 8) + 1224), (uint64_t **)(*(_QWORD *)(a1 + 8) + 1632), (uint64_t)v144);
  v125 = (char *)v148;
  v126 = v149;
  if (v148 != v149)
  {
    v127 = (void *)MEMORY[0x24BDAC760];
    do
    {
      v128 = *(_QWORD *)v125;
      v129 = (char *)operator new(0x28uLL);
      strcpy(v129, "com.apple.ODT.ODT3D.Reconfiguration");
      __p = v127;
      *(_QWORD *)&v152 = 0x40000000;
      *((_QWORD *)&v152 + 1) = sub_207DCB420;
      v153 = &unk_24C074D88;
      v154 = v128;
      analytics_send_event_lazy();
      operator delete(v129);
      v125 += 8;
    }
    while (v125 != v126);
  }
  for (i = *(uint64_t ***)(a1 + 96); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[4] + 24))(i[4]);
  if (*(_QWORD *)(a1 + 104))
  {
    v131 = *(_QWORD **)(a1 + 96);
    while (v131)
    {
      v137 = v131;
      v131 = (_QWORD *)*v131;
      v138 = (std::__shared_weak_count *)v137[5];
      if (v138)
      {
        v139 = (unint64_t *)&v138->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      operator delete(v137);
    }
    *(_QWORD *)(a1 + 96) = 0;
    v132 = *(_QWORD *)(a1 + 88);
    if (v132)
    {
      for (j = 0; j != v132; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_DWORD *)(a1 + 120) = 0;
  *v143 = 0;
  v143[1] = 0;
  v134 = v145;
  if (v145)
  {
    v135 = (unint64_t *)&v145->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v82 = *(void **)&v146.__val_;
  if (*(_QWORD *)&v146.__val_)
LABEL_234:
    operator delete(v82);
LABEL_235:
  if (v148)
    operator delete(v148);
}

void sub_207D37064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207D37120(uint64_t a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  char **v45;
  uint64_t v46;
  unsigned int v47;
  double *v48;
  uint64_t v49;
  unsigned int v50;
  float *v51;
  float *v52;
  char *v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  char *v74;
  void *v75;
  void *v76;
  float *v77;
  double *v78;
  float v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  float *v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  float *v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  float *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  char **v104;
  char **v105;
  char **v106;
  _QWORD *v107;
  float *__p;
  __int128 v109;

  if (*(_QWORD *)(a1 + 576) != (uint64_t)(a2[1] - *a2) >> 4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/include/ODT/Tracking/Patchbased3dModelTracker.h", 304, (uint64_t)"lenses.size() == cfg_.num_camera_streams", 40, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_188:
    abort();
  }
  v4 = (void **)(a1 + 712);
  if ((_QWORD *)(a1 + 712) == a2)
  {
LABEL_63:
    if (!*(_BYTE *)(a1 + 472))
      return;
    goto LABEL_64;
  }
  v6 = (_QWORD *)*a2;
  v5 = (_QWORD *)a2[1];
  v7 = (uint64_t)v5 - *a2;
  v8 = v7 >> 4;
  v9 = *(_QWORD *)(a1 + 728);
  v10 = *(char **)(a1 + 712);
  if (v7 >> 4 > (unint64_t)((v9 - (uint64_t)v10) >> 4))
  {
    if (v10)
    {
      v11 = *(char **)(a1 + 720);
      v12 = *(void **)(a1 + 712);
      if (v11 != v10)
      {
        do
        {
          v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v11 -= 16;
        }
        while (v11 != v10);
        v12 = *v4;
      }
      *(_QWORD *)(a1 + 720) = v10;
      operator delete(v12);
      v9 = 0;
      *v4 = 0;
      *(_QWORD *)(a1 + 720) = 0;
      *(_QWORD *)(a1 + 728) = 0;
    }
    if (v7 < 0)
      goto LABEL_194;
    v34 = v9 >> 3;
    if (v9 >> 3 <= v8)
      v34 = v7 >> 4;
    v61 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v61)
      v35 = v34;
    if (v35 >> 60)
LABEL_194:
      sub_207CA420C();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)(a1 + 712) = v37;
    *(_QWORD *)(a1 + 720) = v37;
    *(_QWORD *)(a1 + 728) = &v37[v36];
    while (v6 != v5)
    {
      *v37 = *v6;
      v38 = v6[1];
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 720) = v37;
    if (!*(_BYTE *)(a1 + 472))
      return;
LABEL_64:
    v104 = (char **)(a1 + 896);
    sub_207D22544(a1 + 896, (uint64_t)(a2[1] - *a2) >> 4);
    v44 = (_QWORD *)*a2;
    v103 = (_QWORD *)a2[1];
    if ((_QWORD *)*a2 == v103)
      return;
    v45 = (char **)(a1 + 904);
    v105 = (char **)(a1 + 904);
    v106 = (char **)(a1 + 912);
LABEL_68:
    v46 = *v44;
    v47 = *(_DWORD *)(*v44 + 992);
    if (v47 == -1)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_188;
      }
      v47 = *(_DWORD *)(v46 + 992);
      if (v47 <= 7)
        goto LABEL_70;
    }
    else if (v47 <= 7)
    {
LABEL_70:
      if (v47 <= 3)
      {
        if (v47 > 1)
        {
          v48 = (double *)(v46 + 168);
          v49 = *v44;
          v50 = *(_DWORD *)(*v44 + 992);
          if (v50 == -1)
            goto LABEL_125;
        }
        else
        {
          if (!v47)
            goto LABEL_193;
          v48 = 0;
          v49 = *v44;
          v50 = *(_DWORD *)(*v44 + 992);
          if (v50 == -1)
          {
LABEL_125:
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_188;
            }
            v50 = *(_DWORD *)(v49 + 992);
            v107 = v44;
            if (v50 > 7)
              goto LABEL_127;
            goto LABEL_87;
          }
        }
LABEL_86:
        v107 = v44;
        if (v50 > 7)
        {
LABEL_127:
          if (v50 > 0xB)
          {
            if (v50 > 0xD)
            {
              v64 = 28;
            }
            else if (v50 == 13)
            {
              v64 = 14;
            }
            else
            {
              v64 = 4;
            }
          }
          else if (v50 >= 0xA)
          {
            v64 = 14;
          }
          else
          {
            v64 = 7;
          }
LABEL_139:
          v52 = (float *)operator new(4 * v64);
          v77 = &v52[v64];
          v51 = v52;
          v78 = &v48[v64];
          while (1)
          {
            while (1)
            {
              v79 = *v48;
              if (v51 >= v77)
                break;
              *v51++ = v79;
              if (++v48 == v78)
                goto LABEL_170;
            }
            v80 = v51 - v52;
            v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62)
              sub_207D0CD58();
            if (((char *)v77 - (char *)v52) >> 1 > v81)
              v81 = ((char *)v77 - (char *)v52) >> 1;
            if ((unint64_t)((char *)v77 - (char *)v52) >= 0x7FFFFFFFFFFFFFFCLL)
              v82 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v82 = v81;
            if (v82)
            {
              if (v82 >> 62)
                sub_207CA3AB8();
              v83 = operator new(4 * v82);
              v84 = (float *)&v83[4 * v80];
              *v84 = v79;
              v85 = (uint64_t)(v84 + 1);
              v86 = (char *)v51 - (char *)v52;
              if (v51 == v52)
                goto LABEL_156;
            }
            else
            {
              v83 = 0;
              v84 = (float *)(4 * v80);
              *(float *)(4 * v80) = v79;
              v85 = 4 * v80 + 4;
              v86 = (char *)v51 - (char *)v52;
              if (v51 == v52)
                goto LABEL_156;
            }
            v87 = v86 - 4;
            if (v87 >= 0xBC)
            {
              v90 = ((char *)(v51 - 1) - (char *)v52) & 0xFFFFFFFFFFFFFFFCLL;
              if (&v83[(char *)v51 - (char *)v52 - 4 - v90] > &v83[(char *)v51 - (char *)v52 - 4])
              {
                v88 = v51;
              }
              else if ((float *)((char *)v51 - v90 - 4) > v51 - 1)
              {
                v88 = v51;
              }
              else if ((unint64_t)((char *)v52 - v83) >= 0x20)
              {
                v91 = (v87 >> 2) + 1;
                v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
                v88 = &v51[v92 / 0xFFFFFFFFFFFFFFFCLL];
                v84 = (float *)((char *)v84 - v92);
                v93 = &v83[4 * v80 - 16];
                v94 = v51 - 4;
                v95 = v91 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v96 = *(_OWORD *)v94;
                  *(v93 - 1) = *((_OWORD *)v94 - 1);
                  *v93 = v96;
                  v93 -= 2;
                  v94 -= 8;
                  v95 -= 8;
                }
                while (v95);
                if (v91 == (v91 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_156;
              }
              else
              {
                v88 = v51;
              }
            }
            else
            {
              v88 = v51;
            }
            do
            {
              v89 = *((_DWORD *)v88-- - 1);
              *((_DWORD *)v84-- - 1) = v89;
            }
            while (v88 != v52);
LABEL_156:
            v77 = (float *)&v83[4 * v82];
            if (v52)
              operator delete(v52);
            v52 = v84;
            v51 = (float *)v85;
            if (++v48 == v78)
            {
LABEL_170:
              __p = v52;
              v45 = v105;
              v53 = *v105;
              v54 = *v106;
              if (*v105 < *v106)
              {
LABEL_171:
                *(_QWORD *)v53 = 0;
                *((_QWORD *)v53 + 1) = 0;
                *((_QWORD *)v53 + 2) = 0;
                v97 = (char *)v51 - (char *)v52;
                if (v51 != v52)
                {
                  if (v97 < 0)
                    sub_207D0CD58();
                  v98 = (char *)operator new((char *)v51 - (char *)v52);
                  *(_QWORD *)v53 = v98;
                  *((_QWORD *)v53 + 1) = v98;
                  v99 = &v98[4 * (v97 >> 2)];
                  *((_QWORD *)v53 + 2) = v99;
                  memcpy(v98, v52, (char *)v51 - (char *)v52);
                  *((_QWORD *)v53 + 1) = v99;
                }
                *v45 = v53 + 24;
                *v45 = v53 + 24;
                if (!v52)
                  goto LABEL_67;
LABEL_66:
                operator delete(v52);
                goto LABEL_67;
              }
LABEL_91:
              v55 = *v104;
              v56 = 0xAAAAAAAAAAAAAAABLL * ((v53 - *v104) >> 3);
              v57 = v56 + 1;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_207D159B0();
              v58 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v55) >> 3);
              if (2 * v58 > v57)
                v57 = 2 * v58;
              if (v58 >= 0x555555555555555)
                v59 = 0xAAAAAAAAAAAAAAALL;
              else
                v59 = v57;
              if (v59)
              {
                if (v59 > 0xAAAAAAAAAAAAAAALL)
                  sub_207CA3AB8();
                v60 = (char *)operator new(24 * v59);
              }
              else
              {
                v60 = 0;
              }
              v66 = &v60[24 * v59];
              v65 = &v60[24 * v56];
              *((_QWORD *)v65 + 1) = 0;
              *((_QWORD *)&v109 + 1) = v66;
              *((_QWORD *)v65 + 2) = 0;
              *(_QWORD *)v65 = 0;
              v67 = (char *)v51 - (char *)v52;
              if (v67)
              {
                if (v67 < 0)
                  sub_207D0CD58();
                v68 = (char *)operator new(v67);
                *(_QWORD *)v65 = v68;
                v69 = &v68[4 * (v67 >> 2)];
                *((_QWORD *)v65 + 2) = v69;
                memcpy(v68, v52, v67);
                *((_QWORD *)v65 + 1) = v69;
              }
              v70 = v65 + 24;
              *(_QWORD *)&v109 = v65 + 24;
              if (v53 == v55)
              {
                v45 = v105;
                *v104 = v65;
                *v105 = v70;
                *v106 = v66;
              }
              else
              {
                v45 = v105;
                do
                {
                  v71 = v65;
                  *((_QWORD *)v65 - 2) = 0;
                  *((_QWORD *)v65 - 1) = 0;
                  v72 = *(_OWORD *)(v53 - 24);
                  v53 -= 24;
                  *(_OWORD *)(v65 - 24) = v72;
                  v65 -= 24;
                  *((_QWORD *)v71 - 1) = *((_QWORD *)v53 + 2);
                  *(_QWORD *)v53 = 0;
                  *((_QWORD *)v53 + 1) = 0;
                  *((_QWORD *)v53 + 2) = 0;
                }
                while (v53 != v55);
                v53 = *v104;
                v73 = *v105;
                *v104 = v65;
                *(_OWORD *)v105 = v109;
                v70 = (char *)v109;
                if (v73 != v53)
                {
                  v74 = v73;
                  do
                  {
                    v76 = (void *)*((_QWORD *)v74 - 3);
                    v74 -= 24;
                    v75 = v76;
                    if (v76)
                    {
                      *((_QWORD *)v73 - 2) = v75;
                      operator delete(v75);
                    }
                    v73 = v74;
                  }
                  while (v74 != v53);
                }
              }
              if (v53)
                operator delete(v53);
              v52 = __p;
              *v45 = v70;
              if (__p)
                goto LABEL_66;
LABEL_67:
              v44 = v107 + 2;
              if (v107 + 2 == v103)
                return;
              goto LABEL_68;
            }
          }
        }
LABEL_87:
        if (v50 > 3)
        {
          v61 = v50 >= 6;
          v62 = v50 == 6;
          v63 = 3;
          if (!v62)
            v63 = 4;
          if (v61)
            v64 = v63;
          else
            v64 = 4;
        }
        else
        {
          if (v50 <= 1)
          {
            if (v50)
            {
              v51 = 0;
              v52 = 0;
              __p = 0;
              v53 = *v45;
              v54 = *v106;
              if (*v45 < *v106)
                goto LABEL_171;
              goto LABEL_91;
            }
LABEL_193:
            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
            abort();
          }
          if (v50 == 2)
            v64 = 3;
          else
            v64 = 4;
        }
        goto LABEL_139;
      }
      if (v47 > 5)
      {
        v48 = (double *)(v46 + 168);
        v49 = *v44;
        v50 = *(_DWORD *)(*v44 + 992);
        if (v50 == -1)
          goto LABEL_125;
        goto LABEL_86;
      }
LABEL_85:
      v48 = (double *)(v46 + 168);
      v49 = *v44;
      v50 = *(_DWORD *)(*v44 + 992);
      if (v50 == -1)
        goto LABEL_125;
      goto LABEL_86;
    }
    if (v47 > 0xB)
    {
      if (v47 > 0xD)
      {
        v48 = (double *)(v46 + 168);
        v49 = *v44;
        v50 = *(_DWORD *)(*v44 + 992);
        if (v50 == -1)
          goto LABEL_125;
        goto LABEL_86;
      }
    }
    else if (v47 > 9)
    {
      v48 = (double *)(v46 + 168);
      v49 = *v44;
      v50 = *(_DWORD *)(*v44 + 992);
      if (v50 == -1)
        goto LABEL_125;
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  v16 = *(char **)(a1 + 720);
  v17 = (v16 - v10) >> 4;
  if (v17 < v8)
  {
    v18 = &v6[2 * v17];
    if (v16 == v10)
    {
      v19 = *(char **)(a1 + 712);
      if (v18 == v5)
      {
LABEL_62:
        *(_QWORD *)(a1 + 720) = v19;
        goto LABEL_63;
      }
    }
    else
    {
      do
      {
        v21 = *v6;
        v20 = v6[1];
        if (v20)
        {
          v22 = (unint64_t *)(v20 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
        *(_QWORD *)v10 = v21;
        *((_QWORD *)v10 + 1) = v20;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v6 += 2;
        v10 += 16;
      }
      while (v6 != v18);
      v10 = *(char **)(a1 + 720);
      v19 = v10;
      if (v18 == v5)
        goto LABEL_62;
    }
    v19 = v10;
    do
    {
      *(_QWORD *)v19 = *v18;
      v41 = v18[1];
      *((_QWORD *)v19 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v18 += 2;
      v19 += 16;
    }
    while (v18 != v5);
    goto LABEL_62;
  }
  if (v6 != v5)
  {
    do
    {
      v28 = *v6;
      v27 = v6[1];
      if (v27)
      {
        v29 = (unint64_t *)(v27 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
      *(_QWORD *)v10 = v28;
      *((_QWORD *)v10 + 1) = v27;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v6 += 2;
      v10 += 16;
    }
    while (v6 != v5);
    v16 = *(char **)(a1 + 720);
  }
  while (v16 != v10)
  {
    v100 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v16 -= 16;
  }
  *(_QWORD *)(a1 + 720) = v10;
  if (*(_BYTE *)(a1 + 472))
    goto LABEL_64;
}

void sub_207D37B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v18;
  void **v19;
  void *v21;

  v21 = *v19;
  if (*v19)
  {
    *v18 = v21;
    operator delete(v21);
  }
  sub_207D22788((uint64_t)&a18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D37BE4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, CFErrorRef *a3@<X8>)
{
  uint64_t *v5;
  char *v6;
  __int128 v7;
  __int128 *v8;
  uint64_t *v9;
  char *v10;
  __int128 v11;
  __int128 *v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  void **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  char *j;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t *v72;
  int8x8_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t *v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t **v83;
  uint64_t *v84;
  int v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v95;
  uint64_t k;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  NSObject *v102;
  unint64_t v103;
  BOOL v104;
  BOOL v105;
  int8x8_t *v106;
  int8x8_t v107;
  uint8x8_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  unsigned __int8 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  void **v146;
  _QWORD *v147;
  void *v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  void **v152;
  _QWORD *v153;
  void *v154;
  void **v155;
  _QWORD *v156;
  void *v157;
  void **v158;
  void **v159;
  void *v160;
  _QWORD *v161;
  uint64_t *v162;
  uint64_t *v163;
  _QWORD *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  char *v173;
  void *v174;
  _QWORD *exception;
  void *v178[2];
  uint64_t v179;
  void *__p[2];
  uint64_t v181;
  char v182;
  unint64_t v183;
  void *v184;
  char *v185;
  char *v186;
  void *v187;
  char *v188;
  unint64_t v189;
  _QWORD v190[6];
  uint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __int128 __dst;
  uint64_t v196;
  char *v197;
  char **v198;
  std::error_condition v199;
  uint8_t buf[16];
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  if (!a1[1]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 430, (uint64_t)"m_ != nullptr && \"The DetectTrackRefinePipeline doesn't seem to exist, it has to be \" \"created once before reconfiguring\"", 121, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_207D24750(a2, (uint64_t)v190);
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v5 = v191;
  if (v191)
  {
    v6 = 0;
    do
    {
      if (!*((_BYTE *)v5 + 56))
        sub_207CA2A4C();
      v8 = (__int128 *)(v5 + 4);
      if ((unint64_t)v6 < v189)
      {
        if (*((char *)v5 + 55) < 0)
        {
          sub_207CA40D8(v6, (void *)v5[4], v5[5]);
        }
        else
        {
          v7 = *v8;
          *((_QWORD *)v6 + 2) = v5[6];
          *(_OWORD *)v6 = v7;
        }
        v6 += 24;
      }
      else
      {
        v6 = sub_207CAA5F0((char **)&v187, (uint64_t)v8);
      }
      v188 = v6;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v9 = *(uint64_t **)(a1[1] + 1240);
  if (v9)
  {
    v10 = 0;
    while (1)
    {
      v12 = (__int128 *)(v9 + 2);
      v13 = (char *)v187;
      v14 = v188;
      if (v187 != v188)
      {
        v15 = *((_BYTE *)v9 + 39);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v9 + 39);
        else
          v16 = v9[3];
        if (v15 >= 0)
          v17 = (unsigned __int8 *)(v9 + 2);
        else
          v17 = (unsigned __int8 *)v9[2];
        while (1)
        {
          v18 = v13[23];
          if ((v18 & 0x80u) == 0)
            v19 = v13[23];
          else
            v19 = *((_QWORD *)v13 + 1);
          if (v19 == v16)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v13, v17, *((_QWORD *)v13 + 1)))
                break;
            }
            else
            {
              if (!v13[23])
                break;
              v20 = 0;
              while (v13[v20] == v17[v20])
              {
                if (v18 == ++v20)
                  goto LABEL_38;
              }
            }
          }
          v13 += 24;
          if (v13 == v14)
            goto LABEL_39;
        }
      }
LABEL_38:
      if (v13 != v14)
        goto LABEL_19;
LABEL_39:
      if (v10 >= v186)
        break;
      if (*((char *)v9 + 39) < 0)
      {
        sub_207CA40D8(v10, (void *)v9[2], v9[3]);
      }
      else
      {
        v11 = *v12;
        *((_QWORD *)v10 + 2) = v9[4];
        *(_OWORD *)v10 = v11;
      }
      *((_QWORD *)v10 + 3) = v9[5];
      v10 += 32;
LABEL_18:
      v185 = v10;
LABEL_19:
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_67;
    }
    v21 = (char *)v184;
    v22 = (v10 - (_BYTE *)v184) >> 5;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 59)
      sub_207CA420C();
    v24 = v186 - (_BYTE *)v184;
    if ((v186 - (_BYTE *)v184) >> 4 > v23)
      v23 = v24 >> 4;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
      v25 = 0x7FFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    v198 = &v186;
    if (v25)
    {
      if (v25 >> 59)
        sub_207CA3AB8();
      v26 = operator new(32 * v25);
      v27 = (uint64_t)&v26[4 * v22];
      *(_QWORD *)&__dst = v26;
      *((_QWORD *)&__dst + 1) = v27;
      v196 = v27;
      v197 = (char *)&v26[4 * v25];
      if ((*((char *)v9 + 39) & 0x80000000) == 0)
      {
LABEL_49:
        v28 = *v12;
        *(_QWORD *)(v27 + 16) = v9[4];
        *(_OWORD *)v27 = v28;
        v29 = v27;
        v26[4 * v22 + 3] = v9[5];
        if (v10 == v21)
          goto LABEL_57;
        goto LABEL_55;
      }
    }
    else
    {
      v26 = 0;
      v27 = 32 * v22;
      *(_QWORD *)&__dst = 0;
      *((_QWORD *)&__dst + 1) = 32 * v22;
      v196 = 32 * v22;
      v197 = 0;
      if ((*((char *)v9 + 39) & 0x80000000) == 0)
        goto LABEL_49;
    }
    sub_207CA40D8((_BYTE *)v27, (void *)v9[2], v9[3]);
    v21 = (char *)v184;
    v10 = v185;
    v27 = *((_QWORD *)&__dst + 1);
    v29 = v196;
    v26[4 * v22 + 3] = v9[5];
    if (v10 == v21)
    {
LABEL_57:
      v31 = v21;
LABEL_58:
      v10 = (char *)(v29 + 32);
      v184 = (void *)v27;
      v185 = (char *)(v29 + 32);
      v32 = v186;
      v186 = v197;
      v197 = v32;
      *(_QWORD *)&__dst = v31;
      *((_QWORD *)&__dst + 1) = v31;
      if (v21 != v31)
      {
        v33 = (void **)(v21 - 32);
        do
        {
          v196 = (uint64_t)v33;
          if (*((char *)v33 + 23) < 0)
            operator delete(*v33);
          v33 -= 4;
        }
        while (v33 + 4 != (void **)v31);
        v21 = v31;
      }
      if (v21)
        operator delete(v21);
      goto LABEL_18;
    }
    do
    {
LABEL_55:
      v30 = *((_OWORD *)v10 - 2);
      *(_QWORD *)(v27 - 16) = *((_QWORD *)v10 - 2);
      *(_OWORD *)(v27 - 32) = v30;
      *((_QWORD *)v10 - 3) = 0;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 4) = 0;
      *(_QWORD *)(v27 - 8) = *((_QWORD *)v10 - 1);
      v27 -= 32;
      v10 -= 32;
    }
    while (v10 != v21);
    v31 = (char *)v184;
    v21 = v185;
    goto LABEL_58;
  }
  v10 = 0;
LABEL_67:
  v34 = (_QWORD *)a1[7];
  if (v34)
  {
LABEL_70:
    v35 = v34[3];
    v36 = v34[4];
    *(_QWORD *)&__dst = &v187;
    if (v35 != v36)
    {
      do
      {
        if (sub_207D46C58((uint64_t **)&__dst, v35))
        {
          if (v35 != v36)
          {
            for (i = v35 + 1344; i != v36; i += 1344)
            {
              if (!sub_207D46C58((uint64_t **)&__dst, i))
              {
                sub_207D463D0(v35, i);
                v35 += 1344;
              }
            }
          }
          goto LABEL_80;
        }
        v35 += 1344;
      }
      while (v35 != v36);
      v35 = v36;
    }
LABEL_80:
    v38 = v34[4];
    if (v35 == v38)
      goto LABEL_83;
    while (1)
    {
      v44 = *(std::__shared_weak_count **)(v38 - 232);
      if (!v44)
        goto LABEL_94;
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v47 = *(std::__shared_weak_count **)(v38 - 248);
        if (!v47)
          goto LABEL_100;
      }
      else
      {
LABEL_94:
        v47 = *(std::__shared_weak_count **)(v38 - 248);
        if (!v47)
          goto LABEL_100;
      }
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
LABEL_100:
      if (*(_BYTE *)(v38 - 264))
      {
        if (*(_BYTE *)(v38 - 272))
        {
          v50 = *(void **)(v38 - 296);
          if (v50)
          {
            *(_QWORD *)(v38 - 288) = v50;
            operator delete(v50);
          }
        }
      }
      v51 = *(void **)(v38 - 392);
      if (v51)
      {
        *(_QWORD *)(v38 - 384) = v51;
        operator delete(v51);
      }
      v52 = *(void **)(v38 - 960);
      if (v52)
      {
        *(_QWORD *)(v38 - 952) = v52;
        operator delete(v52);
      }
      v53 = *(void **)(v38 - 984);
      if (v53)
      {
        *(_QWORD *)(v38 - 976) = v53;
        operator delete(v53);
      }
      if (*(_BYTE *)(v38 - 1264) && *(char *)(v38 - 1265) < 0)
      {
        operator delete(*(void **)(v38 - 1288));
        v54 = v38 - 1344;
        v55 = *(void **)(v38 - 1344);
        if (!v55)
          goto LABEL_89;
LABEL_113:
        *(_QWORD *)(v38 - 1336) = v55;
        operator delete(v55);
        goto LABEL_89;
      }
      v54 = v38 - 1344;
      v55 = *(void **)(v38 - 1344);
      if (v55)
        goto LABEL_113;
LABEL_89:
      v38 = v54;
      if (v54 == v35)
      {
        v34[4] = v35;
LABEL_83:
        if (v34[3] != v35)
        {
          v34 = (_QWORD *)*v34;
          if (!v34)
            goto LABEL_147;
          goto LABEL_70;
        }
        v39 = (_QWORD *)*v34;
        sub_207D46B24((uint64_t)&__dst, a1 + 5, v34);
        v40 = (_QWORD *)__dst;
        *(_QWORD *)&__dst = 0;
        if (v40)
        {
          if ((_BYTE)v196)
          {
            v41 = v40[3];
            if (v41)
            {
              v42 = v40[4];
              v43 = (void *)v40[3];
              if (v42 == v41)
              {
LABEL_144:
                v40[4] = v41;
                operator delete(v43);
                goto LABEL_145;
              }
              while (2)
              {
                v56 = *(std::__shared_weak_count **)(v42 - 232);
                if (!v56)
                  goto LABEL_121;
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                  v59 = *(std::__shared_weak_count **)(v42 - 248);
                  if (v59)
                  {
LABEL_122:
                    v60 = (unint64_t *)&v59->__shared_owners_;
                    do
                      v61 = __ldaxr(v60);
                    while (__stlxr(v61 - 1, v60));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                      std::__shared_weak_count::__release_weak(v59);
                    }
                  }
                }
                else
                {
LABEL_121:
                  v59 = *(std::__shared_weak_count **)(v42 - 248);
                  if (v59)
                    goto LABEL_122;
                }
                if (*(_BYTE *)(v42 - 264))
                {
                  if (*(_BYTE *)(v42 - 272))
                  {
                    v62 = *(void **)(v42 - 296);
                    if (v62)
                    {
                      *(_QWORD *)(v42 - 288) = v62;
                      operator delete(v62);
                    }
                  }
                }
                v63 = *(void **)(v42 - 392);
                if (v63)
                {
                  *(_QWORD *)(v42 - 384) = v63;
                  operator delete(v63);
                }
                v64 = *(void **)(v42 - 960);
                if (v64)
                {
                  *(_QWORD *)(v42 - 952) = v64;
                  operator delete(v64);
                }
                v65 = *(void **)(v42 - 984);
                if (v65)
                {
                  *(_QWORD *)(v42 - 976) = v65;
                  operator delete(v65);
                }
                if (*(_BYTE *)(v42 - 1264) && *(char *)(v42 - 1265) < 0)
                {
                  operator delete(*(void **)(v42 - 1288));
                  v66 = v42 - 1344;
                  v67 = *(void **)(v42 - 1344);
                  if (v67)
                  {
LABEL_140:
                    *(_QWORD *)(v42 - 1336) = v67;
                    operator delete(v67);
                  }
                }
                else
                {
                  v66 = v42 - 1344;
                  v67 = *(void **)(v42 - 1344);
                  if (v67)
                    goto LABEL_140;
                }
                v42 = v66;
                if (v66 == v41)
                {
                  v43 = (void *)v40[3];
                  goto LABEL_144;
                }
                continue;
              }
            }
          }
LABEL_145:
          operator delete(v40);
        }
        v34 = v39;
        if (!v39)
        {
LABEL_147:
          v10 = v185;
          break;
        }
        goto LABEL_70;
      }
    }
  }
  for (j = (char *)v184; j != v10; j += 32)
  {
    sub_207D461D0((uint64_t *)(a1[1] + 1176), *((_QWORD *)j + 3));
    v69 = (_QWORD *)a1[1];
    v70 = v69 + 153;
    v71 = sub_207D46E50(v69 + 153, (uint64_t)j);
    if (v71)
    {
      v72 = v71;
      v73 = (int8x8_t)v69[154];
      v74 = v71[1];
      v75 = (uint8x8_t)vcnt_s8(v73);
      v75.i16[0] = vaddlv_u8(v75);
      if (v75.u32[0] > 1uLL)
      {
        if (v74 >= *(_QWORD *)&v73)
          v74 %= *(_QWORD *)&v73;
      }
      else
      {
        v74 &= *(_QWORD *)&v73 - 1;
      }
      v76 = *(uint64_t **)(*v70 + 8 * v74);
      do
      {
        v77 = v76;
        v76 = (uint64_t *)*v76;
      }
      while (v76 != v71);
      if (v77 == v69 + 155)
        goto LABEL_172;
      v78 = v77[1];
      if (v75.u32[0] > 1uLL)
      {
        if (v78 >= *(_QWORD *)&v73)
          v78 %= *(_QWORD *)&v73;
      }
      else
      {
        v78 &= *(_QWORD *)&v73 - 1;
      }
      if (v78 != v74)
      {
LABEL_172:
        if (!*v71)
          goto LABEL_173;
        v79 = *(_QWORD *)(*v71 + 8);
        if (v75.u32[0] > 1uLL)
        {
          if (v79 >= *(_QWORD *)&v73)
            v79 %= *(_QWORD *)&v73;
        }
        else
        {
          v79 &= *(_QWORD *)&v73 - 1;
        }
        if (v79 != v74)
LABEL_173:
          *(_QWORD *)(*v70 + 8 * v74) = 0;
      }
      v80 = *v71;
      if (*v71)
      {
        v81 = *(_QWORD *)(v80 + 8);
        if (v75.u32[0] > 1uLL)
        {
          if (v81 >= *(_QWORD *)&v73)
            v81 %= *(_QWORD *)&v73;
        }
        else
        {
          v81 &= *(_QWORD *)&v73 - 1;
        }
        if (v81 != v74)
        {
          *(_QWORD *)(*v70 + 8 * v81) = v77;
          v80 = *v71;
        }
      }
      *v77 = v80;
      *v71 = 0;
      --v69[156];
      if (*((char *)v71 + 39) < 0)
        operator delete((void *)v71[2]);
      operator delete(v72);
    }
  }
  v82 = (_QWORD *)a1[1];
  v83 = (uint64_t **)v82[155];
  if (!v83 || (v84 = *v83) == 0)
  {
    if (!v82[156])
      goto LABEL_205;
LABEL_184:
    v85 = *((_DWORD *)v83 + 10);
    v86 = (char *)v187;
    v87 = v188;
    if (v187 == v188)
      goto LABEL_206;
    do
    {
LABEL_187:
      if (!sub_207D46E50((_QWORD *)(a1[1] + 1224), (uint64_t)v86))
      {
        v88 = a1[1] + 1224;
        *(_QWORD *)&__dst = v86;
        sub_207D2CF4C(v88, (uint64_t)v86, (uint64_t)&unk_20822AD51, (__int128 **)&__dst)[5] = ++v85;
      }
      v86 += 24;
    }
    while (v86 != v87);
    v82 = (_QWORD *)a1[1];
    if (!v82[126])
      goto LABEL_215;
LABEL_207:
    v91 = *(_QWORD *)(v82[125] + 24);
    if (!v194)
      goto LABEL_216;
    goto LABEL_208;
  }
  do
  {
    while (1)
    {
      if (*((char *)v83 + 39) < 0)
      {
        sub_207CA40D8(&__dst, v83[2], (unint64_t)v83[3]);
      }
      else
      {
        __dst = *((_OWORD *)v83 + 1);
        v196 = (uint64_t)v83[4];
      }
      v89 = (char *)v83[5];
      v197 = v89;
      if (*((char *)v84 + 39) < 0)
        break;
      *(_OWORD *)buf = *((_OWORD *)v84 + 1);
      v90 = v84[5];
      v201 = v84[4];
      v202 = v90;
      if ((SHIBYTE(v201) & 0x80000000) == 0)
        goto LABEL_200;
LABEL_189:
      operator delete(*(void **)buf);
      if (SHIBYTE(v196) < 0)
        goto LABEL_201;
LABEL_190:
      if ((unint64_t)v89 < v90)
        v83 = (uint64_t **)v84;
      v84 = (uint64_t *)*v84;
      if (!v84)
        goto LABEL_204;
    }
    sub_207CA40D8(buf, (void *)v84[2], v84[3]);
    v89 = v197;
    v90 = v84[5];
    v202 = v90;
    if (SHIBYTE(v201) < 0)
      goto LABEL_189;
LABEL_200:
    if ((SHIBYTE(v196) & 0x80000000) == 0)
      goto LABEL_190;
LABEL_201:
    operator delete((void *)__dst);
    if ((unint64_t)v89 < v90)
      v83 = (uint64_t **)v84;
    v84 = (uint64_t *)*v84;
  }
  while (v84);
LABEL_204:
  v82 = (_QWORD *)a1[1];
  if (v82[156])
    goto LABEL_184;
LABEL_205:
  v85 = -1;
  v86 = (char *)v187;
  v87 = v188;
  if (v187 != v188)
    goto LABEL_187;
LABEL_206:
  if (v82[126])
    goto LABEL_207;
LABEL_215:
  v91 = 1;
  if (!v194)
  {
LABEL_216:
    v92 = 1;
    if (v192 < v82[118] || v91 > 1)
      goto LABEL_220;
    goto LABEL_226;
  }
LABEL_208:
  v92 = *(_QWORD *)(v193 + 24);
  if (v192 < v82[118] || v92 < v91)
  {
LABEL_220:
    if (a1[8])
    {
      sub_207CEC654((uint64_t)(a1 + 5), (_QWORD *)a1[7]);
      a1[7] = 0;
      v95 = a1[6];
      if (v95)
      {
        for (k = 0; k != v95; ++k)
          *(_QWORD *)(a1[5] + 8 * k) = 0;
      }
      a1[8] = 0;
      v82 = (_QWORD *)a1[1];
    }
    a1[3] = 0;
  }
LABEL_226:
  sub_207D293B8((uint64_t)v82, (uint64_t)v190);
  v97 = a1[1];
  v98 = *(uint64_t **)(v97 + 48);
  if (!v98)
  {
    *(_QWORD *)(v97 + 1216) = *(_QWORD *)(v97 + 56);
    goto LABEL_313;
  }
  do
  {
    if (!*((_BYTE *)v98 + 56))
      sub_207CA2A4C();
    v99 = a1[1] + 1224;
    *(_QWORD *)&__dst = v98 + 4;
    v98[3] = sub_207D2CF4C(v99, (uint64_t)(v98 + 4), (uint64_t)&unk_20822AD51, (__int128 **)&__dst)[5];
    v100 = a1[1] + 984;
    *(_QWORD *)&__dst = v98 + 3;
    sub_207D0531C(v100, (unint64_t *)v98 + 3, (uint64_t)&unk_20822AD51, (_QWORD **)&__dst)[3] = v92;
    v98 = (uint64_t *)*v98;
  }
  while (v98);
  v97 = a1[1];
  v101 = *(uint64_t **)(v97 + 48);
  *(_QWORD *)(v97 + 1216) = *(_QWORD *)(v97 + 56);
  if (!v101)
  {
LABEL_313:
    if (!*(_QWORD *)(v97 + 1200))
      goto LABEL_314;
    goto LABEL_315;
  }
  v102 = MEMORY[0x24BDACB70];
  do
  {
    v103 = v101[3];
    v183 = v103;
    if (*((char *)v101 + 95) < 0)
    {
      if (v101[10])
        v105 = *((_BYTE *)v101 + 676) == 0;
      else
        v105 = 1;
      if (v105)
        goto LABEL_233;
    }
    else
    {
      if (*((_BYTE *)v101 + 95))
        v104 = *((_BYTE *)v101 + 676) == 0;
      else
        v104 = 1;
      if (v104)
        goto LABEL_233;
    }
    v106 = (int8x8_t *)a1[1];
    v107 = v106[148];
    if (v107)
    {
      v108 = (uint8x8_t)vcnt_s8(v107);
      v108.i16[0] = vaddlv_u8(v108);
      if (v108.u32[0] > 1uLL)
      {
        v109 = v103;
        if (v103 >= *(_QWORD *)&v107)
          v109 = v103 % *(_QWORD *)&v107;
      }
      else
      {
        v109 = (*(_QWORD *)&v107 - 1) & v103;
      }
      v110 = *(_QWORD **)(*(_QWORD *)&v106[147] + 8 * v109);
      if (v110)
      {
        v111 = (_QWORD *)*v110;
        if (v111)
        {
          if (v108.u32[0] < 2uLL)
          {
            v112 = *(_QWORD *)&v107 - 1;
            while (1)
            {
              v114 = v111[1];
              if (v114 == v103)
              {
                if (v111[2] == v103)
                  goto LABEL_233;
              }
              else if ((v114 & v112) != v109)
              {
                goto LABEL_264;
              }
              v111 = (_QWORD *)*v111;
              if (!v111)
                goto LABEL_264;
            }
          }
          do
          {
            v113 = v111[1];
            if (v113 == v103)
            {
              if (v111[2] == v103)
                goto LABEL_233;
            }
            else
            {
              if (v113 >= *(_QWORD *)&v107)
                v113 %= *(_QWORD *)&v107;
              if (v113 != v109)
                break;
            }
            v111 = (_QWORD *)*v111;
          }
          while (v111);
        }
      }
    }
LABEL_264:
    v115 = operator new(0x3C0uLL);
    sub_207DB2B10((uint64_t)v115, (uint64_t)(v101 + 3), (const void **)&v106[218]);
    *(_QWORD *)&__dst = v115;
    v116 = v183;
    v117 = sub_207D45E8C(a1[1] + 1176, v183, &v183);
    v118 = v117[3];
    v117[3] = v115;
    if (v118)
    {
      v119 = (void *)sub_207D43610(v118);
      operator delete(v119);
    }
    v120 = sub_207D45E8C(a1[1] + 1176, v116, &v183)[3];
    LOBYTE(v198) = *(_BYTE *)(v120 + 816);
    if ((_BYTE)v198)
    {
      v121 = *(_QWORD *)(v120 + 784);
      v122 = *(char **)(v120 + 792);
      *(_QWORD *)&__dst = v121;
      *((_QWORD *)&__dst + 1) = v122;
      if (!v122)
        goto LABEL_273;
    }
    else
    {
      *(_QWORD *)&__dst = off_24C06E9E8;
      BYTE8(__dst) = *(_BYTE *)(v120 + 792);
      v123 = *(_QWORD *)(v120 + 800);
      v122 = *(char **)(v120 + 808);
      v196 = v123;
      v197 = v122;
      if (!v122)
        goto LABEL_282;
    }
    v124 = (unint64_t *)(v122 + 8);
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
    if ((_BYTE)v198)
    {
LABEL_273:
      v126 = sub_207D45E8C(a1[1] + 1176, v116, &v183)[3];
      v127 = a1[1];
      if (*(_QWORD *)(v126 + 576) != (uint64_t)(*(_QWORD *)(v127 + 1664) - *(_QWORD *)(v127 + 1656)) >> 6
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/include/ODT/Tracking/Patchbased3dModelTracker.h", 331, (uint64_t)"T_c0cn_vec.size() == cfg_.num_camera_streams", 44, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if (v126 + 760 != v127 + 1656)
        sub_207D43AA8((_QWORD *)(v126 + 760), *(char **)(v127 + 1656), *(char **)(v127 + 1664), (uint64_t)(*(_QWORD *)(v127 + 1664) - *(_QWORD *)(v127 + 1656)) >> 6);
      v128 = sub_207D45E8C(a1[1] + 1176, v116, &v183);
      sub_207D37120(v128[3], (_QWORD *)(a1[1] + 1632));
      if (*(_BYTE *)(sub_207D45E8C(a1[1] + 1176, v116, &v183)[3] + 472))
      {
        v129 = sub_207D45E8C(a1[1] + 1176, v116, &v183);
        v130 = a1[1];
        v131 = v129[3] + 736;
        if (v131 != v130 + 1408)
          sub_207D43C58(v131, *(_QWORD **)(v130 + 1408), *(_QWORD **)(v130 + 1416), (uint64_t)(*(_QWORD *)(v130 + 1416) - *(_QWORD *)(v130 + 1408)) >> 4);
      }
      v132 = 0;
      if (!(_BYTE)v198)
        goto LABEL_231;
      goto LABEL_301;
    }
LABEL_282:
    if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
    {
      v138 = (void *)v196;
      if (*(char *)(v196 + 23) < 0)
        v138 = *(void **)v196;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v138;
      _os_log_error_impl(&dword_207C77000, v102, OS_LOG_TYPE_ERROR, "ODT tracker loading failed: %s", buf, 0xCu);
      if ((_BYTE)v198)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C072430;
        __cxa_throw(exception, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
      }
    }
    if (*(char *)(v196 + 23) < 0)
    {
      sub_207CA40D8(buf, *(void **)v196, *(_QWORD *)(v196 + 8));
    }
    else
    {
      v133 = *(_OWORD *)v196;
      v201 = *(_QWORD *)(v196 + 16);
      *(_OWORD *)buf = v133;
    }
    LOBYTE(v202) = 1;
    if (*((_BYTE *)v101 + 56))
    {
      if (*((char *)v101 + 55) < 0)
      {
        sub_207CA40D8(v178, (void *)v101[4], v101[5]);
      }
      else
      {
        *(_OWORD *)v178 = *((_OWORD *)v101 + 2);
        v179 = v101[6];
      }
    }
    else
    {
      HIBYTE(v179) = 0;
      LOBYTE(v178[0]) = 0;
    }
    *(_OWORD *)__p = *(_OWORD *)v178;
    v181 = v179;
    v178[1] = 0;
    v179 = 0;
    v178[0] = 0;
    v182 = 1;
    v134 = atomic_load((unsigned __int8 *)&qword_25452B598);
    if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
      __cxa_guard_release(&qword_25452B598);
    }
    *(_QWORD *)&v199.__val_ = 12;
    v199.__cat_ = (const std::error_category *)&off_253E50C48;
    sub_207DEB95C(&v199, (uint64_t)buf, (uint64_t)__p, a3);
    if (v182 && SHIBYTE(v181) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v179) < 0)
      operator delete(v178[0]);
    if ((_BYTE)v202 && SHIBYTE(v201) < 0)
      operator delete(*(void **)buf);
    v132 = 1;
    if (!(_BYTE)v198)
    {
LABEL_231:
      (*(void (**)(__int128 *))__dst)(&__dst);
      goto LABEL_232;
    }
LABEL_301:
    v135 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v136 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
LABEL_232:
    if ((v132 & 1) != 0)
      goto LABEL_330;
LABEL_233:
    v101 = (uint64_t *)*v101;
  }
  while (v101);
  v97 = a1[1];
  if (!*(_QWORD *)(v97 + 1200))
  {
LABEL_314:
    *(_QWORD *)(v97 + 928) = 0x7FEFFFFFFFFFFFFFLL;
    *(_OWORD *)(v97 + 904) = 0u;
  }
LABEL_315:
  v139 = (char *)operator new(0x98uLL);
  *((_QWORD *)v139 + 4) = 0;
  *(_OWORD *)v139 = 0u;
  *((_OWORD *)v139 + 1) = 0u;
  *((_DWORD *)v139 + 8) = 1065353216;
  *((_QWORD *)v139 + 18) = 0;
  v140 = *(_OWORD *)(v97 + 528);
  v141 = *(_OWORD *)(v97 + 544);
  *(_OWORD *)(v139 + 72) = *(_OWORD *)(v97 + 560);
  *(_OWORD *)(v139 + 56) = v141;
  *(_OWORD *)(v139 + 40) = v140;
  v142 = *(_OWORD *)(v97 + 576);
  v143 = *(_OWORD *)(v97 + 592);
  v144 = *(_OWORD *)(v97 + 608);
  *((_QWORD *)v139 + 17) = *(_QWORD *)(v97 + 624);
  *(_OWORD *)(v139 + 120) = v144;
  *(_OWORD *)(v139 + 104) = v143;
  *(_OWORD *)(v139 + 88) = v142;
  v145 = a1[1];
  v146 = *(void ***)(v145 + 1312);
  *(_QWORD *)(v145 + 1312) = v139;
  if (v146)
  {
    v147 = v146[2];
    if (v147)
    {
      do
      {
        v161 = (_QWORD *)*v147;
        v162 = (uint64_t *)v147[3];
        v147[3] = 0;
        if (v162)
        {
          v163 = sub_207D43990(v162);
          operator delete(v163);
        }
        operator delete(v147);
        v147 = v161;
      }
      while (v161);
    }
    v148 = *v146;
    *v146 = 0;
    if (v148)
      operator delete(v148);
    operator delete(v146);
  }
  v149 = sub_207DF6F84(a1[1] + 72, (__int128 *)(a1[1] + 248), &__dst);
  v150 = a1[1];
  v151 = __dst;
  *(_QWORD *)&__dst = 0;
  v152 = *(void ***)(v150 + 1304);
  *(_QWORD *)(v150 + 1304) = v151;
  if (v152)
  {
    v153 = v152[2];
    while (v153)
    {
      v164 = v153;
      v153 = (_QWORD *)*v153;
      v165 = (std::__shared_weak_count *)v164[4];
      if (v165)
      {
        v166 = (unint64_t *)&v165->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v165->__on_zero_shared)(v165, v149);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      operator delete(v164);
    }
    v154 = *v152;
    *v152 = 0;
    if (v154)
      operator delete(v154);
    operator delete(v152);
    v155 = (void **)__dst;
    *(_QWORD *)&__dst = 0;
    if (v155)
    {
      v156 = v155[2];
      while (v156)
      {
        v168 = v156;
        v156 = (_QWORD *)*v156;
        v169 = (std::__shared_weak_count *)v168[4];
        if (v169)
        {
          v170 = (unint64_t *)&v169->__shared_owners_;
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
        operator delete(v168);
      }
      v157 = *v155;
      *v155 = 0;
      if (v157)
        operator delete(v157);
      operator delete(v155);
    }
  }
  sub_207D28B60(a1[1] + 1096, a1[1], (int8x8_t *)(a1[1] + 1224), (uint64_t **)(a1[1] + 1632), (uint64_t)a3);
LABEL_330:
  v158 = (void **)v184;
  if (v184)
  {
    v159 = (void **)v185;
    v160 = v184;
    if (v185 != v184)
    {
      do
      {
        if (*((char *)v159 - 9) < 0)
          operator delete(*(v159 - 4));
        v159 -= 4;
      }
      while (v159 != v158);
      v160 = v184;
    }
    v185 = (char *)v158;
    operator delete(v160);
  }
  v172 = (char *)v187;
  if (v187)
  {
    v173 = v188;
    v174 = v187;
    if (v188 != v187)
    {
      do
      {
        if (*(v173 - 1) < 0)
          operator delete(*((void **)v173 - 3));
        v173 -= 24;
      }
      while (v173 != v172);
      v174 = v187;
    }
    v188 = v172;
    operator delete(v174);
  }
  return sub_207D04BC4(v190);
}

void sub_207D38FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_207D39134(v35 - 192);
  sub_207D391C4(&a29);
  sub_207C99DE0(&a32);
  sub_207D04BC4(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_207D39134(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 32))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  else
  {
    (**(void (***)(uint64_t))result)(result);
    return v1;
  }
  return result;
}

void **sub_207D391C4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_207D39234(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t j;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t k;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 64))
  {
    v4 = (_QWORD *)(a1 + 40);
    sub_207CEC654(a1 + 40, *(_QWORD **)(a1 + 56));
    *(_QWORD *)(a1 + 56) = 0;
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*v4 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(_QWORD **)(a1 + 8);
  if (v7[150])
  {
    v8 = (_QWORD *)v7[149];
    if (v8)
    {
      do
      {
        v15 = (_QWORD *)*v8;
        v16 = v8[3];
        v8[3] = 0;
        if (v16)
        {
          v17 = (void *)sub_207D43610(v16);
          operator delete(v17);
        }
        operator delete(v8);
        v8 = v15;
      }
      while (v15);
    }
    v7[149] = 0;
    v9 = v7[148];
    if (v9)
    {
      for (j = 0; j != v9; ++j)
        *(_QWORD *)(v7[147] + 8 * j) = 0;
    }
    v7[150] = 0;
    v7 = *(_QWORD **)(a1 + 8);
  }
  v11 = (_QWORD *)v7[138];
  if (v11[139])
  {
    v12 = (_QWORD *)v11[138];
    if (v12)
    {
      do
      {
        v18 = (_QWORD *)*v12;
        v19 = v12[3];
        v12[3] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
        operator delete(v12);
        v12 = v18;
      }
      while (v18);
    }
    v11[138] = 0;
    v13 = v11[137];
    if (v13)
    {
      for (k = 0; k != v13; ++k)
        *(_QWORD *)(v11[136] + 8 * k) = 0;
    }
    v11[139] = 0;
  }
  *a2 = 0;
  a2[1] = 0;
}

_QWORD *sub_207D39384@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X6>, unsigned __int8 a8@<W7>, uint64_t a9@<X8>, double a10@<D0>)
{
  uint64_t v14;
  unint64_t v16;
  _QWORD *v17;
  int32x4_t v18;
  float64x2_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t i;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  int32x4_t v49;
  uint64_t v50;
  float32x4_t v51;
  unsigned int v52;
  int32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  float64_t v56;
  float64x2_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float64_t v60;
  double v61;
  int8x16_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v67;
  float64x2_t v68;
  __int128 v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  BOOL v78;
  BOOL v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  BOOL v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  int8x8_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  float32x2_t *v105;
  int v106;
  float32x4_t *v107;
  BOOL v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  _OWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  double v122;
  float32x4_t v123;
  double v124;
  float32x4_t v125;
  double v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *p_shared_owners;
  unint64_t v140;
  unint64_t v141;
  unsigned __int8 v142;
  BOOL v143;
  uint64_t v144;
  uint64_t j;
  unsigned __int8 v146;
  uint64_t v147;
  __CVBuffer *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int Width;
  uint64_t *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t k;
  unsigned __int8 v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  __CVBuffer *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int Height;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _BYTE *v175;
  unint64_t *v176;
  _QWORD *v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  unsigned int v196;
  int v197;
  BOOL v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  uint64_t *v206;
  uint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  uint64_t v212;
  _DWORD *v213;
  int v214;
  unsigned int v215;
  int v216;
  double v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  int8x8_t v221;
  unint64_t v222;
  uint8x8_t v223;
  unint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  mach_msg_type_number_t *v258;
  int *v259;
  int *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  _DWORD *v265;
  char v266;
  char v267;
  uint64_t *v268;
  void *v269;
  _QWORD *v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  __int128 v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  BOOL v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  float32x4_t v284;
  float v285;
  float32x4_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  float32x4_t v290;
  int8x16_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  int *v297;
  int v298;
  _BYTE *v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 *v304;
  _OWORD *v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  int v309;
  int v310;
  _BYTE *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint8x8_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  _QWORD **v320;
  _QWORD *v321;
  unint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  float v325;
  float v326;
  uint64_t v327;
  _QWORD *v328;
  _BOOL8 v329;
  unint64_t v330;
  unint64_t v331;
  size_t prime;
  void *v333;
  void *v334;
  uint64_t v335;
  _QWORD *v336;
  size_t v337;
  size_t v338;
  size_t v339;
  _QWORD *ii;
  size_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint8x8_t v345;
  uint64_t v346;
  _QWORD *v347;
  void *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  size_t v352;
  uint64_t v353;
  double v354;
  float32x4_t v355;
  float32x2_t v356;
  int32x4_t v357;
  int32x4_t v358;
  float32x2_t v359;
  __n128 v360;
  __n128 v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  std::__shared_weak_count *v369;
  uint64_t v370;
  _QWORD *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  int8x8_t v375;
  unint64_t v376;
  uint8x8_t v377;
  unint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  _QWORD *v388;
  _QWORD *v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  std::__shared_weak_count *v394;
  int v395;
  int v396;
  int v397;
  int v398;
  __int128 v399;
  __int128 v400;
  unsigned int v401;
  int v402;
  BOOL v403;
  _BOOL4 v404;
  char *v405;
  int64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  _BYTE *v411;
  _QWORD *v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _OWORD *v419;
  char *v420;
  uint64_t v421;
  __int128 v422;
  unint64_t *v423;
  unint64_t v424;
  uint8x8_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  char v429;
  unint64_t v430;
  _QWORD *v431;
  _QWORD *v432;
  unint64_t v433;
  uint64_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  float32x4_t v439;
  float32x2_t v440;
  float32x2_t v441;
  int8x16_t v442;
  float32x2_t v443;
  float32x2_t v444;
  float32x2_t **v445;
  unint64_t *v446;
  std::__shared_weak_count *v447;
  std::__shared_weak_count *v448;
  std::__shared_weak_count_vtbl *v449;
  _QWORD *v450;
  unint64_t *v451;
  __int128 v452;
  unint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  __int128 v459;
  unint64_t *v460;
  unint64_t v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  std::__shared_weak_count *v467;
  _QWORD *v468;
  BOOL v469;
  std::__shared_weak_count_vtbl *v470;
  double v471;
  unint64_t on_zero_shared_weak;
  double v473;
  double v474;
  void (__cdecl *v475)(std::__shared_weak_count *__hidden);
  unint64_t v476;
  uint64_t get_deleter;
  double v478;
  unint64_t on_zero_shared;
  unint64_t v480;
  unint64_t v481;
  float v482;
  int v483;
  __int128 v484;
  _OWORD *v485;
  _OWORD *v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  double v491;
  double v492;
  unint64_t v493;
  _QWORD *v494;
  uint64_t m;
  _QWORD *v496;
  uint64_t n;
  double v498;
  double v499;
  float32x4_t v500;
  float v501;
  float32x2_t v502;
  float32x2_t v503;
  float32x2_t v504;
  float v505;
  float32x2_t v506;
  float32x4_t v507;
  double v508;
  double v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  unint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t **v518;
  uint64_t *v519;
  uint64_t **v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t *v524;
  void **v525;
  uint64_t v526;
  uint64_t v527;
  void *v528;
  _QWORD *v529;
  _QWORD *v530;
  void *v531;
  size_t v532;
  int32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float64x2_t v536;
  float32x4_t v537;
  simd_float3x3 v538;
  float32x2_t v539;
  _QWORD *v540;
  uint64_t v541;
  float32x2_t *v542;
  float32x2_t *v543;
  float32x2_t *v544;
  float32x2_t *v545;
  size_t v546;
  float64x2_t v547;
  int8x16_t v548;
  int32x4_t v549;
  int32x4_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float v553;
  float v554;
  float v555;
  float v556;
  float v557;
  float v558;
  void *v559;
  _QWORD *v560;
  _QWORD *v561;
  uint64_t v562;
  unint64_t v563;
  float32x2_t *v564;
  _QWORD *v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  unint64_t v569;
  float32x2_t *v570;
  float32x2_t v571;
  float32x2_t v572;
  float32x2_t v573;
  float v574;
  float32x2_t v575;
  float v576;
  float v577;
  float v578;
  unint64_t v579;
  uint64_t v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int8x8_t v585;
  unint64_t v586;
  unint64_t v587;
  _QWORD *v588;
  _QWORD *v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  float v593;
  float v594;
  float v595;
  float v596;
  unsigned __int8 v598;
  float v599;
  float v600;
  float v601;
  float v602;
  unint64_t v603;
  int8x8_t v604;
  unint64_t v605;
  unint64_t v606;
  _QWORD *v607;
  float v608;
  _QWORD *v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  float v613;
  unint64_t v614;
  _QWORD *v615;
  _QWORD *v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  BOOL v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x2_t *v626;
  float32x4_t v627;
  int8x16_t v628;
  int8x16_t v629;
  int8x16_t v630;
  float32x4_t v631;
  int8x16_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float v635;
  float v636;
  float32x2_t v637;
  float32x2_t v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  float32x2_t v642;
  float32x2_t v643;
  int8x8_t v644;
  float32x2_t v645;
  __int32 v646;
  __int32 v647;
  float v648;
  float v649;
  unsigned __int8 v650;
  float v651;
  float v652;
  float v653;
  float v654;
  float v655;
  float v656;
  unsigned __int8 v658;
  float v659;
  float v660;
  float v661;
  float v662;
  float v663;
  float v664;
  float v665;
  int v666;
  float v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  _BOOL4 v672;
  float v673;
  float v674;
  uint64_t v675;
  _BYTE *v676;
  uint64_t v677;
  char v678;
  uint64_t v679;
  _QWORD *v680;
  int *v681;
  int *v682;
  unint64_t v683;
  uint8x8_t v684;
  BOOL v685;
  uint64_t v686;
  unint64_t v687;
  unint64_t v688;
  _QWORD *v689;
  _QWORD *v690;
  int v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  unint64_t v703;
  unint64_t v704;
  uint8x8_t v705;
  _QWORD **v706;
  _QWORD *v707;
  unint64_t v708;
  uint64_t v709;
  float v710;
  float v711;
  uint64_t v712;
  _QWORD *v713;
  uint64_t v714;
  _BOOL8 v715;
  unint64_t v716;
  unint64_t v717;
  size_t v718;
  unint64_t v719;
  uint8x8_t v720;
  uint64_t v721;
  unint64_t v722;
  unint64_t v723;
  int v724;
  __int128 v725;
  float32x4_t v726;
  _QWORD *v727;
  uint64_t v728;
  uint64_t v729;
  _DWORD *v730;
  unint64_t v731;
  _QWORD *v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  float v741;
  float32x4_t *v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  int8x8_t v748;
  uint8x8_t v749;
  unint64_t v750;
  _QWORD *v751;
  _QWORD *v752;
  uint64_t v753;
  unint64_t v754;
  unint64_t v755;
  _QWORD *v756;
  _QWORD *v757;
  unint64_t v758;
  char *v759;
  _QWORD *v760;
  char *v761;
  char *v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  unint64_t v766;
  unint64_t v767;
  _BYTE *v768;
  _QWORD *v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  _OWORD *v774;
  char *v775;
  uint64_t v776;
  __int128 v777;
  uint64_t v778;
  int v779;
  int v780;
  char *v781;
  uint64_t v782;
  void *v783;
  unint64_t *v784;
  unint64_t v785;
  int8x8_t v786;
  uint8x8_t v787;
  unint64_t v788;
  _QWORD *v789;
  _QWORD *v790;
  uint64_t v791;
  unint64_t v792;
  unint64_t v793;
  uint64_t v794;
  char v795;
  unint64_t v796;
  float32x2_t **v797;
  uint64_t *v798;
  uint64_t *jj;
  char *v800;
  char *v801;
  uint64_t v802;
  unint64_t v803;
  char *v804;
  unint64_t v805;
  _QWORD *v806;
  uint64_t v807;
  uint64_t **v808;
  uint64_t *v809;
  unint64_t v810;
  uint64_t v811;
  _QWORD *v812;
  unint64_t *v813;
  __int128 v814;
  unint64_t *v815;
  unint64_t v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  uint64_t **v821;
  unint64_t v822;
  void *v823;
  uint64_t v824;
  uint64_t *v825;
  unint64_t *v826;
  __int128 v827;
  unint64_t *v828;
  unint64_t v829;
  unint64_t v830;
  int v831;
  std::__shared_weak_count *v832;
  unint64_t *v833;
  unint64_t v834;
  unint64_t v835;
  __int128 v836;
  __int128 v837;
  char *v838;
  uint64_t *v839;
  uint64_t *v840;
  unint64_t v841;
  double v842;
  uint64_t v843;
  char *v844;
  float32x4_t v845;
  float32x4_t v846;
  int8x16_t v847;
  int8x16_t v848;
  float32x4_t v849;
  float32x4_t v850;
  float32x4_t v851;
  int8x16_t v852;
  float32x4_t v853;
  float32x2_t v854;
  uint64_t v855;
  _DWORD *v856;
  float32x4_t v857;
  float v858;
  float32x2_t v859;
  float32x4_t v860;
  int8x16_t v861;
  int8x16_t v862;
  int8x16_t v863;
  int v864;
  double v865;
  float32x4_t *v866;
  float32x4_t *v867;
  int v868;
  uint64_t v869;
  _QWORD *v870;
  unint64_t v871;
  _QWORD *v872;
  uint64_t kk;
  uint64_t mm;
  double v875;
  double v876;
  float32x4_t v877;
  float32x4_t v878;
  _OWORD *v879;
  _OWORD *v880;
  __int128 v881;
  uint64_t v882;
  float32x4_t v883;
  int8x16_t v884;
  int8x16_t v885;
  float v886;
  float32x2_t v887;
  float32x2_t v888;
  float32x2_t v889;
  float v890;
  float32x4_t v891;
  float32x2_t v892;
  float32x4_t v893;
  float32x2_t v894;
  float32x4_t v895;
  int8x16_t v896;
  float32x2_t v897;
  double v898;
  double v899;
  double v900;
  BOOL v901;
  double v902;
  unint64_t v903;
  double v904;
  uint64_t v905;
  unint64_t v906;
  uint64_t v907;
  double v908;
  unint64_t v909;
  unint64_t v910;
  __int128 v911;
  char *v912;
  char *v913;
  _QWORD *v914;
  _QWORD *v915;
  void *v916;
  _QWORD *v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  _QWORD *v921;
  void *v922;
  void *v923;
  std::__shared_weak_count *v924;
  unint64_t *v925;
  unint64_t v926;
  void *v927;
  _QWORD *v928;
  void *v929;
  std::__shared_weak_count *v930;
  unint64_t *v931;
  unint64_t v932;
  __int128 v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  __int128 v940;
  unint64_t *v941;
  unint64_t v942;
  unint64_t v943;
  std::__shared_weak_count *v944;
  unint64_t *v945;
  unint64_t v946;
  void *v947;
  _QWORD *result;
  uint64_t v949;
  uint64_t *v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  float32x2_t *v954;
  float32x4_t v955;
  float32x4_t v956;
  float32x4_t v957;
  float32x2_t v958;
  float32x2_t v959;
  float32x2_t v960;
  unsigned __int8 v961;
  uint64_t v962;
  uint64_t nn;
  unsigned __int8 v964;
  float32x4_t v965;
  int8x16_t v966;
  float32x4_t v967;
  int8x16_t v968;
  float32x2_t v969;
  float32x2_t v970;
  float32x2_t v971;
  float32x2_t v972;
  float32x4_t v973;
  float32x4_t v974;
  float32x2_t v975;
  float32x4_t v976;
  float32x4_t v977;
  __int32 *v978;
  float32x2_t v979;
  float32x4_t v980;
  float32x2_t v981;
  float v982;
  float32x4_t v983;
  float v984;
  float32x4_t v985;
  float v986;
  float v987;
  std::__shared_weak_count *v988;
  unint64_t *v989;
  unint64_t v990;
  std::__shared_weak_count *v991;
  unint64_t *v992;
  unint64_t v993;
  BOOL v994;
  int8x16_t v995;
  float32x2_t v996;
  uint64_t i1;
  float32x4_t v998;
  float32x4_t v999;
  float32x4_t v1000;
  float32x2_t v1001;
  float32x2_t v1002;
  float32x2_t v1003;
  unsigned __int8 v1004;
  uint64_t v1005;
  uint64_t i2;
  unsigned __int8 v1007;
  float32x4_t v1008;
  int8x16_t v1009;
  float32x4_t v1010;
  int8x16_t v1011;
  float32x2_t v1012;
  float32x2_t v1013;
  float32x2_t v1014;
  float32x2_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  float32x2_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  __int32 *v1021;
  float32x2_t v1022;
  float32x4_t v1023;
  float32x2_t v1024;
  float v1025;
  float32x4_t v1026;
  float v1027;
  float32x4_t v1028;
  float v1029;
  float v1030;
  std::__shared_weak_count *v1031;
  unint64_t *v1032;
  unint64_t v1033;
  std::__shared_weak_count *v1034;
  unint64_t *v1035;
  unint64_t v1036;
  BOOL v1037;
  int8x16_t v1038;
  float32x2_t v1039;
  uint64_t v1040;
  int8x8_t v1041;
  unint64_t v1042;
  uint8x8_t v1043;
  std::__shared_weak_count *v1044;
  unint64_t *v1045;
  unint64_t v1046;
  std::__shared_weak_count *v1047;
  unint64_t *v1048;
  unint64_t v1049;
  void *v1050;
  void *v1051;
  void *v1052;
  void *v1053;
  uint64_t v1054;
  void *v1055;
  uint64_t *v1056;
  uint64_t *v1057;
  uint64_t *v1058;
  unint64_t v1059;
  uint64_t v1060;
  unint64_t v1061;
  unint64_t v1062;
  char *v1063;
  uint64_t *v1064;
  char *v1065;
  void *v1066;
  std::__shared_weak_count *v1067;
  unint64_t *v1068;
  unint64_t v1069;
  std::__shared_weak_count *v1070;
  unint64_t *v1071;
  unint64_t v1072;
  void *v1073;
  void *v1074;
  void *v1075;
  void *v1076;
  char *v1077;
  void *v1078;
  _QWORD *v1079;
  double v1080;
  uint64_t v1081;
  uint64_t v1082;
  int v1083;
  _BYTE *v1084;
  uint64_t v1085;
  uint64_t v1086;
  _OWORD *v1087;
  uint64_t v1088;
  uint64_t i3;
  void *v1090;
  void *v1091;
  int8x8_t v1092;
  _QWORD *v1093;
  _QWORD *v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  _QWORD *v1098;
  int8x8_t v1099;
  unint64_t v1100;
  uint8x8_t v1101;
  unint64_t v1102;
  _QWORD *v1103;
  _QWORD *v1104;
  uint64_t v1105;
  uint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  _QWORD *v1109;
  _QWORD *v1110;
  uint64_t v1111;
  unint64_t v1112;
  double v1113;
  uint64_t v1114;
  uint64_t v1115;
  int v1116;
  size_t v1117;
  unint64_t v1118;
  void *p_dst;
  uint64_t v1120;
  uint64_t v1121;
  const void *v1122;
  _QWORD *v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  char *v1127;
  size_t v1128;
  size_t v1129;
  unint64_t v1130;
  unint64_t v1131;
  _BYTE *v1132;
  size_t v1133;
  unint64_t v1134;
  char *v1135;
  BOOL v1136;
  size_t v1137;
  size_t v1138;
  char *v1139;
  unint64_t v1140;
  uint64_t v1141;
  char *v1142;
  uint64_t v1143;
  mach_msg_type_number_t *v1144;
  unint64_t v1145;
  size_t v1146;
  size_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  _BYTE *v1150;
  _BYTE *v1151;
  uint64_t v1152;
  _BYTE *v1153;
  char v1154;
  _BYTE *v1155;
  size_t v1156;
  unint64_t v1157;
  size_t v1158;
  unint64_t v1159;
  _BYTE *v1160;
  size_t v1161;
  unint64_t v1162;
  _BYTE *v1163;
  size_t v1164;
  char *v1165;
  unint64_t v1166;
  uint64_t v1167;
  char *v1168;
  char *v1169;
  _OWORD *v1170;
  __int128 *v1171;
  size_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  unint64_t v1175;
  unint64_t v1176;
  _BYTE *v1177;
  uint64_t v1178;
  _BYTE *v1179;
  unint64_t v1180;
  size_t v1181;
  unint64_t v1182;
  _OWORD *v1183;
  size_t v1184;
  unint64_t v1185;
  _BYTE *v1186;
  size_t v1187;
  char *v1188;
  unint64_t v1189;
  uint64_t v1190;
  char *v1191;
  char *v1192;
  uint64_t v1193;
  _QWORD *v1194;
  uint64_t *v1195;
  std::__shared_weak_count *v1196;
  unint64_t *v1197;
  unint64_t v1198;
  __int128 *v1199;
  size_t v1200;
  unint64_t v1201;
  uint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  _BYTE *v1205;
  uint64_t v1206;
  _BYTE *v1207;
  unint64_t v1208;
  size_t v1209;
  unint64_t v1210;
  _OWORD *v1211;
  size_t v1212;
  unint64_t v1213;
  _BYTE *v1214;
  size_t v1215;
  char *v1216;
  unint64_t v1217;
  uint64_t v1218;
  char *v1219;
  char *v1220;
  uint64_t v1221;
  _QWORD *v1222;
  uint64_t *v1223;
  std::__shared_weak_count *v1224;
  unint64_t *v1225;
  unint64_t v1226;
  __int128 *v1227;
  size_t v1228;
  unint64_t v1229;
  uint64_t v1230;
  unint64_t v1231;
  unint64_t v1232;
  _BYTE *v1233;
  uint64_t v1234;
  _BYTE *v1235;
  unint64_t v1236;
  size_t v1237;
  unint64_t v1238;
  _OWORD *v1239;
  size_t v1240;
  unint64_t v1241;
  _BYTE *v1242;
  size_t v1243;
  char *v1244;
  unint64_t v1245;
  uint64_t v1246;
  char *v1247;
  char *v1248;
  uint64_t v1249;
  uint64_t v1250;
  int v1251;
  _QWORD *v1252;
  uint64_t *v1253;
  uint64_t v1254;
  unsigned __int8 v1255;
  _DWORD *v1256;
  std::__shared_weak_count *v1257;
  unint64_t *v1258;
  unint64_t v1259;
  unint64_t v1260;
  unint64_t v1261;
  float v1262;
  _QWORD *v1263;
  void **v1264;
  uint64_t v1266;
  uint64_t v1267;
  double v1268;
  uint64_t v1269;
  _QWORD *v1270;
  float v1271;
  float *v1272;
  float32x2_t v1273;
  float v1274;
  float v1275;
  float v1276;
  _OWORD *v1277;
  float64x2_t v1278;
  uint64_t v1279;
  float v1280;
  uint64_t v1281;
  _QWORD *v1282;
  _QWORD *v1283;
  _QWORD *v1284;
  float v1285;
  _QWORD *v1286;
  unint64_t v1287;
  int32x4_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  unint64_t v1291;
  int32x4_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  float32x4_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t *v1302;
  _QWORD *v1303;
  uint64_t v1304;
  float64x2_t v1305;
  char *v1306;
  uint64_t v1307;
  float32x4_t v1308;
  float32x4_t v1309;
  uint64_t v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  void *v1314;
  int8x8_t v1315;
  void *v1316;
  uint64_t v1317;
  int v1318;
  uint64_t v1319;
  double v1320;
  void *v1321;
  _QWORD v1322[2];
  void *__dst;
  std::__shared_weak_count *v1324;
  int64_t v1325;
  uint64_t v1326;
  int v1327;
  void *v1328;
  char *v1329;
  uint64_t v1330;
  char v1331;
  _BYTE v1332[32];
  int v1333;
  __int128 v1334;
  __int128 v1335;
  void *v1336[2];
  __int128 v1337;
  int v1338;
  uint64_t v1339;
  std::__shared_weak_count *v1340;
  _BYTE v1341[32];
  _QWORD *v1342;
  char v1343;
  float v1344;
  uint64_t v1345;
  float v1346;
  float v1347;
  mach_msg_type_number_t task_info_outCnt[4];
  unint64_t v1349;
  _DWORD *v1350;
  uint64_t v1351;
  void *v1352;
  char v1353;
  char v1354;
  char v1355;
  uint64_t v1356;
  __int32 v1357;
  uint64_t v1358;
  __int32 v1359;
  void *v1360;
  void *v1361;
  void *v1362;
  void *v1363;
  float32x2_t v1364;
  __int32 v1365;
  float32x2_t v1366;
  __int32 v1367;
  float32x2_t v1368;
  __int32 v1369;
  uint64_t v1370;
  uint64_t v1371;
  float32x2_t v1372;
  __int32 v1373;
  float32x2_t v1374;
  __int32 v1375;
  float32x2_t v1376;
  __int32 v1377;
  uint64_t v1378;
  _BYTE v1379[308];
  void *v1380;
  void *v1381;
  void *v1382;
  void *v1383;
  char v1384;
  char v1385;
  std::__shared_weak_count *v1386;
  std::__shared_weak_count *v1387;
  _BYTE v1388[24];
  _BYTE *v1389;
  __int128 v1390;
  _QWORD *v1391;
  _BYTE task_info_out[72];
  char v1393;
  char v1394;
  uint64_t v1395;
  unint64_t v1396;
  void *v1397;
  void *v1398;
  char v1399;
  void *v1400;
  void *v1401;
  unint64_t v1402;
  __int32 v1403;
  uint64_t v1404;
  __int32 v1405;
  unint64_t v1406;
  char v1407;
  char v1408;
  void *v1409;
  void *v1410;
  void *v1411;
  void *v1412;
  float32x2_t v1413;
  __int32 v1414;
  float32x2_t v1415;
  __int32 v1416;
  float32x2_t v1417;
  __int32 v1418;
  uint64_t v1419;
  uint64_t v1420;
  float32x2_t v1421;
  __int32 v1422;
  float32x2_t v1423;
  __int32 v1424;
  float32x2_t v1425;
  __int32 v1426;
  uint64_t v1427;
  _BYTE v1428[308];
  void *v1429;
  void *v1430;
  void *v1431;
  void *v1432;
  char v1433;
  char v1434;
  std::__shared_weak_count *v1435;
  std::__shared_weak_count *v1436;
  uint64_t v1437;

  v14 = a1;
  v1437 = *MEMORY[0x24BDAC8D0];
  v1320 = a10;
  v1287 = (unint64_t)a2;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (v16 != **(_QWORD **)(a1 + 8))
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 551, (uint64_t)"pixel_buffers.size() == m_->config.num_camera_streams", 53, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_2103;
    }
    v16 = **(_QWORD **)(v14 + 8);
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2) != v16
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 552, (uint64_t)"cam_matrices.size() == m_->config.num_camera_streams", 52, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| *(_BYTE *)(a3 + 24)&& 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1287 + 8) - *(_QWORD *)v1287) >> 3) != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 554, (uint64_t)"!buffer_expiration_times || pixel_buffers.size() == buffer_expiration_times->size()", 83, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_2103:
    abort();
  }
  v1298 = a9;
  v1319 = 0;
  task_info_outCnt[0] = 93;
  if (!task_info(*MEMORY[0x24BDAEC58], 0x16u, (task_info_t)task_info_out, task_info_outCnt))
  {
    *(float *)&v1319 = (float)((float)v1406 * 0.00097656) * 0.00097656;
    *((float *)&v1319 + 1) = (float)((float)v1402 * 0.00097656) * 0.00097656;
  }
  kdebug_trace();
  v17 = operator new(0x28uLL);
  *v17 = &off_24C073160;
  v17[1] = &v1320;
  v17[2] = (char *)&v1319 + 4;
  v17[3] = &v1319;
  v1389 = v17;
  v20 = *(_QWORD *)(v14 + 8);
  if (*(_BYTE *)(v20 + 1624))
  {
    v21 = v1320 - *(double *)(v20 + 1616);
    v22 = *(_QWORD *)(v20 + 1728);
    v23 = (double)v22;
    v24 = *(double *)(v20 + 1736) * (double)v22;
    *(double *)(v20 + 1736) = v24;
    v25 = *(_QWORD *)(v20 + 1688);
    v26 = (*(_QWORD *)(v20 + 1696) - v25) >> 3;
    if (v22 >= v26)
    {
      v27 = *(_QWORD *)(v20 + 1720);
      if (!v27)
        v27 = (*(_QWORD *)(v20 + 1696) - v25) >> 3;
      *(double *)(v20 + 1736) = v24 - *(double *)(v25 + 8 * v27 - 8);
    }
    v28 = *(_QWORD *)(v20 + 1712);
    if (!v28)
      v28 = v26;
    v29 = v28 - 1;
    *(_QWORD *)(v20 + 1712) = v29;
    *(double *)(v25 + 8 * v29) = v21;
    if (v22 == v26)
    {
      if (*(_QWORD *)(v20 + 1720))
        v22 = *(_QWORD *)(v20 + 1720);
      *(_QWORD *)(v20 + 1720) = v22 - 1;
    }
    else
    {
      v30 = v22 + 1;
      *(_QWORD *)(v20 + 1728) = v30;
      v23 = (double)v30;
    }
    *(double *)(v20 + 1736) = (v21 + *(double *)(v20 + 1736)) / v23;
  }
  v1269 = a3;
  v1294 = a5;
  v1266 = a7;
  v1296 = v14;
  if (*(_BYTE *)(v20 + 1680))
    sub_207D35E44(v14, v20);
  v31 = *(_QWORD *)a4;
  v32 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 != v32)
  {
    do
    {
      v33 = 0;
      do
      {
        v108 = v33 == 32;
        v33 += 4;
      }
      while (!v108);
      v31 += 36;
    }
    while (v31 != v32);
  }
  if (a6[1] && !*a6)
  {
    memset(task_info_out, 0, 32);
    *(_DWORD *)&task_info_out[32] = 733237080;
    kdebug_trace();
    v34 = (_QWORD *)(v14 + 24);
    v35 = (_QWORD *)(v14 + 40);
    if (*(_QWORD *)(v14 + 64))
    {
      sub_207CEC654(v14 + 40, *(_QWORD **)(v14 + 56));
      *(_QWORD *)(v14 + 56) = 0;
      v36 = *(_QWORD *)(v14 + 48);
      if (v36)
      {
        for (i = 0; i != v36; ++i)
          *(_QWORD *)(*v35 + 8 * i) = 0;
      }
      *(_QWORD *)(v14 + 64) = 0;
    }
    *v34 = 0;
    *(_OWORD *)v1298 = *(_OWORD *)v34;
    sub_207D08700(v1298 + 16, (uint64_t)v35);
    *(_BYTE *)(v1298 + 56) = 1;
    kdebug_trace();
    goto LABEL_1468;
  }
  v38 = *(uint64_t **)(v14 + 8);
  v39 = v38[204];
  v40 = v38[205];
  if (v39 != v40)
  {
    v41 = (v40 - v39) >> 4;
    if (v41 != *v38)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 1454, (uint64_t)"lenses.size() == config.num_camera_streams", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_2109;
      }
      v41 = *v38;
    }
    if (v41)
    {
      v42 = 0;
      v43 = 0;
      v14 = (uint64_t)"";
      v1278 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      while (1)
      {
        v47 = *(_QWORD *)(v38[204] + v42);
        if (!v47)
          goto LABEL_47;
        v48 = *(_QWORD *)a4 + v43;
        v18.i64[0] = *(_QWORD *)v48;
        v18.i32[2] = *(_DWORD *)(v48 + 8);
        v19.f64[0] = *(float64_t *)(v48 + 12);
        v49 = (int32x4_t)v19;
        v49.i32[2] = *(_DWORD *)(v48 + 20);
        v50 = *(_QWORD *)(v48 + 24);
        v51 = (float32x4_t)vzip2q_s32(v18, v49);
        v51.i32[2] = *(_DWORD *)(v48 + 32);
        v52 = *(_DWORD *)(v47 + 992);
        if (v52 == -1)
        {
          v1281 = v50;
          v1288 = v49;
          v1293 = v18;
          v1299 = v51;
          v1305 = v19;
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_2109;
          }
          v52 = *(_DWORD *)(v47 + 992);
          v51 = v1299;
          v19 = v1305;
          v18 = v1293;
          v49 = v1288;
          v50 = v1281;
        }
        v53 = vzip1q_s32(v18, v49);
        v53.i32[2] = v50;
        v54 = (int8x16_t)vtrn2q_s32(v18, v49);
        v54.i32[2] = HIDWORD(v50);
        v55 = (int8x16_t)vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v53, vuzp1q_s32(v53, (int32x4_t)v54)));
        *(_QWORD *)&v56 = vextq_s8(v55, v55, 8uLL).u64[0];
        v57 = vcvt_hight_f64_f32(v51);
        v58 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v51.f32);
        v59 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)v53.i8);
        *(_QWORD *)&v60 = vextq_s8(v58, v58, 8uLL).u64[0];
        *(_QWORD *)&v61 = vextq_s8(v59, v59, 8uLL).u64[0];
        v62 = (int8x16_t)vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)&v19.f64[0], (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), 4uLL));
        v18 = (int32x4_t)vextq_s8(v62, v62, 8uLL);
        if (v52 > 7)
          break;
        if (v52 > 3)
        {
          v19.f64[0] = *(float64_t *)(v47 + 64);
          *(_QWORD *)&v80.f64[0] = v59.i64[0];
          v80.f64[1] = v61;
          *(_QWORD *)&v81.f64[0] = v55.i64[0];
          v81.f64[1] = v56;
          *(_QWORD *)&v82.f64[0] = v62.i64[0];
          *(_QWORD *)&v82.f64[1] = v18.i64[0];
          *(_QWORD *)&v83.f64[0] = v58.i64[0];
          v83.f64[1] = v60;
          v19 = vabdq_f64(v57, v19);
          v84 = vabdq_f64(v83, *(float64x2_t *)(v47 + 48));
          v85 = vabdq_f64(v82, *(float64x2_t *)(v47 + 32));
          v86 = vabdq_f64(v81, *(float64x2_t *)(v47 + 16));
          v87 = vabdq_f64(v80, *(float64x2_t *)v47);
          v88 = v87.f64[0] > 1.0e-10;
          if (v87.f64[1] > 1.0e-10)
            v88 = 1;
          if (v86.f64[0] > 1.0e-10)
            v88 = 1;
          if (v86.f64[1] > 1.0e-10)
            v88 = 1;
          if (v85.f64[0] > 1.0e-10)
            v88 = 1;
          if (v85.f64[1] > 1.0e-10)
            v88 = 1;
          if (v84.f64[0] > 1.0e-10)
            v88 = 1;
          v79 = v88 || v84.f64[1] > 1.0e-10 || v19.f64[0] > 1.0e-10;
          if (v52 > 5)
          {
            if (!v79)
              goto LABEL_47;
            goto LABEL_45;
          }
          goto LABEL_91;
        }
        if (v52 > 1)
        {
          v19.f64[0] = *(float64_t *)(v47 + 64);
          *(_QWORD *)&v89.f64[0] = v59.i64[0];
          v89.f64[1] = v61;
          *(_QWORD *)&v90.f64[0] = v55.i64[0];
          v90.f64[1] = v56;
          *(_QWORD *)&v91.f64[0] = v62.i64[0];
          *(_QWORD *)&v91.f64[1] = v18.i64[0];
          *(_QWORD *)&v92.f64[0] = v58.i64[0];
          v92.f64[1] = v60;
          v19 = vabdq_f64(v57, v19);
          v93 = vabdq_f64(v92, *(float64x2_t *)(v47 + 48));
          v94 = vabdq_f64(v91, *(float64x2_t *)(v47 + 32));
          v95 = vabdq_f64(v90, *(float64x2_t *)(v47 + 16));
          v96 = vabdq_f64(v89, *(float64x2_t *)v47);
          v97 = v96.f64[0] > 1.0e-10;
          if (v96.f64[1] > 1.0e-10)
            v97 = 1;
          if (v95.f64[0] > 1.0e-10)
            v97 = 1;
          if (v95.f64[1] > 1.0e-10)
            v97 = 1;
          if (v94.f64[0] > 1.0e-10)
            v97 = 1;
          if (v94.f64[1] > 1.0e-10)
            v97 = 1;
          if (v93.f64[0] > 1.0e-10)
            v97 = 1;
          if (!v97 && v93.f64[1] <= 1.0e-10 && v19.f64[0] <= 1.0e-10)
            goto LABEL_47;
LABEL_45:
          *(_QWORD *)&v19.f64[0] = v55.i64[0];
          v19.f64[1] = v56;
          *(_QWORD *)&v44 = v59.i64[0];
          *((double *)&v44 + 1) = v61;
          *(_OWORD *)v47 = v44;
          *(float64x2_t *)(v47 + 16) = v19;
          *(_QWORD *)&v44 = v62.i64[0];
          *((_QWORD *)&v44 + 1) = v18.i64[0];
          *(float64_t *)&v58.i64[1] = v60;
          *(float64_t *)(v47 + 64) = v57.f64[0];
          *(_OWORD *)(v47 + 32) = v44;
          *(int8x16_t *)(v47 + 48) = v58;
          v45 = *(double *)v59.i64 * *(double *)v62.i64;
          v46 = 1.0 / *(double *)v59.i64;
LABEL_46:
          *(double *)(v47 + 72) = v46;
          *(double *)(v47 + 80) = -v61 / v45;
          *(double *)(v47 + 88) = -(*(double *)v62.i64 * *(double *)v55.i64 - v61 * *(double *)v18.i64) / v45;
          *(_QWORD *)(v47 + 96) = 0;
          *(double *)(v47 + 104) = 1.0 / *(double *)v62.i64;
          *(double *)(v47 + 112) = -*(double *)v18.i64 / *(double *)v62.i64;
          *(_QWORD *)(v47 + 120) = 0;
          *(_QWORD *)(v47 + 128) = 0;
          *(_OWORD *)(v47 + 136) = xmmword_208233CB0;
          *(_QWORD *)(v47 + 152) = 0x7FF8000000000000;
          *(_BYTE *)(v47 + 160) = 0;
          goto LABEL_47;
        }
        if (!v52)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1724, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
LABEL_2109:
          abort();
        }
        *(_QWORD *)&v63.f64[0] = v59.i64[0];
        v63.f64[1] = v61;
        *(_QWORD *)&v64.f64[0] = v58.i64[0];
        v64.f64[1] = v60;
        *(_QWORD *)&v65.f64[0] = v62.i64[0];
        *(_QWORD *)&v65.f64[1] = v18.i64[0];
        *(_QWORD *)&v66.f64[0] = v55.i64[0];
        v66.f64[1] = v56;
        v67 = (int8x16_t)vabdq_f64(v63, *(float64x2_t *)v47);
        v68 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1278, (float64x2_t)vextq_s8(v67, v67, 8uLL)), (int32x4_t)vcgeq_f64(v1278, vabdq_f64(v66, *(float64x2_t *)(v47 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1278, vabdq_f64(v65, *(float64x2_t *)(v47 + 32))), (int32x4_t)vcgeq_f64(v1278, vabdq_f64(v64, *(float64x2_t *)(v47 + 48))))));
        if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v68)) & 1) != 0
          || (v68.f64[0] = *(float64_t *)(v47 + 64), v19 = vabdq_f64(v57, v68), v19.f64[0] > 1.0e-10))
        {
          *(_QWORD *)&v19.f64[0] = v55.i64[0];
          v19.f64[1] = v56;
          *(_QWORD *)&v69 = v59.i64[0];
          *((double *)&v69 + 1) = v61;
          *(_OWORD *)v47 = v69;
          *(float64x2_t *)(v47 + 16) = v19;
          *(_QWORD *)&v69 = v62.i64[0];
          *((_QWORD *)&v69 + 1) = v18.i64[0];
          *(float64_t *)&v58.i64[1] = v60;
          *(_OWORD *)(v47 + 32) = v69;
          *(int8x16_t *)(v47 + 48) = v58;
          v45 = *(double *)v59.i64 * *(double *)v62.i64;
          v46 = 1.0 / *(double *)v59.i64;
          *(float64_t *)(v47 + 64) = v57.f64[0];
          goto LABEL_46;
        }
LABEL_47:
        v43 += 36;
        v42 += 16;
        if (!--v41)
          goto LABEL_109;
      }
      v19.f64[0] = *(float64_t *)(v47 + 64);
      *(_QWORD *)&v70.f64[0] = v59.i64[0];
      v70.f64[1] = v61;
      *(_QWORD *)&v71.f64[0] = v55.i64[0];
      v71.f64[1] = v56;
      *(_QWORD *)&v72.f64[0] = v62.i64[0];
      *(_QWORD *)&v72.f64[1] = v18.i64[0];
      *(_QWORD *)&v73.f64[0] = v58.i64[0];
      v73.f64[1] = v60;
      v19 = vabdq_f64(v57, v19);
      v74 = vabdq_f64(v73, *(float64x2_t *)(v47 + 48));
      v75 = vabdq_f64(v72, *(float64x2_t *)(v47 + 32));
      v76 = vabdq_f64(v71, *(float64x2_t *)(v47 + 16));
      v77 = vabdq_f64(v70, *(float64x2_t *)v47);
      v78 = v77.f64[0] > 1.0e-10;
      if (v77.f64[1] > 1.0e-10)
        v78 = 1;
      if (v76.f64[0] > 1.0e-10)
        v78 = 1;
      if (v76.f64[1] > 1.0e-10)
        v78 = 1;
      if (v75.f64[0] > 1.0e-10)
        v78 = 1;
      if (v75.f64[1] > 1.0e-10)
        v78 = 1;
      if (v74.f64[0] > 1.0e-10)
        v78 = 1;
      v79 = v78 || v74.f64[1] > 1.0e-10 || v19.f64[0] > 1.0e-10;
      if (v52 > 0xB)
      {
        if (v52 > 0xD)
        {
          if (!v79)
            goto LABEL_47;
          goto LABEL_45;
        }
      }
      else if (v52 > 9)
      {
        if (!v79)
          goto LABEL_47;
        goto LABEL_45;
      }
LABEL_91:
      if (!v79)
        goto LABEL_47;
      goto LABEL_45;
    }
  }
LABEL_109:
  v98 = v1296;
  if (!*(_QWORD *)(*(_QWORD *)(v1296 + 8) + 1200))
  {
    *(_OWORD *)a9 = *(_OWORD *)(v1296 + 24);
    sub_207D08700(a9 + 16, v1296 + 40);
    *(_BYTE *)(a9 + 56) = 1;
    goto LABEL_1468;
  }
  v1313 = *(_OWORD *)(v1296 + 24);
  sub_207D08700((uint64_t)&v1314, v1296 + 40);
  v99 = a9;
  if (*(double *)(*(_QWORD *)(v1296 + 8) + 928) >= 1.79769313e308)
  {
    if (v1317)
    {
      sub_207CEC654((uint64_t)&v1314, v1316);
      v1316 = 0;
      v100 = v1315;
      if (v1315)
      {
        v101 = 0;
        do
          *((_QWORD *)v1314 + v101++) = 0;
        while (*(_QWORD *)&v100 != v101);
      }
      v1317 = 0;
    }
    *(_QWORD *)&v1313 = 0;
  }
  v1264 = (void **)(v1296 + 40);
  v102 = v1316;
  if (v1316)
  {
    v14 = (uint64_t)&unk_2082281CB;
    do
    {
      v1282 = v102;
      v104 = v102[3];
      v103 = v102[4];
      v1289 = v103;
      while (v104 != v103)
      {
        v105 = (float32x2_t *)(v104 + 724);
        v106 = *(unsigned __int8 *)(v104 + 788);
        if (*(_BYTE *)(v104 + 441))
        {
          v107 = (float32x4_t *)(v104 + 456);
          if (*(_BYTE *)(v104 + 788))
            v108 = *(_BYTE *)(v1294 + 64) == 0;
          else
            v108 = 1;
          if (v108)
          {
            v114 = *(float32x4_t *)(v104 + 488);
            v115 = *(float32x4_t *)(v104 + 504);
            v112 = *v107;
            v113 = *(float32x4_t *)(v104 + 472);
          }
          else
          {
            v109 = *(float32x4_t *)(v1294 + 16);
            v110 = *(float32x4_t *)(v1294 + 32);
            v111 = *(float32x4_t *)(v1294 + 48);
            v112 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)v105->f32)), v109, *v105, 1), v110, *(float32x4_t *)v105->f32, 2), v111, *(float32x4_t *)v105->f32, 3);
            v113 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)(v104 + 740))), v109, *(float32x2_t *)(v104 + 740), 1), v110, *(float32x4_t *)(v104 + 740), 2), v111, *(float32x4_t *)(v104 + 740), 3);
            v114 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)(v104 + 756))), v109, *(float32x2_t *)(v104 + 756), 1), v110, *(float32x4_t *)(v104 + 756), 2), v111, *(float32x4_t *)(v104 + 756), 3);
            v115 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)(v104 + 772))), v109, *(float32x2_t *)(v104 + 772), 1), v110, *(float32x4_t *)(v104 + 772), 2), v111, *(float32x4_t *)(v104 + 772), 3);
          }
          *v107 = v112;
          *(float32x4_t *)(v104 + 472) = v113;
          *(float32x4_t *)(v104 + 488) = v114;
          *(float32x4_t *)(v104 + 504) = v115;
          *(_DWORD *)(v104 + 928) = 6;
        }
        v116 = (_OWORD *)(v104 + 656);
        if (*(unsigned __int8 *)(v104 + 720) == v106)
        {
          if (*(_BYTE *)(v104 + 720))
          {
            v117 = *(_OWORD *)(v104 + 740);
            *v116 = *(_OWORD *)v105->f32;
            *(_OWORD *)(v104 + 672) = v117;
            v118 = *(_OWORD *)(v104 + 772);
            *(_OWORD *)(v104 + 688) = *(_OWORD *)(v104 + 756);
            *(_OWORD *)(v104 + 704) = v118;
          }
        }
        else if (*(_BYTE *)(v104 + 720))
        {
          *(_BYTE *)(v104 + 720) = 0;
        }
        else
        {
          v119 = *(_OWORD *)(v104 + 740);
          *v116 = *(_OWORD *)v105->f32;
          *(_OWORD *)(v104 + 672) = v119;
          v120 = *(_OWORD *)(v104 + 772);
          *(_OWORD *)(v104 + 688) = *(_OWORD *)(v104 + 756);
          *(_OWORD *)(v104 + 704) = v120;
          *(_BYTE *)(v104 + 720) = 1;
        }
        v1293.i64[0] = v104;
        sub_207DF378C(*(_QWORD *)(v98 + 8) + 1432, v104, (float32x4_t *)v1294, v1320);
        v128 = *(_QWORD *)(v1296 + 8);
        v129 = 1048;
        if (!*(_BYTE *)(v104 + 441))
          v129 = 1052;
        v130 = *(float *)(v128 + v129);
        v131 = *(_QWORD *)v1287;
        v1300 = *(_QWORD *)(v1287 + 8);
        v132 = v1300 - *(_QWORD *)v1287;
        if (v1300 != *(_QWORD *)v1287)
        {
          v133 = 0xAAAAAAAAAAAAAAABLL * (v132 >> 3);
          if (v133 >> 61)
            sub_207CA420C();
          v134 = operator new(0x5555555555555558 * (v132 >> 3));
          v135 = &v134[8 * v133];
          v132 = (uint64_t)v134;
          while (1)
          {
            v1306 = (char *)v132;
            v136 = *(uint64_t **)(v131 + 8);
            if (v136)
            {
              v137 = *v136;
              v138 = (std::__shared_weak_count *)v136[1];
              if (!v138)
                goto LABEL_149;
              p_shared_owners = (unint64_t *)&v138->__shared_owners_;
              do
                v140 = __ldxr(p_shared_owners);
              while (__stxr(v140 + 1, p_shared_owners));
              do
                v141 = __ldaxr(p_shared_owners);
              while (__stlxr(v141 - 1, p_shared_owners));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
                if (v137)
                  goto LABEL_160;
              }
              else
              {
LABEL_149:
                if (v137)
                  goto LABEL_160;
              }
            }
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 203, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974);
            v142 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (byte_254530A10)
              v143 = byte_254530A18 == 0;
            else
              v143 = 0;
            if (!v143)
            {
              v144 = qword_2545309E8;
              for (j = qword_2545309F0; v144 != j; v144 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v144)(*(_QWORD *)(v144 + 8), "IsValid()", 9, &unk_2082281CB, 0);
            }
            v146 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
LABEL_2084:
              abort();
            qword_254530A00(*(_QWORD *)algn_254530A08, "IsValid()", 9, &unk_2082281CB, 0);
LABEL_160:
            v147 = *(_QWORD *)(v131 + 8);
            if (v147)
            {
              v148 = *(__CVBuffer **)v147;
              v149 = *(std::__shared_weak_count **)(v147 + 8);
              if (v149)
              {
                v150 = (unint64_t *)&v149->__shared_owners_;
                do
                  v151 = __ldxr(v150);
                while (__stxr(v151 + 1, v150));
                do
                  v152 = __ldaxr(v150);
                while (__stlxr(v152 - 1, v150));
                if (!v152)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
            }
            else
            {
              v148 = 0;
            }
            Width = CVPixelBufferGetWidth(v148);
            v154 = *(uint64_t **)(v131 + 8);
            if (!v154)
            {
LABEL_175:
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 213, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974);
              v160 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v160 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v161 = qword_2545309E8;
                for (k = qword_2545309F0; v161 != k; v161 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v161)(*(_QWORD *)(v161 + 8), "IsValid()", 9, &unk_2082281CB, 0);
              }
              v163 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_2084;
              qword_254530A00(*(_QWORD *)algn_254530A08, "IsValid()", 9, &unk_2082281CB, 0);
              goto LABEL_183;
            }
            v155 = *v154;
            v156 = (std::__shared_weak_count *)v154[1];
            if (!v156)
              goto LABEL_174;
            v157 = (unint64_t *)&v156->__shared_owners_;
            do
              v158 = __ldxr(v157);
            while (__stxr(v158 + 1, v157));
            do
              v159 = __ldaxr(v157);
            while (__stlxr(v159 - 1, v157));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
              if (!v155)
                goto LABEL_175;
            }
            else
            {
LABEL_174:
              if (!v155)
                goto LABEL_175;
            }
LABEL_183:
            v164 = *(_QWORD *)(v131 + 8);
            if (v164)
            {
              v166 = *(__CVBuffer **)v164;
              v165 = *(std::__shared_weak_count **)(v164 + 8);
              if (v165)
              {
                v167 = (unint64_t *)&v165->__shared_owners_;
                do
                  v168 = __ldxr(v167);
                while (__stxr(v168 + 1, v167));
                do
                  v169 = __ldaxr(v167);
                while (__stlxr(v169 - 1, v167));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
            }
            else
            {
              v166 = 0;
            }
            Height = CVPixelBufferGetHeight(v166);
            v171 = Height;
            if (v1306 < v135)
            {
              *(_QWORD *)v1306 = Width | ((unint64_t)Height << 32);
              v132 = (uint64_t)(v1306 + 8);
              v99 = a9;
              v131 += 24;
              if (v131 == v1300)
                goto LABEL_232;
            }
            else
            {
              v172 = (v1306 - v134) >> 3;
              v173 = v172 + 1;
              if ((unint64_t)(v172 + 1) >> 61)
                sub_207CA420C();
              if ((v135 - v134) >> 2 > v173)
                v173 = (v135 - v134) >> 2;
              if ((unint64_t)(v135 - v134) >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                if (v174 >> 61)
                  sub_207CA3AB8();
                v175 = operator new(8 * v174);
              }
              else
              {
                v175 = 0;
              }
              v176 = (unint64_t *)&v175[8 * v172];
              v135 = &v175[8 * v174];
              *v176 = Width | ((unint64_t)v171 << 32);
              v177 = v176 + 1;
              if (v1306 == v134)
              {
                v99 = a9;
                goto LABEL_210;
              }
              v178 = v1306 - v134 - 8;
              if (v178 < 0x168
                || (v181 = (v1306 - 8 - v134) & 0xFFFFFFFFFFFFFFF8,
                    &v175[v1306 - v134 - 8 - v181] > &v175[v1306 - v134 - 8])
                || &v1306[-v181 - 8] > v1306 - 8)
              {
                v179 = v1306;
                v99 = a9;
              }
              else if ((unint64_t)(v134 - v175) >= 0x20)
              {
                v182 = (v178 >> 3) + 1;
                v183 = 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL);
                v179 = &v1306[-v183];
                v176 = (unint64_t *)((char *)v176 - v183);
                v184 = &v175[8 * v172 - 16];
                v185 = v1306 - 16;
                v186 = v182 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v121 = *((_OWORD *)v185 - 1);
                  v187 = *(_OWORD *)v185;
                  *(v184 - 1) = v121;
                  *v184 = v187;
                  v184 -= 2;
                  v185 -= 32;
                  v186 -= 4;
                }
                while (v186);
                v99 = a9;
                if (v182 == (v182 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_206;
              }
              else
              {
                v179 = v1306;
                v99 = a9;
              }
              do
              {
                v180 = *((_QWORD *)v179 - 1);
                v179 -= 8;
                *--v176 = v180;
              }
              while (v179 != v134);
LABEL_206:
              if (v134)
              {
LABEL_210:
                operator delete(v134);
                v134 = v176;
                v132 = (uint64_t)v177;
                v131 += 24;
                if (v131 == v1300)
                {
LABEL_232:
                  v98 = v1296;
                  v128 = *(_QWORD *)(v1296 + 8);
                  v104 = v1293.i64[0];
                  goto LABEL_234;
                }
              }
              else
              {
                v134 = v176;
                v132 = (uint64_t)v177;
                v131 += 24;
                if (v131 == v1300)
                  goto LABEL_232;
              }
            }
          }
        }
        v135 = 0;
        v134 = 0;
        v98 = v1296;
LABEL_234:
        *(_QWORD *)task_info_out = v134;
        *(_QWORD *)&task_info_out[8] = v132;
        *(_QWORD *)&task_info_out[16] = v135;
        sub_207DED424(v104, (_QWORD *)(v128 + 1632), (uint64_t *)a4, (_QWORD *)(v128 + 1656), task_info_out, v130, *(double *)&v121, v122, v123, v124, v125, v126, v127);
        if (*(_QWORD *)task_info_out)
        {
          *(_QWORD *)&task_info_out[8] = *(_QWORD *)task_info_out;
          operator delete(*(void **)task_info_out);
        }
        v104 += 1344;
        v103 = v1289;
      }
      v102 = (_QWORD *)*v1282;
    }
    while (*v1282);
  }
  v188 = *(_QWORD *)(v98 + 8);
  if (*(_BYTE *)(v188 + 1624))
  {
    v189 = v1316;
    if (v1316)
    {
      v14 = 0;
      v190 = 0;
      v191 = 0;
      v192 = 0;
      while (1)
      {
        v193 = v189[3];
        v194 = v189[4];
        if (v193 != v194)
          break;
LABEL_239:
        v189 = (_QWORD *)*v189;
        if (!v189)
          goto LABEL_278;
      }
      while (1)
      {
        while (1)
        {
          if (*(_BYTE *)(v193 + 1032))
            goto LABEL_243;
          v195 = *(double *)(v188 + 1736);
          if (*(_BYTE *)(v193 + 652))
          {
            v196 = **(_DWORD **)(v193 + 1104);
            v1136 = v196 > 7;
            v197 = (1 << v196) & 0x8C;
            v198 = v1136 || v197 == 0;
            if (!v198 && *(double *)(v193 + 1008) - v195 > v1320 - *(double *)(v193 + 944))
              goto LABEL_243;
          }
          if (*(_DWORD *)(v193 + 1300))
            goto LABEL_243;
          if (v195 == 0.0)
            v195 = 1.0;
          v199 = llround(*(double *)(v193 + 1000) / v195);
          v200 = v199 <= 1 ? 1 : v199;
          if (v192 >= v191)
            break;
          *v192 = v193;
          v192[1] = v200;
          v190 = v192 + 2;
          v192 += 2;
          v193 += 1344;
          if (v193 == v194)
            goto LABEL_239;
        }
        v201 = ((uint64_t)v192 - v14) >> 4;
        v202 = v201 + 1;
        if ((unint64_t)(v201 + 1) >> 60)
          sub_207CA420C();
        if (((uint64_t)v191 - v14) >> 3 > v202)
          v202 = ((uint64_t)v191 - v14) >> 3;
        if ((unint64_t)v191 - v14 >= 0x7FFFFFFFFFFFFFF0)
          v203 = 0xFFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          if (v203 >> 60)
            sub_207CA3AB8();
          v204 = (char *)operator new(16 * v203);
          v205 = (uint64_t *)&v204[16 * v201];
          *v205 = v193;
          v205[1] = v200;
          if (v192 != (uint64_t *)v14)
          {
LABEL_269:
            v206 = v205;
            do
            {
              v207 = v206 - 2;
              *((_OWORD *)v206 - 1) = *((_OWORD *)v192 - 1);
              v192 -= 2;
              v206 -= 2;
            }
            while (v192 != (uint64_t *)v14);
            v191 = (uint64_t *)&v204[16 * v203];
            v190 = v205 + 2;
            if (!v14)
              goto LABEL_242;
LABEL_275:
            operator delete((void *)v14);
            goto LABEL_242;
          }
        }
        else
        {
          v204 = 0;
          v205 = (uint64_t *)(16 * v201);
          *v205 = v193;
          v205[1] = v200;
          if (v192 != (uint64_t *)v14)
            goto LABEL_269;
        }
        v207 = v205;
        v191 = (uint64_t *)&v204[16 * v203];
        v190 = v205 + 2;
        if (v14)
          goto LABEL_275;
LABEL_242:
        v14 = (uint64_t)v207;
        v192 = v190;
        v98 = v1296;
LABEL_243:
        v193 += 1344;
        if (v193 == v194)
          goto LABEL_239;
      }
    }
    v14 = 0;
    v190 = 0;
    v192 = 0;
LABEL_278:
    v208 = 126 - 2 * __clz(((uint64_t)v192 - v14) >> 4);
    if (v192 == (uint64_t *)v14)
      v209 = 0;
    else
      v209 = v208;
    sub_207D44328((uint64_t *)v14, v192, v209, 1);
    v99 = v1298;
    if ((unint64_t)v190 - v14 >= 0x11)
    {
      v210 = ((uint64_t)v190 - v14) >> 4;
      if (v210 <= 2)
        v210 = 2;
      v211 = *(_DWORD *)(v14 + 8);
      v212 = 1;
      while (1)
      {
        v213 = (_DWORD *)(v14 + 16 * v212);
        v214 = v213[2];
        if (v211 < 0)
          v211 = -v211;
        if (v214)
          break;
        if (v211 >= 2)
          goto LABEL_296;
LABEL_285:
        ++v212;
        v211 = v214;
        if (v212 == v210)
          goto LABEL_297;
      }
      if (v214 >= 0)
        v215 = v213[2];
      else
        v215 = -v214;
      do
      {
        v216 = v215;
        v215 = v211 % v215;
        v211 = v216;
      }
      while (v215);
      if (v216 < 2)
        goto LABEL_285;
LABEL_296:
      *(_DWORD *)(*(_QWORD *)v213 + 1300) = 1;
      goto LABEL_285;
    }
LABEL_297:
    if (v14)
      operator delete((void *)v14);
    v188 = *(_QWORD *)(v98 + 8);
  }
  v217 = v1320;
  memset(v1341, 0, sizeof(v1341));
  LODWORD(v1342) = 733236976;
  kdebug_trace();
  if (!*(_QWORD *)(v188 + 1200) || !*(_QWORD *)(v188 + 56))
  {
    v1312 = 0uLL;
    goto LABEL_398;
  }
  memset(task_info_out, 0, 32);
  *(_DWORD *)&task_info_out[32] = 1065353216;
  v218 = v1316;
  if (!v1316)
  {
LABEL_397:
    v1312 = 0uLL;
    goto LABEL_398;
  }
  do
  {
    v219 = v218[3];
    v220 = v218[4];
    if (v219 != v220)
    {
      v221 = *(int8x8_t *)(v188 + 1184);
      if (v221)
      {
        v222 = *(_QWORD *)(v219 + 32);
        *(_QWORD *)task_info_outCnt = v222;
LABEL_308:
        v223 = (uint8x8_t)vcnt_s8(v221);
        v223.i16[0] = vaddlv_u8(v223);
        if (v223.u32[0] > 1uLL)
        {
          v224 = v222;
          if (v222 >= *(_QWORD *)&v221)
            v224 = v222 % *(_QWORD *)&v221;
        }
        else
        {
          v224 = v222 & (*(_QWORD *)&v221 - 1);
        }
        v225 = *(_QWORD **)(*(_QWORD *)(v188 + 1176) + 8 * v224);
        if (v225)
        {
          v226 = (_QWORD *)*v225;
          if (v226)
          {
            if (v223.u32[0] < 2uLL)
            {
              v227 = *(_QWORD *)&v221 - 1;
              while (1)
              {
                v229 = v226[1];
                if (v229 == v222)
                {
                  if (v226[2] == v222)
                    goto LABEL_328;
                }
                else if ((v229 & v227) != v224)
                {
                  goto LABEL_351;
                }
                v226 = (_QWORD *)*v226;
                if (!v226)
                  goto LABEL_351;
              }
            }
            do
            {
              v228 = v226[1];
              if (v228 == v222)
              {
                if (v226[2] == v222)
                {
LABEL_328:
                  v230 = sub_207D49E00((uint64_t *)task_info_out, v222, task_info_outCnt);
                  v231 = v230;
                  v233 = (char *)v230[4];
                  v232 = v230[5];
                  if ((unint64_t)v233 < v232)
                  {
                    *(_QWORD *)v233 = v219;
                    v234 = (uint64_t)(v233 + 8);
LABEL_350:
                    v231[4] = v234;
                    v99 = v1298;
                    break;
                  }
                  v235 = (char *)v230[3];
                  v236 = (v233 - v235) >> 3;
                  v237 = v236 + 1;
                  if ((unint64_t)(v236 + 1) >> 61)
                    sub_207CA420C();
                  v238 = v232 - (_QWORD)v235;
                  if (v238 >> 2 > v237)
                    v237 = v238 >> 2;
                  if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
                    v239 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v239 = v237;
                  if (v239)
                  {
                    if (v239 >> 61)
                      sub_207CA3AB8();
                    v240 = v239;
                    v241 = (char *)operator new(8 * v239);
                    v239 = v240;
                    v242 = &v241[8 * v236];
                    *(_QWORD *)v242 = v219;
                    v234 = (uint64_t)(v242 + 8);
                    v243 = (char *)(v233 - v235);
                    if (v233 == v235)
                      goto LABEL_348;
LABEL_341:
                    v244 = (unint64_t)(v243 - 8);
                    if (v244 < 0x58)
                      goto LABEL_2118;
                    if ((unint64_t)(v235 - v241) < 0x20)
                      goto LABEL_2118;
                    v245 = (v244 >> 3) + 1;
                    v246 = 8 * (v245 & 0x3FFFFFFFFFFFFFFCLL);
                    v247 = &v233[-v246];
                    v242 -= v246;
                    v248 = &v241[8 * v236 - 16];
                    v249 = v233 - 16;
                    v250 = v245 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v251 = *(_OWORD *)v249;
                      *((_OWORD *)v248 - 1) = *((_OWORD *)v249 - 1);
                      *(_OWORD *)v248 = v251;
                      v248 -= 32;
                      v249 -= 32;
                      v250 -= 4;
                    }
                    while (v250);
                    v233 = v247;
                    if (v245 != (v245 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_2118:
                      do
                      {
                        v252 = *((_QWORD *)v233 - 1);
                        v233 -= 8;
                        *((_QWORD *)v242 - 1) = v252;
                        v242 -= 8;
                      }
                      while (v233 != v235);
                    }
                    v233 = (char *)v231[3];
                  }
                  else
                  {
                    v241 = 0;
                    v242 = (char *)(8 * v236);
                    *(_QWORD *)(8 * v236) = v219;
                    v234 = 8 * v236 + 8;
                    v243 = (char *)(v233 - v235);
                    if (v233 != v235)
                      goto LABEL_341;
                  }
LABEL_348:
                  v231[3] = v242;
                  v231[4] = v234;
                  v231[5] = &v241[8 * v239];
                  if (v233)
                    operator delete(v233);
                  goto LABEL_350;
                }
              }
              else
              {
                if (v228 >= *(_QWORD *)&v221)
                  v228 %= *(_QWORD *)&v221;
                if (v228 != v224)
                  break;
              }
              v226 = (_QWORD *)*v226;
            }
            while (v226);
          }
        }
LABEL_351:
        while (1)
        {
          v219 += 1344;
          if (v219 == v220)
            break;
          v221 = *(int8x8_t *)(v188 + 1184);
          v222 = *(_QWORD *)(v219 + 32);
          *(_QWORD *)task_info_outCnt = v222;
          if (v221)
            goto LABEL_308;
        }
      }
    }
    v218 = (_QWORD *)*v218;
  }
  while (v218);
  v14 = *(_QWORD *)&task_info_out[16];
  if (!*(_QWORD *)&task_info_out[16])
    goto LABEL_384;
  while (2)
  {
    if (*(_QWORD *)(v14 + 24) == *(_QWORD *)(v14 + 32)
      || !sub_207D42F0C((_QWORD *)v188, &v1313, *(_QWORD *)(v14 + 16), 1, 1))
    {
      goto LABEL_358;
    }
    v254 = *(_QWORD *)(v14 + 24);
    v253 = *(_QWORD *)(v14 + 32);
    if (v254 == v253)
      goto LABEL_371;
    v255 = 0;
    v256 = v254 + 8;
    do
    {
      *(_QWORD *)task_info_outCnt = 0x100000000;
      v257 = **(unsigned int **)(*(_QWORD *)(v256 - 8) + 1104);
      if (!(_DWORD)v257)
        goto LABEL_366;
      v258 = &task_info_outCnt[2];
      if ((_DWORD)v257 == 1)
      {
        v257 = 1;
LABEL_366:
        v258 = &task_info_outCnt[v257];
      }
      v255 |= (char *)v258 - (char *)task_info_outCnt != 8;
      if ((char *)v258 - (char *)task_info_outCnt != 8)
        break;
      v108 = v256 == v253;
      v256 += 8;
    }
    while (!v108);
    if ((v255 & 1) == 0)
    {
LABEL_371:
      v259 = *(int **)(v188 + 696);
      v260 = *(int **)(v188 + 704);
      if (v259 != v260)
      {
        v261 = 1;
        do
        {
          v262 = *(_QWORD *)(v14 + 24);
          v263 = *(_QWORD *)(v14 + 32);
          if (v262 != v263)
          {
            v264 = *v259;
            do
            {
              v265 = *(_DWORD **)(*(_QWORD *)v262 + 1104);
              if (*v265 == v264)
              {
                *v265 = 5;
                ++v261;
                if ((sub_207D42F0C((_QWORD *)v188, &v1313, *(_QWORD *)(v14 + 16), v261, v261) & 1) == 0)
                  break;
              }
              v262 += 8;
            }
            while (v262 != v263);
          }
          v266 = sub_207D42F0C((_QWORD *)v188, &v1313, *(_QWORD *)(v14 + 16), v261, v261);
          v99 = v1298;
          if (++v259 == v260)
            v267 = 0;
          else
            v267 = v266;
        }
        while ((v267 & 1) != 0);
      }
      sub_207D41AE8((uint64_t)&v1313);
    }
LABEL_358:
    v14 = *(_QWORD *)v14;
    if (v14)
      continue;
    break;
  }
  v268 = *(uint64_t **)&task_info_out[16];
  if (*(_QWORD *)&task_info_out[16])
  {
    do
    {
      v14 = *v268;
      v274 = (void *)v268[3];
      if (v274)
      {
        v268[4] = (uint64_t)v274;
        operator delete(v274);
      }
      operator delete(v268);
      v268 = (uint64_t *)v14;
    }
    while (v14);
  }
LABEL_384:
  v269 = *(void **)task_info_out;
  *(_QWORD *)task_info_out = 0;
  if (v269)
    operator delete(v269);
  v270 = v1316;
  v98 = v1296;
  if (!v1316)
    goto LABEL_397;
  v271 = 1;
  do
  {
    v272 = v270[3];
    v273 = v270[4];
    if (v272 != v273)
    {
      v271 = v271 != 0;
      do
      {
        v271 &= *(_BYTE *)(v272 + 1032) != 0;
        v272 += 1344;
      }
      while (v272 != v273);
    }
    v270 = (_QWORD *)*v270;
  }
  while (v270);
  if (v271)
    goto LABEL_397;
  v14 = *(_QWORD *)(v188 + 1192);
  if (!v14)
    goto LABEL_397;
  v374 = a8;
  v1293.i64[0] = v188 + 1224;
  while (2)
  {
    if (v374 && *(_BYTE *)v1266)
    {
      memset(v1332, 0, 24);
      v1332[24] = 1;
      __dst = 0;
      v1324 = 0;
      v1325 = 0;
      v375 = v1315;
      if (!*(_QWORD *)&v1315)
        goto LABEL_586;
    }
    else
    {
      v1332[0] = 0;
      v1332[24] = 0;
      __dst = 0;
      v1324 = 0;
      v1325 = 0;
      v375 = v1315;
      if (!*(_QWORD *)&v1315)
        goto LABEL_586;
    }
    v376 = **(_QWORD **)(v14 + 24);
    v377 = (uint8x8_t)vcnt_s8(v375);
    v377.i16[0] = vaddlv_u8(v377);
    if (v377.u32[0] > 1uLL)
    {
      v378 = **(_QWORD **)(v14 + 24);
      if (v376 >= *(_QWORD *)&v375)
        v378 = v376 % *(_QWORD *)&v375;
    }
    else
    {
      v378 = (*(_QWORD *)&v375 - 1) & v376;
    }
    v379 = (_QWORD *)*((_QWORD *)v1314 + v378);
    if (!v379 || (v380 = (_QWORD *)*v379) == 0)
    {
LABEL_586:
      v384 = 3;
      goto LABEL_587;
    }
    if (v377.u32[0] < 2uLL)
    {
      v381 = *(_QWORD *)&v375 - 1;
      while (1)
      {
        v383 = v380[1];
        if (v383 == v376)
        {
          if (v380[2] == v376)
            goto LABEL_602;
        }
        else if ((v383 & v381) != v378)
        {
          goto LABEL_586;
        }
        v380 = (_QWORD *)*v380;
        if (!v380)
          goto LABEL_586;
      }
    }
    while (2)
    {
      v382 = v380[1];
      if (v382 != v376)
      {
        if (v382 >= *(_QWORD *)&v375)
          v382 %= *(_QWORD *)&v375;
        if (v382 != v378)
          goto LABEL_586;
        goto LABEL_576;
      }
      if (v380[2] != v376)
      {
LABEL_576:
        v380 = (_QWORD *)*v380;
        if (!v380)
          goto LABEL_586;
        continue;
      }
      break;
    }
LABEL_602:
    v392 = v380[3];
    v391 = v380[4];
    if (v392 == v391)
    {
      v384 = 3;
      v374 = a8;
      goto LABEL_587;
    }
    v393 = 0;
    while (2)
    {
      if (*(_BYTE *)(v392 + 1032)
        || (!*(_BYTE *)(v392 + 652)
         || ((v401 = **(_DWORD **)(v392 + 1104), v1136 = v401 > 7, v402 = (1 << v401) & 0x8C, !v1136)
           ? (v403 = v402 == 0)
           : (v403 = 1),
             v403)
          ? (v404 = 1)
          : (v404 = *(double *)(v392 + 1008) - *(double *)(v188 + 1736) <= v217 - *(double *)(v392 + 944)),
            !v404 || *(_DWORD *)(v392 + 1300)))
      {
        v395 = 0;
        if (*(_BYTE *)(v392 + 441))
        {
          if (*(_BYTE *)(v392 + 720))
          {
            if (**(_DWORD **)(v392 + 1104) == 2)
            {
              v395 = *(_DWORD *)(v392 + 88);
              v398 = *(unsigned __int8 *)(v392 + 652);
              v399 = *(_OWORD *)(v392 + 672);
              *(_OWORD *)(v392 + 588) = *(_OWORD *)(v392 + 656);
              *(_OWORD *)(v392 + 604) = v399;
              v400 = *(_OWORD *)(v392 + 704);
              *(_OWORD *)(v392 + 620) = *(_OWORD *)(v392 + 688);
              *(_OWORD *)(v392 + 636) = v400;
              if (!v398)
                *(_BYTE *)(v392 + 652) = 1;
            }
          }
        }
      }
      else
      {
        *(_BYTE *)(v392 + 1329) = 1;
        if ((unint64_t)v393 < v1325)
        {
          *(_QWORD *)v393 = v392;
          v394 = (std::__shared_weak_count *)(v393 + 8);
        }
        else
        {
          v405 = (char *)__dst;
          v406 = v393 - (_BYTE *)__dst;
          v407 = (v393 - (_BYTE *)__dst) >> 3;
          v408 = v407 + 1;
          if ((unint64_t)(v407 + 1) >> 61)
            sub_207CA420C();
          v409 = v1325 - (_QWORD)__dst;
          if ((v1325 - (uint64_t)__dst) >> 2 > v408)
            v408 = v409 >> 2;
          if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFF8)
            v410 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v410 = v408;
          if (v410)
          {
            if (v410 >> 61)
              sub_207CA3AB8();
            v411 = operator new(8 * v410);
          }
          else
          {
            v411 = 0;
          }
          v412 = &v411[8 * v407];
          *v412 = v392;
          v394 = (std::__shared_weak_count *)(v412 + 1);
          if (v393 != v405)
          {
            v413 = v393 - v405 - 8;
            if (v413 < 0x168
              || (v416 = (v393 - 8 - v405) & 0xFFFFFFFFFFFFFFF8, &v411[v406 - 8 - v416] > &v411[v406 - 8])
              || &v393[-v416 - 8] > v393 - 8
              || (unint64_t)(v393 - &v411[v406]) < 0x20)
            {
              v414 = v393;
            }
            else
            {
              v417 = (v413 >> 3) + 1;
              v418 = 8 * (v417 & 0x3FFFFFFFFFFFFFFCLL);
              v414 = &v393[-v418];
              v412 = (_QWORD *)((char *)v412 - v418);
              v419 = &v411[8 * v407 - 16];
              v420 = v393 - 16;
              v421 = v417 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v422 = *(_OWORD *)v420;
                *(v419 - 1) = *((_OWORD *)v420 - 1);
                *v419 = v422;
                v419 -= 2;
                v420 -= 32;
                v421 -= 4;
              }
              while (v421);
              if (v417 == (v417 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_640:
                v393 = (char *)__dst;
                goto LABEL_641;
              }
            }
            do
            {
              v415 = *((_QWORD *)v414 - 1);
              v414 -= 8;
              *--v412 = v415;
            }
            while (v414 != v405);
            goto LABEL_640;
          }
LABEL_641:
          __dst = v412;
          v1324 = v394;
          v1325 = (int64_t)&v411[8 * v410];
          v98 = v1296;
          if (v393)
            operator delete(v393);
          v99 = v1298;
        }
        v1324 = v394;
        v395 = 0;
        v393 = (char *)v394;
      }
      *(_DWORD *)(v392 + 88) = v395;
      v396 = *(_DWORD *)(v392 + 1300);
      if (v396 <= 0)
        v397 = 0;
      else
        v397 = v396 - 2;
      *(_DWORD *)(v392 + 1300) = v397;
      v392 += 1344;
      if (v392 != v391)
        continue;
      break;
    }
    v374 = a8;
    if (v393 == __dst)
    {
      v384 = 3;
      goto LABEL_813;
    }
    v423 = *(unint64_t **)(v14 + 24);
    v424 = *v423;
    if (!*(_QWORD *)&v1315)
    {
      v428 = 0;
      v429 = 0;
      v430 = 0;
      v426 = v188 + 1224;
      goto LABEL_676;
    }
    v425 = (uint8x8_t)vcnt_s8(v1315);
    v425.i16[0] = vaddlv_u8(v425);
    v426 = v188 + 1224;
    if (v425.u32[0] > 1uLL)
    {
      v427 = *v423;
      if (*(_QWORD *)&v1315 <= v424)
        v427 = v424 % *(_QWORD *)&v1315;
    }
    else
    {
      v427 = (*(_QWORD *)&v1315 - 1) & v424;
    }
    v431 = (_QWORD *)*((_QWORD *)v1314 + v427);
    if (!v431 || (v432 = (_QWORD *)*v431) == 0)
    {
LABEL_675:
      v428 = 0;
      v429 = 0;
      v430 = 0;
      goto LABEL_676;
    }
    if (v425.u32[0] < 2uLL)
    {
      while (1)
      {
        v434 = v432[1];
        if (v434 == v424)
        {
          if (v432[2] == v424)
            goto LABEL_798;
        }
        else if ((v434 & (*(_QWORD *)&v1315 - 1)) != v427)
        {
          goto LABEL_675;
        }
        v432 = (_QWORD *)*v432;
        if (!v432)
          goto LABEL_675;
      }
    }
    while (2)
    {
      v433 = v432[1];
      if (v433 != v424)
      {
        if (v433 >= *(_QWORD *)&v1315)
          v433 %= *(_QWORD *)&v1315;
        if (v433 != v427)
          goto LABEL_675;
        goto LABEL_665;
      }
      if (v432[2] != v424)
      {
LABEL_665:
        v432 = (_QWORD *)*v432;
        if (!v432)
          goto LABEL_675;
        continue;
      }
      break;
    }
LABEL_798:
    v430 = (unint64_t)(v432 + 3) & 0xFFFFFFFFFFFFFF00;
    v428 = ((_BYTE)v432 + 24);
    v429 = 1;
LABEL_676:
    v1335 = v424;
    v1336[0] = 0;
    v1336[1] = 0;
    LODWORD(v1337) = 733236984;
    kdebug_trace();
    v445 = (float32x2_t **)(v430 | v428);
    v446 = *(unint64_t **)(v14 + 24);
    if (v446[58])
    {
      v447 = (std::__shared_weak_count *)__dst;
      v448 = v1324;
      while (v447 != v448)
      {
        v449 = v447->__vftable;
        v450 = operator new(8uLL);
        *(_QWORD *)&v1390 = v450;
        *v450 = v449;
        v1391 = v450 + 1;
        *((_QWORD *)&v1390 + 1) = v450 + 1;
        v451 = *(unint64_t **)(v14 + 24);
        task_info_out[0] = 0;
        task_info_out[64] = 0;
        sub_207DC3D4C(v451, (_QWORD *)v1287, v1269, (_QWORD *)a4, (char **)&v1390, v1294, (uint64_t)v1332, &v1312, v217, v445, v429, 0, 0, (int32x4_t *)task_info_out, v426);
        v452 = v1312;
        if (*((_QWORD *)&v1312 + 1))
        {
          v453 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 8);
          do
            v454 = __ldxr(v453);
          while (__stxr(v454 + 1, v453));
          do
            v455 = __ldaxr(v453);
          while (__stlxr(v455 - 1, v453));
          if (!v455)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v452 + 1) + 16))(*((_QWORD *)&v452 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v452 + 1));
          }
        }
        if ((_QWORD)v452)
        {
          if ((_QWORD)v1390)
          {
            *((_QWORD *)&v1390 + 1) = v1390;
            operator delete((void *)v1390);
          }
          v384 = 1;
          v99 = v1298;
          v374 = a8;
          goto LABEL_812;
        }
        v456 = (std::__shared_weak_count *)*((_QWORD *)&v1312 + 1);
        if (*((_QWORD *)&v1312 + 1))
        {
          v457 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 8);
          do
            v458 = __ldaxr(v457);
          while (__stlxr(v458 - 1, v457));
          if (!v458)
          {
            ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
            std::__shared_weak_count::__release_weak(v456);
          }
        }
        if ((_QWORD)v1390)
        {
          *((_QWORD *)&v1390 + 1) = v1390;
          operator delete((void *)v1390);
        }
        v447 = (std::__shared_weak_count *)((char *)v447 + 8);
      }
LABEL_710:
      v466 = (std::__shared_weak_count *)__dst;
      v467 = v1324;
      v99 = v1298;
      v374 = a8;
      if (__dst != v1324)
      {
        v468 = v1316;
        do
        {
          v470 = v466->__vftable;
          v471 = *(double *)&v466->__vftable[23].__get_deleter;
          if (v471 > 0.0)
          {
            on_zero_shared_weak = (unint64_t)v470[24].__on_zero_shared_weak;
            v473 = (double)on_zero_shared_weak;
            v474 = *(double *)&v470[25].~__shared_weak_count * (double)on_zero_shared_weak;
            *(double *)&v470[25].~__shared_weak_count = v474;
            v475 = v470[23].__on_zero_shared_weak;
            v476 = ((char *)v470[24].~__shared_weak_count - (char *)v475) >> 3;
            if (on_zero_shared_weak >= v476)
            {
              get_deleter = (uint64_t)v470[24].__get_deleter;
              if (!get_deleter)
                get_deleter = ((char *)v470[24].~__shared_weak_count - (char *)v475) >> 3;
              *(double *)&v470[25].~__shared_weak_count = v474 - *((double *)v475 + get_deleter - 1);
            }
            v478 = v217 - v471;
            on_zero_shared = (unint64_t)v470[24].__on_zero_shared;
            if (!on_zero_shared)
              on_zero_shared = v476;
            v480 = on_zero_shared - 1;
            v470[24].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v480;
            *((double *)v475 + v480) = v478;
            if (on_zero_shared_weak == v476)
            {
              if (v470[24].__get_deleter)
                on_zero_shared_weak = (unint64_t)v470[24].__get_deleter;
              v470[24].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))(on_zero_shared_weak - 1);
            }
            else
            {
              v481 = on_zero_shared_weak + 1;
              v470[24].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v481;
              v473 = (double)v481;
            }
            *(double *)&v470[25].~__shared_weak_count = (v478 + *(double *)&v470[25].~__shared_weak_count) / v473;
          }
          *(double *)&v470[23].__get_deleter = v217;
          if (BYTE4(v470[16].~__shared_weak_count_0))
          {
            v482 = *(float *)&v470[2].~__shared_weak_count_0;
            if (v482 > *(float *)(v188 + 636))
            {
              v483 = BYTE4(v470[19].__get_deleter);
              v484 = *(_OWORD *)((char *)&v470[15].~__shared_weak_count + 4);
              *(_OWORD *)((char *)&v470[18].~__shared_weak_count + 4) = *(_OWORD *)((char *)&v470[14].__get_deleter + 4);
              *(_OWORD *)((char *)&v470[18].__on_zero_shared + 4) = v484;
              v435 = *(int8x16_t *)((char *)&v470[15].__on_zero_shared_weak + 4);
              *(_OWORD *)((char *)&v470[18].__on_zero_shared_weak + 4) = *(_OWORD *)((char *)&v470[15].__on_zero_shared
                                                                                   + 4);
              *(int8x16_t *)((char *)&v470[19].~__shared_weak_count_0 + 4) = v435;
              if (!v483)
                BYTE4(v470[19].__get_deleter) = 1;
            }
            if (v482 > *(float *)(v188 + 632))
            {
              v485 = (_OWORD *)((char *)&v470[18].~__shared_weak_count + 4);
              v486 = (_OWORD *)((char *)&v470[21].__on_zero_shared + 4);
              if (BYTE4(v470[23].~__shared_weak_count) == BYTE4(v470[19].__get_deleter))
              {
                if (BYTE4(v470[23].~__shared_weak_count))
                {
                  v487 = *(_OWORD *)((char *)&v470[18].__on_zero_shared + 4);
                  *v486 = *v485;
                  *(_OWORD *)((char *)&v470[21].__on_zero_shared_weak + 4) = v487;
                  v488 = *(_OWORD *)((char *)&v470[19].~__shared_weak_count_0 + 4);
                  *(_OWORD *)((char *)&v470[22].~__shared_weak_count_0 + 4) = *(_OWORD *)((char *)&v470[18].__on_zero_shared_weak
                                                                                        + 4);
                  *(_OWORD *)((char *)&v470[22].__get_deleter + 4) = v488;
                }
              }
              else if (BYTE4(v470[23].~__shared_weak_count))
              {
                BYTE4(v470[23].~__shared_weak_count) = 0;
              }
              else
              {
                v489 = *(_OWORD *)((char *)&v470[18].__on_zero_shared + 4);
                *v486 = *v485;
                *(_OWORD *)((char *)&v470[21].__on_zero_shared_weak + 4) = v489;
                v490 = *(_OWORD *)((char *)&v470[19].~__shared_weak_count_0 + 4);
                *(_OWORD *)((char *)&v470[22].~__shared_weak_count_0 + 4) = *(_OWORD *)((char *)&v470[18].__on_zero_shared_weak
                                                                                      + 4);
                *(_OWORD *)((char *)&v470[22].__get_deleter + 4) = v490;
                BYTE4(v470[23].~__shared_weak_count) = 1;
              }
            }
            v491 = *(double *)(v188 + 936);
            v492 = *(double *)(v188 + 952);
            if (*(_BYTE *)(v188 + 968) || !BYTE1(v470[11].~__shared_weak_count))
            {
              v493 = 0;
              if (v468)
              {
                v494 = v468;
                do
                {
                  for (m = v494[3]; m != v494[4]; m += 1344)
                  {
                    if (*(_BYTE *)(m + 441) && !*(_BYTE *)(m + 1296))
                      ++v493;
                  }
                  v494 = (_QWORD *)*v494;
                }
                while (v494);
                v496 = v468;
                do
                {
                  for (n = v496[3]; n != v496[4]; n += 1344)
                  {
                    if (*(_BYTE *)(n + 441))
                      v494 = (_QWORD *)((char *)v494 + *(unsigned __int8 *)(n + 1296));
                  }
                  v496 = (_QWORD *)*v496;
                }
                while (v496);
              }
              else
              {
                v494 = 0;
              }
              v498 = 1.0 / v491 - 1.0 / v492 * (double)(unint64_t)v494;
              if (v493 <= 1)
                v493 = 1;
              v499 = v498 / (double)v493;
              if (1.0 / v492 > v499)
                v499 = 1.0 / v492;
              v491 = 1.0 / v499;
              if (v491 > v492)
                v491 = *(double *)(v188 + 952);
            }
            else if (LOBYTE(v470[32].__on_zero_shared))
            {
              v491 = *(double *)(v188 + 952);
            }
            if (LOBYTE(v470[18].~__shared_weak_count)
              && BYTE4(v470[19].__get_deleter)
              && BYTE1(v470[11].~__shared_weak_count))
            {
              v435.i64[0] = (uint64_t)v470[3].__get_deleter;
              v435.i32[2] = (__int32)v470[3].__on_zero_shared_weak;
              v436.i64[0] = *(uint64_t *)((char *)&v470[3].__on_zero_shared_weak + 4);
              v436.i32[2] = HIDWORD(v470[4].~__shared_weak_count);
              v500 = vaddq_f32((float32x4_t)v435, (float32x4_t)v436);
              v436.i64[0] = 0x3F0000003F000000;
              v436.i64[1] = 0x3F0000003F000000;
              v435 = (int8x16_t)vmulq_f32(v500, (float32x4_t)v436);
              if (LOBYTE(v470[25].__get_deleter))
              {
                v501 = *(double *)&v470[25].__on_zero_shared;
                v435 = (int8x16_t)vmulq_n_f32((float32x4_t)v435, v501);
              }
              v442.i64[0] = (uint64_t)v470[16].__on_zero_shared;
              v442.i32[2] = (__int32)v470[16].__get_deleter;
              v502 = (float32x2_t)v470[16].__on_zero_shared_weak;
              v441.i32[0] = (__int32)v470[17].~__shared_weak_count;
              v503 = (float32x2_t)v470[17].~__shared_weak_count_0;
              v440.i32[0] = (__int32)v470[17].__on_zero_shared;
              v438.i64[0] = *(uint64_t *)((char *)&v470[18].~__shared_weak_count + 4);
              v438.i32[2] = HIDWORD(v470[18].~__shared_weak_count_0);
              v443.i32[0] = HIDWORD(v470[18].__get_deleter);
              v437.i64[0] = *(uint64_t *)((char *)&v470[18].__on_zero_shared + 4);
              v444.i32[0] = HIDWORD(v470[19].~__shared_weak_count);
              v436.i64[0] = *(uint64_t *)((char *)&v470[18].__on_zero_shared_weak + 4);
              v504 = (float32x2_t)vextq_s8(v438, v438, 8uLL).u64[0];
              v505 = ((float)(vmla_f32(vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v442, v442, 8uLL), v504), v443, v441), v444, v440).f32[0]+ vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v442.i8, *(float *)v438.i32), v502, *(float *)v437.i32), v503, *(float *)v436.i32), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)v442.i8,
                                                                *(float32x2_t *)v438.i8,
                                                                1),
                                                              v502,
                                                              *(float32x2_t *)v437.i8,
                                                              1),
                                                            v503,
                                                            *(float32x2_t *)v436.i8,
                                                            1),
                                               1)).f32[0])
                    + -1.0)
                   * 0.5;
              if (*(float *)(v188 + 1028) > v505)
                goto LABEL_712;
              v437.i32[2] = HIDWORD(v470[18].__get_deleter);
              v436.i32[2] = HIDWORD(v470[19].~__shared_weak_count);
              *(float32x2_t *)v442.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v442.i8, *(float *)v435.i32), v502, *(float32x2_t *)v435.i8, 1), v503, (float32x4_t)v435, 2);
              v439.i32[0] = (__int32)v470[16].__get_deleter;
              *(float32x2_t *)v439.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v439.f32, *(float32x2_t *)v435.i8), v441, *(float32x2_t *)v435.i8, 1);
              v441 = (float32x2_t)vextq_s8(v435, v435, 8uLL).u64[0];
              v442.u64[1] = (unint64_t)vmla_f32(*(float32x2_t *)v439.f32, v441, v440);
              v439.i64[0] = (uint64_t)v470[17].__get_deleter;
              v439.i32[2] = (__int32)v470[17].__on_zero_shared_weak;
              v439 = vaddq_f32((float32x4_t)v442, v439);
              *(float32x2_t *)v438.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v438.i8, *(float *)v435.i32), *(float32x2_t *)v437.i8, *(float32x2_t *)v435.i8, 1), *(float32x2_t *)v436.i8, (float32x4_t)v435, 2);
              v506 = vmla_lane_f32(vmul_f32(v504, *(float32x2_t *)v435.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v437, v437, 8uLL), *(float32x2_t *)v435.i8, 1);
              v507 = (float32x4_t)vextq_s8(v436, v436, 8uLL);
              v440 = vmla_f32(v506, v441, *(float32x2_t *)v507.f32);
              v438.u64[1] = (unint64_t)v440;
              v507.i64[0] = *(uint64_t *)((char *)&v470[19].~__shared_weak_count_0 + 4);
              v507.i32[2] = HIDWORD(v470[19].__on_zero_shared);
              v435 = (int8x16_t)vsubq_f32(v439, vaddq_f32((float32x4_t)v438, v507));
              v437 = vextq_s8(v435, v435, 8uLL);
              if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v435.i8, *(float32x2_t *)v435.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v435.i8, 1), *(float32x2_t *)v435.i8, 1), *(float32x2_t *)v437.i8, *(float32x2_t *)v437.i8).f32[0]) > *(float *)(v188 + 1032))
              {
LABEL_712:
                v469 = 0;
                *(double *)&v470[25].~__shared_weak_count_0 = v491;
              }
              else
              {
                v508 = *(double *)(v188 + 952);
                if (!LOBYTE(v470[32].__on_zero_shared))
                {
                  v509 = *(double *)&v470[25].~__shared_weak_count_0;
                  if (*(double *)(v188 + 960) * v509 > v491)
                    v491 = *(double *)(v188 + 960) * v509;
                  v508 = *(double *)(v188 + 952);
                  if (v491 < v492)
                    v508 = v491;
                }
                *(double *)&v470[25].~__shared_weak_count_0 = v508;
                v469 = v508 == v492;
              }
              LOBYTE(v470[32].__on_zero_shared) = v469;
            }
          }
          v466 = (std::__shared_weak_count *)((char *)v466 + 8);
        }
        while (v466 != v467);
      }
      v384 = 0;
      if (a8 && v1332[24])
      {
        v510 = *(_QWORD *)&v1332[8];
        if (*(_QWORD *)v1332 != *(_QWORD *)&v1332[8])
        {
          v511 = *((_QWORD *)&v1313 + 1);
          v512 = *(_QWORD *)&v1332[8] - *(_QWORD *)v1332 - 80;
          v513 = *(_QWORD *)v1332;
          if (v512 < 0x50)
            goto LABEL_2119;
          v514 = v512 / 0x50 + 1;
          v513 = *(_QWORD *)v1332 + 80 * (v514 & 0x7FFFFFFFFFFFFFELL);
          v515 = (_QWORD *)(*(_QWORD *)v1332 + 144);
          v516 = v514 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v515 - 10) = v511;
            *v515 = v511;
            v515 += 20;
            v516 -= 2;
          }
          while (v516);
          if (v514 != (v514 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_2119:
            do
            {
              *(_QWORD *)(v513 + 64) = v511;
              v513 += 80;
            }
            while (v513 != v510);
          }
        }
        v517 = **(_QWORD **)(v14 + 24);
        v518 = (uint64_t **)(v1266 + 16);
        while (1)
        {
          v519 = *v518;
          v520 = v518;
          if (!*v518)
            break;
          while (1)
          {
            v518 = (uint64_t **)v519;
            v521 = v519[4];
            if (v517 < v521)
              break;
            if (v521 >= v517)
            {
              v522 = v518;
              goto LABEL_800;
            }
            v519 = v518[1];
            if (!v519)
            {
              v520 = v518 + 1;
              goto LABEL_795;
            }
          }
        }
LABEL_795:
        v522 = operator new(0x40uLL);
        v522[4] = v517;
        v522[5] = 0;
        v522[6] = 0;
        v522[7] = 0;
        *v522 = 0;
        v522[1] = 0;
        v522[2] = v518;
        *v520 = v522;
        v523 = **(_QWORD **)(v1266 + 8);
        v524 = v522;
        if (v523)
        {
          *(_QWORD *)(v1266 + 8) = v523;
          v524 = *v520;
        }
        sub_207CC24B4(*(uint64_t **)(v1266 + 16), v524);
        ++*(_QWORD *)(v1266 + 24);
LABEL_800:
        v525 = (void **)(v522 + 5);
        v526 = v522[5];
        if (v526)
        {
          v527 = v522[6];
          v528 = (void *)v522[5];
          if (v527 != v526)
          {
            do
            {
              v529 = *(_QWORD **)(v527 - 72);
              if (v529)
              {
                v530 = *(_QWORD **)(v527 - 64);
                v531 = *(void **)(v527 - 72);
                if (v530 != v529)
                {
                  do
                    v530 = sub_207D441B8(v530 - 66);
                  while (v530 != v529);
                  v531 = *(void **)(v527 - 72);
                }
                *(_QWORD *)(v527 - 64) = v529;
                operator delete(v531);
              }
              v527 -= 80;
            }
            while (v527 != v526);
            v528 = *v525;
            v98 = v1296;
          }
          v522[6] = v526;
          operator delete(v528);
          *v525 = 0;
          v522[6] = 0;
          v522[7] = 0;
        }
        v384 = 0;
        *(_OWORD *)(v522 + 5) = *(_OWORD *)v1332;
        v522[7] = *(_QWORD *)&v1332[16];
        memset(v1332, 0, 24);
        v99 = v1298;
      }
    }
    else
    {
      LOBYTE(task_info_outCnt[0]) = 0;
      v1353 = 0;
      sub_207DC3D4C(v446, (_QWORD *)v1287, v1269, (_QWORD *)a4, (char **)&__dst, v1294, (uint64_t)v1332, &v1312, v217, (float32x2_t **)(v430 | v428), v429, 0, 0, (int32x4_t *)task_info_outCnt, v426);
      v459 = v1312;
      v374 = a8;
      if (*((_QWORD *)&v1312 + 1))
      {
        v460 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 8);
        do
          v461 = __ldxr(v460);
        while (__stxr(v461 + 1, v460));
        do
          v462 = __ldaxr(v460);
        while (__stlxr(v462 - 1, v460));
        if (!v462)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v459 + 1) + 16))(*((_QWORD *)&v459 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v459 + 1));
        }
      }
      if (!(_QWORD)v459)
      {
        v463 = (std::__shared_weak_count *)*((_QWORD *)&v1312 + 1);
        if (*((_QWORD *)&v1312 + 1))
        {
          v464 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 8);
          do
            v465 = __ldaxr(v464);
          while (__stlxr(v465 - 1, v464));
          if (!v465)
          {
            ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
            std::__shared_weak_count::__release_weak(v463);
          }
        }
        goto LABEL_710;
      }
      v384 = 1;
    }
LABEL_812:
    kdebug_trace();
    v393 = (char *)__dst;
LABEL_813:
    if (v393)
    {
      v1324 = (std::__shared_weak_count *)v393;
      operator delete(v393);
    }
LABEL_587:
    if (v1332[24])
    {
      v385 = *(_QWORD *)v1332;
      if (*(_QWORD *)v1332)
      {
        v386 = *(_QWORD *)&v1332[8];
        v387 = *(void **)v1332;
        if (*(_QWORD *)&v1332[8] != *(_QWORD *)v1332)
        {
          do
          {
            v388 = *(_QWORD **)(v386 - 72);
            if (v388)
            {
              v389 = *(_QWORD **)(v386 - 64);
              v390 = *(void **)(v386 - 72);
              if (v389 != v388)
              {
                do
                  v389 = sub_207D441B8(v389 - 66);
                while (v389 != v388);
                v390 = *(void **)(v386 - 72);
              }
              *(_QWORD *)(v386 - 64) = v388;
              operator delete(v390);
            }
            v386 -= 80;
          }
          while (v386 != v385);
          v387 = *(void **)v1332;
          v99 = v1298;
        }
        *(_QWORD *)&v1332[8] = v385;
        operator delete(v387);
      }
    }
    if (v384 == 3 || !v384)
    {
      v14 = *(_QWORD *)v14;
      if (!v14)
        goto LABEL_397;
      continue;
    }
    break;
  }
LABEL_398:
  kdebug_trace();
  v275 = v1312;
  if (*((_QWORD *)&v1312 + 1))
  {
    v276 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 8);
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
    do
      v278 = __ldaxr(v276);
    while (__stlxr(v278 - 1, v276));
    if (!v278)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v275 + 1) + 16))(*((_QWORD *)&v275 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v275 + 1));
    }
  }
  if ((_QWORD)v275)
  {
    sub_207CCBAD4((std::__shared_weak_count_vtbl **)task_info_out, (uint64_t)&v1312);
LABEL_1461:
    *(_OWORD *)v99 = *(_OWORD *)task_info_out;
    *(_BYTE *)(v99 + 56) = 0;
    v944 = (std::__shared_weak_count *)*((_QWORD *)&v1312 + 1);
    if (!*((_QWORD *)&v1312 + 1))
      goto LABEL_1466;
LABEL_1462:
    v945 = (unint64_t *)&v944->__shared_owners_;
    do
      v946 = __ldaxr(v945);
    while (__stlxr(v946 - 1, v945));
    if (!v946)
    {
      ((void (*)(std::__shared_weak_count *))v944->__on_zero_shared)(v944);
      std::__shared_weak_count::__release_weak(v944);
    }
    goto LABEL_1466;
  }
  v279 = *(_QWORD *)(v98 + 8);
  if (*(_BYTE *)(v279 + 424))
    v280 = *(_BYTE *)(v1294 + 64) == 0;
  else
    v280 = 1;
  if (!v280)
    sub_207DCA020(*(_QWORD *)(v279 + 1312), (uint64_t)&v1313, v1294);
  v281 = v1316;
  if (v1316)
  {
    v1293.i64[0] = 0x3FEFAE147AE147AELL;
    do
    {
      v282 = v281[3];
      v283 = v281[4];
      v1283 = v281;
      while (v282 != v283)
      {
        sub_207DF861C(*(_QWORD *)(v98 + 8) + 1320, v282);
        sub_207DF39B0((_DWORD *)(*(_QWORD *)(v98 + 8) + 1432), v282, (float32x4_t *)v1294, v1320);
        v297 = *(int **)(v282 + 1104);
        v298 = *v297;
        if (*v297 == 3)
        {
          v300 = 0;
        }
        else if (v298 == 4)
        {
          v300 = 2;
        }
        else
        {
          v299 = &task_info_out[12];
          if (v298 != 6)
            goto LABEL_426;
          v300 = 1;
        }
        v299 = &task_info_out[4 * v300];
LABEL_426:
        if (v299 - task_info_out == 12)
          goto LABEL_433;
        v301 = *((_OWORD *)v297 + 3);
        v302 = *((_OWORD *)v297 + 4);
        v303 = *((_OWORD *)v297 + 6);
        *(_OWORD *)(v282 + 488) = *((_OWORD *)v297 + 5);
        *(_OWORD *)(v282 + 504) = v303;
        *(_OWORD *)(v282 + 456) = v301;
        *(_OWORD *)(v282 + 472) = v302;
        v304 = (__int128 *)(v297 + 28);
        v305 = (_OWORD *)(v282 + 588);
        if (*(unsigned __int8 *)(v282 + 652) == *((unsigned __int8 *)v297 + 176))
        {
          if (!*(_BYTE *)(v282 + 652))
            goto LABEL_433;
          v306 = *v304;
          v307 = *((_OWORD *)v297 + 8);
          v308 = *((_OWORD *)v297 + 10);
          *(_OWORD *)(v282 + 620) = *((_OWORD *)v297 + 9);
          *(_OWORD *)(v282 + 636) = v308;
          *v305 = v306;
          *(_OWORD *)(v282 + 604) = v307;
          if (!*(_BYTE *)(v282 + 440))
            goto LABEL_417;
        }
        else
        {
          if (*(_BYTE *)(v282 + 652))
          {
            *(_BYTE *)(v282 + 652) = 0;
LABEL_433:
            if (!*(_BYTE *)(v282 + 440))
              goto LABEL_417;
            goto LABEL_434;
          }
          v317 = *v304;
          v318 = *((_OWORD *)v297 + 8);
          v319 = *((_OWORD *)v297 + 10);
          *(_OWORD *)(v282 + 620) = *((_OWORD *)v297 + 9);
          *(_OWORD *)(v282 + 636) = v319;
          *v305 = v317;
          *(_OWORD *)(v282 + 604) = v318;
          *(_BYTE *)(v282 + 652) = 1;
          if (!*(_BYTE *)(v282 + 440))
            goto LABEL_417;
        }
LABEL_434:
        v309 = *(unsigned __int8 *)(v1294 + 64);
        if (!*(_BYTE *)(v1294 + 64))
          goto LABEL_417;
        v310 = *v297;
        if (*v297 == 2)
        {
          v312 = 0;
        }
        else
        {
          v311 = &task_info_out[8];
          if (v310 != 1)
            goto LABEL_440;
          v312 = 1;
        }
        v311 = &task_info_out[4 * v312];
LABEL_440:
        if (v311 - task_info_out == 8)
          goto LABEL_417;
        v313 = *(_QWORD *)(v98 + 8);
        v314 = *(_QWORD *)(v282 + 40);
        v315 = *(_QWORD *)(v313 + 1272);
        if (v315)
        {
          v316 = (uint8x8_t)vcnt_s8((int8x8_t)v315);
          v316.i16[0] = vaddlv_u8(v316);
          if (v316.u32[0] > 1uLL)
          {
            v14 = *(_QWORD *)(v282 + 40);
            if (v315 <= v314)
              v14 = v314 % v315;
          }
          else
          {
            v14 = (v315 - 1) & v314;
          }
          v320 = *(_QWORD ***)(*(_QWORD *)(v313 + 1264) + 8 * v14);
          if (v320)
          {
            v321 = *v320;
            if (*v320)
            {
              if (v316.u32[0] < 2uLL)
              {
                while (1)
                {
                  v323 = v321[1];
                  if (v323 == v314)
                  {
                    if (v321[2] == v314)
                      goto LABEL_536;
                  }
                  else if ((v323 & (v315 - 1)) != v14)
                  {
                    goto LABEL_463;
                  }
                  v321 = (_QWORD *)*v321;
                  if (!v321)
                    goto LABEL_463;
                }
              }
              do
              {
                v322 = v321[1];
                if (v322 == v314)
                {
                  if (v321[2] == v314)
                    goto LABEL_536;
                }
                else
                {
                  if (v322 >= v315)
                    v322 %= v315;
                  if (v322 != v14)
                    break;
                }
                v321 = (_QWORD *)*v321;
              }
              while (v321);
            }
          }
        }
LABEL_463:
        v321 = operator new(0x2C8uLL);
        *v321 = 0;
        v321[1] = v314;
        v321[2] = v314;
        task_info_out[0] = 1;
        *(_OWORD *)&task_info_out[8] = xmmword_208233CC0;
        *(_QWORD *)&task_info_out[24] = 0x3F1A36E2EB1C432DLL;
        *(_QWORD *)&task_info_out[32] = 10;
        *(_OWORD *)&task_info_out[40] = xmmword_208233CD0;
        *(_OWORD *)&task_info_out[56] = xmmword_208233CE0;
        sub_207DCE028((uint64_t)(v321 + 3), (size_t)task_info_out);
        v324 = (_QWORD *)(v313 + 1280);
        v325 = (float)(unint64_t)(*(_QWORD *)(v313 + 1288) + 1);
        v326 = *(float *)(v313 + 1296);
        if (!v315 || (float)(v326 * (float)v315) < v325)
        {
          v329 = (v315 & (v315 - 1)) != 0;
          if (v315 < 3)
            v329 = 1;
          v330 = v329 | (2 * v315);
          v331 = vcvtps_u32_f32(v325 / v326);
          if (v330 <= v331)
            prime = v331;
          else
            prime = v330;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v315 = *(_QWORD *)(v313 + 1272);
          if (prime <= v315)
          {
            if (prime >= v315)
              goto LABEL_513;
            v344 = vcvtps_u32_f32((float)*(unint64_t *)(v313 + 1288) / *(float *)(v313 + 1296));
            if (v315 < 3
              || (v345 = (uint8x8_t)vcnt_s8((int8x8_t)v315), v345.i16[0] = vaddlv_u8(v345), v345.u32[0] > 1uLL))
            {
              v344 = std::__next_prime(v344);
            }
            else
            {
              v346 = 1 << -(char)__clz(v344 - 1);
              if (v344 >= 2)
                v344 = v346;
            }
            if (prime <= v344)
              prime = v344;
            if (prime < v315)
            {
              if (prime)
                goto LABEL_477;
              v348 = *(void **)(v313 + 1264);
              *(_QWORD *)(v313 + 1264) = 0;
              if (v348)
                operator delete(v348);
              v315 = 0;
              *(_QWORD *)(v313 + 1272) = 0;
              v349 = -1;
              goto LABEL_514;
            }
            v315 = *(_QWORD *)(v313 + 1272);
            v349 = v315 - 1;
            if ((v315 & (v315 - 1)) == 0)
              goto LABEL_514;
            goto LABEL_526;
          }
LABEL_477:
          if (prime >> 61)
            sub_207CA3AB8();
          v333 = operator new(8 * prime);
          v334 = *(void **)(v313 + 1264);
          *(_QWORD *)(v313 + 1264) = v333;
          if (v334)
            operator delete(v334);
          v335 = 0;
          *(_QWORD *)(v313 + 1272) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v313 + 1264) + 8 * v335++) = 0;
          while (prime != v335);
          v336 = (_QWORD *)*v324;
          if (!*v324)
          {
LABEL_525:
            v315 = prime;
            v349 = prime - 1;
            if ((prime & (prime - 1)) == 0)
              goto LABEL_514;
            goto LABEL_526;
          }
          v337 = v336[1];
          v338 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v339 = v337 & v338;
            *(_QWORD *)(*(_QWORD *)(v313 + 1264) + 8 * v339) = v324;
            for (ii = (_QWORD *)*v336; *v336; ii = (_QWORD *)*v336)
            {
              v341 = ii[1] & v338;
              if (v341 == v339)
              {
                v336 = ii;
              }
              else
              {
                v342 = *(_QWORD *)(v313 + 1264);
                if (*(_QWORD *)(v342 + 8 * v341))
                {
                  *v336 = *ii;
                  v343 = 8 * v341;
                  *ii = **(_QWORD **)(*(_QWORD *)(v313 + 1264) + v343);
                  **(_QWORD **)(*(_QWORD *)(v313 + 1264) + v343) = ii;
                }
                else
                {
                  *(_QWORD *)(v342 + 8 * v341) = v336;
                  v336 = ii;
                  v339 = v341;
                }
              }
            }
            goto LABEL_525;
          }
          if (v337 < prime)
          {
            *(_QWORD *)(*(_QWORD *)(v313 + 1264) + 8 * v337) = v324;
            v347 = (_QWORD *)*v336;
            if (*v336)
              goto LABEL_520;
LABEL_512:
            v315 = prime;
LABEL_513:
            v349 = v315 - 1;
            if ((v315 & (v315 - 1)) == 0)
            {
LABEL_514:
              v14 = v349 & v314;
              v327 = *(_QWORD *)(v313 + 1264);
              v328 = *(_QWORD **)(v327 + 8 * (v349 & v314));
              if (!v328)
                goto LABEL_515;
              goto LABEL_466;
            }
LABEL_526:
            if (v315 <= v314)
            {
              v14 = v314 % v315;
              v327 = *(_QWORD *)(v313 + 1264);
              v328 = *(_QWORD **)(v327 + 8 * (v314 % v315));
              if (!v328)
                goto LABEL_515;
            }
            else
            {
              v14 = v314;
              v327 = *(_QWORD *)(v313 + 1264);
              v328 = *(_QWORD **)(v327 + 8 * v314);
              if (!v328)
                goto LABEL_515;
            }
LABEL_466:
            *v321 = *v328;
            v98 = v1296;
LABEL_534:
            *v328 = v321;
            goto LABEL_535;
          }
          v337 %= prime;
          *(_QWORD *)(*(_QWORD *)(v313 + 1264) + 8 * v337) = v324;
          v347 = (_QWORD *)*v336;
          if (!*v336)
            goto LABEL_512;
          while (1)
          {
LABEL_520:
            v352 = v347[1];
            if (v352 >= prime)
              v352 %= prime;
            if (v352 == v337)
              goto LABEL_519;
            v353 = *(_QWORD *)(v313 + 1264);
            if (*(_QWORD *)(v353 + 8 * v352))
              break;
            *(_QWORD *)(v353 + 8 * v352) = v336;
            v336 = v347;
            v347 = (_QWORD *)*v347;
            v337 = v352;
            if (!v347)
              goto LABEL_525;
          }
          *v336 = *v347;
          v351 = 8 * v352;
          *v347 = **(_QWORD **)(*(_QWORD *)(v313 + 1264) + v351);
          **(_QWORD **)(*(_QWORD *)(v313 + 1264) + v351) = v347;
          v347 = v336;
LABEL_519:
          v336 = v347;
          v347 = (_QWORD *)*v347;
          if (!v347)
            goto LABEL_525;
          goto LABEL_520;
        }
        v327 = *(_QWORD *)(v313 + 1264);
        v328 = *(_QWORD **)(v327 + 8 * v14);
        if (v328)
          goto LABEL_466;
LABEL_515:
        *v321 = *v324;
        *v324 = v321;
        *(_QWORD *)(v327 + 8 * v14) = v324;
        v98 = v1296;
        if (*v321)
        {
          v350 = *(_QWORD *)(*v321 + 8);
          if ((v315 & (v315 - 1)) != 0)
          {
            if (v350 >= v315)
              v350 %= v315;
          }
          else
          {
            v350 &= v315 - 1;
          }
          v328 = (_QWORD *)(*(_QWORD *)(v313 + 1264) + 8 * v350);
          goto LABEL_534;
        }
LABEL_535:
        ++*(_QWORD *)(v313 + 1288);
        v309 = *(unsigned __int8 *)(v1294 + 64);
LABEL_536:
        task_info_out[0] = 0;
        if (!v309)
          goto LABEL_2090;
        v14 = v282 + 456;
        v354 = sub_207DCE250((uint64_t)(v321 + 3), (float32x2_t *)(v282 + 456), (float32x2_t *)v1294, task_info_out);
        if (!task_info_out[0])
          goto LABEL_417;
        if (!*(_BYTE *)(v1294 + 64))
LABEL_2090:
          sub_207CA2A4C();
        if (!*(_BYTE *)(v282 + 1024))
        {
          v355.i64[0] = *(_QWORD *)(v1294 + 48);
          v355.i32[2] = *(_DWORD *)(v1294 + 56);
          v359 = *(float32x2_t *)(v1294 + 32);
          v357.i64[0] = *(_QWORD *)(v1294 + 16);
          v357.i32[2] = *(_DWORD *)(v1294 + 24);
          v356.i32[0] = *(_DWORD *)(v1294 + 40);
          v358.i64[0] = *(_QWORD *)v1294;
          v358.i32[2] = *(_DWORD *)(v1294 + 8);
          if (!*(_BYTE *)(v282 + 652))
            *(_BYTE *)(v282 + 652) = 1;
          v284 = *(float32x4_t *)(v282 + 504);
          v285 = v354;
          v286.i64[0] = vzip1q_s32(v358, v357).u64[0];
          v287 = (int8x16_t)vnegq_f32(v355);
          v286.i64[1] = v359.u32[0];
          v288 = (int8x16_t)vtrn2q_s32(v358, v357);
          v288.i32[2] = v359.i32[1];
          v289 = (int8x16_t)vzip2q_s32(v358, v357);
          *(float32x2_t *)v290.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v286.f32, *(float *)v287.i32), *(float32x2_t *)v288.i8, *(float32x2_t *)v355.f32, 1), *(float32x2_t *)v289.i8, v355, 2);
          v289.i32[2] = v356.i32[0];
          v291 = vextq_s8(vextq_s8(v288, v288, 0xCuLL), v289, 8uLL);
          v290.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v359, *(float32x2_t *)v287.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v359, 1), *(float32x2_t *)v355.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v287, v287, 8uLL), v356).u32[0]);
          v292.i32[3] = 0;
          v292.i32[0] = v288.i32[0];
          *(uint64_t *)((char *)v292.i64 + 4) = v291.i64[0];
          v293 = vmulq_n_f32(v284, v285);
          v294.i64[0] = v291.i64[1];
          v294.i64[1] = vdupq_laneq_s32((int32x4_t)v289, 2).u32[0];
          v295 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v286, COERCE_FLOAT(*(_OWORD *)(v282 + 472))), v292, *(float32x2_t *)(v282 + 472), 1), v294, *(float32x4_t *)(v282 + 472), 2), v290, *(float32x4_t *)(v282 + 472), 3);
          v296 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v286, COERCE_FLOAT(*(_OWORD *)(v282 + 488))), v292, *(float32x2_t *)(v282 + 488), 1), v294, *(float32x4_t *)(v282 + 488), 2), v290, *(float32x4_t *)(v282 + 488), 3);
          *(float32x4_t *)(v282 + 588) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v286, COERCE_FLOAT(*(_OWORD *)v14)), v292, *(float32x2_t *)v14, 1), v294, *(float32x4_t *)v14, 2), v290, *(float32x4_t *)v14, 3);
          *(float32x4_t *)(v282 + 604) = v295;
          *(float32x4_t *)(v282 + 620) = v296;
          *(float32x4_t *)(v282 + 636) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v286, v293.f32[0]), v292, *(float32x2_t *)v293.f32, 1), v294, v293, 2), v290, v284, 3);
        }
        *(double *)(v282 + 1016) = v354;
        *(_BYTE *)(v282 + 1024) = 1;
LABEL_417:
        v282 += 1344;
      }
      v281 = (_QWORD *)*v1283;
    }
    while (*v1283);
  }
  sub_207D41AE8((uint64_t)&v1313);
  v99 = v1298;
  v360.n128_f64[0] = v1320;
  sub_207DF7198(*(_QWORD *)(*(_QWORD *)(v98 + 8) + 1304), (uint64_t)&v1313, v1294, v360, v361);
  v362 = *(_QWORD *)(v98 + 8);
  v1268 = v1320;
  sub_207D41AE8((uint64_t)&v1313);
  if (*(_QWORD *)(v1287 + 8) == *(_QWORD *)v1287
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectPipeline.cpp", 645, (uint64_t)"pixel_buffers.size() >= 1u", 26, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (*(_BYTE *)(v1269 + 24))
  {
    *(_QWORD *)task_info_out = **(_QWORD **)v1269;
    *(_QWORD *)&task_info_out[8] = 1;
  }
  else
  {
    task_info_out[0] = 0;
    task_info_out[8] = 0;
  }
  sub_207D2AA4C(*(_QWORD *)(v362 + 1104), (uint64_t *)v1287, (int8x8_t *)(v362 + 1120), (__int128 *)task_info_out, v1266, a8, (uint64_t)v1341, v1268);
  if (!v1343)
  {
    sub_207CCBAD4((std::__shared_weak_count_vtbl **)&v1311, (uint64_t)v1341);
    goto LABEL_1432;
  }
  v363 = sub_207D08310((uint64_t)v1341);
  v364 = *(_QWORD **)(v363 + 32);
  if (!v364)
    goto LABEL_557;
  v365 = 0;
  do
  {
    v365 -= 0x30C30C30C30C30C3 * ((uint64_t)(v364[4] - v364[3]) >> 6);
    v364 = (_QWORD *)*v364;
  }
  while (v364);
  if (!v365)
  {
LABEL_557:
    v1311 = 0uLL;
    goto LABEL_1432;
  }
  v366 = *(_QWORD *)(*(_QWORD *)(v362 + 1104) + 1696);
  v367 = *(_QWORD *)a4;
  v368 = *(uint64_t **)(v362 + 1632);
  if (v368 == *(uint64_t **)(v362 + 1640))
  {
    v370 = 0;
    v1340 = 0;
    v1339 = 0;
    v371 = (_QWORD *)v1287;
  }
  else
  {
    v370 = *v368;
    v369 = (std::__shared_weak_count *)v368[1];
    v1339 = v370;
    v1340 = v369;
    v371 = (_QWORD *)v1287;
    if (v369)
    {
      v372 = (unint64_t *)&v369->__shared_owners_;
      do
        v373 = __ldxr(v372);
      while (__stxr(v373 + 1, v372));
    }
  }
  v1293.i64[0] = sub_20815C130(*v371 + 24 * v366);
  v532 = sub_20815C3B0(*v371 + 24 * v366);
  v1279 = v370;
  v1290 = v366;
  v1307 = v362;
  v538.columns[0].i64[0] = v1293.i64[0];
  v538.columns[0].i64[1] = v532;
  v539 = vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v538.columns[0]));
  if (v370)
  {
    *(_OWORD *)v1336 = 0u;
    v1337 = 0u;
    v1335 = 0u;
    v1338 = 1065353216;
    v540 = *(_QWORD **)(v363 + 32);
    if (v540)
    {
      v362 = (uint64_t)&v1345 + 4;
      v541 = v370;
      do
      {
        v542 = (float32x2_t *)v540[3];
        v543 = (float32x2_t *)v540[4];
        v1284 = v540;
        if (v542 != v543)
        {
          v544 = v542 + 16;
          do
          {
            while (1)
            {
              v546 = v532;
              sub_207D7FBEC(v544, v541, v1293.u64[0], v532, (float32x2_t *)task_info_out, (int8x16_t)v538.columns[2], v533, v536);
              v541 = v1339;
              *(float32x2_t *)&v1390 = vmul_f32(v544[-3], v539);
              sub_207DA5D14((uint64_t)&v1390, (float *)&v1390 + 1, v1339, *(double *)&v1390, v547, v548, v549, v550, v551, v552);
              *(float32x2_t *)&v1390 = vdiv_f32(*(float32x2_t *)&v1390, v539);
              v553 = *(float *)&task_info_out[4];
              v554 = *(float *)task_info_out;
              v555 = *(float *)&task_info_out[12];
              v556 = *(float *)&task_info_out[8];
              v557 = v544[-4].f32[1];
              v558 = v544[-2].f32[0];
              *(float32x2_t *)v1332 = v544[-12];
              LODWORD(v1328) = *(_DWORD *)&task_info_out[4];
              LODWORD(v1321) = *(_DWORD *)task_info_out;
              LODWORD(v1334) = *(_DWORD *)&task_info_out[12];
              v1347 = *(float *)&task_info_out[8];
              v1346 = v557;
              v1301 = v1390;
              v1345 = v1390;
              v1344 = v558;
              v559 = (void *)sub_207DF3DC4((int8x8_t *)&v1335, *(unint64_t *)v1332);
              __dst = v559;
              *(_QWORD *)task_info_outCnt = v1332;
              v560 = sub_207DF64D4((uint64_t)v1336, (unint64_t *)v1332, (uint64_t)&unk_20822AD51, (uint64_t **)task_info_outCnt);
              v561 = v560;
              v562 = v1335;
              *(_QWORD *)&v1335 = v1335 + 1;
              *(_QWORD *)task_info_outCnt = v562;
              v563 = v560[4];
              if (v563 < v560[5])
                break;
              v532 = v546;
              v560[4] = sub_207DF49A4(v560 + 3, (uint64_t *)v1332, (uint64_t *)task_info_outCnt, (uint64_t *)&__dst, (float *)&v1328, (float *)&v1321, (float *)&v1334, &v1347, &v1346, (float *)&v1345 + 1, (float *)&v1345, &v1344);
              v545 = v544 + 152;
              v544 += 168;
              if (v545 == v543)
                goto LABEL_819;
            }
            sub_207DECB38(v560[4], *(uint64_t *)v1332, v562, (uint64_t)v559, v553, v554, v555, v556, v557, *((float *)&v1301 + 1), *(float *)&v1301, v558);
            v561[4] = v563 + 1344;
            v532 = v546;
            v561[4] = v563 + 1344;
            v564 = v544 + 152;
            v544 += 168;
          }
          while (v564 != v543);
        }
LABEL_819:
        v540 = (_QWORD *)*v1284;
      }
      while (*v1284);
    }
  }
  else
  {
    v1335 = *(_OWORD *)v363;
    sub_207D08700((uint64_t)v1336, v363 + 16);
  }
  v565 = (_QWORD *)v1337;
  v566 = v1307;
  if ((_QWORD)v1337)
  {
    v362 = 0xCF3CF3CF3CF3CF3DLL;
    do
    {
      v567 = v565[3];
      v568 = v565[4];
      v569 = v567;
      v570 = (float32x2_t *)v567;
      if (v567 != v568)
      {
        do
        {
          v571 = v570[16];
          v572 = v570[17];
          v573 = vadd_f32(vmul_f32(vadd_f32(v571, v572), (float32x2_t)0x3F0000003F000000), (float32x2_t)0xBF000000BF000000);
          v574 = sqrtf(vaddv_f32(vmul_f32(v573, v573)));
          v575 = vsub_f32(v572, v571);
          v576 = vmul_lane_f32(v575, v575, 1).f32[0];
          if (v576 > 1.0)
            v576 = 1.0;
          v577 = 1.0 - v574 + v576;
          if (v577 >= 0.0)
            v578 = v577 * 0.5;
          else
            v578 = 0.0;
          v570[14].f32[1] = v578;
          v570 += 168;
        }
        while (v570 != (float32x2_t *)v568);
        v569 = v568;
      }
      v579 = 126 - 2 * __clz(0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v569 - v567) >> 6));
      if (v569 == v567)
        v580 = 0;
      else
        v580 = v579;
      sub_207DF4BB4(v567, v569, v580, 1);
      v565 = (_QWORD *)*v565;
    }
    while (v565);
  }
  v538.columns[0] = (simd_float3)xmmword_208233CF0;
  v1334 = xmmword_208233CF0;
  if (v1279)
  {
    sub_207D7FBEC((float32x2_t *)&v1334, v1279, v1293.u64[0], v532, (float32x2_t *)task_info_out, (int8x16_t)v538.columns[2], v533, v536);
    v538.columns[0] = *(simd_float3 *)task_info_out;
    v1334 = *(_OWORD *)task_info_out;
  }
  v1267 = v532;
  v1272 = (float *)(v367 + 36 * v1290);
  v581 = (_QWORD *)v1337;
  v98 = v1296;
  if (!(_QWORD)v1337)
    goto LABEL_1144;
  v582 = 0;
  v1302 = (uint64_t *)(v1307 + 1176);
  v1270 = (_QWORD *)(v1307 + 1192);
  v1273 = v539;
  while (2)
  {
    v583 = v581[3];
    v584 = v581[4];
    v1263 = v581;
    if (v583 == v584)
      goto LABEL_845;
    while (2)
    {
      while (2)
      {
        while (*(_QWORD *)(v566 + 1200))
        {
          v585 = *(int8x8_t *)(v566 + 1184);
          if (v585)
          {
            v586 = *(_QWORD *)(v583 + 32);
            *(int8x8_t *)v538.columns[0].f32 = vcnt_s8(v585);
            v538.columns[0].i16[0] = vaddlv_u8(*(uint8x8_t *)v538.columns[0].f32);
            if (v538.columns[0].u32[0] > 1uLL)
            {
              v587 = *(_QWORD *)(v583 + 32);
              if (v586 >= *(_QWORD *)&v585)
                v587 = v586 % *(_QWORD *)&v585;
            }
            else
            {
              v587 = (*(_QWORD *)&v585 - 1) & v586;
            }
            v588 = *(_QWORD **)(*v1302 + 8 * v587);
            if (v588)
            {
              v589 = (_QWORD *)*v588;
              if (v589)
              {
                if (v538.columns[0].u32[0] < 2uLL)
                {
                  v590 = *(_QWORD *)&v585 - 1;
                  while (1)
                  {
                    v592 = v589[1];
                    if (v592 == v586)
                    {
                      if (v589[2] == v586)
                        goto LABEL_872;
                    }
                    else if ((v592 & v590) != v587)
                    {
                      goto LABEL_849;
                    }
                    v589 = (_QWORD *)*v589;
                    if (!v589)
                      goto LABEL_849;
                  }
                }
                do
                {
                  v591 = v589[1];
                  if (v591 == v586)
                  {
                    if (v589[2] == v586)
                      goto LABEL_872;
                  }
                  else
                  {
                    if (v591 >= *(_QWORD *)&v585)
                      v591 %= *(_QWORD *)&v585;
                    if (v591 != v587)
                      break;
                  }
                  v589 = (_QWORD *)*v589;
                }
                while (v589);
              }
            }
          }
LABEL_849:
          v583 += 1344;
          if (v583 == v584)
            goto LABEL_845;
        }
LABEL_872:
        v1285 = *(float *)(v583 + 128);
        v593 = fmaxf(v1285, *(float *)&v1334);
        v1275 = *(float *)(v583 + 140);
        v1276 = *(float *)(v583 + 132);
        v594 = fmaxf(v1276, *((float *)&v1334 + 1));
        v1280 = *(float *)(v583 + 136);
        v595 = fminf(v1280, *((float *)&v1334 + 2));
        v596 = fminf(v1275, *((float *)&v1334 + 3));
        if (v593 < v595 && v594 < v596)
        {
          if (v593 <= v595)
            v601 = v595;
          else
            v601 = v593;
          if (v593 <= v595)
            v600 = v593;
          else
            v600 = v595;
          if (v594 > v596)
            v602 = v594;
          else
            v602 = v596;
          if (v594 > v596)
            v599 = v596;
          else
            v599 = v594;
          v603 = *(_QWORD *)(v583 + 32);
          v604 = v1315;
          if (!*(_QWORD *)&v1315)
            goto LABEL_1024;
        }
        else
        {
          v598 = atomic_load((unsigned __int8 *)&qword_253E50C58);
          if ((v598 & 1) != 0 || !__cxa_guard_acquire(&qword_253E50C58))
          {
            v599 = *((float *)&qword_25452BE08 + 1);
            v600 = *(float *)&qword_25452BE08;
            v602 = *((float *)&qword_25452BE10 + 1);
            v601 = *(float *)&qword_25452BE10;
            v603 = *(_QWORD *)(v583 + 32);
            v604 = v1315;
            if (!*(_QWORD *)&v1315)
              goto LABEL_1024;
          }
          else
          {
            qword_25452BE08 = 0;
            qword_25452BE10 = 0;
            __cxa_guard_release(&qword_253E50C58);
            v599 = *((float *)&qword_25452BE08 + 1);
            v600 = *(float *)&qword_25452BE08;
            v602 = *((float *)&qword_25452BE10 + 1);
            v601 = *(float *)&qword_25452BE10;
            v603 = *(_QWORD *)(v583 + 32);
            v604 = v1315;
            if (!*(_QWORD *)&v1315)
              goto LABEL_1024;
          }
        }
        *(int8x8_t *)v538.columns[0].f32 = vcnt_s8(v604);
        v538.columns[0].i16[0] = vaddlv_u8(*(uint8x8_t *)v538.columns[0].f32);
        v605 = v538.columns[0].u32[0];
        if (v538.columns[0].u32[0] > 1uLL)
        {
          v606 = v603;
          if (*(_QWORD *)&v604 <= v603)
            v606 = v603 % *(_QWORD *)&v604;
        }
        else
        {
          v606 = (*(_QWORD *)&v604 - 1) & v603;
        }
        v607 = (_QWORD *)*((_QWORD *)v1314 + v606);
        v608 = 0.0;
        if (!v607 || (v609 = (_QWORD *)*v607) == 0)
        {
          v612 = 0;
          v613 = 0.0;
          if (v538.columns[0].u32[0] > 1uLL)
            goto LABEL_913;
          goto LABEL_918;
        }
        if (v538.columns[0].u32[0] < 2uLL)
        {
          while (1)
          {
            v611 = v609[1];
            if (v611 == v603)
            {
              if (v609[2] == v603)
                goto LABEL_934;
            }
            else if ((v611 & (*(_QWORD *)&v604 - 1)) != v606)
            {
              goto LABEL_911;
            }
            v609 = (_QWORD *)*v609;
            if (!v609)
              goto LABEL_911;
          }
        }
        while (2)
        {
          v610 = v609[1];
          if (v610 != v603)
          {
            if (v610 >= *(_QWORD *)&v604)
              v610 %= *(_QWORD *)&v604;
            if (v610 != v606)
            {
LABEL_911:
              v612 = 0;
              v613 = 0.0;
              v608 = 0.0;
              if (!*(_QWORD *)&v604)
                goto LABEL_1024;
              goto LABEL_912;
            }
            goto LABEL_901;
          }
          if (v609[2] != v603)
          {
LABEL_901:
            v609 = (_QWORD *)*v609;
            if (!v609)
              goto LABEL_911;
            continue;
          }
          break;
        }
LABEL_934:
        v620 = v609[3];
        v621 = v609[4];
        if (v620 == v621)
        {
          v612 = 0;
          v613 = 0.0;
          v608 = 0.0;
          v98 = v1296;
          if (!*(_QWORD *)&v604)
            goto LABEL_1024;
        }
        else
        {
          v612 = 0;
          v1274 = (float)(v602 - v599) * (float)(v601 - v600);
          v613 = 0.0;
          v608 = 0.0;
          v1271 = v600;
          do
          {
            if (*(_BYTE *)(v620 + 788))
              v622 = *(_BYTE *)(v1294 + 64) == 0;
            else
              v622 = 1;
            if (v622)
            {
              v538.columns[1] = *(simd_float3 *)(v620 + 488);
              v538.columns[0] = *(simd_float3 *)(v620 + 504);
              v625 = *(float32x4_t *)(v620 + 456);
              v538.columns[2] = *(simd_float3 *)(v620 + 472);
            }
            else
            {
              v534 = *(float32x4_t *)(v620 + 756);
              v535 = *(float32x4_t *)(v620 + 772);
              v536 = *(float64x2_t *)v1294;
              v623 = *(float32x4_t *)(v1294 + 16);
              v624 = *(float32x4_t *)(v1294 + 32);
              v537 = *(float32x4_t *)(v1294 + 48);
              v625 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)(v620 + 724))), v623, *(float32x2_t *)(v620 + 724), 1), v624, *(float32x4_t *)(v620 + 724), 2), v537, *(float32x4_t *)(v620 + 724), 3);
              v538.columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)(v620 + 740))), v623, *(float32x2_t *)(v620 + 740), 1), v624, *(float32x4_t *)(v620 + 740), 2), v537, *(float32x4_t *)(v620 + 740), 3);
              v538.columns[1] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, v534.f32[0]), v623, *(float32x2_t *)v534.f32, 1), v624, v534, 2), v537, v534, 3);
              v538.columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, v535.f32[0]), v623, *(float32x2_t *)v535.f32, 1), v624, v535, 2), v537, v535, 3);
            }
            v626 = (float32x2_t *)(*(_QWORD *)(v566 + 1656) + (v1290 << 6));
            *(float32x2_t *)v534.f32 = *v626;
            v534.i32[2] = v626[1].i32[0];
            *(float32x2_t *)v535.f32 = v626[2];
            v535.i32[2] = v626[3].i32[0];
            LODWORD(v536.f64[0]) = v626[5].i32[0];
            v627.i64[0] = vzip1q_s32((int32x4_t)v534, (int32x4_t)v535).u64[0];
            *(float32x2_t *)v537.f32 = v626[6];
            v537.i32[2] = v626[7].i32[0];
            v628 = (int8x16_t)vnegq_f32(v537);
            v629 = (int8x16_t)vtrn2q_s32((int32x4_t)v534, (int32x4_t)v535);
            v629.i32[2] = HIDWORD(*(_QWORD *)&v626[4]);
            v630 = (int8x16_t)vzip2q_s32((int32x4_t)v534, (int32x4_t)v535);
            *(float32x2_t *)v631.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v627.f32, *(float *)v628.i32), *(float32x2_t *)v629.i8, *(float32x2_t *)v537.f32, 1), *(float32x2_t *)v630.i8, v537, 2);
            v630.i32[2] = LODWORD(v536.f64[0]);
            v535 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v630, 2);
            v631.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v626[4], *(float32x2_t *)v628.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v626[4], 1), *(float32x2_t *)v537.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v628, v628, 8uLL), *(float32x2_t *)&v536.f64[0]).u32[0]);
            LODWORD(v536.f64[0]) = v629.i32[0];
            v632 = vextq_s8(vextq_s8(v629, v629, 0xCuLL), v630, 8uLL);
            HIDWORD(v536.f64[0]) = v632.i32[0];
            *(_QWORD *)&v536.f64[1] = v632.u32[1];
            v633.i64[0] = v632.i64[1];
            v633.i64[1] = v535.u32[0];
            v627.i64[1] = *(_QWORD *)&v626[4];
            v534 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v627, v625.f32[0]), (float32x4_t)v536, *(float32x2_t *)v625.f32, 1), v633, v625, 2), v631, v625, 3);
            v634 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v627, v538.columns[2].f32[0]), (float32x4_t)v536, *(float32x2_t *)v538.columns[2].f32, 1), v633, (float32x4_t)v538.columns[2], 2), v631, (float32x4_t)v538.columns[2], 3);
            v538.columns[2] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v627, v538.columns[1].f32[0]), (float32x4_t)v536, *(float32x2_t *)v538.columns[1].f32, 1), v633, (float32x4_t)v538.columns[1], 2), v631, (float32x4_t)v538.columns[1], 3);
            v538.columns[1] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v627, v538.columns[0].f32[0]), (float32x4_t)v536, *(float32x2_t *)v538.columns[0].f32, 1), v633, (float32x4_t)v538.columns[0], 2), v631, (float32x4_t)v538.columns[0], 3);
            *(float32x4_t *)task_info_out = v534;
            *(float32x4_t *)&task_info_out[16] = v634;
            *(simd_float3 *)&task_info_out[32] = v538.columns[2];
            *(simd_float3 *)&task_info_out[48] = v538.columns[1];
            if (**(_DWORD **)(v620 + 1104))
            {
              v635 = v608;
              v636 = v613;
              *(_QWORD *)v1332 = 8;
              *(_QWORD *)&v1332[8] = v620 + 168;
              __dst = 0;
              v1324 = 0;
              sub_207DE48FC((uint64_t)v1272, (float32x2_t *)task_info_out, (unint64_t *)v1332, 1, (uint64_t *)&__dst, (int8x16_t *)task_info_outCnt);
              v637 = *(float32x2_t *)task_info_outCnt;
              v638 = *(float32x2_t *)&task_info_outCnt[2];
              v639 = v1324;
              v613 = v636;
              v608 = v635;
              v600 = v1271;
              if (v1324)
              {
                v640 = (unint64_t *)&v1324->__shared_owners_;
                do
                  v641 = __ldaxr(v640);
                while (__stlxr(v641 - 1, v640));
                if (!v641)
                {
                  ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
                  std::__shared_weak_count::__release_weak(v639);
                  v600 = v1271;
                  v608 = v635;
                  v613 = v636;
                }
              }
            }
            else
            {
              v637 = *(float32x2_t *)(v620 + 128);
              v638 = *(float32x2_t *)(v620 + 136);
            }
            v642 = vdiv_f32(v637, v539);
            v643 = vdiv_f32(v638, v539);
            v644 = (int8x8_t)vcgt_f32(v642, v643);
            v645 = (float32x2_t)vbsl_s8(v644, (int8x8_t)v642, (int8x8_t)v643);
            *(float32x2_t *)v538.columns[0].f32 = vmaxnm_f32((float32x2_t)vbsl_s8(v644, (int8x8_t)v643, (int8x8_t)v642), *(float32x2_t *)&v1334);
            *(float32x2_t *)v538.columns[1].f32 = vminnm_f32(v645, *(float32x2_t *)((char *)&v1334 + 8));
            *(int32x2_t *)v538.columns[2].f32 = vcgt_f32(*(float32x2_t *)v538.columns[1].f32, *(float32x2_t *)v538.columns[0].f32);
            if ((v538.columns[2].i32[0] & v538.columns[2].i32[1] & 1) != 0)
            {
              v646 = v538.columns[0].i32[0];
              *(int32x2_t *)v538.columns[2].f32 = vcgt_f32(*(float32x2_t *)v538.columns[0].f32, *(float32x2_t *)v538.columns[1].f32);
              if ((v538.columns[2].i8[0] & 1) != 0)
                v647 = v538.columns[0].i32[0];
              else
                v647 = v538.columns[1].i32[0];
              if ((v538.columns[2].i8[0] & 1) != 0)
                v646 = v538.columns[1].i32[0];
              if ((v538.columns[2].i8[4] & 1) != 0)
                v648 = v538.columns[0].f32[1];
              else
                v648 = v538.columns[1].f32[1];
              if ((v538.columns[2].i8[4] & 1) != 0)
                v649 = v538.columns[1].f32[1];
              else
                v649 = v538.columns[0].f32[1];
            }
            else
            {
              v650 = atomic_load((unsigned __int8 *)&qword_253E50C58);
              if ((v650 & 1) == 0)
              {
                v664 = v613;
                v665 = v608;
                v666 = __cxa_guard_acquire(&qword_253E50C58);
                v600 = v1271;
                v608 = v665;
                v613 = v664;
                if (v666)
                {
                  qword_25452BE08 = 0;
                  qword_25452BE10 = 0;
                  __cxa_guard_release(&qword_253E50C58);
                  v600 = v1271;
                  v608 = v665;
                  v613 = v664;
                }
              }
              v646 = qword_25452BE08;
              v649 = *((float *)&qword_25452BE08 + 1);
              v647 = qword_25452BE10;
              v648 = *((float *)&qword_25452BE10 + 1);
            }
            v651 = *(float *)&v646;
            v652 = *(float *)&v647;
            v653 = fmaxf(v600, *(float *)&v646);
            v654 = fmaxf(v599, v649);
            v655 = fminf(v601, *(float *)&v647);
            v656 = fminf(v602, v648);
            if (v653 < v655 && v654 < v656)
            {
              if (v653 <= v655)
                v659 = v655;
              else
                v659 = v653;
              if (v653 > v655)
                v653 = v655;
              if (v654 <= v656)
              {
                v660 = v656;
                v656 = v654;
              }
              else
              {
                v660 = v654;
              }
            }
            else
            {
              v658 = atomic_load((unsigned __int8 *)&qword_253E50C58);
              if ((v658 & 1) == 0)
              {
                v1262 = v613;
                v667 = v608;
                v668 = __cxa_guard_acquire(&qword_253E50C58);
                v600 = v1271;
                v608 = v667;
                v613 = v1262;
                if (v668)
                {
                  qword_25452BE08 = 0;
                  qword_25452BE10 = 0;
                  __cxa_guard_release(&qword_253E50C58);
                  v600 = v1271;
                  v608 = v667;
                  v613 = v1262;
                }
              }
              v656 = *((float *)&qword_25452BE08 + 1);
              v653 = *(float *)&qword_25452BE08;
              v660 = *((float *)&qword_25452BE10 + 1);
              v659 = *(float *)&qword_25452BE10;
            }
            v661 = (float)(v660 - v656) * (float)(v659 - v653);
            v662 = v661 / v1274;
            v663 = v661 / (float)((float)(v652 - v651) * (float)(v648 - v649));
            if ((float)(v662 + v663) > (float)(v613 + v608))
            {
              v612 = *(_QWORD *)(v620 + 40);
              v613 = v662;
              v608 = v663;
            }
            v620 += 1344;
            v539 = v1273;
          }
          while (v620 != v621);
          v603 = *(_QWORD *)(v583 + 32);
          v604 = v1315;
          v98 = v1296;
          if (!*(_QWORD *)&v1315)
            goto LABEL_1024;
        }
LABEL_912:
        *(int8x8_t *)v538.columns[0].f32 = vcnt_s8(v604);
        v538.columns[0].i16[0] = vaddlv_u8(*(uint8x8_t *)v538.columns[0].f32);
        v605 = v538.columns[0].u32[0];
        if (v538.columns[0].u32[0] > 1uLL)
        {
LABEL_913:
          v614 = v603;
          if (*(_QWORD *)&v604 <= v603)
            v614 = v603 % *(_QWORD *)&v604;
          v615 = (_QWORD *)*((_QWORD *)v1314 + v614);
          if (!v615)
            goto LABEL_1024;
          goto LABEL_919;
        }
LABEL_918:
        v614 = (*(_QWORD *)&v604 - 1) & v603;
        v615 = (_QWORD *)*((_QWORD *)v1314 + v614);
        if (!v615)
          goto LABEL_1024;
LABEL_919:
        v616 = (_QWORD *)*v615;
        if (!v616)
          goto LABEL_1024;
        if (v605 < 2)
        {
          v617 = *(_QWORD *)&v604 - 1;
          while (1)
          {
            v619 = v616[1];
            if (v619 == v603)
            {
              if (v616[2] == v603)
                goto LABEL_984;
            }
            else if ((v619 & v617) != v614)
            {
              goto LABEL_1024;
            }
            v616 = (_QWORD *)*v616;
            if (!v616)
              goto LABEL_1024;
          }
        }
        while (2)
        {
          v618 = v616[1];
          if (v618 != v603)
          {
            if (v618 >= *(_QWORD *)&v604)
              v618 %= *(_QWORD *)&v604;
            if (v618 != v614)
              goto LABEL_1024;
            goto LABEL_923;
          }
          if (v616[2] != v603)
          {
LABEL_923:
            v616 = (_QWORD *)*v616;
            if (!v616)
              goto LABEL_1024;
            continue;
          }
          break;
        }
LABEL_984:
        v669 = v616[3];
        v670 = v616[4];
        if (v669 == v670)
          goto LABEL_1024;
        v671 = 0;
        v672 = v613 > 0.0;
        if (v608 > 0.0)
          v672 = 1;
        v538.columns[1].f32[0] = v1285;
        if (v1285 <= v1280)
          v538.columns[0].f32[0] = v1280;
        else
          v538.columns[0].f32[0] = v1285;
        if (v1285 > v1280)
          v538.columns[1].f32[0] = v1280;
        v673 = v1276;
        if (v1276 <= v1275)
          v538.columns[2].f32[0] = v1275;
        else
          v538.columns[2].f32[0] = v1276;
        if (v1276 > v1275)
          v673 = v1275;
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)(v669 + 40) != v612)
              goto LABEL_999;
            if (v671 || (v674 = *(float *)(v566 + 972), v613 > v674) || v608 > v674)
            {
              v675 = *(_QWORD *)(v669 + 1104);
              if (*(_DWORD *)v675 != 7)
              {
                v671 = 1;
                goto LABEL_999;
              }
              v671 = 1;
              goto LABEL_1006;
            }
            if (v672 && *(float *)(v669 + 92) < *(float *)(v566 + 1056))
            {
              v675 = *(_QWORD *)(v669 + 1104);
              if (*(_DWORD *)v675 == 6)
              {
                v677 = 0;
LABEL_1014:
                v676 = &task_info_out[4 * v677];
              }
              else
              {
                v676 = &task_info_out[8];
                if (*(_DWORD *)v675 == 3)
                {
                  v677 = 1;
                  goto LABEL_1014;
                }
              }
              if (v676 - task_info_out == 8)
              {
                v671 = 0;
                v669 += 1344;
                if (v669 == v670)
                  goto LABEL_1022;
                continue;
              }
              v671 = 0;
LABEL_1006:
              *(_DWORD *)v675 = 0;
              *(_QWORD *)(v675 + 8) = 0;
              *(_DWORD *)(v669 + 100) = *(_DWORD *)(v583 + 100);
              *(_DWORD *)(v669 + 128) = v538.columns[1].i32[0];
              *(float *)(v669 + 132) = v673;
              *(_DWORD *)(v669 + 136) = v538.columns[0].i32[0];
              *(_DWORD *)(v669 + 140) = v538.columns[2].i32[0];
              goto LABEL_999;
            }
            break;
          }
          v671 = 0;
LABEL_999:
          v669 += 1344;
          if (v669 != v670)
            continue;
          break;
        }
        if (v671)
          goto LABEL_849;
LABEL_1022:
        v603 = *(_QWORD *)(v583 + 32);
LABEL_1024:
        v678 = sub_207D42F0C((_QWORD *)v566, &v1313, v603, 0, v582);
        v679 = 0;
        if ((v678 & 1) == 0)
        {
          v683 = *(_QWORD *)(v583 + 32);
          v680 = (_QWORD *)v1307;
          goto LABEL_1067;
        }
        v680 = (_QWORD *)v1307;
        v681 = *(int **)(v1307 + 696);
        v682 = *(int **)(v1307 + 704);
        v683 = *(_QWORD *)(v583 + 32);
        if (v681 != v682 && *(_QWORD *)&v1315)
        {
          v679 = 0;
          v684 = (uint8x8_t)vcnt_s8(v1315);
          v684.i16[0] = vaddlv_u8(v684);
          v685 = v684.u32[0] < 2uLL;
          if (v684.u32[0] >= 2uLL)
            v686 = -1;
          else
            v686 = *(_QWORD *)&v1315 - 1;
          if (*(_QWORD *)&v1315 > v683)
            v685 = 1;
          v687 = v686 & v683;
LABEL_1034:
          v688 = v687;
          if (!v685)
            v688 = v683 % *(_QWORD *)&v1315;
          v689 = (_QWORD *)*((_QWORD *)v1314 + v688);
          if (!v689)
            goto LABEL_1033;
          v690 = (_QWORD *)*v689;
          if (!*v689)
            goto LABEL_1033;
          v691 = *v681;
          if (v684.u32[0] < 2uLL)
          {
            while (1)
            {
              v692 = v690[1];
              if (v692 == v683)
              {
                if (v690[2] == v683)
                  goto LABEL_1052;
              }
              else if ((v692 & (*(_QWORD *)&v1315 - 1)) != v688)
              {
                goto LABEL_1033;
              }
              v690 = (_QWORD *)*v690;
              if (!v690)
                goto LABEL_1033;
            }
          }
          while (1)
          {
            v693 = v690[1];
            if (v693 == v683)
            {
              if (v690[2] == v683)
              {
LABEL_1052:
                v694 = v690[3];
                v695 = v690[4];
                if (v694 != v695)
                {
                  v696 = v695 - v694 - 1344;
                  if (v696 < 0x540)
                  {
                    v697 = v694;
                    goto LABEL_1062;
                  }
                  v698 = 0;
                  v699 = 0;
                  v700 = (((v696 >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64) + 1;
                  v697 = v694 + 1344 * (v700 & 0x7FFFFFFFFFFFFELL);
                  v362 = v700 & 0x7FFFFFFFFFFFFELL;
                  do
                  {
                    if (**(_DWORD **)(v694 + 1104) == v691)
                    {
                      ++v582;
                      ++v679;
                    }
                    if (**(_DWORD **)(v694 + 2448) == v691)
                    {
                      ++v698;
                      ++v699;
                    }
                    v694 += 2688;
                    v362 -= 2;
                  }
                  while (v362);
                  v679 += v699;
                  v582 += v698;
                  if (v700 != (v700 & 0x7FFFFFFFFFFFFELL))
                  {
                    do
                    {
LABEL_1062:
                      if (**(_DWORD **)(v697 + 1104) == v691)
                      {
                        ++v582;
                        ++v679;
                      }
                      v697 += 1344;
                    }
                    while (v697 != v695);
                  }
                }
LABEL_1033:
                if (++v681 != v682)
                  goto LABEL_1034;
                break;
              }
            }
            else
            {
              if (v693 >= *(_QWORD *)&v1315)
                v693 %= *(_QWORD *)&v1315;
              if (v693 != v688)
                goto LABEL_1033;
            }
            v690 = (_QWORD *)*v690;
            if (!v690)
              goto LABEL_1033;
          }
        }
LABEL_1067:
        if ((sub_207D42F0C(v680, &v1313, v683, v679, v582) & 1) != 0)
        {
          v98 = v1296;
          v566 = v1307;
          goto LABEL_849;
        }
        v701 = sub_207DF45FC((int8x8_t *)&v1313, *(_QWORD *)(v583 + 32), v1276, v1285, v1275, v1280, *(float *)(v583 + 100), *(float *)(v583 + 108), *(float *)(v583 + 104), *(float *)(v583 + 112));
        v702 = v701;
        v703 = *(_QWORD *)(v701 + 32);
        v704 = *(_QWORD *)(v1307 + 1184);
        if (v704)
        {
          v705 = (uint8x8_t)vcnt_s8((int8x8_t)v704);
          v705.i16[0] = vaddlv_u8(v705);
          if (v705.u32[0] > 1uLL)
          {
            v362 = *(_QWORD *)(v701 + 32);
            if (v704 <= v703)
              v362 = v703 % v704;
          }
          else
          {
            v362 = (v704 - 1) & v703;
          }
          v706 = *(_QWORD ***)(*v1302 + 8 * v362);
          if (v706)
          {
            v707 = *v706;
            if (*v706)
            {
              if (v705.u32[0] < 2uLL)
              {
                while (1)
                {
                  v709 = v707[1];
                  if (v709 == v703)
                  {
                    if (v707[2] == v703)
                      goto LABEL_1129;
                  }
                  else if ((v709 & (v704 - 1)) != v362)
                  {
                    goto LABEL_1088;
                  }
                  v707 = (_QWORD *)*v707;
                  if (!v707)
                    goto LABEL_1088;
                }
              }
              do
              {
                v708 = v707[1];
                if (v708 == v703)
                {
                  if (v707[2] == v703)
                    goto LABEL_1129;
                }
                else
                {
                  if (v708 >= v704)
                    v708 %= v704;
                  if (v708 != v362)
                    break;
                }
                v707 = (_QWORD *)*v707;
              }
              while (v707);
            }
          }
        }
LABEL_1088:
        v707 = operator new(0x20uLL);
        *(_QWORD *)task_info_outCnt = v707;
        *(_QWORD *)&task_info_outCnt[2] = v1307 + 1192;
        *v707 = 0;
        v707[1] = v703;
        v707[2] = v703;
        v707[3] = 0;
        LOBYTE(v1349) = 1;
        v710 = (float)(unint64_t)(*(_QWORD *)(v1307 + 1200) + 1);
        v711 = *(float *)(v1307 + 1208);
        if (v704 && (float)(v711 * (float)v704) >= v710)
        {
          v712 = *v1302;
          v713 = *(_QWORD **)(*v1302 + 8 * v362);
          v714 = v1307;
          if (v713)
            goto LABEL_1091;
LABEL_1116:
          *v707 = *v1270;
          *v1270 = v707;
          *(_QWORD *)(v712 + 8 * v362) = v1270;
          if (*v707)
          {
            v723 = *(_QWORD *)(*v707 + 8);
            if ((v704 & (v704 - 1)) != 0)
            {
              if (v723 >= v704)
                v723 %= v704;
            }
            else
            {
              v723 &= v704 - 1;
            }
            v713 = (_QWORD *)(*v1302 + 8 * v723);
            goto LABEL_1127;
          }
        }
        else
        {
          v715 = v704 < 3 || (v704 & (v704 - 1)) != 0;
          v716 = v715 | (2 * v704);
          v717 = vcvtps_u32_f32(v710 / v711);
          if (v716 <= v717)
            v718 = v717;
          else
            v718 = v716;
          if (v718 == 1)
          {
            v718 = 2;
          }
          else if ((v718 & (v718 - 1)) != 0)
          {
            v718 = std::__next_prime(v718);
            v704 = *(_QWORD *)(v1307 + 1184);
          }
          if (v718 > v704)
            goto LABEL_1103;
          if (v718 < v704)
          {
            v719 = vcvtps_u32_f32((float)*(unint64_t *)(v1307 + 1200) / *(float *)(v1307 + 1208));
            if (v704 < 3
              || (v720 = (uint8x8_t)vcnt_s8((int8x8_t)v704), v720.i16[0] = vaddlv_u8(v720), v720.u32[0] > 1uLL))
            {
              v719 = std::__next_prime(v719);
            }
            else
            {
              v721 = 1 << -(char)__clz(v719 - 1);
              if (v719 >= 2)
                v719 = v721;
            }
            if (v718 <= v719)
              v718 = v719;
            if (v718 < v704)
LABEL_1103:
              sub_207CA6B84((uint64_t)v1302, v718);
          }
          v704 = *(_QWORD *)(v1307 + 1184);
          v722 = v704 - 1;
          if ((v704 & (v704 - 1)) != 0)
          {
            if (v704 <= v703)
            {
              v362 = v703 % v704;
              v712 = *v1302;
              v713 = *(_QWORD **)(*v1302 + 8 * (v703 % v704));
              v714 = v1307;
              if (!v713)
                goto LABEL_1116;
            }
            else
            {
              v362 = v703;
              v712 = *v1302;
              v713 = *(_QWORD **)(*v1302 + 8 * v703);
              v714 = v1307;
              if (!v713)
                goto LABEL_1116;
            }
          }
          else
          {
            v362 = v722 & v703;
            v712 = *v1302;
            v713 = *(_QWORD **)(*v1302 + 8 * (v722 & v703));
            v714 = v1307;
            if (!v713)
              goto LABEL_1116;
          }
LABEL_1091:
          *v707 = *v713;
LABEL_1127:
          *v713 = v707;
        }
        ++*(_QWORD *)(v714 + 1200);
LABEL_1129:
        sub_207D09340((uint64_t)task_info_out, (uint64_t *)(v707[3] + 96));
        sub_207DECE94(v702, (int *)task_info_out);
        v566 = v1307;
        if (v1400)
        {
          v1401 = v1400;
          operator delete(v1400);
        }
        if (v1397)
        {
          v1398 = v1397;
          operator delete(v1397);
        }
        v538.columns[0].i64[0] = *(_QWORD *)(v1307 + 928);
        *(_QWORD *)(v702 + 1008) = v538.columns[0].i64[0];
        if (*(_BYTE *)(v583 + 1312))
        {
          *(_QWORD *)(v702 + 1304) = *(_QWORD *)(v583 + 1304);
          *(_BYTE *)(v702 + 1312) = 1;
          v538.columns[0] = *(simd_float3 *)(v583 + 40);
          *(simd_float3 *)(v702 + 40) = v538.columns[0];
        }
        if (!*(_BYTE *)(v583 + 856))
          goto LABEL_1137;
        v724 = *(unsigned __int8 *)(v702 + 856);
        v538.columns[0] = *(simd_float3 *)(v583 + 824);
        v538.columns[1] = *(simd_float3 *)(v583 + 840);
        v725 = *(_OWORD *)(v583 + 792);
        v538.columns[2] = *(simd_float3 *)(v583 + 808);
        *(simd_float3 *)(v702 + 824) = v538.columns[0];
        *(simd_float3 *)(v702 + 840) = v538.columns[1];
        *(_OWORD *)(v702 + 792) = v725;
        *(simd_float3 *)(v702 + 808) = v538.columns[2];
        if (v724)
        {
LABEL_1137:
          v98 = v1296;
          v583 += 1344;
          if (v583 == v584)
            goto LABEL_845;
          continue;
        }
        break;
      }
      *(_BYTE *)(v702 + 856) = 1;
      v98 = v1296;
      v583 += 1344;
      if (v583 != v584)
        continue;
      break;
    }
LABEL_845:
    v581 = (_QWORD *)*v1263;
    if (*v1263)
      continue;
    break;
  }
LABEL_1144:
  sub_207CC4868((uint64_t)v1272, (uint64_t)&v1390, v538);
  memset(v1332, 0, sizeof(v1332));
  v1333 = 1065353216;
  v727 = v1316;
  v99 = v1298;
  if (!v1316)
  {
LABEL_1419:
    if (*(_QWORD *)(v566 + 1200))
      sub_207D41AE8((uint64_t)&v1313);
    v1311 = 0uLL;
    goto LABEL_1422;
  }
  v1303 = (_QWORD *)(v566 + 1176);
  do
  {
    v729 = v727[3];
    v728 = v727[4];
    while (v729 != v728)
    {
      v730 = *(_DWORD **)(v729 + 1104);
      if (*v730 == 7 && *(float *)(v729 + 88) <= 0.0)
      {
        *v730 = 5;
        v729 += 1344;
      }
      else
      {
        if (*v730)
          goto LABEL_1153;
        v731 = *(_QWORD *)(v729 + 32);
        v1328 = (void *)v731;
        if (*(_BYTE *)(v729 + 441))
        {
          v732 = v1316;
          if (v1316)
          {
            v733 = 0;
            while (1)
            {
              v735 = v732[3];
              v734 = v732[4];
              if (v735 != v734)
              {
                v736 = v734 - v735 - 1344;
                if (v736 >= 0x540)
                {
                  v738 = 0;
                  v739 = (((v736 >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64) + 1;
                  v737 = v735 + 1344 * (v739 & 0x7FFFFFFFFFFFFELL);
                  v740 = v739 & 0x7FFFFFFFFFFFFELL;
                  do
                  {
                    v733 += *(unsigned __int8 *)(v735 + 441);
                    v738 += *(unsigned __int8 *)(v735 + 1785);
                    v735 += 2688;
                    v740 -= 2;
                  }
                  while (v740);
                  v733 += v738;
                  if (v739 == (v739 & 0x7FFFFFFFFFFFFELL))
                    goto LABEL_1157;
                }
                else
                {
                  v737 = v732[3];
                }
                do
                {
                  v733 += *(unsigned __int8 *)(v737 + 441);
                  v737 += 1344;
                }
                while (v737 != v734);
              }
LABEL_1157:
              v732 = (_QWORD *)*v732;
              if (!v732)
                goto LABEL_1167;
            }
          }
          v733 = 0;
LABEL_1167:
          *(double *)(v729 + 1008) = *(double *)(v566 + 936) * (double)v733;
        }
        *(_OWORD *)task_info_outCnt = *(_OWORD *)(v729 + 128);
        v741 = *(float *)(v729 + 112);
        LOBYTE(__dst) = 0;
        LOBYTE(v1324) = 0;
        if (v741 > 0.0)
        {
          __dst = *(void **)(v729 + 104);
          LOBYTE(v1324) = 1;
        }
        sub_207DE45D0((float32x2_t *)task_info_outCnt, v1293.i64[0], v1267, v729 + 144, v1272, (uint64_t)&v1390, (uint64_t)&__dst, (int32x2_t *)(v729 + 424), (uint64_t)task_info_out, v726);
        v566 = v1307;
        v742 = (float32x4_t *)(*(_QWORD *)(v1307 + 1656) + (v1290 << 6));
        v743 = v742[1];
        v744 = v742[2];
        v726 = v742[3];
        v745 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v742, *(float *)&task_info_out[16]), v743, *(float32x2_t *)&task_info_out[16], 1), v744, *(float32x4_t *)&task_info_out[16], 2), v726, *(float32x4_t *)&task_info_out[16], 3);
        v746 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v742, *(float *)&task_info_out[32]), v743, *(float32x2_t *)&task_info_out[32], 1), v744, *(float32x4_t *)&task_info_out[32], 2), v726, *(float32x4_t *)&task_info_out[32], 3);
        v747 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v742, *(float *)&task_info_out[48]), v743, *(float32x2_t *)&task_info_out[48], 1), v744, *(float32x4_t *)&task_info_out[48], 2), v726, *(float32x4_t *)&task_info_out[48], 3);
        *(float32x4_t *)(v729 + 456) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v742, *(float *)task_info_out), v743, *(float32x2_t *)task_info_out, 1), v744, *(float32x4_t *)task_info_out, 2), v726, *(float32x4_t *)task_info_out, 3);
        *(float32x4_t *)(v729 + 472) = v745;
        *(float32x4_t *)(v729 + 488) = v746;
        *(float32x4_t *)(v729 + 504) = v747;
        *(_DWORD *)(v729 + 928) = 6;
        *(_DWORD *)(v729 + 88) = 0x800000;
        v748 = *(int8x8_t *)(v1307 + 1184);
        v98 = v1296;
        if (!*(_QWORD *)&v748)
          goto LABEL_1190;
        v749 = (uint8x8_t)vcnt_s8(v748);
        v749.i16[0] = vaddlv_u8(v749);
        if (v749.u32[0] > 1uLL)
        {
          v750 = v731;
          if (v731 >= *(_QWORD *)&v748)
            v750 = v731 % *(_QWORD *)&v748;
        }
        else
        {
          v750 = (*(_QWORD *)&v748 - 1) & v731;
        }
        v751 = *(_QWORD **)(*v1303 + 8 * v750);
        if (v751 && (v752 = (_QWORD *)*v751) != 0)
        {
          if (v749.u32[0] < 2uLL)
          {
            v753 = *(_QWORD *)&v748 - 1;
            while (1)
            {
              v755 = v752[1];
              if (v755 == v731)
              {
                if (v752[2] == v731)
                  goto LABEL_1191;
              }
              else if ((v755 & v753) != v750)
              {
                goto LABEL_1190;
              }
              v752 = (_QWORD *)*v752;
              if (!v752)
                goto LABEL_1190;
            }
          }
          while (1)
          {
            v754 = v752[1];
            if (v754 == v731)
              break;
            if (v754 >= *(_QWORD *)&v748)
              v754 %= *(_QWORD *)&v748;
            if (v754 != v750)
              goto LABEL_1190;
LABEL_1180:
            v752 = (_QWORD *)*v752;
            if (!v752)
              goto LABEL_1190;
          }
          if (v752[2] != v731)
            goto LABEL_1180;
LABEL_1191:
          v756 = sub_207D49E00((uint64_t *)v1332, (unint64_t)v1328, &v1328);
          v757 = v756;
          v759 = (char *)v756[4];
          v758 = v756[5];
          if ((unint64_t)v759 >= v758)
          {
            v761 = (char *)v756[3];
            v762 = (char *)(v759 - v761);
            v763 = (v759 - v761) >> 3;
            v764 = v763 + 1;
            if ((unint64_t)(v763 + 1) >> 61)
              sub_207CA420C();
            v765 = v758 - (_QWORD)v761;
            if (v765 >> 2 > v764)
              v764 = v765 >> 2;
            if ((unint64_t)v765 >= 0x7FFFFFFFFFFFFFF8)
              v766 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v766 = v764;
            if (v766)
            {
              if (v766 >> 61)
                sub_207CA3AB8();
              v767 = v766;
              v768 = operator new(8 * v766);
              v766 = v767;
              v763 = (v759 - v761) >> 3;
              v762 = (char *)(v759 - v761);
            }
            else
            {
              v768 = 0;
            }
            v769 = &v768[8 * v763];
            *v769 = v729;
            v760 = v769 + 1;
            if (v759 != v761)
            {
              v770 = v759 - v761 - 8;
              if (v770 < 0x58)
                goto LABEL_2120;
              if ((unint64_t)(v759 - v768 - (_QWORD)v762) < 0x20)
                goto LABEL_2120;
              v771 = (v770 >> 3) + 1;
              v772 = 8 * (v771 & 0x3FFFFFFFFFFFFFFCLL);
              v773 = &v759[-v772];
              v769 = (_QWORD *)((char *)v769 - v772);
              v774 = &v768[8 * v763 - 16];
              v775 = v759 - 16;
              v776 = v771 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v777 = *(_OWORD *)v775;
                *(v774 - 1) = *((_OWORD *)v775 - 1);
                *v774 = v777;
                v774 -= 2;
                v775 -= 32;
                v776 -= 4;
              }
              while (v776);
              v759 = v773;
              if (v771 != (v771 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_2120:
                do
                {
                  v778 = *((_QWORD *)v759 - 1);
                  v759 -= 8;
                  *--v769 = v778;
                }
                while (v759 != v761);
              }
              v759 = (char *)v757[3];
            }
            v757[3] = v769;
            v757[4] = v760;
            v757[5] = &v768[8 * v766];
            v566 = v1307;
            if (v759)
              operator delete(v759);
            v98 = v1296;
          }
          else
          {
            *(_QWORD *)v759 = v729;
            v760 = v759 + 8;
            v98 = v1296;
            v566 = v1307;
          }
          v757[4] = v760;
          v779 = *(_DWORD *)(v729 + 1300);
          if (v779 <= 0)
            v780 = 0;
          else
            v780 = v779 - 2;
          *(_DWORD *)(v729 + 1300) = v780;
LABEL_1153:
          v729 += 1344;
        }
        else
        {
LABEL_1190:
          **(_DWORD **)(v729 + 1104) = 2;
          v729 += 1344;
        }
      }
    }
    v727 = (_QWORD *)*v727;
  }
  while (v727);
  v781 = *(char **)&v1332[16];
  v99 = v1298;
  if (!*(_QWORD *)&v1332[16])
  {
LABEL_1411:
    v917 = v1316;
    if (v1316)
    {
      v918 = *((_QWORD *)&v1313 + 1);
      do
      {
        v919 = v917[3];
        v920 = v917[4];
        while (v919 != v920)
        {
          if (*(_BYTE *)(v919 + 1320))
            *((_QWORD *)&v1313 + 1) = ++v918;
          v919 += 1344;
        }
        v917 = (_QWORD *)*v917;
      }
      while (v917);
    }
    goto LABEL_1419;
  }
  v1293.i64[0] = v566 + 1224;
  v782 = v566 + 1320;
  while (2)
  {
    if (*((_QWORD *)v781 + 3) == *((_QWORD *)v781 + 4))
      goto LABEL_1223;
    if (a8 && *(_BYTE *)v1266)
    {
      v1329 = 0;
      v1328 = 0;
      v1330 = 0;
      v784 = (unint64_t *)(v781 + 16);
      v1331 = 1;
      v785 = *((_QWORD *)v781 + 2);
      v786 = v1315;
      if (!*(_QWORD *)&v1315)
        goto LABEL_1249;
    }
    else
    {
      LOBYTE(v1328) = 0;
      v784 = (unint64_t *)(v781 + 16);
      v1331 = 0;
      v785 = *((_QWORD *)v781 + 2);
      v786 = v1315;
      if (!*(_QWORD *)&v1315)
        goto LABEL_1249;
    }
    v787 = (uint8x8_t)vcnt_s8(v786);
    v787.i16[0] = vaddlv_u8(v787);
    if (v787.u32[0] > 1uLL)
    {
      v788 = v785;
      if (*(_QWORD *)&v786 <= v785)
        v788 = v785 % *(_QWORD *)&v786;
    }
    else
    {
      v788 = (*(_QWORD *)&v786 - 1) & v785;
    }
    v789 = (_QWORD *)*((_QWORD *)v1314 + v788);
    if (!v789 || (v790 = (_QWORD *)*v789) == 0)
    {
LABEL_1249:
      v794 = 0;
      v795 = 0;
      v796 = 0;
      goto LABEL_1250;
    }
    if (v787.u32[0] < 2uLL)
    {
      v791 = *(_QWORD *)&v786 - 1;
      while (1)
      {
        v793 = v790[1];
        if (v793 == v785)
        {
          if (v790[2] == v785)
            goto LABEL_1301;
        }
        else if ((v793 & v791) != v788)
        {
          goto LABEL_1249;
        }
        v790 = (_QWORD *)*v790;
        if (!v790)
          goto LABEL_1249;
      }
    }
    while (2)
    {
      v792 = v790[1];
      if (v792 != v785)
      {
        if (v792 >= *(_QWORD *)&v786)
          v792 %= *(_QWORD *)&v786;
        if (v792 != v788)
          goto LABEL_1249;
        goto LABEL_1239;
      }
      if (v790[2] != v785)
      {
LABEL_1239:
        v790 = (_QWORD *)*v790;
        if (!v790)
          goto LABEL_1249;
        continue;
      }
      break;
    }
LABEL_1301:
    v796 = (unint64_t)(v790 + 3) & 0xFFFFFFFFFFFFFF00;
    v794 = ((_BYTE)v790 + 24);
    v795 = 1;
LABEL_1250:
    __dst = (void *)v785;
    v1325 = 0;
    v1326 = 0;
    v1324 = 0;
    v1327 = 733236984;
    kdebug_trace();
    v797 = (float32x2_t **)(v796 | v794);
    if (*(_QWORD *)(sub_207D45E8C((uint64_t)v1303, *v784, v784)[3] + 464))
    {
      v798 = (uint64_t *)*((_QWORD *)v781 + 3);
      for (jj = (uint64_t *)*((_QWORD *)v781 + 4); v798 != jj; v98 = v1296)
      {
        v811 = *v798;
        v812 = operator new(8uLL);
        v1321 = v812;
        *v812 = v811;
        v1322[0] = v812 + 1;
        v1322[1] = v812 + 1;
        v813 = (unint64_t *)sub_207D45E8C((uint64_t)v1303, *v784, v784)[3];
        task_info_out[0] = 0;
        task_info_out[64] = 0;
        sub_207DC3D4C(v813, (_QWORD *)v1287, v1269, (_QWORD *)a4, (char **)&v1321, v1294, (uint64_t)&v1328, &v1311, v1268, v797, v795, 0, 0, (int32x4_t *)task_info_out, v1293.i64[0]);
        v814 = v1311;
        if (*((_QWORD *)&v1311 + 1))
        {
          v815 = (unint64_t *)(*((_QWORD *)&v1311 + 1) + 8);
          do
            v816 = __ldxr(v815);
          while (__stxr(v816 + 1, v815));
          do
            v817 = __ldaxr(v815);
          while (__stlxr(v817 - 1, v815));
          if (!v817)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v814 + 1) + 16))(*((_QWORD *)&v814 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v814 + 1));
          }
        }
        if ((_QWORD)v814)
        {
          if (v1321)
          {
            v1322[0] = v1321;
            operator delete(v1321);
          }
          v831 = 0;
          v98 = v1296;
          v99 = v1298;
          v566 = v1307;
          goto LABEL_1401;
        }
        v818 = (std::__shared_weak_count *)*((_QWORD *)&v1311 + 1);
        if (*((_QWORD *)&v1311 + 1))
        {
          v819 = (unint64_t *)(*((_QWORD *)&v1311 + 1) + 8);
          do
            v820 = __ldaxr(v819);
          while (__stlxr(v820 - 1, v819));
          if (!v820)
          {
            ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
            std::__shared_weak_count::__release_weak(v818);
          }
        }
        if (v1321)
        {
          v1322[0] = v1321;
          operator delete(v1321);
        }
        ++v798;
      }
    }
    else
    {
      v826 = (unint64_t *)sub_207D45E8C((uint64_t)v1303, *v784, v784)[3];
      LOBYTE(task_info_outCnt[0]) = 0;
      v1353 = 0;
      sub_207DC3D4C(v826, (_QWORD *)v1287, v1269, (_QWORD *)a4, (char **)v781 + 3, v1294, (uint64_t)&v1328, &v1311, v1268, v797, v795, 0, 0, (int32x4_t *)task_info_outCnt, v1293.i64[0]);
      v827 = v1311;
      v566 = v1307;
      if (*((_QWORD *)&v1311 + 1))
      {
        v828 = (unint64_t *)(*((_QWORD *)&v1311 + 1) + 8);
        do
          v829 = __ldxr(v828);
        while (__stxr(v829 + 1, v828));
        do
          v830 = __ldaxr(v828);
        while (__stlxr(v830 - 1, v828));
        if (!v830)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v827 + 1) + 16))(*((_QWORD *)&v827 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v827 + 1));
        }
      }
      if ((_QWORD)v827)
      {
        v831 = 0;
        goto LABEL_1400;
      }
      v832 = (std::__shared_weak_count *)*((_QWORD *)&v1311 + 1);
      if (*((_QWORD *)&v1311 + 1))
      {
        v833 = (unint64_t *)(*((_QWORD *)&v1311 + 1) + 8);
        do
          v834 = __ldaxr(v833);
        while (__stlxr(v834 - 1, v833));
        if (!v834)
        {
          ((void (*)(std::__shared_weak_count *))v832->__on_zero_shared)(v832);
          std::__shared_weak_count::__release_weak(v832);
        }
      }
    }
    v566 = v1307;
    if (a8)
    {
      if (v1331)
      {
        v800 = (char *)v1328;
        v801 = v1329;
        if (v1328 != v1329)
        {
          v802 = *((_QWORD *)&v1313 + 1);
          v803 = v1329 - (_BYTE *)v1328 - 80;
          v804 = (char *)v1328;
          if (v803 < 0x50)
            goto LABEL_2121;
          v805 = v803 / 0x50 + 1;
          v804 = (char *)v1328 + 80 * (v805 & 0x7FFFFFFFFFFFFFELL);
          v806 = (char *)v1328 + 144;
          v807 = v805 & 0x7FFFFFFFFFFFFFELL;
          do
          {
            *(v806 - 10) = v802;
            *v806 = v802;
            v806 += 20;
            v807 -= 2;
          }
          while (v807);
          if (v805 != (v805 & 0x7FFFFFFFFFFFFFELL))
          {
LABEL_2121:
            do
            {
              *((_QWORD *)v804 + 8) = v802;
              v804 += 80;
            }
            while (v804 != v801);
          }
          v808 = (uint64_t **)(v1266 + 16);
          v809 = *(uint64_t **)(v1266 + 16);
          v810 = *v784;
LABEL_1277:
          v821 = v808;
          if (v809)
          {
            while (1)
            {
              v808 = (uint64_t **)v809;
              v822 = v809[4];
              if (v810 < v822)
              {
                v809 = *v808;
                goto LABEL_1277;
              }
              if (v822 >= v810)
                break;
              v809 = v808[1];
              if (!v809)
              {
                v821 = v808 + 1;
                goto LABEL_1282;
              }
            }
            v823 = v808;
          }
          else
          {
LABEL_1282:
            v823 = operator new(0x40uLL);
            *((_QWORD *)v823 + 4) = v810;
            *((_QWORD *)v823 + 5) = 0;
            *((_QWORD *)v823 + 6) = 0;
            *((_QWORD *)v823 + 7) = 0;
            *(_QWORD *)v823 = 0;
            *((_QWORD *)v823 + 1) = 0;
            *((_QWORD *)v823 + 2) = v808;
            *v821 = (uint64_t *)v823;
            v824 = **(_QWORD **)(v1266 + 8);
            v825 = (uint64_t *)v823;
            if (v824)
            {
              *(_QWORD *)(v1266 + 8) = v824;
              v825 = *v821;
            }
            sub_207CC24B4(*(uint64_t **)(v1266 + 16), v825);
            ++*(_QWORD *)(v1266 + 24);
            v800 = (char *)v1328;
          }
          v835 = *((_QWORD *)v823 + 6);
          if (v835 >= *((_QWORD *)v823 + 7))
          {
            v838 = sub_207D43FFC((void **)v823 + 5, (uint64_t)v800);
          }
          else
          {
            *(_QWORD *)v835 = *(_QWORD *)v800;
            *(_QWORD *)(v835 + 8) = 0;
            *(_QWORD *)(v835 + 16) = 0;
            *(_QWORD *)(v835 + 24) = 0;
            *(_OWORD *)(v835 + 8) = *(_OWORD *)(v800 + 8);
            *(_QWORD *)(v835 + 24) = *((_QWORD *)v800 + 3);
            *((_QWORD *)v800 + 1) = 0;
            *((_QWORD *)v800 + 2) = 0;
            *((_QWORD *)v800 + 3) = 0;
            v836 = *((_OWORD *)v800 + 2);
            v837 = *((_OWORD *)v800 + 4);
            *(_OWORD *)(v835 + 48) = *((_OWORD *)v800 + 3);
            *(_OWORD *)(v835 + 64) = v837;
            *(_OWORD *)(v835 + 32) = v836;
            v838 = (char *)(v835 + 80);
          }
          *((_QWORD *)v823 + 6) = v838;
        }
      }
    }
    v839 = (uint64_t *)*((_QWORD *)v781 + 3);
    v840 = (uint64_t *)*((_QWORD *)v781 + 4);
    while (2)
    {
      if (v839 != v840)
      {
        v1321 = (void *)0x100000000;
        v843 = **(unsigned int **)(*v839 + 1104);
        if (!(_DWORD)v843)
          goto LABEL_1316;
        v844 = (char *)v1322;
        if ((_DWORD)v843 == 1)
        {
          v843 = 1;
LABEL_1316:
          v844 = (char *)&v1322[-1] + 4 * v843;
        }
        sub_207DF861C(v782, *v839);
        v855 = *v839;
        if (v844 - (char *)&v1321 != 8)
        {
          v856 = *(_DWORD **)(v855 + 1104);
          if (*v856 == 5)
          {
            if (*(_BYTE *)(v855 + 856))
            {
              *v856 = 7;
              if (*(_BYTE *)(v1294 + 64))
              {
                v848 = *(int8x16_t *)(v1294 + 16);
                v849 = *(float32x4_t *)(v1294 + 32);
                v850 = *(float32x4_t *)(v1294 + 48);
                v851 = *(float32x4_t *)(v855 + 824);
                v852 = *(int8x16_t *)(v855 + 840);
                v845 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)(v855 + 792))), (float32x4_t)v848, *(float32x2_t *)(v855 + 792), 1), v849, *(float32x4_t *)(v855 + 792), 2), v850, *(float32x4_t *)(v855 + 792), 3);
                v846 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, COERCE_FLOAT(*(_OWORD *)(v855 + 808))), (float32x4_t)v848, *(float32x2_t *)(v855 + 808), 1), v849, *(float32x4_t *)(v855 + 808), 2), v850, *(float32x4_t *)(v855 + 808), 3);
                v847 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, v851.f32[0]), (float32x4_t)v848, *(float32x2_t *)v851.f32, 1), v849, v851, 2), v850, v851, 3);
                v857 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v1294, *(float *)v852.i32), (float32x4_t)v848, *(float32x2_t *)v852.i8, 1), v849, (float32x4_t)v852, 2), v850, (float32x4_t)v852, 3);
                *(float32x4_t *)(v855 + 456) = v845;
                *(float32x4_t *)(v855 + 472) = v846;
                *(int8x16_t *)(v855 + 488) = v847;
                *(float32x4_t *)(v855 + 504) = v857;
                *(_DWORD *)(v855 + 928) = 6;
                *(_DWORD *)(v855 + 88) = 1036831949;
                if (*(_BYTE *)(v1294 + 64))
                {
                  if (*(_BYTE *)(v855 + 440) && *(_BYTE *)(v855 + 1024))
                  {
                    v858 = *(double *)(v855 + 1016);
                    v848 = (int8x16_t)vmulq_n_f32(v857, v858);
                    v848.i32[3] = v857.i32[3];
                    v857 = (float32x4_t)v848;
                  }
                  v849.i64[0] = *(_QWORD *)v1294;
                  v849.i32[2] = *(_DWORD *)(v1294 + 8);
                  v851.i64[0] = *(_QWORD *)(v1294 + 16);
                  v851.i32[2] = *(_DWORD *)(v1294 + 24);
                  v859 = *(float32x2_t *)(v1294 + 32);
                  v848.i32[0] = *(_DWORD *)(v1294 + 40);
                  v852.i64[0] = *(_QWORD *)(v1294 + 48);
                  v852.i32[2] = *(_DWORD *)(v1294 + 56);
                  if (!*(_BYTE *)(v855 + 652))
                    *(_BYTE *)(v855 + 652) = 1;
                  v860.i64[0] = vzip1q_s32((int32x4_t)v849, (int32x4_t)v851).u64[0];
                  v861 = (int8x16_t)vnegq_f32((float32x4_t)v852);
                  v860.i64[1] = v859.u32[0];
                  v862 = (int8x16_t)vtrn2q_s32((int32x4_t)v849, (int32x4_t)v851);
                  v862.i32[2] = v859.i32[1];
                  v863 = (int8x16_t)vzip2q_s32((int32x4_t)v849, (int32x4_t)v851);
                  *(float32x2_t *)v853.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v860.f32, *(float *)v861.i32), *(float32x2_t *)v862.i8, *(float32x2_t *)v852.i8, 1), *(float32x2_t *)v863.i8, (float32x4_t)v852, 2);
                  v863.i32[2] = v848.i32[0];
                  v851 = (float32x4_t)vextq_s8(vextq_s8(v862, v862, 0xCuLL), v863, 8uLL);
                  v854 = vmla_f32(vmls_lane_f32(vmul_f32(v859, *(float32x2_t *)v861.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v859, 1), *(float32x2_t *)v852.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v861, v861, 8uLL), *(float32x2_t *)v848.i8);
                  v853.i64[1] = __PAIR64__(1.0, v854.u32[0]);
                  v848.i64[0] = __PAIR64__(v851.u32[0], v862.u32[0]);
                  v848.i64[1] = v851.u32[1];
                  v850.i64[0] = v851.i64[1];
                  v850.i64[1] = vdupq_laneq_s32((int32x4_t)v863, 2).u32[0];
                  v849 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v860, v845.f32[0]), (float32x4_t)v848, *(float32x2_t *)v845.f32, 1), v850, v845, 2), v853, v845, 3);
                  v845 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v860, v846.f32[0]), (float32x4_t)v848, *(float32x2_t *)v846.f32, 1), v850, v846, 2), v853, v846, 3);
                  v846 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v860, *(float *)v847.i32), (float32x4_t)v848, *(float32x2_t *)v847.i8, 1), v850, (float32x4_t)v847, 2), v853, (float32x4_t)v847, 3);
                  *(float32x4_t *)(v855 + 588) = v849;
                  *(float32x4_t *)(v855 + 604) = v845;
                  v847 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v860, v857.f32[0]), (float32x4_t)v848, *(float32x2_t *)v857.f32, 1), v850, v857, 2), v853, v857, 3);
                  *(float32x4_t *)(v855 + 620) = v846;
                  *(int8x16_t *)(v855 + 636) = v847;
                }
                v855 = *v839;
              }
            }
          }
        }
        v864 = *(unsigned __int8 *)(v855 + 652);
        if (!*(_BYTE *)(v855 + 652))
          goto LABEL_1311;
        v865 = *(double *)(v1307 + 952);
        if (*(_BYTE *)(v1307 + 968) || !*(_BYTE *)(v855 + 441))
        {
          v870 = v1316;
          if (v1316)
          {
            v871 = 0;
            v872 = v1316;
            do
            {
              for (kk = v872[3]; kk != v872[4]; kk += 1344)
              {
                if (*(_BYTE *)(kk + 441) && !*(_BYTE *)(kk + 1296))
                  ++v871;
              }
              v872 = (_QWORD *)*v872;
            }
            while (v872);
            do
            {
              for (mm = v870[3]; mm != v870[4]; mm += 1344)
              {
                if (*(_BYTE *)(mm + 441))
                  v872 = (_QWORD *)((char *)v872 + *(unsigned __int8 *)(mm + 1296));
              }
              v870 = (_QWORD *)*v870;
            }
            while (v870);
          }
          else
          {
            v871 = 0;
            v872 = 0;
          }
          if (v871 <= 1)
            v871 = 1;
          v875 = (1.0 / *(double *)(v1307 + 936) - 1.0 / v865 * (double)(unint64_t)v872) / (double)v871;
          if (1.0 / v865 > v875)
            v875 = 1.0 / v865;
          v876 = 1.0 / v875;
          if (v876 <= v865)
            v865 = v876;
          v866 = (float32x4_t *)(v855 + 588);
          v867 = (float32x4_t *)(v855 + 724);
          v868 = *(unsigned __int8 *)(v855 + 788);
          if (v868 == v864)
            goto LABEL_1362;
LABEL_1335:
          if (v868)
          {
            *(_BYTE *)(v855 + 788) = 0;
            v869 = *v839;
            if (*(float *)(*v839 + 88) <= *(float *)(v1307 + 632))
              goto LABEL_1371;
          }
          else
          {
            v878 = v866[1];
            *v867 = *v866;
            v867[1] = v878;
            v845 = v866[2];
            v846 = v866[3];
            v867[2] = v845;
            v867[3] = v846;
            *(_BYTE *)(v855 + 788) = 1;
            v869 = *v839;
            if (*(float *)(*v839 + 88) <= *(float *)(v1307 + 632))
              goto LABEL_1371;
          }
        }
        else
        {
          if (!*(_BYTE *)(v855 + 1296))
            v865 = *(double *)(v1307 + 936);
          v866 = (float32x4_t *)(v855 + 588);
          v867 = (float32x4_t *)(v855 + 724);
          v868 = *(unsigned __int8 *)(v855 + 788);
          if (v868 != v864)
            goto LABEL_1335;
LABEL_1362:
          v877 = v866[1];
          *v867 = *v866;
          v867[1] = v877;
          v845 = v866[2];
          v846 = v866[3];
          v867[2] = v845;
          v867[3] = v846;
          v869 = *v839;
          if (*(float *)(*v839 + 88) <= *(float *)(v1307 + 632))
          {
LABEL_1371:
            v882 = *v839;
            if (*(_BYTE *)(*v839 + 720))
              goto LABEL_1372;
LABEL_1386:
            v902 = *(double *)(v882 + 944);
            if (v902 > 0.0)
            {
              v903 = *(_QWORD *)(v882 + 992);
              v842 = (double)v903;
              v904 = *(double *)(v882 + 1000) * (double)v903;
              *(double *)(v882 + 1000) = v904;
              v905 = *(_QWORD *)(v882 + 952);
              v906 = (*(_QWORD *)(v882 + 960) - v905) >> 3;
              if (v903 >= v906)
              {
                v907 = *(_QWORD *)(v882 + 984);
                if (!v907)
                  v907 = (*(_QWORD *)(v882 + 960) - v905) >> 3;
                *(double *)(v882 + 1000) = v904 - *(double *)(v905 + 8 * v907 - 8);
              }
              v908 = v1268 - v902;
              v909 = *(_QWORD *)(v882 + 976);
              if (!v909)
                v909 = v906;
              v910 = v909 - 1;
              *(_QWORD *)(v882 + 976) = v910;
              *(double *)(v905 + 8 * v910) = v908;
              if (v903 == v906)
              {
                if (*(_QWORD *)(v882 + 984))
                  v903 = *(_QWORD *)(v882 + 984);
                *(_QWORD *)(v882 + 984) = v903 - 1;
              }
              else
              {
                v841 = v903 + 1;
                *(_QWORD *)(v882 + 992) = v841;
                v842 = (double)v841;
              }
              *(double *)(v882 + 1000) = (v908 + *(double *)(v882 + 1000)) / v842;
            }
            *(double *)(v882 + 944) = v1268;
LABEL_1311:
            ++v839;
            continue;
          }
        }
        v879 = (_OWORD *)(v869 + 724);
        v880 = (_OWORD *)(v869 + 860);
        if (*(unsigned __int8 *)(v869 + 924) == *(unsigned __int8 *)(v869 + 788))
        {
          if (!*(_BYTE *)(v869 + 924))
            goto LABEL_1371;
          v881 = *(_OWORD *)(v869 + 740);
          *v880 = *v879;
          *(_OWORD *)(v869 + 876) = v881;
          v845 = *(float32x4_t *)(v869 + 756);
          v846 = *(float32x4_t *)(v869 + 772);
          *(float32x4_t *)(v869 + 892) = v845;
          *(float32x4_t *)(v869 + 908) = v846;
          v882 = *v839;
          if (!*(_BYTE *)(*v839 + 720))
            goto LABEL_1386;
        }
        else
        {
          if (*(_BYTE *)(v869 + 924))
          {
            *(_BYTE *)(v869 + 924) = 0;
            goto LABEL_1371;
          }
          v911 = *(_OWORD *)(v869 + 740);
          *v880 = *v879;
          *(_OWORD *)(v869 + 876) = v911;
          v845 = *(float32x4_t *)(v869 + 756);
          v846 = *(float32x4_t *)(v869 + 772);
          *(float32x4_t *)(v869 + 892) = v845;
          *(float32x4_t *)(v869 + 908) = v846;
          *(_BYTE *)(v869 + 924) = 1;
          v882 = *v839;
          if (!*(_BYTE *)(*v839 + 720))
            goto LABEL_1386;
        }
LABEL_1372:
        if (*(_BYTE *)(v882 + 788) && *(_BYTE *)(v882 + 441))
        {
          v845.i64[0] = *(_QWORD *)(v882 + 144);
          v845.i32[2] = *(_DWORD *)(v882 + 152);
          v846.i64[0] = *(_QWORD *)(v882 + 156);
          v846.i32[2] = *(_DWORD *)(v882 + 164);
          v883 = vaddq_f32(v845, v846);
          v884.i64[0] = 0x3F0000003F000000;
          v884.i64[1] = 0x3F0000003F000000;
          v885 = (int8x16_t)vmulq_f32(v883, (float32x4_t)v884);
          if (*(_BYTE *)(v882 + 1024))
          {
            v886 = *(double *)(v882 + 1016);
            v885 = (int8x16_t)vmulq_n_f32((float32x4_t)v885, v886);
          }
          v852.i64[0] = *(_QWORD *)(v882 + 656);
          v852.i32[2] = *(_DWORD *)(v882 + 664);
          v887 = *(float32x2_t *)(v882 + 672);
          v851.i32[0] = *(_DWORD *)(v882 + 680);
          v888 = *(float32x2_t *)(v882 + 688);
          v850.i32[0] = *(_DWORD *)(v882 + 696);
          v848.i64[0] = *(_QWORD *)(v882 + 724);
          v848.i32[2] = *(_DWORD *)(v882 + 732);
          v853.i32[0] = *(_DWORD *)(v882 + 748);
          v847.i64[0] = *(_QWORD *)(v882 + 740);
          v854.i32[0] = *(_DWORD *)(v882 + 764);
          v884.i64[0] = *(_QWORD *)(v882 + 756);
          v889 = (float32x2_t)vextq_s8(v848, v848, 8uLL).u64[0];
          v890 = ((float)(vmla_f32(vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v852, v852, 8uLL), v889), *(float32x2_t *)v853.f32, *(float32x2_t *)v851.f32), v854, *(float32x2_t *)v850.f32).f32[0]+ vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v852.i8, *(float *)v848.i32), v887, *(float *)v847.i32), v888, *(float *)v884.i32), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)v852.i8,
                                                            *(float32x2_t *)v848.i8,
                                                            1),
                                                          v887,
                                                          *(float32x2_t *)v847.i8,
                                                          1),
                                                        v888,
                                                        *(float32x2_t *)v884.i8,
                                                        1),
                                           1)).f32[0])
                + -1.0)
               * 0.5;
          if (*(float *)(v1307 + 1028) > v890)
            goto LABEL_1384;
          v847.i32[2] = *(_DWORD *)(v882 + 748);
          v884.i32[2] = *(_DWORD *)(v882 + 764);
          *(float32x2_t *)v891.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v852.i8, *(float *)v885.i32), v887, *(float32x2_t *)v885.i8, 1), v888, (float32x4_t)v885, 2);
          v849.i32[0] = *(_DWORD *)(v882 + 664);
          *(float32x2_t *)v849.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v849.f32, *(float32x2_t *)v885.i8), *(float32x2_t *)v851.f32, *(float32x2_t *)v885.i8, 1);
          v892 = (float32x2_t)vextq_s8(v885, v885, 8uLL).u64[0];
          *(float32x2_t *)&v891.u32[2] = vmla_f32(*(float32x2_t *)v849.f32, v892, *(float32x2_t *)v850.f32);
          v849.i64[0] = *(_QWORD *)(v882 + 704);
          v849.i32[2] = *(_DWORD *)(v882 + 712);
          *(float32x2_t *)v893.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v848.i8, *(float *)v885.i32), *(float32x2_t *)v847.i8, *(float32x2_t *)v885.i8, 1), *(float32x2_t *)v884.i8, (float32x4_t)v885, 2);
          v894 = vmla_lane_f32(vmul_f32(v889, *(float32x2_t *)v885.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v847, v847, 8uLL), *(float32x2_t *)v885.i8, 1);
          v895 = (float32x4_t)vextq_s8(v884, v884, 8uLL);
          *(float32x2_t *)&v893.u32[2] = vmla_f32(v894, v892, *(float32x2_t *)v895.f32);
          v895.i64[0] = *(_QWORD *)(v882 + 772);
          v895.i32[2] = *(_DWORD *)(v882 + 780);
          v896 = (int8x16_t)vsubq_f32(vaddq_f32(v891, v849), vaddq_f32(v893, v895));
          v897 = (float32x2_t)vextq_s8(v896, v896, 8uLL).u64[0];
          if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v896.i8, *(float32x2_t *)v896.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v896.i8, 1), *(float32x2_t *)v896.i8, 1), v897, v897).f32[0]) > *(float *)(v1307 + 1032))
          {
LABEL_1384:
            v901 = 0;
            *(double *)(v882 + 1008) = v865;
          }
          else
          {
            v898 = *(double *)(v1307 + 952);
            v899 = v898;
            if (!*(_BYTE *)(v882 + 1296))
            {
              v900 = *(double *)(v882 + 1008);
              if (*(double *)(v1307 + 960) * v900 > v865)
                v865 = *(double *)(v1307 + 960) * v900;
              v899 = *(double *)(v1307 + 952);
              if (v865 < v898)
                v899 = v865;
            }
            *(double *)(v882 + 1008) = v899;
            v901 = v899 == v898;
          }
          *(_BYTE *)(v882 + 1296) = v901;
        }
        goto LABEL_1386;
      }
      break;
    }
    v831 = 1;
LABEL_1400:
    v99 = v1298;
LABEL_1401:
    kdebug_trace();
    if (v1331)
    {
      v912 = (char *)v1328;
      if (v1328)
      {
        v913 = v1329;
        v783 = v1328;
        if (v1329 != v1328)
        {
          do
          {
            v914 = (_QWORD *)*((_QWORD *)v913 - 9);
            if (v914)
            {
              v915 = (_QWORD *)*((_QWORD *)v913 - 8);
              v916 = (void *)*((_QWORD *)v913 - 9);
              if (v915 != v914)
              {
                do
                  v915 = sub_207D441B8(v915 - 66);
                while (v915 != v914);
                v916 = (void *)*((_QWORD *)v913 - 9);
              }
              *((_QWORD *)v913 - 8) = v914;
              operator delete(v916);
            }
            v913 -= 80;
          }
          while (v913 != v912);
          v783 = v1328;
          v99 = v1298;
        }
        v1329 = v912;
        operator delete(v783);
      }
    }
    if (v831)
    {
LABEL_1223:
      v781 = *(char **)v781;
      if (!v781)
        goto LABEL_1411;
      continue;
    }
    break;
  }
LABEL_1422:
  v921 = *(_QWORD **)&v1332[16];
  if (*(_QWORD *)&v1332[16])
  {
    do
    {
      v928 = (_QWORD *)*v921;
      v929 = (void *)v921[3];
      if (v929)
      {
        v921[4] = v929;
        operator delete(v929);
      }
      operator delete(v921);
      v921 = v928;
    }
    while (v928);
  }
  v922 = *(void **)v1332;
  *(_QWORD *)v1332 = 0;
  if (v922)
    operator delete(v922);
  sub_207CEC654((uint64_t)v1336, (_QWORD *)v1337);
  v923 = v1336[0];
  v1336[0] = 0;
  if (v923)
    operator delete(v923);
  v924 = v1340;
  if (v1340)
  {
    v925 = (unint64_t *)&v1340->__shared_owners_;
    do
      v926 = __ldaxr(v925);
    while (__stlxr(v926 - 1, v925));
    if (!v926)
    {
      ((void (*)(std::__shared_weak_count *))v924->__on_zero_shared)(v924);
      std::__shared_weak_count::__release_weak(v924);
    }
  }
LABEL_1432:
  if (v1343)
  {
    sub_207CEC654((uint64_t)&v1341[16], v1342);
    v927 = *(void **)&v1341[16];
    *(_QWORD *)&v1341[16] = 0;
    if (v927)
      operator delete(v927);
  }
  else
  {
    v930 = *(std::__shared_weak_count **)&v1341[8];
    if (*(_QWORD *)&v1341[8])
    {
      v931 = (unint64_t *)(*(_QWORD *)&v1341[8] + 8);
      do
        v932 = __ldaxr(v931);
      while (__stlxr(v932 - 1, v931));
      if (!v932)
      {
        ((void (*)(std::__shared_weak_count *))v930->__on_zero_shared)(v930);
        std::__shared_weak_count::__release_weak(v930);
      }
    }
  }
  v933 = v1311;
  v1311 = 0uLL;
  v934 = (std::__shared_weak_count *)*((_QWORD *)&v1312 + 1);
  v1312 = v933;
  if (v934)
  {
    v935 = (unint64_t *)&v934->__shared_owners_;
    do
      v936 = __ldaxr(v935);
    while (__stlxr(v936 - 1, v935));
    if (!v936)
    {
      ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
      std::__shared_weak_count::__release_weak(v934);
    }
  }
  v937 = (std::__shared_weak_count *)*((_QWORD *)&v1311 + 1);
  if (*((_QWORD *)&v1311 + 1))
  {
    v938 = (unint64_t *)(*((_QWORD *)&v1311 + 1) + 8);
    do
      v939 = __ldaxr(v938);
    while (__stlxr(v939 - 1, v938));
    if (!v939)
    {
      ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
      std::__shared_weak_count::__release_weak(v937);
    }
  }
  v940 = v1312;
  if (*((_QWORD *)&v1312 + 1))
  {
    v941 = (unint64_t *)(*((_QWORD *)&v1312 + 1) + 8);
    do
      v942 = __ldxr(v941);
    while (__stxr(v942 + 1, v941));
    do
      v943 = __ldaxr(v941);
    while (__stlxr(v943 - 1, v941));
    if (!v943)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v940 + 1) + 16))(*((_QWORD *)&v940 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v940 + 1));
    }
  }
  if ((_QWORD)v940)
  {
    sub_207CCBAD4((std::__shared_weak_count_vtbl **)task_info_out, (uint64_t)&v1312);
    goto LABEL_1461;
  }
  v1291 = (unint64_t)&v1316;
  v950 = (uint64_t *)v1316;
  if (v1316)
  {
    v1304 = *(_QWORD *)(v98 + 8);
    do
    {
LABEL_1478:
      v951 = v950[4];
      if (v950[3] == v951)
        goto LABEL_1590;
      v952 = v950[3];
      a4 = (unint64_t)v950;
      do
      {
        v953 = v952 + 1344;
        v1293.i64[0] = v952 + 1344;
        if (v952 + 1344 != v951)
        {
          v954 = (float32x2_t *)(v952 + 456);
          v1295 = v951;
          do
          {
            sub_207D08DD8((uint64_t)task_info_out, v953);
            if (*(_QWORD *)(v952 + 32) != *(_QWORD *)&task_info_out[32])
            {
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 1302, (uint64_t)"object1.class_id() == object2.class_id()", 40, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v961 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v961 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v962 = qword_2545309E8;
                for (nn = qword_2545309F0; v962 != nn; v962 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v962)(*(_QWORD *)(v962 + 8), "object1.class_id() == object2.class_id()", 40, "", 0);
              }
              v964 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v964 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              v951 = v1295;
              if (!byte_254530A10)
                abort();
              v955 = (float32x4_t)qword_254530A00(*(_QWORD *)algn_254530A08, "object1.class_id() == object2.class_id()", 40, "", 0);
            }
            v955.i64[0] = *(_QWORD *)(v952 + 144);
            v955.i32[2] = *(_DWORD *)(v952 + 152);
            v956.i64[0] = *(_QWORD *)(v952 + 156);
            v956.i32[2] = *(_DWORD *)(v952 + 164);
            v967 = vaddq_f32(v955, v956);
            v965.i64[0] = 0x3F0000003F000000;
            v965.i64[1] = 0x3F0000003F000000;
            v966 = (int8x16_t)vmulq_f32(v967, v965);
            v967.i64[0] = v1402;
            v967.i32[2] = v1403;
            v957.i64[0] = v1404;
            v957.i32[2] = v1405;
            v968 = (int8x16_t)vmulq_f32(vaddq_f32(v967, v957), v965);
            v969 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v966.i8, 1);
            v970 = (float32x2_t)vdup_laneq_s32((int32x4_t)v966, 2);
            v971 = (float32x2_t)vextq_s8(v966, v966, 8uLL).u64[0];
            if (*(_BYTE *)(v952 + 652) && v1428[8])
            {
              v958.i32[0] = *(_DWORD *)(v952 + 596);
              v972 = *(float32x2_t *)(v952 + 604);
              v959.i32[0] = *(_DWORD *)(v952 + 612);
              v960.i32[0] = *(_DWORD *)(v952 + 628);
              *(float32x2_t *)v973.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v952 + 588), *(float *)v966.i32), v969, v972), v970, *(float32x2_t *)(v952 + 620));
              *(float32x2_t *)&v973.u32[2] = vmla_f32(vmla_f32(vmul_f32(v958, *(float32x2_t *)v966.i8), v969, v959), v971, v960);
              v966.i64[0] = *(_QWORD *)(v952 + 636);
              v966.i32[2] = *(_DWORD *)(v952 + 644);
              v974 = vaddq_f32(v973, (float32x4_t)v966);
              v969.i32[0] = v1422;
              v973.i32[0] = v1424;
              v972.i32[0] = v1426;
              *(float32x2_t *)v976.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v1421, *(float *)v968.i32), v1423, *(float32x2_t *)v968.i8, 1), v1425, (float32x4_t)v968, 2);
              v975 = vmla_lane_f32(vmul_f32(v969, *(float32x2_t *)v968.i8), *(float32x2_t *)v973.f32, *(float32x2_t *)v968.i8, 1);
              v977 = (float32x4_t)vextq_s8(v968, v968, 8uLL);
              *(float32x2_t *)&v976.u32[2] = vmla_f32(v975, *(float32x2_t *)v977.f32, v972);
              v977.i64[0] = v1427;
              v978 = (__int32 *)v1428;
            }
            else
            {
              v958.i32[0] = *(_DWORD *)(v952 + 464);
              v979 = *(float32x2_t *)(v952 + 472);
              v959.i32[0] = *(_DWORD *)(v952 + 480);
              v960.i32[0] = *(_DWORD *)(v952 + 496);
              *(float32x2_t *)v980.f32 = vmla_f32(vmla_f32(vmul_n_f32(*v954, *(float *)v966.i32), v969, v979), v970, *(float32x2_t *)(v952 + 488));
              *(float32x2_t *)&v980.u32[2] = vmla_f32(vmla_f32(vmul_f32(v958, *(float32x2_t *)v966.i8), v969, v959), v971, v960);
              v966.i64[0] = *(_QWORD *)(v952 + 504);
              v966.i32[2] = *(_DWORD *)(v952 + 512);
              v974 = vaddq_f32(v980, (float32x4_t)v966);
              v969.i32[0] = v1414;
              v980.i32[0] = v1416;
              v979.i32[0] = v1418;
              *(float32x2_t *)v976.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v1413, *(float *)v968.i32), v1415, *(float32x2_t *)v968.i8, 1), v1417, (float32x4_t)v968, 2);
              v981 = vmla_lane_f32(vmul_f32(v969, *(float32x2_t *)v968.i8), *(float32x2_t *)v980.f32, *(float32x2_t *)v968.i8, 1);
              v977 = (float32x4_t)vextq_s8(v968, v968, 8uLL);
              *(float32x2_t *)&v976.u32[2] = vmla_f32(v981, *(float32x2_t *)v977.f32, v979);
              v977.i64[0] = v1419;
              v978 = (__int32 *)&v1420;
            }
            v977.i32[2] = *v978;
            v1308 = vsubq_f32(v974, vaddq_f32(v976, v977));
            v982 = *(float *)(v1304 + 976);
            v983 = vsubq_f32(v956, v955);
            v983.i32[3] = -4194304;
            v984 = vmaxnmvq_f32(v983);
            v985 = vsubq_f32(v957, v967);
            v985.i32[3] = -4194304;
            v986 = vmaxnmvq_f32(v985);
            if (v986 >= v984)
              v987 = v984;
            else
              v987 = v986;
            v988 = v1436;
            if (!v1436)
              goto LABEL_1504;
            v989 = (unint64_t *)&v1436->__shared_owners_;
            do
              v990 = __ldaxr(v989);
            while (__stlxr(v990 - 1, v989));
            if (!v990)
            {
              ((void (*)(std::__shared_weak_count *))v988->__on_zero_shared)(v988);
              std::__shared_weak_count::__release_weak(v988);
              v991 = v1435;
              if (!v1435)
                goto LABEL_1510;
            }
            else
            {
LABEL_1504:
              v991 = v1435;
              if (!v1435)
                goto LABEL_1510;
            }
            v992 = (unint64_t *)&v991->__shared_owners_;
            do
              v993 = __ldaxr(v992);
            while (__stlxr(v993 - 1, v992));
            if (!v993)
            {
              ((void (*)(std::__shared_weak_count *))v991->__on_zero_shared)(v991);
              std::__shared_weak_count::__release_weak(v991);
            }
LABEL_1510:
            if (v1434)
              v994 = v1433 == 0;
            else
              v994 = 1;
            if (!v994 && v1431)
            {
              v1432 = v1431;
              operator delete(v1431);
            }
            if (v1429)
            {
              v1430 = v1429;
              operator delete(v1429);
            }
            if (v1411)
            {
              v1412 = v1411;
              operator delete(v1411);
            }
            if (v1409)
            {
              v1410 = v1409;
              operator delete(v1409);
            }
            if ((_BYTE)v1395 && v1394 < 0)
              operator delete(*(void **)&task_info_out[56]);
            if (*(_QWORD *)task_info_out)
            {
              *(_QWORD *)&task_info_out[8] = *(_QWORD *)task_info_out;
              operator delete(*(void **)task_info_out);
            }
            v995 = (int8x16_t)v1308;
            v996 = (float32x2_t)vextq_s8(v995, v995, 8uLL).u64[0];
            if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v995.i8, *(float32x2_t *)v995.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1308.f32, 1), *(float32x2_t *)v1308.f32, 1), v996, v996).f32[0]) < (float)(v987 * v982))
            {
              for (i1 = v953 + 1344; ; i1 += 1344)
              {
                if (i1 == v951)
                  goto LABEL_1481;
                sub_207D08DD8((uint64_t)task_info_outCnt, i1);
                if (*(_QWORD *)(v952 + 32) != v1351)
                {
                  sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 1302, (uint64_t)"object1.class_id() == object2.class_id()", 40, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                  v1004 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1004 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10 || byte_254530A18)
                  {
                    v1005 = qword_2545309E8;
                    for (i2 = qword_2545309F0; v1005 != i2; v1005 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1005)(*(_QWORD *)(v1005 + 8), "object1.class_id() == object2.class_id()", 40, "", 0);
                  }
                  v1007 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1007 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  v98 = v1296;
                  if (!byte_254530A10)
                    abort();
                  v998 = (float32x4_t)qword_254530A00(*(_QWORD *)algn_254530A08, "object1.class_id() == object2.class_id()", 40, "", 0);
                }
                v998.i64[0] = *(_QWORD *)(v952 + 144);
                v998.i32[2] = *(_DWORD *)(v952 + 152);
                v999.i64[0] = *(_QWORD *)(v952 + 156);
                v999.i32[2] = *(_DWORD *)(v952 + 164);
                v1010 = vaddq_f32(v998, v999);
                v1008.i64[0] = 0x3F0000003F000000;
                v1008.i64[1] = 0x3F0000003F000000;
                v1009 = (int8x16_t)vmulq_f32(v1010, v1008);
                v1010.i64[0] = v1356;
                v1010.i32[2] = v1357;
                v1000.i64[0] = v1358;
                v1000.i32[2] = v1359;
                v1011 = (int8x16_t)vmulq_f32(vaddq_f32(v1010, v1000), v1008);
                v1012 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1009.i8, 1);
                v1013 = (float32x2_t)vdup_laneq_s32((int32x4_t)v1009, 2);
                v1014 = (float32x2_t)vextq_s8(v1009, v1009, 8uLL).u64[0];
                if (*(_BYTE *)(v952 + 652) && v1379[8])
                {
                  v1001.i32[0] = *(_DWORD *)(v952 + 596);
                  v1015 = *(float32x2_t *)(v952 + 604);
                  v1002.i32[0] = *(_DWORD *)(v952 + 612);
                  v1003.i32[0] = *(_DWORD *)(v952 + 628);
                  *(float32x2_t *)v1016.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v952 + 588), *(float *)v1009.i32), v1012, v1015), v1013, *(float32x2_t *)(v952 + 620));
                  *(float32x2_t *)&v1016.u32[2] = vmla_f32(vmla_f32(vmul_f32(v1001, *(float32x2_t *)v1009.i8), v1012, v1002), v1014, v1003);
                  v1009.i64[0] = *(_QWORD *)(v952 + 636);
                  v1009.i32[2] = *(_DWORD *)(v952 + 644);
                  v1017 = vaddq_f32(v1016, (float32x4_t)v1009);
                  v1012.i32[0] = v1373;
                  v1016.i32[0] = v1375;
                  v1015.i32[0] = v1377;
                  *(float32x2_t *)v1019.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v1372, *(float *)v1011.i32), v1374, *(float32x2_t *)v1011.i8, 1), v1376, (float32x4_t)v1011, 2);
                  v1018 = vmla_lane_f32(vmul_f32(v1012, *(float32x2_t *)v1011.i8), *(float32x2_t *)v1016.f32, *(float32x2_t *)v1011.i8, 1);
                  v1020 = (float32x4_t)vextq_s8(v1011, v1011, 8uLL);
                  *(float32x2_t *)&v1019.u32[2] = vmla_f32(v1018, *(float32x2_t *)v1020.f32, v1015);
                  v1020.i64[0] = v1378;
                  v1021 = (__int32 *)v1379;
                }
                else
                {
                  v1001.i32[0] = *(_DWORD *)(v952 + 464);
                  v1022 = *(float32x2_t *)(v952 + 472);
                  v1002.i32[0] = *(_DWORD *)(v952 + 480);
                  v1003.i32[0] = *(_DWORD *)(v952 + 496);
                  *(float32x2_t *)v1023.f32 = vmla_f32(vmla_f32(vmul_n_f32(*v954, *(float *)v1009.i32), v1012, v1022), v1013, *(float32x2_t *)(v952 + 488));
                  *(float32x2_t *)&v1023.u32[2] = vmla_f32(vmla_f32(vmul_f32(v1001, *(float32x2_t *)v1009.i8), v1012, v1002), v1014, v1003);
                  v1009.i64[0] = *(_QWORD *)(v952 + 504);
                  v1009.i32[2] = *(_DWORD *)(v952 + 512);
                  v1017 = vaddq_f32(v1023, (float32x4_t)v1009);
                  v1012.i32[0] = v1365;
                  v1023.i32[0] = v1367;
                  v1022.i32[0] = v1369;
                  *(float32x2_t *)v1019.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v1364, *(float *)v1011.i32), v1366, *(float32x2_t *)v1011.i8, 1), v1368, (float32x4_t)v1011, 2);
                  v1024 = vmla_lane_f32(vmul_f32(v1012, *(float32x2_t *)v1011.i8), *(float32x2_t *)v1023.f32, *(float32x2_t *)v1011.i8, 1);
                  v1020 = (float32x4_t)vextq_s8(v1011, v1011, 8uLL);
                  *(float32x2_t *)&v1019.u32[2] = vmla_f32(v1024, *(float32x2_t *)v1020.f32, v1022);
                  v1020.i64[0] = v1370;
                  v1021 = (__int32 *)&v1371;
                }
                v1020.i32[2] = *v1021;
                v1309 = vsubq_f32(v1017, vaddq_f32(v1019, v1020));
                v1025 = *(float *)(v1304 + 976);
                v1026 = vsubq_f32(v999, v998);
                v1026.i32[3] = -4194304;
                v1027 = vmaxnmvq_f32(v1026);
                v1028 = vsubq_f32(v1000, v1010);
                v1028.i32[3] = -4194304;
                v1029 = vmaxnmvq_f32(v1028);
                if (v1029 >= v1027)
                  v1030 = v1027;
                else
                  v1030 = v1029;
                v1031 = v1387;
                if (!v1387)
                  goto LABEL_1557;
                v1032 = (unint64_t *)&v1387->__shared_owners_;
                do
                  v1033 = __ldaxr(v1032);
                while (__stlxr(v1033 - 1, v1032));
                if (!v1033)
                {
                  ((void (*)(std::__shared_weak_count *))v1031->__on_zero_shared)(v1031);
                  std::__shared_weak_count::__release_weak(v1031);
                  v1034 = v1386;
                  if (!v1386)
                    goto LABEL_1563;
                }
                else
                {
LABEL_1557:
                  v1034 = v1386;
                  if (!v1386)
                    goto LABEL_1563;
                }
                v1035 = (unint64_t *)&v1034->__shared_owners_;
                do
                  v1036 = __ldaxr(v1035);
                while (__stlxr(v1036 - 1, v1035));
                if (!v1036)
                {
                  ((void (*)(std::__shared_weak_count *))v1034->__on_zero_shared)(v1034);
                  std::__shared_weak_count::__release_weak(v1034);
                }
LABEL_1563:
                if (v1385)
                  v1037 = v1384 == 0;
                else
                  v1037 = 1;
                if (!v1037 && v1382)
                {
                  v1383 = v1382;
                  operator delete(v1382);
                }
                v951 = v1295;
                if (v1380)
                {
                  v1381 = v1380;
                  operator delete(v1380);
                }
                if (v1362)
                {
                  v1363 = v1362;
                  operator delete(v1362);
                }
                if (v1360)
                {
                  v1361 = v1360;
                  operator delete(v1360);
                }
                if (v1355 && v1354 < 0)
                  operator delete(v1352);
                if (*(_QWORD *)task_info_outCnt)
                {
                  *(_QWORD *)&task_info_outCnt[2] = *(_QWORD *)task_info_outCnt;
                  operator delete(*(void **)task_info_outCnt);
                }
                v1038 = (int8x16_t)v1309;
                v1039 = (float32x2_t)vextq_s8(v1038, v1038, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v1038.i8, *(float32x2_t *)v1038.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1309.f32, 1), *(float32x2_t *)v1309.f32, 1), v1039, v1039).f32[0]) >= (float)(v1030 * v1025))
                {
                  sub_207D463D0(v953, i1);
                  v953 += 1344;
                }
              }
            }
            v953 += 1344;
          }
          while (v953 != v951);
        }
        v953 = v951;
LABEL_1481:
        v951 = v953;
        v952 += 1344;
      }
      while (v1293.i64[0] != v953);
      v950 = (uint64_t *)a4;
      v1040 = *(_QWORD *)(a4 + 32);
      if (v1293.i64[0] == v1040)
        goto LABEL_1589;
      while (2)
      {
        v1044 = *(std::__shared_weak_count **)(v1040 - 232);
        if (!v1044)
          goto LABEL_1597;
        v1045 = (unint64_t *)&v1044->__shared_owners_;
        do
          v1046 = __ldaxr(v1045);
        while (__stlxr(v1046 - 1, v1045));
        if (!v1046)
        {
          ((void (*)(std::__shared_weak_count *))v1044->__on_zero_shared)(v1044);
          std::__shared_weak_count::__release_weak(v1044);
          v1047 = *(std::__shared_weak_count **)(v1040 - 248);
          if (v1047)
          {
LABEL_1598:
            v1048 = (unint64_t *)&v1047->__shared_owners_;
            do
              v1049 = __ldaxr(v1048);
            while (__stlxr(v1049 - 1, v1048));
            if (!v1049)
            {
              ((void (*)(std::__shared_weak_count *))v1047->__on_zero_shared)(v1047);
              std::__shared_weak_count::__release_weak(v1047);
            }
          }
        }
        else
        {
LABEL_1597:
          v1047 = *(std::__shared_weak_count **)(v1040 - 248);
          if (v1047)
            goto LABEL_1598;
        }
        if (*(_BYTE *)(v1040 - 264))
        {
          if (*(_BYTE *)(v1040 - 272))
          {
            v1050 = *(void **)(v1040 - 296);
            if (v1050)
            {
              *(_QWORD *)(v1040 - 288) = v1050;
              operator delete(v1050);
            }
          }
        }
        v1051 = *(void **)(v1040 - 392);
        if (v1051)
        {
          *(_QWORD *)(v1040 - 384) = v1051;
          operator delete(v1051);
        }
        v1052 = *(void **)(v1040 - 960);
        if (v1052)
        {
          *(_QWORD *)(v1040 - 952) = v1052;
          operator delete(v1052);
        }
        v1053 = *(void **)(v1040 - 984);
        if (v1053)
        {
          *(_QWORD *)(v1040 - 976) = v1053;
          operator delete(v1053);
        }
        if (*(_BYTE *)(v1040 - 1264) && *(char *)(v1040 - 1265) < 0)
        {
          operator delete(*(void **)(v1040 - 1288));
          v1054 = v1040 - 1344;
          v1055 = *(void **)(v1040 - 1344);
          if (v1055)
          {
LABEL_1616:
            *(_QWORD *)(v1040 - 1336) = v1055;
            operator delete(v1055);
          }
        }
        else
        {
          v1054 = v1040 - 1344;
          v1055 = *(void **)(v1040 - 1344);
          if (v1055)
            goto LABEL_1616;
        }
        v1040 = v1054;
        if (v1054 != v1293.i64[0])
          continue;
        break;
      }
      v952 = v1293.i64[0];
      *(_QWORD *)(a4 + 32) = v1293.i64[0];
LABEL_1589:
      if (*(_QWORD *)(a4 + 24) != v952)
      {
        v950 = *(uint64_t **)a4;
        if (!*(_QWORD *)a4)
          break;
        goto LABEL_1478;
      }
LABEL_1590:
      v1041 = v1315;
      v1042 = v950[1];
      v1043 = (uint8x8_t)vcnt_s8(v1315);
      v1043.i16[0] = vaddlv_u8(v1043);
      if (v1043.u32[0] > 1uLL)
      {
        if (v1042 >= *(_QWORD *)&v1315)
          v1042 %= *(_QWORD *)&v1315;
      }
      else
      {
        v1042 &= *(_QWORD *)&v1315 - 1;
      }
      v1056 = (uint64_t *)*v950;
      v1057 = (uint64_t *)*((_QWORD *)v1314 + v1042);
      do
      {
        v1058 = v1057;
        v1057 = (uint64_t *)*v1057;
      }
      while (v1057 != v950);
      if (v1058 == (uint64_t *)&v1316)
        goto LABEL_2122;
      v1059 = v1058[1];
      if (v1043.u32[0] > 1uLL)
      {
        if (v1059 >= *(_QWORD *)&v1315)
          v1059 %= *(_QWORD *)&v1315;
      }
      else
      {
        v1059 &= *(_QWORD *)&v1315 - 1;
      }
      v1060 = *v950;
      if (v1059 == v1042)
      {
LABEL_1636:
        if (v1060)
          goto LABEL_1637;
      }
      else
      {
LABEL_2122:
        if (!v1056)
          goto LABEL_1635;
        v1061 = v1056[1];
        if (v1043.u32[0] > 1uLL)
        {
          if (v1061 >= *(_QWORD *)&v1315)
            v1061 %= *(_QWORD *)&v1315;
        }
        else
        {
          v1061 &= *(_QWORD *)&v1315 - 1;
        }
        v1060 = *v950;
        if (v1061 != v1042)
        {
LABEL_1635:
          *((_QWORD *)v1314 + v1042) = 0;
          v1060 = *v950;
          goto LABEL_1636;
        }
LABEL_1637:
        v1062 = *(_QWORD *)(v1060 + 8);
        if (v1043.u32[0] > 1uLL)
        {
          if (v1062 >= *(_QWORD *)&v1041)
            v1062 %= *(_QWORD *)&v1041;
        }
        else
        {
          v1062 &= *(_QWORD *)&v1041 - 1;
        }
        if (v1062 != v1042)
        {
          *((_QWORD *)v1314 + v1062) = v1058;
          v1060 = *v950;
        }
      }
      *v1058 = v1060;
      *v950 = 0;
      --v1317;
      v1063 = (char *)v950[3];
      if (v1063)
      {
        v1064 = v950;
        v1065 = (char *)v950[4];
        v1066 = v1063;
        if (v1065 == v1063)
        {
LABEL_1674:
          v1064[4] = (uint64_t)v1063;
          operator delete(v1066);
          v950 = v1064;
          goto LABEL_1675;
        }
        while (2)
        {
          v1067 = (std::__shared_weak_count *)*((_QWORD *)v1065 - 29);
          if (!v1067)
            goto LABEL_1651;
          v1068 = (unint64_t *)&v1067->__shared_owners_;
          do
            v1069 = __ldaxr(v1068);
          while (__stlxr(v1069 - 1, v1068));
          if (!v1069)
          {
            ((void (*)(std::__shared_weak_count *))v1067->__on_zero_shared)(v1067);
            std::__shared_weak_count::__release_weak(v1067);
            v1070 = (std::__shared_weak_count *)*((_QWORD *)v1065 - 31);
            if (v1070)
            {
LABEL_1652:
              v1071 = (unint64_t *)&v1070->__shared_owners_;
              do
                v1072 = __ldaxr(v1071);
              while (__stlxr(v1072 - 1, v1071));
              if (!v1072)
              {
                ((void (*)(std::__shared_weak_count *))v1070->__on_zero_shared)(v1070);
                std::__shared_weak_count::__release_weak(v1070);
              }
            }
          }
          else
          {
LABEL_1651:
            v1070 = (std::__shared_weak_count *)*((_QWORD *)v1065 - 31);
            if (v1070)
              goto LABEL_1652;
          }
          if (*(v1065 - 264))
          {
            if (*(v1065 - 272))
            {
              v1073 = (void *)*((_QWORD *)v1065 - 37);
              if (v1073)
              {
                *((_QWORD *)v1065 - 36) = v1073;
                operator delete(v1073);
              }
            }
          }
          v1074 = (void *)*((_QWORD *)v1065 - 49);
          if (v1074)
          {
            *((_QWORD *)v1065 - 48) = v1074;
            operator delete(v1074);
          }
          v1075 = (void *)*((_QWORD *)v1065 - 120);
          if (v1075)
          {
            *((_QWORD *)v1065 - 119) = v1075;
            operator delete(v1075);
          }
          v1076 = (void *)*((_QWORD *)v1065 - 123);
          if (v1076)
          {
            *((_QWORD *)v1065 - 122) = v1076;
            operator delete(v1076);
          }
          if (*(v1065 - 1264) && *(v1065 - 1265) < 0)
          {
            operator delete(*((void **)v1065 - 161));
            v1077 = v1065 - 1344;
            v1078 = (void *)*((_QWORD *)v1065 - 168);
            if (v1078)
            {
LABEL_1670:
              *((_QWORD *)v1065 - 167) = v1078;
              operator delete(v1078);
            }
          }
          else
          {
            v1077 = v1065 - 1344;
            v1078 = (void *)*((_QWORD *)v1065 - 168);
            if (v1078)
              goto LABEL_1670;
          }
          v1065 = v1077;
          if (v1077 == v1063)
          {
            v1066 = (void *)v1064[3];
            goto LABEL_1674;
          }
          continue;
        }
      }
LABEL_1675:
      operator delete(v950);
      v98 = v1296;
      v950 = v1056;
    }
    while (v1056);
    v1079 = v1316;
    if (v1316)
    {
      v1080 = v1320;
      do
      {
        v1081 = v1079[3];
        v1082 = v1079[4];
        while (v1081 != v1082)
        {
          *(double *)(v1081 + 936) = v1080;
          v1083 = **(_DWORD **)(v1081 + 1104);
          if (v1083 == 2)
          {
            v1085 = 0;
            goto LABEL_1688;
          }
          if (v1083 == 6)
          {
            v1085 = 2;
            goto LABEL_1688;
          }
          v1084 = &task_info_out[12];
          if (v1083 == 3)
          {
            v1085 = 1;
LABEL_1688:
            v1084 = &task_info_out[4 * v1085];
          }
          if (v1084 - task_info_out != 12)
          {
            v1086 = *(_QWORD *)(v98 + 8);
            if (*(float *)(v1081 + 24) > *(float *)(v1086 + 1044))
            {
              if (*(_BYTE *)(v1081 + 1329))
                sub_207DED964(v1081, *(float *)(v1086 + 1040));
            }
          }
          *(_BYTE *)(v1081 + 1329) = 0;
          v1081 += 1344;
        }
        v1079 = (_QWORD *)*v1079;
      }
      while (v1079);
    }
  }
  v1087 = (_OWORD *)(v98 + 24);
  *(_OWORD *)(v98 + 24) = v1313;
  if (*(_QWORD *)(v98 + 64))
  {
    sub_207CEC654((uint64_t)v1264, *(_QWORD **)(v98 + 56));
    *(_QWORD *)(v98 + 56) = 0;
    v1088 = *(_QWORD *)(v98 + 48);
    if (v1088)
    {
      for (i3 = 0; i3 != v1088; ++i3)
        *((_QWORD *)*v1264 + i3) = 0;
    }
    *(_QWORD *)(v98 + 64) = 0;
  }
  v1090 = v1314;
  v1314 = 0;
  v1091 = *v1264;
  *v1264 = v1090;
  if (v1091)
    operator delete(v1091);
  v1092 = v1315;
  v1093 = v1316;
  *(_QWORD *)(v98 + 56) = v1316;
  v1094 = (_QWORD *)(v98 + 56);
  *(int8x8_t *)(v98 + 48) = v1092;
  v1315 = 0;
  v1095 = v1317;
  *(_QWORD *)(v98 + 64) = v1317;
  *(_DWORD *)(v98 + 72) = v1318;
  if (v1095)
  {
    v1096 = v1093[1];
    if ((*(_QWORD *)&v1092 & (*(_QWORD *)&v1092 - 1)) != 0)
    {
      if (v1096 >= *(_QWORD *)&v1092)
        v1096 %= *(_QWORD *)&v1092;
    }
    else
    {
      v1096 &= *(_QWORD *)&v1092 - 1;
    }
    *((_QWORD *)*v1264 + v1096) = v1094;
    v1316 = 0;
    v1317 = 0;
  }
  v1097 = *(_QWORD *)(v98 + 8);
  *(_OWORD *)(v1097 + 1120) = *v1087;
  if ((_OWORD *)(v1097 + 1120) != v1087)
  {
    *(_DWORD *)(v1097 + 1168) = *(_DWORD *)(v98 + 72);
    sub_207D2E6DC((_QWORD *)(v1097 + 1136), *(uint64_t **)(v98 + 56), 0);
  }
  v1098 = (_QWORD *)(*(_QWORD *)(v98 + 8) + 1192);
LABEL_1711:
  v1098 = (_QWORD *)*v1098;
  if (v1098)
  {
    v1100 = v1098[2];
    v1099 = *(int8x8_t *)(v98 + 48);
    if (!*(_QWORD *)&v1099)
      goto LABEL_1710;
    v1101 = (uint8x8_t)vcnt_s8(v1099);
    v1101.i16[0] = vaddlv_u8(v1101);
    if (v1101.u32[0] > 1uLL)
    {
      v1102 = v1098[2];
      if (v1100 >= *(_QWORD *)&v1099)
        v1102 = v1100 % *(_QWORD *)&v1099;
    }
    else
    {
      v1102 = (*(_QWORD *)&v1099 - 1) & v1100;
    }
    v1103 = (_QWORD *)*((_QWORD *)*v1264 + v1102);
    if (!v1103 || (v1104 = (_QWORD *)*v1103) == 0)
    {
LABEL_1709:
      v1099.i32[0] = 0;
      goto LABEL_1710;
    }
    v1105 = *(_QWORD *)&v1099 - 1;
    if (v1101.u32[0] < 2uLL)
    {
      while (1)
      {
        v1106 = v1104[1];
        if (v1100 == v1106)
        {
          if (v1104[2] == v1100)
            goto LABEL_1733;
        }
        else if ((v1106 & v1105) != v1102)
        {
          goto LABEL_1709;
        }
        v1104 = (_QWORD *)*v1104;
        if (!v1104)
          goto LABEL_1709;
      }
    }
    while (1)
    {
      v1107 = v1104[1];
      if (v1100 == v1107)
      {
        if (v1104[2] == v1100)
        {
LABEL_1733:
          if (v1101.u32[0] > 1uLL)
          {
            v1108 = v1098[2];
            if (v1100 >= *(_QWORD *)&v1099)
              v1108 = v1100 % *(_QWORD *)&v1099;
          }
          else
          {
            v1108 = v1105 & v1100;
          }
          v1109 = (_QWORD *)*((_QWORD *)*v1264 + v1108);
          if (!v1109 || (v1110 = (_QWORD *)*v1109) == 0)
LABEL_2094:
            sub_207CA4018("unordered_map::at: key not found");
          if (v1101.u32[0] < 2uLL)
          {
            while (1)
            {
              v1111 = v1110[1];
              if (v1100 == v1111)
              {
                if (v1110[2] == v1100)
                  goto LABEL_1745;
              }
              else if ((v1111 & v1105) != v1108)
              {
                goto LABEL_2094;
              }
              v1110 = (_QWORD *)*v1110;
              if (!v1110)
                goto LABEL_2094;
            }
          }
          while (2)
          {
            v1112 = v1110[1];
            if (v1100 != v1112)
            {
              if (v1112 >= *(_QWORD *)&v1099)
                v1112 %= *(_QWORD *)&v1099;
              if (v1112 != v1108)
                goto LABEL_2094;
LABEL_1747:
              v1110 = (_QWORD *)*v1110;
              if (!v1110)
                goto LABEL_2094;
              continue;
            }
            break;
          }
          if (v1110[2] != v1100)
            goto LABEL_1747;
LABEL_1745:
          v1099.i32[0] = 1022611261 * ((v1110[4] - v1110[3]) >> 6);
LABEL_1710:
          sub_207DCB458((uint64_t *)(v98 + 80), v1100, (float)v1099.u32[0]);
          goto LABEL_1711;
        }
      }
      else
      {
        if (v1107 >= *(_QWORD *)&v1099)
          v1107 %= *(_QWORD *)&v1099;
        if (v1107 != v1102)
          goto LABEL_1709;
      }
      v1104 = (_QWORD *)*v1104;
      if (!v1104)
        goto LABEL_1709;
    }
  }
  sub_207DCB328(v98 + 80, 0);
  v1277 = (_OWORD *)(v98 + 24);
  v1113 = v1320;
  v1114 = *(_QWORD *)(v98 + 8);
  *(double *)(v1114 + 1616) = v1320;
  *(_BYTE *)(v1114 + 1624) = 1;
  v1115 = *(_QWORD *)(v98 + 8);
  if (!*(_BYTE *)(v1115 + 1768))
    goto LABEL_2082;
  v1116 = *(char *)(v1115 + 1767);
  if (v1116 >= 0)
    v1117 = *(unsigned __int8 *)(v1115 + 1767);
  else
    v1117 = *(_QWORD *)(v1115 + 1752);
  v1118 = v1117 + 8;
  if (v1117 + 8 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v1118 >= 0x17)
  {
    v1120 = (v1118 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1118 | 7) != 0x17)
      v1120 = v1118 | 7;
    v1121 = v1120 + 1;
    p_dst = operator new(v1120 + 1);
    v1324 = (std::__shared_weak_count *)(v1117 + 8);
    v1325 = v1121 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v1324 = 0;
    v1325 = 0;
    __dst = 0;
    p_dst = &__dst;
    HIBYTE(v1325) = v1117 + 8;
    if (!v1117)
      goto LABEL_1768;
  }
  if (v1116 >= 0)
    v1122 = (const void *)(v1115 + 1744);
  else
    v1122 = *(const void **)(v1115 + 1744);
  memmove(p_dst, v1122, v1117);
LABEL_1768:
  strcpy((char *)p_dst + v1117, ".result.");
  v1123 = (_QWORD *)*v1094;
  if (!*v1094)
    goto LABEL_2080;
  while (2)
  {
    v1286 = v1123;
    v1125 = v1123[3];
    v1124 = v1123[4];
    v1297 = v1124;
    while (2)
    {
      if (v1125 != v1124)
      {
        v1126 = *(_QWORD *)(v1125 + 40);
        v1310 = v1125;
        std::to_string((std::string *)v1341, *(_QWORD *)(v1125 + 32));
        if (v1325 >= 0)
          v1127 = (char *)&__dst;
        else
          v1127 = (char *)__dst;
        if (v1325 >= 0)
          v1128 = HIBYTE(v1325);
        else
          v1128 = (size_t)v1324;
        if (v1341[23] >= 0)
          v1129 = v1341[23];
        else
          v1129 = *(_QWORD *)&v1341[8];
        if (v1341[23] >= 0)
          v1130 = 22;
        else
          v1130 = (*(_QWORD *)&v1341[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v1130 - v1129 < v1128)
        {
          v1131 = v1129 + v1128;
          if (0x7FFFFFFFFFFFFFF6 - v1130 < v1129 + v1128 - v1130)
            sub_207C95C50();
          if (v1341[23] >= 0)
            v1132 = v1341;
          else
            v1132 = *(_BYTE **)v1341;
          v1133 = 0x7FFFFFFFFFFFFFF7;
          if (v1130 < 0x3FFFFFFFFFFFFFF3)
          {
            v1134 = 2 * v1130;
            if (v1131 > 2 * v1130)
              v1134 = v1129 + v1128;
            if (v1134 >= 0x17)
            {
              v1140 = (v1134 & 0xFFFFFFFFFFFFFFF8) + 8;
              v1141 = v1134 | 7;
              if (v1141 == 23)
                v1141 = v1140;
              v1133 = v1141 + 1;
            }
            else
            {
              v1133 = 23;
            }
          }
          v1142 = (char *)operator new(v1133);
          memcpy(v1142, v1127, v1128);
          if (v1129)
            memmove(&v1142[v1128], v1132, v1129);
          if (v1130 != 22)
            operator delete(v1132);
          *(_QWORD *)&v1341[16] = v1133 | 0x8000000000000000;
          *(_QWORD *)v1341 = v1142;
          *(_QWORD *)&v1341[8] = v1129 + v1128;
          v1139 = &v1142[v1131];
          goto LABEL_1820;
        }
        if (v1128)
        {
          if (v1341[23] >= 0)
            v1135 = v1341;
          else
            v1135 = *(char **)v1341;
          if (v1129)
          {
            v1136 = &v1135[v1129] <= v1127 || v1135 > v1127;
            if (v1136)
              v1137 = 0;
            else
              v1137 = v1128;
            v1127 += v1137;
            memmove(&v1135[v1128], v1135, v1129);
          }
          memmove(v1135, v1127, v1128);
          v1138 = v1129 + v1128;
          if ((v1341[23] & 0x80000000) != 0)
            *(_QWORD *)&v1341[8] = v1129 + v1128;
          else
            v1341[23] = v1138 & 0x7F;
          v1139 = &v1135[v1138];
LABEL_1820:
          *v1139 = 0;
        }
        v1349 = *(_QWORD *)&v1341[16];
        *(_OWORD *)task_info_outCnt = *(_OWORD *)v1341;
        memset(v1341, 0, 24);
        if ((SHIBYTE(v1349) & 0x80000000) == 0)
        {
          v1143 = HIBYTE(v1349);
          v1144 = task_info_outCnt;
          if (HIBYTE(v1349) == 22)
          {
            v1145 = 23;
            v1146 = 22;
            goto LABEL_1827;
          }
LABEL_1838:
          *((_BYTE *)v1144 + v1143) = 46;
          v1152 = v1143 + 1;
          if (SHIBYTE(v1349) < 0)
            *(_QWORD *)&task_info_outCnt[2] = v1152;
          else
            HIBYTE(v1349) = v1152 & 0x7F;
          v1153 = (char *)v1144 + v1152;
LABEL_1845:
          *v1153 = 0;
          *(_OWORD *)task_info_out = *(_OWORD *)task_info_outCnt;
          *(_QWORD *)&task_info_out[16] = v1349;
          v1349 = 0;
          memset(task_info_outCnt, 0, sizeof(task_info_outCnt));
          std::to_string((std::string *)v1332, v1126);
          v1154 = v1332[23];
          if (v1332[23] >= 0)
            v1155 = v1332;
          else
            v1155 = *(_BYTE **)v1332;
          if (v1332[23] >= 0)
            v1156 = v1332[23];
          else
            v1156 = *(_QWORD *)&v1332[8];
          if (task_info_out[23] >= 0)
            v1157 = 22;
          else
            v1157 = (*(_QWORD *)&task_info_out[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (task_info_out[23] >= 0)
            v1158 = task_info_out[23];
          else
            v1158 = *(_QWORD *)&task_info_out[8];
          if (v1157 - v1158 >= v1156)
          {
            if (v1156)
            {
              if (task_info_out[23] >= 0)
                v1163 = task_info_out;
              else
                v1163 = *(_BYTE **)task_info_out;
              memmove(&v1163[v1158], v1155, v1156);
              v1164 = v1158 + v1156;
              if ((task_info_out[23] & 0x80000000) != 0)
                *(_QWORD *)&task_info_out[8] = v1158 + v1156;
              else
                task_info_out[23] = v1164 & 0x7F;
              v1165 = &v1163[v1164];
              goto LABEL_1882;
            }
          }
          else
          {
            v1159 = v1158 + v1156;
            if (0x7FFFFFFFFFFFFFF6 - v1157 < v1158 + v1156 - v1157)
              sub_207C95C50();
            if (task_info_out[23] >= 0)
              v1160 = task_info_out;
            else
              v1160 = *(_BYTE **)task_info_out;
            v1161 = 0x7FFFFFFFFFFFFFF7;
            if (v1157 < 0x3FFFFFFFFFFFFFF3)
            {
              v1162 = 2 * v1157;
              if (v1159 > 2 * v1157)
                v1162 = v1158 + v1156;
              if (v1162 >= 0x17)
              {
                v1166 = (v1162 & 0xFFFFFFFFFFFFFFF8) + 8;
                v1167 = v1162 | 7;
                if (v1167 == 23)
                  v1167 = v1166;
                v1161 = v1167 + 1;
              }
              else
              {
                v1161 = 23;
              }
            }
            v1168 = (char *)operator new(v1161);
            v1169 = v1168;
            if (v1158)
              memmove(v1168, v1160, v1158);
            memcpy(&v1169[v1158], v1155, v1156);
            if (v1157 != 22)
              operator delete(v1160);
            *(_QWORD *)&task_info_out[16] = v1161 | 0x8000000000000000;
            *(_QWORD *)task_info_out = v1169;
            *(_QWORD *)&task_info_out[8] = v1158 + v1156;
            v1165 = &v1169[v1159];
LABEL_1882:
            *v1165 = 0;
            v1154 = v1332[23];
          }
          v1335 = *(_OWORD *)task_info_out;
          v1336[0] = *(void **)&task_info_out[16];
          memset(task_info_out, 0, 24);
          if (v1154 < 0 && (operator delete(*(void **)v1332), (task_info_out[23] & 0x80000000) != 0))
          {
            operator delete(*(void **)task_info_out);
            if (SHIBYTE(v1349) < 0)
              goto LABEL_1924;
LABEL_1886:
            if ((v1341[23] & 0x80000000) != 0)
LABEL_1925:
              operator delete(*(void **)v1341);
          }
          else
          {
            if ((SHIBYTE(v1349) & 0x80000000) == 0)
              goto LABEL_1886;
LABEL_1924:
            operator delete(*(void **)task_info_outCnt);
            if ((v1341[23] & 0x80000000) != 0)
              goto LABEL_1925;
          }
          v1170 = (_OWORD *)v1335;
          if (SHIBYTE(v1336[0]) >= 0)
            v1171 = &v1335;
          else
            v1171 = (__int128 *)v1335;
          if (SHIBYTE(v1336[0]) >= 0)
            v1172 = HIBYTE(v1336[0]);
          else
            v1172 = *((_QWORD *)&v1335 + 1);
          v1173 = v1172 + 9;
          memset(v1341, 0, 24);
          if (v1172 + 9 > 0x7FFFFFFFFFFFFFF7)
            sub_207C95C50();
          if (v1173 < 0x17)
          {
            qmemcpy(v1341, "cv3d.odt.", 9);
            v1341[23] = 9;
            v1179 = v1341;
            v1178 = 0x74646F2E64337663;
          }
          else
          {
            v1174 = v1173 | 7;
            v108 = (v1173 | 7) == 23;
            v1175 = (v1173 & 0xFFFFFFFFFFFFFFF8) + 8;
            if (!v108)
              v1175 = v1174;
            v1176 = v1175 + 1;
            v1177 = operator new(v1175 + 1);
            v1178 = (uint64_t)v1177;
            *v1177 = 0;
            *(_QWORD *)&v1341[16] = v1176 | 0x8000000000000000;
            *(_OWORD *)v1341 = (unint64_t)v1177;
            if ((v1176 & 0x7FFFFFFFFFFFFFFFLL) - 1 >= 9)
            {
              v1177[8] = 46;
              *(_QWORD *)v1177 = *(_QWORD *)"cv3d.odt.";
              *(_QWORD *)&v1341[8] = 9;
              v1179 = v1177;
            }
            else
            {
              v1179 = operator new(0x17uLL);
              v1179[8] = 46;
              *(_QWORD *)v1179 = *(_QWORD *)"cv3d.odt.";
              operator delete((void *)v1178);
              *(_QWORD *)v1341 = v1179;
              *(_OWORD *)&v1341[8] = xmmword_208233D00;
              v1178 = (uint64_t)v1179;
            }
          }
          v1179[9] = 0;
          if (v1341[23] >= 0)
            v1180 = 22;
          else
            v1180 = (*(_QWORD *)&v1341[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v1341[23] >= 0)
            v1181 = v1341[23];
          else
            v1181 = *(_QWORD *)&v1341[8];
          if (v1180 - v1181 >= v1172)
          {
            if (v1172)
            {
              if (v1341[23] >= 0)
                v1186 = v1341;
              else
                v1186 = (_BYTE *)v1178;
              memmove(&v1186[v1181], v1171, v1172);
              v1187 = v1181 + v1172;
              if ((v1341[23] & 0x80000000) != 0)
                *(_QWORD *)&v1341[8] = v1181 + v1172;
              else
                v1341[23] = v1187 & 0x7F;
              v1188 = &v1186[v1187];
              goto LABEL_1934;
            }
          }
          else
          {
            v1182 = v1181 + v1172;
            if (0x7FFFFFFFFFFFFFF6 - v1180 < v1181 + v1172 - v1180)
              sub_207C95C50();
            v1183 = v1170;
            if (v1341[23] >= 0)
              v1178 = (uint64_t)v1341;
            v1184 = 0x7FFFFFFFFFFFFFF7;
            if (v1180 < 0x3FFFFFFFFFFFFFF3)
            {
              v1185 = 2 * v1180;
              if (v1182 > 2 * v1180)
                v1185 = v1181 + v1172;
              if (v1185 >= 0x17)
              {
                v1189 = (v1185 & 0xFFFFFFFFFFFFFFF8) + 8;
                v1190 = v1185 | 7;
                if (v1190 == 23)
                  v1190 = v1189;
                v1184 = v1190 + 1;
              }
              else
              {
                v1184 = 23;
              }
            }
            v1191 = (char *)operator new(v1184);
            v1192 = v1191;
            if (v1181)
              memcpy(v1191, (const void *)v1178, v1181);
            memcpy(&v1192[v1181], v1171, v1172);
            if (v1180 != 22)
              operator delete((void *)v1178);
            *(_QWORD *)&v1341[16] = v1184 | 0x8000000000000000;
            *(_QWORD *)v1341 = v1192;
            *(_QWORD *)&v1341[8] = v1181 + v1172;
            v1188 = &v1192[v1182];
            v1170 = v1183;
LABEL_1934:
            *v1188 = 0;
          }
          sub_207CF7E1C();
          sub_207CF7B20();
          if (os_variant_has_internal_diagnostics())
          {
            sub_207F0D4B0();
            v1193 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1193 + 24))(v1193))
            {
              kdebug_trace();
              LODWORD(v1390) = *(_DWORD *)(v1310 + 88);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1193 + 24))(v1193))
              {
                *(_QWORD *)v1332 = (uint64_t)(v1113 * 1000000000.0);
                v1291 = v1291 & 0xFFFFFFFFFFFFFF00 | 2;
                *(_QWORD *)&v1332[8] = v1291;
                v1194 = sub_207F0D4B0();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1193 + 24))(v1193))
                {
                  v1195 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1193 + 56))(v1193);
                  strcpy(task_info_out, "confidence");
                  *(_WORD *)&task_info_out[23] = 266;
                  sub_207D47484(task_info_outCnt, (int *)&v1390, (__int128 *)task_info_out, (__int128 *)v1332);
                  sub_207D472C0((uint64_t)v1194, v1195, (uint64_t)task_info_outCnt);
                  v1196 = (std::__shared_weak_count *)v1349;
                  if (v1349)
                  {
                    v1197 = (unint64_t *)(v1349 + 8);
                    do
                      v1198 = __ldaxr(v1197);
                    while (__stlxr(v1198 - 1, v1197));
                    if (!v1198)
                    {
                      ((void (*)(std::__shared_weak_count *))v1196->__on_zero_shared)(v1196);
                      std::__shared_weak_count::__release_weak(v1196);
                    }
                  }
                  if (task_info_out[24] && (task_info_out[23] & 0x80000000) != 0)
                    operator delete(*(void **)task_info_out);
                }
              }
              kdebug_trace();
            }
          }
          if ((v1341[23] & 0x80000000) != 0)
            operator delete(*(void **)v1341);
          if (SHIBYTE(v1336[0]) >= 0)
            v1199 = &v1335;
          else
            v1199 = v1170;
          if (SHIBYTE(v1336[0]) >= 0)
            v1200 = HIBYTE(v1336[0]);
          else
            v1200 = *((_QWORD *)&v1335 + 1);
          v1201 = v1200 + 9;
          memset(v1341, 0, 24);
          if (v1200 + 9 > 0x7FFFFFFFFFFFFFF7)
            sub_207C95C50();
          if (v1201 < 0x17)
          {
            qmemcpy(v1341, "cv3d.odt.", 9);
            v1341[23] = 9;
            v1207 = v1341;
            v1206 = 0x74646F2E64337663;
          }
          else
          {
            v1202 = v1201 | 7;
            v108 = (v1201 | 7) == 23;
            v1203 = (v1201 & 0xFFFFFFFFFFFFFFF8) + 8;
            if (!v108)
              v1203 = v1202;
            v1204 = v1203 + 1;
            v1205 = operator new(v1203 + 1);
            v1206 = (uint64_t)v1205;
            *v1205 = 0;
            *(_QWORD *)&v1341[16] = v1204 | 0x8000000000000000;
            *(_OWORD *)v1341 = (unint64_t)v1205;
            if ((v1204 & 0x7FFFFFFFFFFFFFFFLL) - 1 >= 9)
            {
              v1205[8] = 46;
              *(_QWORD *)v1205 = *(_QWORD *)"cv3d.odt.";
              *(_QWORD *)&v1341[8] = 9;
              v1207 = v1205;
            }
            else
            {
              v1207 = operator new(0x17uLL);
              v1207[8] = 46;
              *(_QWORD *)v1207 = *(_QWORD *)"cv3d.odt.";
              operator delete((void *)v1206);
              *(_QWORD *)v1341 = v1207;
              *(_OWORD *)&v1341[8] = xmmword_208233D00;
              v1206 = (uint64_t)v1207;
            }
          }
          v1207[9] = 0;
          if (v1341[23] >= 0)
            v1208 = 22;
          else
            v1208 = (*(_QWORD *)&v1341[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v1341[23] >= 0)
            v1209 = v1341[23];
          else
            v1209 = *(_QWORD *)&v1341[8];
          if (v1208 - v1209 >= v1200)
          {
            if (v1200)
            {
              if (v1341[23] >= 0)
                v1214 = v1341;
              else
                v1214 = (_BYTE *)v1206;
              memmove(&v1214[v1209], v1199, v1200);
              v1215 = v1209 + v1200;
              if ((v1341[23] & 0x80000000) != 0)
                *(_QWORD *)&v1341[8] = v1209 + v1200;
              else
                v1341[23] = v1215 & 0x7F;
              v1216 = &v1214[v1215];
              goto LABEL_1994;
            }
          }
          else
          {
            v1210 = v1209 + v1200;
            if (0x7FFFFFFFFFFFFFF6 - v1208 < v1209 + v1200 - v1208)
              sub_207C95C50();
            v1211 = v1170;
            if (v1341[23] >= 0)
              v1206 = (uint64_t)v1341;
            v1212 = 0x7FFFFFFFFFFFFFF7;
            if (v1208 < 0x3FFFFFFFFFFFFFF3)
            {
              v1213 = 2 * v1208;
              if (v1210 > 2 * v1208)
                v1213 = v1209 + v1200;
              if (v1213 >= 0x17)
              {
                v1217 = (v1213 & 0xFFFFFFFFFFFFFFF8) + 8;
                v1218 = v1213 | 7;
                if (v1218 == 23)
                  v1218 = v1217;
                v1212 = v1218 + 1;
              }
              else
              {
                v1212 = 23;
              }
            }
            v1219 = (char *)operator new(v1212);
            v1220 = v1219;
            if (v1209)
              memcpy(v1219, (const void *)v1206, v1209);
            memcpy(&v1220[v1209], v1199, v1200);
            if (v1208 != 22)
              operator delete((void *)v1206);
            *(_QWORD *)&v1341[16] = v1212 | 0x8000000000000000;
            *(_QWORD *)v1341 = v1220;
            *(_QWORD *)&v1341[8] = v1209 + v1200;
            v1216 = &v1220[v1210];
            v1170 = v1211;
LABEL_1994:
            *v1216 = 0;
          }
          sub_207CF7E1C();
          sub_207CF7B20();
          if (os_variant_has_internal_diagnostics())
          {
            sub_207F0D4B0();
            v1221 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1221 + 24))(v1221))
            {
              kdebug_trace();
              LODWORD(v1390) = *(_DWORD *)(v1310 + 92);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1221 + 24))(v1221))
              {
                *(_QWORD *)v1332 = (uint64_t)(v1113 * 1000000000.0);
                v1287 = v1287 & 0xFFFFFFFFFFFFFF00 | 2;
                *(_QWORD *)&v1332[8] = v1287;
                v1222 = sub_207F0D4B0();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1221 + 24))(v1221))
                {
                  v1223 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1221 + 56))(v1221);
                  strcpy(task_info_out, "visibility");
                  *(_WORD *)&task_info_out[23] = 266;
                  sub_207D47484(task_info_outCnt, (int *)&v1390, (__int128 *)task_info_out, (__int128 *)v1332);
                  sub_207D472C0((uint64_t)v1222, v1223, (uint64_t)task_info_outCnt);
                  v1224 = (std::__shared_weak_count *)v1349;
                  if (v1349)
                  {
                    v1225 = (unint64_t *)(v1349 + 8);
                    do
                      v1226 = __ldaxr(v1225);
                    while (__stlxr(v1226 - 1, v1225));
                    if (!v1226)
                    {
                      ((void (*)(std::__shared_weak_count *))v1224->__on_zero_shared)(v1224);
                      std::__shared_weak_count::__release_weak(v1224);
                    }
                  }
                  if (task_info_out[24] && (task_info_out[23] & 0x80000000) != 0)
                    operator delete(*(void **)task_info_out);
                }
              }
              kdebug_trace();
            }
          }
          if ((v1341[23] & 0x80000000) != 0)
            operator delete(*(void **)v1341);
          if (SHIBYTE(v1336[0]) >= 0)
            v1227 = &v1335;
          else
            v1227 = v1170;
          if (SHIBYTE(v1336[0]) >= 0)
            v1228 = HIBYTE(v1336[0]);
          else
            v1228 = *((_QWORD *)&v1335 + 1);
          v1229 = v1228 + 9;
          memset(v1332, 0, 24);
          if (v1228 + 9 > 0x7FFFFFFFFFFFFFF7)
            sub_207C95C50();
          if (v1229 < 0x17)
          {
            qmemcpy(v1332, "cv3d.odt.", 9);
            v1332[23] = 9;
            v1235 = v1332;
            v1234 = 0x74646F2E64337663;
          }
          else
          {
            v1230 = v1229 | 7;
            v108 = (v1229 | 7) == 23;
            v1231 = (v1229 & 0xFFFFFFFFFFFFFFF8) + 8;
            if (!v108)
              v1231 = v1230;
            v1232 = v1231 + 1;
            v1233 = operator new(v1231 + 1);
            v1234 = (uint64_t)v1233;
            *v1233 = 0;
            *(_QWORD *)&v1332[16] = v1232 | 0x8000000000000000;
            *(_OWORD *)v1332 = (unint64_t)v1233;
            if ((v1232 & 0x7FFFFFFFFFFFFFFFLL) - 1 >= 9)
            {
              v1233[8] = 46;
              *(_QWORD *)v1233 = *(_QWORD *)"cv3d.odt.";
              *(_QWORD *)&v1332[8] = 9;
              v1235 = v1233;
            }
            else
            {
              v1235 = operator new(0x17uLL);
              v1235[8] = 46;
              *(_QWORD *)v1235 = *(_QWORD *)"cv3d.odt.";
              operator delete((void *)v1234);
              *(_QWORD *)v1332 = v1235;
              *(_OWORD *)&v1332[8] = xmmword_208233D00;
              v1234 = (uint64_t)v1235;
            }
          }
          v1235[9] = 0;
          if (v1332[23] >= 0)
            v1236 = 22;
          else
            v1236 = (*(_QWORD *)&v1332[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v1332[23] >= 0)
            v1237 = v1332[23];
          else
            v1237 = *(_QWORD *)&v1332[8];
          if (v1236 - v1237 >= v1228)
          {
            if (v1228)
            {
              if (v1332[23] >= 0)
                v1242 = v1332;
              else
                v1242 = (_BYTE *)v1234;
              memmove(&v1242[v1237], v1227, v1228);
              v1243 = v1237 + v1228;
              if ((v1332[23] & 0x80000000) != 0)
                *(_QWORD *)&v1332[8] = v1237 + v1228;
              else
                v1332[23] = v1243 & 0x7F;
              v1244 = &v1242[v1243];
              goto LABEL_2054;
            }
          }
          else
          {
            v1238 = v1237 + v1228;
            if (0x7FFFFFFFFFFFFFF6 - v1236 < v1237 + v1228 - v1236)
              sub_207C95C50();
            v1239 = v1170;
            if (v1332[23] >= 0)
              v1234 = (uint64_t)v1332;
            v1240 = 0x7FFFFFFFFFFFFFF7;
            if (v1236 < 0x3FFFFFFFFFFFFFF3)
            {
              v1241 = 2 * v1236;
              if (v1238 > 2 * v1236)
                v1241 = v1237 + v1228;
              if (v1241 >= 0x17)
              {
                v1245 = (v1241 & 0xFFFFFFFFFFFFFFF8) + 8;
                v1246 = v1241 | 7;
                if (v1246 == 23)
                  v1246 = v1245;
                v1240 = v1246 + 1;
              }
              else
              {
                v1240 = 23;
              }
            }
            v1247 = (char *)operator new(v1240);
            v1248 = v1247;
            if (v1237)
              memcpy(v1247, (const void *)v1234, v1237);
            memcpy(&v1248[v1237], v1227, v1228);
            if (v1236 != 22)
              operator delete((void *)v1234);
            *(_QWORD *)&v1332[16] = v1240 | 0x8000000000000000;
            *(_QWORD *)v1332 = v1248;
            *(_QWORD *)&v1332[8] = v1237 + v1228;
            v1244 = &v1248[v1238];
            v1170 = v1239;
LABEL_2054:
            *v1244 = 0;
          }
          sub_207CF7E1C();
          sub_207CF7B20();
          v1249 = v1310;
          if (os_variant_has_internal_diagnostics())
          {
            sub_207F0D4B0();
            v1250 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1250 + 24))(v1250))
            {
              kdebug_trace();
              v1251 = **(_DWORD **)(v1310 + 1104);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1250 + 24))(v1250))
              {
                v1252 = sub_207F0D4B0();
                a4 = a4 & 0xFFFFFFFFFFFFFF00 | 2;
                v1293.i64[0] = v1293.i64[0] & 0xFFFF000000000000 | 0x6574617473;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1250 + 24))(v1250))
                {
                  v1253 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1250 + 56))(v1250);
                  v1254 = mach_continuous_time();
                  v1255 = atomic_load((unsigned __int8 *)&qword_2545308B0);
                  if ((v1255 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
                  {
                    mach_timebase_info((mach_timebase_info_t)task_info_outCnt);
                    LODWORD(v1260) = task_info_outCnt[0];
                    LODWORD(v1261) = task_info_outCnt[1];
                    *(double *)&qword_2545308A8 = (double)v1260 / (double)v1261;
                    __cxa_guard_release(&qword_2545308B0);
                  }
                  *(_QWORD *)task_info_out = llround(*(double *)&qword_2545308A8 * (double)v1254);
                  *(_QWORD *)&task_info_out[8] = 2;
                  *(_QWORD *)&task_info_out[16] = v1293.i64[0];
                  *(_QWORD *)&task_info_out[24] = v1390;
                  *(_QWORD *)&task_info_out[31] = *(_QWORD *)((char *)&v1390 + 7);
                  *(_WORD *)&task_info_out[39] = 261;
                  *(_QWORD *)&v1390 = 0;
                  *(_QWORD *)((char *)&v1390 + 7) = 0;
                  task_info_out[48] = 0;
                  v1393 = 0;
                  v1395 = (uint64_t)(v1113 * 1000000000.0);
                  v1396 = a4;
                  LOBYTE(v1397) = 1;
                  v1399 = 0;
                  BYTE4(v1404) = 0;
                  v1407 = 0;
                  v1408 = 0;
                  LOBYTE(task_info_outCnt[0]) = 2;
                  v1256 = operator new(4uLL);
                  *(_QWORD *)&task_info_outCnt[2] = v1256;
                  *v1256 = v1251;
                  v1350 = v1256 + 1;
                  v1349 = (unint64_t)(v1256 + 1);
                  sub_207D47708(v1341, (char *)task_info_outCnt, (uint64_t)task_info_out);
                  if (*(_QWORD *)&task_info_outCnt[2])
                    operator delete(*(void **)&task_info_outCnt[2]);
                  sub_207D49CF4((uint64_t)task_info_out);
                  sub_207D472C0((uint64_t)v1252, v1253, (uint64_t)v1341);
                  v1257 = *(std::__shared_weak_count **)&v1341[16];
                  if (*(_QWORD *)&v1341[16])
                  {
                    v1258 = (unint64_t *)(*(_QWORD *)&v1341[16] + 8);
                    do
                      v1259 = __ldaxr(v1258);
                    while (__stlxr(v1259 - 1, v1258));
                    if (!v1259)
                    {
                      ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
                      std::__shared_weak_count::__release_weak(v1257);
                    }
                  }
                  v1293.i64[0] = 0;
                }
                v1249 = v1310;
              }
              kdebug_trace();
            }
          }
          if ((v1332[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v1332);
            if (SHIBYTE(v1336[0]) < 0)
              goto LABEL_2072;
          }
          else if (SHIBYTE(v1336[0]) < 0)
          {
LABEL_2072:
            operator delete(v1170);
          }
          v1125 = v1249 + 1344;
          v1124 = v1297;
          continue;
        }
        v1143 = *(_QWORD *)&task_info_outCnt[2];
        v1145 = v1349 & 0x7FFFFFFFFFFFFFFFLL;
        v1146 = (v1349 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v1146 != *(_QWORD *)&task_info_outCnt[2])
        {
          v1144 = *(mach_msg_type_number_t **)task_info_outCnt;
          goto LABEL_1838;
        }
        if (v1145 == 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        v1144 = *(mach_msg_type_number_t **)task_info_outCnt;
        v1147 = 0x7FFFFFFFFFFFFFF7;
        if (v1146 < 0x3FFFFFFFFFFFFFF3)
        {
LABEL_1827:
          v1148 = 2 * v1146;
          if (v1145 > 2 * v1146)
            v1148 = v1145;
          v1149 = (v1148 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v1148 | 7) != 0x17)
            v1149 = v1148 | 7;
          if (v1148 >= 0x17)
            v1147 = v1149 + 1;
          else
            v1147 = 23;
        }
        v1150 = operator new(v1147);
        v1151 = v1150;
        if (v1146)
        {
          memmove(v1150, v1144, v1146);
          v1151[v1146] = 46;
          if (v1146 == 22)
            goto LABEL_1844;
        }
        else
        {
          *v1150 = 46;
        }
        operator delete(v1144);
LABEL_1844:
        v1349 = v1147 | 0x8000000000000000;
        *(_QWORD *)task_info_outCnt = v1151;
        *(_QWORD *)&task_info_outCnt[2] = v1145;
        v1153 = &v1151[v1145];
        goto LABEL_1845;
      }
      break;
    }
    v1123 = (_QWORD *)*v1286;
    if (*v1286)
      continue;
    break;
  }
LABEL_2080:
  if (SHIBYTE(v1325) < 0)
    operator delete(__dst);
LABEL_2082:
  *(_OWORD *)v1298 = *v1277;
  sub_207D08700(v1298 + 16, (uint64_t)v1264);
  *(_BYTE *)(v1298 + 56) = 1;
  v944 = (std::__shared_weak_count *)*((_QWORD *)&v1312 + 1);
  if (*((_QWORD *)&v1312 + 1))
    goto LABEL_1462;
LABEL_1466:
  sub_207CEC654((uint64_t)&v1314, v1316);
  v947 = v1314;
  v1314 = 0;
  if (v947)
    operator delete(v947);
LABEL_1468:
  if (!v1389)
    sub_207CA408C();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1389 + 48))(v1389);
  result = v1389;
  if (v1389 == v1388)
  {
    v949 = 4;
    result = v1388;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v949))();
  }
  else if (v1389)
  {
    v949 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v949))();
  }
  return result;
}

void sub_207D4146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  char a72;

  __cxa_guard_abort(&qword_2545308B0);
  kdebug_trace();
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if ((STACK[0x277] & 0x80) != 0)
    operator delete((void *)STACK[0x260]);
  if (a72 < 0)
    operator delete(a68);
  sub_207C99D78((uint64_t)&a53);
  sub_207D061C4((uint64_t)&a55);
  sub_207C97D64(&STACK[0x858]);
  _Unwind_Resume(a1);
}

void sub_207D41AE8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *__p;
  char v38;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    v2 = (_QWORD *)(a1 + 16);
    while (1)
    {
      while (1)
      {
        v3 = v1[3];
        v4 = v1[4];
        if (v3 == v4)
          break;
        v5 = v3 + 1344;
        while (**(_DWORD **)(v5 - 240) != 5)
        {
          v6 = v5 == v4;
          v5 += 1344;
          if (v6)
            goto LABEL_20;
        }
        v7 = v5 - 1344;
        if (v5 - 1344 != v4 && v5 != v4)
        {
          do
          {
            if (**(_DWORD **)(v5 + 1104) != 5)
            {
              sub_207D463D0(v7, v5);
              v7 += 1344;
            }
            v5 += 1344;
          }
          while (v5 != v4);
          v3 = v1[3];
          v4 = v1[4];
        }
        if (v7 != v4)
        {
          while (1)
          {
            v13 = *(std::__shared_weak_count **)(v4 - 232);
            if (!v13)
              goto LABEL_31;
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
              v16 = *(std::__shared_weak_count **)(v4 - 248);
              if (!v16)
                goto LABEL_37;
            }
            else
            {
LABEL_31:
              v16 = *(std::__shared_weak_count **)(v4 - 248);
              if (!v16)
                goto LABEL_37;
            }
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
LABEL_37:
            if (*(_BYTE *)(v4 - 264))
            {
              if (*(_BYTE *)(v4 - 272))
              {
                v19 = *(void **)(v4 - 296);
                if (v19)
                {
                  *(_QWORD *)(v4 - 288) = v19;
                  operator delete(v19);
                }
              }
            }
            v20 = *(void **)(v4 - 392);
            if (v20)
            {
              *(_QWORD *)(v4 - 384) = v20;
              operator delete(v20);
            }
            v21 = *(void **)(v4 - 960);
            if (v21)
            {
              *(_QWORD *)(v4 - 952) = v21;
              operator delete(v21);
            }
            v22 = *(void **)(v4 - 984);
            if (v22)
            {
              *(_QWORD *)(v4 - 976) = v22;
              operator delete(v22);
            }
            if (*(_BYTE *)(v4 - 1264) && *(char *)(v4 - 1265) < 0)
            {
              operator delete(*(void **)(v4 - 1288));
              v23 = v4 - 1344;
              v24 = *(void **)(v4 - 1344);
              if (!v24)
                goto LABEL_26;
LABEL_50:
              *(_QWORD *)(v4 - 1336) = v24;
              operator delete(v24);
              goto LABEL_26;
            }
            v23 = v4 - 1344;
            v24 = *(void **)(v4 - 1344);
            if (v24)
              goto LABEL_50;
LABEL_26:
            v4 = v23;
            if (v23 == v7)
            {
              v1[4] = v7;
              v3 = v1[3];
              v4 = v7;
              break;
            }
          }
        }
LABEL_20:
        if (v3 == v4)
          break;
        v1 = (_QWORD *)*v1;
        if (!v1)
          return;
      }
      v8 = (_QWORD *)*v1;
      sub_207D46B24((uint64_t)&__p, v2, v1);
      v9 = __p;
      __p = 0;
      if (!v9)
        goto LABEL_83;
      if (v38)
      {
        v10 = v9[3];
        if (v10)
          break;
      }
LABEL_82:
      operator delete(v9);
LABEL_83:
      v1 = v8;
      if (!v8)
        return;
    }
    v11 = v9[4];
    v12 = (void *)v9[3];
    if (v11 == v10)
    {
LABEL_81:
      v9[4] = v10;
      operator delete(v12);
      goto LABEL_82;
    }
    while (1)
    {
      v25 = *(std::__shared_weak_count **)(v11 - 232);
      if (!v25)
        goto LABEL_58;
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        v28 = *(std::__shared_weak_count **)(v11 - 248);
        if (!v28)
          goto LABEL_64;
      }
      else
      {
LABEL_58:
        v28 = *(std::__shared_weak_count **)(v11 - 248);
        if (!v28)
          goto LABEL_64;
      }
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
LABEL_64:
      if (*(_BYTE *)(v11 - 264))
      {
        if (*(_BYTE *)(v11 - 272))
        {
          v31 = *(void **)(v11 - 296);
          if (v31)
          {
            *(_QWORD *)(v11 - 288) = v31;
            operator delete(v31);
          }
        }
      }
      v32 = *(void **)(v11 - 392);
      if (v32)
      {
        *(_QWORD *)(v11 - 384) = v32;
        operator delete(v32);
      }
      v33 = *(void **)(v11 - 960);
      if (v33)
      {
        *(_QWORD *)(v11 - 952) = v33;
        operator delete(v33);
      }
      v34 = *(void **)(v11 - 984);
      if (v34)
      {
        *(_QWORD *)(v11 - 976) = v34;
        operator delete(v34);
      }
      if (*(_BYTE *)(v11 - 1264) && *(char *)(v11 - 1265) < 0)
      {
        operator delete(*(void **)(v11 - 1288));
        v35 = v11 - 1344;
        v36 = *(void **)(v11 - 1344);
        if (!v36)
          goto LABEL_53;
LABEL_77:
        *(_QWORD *)(v11 - 1336) = v36;
        operator delete(v36);
        goto LABEL_53;
      }
      v35 = v11 - 1344;
      v36 = *(void **)(v11 - 1344);
      if (v36)
        goto LABEL_77;
LABEL_53:
      v11 = v35;
      if (v35 == v10)
      {
        v12 = (void *)v9[3];
        goto LABEL_81;
      }
    }
  }
}

void sub_207D41F2C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  if (a1 + 24 != a2)
  {
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
    sub_207D2E6DC((_QWORD *)(a1 + 40), *(uint64_t **)(a2 + 32), 0);
  }
}

void sub_207D41F60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unsigned __int8 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 __p;
  uint64_t v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  __int128 v44;
  char v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  char v51;
  char v52;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    LOBYTE(v44) = 0;
    v52 = 0;
    sub_207D2365C(4u, &v44, (uint64_t)&v32);
    *(_OWORD *)a2 = v32;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v42)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v7 = v35;
      if (v35)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v34;
        v34 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v41)
      {
        v8 = v38;
        *(_QWORD *)(a2 + 64) = v37;
        *(_OWORD *)(a2 + 48) = v36;
        v36 = 0uLL;
        *(_QWORD *)(a2 + 72) = v8;
        *(_OWORD *)(a2 + 80) = v39;
        *(_QWORD *)(a2 + 96) = v40;
        v37 = 0;
        v39 = 0uLL;
        v40 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v7 && SHIBYTE(v34) < 0)
        operator delete((void *)__p);
      if (!v52)
        return;
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v52)
        return;
    }
    if (v51)
    {
      if (v50 < 0)
        operator delete(v49);
      if (v48 < 0)
        operator delete(v47);
    }
    if (v46 && v45 < 0)
      operator delete((void *)v44);
    return;
  }
  sub_207D2C934(v3 + 1096, (uint64_t)&v32);
  if (v43)
  {
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 1192);
    while (1)
    {
      v5 = (_QWORD *)*v5;
      if (!v5)
      {
        *(_BYTE *)(a2 + 120) = 1;
        goto LABEL_52;
      }
      v6 = v5[3];
      if (!v6)
        break;
      sub_207DC41C8(v6, a2);
      if (!*(_BYTE *)(a2 + 120))
        goto LABEL_52;
    }
    LOBYTE(v12) = 0;
    v20 = 0;
    sub_207D2365C(0xCu, &v12, (uint64_t)&v21);
    *(_OWORD *)a2 = v21;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v31)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v10 = v24;
      if (v24)
      {
        *(_OWORD *)(a2 + 16) = v22;
        *(_QWORD *)(a2 + 32) = v23;
        v23 = 0;
        v22 = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v30)
      {
        v11 = v27;
        *(_QWORD *)(a2 + 64) = v26;
        *(_OWORD *)(a2 + 48) = v25;
        v25 = 0uLL;
        *(_QWORD *)(a2 + 72) = v11;
        *(_OWORD *)(a2 + 80) = v28;
        *(_QWORD *)(a2 + 96) = v29;
        v26 = 0;
        v28 = 0uLL;
        v29 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v10 && SHIBYTE(v23) < 0)
        operator delete((void *)v22);
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
    }
    if (v20)
    {
      if (v19)
      {
        if (v18 < 0)
          operator delete(v17);
        if (v16 < 0)
          operator delete(v15);
      }
      if (v14 && v13 < 0)
        operator delete((void *)v12);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
    *(_OWORD *)a2 = v32;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v42)
    {
      *(_BYTE *)(a2 + 40) = 0;
      if (v35)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v34;
        v34 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v41)
      {
        v9 = v38;
        *(_QWORD *)(a2 + 64) = v37;
        *(_OWORD *)(a2 + 48) = v36;
        v36 = 0uLL;
        *(_QWORD *)(a2 + 72) = v9;
        *(_OWORD *)(a2 + 80) = v39;
        *(_QWORD *)(a2 + 96) = v40;
        v37 = 0;
        v39 = 0uLL;
        v40 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
    }
  }
LABEL_52:
  if (!v43 && v42)
  {
    if (v41)
    {
      if (SHIBYTE(v40) < 0)
        operator delete((void *)v39);
      if (SHIBYTE(v37) < 0)
        operator delete((void *)v36);
    }
    if (v35)
    {
      if (SHIBYTE(v34) < 0)
        operator delete((void *)__p);
    }
  }
}

void sub_207D42374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_207CCB148((uint64_t)&a10);
  sub_207D04458((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_207D42390(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_207D423A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_207D04458((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_207D423B8(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  unint64_t v14;
  int8x16_t v16;
  int64x2_t v17;
  float64x2_t v18;
  unint64_t v22;
  float32x4_t *v23;
  unsigned int *v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float32x4_t *v40;
  unint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _DWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  unsigned int **v66;
  _QWORD *v67;
  _QWORD *v68;
  unsigned int *v69;
  unint64_t v70;
  unint64_t v71;
  __int128 *v74;
  int v75;
  __int128 *v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  _OWORD v127[2];
  __int128 v128;
  __int128 v129;
  float64x2_t v130;
  __int128 v131;
  uint64_t v132;

  v4 = *a2;
  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v5 != *(_QWORD *)v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 797, (uint64_t)"calibs.size() == m_->config.num_camera_streams", 46, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_116:
      abort();
    }
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)v6;
    v4 = *a2;
  }
  if (v5 >= 2)
  {
    _D0 = *(_QWORD *)(*v4 + 376);
    _Q1 = *(int64x2_t *)(*v4 + 360);
    v9 = *(float64x2_t *)(*v4 + 328);
    v10 = *(float64x2_t *)(*v4 + 312);
    v11 = *(int64x2_t *)(*v4 + 344);
    _D3 = *(double *)(*v4 + 304);
    _Q4 = *(float64x2_t *)(*v4 + 288);
    v14 = vdupq_laneq_s64(v11, 1).u64[0];
    _Q2 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL);
    v10.f64[1] = *(float64_t *)(*v4 + 336);
    *(_QWORD *)&v9.f64[1] = v14;
    v16 = vextq_s8((int8x16_t)_Q2, (int8x16_t)vdupq_laneq_s64(_Q1, 1), 8uLL);
    v17 = vzip1q_s64(_Q1, (int64x2_t)_Q2);
    v121 = v10;
    v122 = v9;
    v18 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v10, vnegq_f64(_Q4).f64[0]), _Q2, _Q4, 1), v9, _D3, 0);
    _Q1.i64[0] = *(_QWORD *)(*v4 + 368);
    __asm
    {
      FMLS            D2, D1, V4.D[1]
      FMLS            D2, D0, V3.D[0]
    }
    _Q1.i64[0] = vdupq_laneq_s64(v17, 1).u64[0];
    _Q1.i64[1] = v16.i64[0];
    v118 = (float64x2_t)_Q1;
    v117 = (float64x2_t)v17.u64[0];
    v116 = (float64x2_t)v16.u64[1];
    v115 = (float64x2_t)_D0;
    _Q2.f64[1] = 1.0;
    v119 = _Q2;
    v120 = v18;
    v22 = 1;
    do
    {
      v24 = (unsigned int *)(*a2)[2 * v22];
      v25 = *((double *)v24 + 47);
      v26 = *(float64x2_t *)(v24 + 90);
      v27 = *(float64x2_t *)(v24 + 86);
      v28 = *(float64x2_t *)(v24 + 82);
      v29 = *(float64x2_t *)(v24 + 78);
      v30 = *((double *)v24 + 38);
      v31 = *((float64x2_t *)v24 + 18);
      v32 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v29.f64[0]), v118, v29, 1), v122, v28.f64[0]), (float64x2_t)0, v120);
      v33 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v29.f64[0]), v116, v29, 1), v115, v28.f64[0]), (float64x2_t)0, v119);
      v34 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v121, v28, 1), v118, v27.f64[0]), v122, v27, 1), (float64x2_t)0, v120);
      v35 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v117, v28, 1), v116, v27.f64[0]), v115, v27, 1), (float64x2_t)0, v119);
      v36 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v26.f64[0]), v118, v26, 1), v122, v25), (float64x2_t)0, v120);
      v37 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v26.f64[0]), v116, v26, 1), v115, v25), (float64x2_t)0, v119);
      v38 = vaddq_f64(v120, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v31.f64[0]), v118, v31, 1), v122, v30));
      v39 = vaddq_f64(v119, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v31.f64[0]), v116, v31, 1), v115, v30));
      v40 = *(float32x4_t **)(v6 + 1664);
      v41 = *(_QWORD *)(v6 + 1672);
      if ((unint64_t)v40 < v41)
      {
        *v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32), v33);
        v40[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), v35);
        v40[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36), v37);
        v40[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v38), v39);
        v23 = v40 + 4;
      }
      else
      {
        v42 = *(float32x4_t **)(v6 + 1656);
        v43 = ((char *)v40 - (char *)v42) >> 6;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 58)
          sub_207CA420C();
        v45 = v41 - (_QWORD)v42;
        if (v45 >> 5 > v44)
          v44 = v45 >> 5;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFC0)
          v46 = 0x3FFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v107 = v39;
          v108 = v38;
          v109 = v36;
          v110 = v37;
          v111 = v35;
          v112 = v34;
          v113 = v33;
          v114 = v32;
          if (v46 >> 58)
            sub_207CA3AB8();
          v47 = (char *)operator new(v46 << 6);
          v33 = v113;
          v32 = v114;
          v35 = v111;
          v34 = v112;
          v36 = v109;
          v37 = v110;
          v39 = v107;
          v38 = v108;
        }
        else
        {
          v47 = 0;
        }
        v48 = (float32x4_t *)&v47[64 * v43];
        *v48 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32), v33);
        v48[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), v35);
        v48[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36), v37);
        v48[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v38), v39);
        v49 = v48;
        if (v40 != v42)
        {
          do
          {
            v50 = v40[-4];
            v51 = v40[-3];
            v52 = v40[-1];
            v49[-2] = v40[-2];
            v49[-1] = v52;
            v49[-4] = v50;
            v49[-3] = v51;
            v49 -= 4;
            v40 -= 4;
          }
          while (v40 != v42);
          v40 = *(float32x4_t **)(v6 + 1656);
        }
        *(_QWORD *)(v6 + 1656) = v49;
        v23 = v48 + 4;
        *(_QWORD *)(v6 + 1664) = v48 + 4;
        *(_QWORD *)(v6 + 1672) = &v47[64 * v46];
        if (v40)
          operator delete(v40);
      }
      *(_QWORD *)(v6 + 1664) = v23;
      ++v22;
      v6 = *(_QWORD *)(a1 + 8);
    }
    while (v22 < *(_QWORD *)v6);
    v4 = *a2;
  }
  v53 = a2[1];
  if (v4 != v53)
  {
    do
    {
      v55 = *(_QWORD *)(a1 + 8);
      sub_207DF8934(*v4, &v128);
      v56 = *(_QWORD **)(v55 + 1640);
      if ((unint64_t)v56 >= *(_QWORD *)(v55 + 1648))
      {
        v59 = sub_207D09670((char **)(v55 + 1632), (uint64_t *)&v128);
        v60 = (_DWORD *)v128;
        *(_QWORD *)(v55 + 1640) = v59;
        *(_QWORD *)&v128 = 0;
        if (v60)
          sub_207D098B8((int)&v128, v60);
      }
      else
      {
        v57 = v128;
        *v56 = v128;
        if (v57)
        {
          v54 = operator new(0x20uLL);
          v58 = v128;
          *v54 = &off_24C072B78;
          v54[1] = 0;
          v54[2] = 0;
          v54[3] = v58;
        }
        else
        {
          v54 = 0;
        }
        v56[1] = v54;
        *(_QWORD *)(v55 + 1640) = v56 + 2;
      }
      v4 += 2;
    }
    while (v4 != v53);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v61 = *(_QWORD **)(v6 + 1192);
  if (v61)
  {
    do
    {
      v62 = v61[3];
      v63 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v62 + 576) != (uint64_t)(*(_QWORD *)(v63 + 1664) - *(_QWORD *)(v63 + 1656)) >> 6
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/include/ODT/Tracking/Patchbased3dModelTracker.h", 331, (uint64_t)"T_c0cn_vec.size() == cfg_.num_camera_streams", 44, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_116;
      }
      if (v62 + 760 != v63 + 1656)
        sub_207D43AA8((_QWORD *)(v62 + 760), *(char **)(v63 + 1656), *(char **)(v63 + 1664), (uint64_t)(*(_QWORD *)(v63 + 1664) - *(_QWORD *)(v63 + 1656)) >> 6);
      sub_207D37120(v61[3], (_QWORD *)(*(_QWORD *)(a1 + 8) + 1632));
      v61 = (_QWORD *)*v61;
    }
    while (v61);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v64 = *(uint64_t **)(v6 + 1640);
  v65 = *(uint64_t **)(v6 + 1632);
  if (v64 != v65)
  {
    v66 = (unsigned int **)*a2;
    if (a2[1] != *a2)
    {
      v67 = *(_QWORD **)(v6 + 1192);
      if (v67)
      {
        v68 = *(_QWORD **)(v6 + 1192);
        while (*(_BYTE *)(v68[3] + 472))
        {
          v68 = (_QWORD *)*v68;
          if (!v68)
            goto LABEL_111;
        }
        v69 = *v66;
        v70 = *v69;
        v71 = v69[1];
        v124 = 0uLL;
        v125 = 0;
        if ((_DWORD)v71)
          _ZF = (_DWORD)v70 == 0;
        else
          _ZF = 1;
        if (!_ZF)
        {
          __asm { FMOV            V0.2D, #0.5 }
          v123 = _Q0;
          while (1)
          {
            v74 = (__int128 *)*v65;
            if (*v65)
            {
              v75 = *((_DWORD *)v74 + 248);
              if (v75 == -1)
              {
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_120;
                }
                v75 = *((_DWORD *)v74 + 248);
              }
              if (!v75)
              {
                sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
LABEL_120:
                abort();
              }
              v76 = (__int128 *)*v65;
              v77 = *(_DWORD *)(*v65 + 992);
              if (v77 == -1)
              {
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_122;
                }
                v77 = *((_DWORD *)v76 + 248);
                if (v77 <= 7)
                  goto LABEL_65;
              }
              else if (v77 <= 7)
              {
LABEL_65:
                if (v77 > 3)
                {
                  v84 = v77 > 5;
                  v78 = (uint64_t)v76 + 168;
                  if (v84)
                    v78 = (uint64_t)v76 + 168;
                }
                else
                {
                  if (v77 <= 1)
                  {
                    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
LABEL_122:
                    abort();
                  }
                  v78 = (uint64_t)v76 + 168;
                }
                goto LABEL_83;
              }
              v83 = (uint64_t)v76 + 168;
              if (v77 <= 0xD)
                v83 = (uint64_t)v76 + 168;
              if (v77 <= 0xB)
                v78 = (uint64_t)v76 + 168;
              else
                v78 = v83;
LABEL_83:
              v85 = v74[1];
              v128 = *v74;
              v129 = v85;
              v86 = v74[3];
              v130 = (float64x2_t)v74[2];
              v131 = v86;
              v132 = *((_QWORD *)v74 + 8);
              v87 = *(_OWORD *)(v78 + 16);
              v127[0] = *(__int128 *)((char *)v76 + 168);
              v127[1] = v87;
              sub_207D34FB0(&v126, v70, v71, (uint64_t)&v128, (uint64_t)v127);
              v88 = *((_QWORD *)&v124 + 1);
              if (*((_QWORD *)&v124 + 1) >= v125)
              {
                v89 = sub_207D434E8((char **)&v124, (uint64_t)&v126);
                v90 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
                *((_QWORD *)&v124 + 1) = v89;
                if (*((_QWORD *)&v126 + 1))
                {
                  v91 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }
              }
              else
              {
                **((_OWORD **)&v124 + 1) = v126;
                *((_QWORD *)&v124 + 1) = v88 + 16;
              }
              *(double *)&v128 = *(double *)&v128 * 0.5;
              *(double *)&v129 = *(double *)&v129 * 0.5;
              v130 = vmulq_f64(v130, v123);
              sub_207D34FB0(&v126, v70 >> 1, v71 >> 1, (uint64_t)&v128, (uint64_t)v127);
              v93 = *((_QWORD *)&v124 + 1);
              if (*((_QWORD *)&v124 + 1) < v125)
              {
                **((_OWORD **)&v124 + 1) = v126;
                *((_QWORD *)&v124 + 1) = v93 + 16;
              }
              else
              {
                v94 = sub_207D434E8((char **)&v124, (uint64_t)&v126);
                v95 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
                *((_QWORD *)&v124 + 1) = v94;
                if (*((_QWORD *)&v126 + 1))
                {
                  v96 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
              }
              goto LABEL_57;
            }
            v80 = *((_QWORD *)&v124 + 1);
            v79 = v125;
            if (*((_QWORD *)&v124 + 1) >= v125)
            {
              v81 = (_QWORD *)sub_207D433A8((char **)&v124);
              *((_QWORD *)&v124 + 1) = v81;
              if ((unint64_t)v81 >= v125)
              {
LABEL_79:
                v82 = sub_207D433A8((char **)&v124);
                goto LABEL_80;
              }
            }
            else
            {
              **((_QWORD **)&v124 + 1) = 0;
              *(_QWORD *)(v80 + 8) = 0;
              v81 = (_QWORD *)(v80 + 16);
              *((_QWORD *)&v124 + 1) = v80 + 16;
              if (v80 + 16 >= v79)
                goto LABEL_79;
            }
            *v81 = 0;
            v81[1] = 0;
            v82 = (uint64_t)(v81 + 2);
LABEL_80:
            *((_QWORD *)&v124 + 1) = v82;
LABEL_57:
            v65 += 2;
            if (v65 == v64)
            {
              v6 = *(_QWORD *)(a1 + 8);
              break;
            }
          }
        }
        v98 = *(_QWORD *)(v6 + 1408);
        if (v98)
        {
          v99 = (void **)(v6 + 1408);
          v100 = *(_QWORD *)(v6 + 1416);
          v101 = *(void **)(v6 + 1408);
          if (v100 != v98)
          {
            do
            {
              v102 = *(std::__shared_weak_count **)(v100 - 8);
              if (v102)
              {
                p_shared_owners = (unint64_t *)&v102->__shared_owners_;
                do
                  v104 = __ldaxr(p_shared_owners);
                while (__stlxr(v104 - 1, p_shared_owners));
                if (!v104)
                {
                  ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                  std::__shared_weak_count::__release_weak(v102);
                }
              }
              v100 -= 16;
            }
            while (v100 != v98);
            v101 = *v99;
          }
          *(_QWORD *)(v6 + 1416) = v98;
          operator delete(v101);
          *v99 = 0;
          *(_QWORD *)(v6 + 1416) = 0;
          *(_QWORD *)(v6 + 1424) = 0;
        }
        *(_OWORD *)(v6 + 1408) = v124;
        *(_QWORD *)(v6 + 1424) = v125;
        v6 = *(_QWORD *)(a1 + 8);
        v67 = *(_QWORD **)(v6 + 1192);
        if (v67)
        {
          do
          {
LABEL_111:
            v105 = v67[3];
            if (!*(_BYTE *)(v105 + 472))
            {
              v106 = *(_QWORD *)(a1 + 8);
              if (v105 + 736 != v106 + 1408)
                sub_207D43C58(v105 + 736, *(_QWORD **)(v106 + 1408), *(_QWORD **)(v106 + 1416), (uint64_t)(*(_QWORD *)(v106 + 1416) - *(_QWORD *)(v106 + 1408)) >> 4);
            }
            v67 = (_QWORD *)*v67;
          }
          while (v67);
          v6 = *(_QWORD *)(a1 + 8);
        }
      }
    }
  }
  sub_207D2975C(v6 + 1096, (uint64_t **)(v6 + 1632), (float **)(v6 + 1064));
}

void sub_207D42D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  uint64_t v41;

  sub_207C99D78(v41 - 224);
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_207CBE108(&a41);
  _Unwind_Resume(a1);
}

void sub_207D42DE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v3;

  v3 = *(_DWORD **)(v1 - 176);
  *(_QWORD *)(v1 - 176) = 0;
  if (v3)
    sub_207D098B8(v1 - 176, v3);
  _Unwind_Resume(exception_object);
}

char **sub_207D42E04(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (_QWORD *)*((_QWORD *)v3 - 9);
          if (v5)
          {
            v6 = (_QWORD *)*((_QWORD *)v3 - 8);
            v7 = (void *)*((_QWORD *)v3 - 9);
            if (v6 != v5)
            {
              do
                v6 = sub_207D441B8(v6 - 66);
              while (v6 != v5);
              v7 = (void *)*((_QWORD *)v3 - 9);
            }
            *((_QWORD *)v3 - 8) = v5;
            operator delete(v7);
          }
          v3 -= 80;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_207D42EA4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_207D42F0C(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;

  v5 = (int8x8_t)a1[148];
  if (!*(_QWORD *)&v5)
    goto LABEL_98;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a3;
    if (*(_QWORD *)&v5 <= a3)
      v7 = a3 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & a3;
  }
  v8 = *(_QWORD **)(a1[147] + 8 * v7);
  if (!v8 || (v9 = (_QWORD *)*v8) == 0)
  {
LABEL_98:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectTrackRefinePipeline.cpp", 1382, (uint64_t)"iter != trackers.end()", 22, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    abort();
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == a3)
      {
        if (v9[2] == a3)
          goto LABEL_21;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_98;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_98;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == a3)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_98;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_98;
  }
  if (v9[2] != a3)
    goto LABEL_11;
LABEL_21:
  if (*(_BYTE *)(v9[3] + 664))
  {
    v13 = (_QWORD *)a2[4];
    if (v13)
    {
      v14 = 0;
      while (1)
      {
        v16 = v13[3];
        v15 = v13[4];
        if (v16 != v15)
        {
          v17 = v15 - v16 - 1344;
          if (v17 >= 0x540)
          {
            v19 = 0;
            v20 = (((v17 >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64) + 1;
            v18 = v16 + 1344 * (v20 & 0x7FFFFFFFFFFFFELL);
            v21 = v20 & 0x7FFFFFFFFFFFFELL;
            do
            {
              v14 += *(unsigned __int8 *)(v16 + 441);
              v19 += *(unsigned __int8 *)(v16 + 1785);
              v16 += 2688;
              v21 -= 2;
            }
            while (v21);
            v14 += v19;
            if (v20 == (v20 & 0x7FFFFFFFFFFFFELL))
              goto LABEL_24;
          }
          else
          {
            v18 = v13[3];
          }
          do
          {
            v14 += *(unsigned __int8 *)(v18 + 441);
            v18 += 1344;
          }
          while (v18 != v15);
        }
LABEL_24:
        v13 = (_QWORD *)*v13;
        if (!v13)
          goto LABEL_34;
      }
    }
    v14 = 0;
LABEL_34:
    if ((unint64_t)(v14 - a5) >= a1[118])
      return 1;
  }
  v22 = (int8x8_t)a1[124];
  if (!*(_QWORD *)&v22)
    return 0;
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  v24 = v23.u32[0];
  if (v23.u32[0] > 1uLL)
  {
    v25 = a3;
    if (*(_QWORD *)&v22 <= a3)
      v25 = a3 % *(_QWORD *)&v22;
  }
  else
  {
    v25 = (*(_QWORD *)&v22 - 1) & a3;
  }
  v27 = a1[123];
  v28 = *(_QWORD **)(v27 + 8 * v25);
  if (!v28)
    return 0;
  v29 = (_QWORD *)*v28;
  if (!*v28)
    return 0;
  v30 = *(_QWORD *)&v22 - 1;
  if (v23.u32[0] < 2uLL)
  {
    while (1)
    {
      v31 = v29[1];
      if (v31 == a3)
      {
        if (v29[2] == a3)
          goto LABEL_57;
      }
      else if ((v31 & v30) != v25)
      {
        return 0;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        return 0;
    }
  }
  while (2)
  {
    v32 = v29[1];
    if (v32 != a3)
    {
      if (v32 >= *(_QWORD *)&v22)
        v32 %= *(_QWORD *)&v22;
      if (v32 != v25)
        return 0;
      goto LABEL_51;
    }
    if (v29[2] != a3)
    {
LABEL_51:
      v29 = (_QWORD *)*v29;
      if (!v29)
        return 0;
      continue;
    }
    break;
  }
LABEL_57:
  v33 = (int8x8_t)a2[3];
  if (v33)
  {
    v34 = (uint8x8_t)vcnt_s8(v33);
    v34.i16[0] = vaddlv_u8(v34);
    if (v34.u32[0] > 1uLL)
    {
      v35 = a3;
      if (*(_QWORD *)&v33 <= a3)
        v35 = a3 % *(_QWORD *)&v33;
    }
    else
    {
      v35 = (*(_QWORD *)&v33 - 1) & a3;
    }
    v36 = *(_QWORD **)(a2[2] + 8 * v35);
    if (v36)
    {
      v37 = (_QWORD *)*v36;
      if (v37)
      {
        if (v34.u32[0] < 2uLL)
        {
          v38 = *(_QWORD *)&v33 - 1;
          while (1)
          {
            v40 = v37[1];
            if (v40 == a3)
            {
              if (v37[2] == a3)
                goto LABEL_79;
            }
            else if ((v40 & v38) != v35)
            {
              goto LABEL_77;
            }
            v37 = (_QWORD *)*v37;
            if (!v37)
              goto LABEL_77;
          }
        }
        do
        {
          v39 = v37[1];
          if (v39 == a3)
          {
            if (v37[2] == a3)
            {
LABEL_79:
              v41 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v37[4] - v37[3]) >> 6);
              if (v24 > 1)
                goto LABEL_80;
LABEL_78:
              v42 = v30 & a3;
              goto LABEL_82;
            }
          }
          else
          {
            if (v39 >= *(_QWORD *)&v33)
              v39 %= *(_QWORD *)&v33;
            if (v39 != v35)
              break;
          }
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
    }
  }
LABEL_77:
  v41 = 0;
  if (v24 <= 1)
    goto LABEL_78;
LABEL_80:
  v42 = a3;
  if (*(_QWORD *)&v22 <= a3)
    v42 = a3 % *(_QWORD *)&v22;
LABEL_82:
  v43 = *(_QWORD **)(v27 + 8 * v42);
  if (!v43 || (v44 = (_QWORD *)*v43) == 0)
LABEL_99:
    sub_207CA4018("unordered_map::at: key not found");
  if (v24 < 2)
  {
    while (1)
    {
      v45 = v44[1];
      if (v45 == a3)
      {
        if (v44[2] == a3)
          return v41 - a4 >= v44[3];
      }
      else if ((v45 & v30) != v42)
      {
        goto LABEL_99;
      }
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_99;
    }
  }
  while (2)
  {
    v46 = v44[1];
    if (v46 != a3)
    {
      if (v46 >= *(_QWORD *)&v22)
        v46 %= *(_QWORD *)&v22;
      if (v46 != v42)
        goto LABEL_99;
      goto LABEL_92;
    }
    if (v44[2] != a3)
    {
LABEL_92:
      v44 = (_QWORD *)*v44;
      if (!v44)
        goto LABEL_99;
      continue;
    }
    return v41 - a4 >= v44[3];
  }
}

void sub_207D43394(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207D453F0(a1);
  operator delete(v1);
}

uint64_t sub_207D433A8(char **a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = *a1;
  v1 = a1[1];
  v3 = (v1 - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_207CA420C();
  v6 = a1[2] - v2;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_207CA3AB8();
    v8 = (char *)operator new(16 * v7);
    v9 = &v8[16 * v3];
    v10 = &v8[16 * v7];
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v11 = (uint64_t)(v9 + 16);
    if (v1 == v2)
      goto LABEL_21;
  }
  else
  {
    v9 = (char *)(16 * v3);
    v10 = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v11 = 16 * v3 + 16;
    if (v1 == v2)
    {
LABEL_21:
      *a1 = v9;
      a1[1] = (char *)v11;
      a1[2] = v10;
      goto LABEL_22;
    }
  }
  do
  {
    v12 = *((_OWORD *)v1 - 1);
    v1 -= 16;
    *((_OWORD *)v9 - 1) = v12;
    v9 -= 16;
    *(_QWORD *)v1 = 0;
    *((_QWORD *)v1 + 1) = 0;
  }
  while (v1 != v2);
  v1 = *a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = (char *)v11;
  a1[2] = v10;
  while (v13 != v1)
  {
    v14 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v13 -= 16;
  }
LABEL_22:
  if (v1)
    operator delete(v1);
  return v11;
}

char *sub_207D434E8(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    sub_207CA420C();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

uint64_t sub_207D43610(uint64_t a1)
{
  _QWORD *v2;
  void (**v3)(void);
  void (*v4)(void);
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  v2 = *(_QWORD **)(a1 + 936);
  if (v2)
  {
    sub_207D438B8(a1 + 936, v2);
    operator delete(*(void **)(a1 + 936));
  }
  v3 = *(void (***)(void))(a1 + 928);
  *(_QWORD *)(a1 + 928) = 0;
  if (v3)
  {
    v4 = *v3;
    *v3 = 0;
    if (v4)
      v3[1]();
    operator delete(v3);
  }
  v5 = *(_QWORD **)(a1 + 920);
  *(_QWORD *)(a1 + 920) = 0;
  if (v5)
  {
    v6 = (std::__shared_weak_count *)v5[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v9 = *(_QWORD *)(a1 + 896);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 904);
    v11 = *(void **)(a1 + 896);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(a1 + 904);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 896);
    }
    *(_QWORD *)(a1 + 904) = v9;
    operator delete(v11);
  }
  v15 = *(void **)(a1 + 872);
  if (v15)
  {
    *(_QWORD *)(a1 + 880) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 848);
  if (v16)
  {
    *(_QWORD *)(a1 + 856) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 824);
  if (v17)
  {
    *(_QWORD *)(a1 + 832) = v17;
    operator delete(v17);
  }
  if (*(_BYTE *)(a1 + 816))
  {
    v18 = *(std::__shared_weak_count **)(a1 + 792);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    (**(void (***)(uint64_t))(a1 + 784))(a1 + 784);
  }
  v21 = *(void **)(a1 + 760);
  if (v21)
  {
    *(_QWORD *)(a1 + 768) = v21;
    operator delete(v21);
  }
  v22 = *(_QWORD *)(a1 + 736);
  if (v22)
  {
    v23 = *(_QWORD *)(a1 + 744);
    v24 = *(void **)(a1 + 736);
    if (v23 != v22)
    {
      do
      {
        v25 = *(std::__shared_weak_count **)(v23 - 8);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 16;
      }
      while (v23 != v22);
      v24 = *(void **)(a1 + 736);
    }
    *(_QWORD *)(a1 + 744) = v22;
    operator delete(v24);
  }
  v28 = *(_QWORD *)(a1 + 712);
  if (v28)
  {
    v29 = *(_QWORD *)(a1 + 720);
    v30 = *(void **)(a1 + 712);
    if (v29 != v28)
    {
      do
      {
        v31 = *(std::__shared_weak_count **)(v29 - 8);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 16;
      }
      while (v29 != v28);
      v30 = *(void **)(a1 + 712);
    }
    *(_QWORD *)(a1 + 720) = v28;
    operator delete(v30);
  }
  if (!*(_BYTE *)(a1 + 704) || (*(char *)(a1 + 703) & 0x80000000) == 0)
    return sub_207D046E4(a1);
  operator delete(*(void **)(a1 + 680));
  return sub_207D046E4(a1);
}

void sub_207D438B8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;

  v4 = *(_QWORD **)(a1 + 8);
  while (v4 != a2)
  {
    v5 = (void **)*(v4 - 3);
    if (v5)
    {
      do
      {
        while (1)
        {
          v6 = (void **)*v5;
          v7 = (std::__shared_weak_count *)v5[6];
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (*((char *)v5 + 39) < 0)
            break;
          operator delete(v5);
          v5 = v6;
          if (!v6)
            goto LABEL_14;
        }
        operator delete(v5[2]);
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
LABEL_14:
    v11 = (void *)*(v4 - 5);
    v4 -= 5;
    v10 = v11;
    *v4 = 0;
    if (v11)
      operator delete(v10);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t *sub_207D43990(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  if (a1[2])
  {
    v8 = *a1;
    v9 = (uint64_t *)a1[1];
    v10 = *v9;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v8 + 8) = v10;
    a1[2] = 0;
    if (v9 != a1)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        v13 = (std::__shared_weak_count *)v9[3];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != a1);
    }
  }
  return a1;
}

_QWORD *sub_207D43AA8(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 6)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 6;
    if (v18 >= __sz)
    {
      v29 = *result;
      if (a2 != a3)
      {
        v30 = (_OWORD *)*result;
        do
        {
          v31 = *(_OWORD *)v6;
          v32 = *((_OWORD *)v6 + 1);
          v33 = *((_OWORD *)v6 + 3);
          v30[2] = *((_OWORD *)v6 + 2);
          v30[3] = v33;
          *v30 = v31;
          v30[1] = v32;
          v30 += 4;
          v6 += 64;
          v29 += 64;
        }
        while (v6 != a3);
      }
      v15 = v29 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[64 * v18];
      if (v17 != v9)
      {
        v20 = v18 << 6;
        do
        {
          v21 = *(_OWORD *)v6;
          v22 = *((_OWORD *)v6 + 1);
          v23 = *((_OWORD *)v6 + 3);
          *((_OWORD *)v9 + 2) = *((_OWORD *)v6 + 2);
          *((_OWORD *)v9 + 3) = v23;
          *(_OWORD *)v9 = v21;
          *((_OWORD *)v9 + 1) = v22;
          v9 += 64;
          v6 += 64;
          v20 -= 64;
        }
        while (v20);
        v9 = *v16;
      }
      v24 = v9;
      if (v19 != a3)
      {
        v24 = v9;
        v25 = v9;
        do
        {
          v26 = *(_OWORD *)v19;
          v27 = *((_OWORD *)v19 + 1);
          v28 = *((_OWORD *)v19 + 3);
          *((_OWORD *)v25 + 2) = *((_OWORD *)v19 + 2);
          *((_OWORD *)v25 + 3) = v28;
          *(_OWORD *)v25 = v26;
          *((_OWORD *)v25 + 1) = v27;
          v25 += 64;
          v19 += 64;
          v24 += 64;
        }
        while (v19 != a3);
      }
      v15 = v24 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_27;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_27:
      sub_207CA420C();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, (a3 - v6) & 0xFFFFFFFFFFFFFFC0);
      v14 = &v9[(a3 - v6) & 0xFFFFFFFFFFFFFFC0];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void sub_207D43C58(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      sub_207CA420C();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

uint64_t sub_207D43F98(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_207D43FFC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_207CA420C();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_207CA3AB8();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[80 * v3];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  v9 = &v7[80 * v6];
  *((_QWORD *)v8 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 3) = v10;
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a2 + 64);
  v11 = v8 + 80;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v8[v14];
      v16 = &v13[v14];
      *((_QWORD *)v15 - 10) = *(_QWORD *)&v13[v14 - 80];
      *((_QWORD *)v15 - 8) = 0;
      *((_QWORD *)v15 - 7) = 0;
      *(_OWORD *)(v15 - 72) = *(_OWORD *)&v13[v14 - 72];
      *((_QWORD *)v15 - 7) = *(_QWORD *)&v13[v14 - 56];
      *((_QWORD *)v16 - 9) = 0;
      *((_QWORD *)v16 - 8) = 0;
      *((_QWORD *)v16 - 7) = 0;
      v17 = *(_OWORD *)&v13[v14 - 48];
      v18 = *(_OWORD *)&v13[v14 - 16];
      *((_OWORD *)v15 - 2) = *(_OWORD *)&v13[v14 - 32];
      *((_OWORD *)v15 - 1) = v18;
      *((_OWORD *)v15 - 3) = v17;
      v14 -= 80;
    }
    while (&v13[v14] != v12);
    v13 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v8[v14];
    a1[1] = v11;
    a1[2] = v9;
    while (v19 != v13)
    {
      v20 = (_QWORD *)*((_QWORD *)v19 - 9);
      if (v20)
      {
        v21 = (_QWORD *)*((_QWORD *)v19 - 8);
        v22 = (void *)*((_QWORD *)v19 - 9);
        if (v21 != v20)
        {
          do
            v21 = sub_207D441B8(v21 - 66);
          while (v21 != v20);
          v22 = (void *)*((_QWORD *)v19 - 9);
        }
        *((_QWORD *)v19 - 8) = v20;
        operator delete(v22);
      }
      v19 -= 80;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_207D441B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (void *)a1[63];
  if (v2)
  {
    a1[64] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[60];
  if (v3)
  {
    a1[61] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[57];
  if (v4)
  {
    a1[58] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[39];
  if (v5)
    free(v5);
  a1[39] = 0;
  v6 = (void *)a1[28];
  if (v6)
    free(v6);
  a1[28] = 0;
  v7 = a1[19];
  if (v7)
  {
    v8 = a1[20];
    v9 = (void *)a1[19];
    if (v8 != v7)
    {
      v10 = a1[20];
      do
      {
        v12 = *(void **)(v10 - 24);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *(_QWORD *)(v8 - 16) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = (void *)a1[19];
    }
    a1[20] = v7;
    operator delete(v9);
  }
  a1[1] = &off_24C072BC8;
  v13 = (void *)a1[16];
  if (v13)
  {
    a1[17] = v13;
    operator delete(v13);
  }
  v14 = (std::__shared_weak_count *)a1[15];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (std::__shared_weak_count *)a1[13];
      if (v17)
        goto LABEL_26;
      return a1;
    }
  }
  v17 = (std::__shared_weak_count *)a1[13];
  if (!v17)
    return a1;
LABEL_26:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

uint64_t *sub_207D44328(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  int v68;
  uint64_t *v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  int v79;
  uint64_t *v80;
  uint64_t *v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  BOOL v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  BOOL v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  _DWORD *v150;
  int v151;
  int v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD *v155;
  int v156;
  int v157;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v86 = *((_DWORD *)a2 - 2);
        v87 = *(_DWORD *)(v8 + 8);
        if (v86 < v87)
        {
          v88 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(a2 - 2);
          *(a2 - 2) = v88;
          *(_DWORD *)(v8 + 8) = v86;
          *((_DWORD *)a2 - 2) = v87;
        }
        return result;
      case 3:
        v89 = *(_DWORD *)(v8 + 24);
        v90 = *(_DWORD *)(v8 + 8);
        v91 = *((_DWORD *)a2 - 2);
        if (v89 >= v90)
        {
          if (v91 < v89)
          {
            v146 = *(_QWORD *)(v8 + 16);
            *(_QWORD *)(v8 + 16) = *(a2 - 2);
            *(a2 - 2) = v146;
            *(_DWORD *)(v8 + 24) = v91;
            *((_DWORD *)a2 - 2) = v89;
            v147 = *(_DWORD *)(v8 + 24);
            v148 = *(_DWORD *)(v8 + 8);
            if (v147 < v148)
            {
              v149 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)(v8 + 16);
              *(_QWORD *)(v8 + 16) = v149;
              *(_DWORD *)(v8 + 8) = v147;
              *(_DWORD *)(v8 + 24) = v148;
            }
          }
        }
        else
        {
          v92 = *(_QWORD *)v8;
          if (v91 >= v89)
          {
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 16);
            *(_QWORD *)(v8 + 16) = v92;
            *(_DWORD *)(v8 + 8) = v89;
            *(_DWORD *)(v8 + 24) = v90;
            v157 = *((_DWORD *)a2 - 2);
            if (v157 >= v90)
              return result;
            *(_QWORD *)(v8 + 16) = *(a2 - 2);
            *(a2 - 2) = v92;
            *(_DWORD *)(v8 + 24) = v157;
          }
          else
          {
            *(_QWORD *)v8 = *(a2 - 2);
            *(a2 - 2) = v92;
            *(_DWORD *)(v8 + 8) = v91;
          }
          *((_DWORD *)a2 - 2) = v90;
        }
        return result;
      case 4:
        return sub_207D4529C((uint64_t *)v8, (uint64_t *)(v8 + 16), (uint64_t *)(v8 + 32), a2 - 2);
      case 5:
        result = sub_207D4529C((uint64_t *)v8, (uint64_t *)(v8 + 16), (uint64_t *)(v8 + 32), (uint64_t *)(v8 + 48));
        v93 = *((_DWORD *)a2 - 2);
        v94 = *(_DWORD *)(v8 + 56);
        if (v93 < v94)
        {
          v95 = *(_QWORD *)(v8 + 48);
          *(_QWORD *)(v8 + 48) = *(a2 - 2);
          *(a2 - 2) = v95;
          *(_DWORD *)(v8 + 56) = v93;
          *((_DWORD *)a2 - 2) = v94;
          v96 = *(_DWORD *)(v8 + 56);
          v97 = *(_DWORD *)(v8 + 40);
          if (v96 < v97)
          {
            v98 = *(_QWORD *)(v8 + 32);
            v99 = *(_QWORD *)(v8 + 48);
            *(_QWORD *)(v8 + 32) = v99;
            *(_QWORD *)(v8 + 48) = v98;
            *(_DWORD *)(v8 + 40) = v96;
            *(_DWORD *)(v8 + 56) = v97;
            v100 = *(_DWORD *)(v8 + 24);
            if (v96 < v100)
            {
              v101 = *(_QWORD *)(v8 + 16);
              *(_QWORD *)(v8 + 16) = v99;
              *(_QWORD *)(v8 + 32) = v101;
              *(_DWORD *)(v8 + 24) = v96;
              *(_DWORD *)(v8 + 40) = v100;
              v102 = *(_DWORD *)(v8 + 8);
              if (v96 < v102)
              {
                v103 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v99;
                *(_QWORD *)(v8 + 16) = v103;
                *(_DWORD *)(v8 + 8) = v96;
                *(_DWORD *)(v8 + 24) = v102;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v104 = (uint64_t *)(v8 + 16);
          v106 = (uint64_t *)v8 == a2 || v104 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v106)
            {
              v107 = 0;
              v108 = (uint64_t *)v8;
              do
              {
                v110 = *((_DWORD *)v108 + 6);
                v111 = *((_DWORD *)v108 + 2);
                v108 = v104;
                if (v110 < v111)
                {
                  v112 = *v104;
                  v113 = v107;
                  do
                  {
                    v114 = v8 + v113;
                    *(_QWORD *)(v114 + 16) = *(_QWORD *)(v8 + v113);
                    *(_DWORD *)(v114 + 24) = *(_DWORD *)(v8 + v113 + 8);
                    if (!v113)
                    {
                      v109 = v8;
                      goto LABEL_121;
                    }
                    v113 -= 16;
                  }
                  while (v110 < *(_DWORD *)(v114 - 8));
                  v109 = v8 + v113 + 16;
LABEL_121:
                  *(_QWORD *)v109 = v112;
                  *(_DWORD *)(v109 + 8) = v110;
                }
                v104 = v108 + 2;
                v107 += 16;
              }
              while (v108 + 2 != a2);
            }
          }
          else if (!v106)
          {
            v150 = (_DWORD *)(v8 + 24);
            do
            {
              v151 = *(_DWORD *)(v7 + 24);
              v152 = *(_DWORD *)(v7 + 8);
              v7 = (uint64_t)v104;
              if (v151 < v152)
              {
                v153 = *v104;
                v154 = v150;
                do
                {
                  v155 = v154;
                  *((_QWORD *)v154 - 1) = *((_QWORD *)v154 - 3);
                  v156 = *(v154 - 4);
                  v154 -= 4;
                  *v155 = v156;
                }
                while (v151 < *(v155 - 8));
                *((_QWORD *)v154 - 1) = v153;
                *v154 = v151;
              }
              v104 = (uint64_t *)(v7 + 16);
              v150 += 4;
            }
            while ((uint64_t *)(v7 + 16) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((uint64_t *)v8 != a2)
          {
            v115 = (unint64_t)(v10 - 2) >> 1;
            v116 = v115;
            do
            {
              if (v115 >= v116)
              {
                v118 = (2 * v116) | 1;
                v119 = v8 + 16 * v118;
                if (2 * v116 + 2 < v10)
                {
                  v120 = *(_DWORD *)(v119 + 8);
                  v121 = *(_DWORD *)(v119 + 24);
                  v119 += 16 * (v120 < v121);
                  if (v120 < v121)
                    v118 = 2 * v116 + 2;
                }
                v122 = v8 + 16 * v116;
                v123 = *(_DWORD *)(v122 + 8);
                if (*(_DWORD *)(v119 + 8) >= v123)
                {
                  v124 = *(_QWORD *)v122;
                  do
                  {
                    v125 = v122;
                    v122 = v119;
                    *(_QWORD *)v125 = *(_QWORD *)v119;
                    *(_DWORD *)(v125 + 8) = *(_DWORD *)(v119 + 8);
                    if (v115 < v118)
                      break;
                    v126 = (2 * v118) | 1;
                    v119 = v8 + 16 * v126;
                    v127 = 2 * v118 + 2;
                    if (v127 < v10)
                    {
                      v128 = *(_DWORD *)(v119 + 8);
                      v129 = *(_DWORD *)(v119 + 24);
                      v119 += 16 * (v128 < v129);
                      if (v128 < v129)
                        v126 = v127;
                    }
                    result = (uint64_t *)*(unsigned int *)(v119 + 8);
                    v118 = v126;
                  }
                  while ((int)result >= v123);
                  *(_QWORD *)v122 = v124;
                  *(_DWORD *)(v122 + 8) = v123;
                }
              }
              v117 = v116-- <= 0;
            }
            while (!v117);
            v130 = (unint64_t)v9 >> 4;
            do
            {
              v131 = 0;
              v132 = *(_QWORD *)v8;
              v133 = *(_DWORD *)(v8 + 8);
              v134 = v8;
              do
              {
                v135 = v134 + 16 * v131 + 16;
                v136 = (2 * v131) | 1;
                v137 = 2 * v131 + 2;
                if (v137 < v130)
                {
                  v138 = *(_DWORD *)(v135 + 8);
                  v139 = *(_DWORD *)(v135 + 24);
                  v135 += 16 * (v138 < v139);
                  if (v138 < v139)
                    v136 = v137;
                }
                *(_QWORD *)v134 = *(_QWORD *)v135;
                *(_DWORD *)(v134 + 8) = *(_DWORD *)(v135 + 8);
                v134 = v135;
                v131 = v136;
              }
              while (v136 <= (uint64_t)((unint64_t)(v130 - 2) >> 1));
              if ((uint64_t *)v135 == a2 - 2)
              {
                *(_QWORD *)v135 = v132;
                *(_DWORD *)(v135 + 8) = v133;
              }
              else
              {
                *(_QWORD *)v135 = *(a2 - 2);
                *(_DWORD *)(v135 + 8) = *((_DWORD *)a2 - 2);
                *(a2 - 2) = v132;
                *((_DWORD *)a2 - 2) = v133;
                v140 = v135 - v8 + 16;
                if (v140 >= 17)
                {
                  v141 = (((unint64_t)v140 >> 4) - 2) >> 1;
                  v142 = v8 + 16 * v141;
                  v143 = *(_DWORD *)(v135 + 8);
                  if (*(_DWORD *)(v142 + 8) < v143)
                  {
                    v144 = *(_QWORD *)v135;
                    do
                    {
                      v145 = v135;
                      v135 = v142;
                      *(_QWORD *)v145 = *(_QWORD *)v142;
                      *(_DWORD *)(v145 + 8) = *(_DWORD *)(v142 + 8);
                      if (!v141)
                        break;
                      v141 = (v141 - 1) >> 1;
                      v142 = v8 + 16 * v141;
                    }
                    while (*(_DWORD *)(v142 + 8) < v143);
                    *(_QWORD *)v135 = v144;
                    *(_DWORD *)(v135 + 8) = v143;
                  }
                }
              }
              a2 -= 2;
              v117 = v130-- <= 2;
            }
            while (!v117);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        v13 = *((_DWORD *)a2 - 2);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = *(_DWORD *)(v8 + 8);
          v18 = *(_DWORD *)(v12 + 8);
          if (v17 >= v18)
          {
            if (v13 < v17)
            {
              v24 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(a2 - 2);
              *(a2 - 2) = v24;
              *(_DWORD *)(v8 + 8) = v13;
              *((_DWORD *)a2 - 2) = v17;
              v25 = *(_DWORD *)(v8 + 8);
              v26 = *(_DWORD *)(v12 + 8);
              if (v25 < v26)
              {
                v27 = *(_QWORD *)v12;
                *(_QWORD *)v12 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v27;
                *(_DWORD *)(v12 + 8) = v25;
                *(_DWORD *)(v8 + 8) = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_QWORD *)v12;
            if (v13 >= v17)
            {
              *(_QWORD *)v12 = *(_QWORD *)v8;
              *(_QWORD *)v8 = v19;
              *(_DWORD *)(v12 + 8) = v17;
              *(_DWORD *)(v8 + 8) = v18;
              v39 = *((_DWORD *)a2 - 2);
              if (v39 >= v18)
                goto LABEL_32;
              *(_QWORD *)v8 = *(a2 - 2);
              *(a2 - 2) = v19;
              *(_DWORD *)(v8 + 8) = v39;
            }
            else
            {
              *(_QWORD *)v12 = *(a2 - 2);
              *(a2 - 2) = v19;
              *(_DWORD *)(v12 + 8) = v13;
            }
            *((_DWORD *)a2 - 2) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = *(_DWORD *)(v8 + 8);
          v40 = *(_QWORD *)v8;
          if (*(_DWORD *)(v8 - 8) < v41)
            goto LABEL_58;
          if (v41 >= *((_DWORD *)a2 - 2))
          {
            v78 = v8 + 16;
            do
            {
              v8 = v78;
              if (v78 >= (unint64_t)a2)
                break;
              v79 = *(_DWORD *)(v78 + 8);
              v78 += 16;
            }
            while (v41 >= v79);
          }
          else
          {
            v76 = v8;
            do
            {
              v8 = v76 + 16;
              v77 = *(_DWORD *)(v76 + 24);
              v76 += 16;
            }
            while (v41 >= v77);
          }
          v80 = a2;
          if (v8 < (unint64_t)a2)
          {
            v81 = a2;
            do
            {
              v80 = v81 - 2;
              v82 = *((_DWORD *)v81 - 2);
              v81 -= 2;
            }
            while (v41 < v82);
          }
          while (v8 < (unint64_t)v80)
          {
            v83 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v80;
            *v80 = v83;
            LODWORD(v83) = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *((_DWORD *)v80 + 2);
            *((_DWORD *)v80 + 2) = v83;
            do
            {
              v84 = *(_DWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v41 >= v84);
            do
            {
              v85 = *((_DWORD *)v80 - 2);
              v80 -= 2;
            }
            while (v41 < v85);
          }
          if (v8 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v40;
          *(_DWORD *)(v8 - 8) = v41;
          continue;
        }
        v14 = *(_DWORD *)(v12 + 8);
        v15 = *(_DWORD *)(v8 + 8);
        if (v14 >= v15)
        {
          if (v13 < v14)
          {
            v20 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *(a2 - 2);
            *(a2 - 2) = v20;
            *(_DWORD *)(v12 + 8) = v13;
            *((_DWORD *)a2 - 2) = v14;
            v21 = *(_DWORD *)(v12 + 8);
            v22 = *(_DWORD *)(v8 + 8);
            if (v21 < v22)
            {
              v23 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v12;
              *(_QWORD *)v12 = v23;
              *(_DWORD *)(v8 + 8) = v21;
              *(_DWORD *)(v12 + 8) = v22;
            }
          }
        }
        else
        {
          v16 = *(_QWORD *)v8;
          if (v13 < v14)
          {
            *(_QWORD *)v8 = *(a2 - 2);
            *(a2 - 2) = v16;
            *(_DWORD *)(v8 + 8) = v13;
            goto LABEL_22;
          }
          *(_QWORD *)v8 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v16;
          *(_DWORD *)(v8 + 8) = v14;
          *(_DWORD *)(v12 + 8) = v15;
          v28 = *((_DWORD *)a2 - 2);
          if (v28 < v15)
          {
            *(_QWORD *)v12 = *(a2 - 2);
            *(a2 - 2) = v16;
            *(_DWORD *)(v12 + 8) = v28;
LABEL_22:
            *((_DWORD *)a2 - 2) = v15;
          }
        }
        v29 = v8 + 16 * v11;
        v30 = v29 - 16;
        v31 = *(_DWORD *)(v29 - 8);
        v32 = *(_DWORD *)(v8 + 24);
        v33 = *((_DWORD *)a2 - 6);
        if (v31 >= v32)
        {
          if (v33 < v31)
          {
            v35 = *(_QWORD *)v30;
            *(_QWORD *)v30 = *(a2 - 4);
            *(a2 - 4) = v35;
            *(_DWORD *)(v30 + 8) = v33;
            *((_DWORD *)a2 - 6) = v31;
            v36 = *(_DWORD *)(v30 + 8);
            v37 = *(_DWORD *)(v8 + 24);
            if (v36 < v37)
            {
              v38 = *(_QWORD *)(v8 + 16);
              *(_QWORD *)(v8 + 16) = *(_QWORD *)v30;
              *(_QWORD *)v30 = v38;
              *(_DWORD *)(v8 + 24) = v36;
              *(_DWORD *)(v30 + 8) = v37;
            }
          }
        }
        else
        {
          v34 = *(_QWORD *)(v8 + 16);
          if (v33 < v31)
          {
            *(_QWORD *)(v8 + 16) = *(a2 - 4);
            *(a2 - 4) = v34;
            *(_DWORD *)(v8 + 24) = v33;
            goto LABEL_36;
          }
          *(_QWORD *)(v8 + 16) = *(_QWORD *)v30;
          *(_QWORD *)v30 = v34;
          *(_DWORD *)(v8 + 24) = v31;
          *(_DWORD *)(v30 + 8) = v32;
          v42 = *((_DWORD *)a2 - 6);
          if (v42 < v32)
          {
            *(_QWORD *)v30 = *(a2 - 4);
            *(a2 - 4) = v34;
            *(_DWORD *)(v30 + 8) = v42;
LABEL_36:
            *((_DWORD *)a2 - 6) = v32;
          }
        }
        v43 = v8 + 16 * v11;
        v44 = v43 + 16;
        v45 = *(_DWORD *)(v43 + 24);
        v46 = *(_DWORD *)(v8 + 40);
        v47 = *((_DWORD *)a2 - 10);
        if (v45 >= v46)
        {
          if (v47 < v45)
          {
            v49 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(a2 - 6);
            *(a2 - 6) = v49;
            *(_DWORD *)(v44 + 8) = v47;
            *((_DWORD *)a2 - 10) = v45;
            v50 = *(_DWORD *)(v44 + 8);
            v51 = *(_DWORD *)(v8 + 40);
            if (v50 < v51)
            {
              v52 = *(_QWORD *)(v8 + 32);
              *(_QWORD *)(v8 + 32) = *(_QWORD *)v44;
              *(_QWORD *)v44 = v52;
              *(_DWORD *)(v8 + 40) = v50;
              *(_DWORD *)(v44 + 8) = v51;
            }
          }
        }
        else
        {
          v48 = *(_QWORD *)(v8 + 32);
          if (v47 < v45)
          {
            *(_QWORD *)(v8 + 32) = *(a2 - 6);
            *(a2 - 6) = v48;
            *(_DWORD *)(v8 + 40) = v47;
            goto LABEL_45;
          }
          *(_QWORD *)(v8 + 32) = *(_QWORD *)v44;
          *(_QWORD *)v44 = v48;
          *(_DWORD *)(v8 + 40) = v45;
          *(_DWORD *)(v44 + 8) = v46;
          v53 = *((_DWORD *)a2 - 10);
          if (v53 < v46)
          {
            *(_QWORD *)v44 = *(a2 - 6);
            *(a2 - 6) = v48;
            *(_DWORD *)(v44 + 8) = v53;
LABEL_45:
            *((_DWORD *)a2 - 10) = v46;
          }
        }
        v54 = *(_DWORD *)(v12 + 8);
        v55 = *(_DWORD *)(v30 + 8);
        v56 = *(_DWORD *)(v44 + 8);
        if (v54 >= v55)
        {
          v57 = *(_QWORD *)v12;
          if (v56 >= v54)
          {
            v55 = *(_DWORD *)(v12 + 8);
          }
          else
          {
            v58 = *(_QWORD *)v44;
            *(_QWORD *)v12 = *(_QWORD *)v44;
            *(_QWORD *)v44 = v57;
            *(_DWORD *)(v12 + 8) = v56;
            *(_DWORD *)(v44 + 8) = v54;
            if (v56 >= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *(_QWORD *)v30;
              *(_QWORD *)v30 = v58;
              *(_QWORD *)v12 = v57;
              *(_DWORD *)(v30 + 8) = v56;
              *(_DWORD *)(v12 + 8) = v55;
            }
          }
        }
        else
        {
          v57 = *(_QWORD *)v30;
          if (v56 >= v54)
          {
            *(_QWORD *)v30 = *(_QWORD *)v12;
            *(_QWORD *)v12 = v57;
            *(_DWORD *)(v30 + 8) = v54;
            *(_DWORD *)(v12 + 8) = v55;
            if (v56 < v55)
            {
              v59 = *(_QWORD *)v44;
              *(_QWORD *)v12 = *(_QWORD *)v44;
              *(_QWORD *)v44 = v57;
              *(_DWORD *)(v12 + 8) = v56;
              *(_DWORD *)(v44 + 8) = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *(_QWORD *)v30 = *(_QWORD *)v44;
            *(_QWORD *)v44 = v57;
            *(_DWORD *)(v30 + 8) = v56;
            *(_DWORD *)(v44 + 8) = v55;
            v57 = *(_QWORD *)v12;
            v55 = v54;
          }
        }
        v60 = *(_QWORD *)v8;
        *(_QWORD *)v8 = v57;
        *(_QWORD *)v12 = v60;
        v61 = v8 + 16 * v11;
        v62 = *(_DWORD *)(v8 + 8);
        *(_DWORD *)(v8 + 8) = v55;
        *(_DWORD *)(v61 + 8) = v62;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v40 = *(_QWORD *)v8;
        v41 = *(_DWORD *)(v8 + 8);
LABEL_58:
        v63 = 0;
        do
        {
          v64 = *(_DWORD *)(v8 + v63 + 24);
          v63 += 16;
        }
        while (v64 < v41);
        v65 = v8 + v63;
        v66 = a2;
        if (v63 == 16)
        {
          v69 = a2;
          while (v65 < (unint64_t)v69)
          {
            v67 = v69 - 2;
            v70 = *((_DWORD *)v69 - 2);
            v69 -= 2;
            if (v70 < v41)
              goto LABEL_66;
          }
          v67 = v69;
          v8 = v65;
        }
        else
        {
          do
          {
            v67 = v66 - 2;
            v68 = *((_DWORD *)v66 - 2);
            v66 -= 2;
          }
          while (v68 >= v41);
LABEL_66:
          v8 = v65;
          if (v65 < (unint64_t)v67)
          {
            v71 = (unint64_t)v67;
            do
            {
              v72 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v71;
              *(_QWORD *)v71 = v72;
              LODWORD(v72) = *(_DWORD *)(v8 + 8);
              *(_DWORD *)(v8 + 8) = *(_DWORD *)(v71 + 8);
              *(_DWORD *)(v71 + 8) = v72;
              do
              {
                v73 = *(_DWORD *)(v8 + 24);
                v8 += 16;
              }
              while (v73 < v41);
              do
              {
                v74 = *(_DWORD *)(v71 - 8);
                v71 -= 16;
              }
              while (v74 >= v41);
            }
            while (v8 < v71);
          }
        }
        if (v8 - 16 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
        }
        *(_QWORD *)(v8 - 16) = v40;
        *(_DWORD *)(v8 - 8) = v41;
        if (v65 < (unint64_t)v67)
        {
LABEL_77:
          result = (uint64_t *)sub_207D44328(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v75 = sub_207D44EF4(v7, (uint64_t *)(v8 - 16));
        result = (uint64_t *)sub_207D44EF4(v8, a2);
        if (!(_DWORD)result)
        {
          if (v75)
            continue;
          goto LABEL_77;
        }
        a2 = (uint64_t *)(v8 - 16);
        if (!v75)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_207D44EF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_DWORD *)a2 - 2);
      v7 = *(_DWORD *)(a1 + 8);
      if (v6 < v7)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        *(_DWORD *)(a1 + 8) = v6;
        *((_DWORD *)a2 - 2) = v7;
      }
      return result;
    case 3:
      v9 = *(_DWORD *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 8);
      v11 = *((_DWORD *)a2 - 2);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          v30 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(a2 - 2);
          *(a2 - 2) = v30;
          *(_DWORD *)(a1 + 24) = v11;
          *((_DWORD *)a2 - 2) = v9;
          v31 = *(_DWORD *)(a1 + 24);
          v32 = *(_DWORD *)(a1 + 8);
          if (v31 < v32)
          {
            v33 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v33;
            *(_DWORD *)(a1 + 8) = v31;
            *(_DWORD *)(a1 + 24) = v32;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v11 >= v9)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 24) = v10;
          v37 = *((_DWORD *)a2 - 2);
          if (v37 < v10)
          {
            *(_QWORD *)(a1 + 16) = *(a2 - 2);
            *(a2 - 2) = v12;
            *(_DWORD *)(a1 + 24) = v37;
            *((_DWORD *)a2 - 2) = v10;
          }
        }
        else
        {
          *(_QWORD *)a1 = *(a2 - 2);
          *(a2 - 2) = v12;
          *(_DWORD *)(a1 + 8) = v11;
          *((_DWORD *)a2 - 2) = v10;
        }
      }
      return result;
    case 4:
      sub_207D4529C((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), a2 - 2);
      return 1;
    case 5:
      sub_207D4529C((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 48));
      v19 = *((_DWORD *)a2 - 2);
      v20 = *(_DWORD *)(a1 + 56);
      if (v19 >= v20)
        return 1;
      v21 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = *(a2 - 2);
      *(a2 - 2) = v21;
      *(_DWORD *)(a1 + 56) = v19;
      *((_DWORD *)a2 - 2) = v20;
      v22 = *(_DWORD *)(a1 + 56);
      v23 = *(_DWORD *)(a1 + 40);
      if (v22 >= v23)
        return 1;
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v25;
      *(_QWORD *)(a1 + 48) = v24;
      *(_DWORD *)(a1 + 40) = v22;
      *(_DWORD *)(a1 + 56) = v23;
      v26 = *(_DWORD *)(a1 + 24);
      if (v22 >= v26)
        return 1;
      v27 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v25;
      *(_QWORD *)(a1 + 32) = v27;
      *(_DWORD *)(a1 + 24) = v22;
      *(_DWORD *)(a1 + 40) = v26;
      v28 = *(_DWORD *)(a1 + 8);
      if (v22 >= v28)
        return 1;
      v29 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v25;
      *(_QWORD *)(a1 + 16) = v29;
      *(_DWORD *)(a1 + 8) = v22;
      *(_DWORD *)(a1 + 24) = v28;
      return 1;
    default:
      v13 = *(_DWORD *)(a1 + 8);
      v14 = (_DWORD *)(a1 + 24);
      v15 = *(_DWORD *)(a1 + 24);
      v16 = *(_DWORD *)(a1 + 40);
      if (v15 < v13)
      {
        v17 = *(_QWORD *)a1;
        if (v16 >= v15)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          *(_DWORD *)(a1 + 8) = v15;
          *(_DWORD *)(a1 + 24) = v13;
          if (v16 >= v13)
            goto LABEL_30;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v17;
          v18 = (_DWORD *)(a1 + 24);
        }
        else
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v17;
          v18 = (_DWORD *)(a1 + 8);
        }
        v14 = (_DWORD *)(a1 + 40);
        goto LABEL_29;
      }
      if (v16 < v15)
      {
        v34 = *(_QWORD *)(a1 + 16);
        v35 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 16) = v35;
        *(_QWORD *)(a1 + 32) = v34;
        *(_DWORD *)(a1 + 24) = v16;
        *(_DWORD *)(a1 + 40) = v15;
        if (v16 < v13)
        {
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v35;
          *(_QWORD *)(a1 + 16) = v36;
          v18 = (_DWORD *)(a1 + 8);
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = (uint64_t *)(a1 + 48);
      if ((uint64_t *)(a1 + 48) == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = (uint64_t *)(a1 + 32);
      while (1)
      {
        v42 = *((_DWORD *)v38 + 2);
        if (v42 < *((_DWORD *)v41 + 2))
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *v38;
      v44 = v39;
      do
      {
        v45 = a1 + v44;
        *(_QWORD *)(v45 + 48) = *(_QWORD *)(a1 + v44 + 32);
        *(_DWORD *)(v45 + 56) = *(_DWORD *)(a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_QWORD *)a1 = v43;
          *(_DWORD *)(a1 + 8) = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 16;
      }
      while (v42 < *(_DWORD *)(v45 + 24));
      v46 = a1 + v44;
      *(_QWORD *)(v46 + 48) = v43;
      *(_DWORD *)(v46 + 56) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

uint64_t *sub_207D4529C(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)result + 2);
  v6 = *((_DWORD *)a3 + 2);
  if (v4 < v5)
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      *((_DWORD *)result + 2) = v4;
      *((_DWORD *)a2 + 2) = v5;
      v4 = *((_DWORD *)a3 + 2);
      if (v4 >= v5)
        goto LABEL_11;
      *a2 = *a3;
      *a3 = v7;
      *((_DWORD *)a2 + 2) = v4;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      *((_DWORD *)result + 2) = v6;
    }
    *((_DWORD *)a3 + 2) = v5;
    v4 = v5;
LABEL_11:
    v12 = *((_DWORD *)a4 + 2);
    if (v12 >= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 >= v4)
  {
    v4 = *((_DWORD *)a3 + 2);
    v12 = *((_DWORD *)a4 + 2);
    if (v12 >= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  *((_DWORD *)a2 + 2) = v6;
  *((_DWORD *)a3 + 2) = v4;
  v9 = *((_DWORD *)a2 + 2);
  v10 = *((_DWORD *)result + 2);
  if (v9 >= v10)
    goto LABEL_11;
  v11 = *result;
  *result = *a2;
  *a2 = v11;
  *((_DWORD *)result + 2) = v9;
  *((_DWORD *)a2 + 2) = v10;
  v4 = *((_DWORD *)a3 + 2);
  v12 = *((_DWORD *)a4 + 2);
  if (v12 >= v4)
    return result;
LABEL_14:
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  *((_DWORD *)a3 + 2) = v12;
  *((_DWORD *)a4 + 2) = v4;
  v14 = *((_DWORD *)a3 + 2);
  v15 = *((_DWORD *)a2 + 2);
  if (v14 < v15)
  {
    v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    *((_DWORD *)a2 + 2) = v14;
    *((_DWORD *)a3 + 2) = v15;
    v17 = *((_DWORD *)a2 + 2);
    v18 = *((_DWORD *)result + 2);
    if (v17 < v18)
    {
      v19 = *result;
      *result = *a2;
      *a2 = v19;
      *((_DWORD *)result + 2) = v17;
      *((_DWORD *)a2 + 2) = v18;
    }
  }
  return result;
}

uint64_t sub_207D453F0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = off_24C073050;
  v2 = *(_QWORD **)(a1 + 96);
  while (v2)
  {
    v9 = v2;
    v2 = (_QWORD *)*v2;
    v10 = (std::__shared_weak_count *)v9[5];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v3 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    operator delete(v3);
  sub_207CEC654(a1 + 40, *(_QWORD **)(a1 + 56));
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_207D454F4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_207D159B0();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_207CA3AB8();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_207D456CC(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_207D0CD58();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_207CA3AB8();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_207D4592C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0730C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D4593C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0730C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D4595C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void sub_207D459DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C073110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D459EC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C073110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

_QWORD *sub_207D45A0C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void **v17;
  _QWORD *v18;
  void *v19;
  void **v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void **v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  if (!*(_BYTE *)(a1 + 1792) || (*(char *)(a1 + 1791) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 1712);
    if (!v2)
      goto LABEL_5;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 1768));
  v2 = *(void **)(a1 + 1712);
  if (v2)
  {
LABEL_4:
    *(_QWORD *)(a1 + 1720) = v2;
    operator delete(v2);
  }
LABEL_5:
  v3 = *(void **)(a1 + 1680);
  if (v3)
  {
    *(_QWORD *)(a1 + 1688) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 1656);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 1664);
    v6 = *(void **)(a1 + 1656);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 1656);
    }
    *(_QWORD *)(a1 + 1664) = v4;
    operator delete(v6);
  }
  v10 = *(_QWORD *)(a1 + 1432);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 1440);
    v12 = *(void **)(a1 + 1432);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = *(void **)(a1 + 1432);
    }
    *(_QWORD *)(a1 + 1440) = v10;
    operator delete(v12);
  }
  v16 = *(void **)(a1 + 1408);
  if (v16)
  {
    *(_QWORD *)(a1 + 1416) = v16;
    operator delete(v16);
  }
  v17 = *(void ***)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = 0;
  if (v17)
  {
    v18 = v17[2];
    if (v18)
    {
      do
      {
        v36 = (_QWORD *)*v18;
        v37 = (uint64_t *)v18[3];
        v18[3] = 0;
        if (v37)
        {
          v38 = sub_207D43990(v37);
          operator delete(v38);
        }
        operator delete(v18);
        v18 = v36;
      }
      while (v36);
    }
    v19 = *v17;
    *v17 = 0;
    if (v19)
      operator delete(v19);
    operator delete(v17);
  }
  v20 = *(void ***)(a1 + 1328);
  *(_QWORD *)(a1 + 1328) = 0;
  if (v20)
  {
    v21 = v20[2];
    while (v21)
    {
      v39 = v21;
      v21 = (_QWORD *)*v21;
      v40 = (std::__shared_weak_count *)v39[4];
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      operator delete(v39);
    }
    v22 = *v20;
    *v20 = 0;
    if (v22)
      operator delete(v22);
    operator delete(v20);
  }
  sub_207D45E00(*(_QWORD **)(a1 + 1304));
  v23 = *(void **)(a1 + 1288);
  *(_QWORD *)(a1 + 1288) = 0;
  if (v23)
    operator delete(v23);
  v24 = *(void ***)(a1 + 1264);
  if (v24)
  {
    do
    {
      v32 = (void **)*v24;
      if (*((char *)v24 + 39) < 0)
        operator delete(v24[2]);
      operator delete(v24);
      v24 = v32;
    }
    while (v32);
  }
  v25 = *(void **)(a1 + 1248);
  *(_QWORD *)(a1 + 1248) = 0;
  if (v25)
    operator delete(v25);
  v26 = *(_QWORD **)(a1 + 1216);
  if (v26)
  {
    do
    {
      v33 = (_QWORD *)*v26;
      v34 = v26[3];
      v26[3] = 0;
      if (v34)
      {
        v35 = (void *)sub_207D43610(v34);
        operator delete(v35);
      }
      operator delete(v26);
      v26 = v33;
    }
    while (v33);
  }
  v27 = *(void **)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = 0;
  if (v27)
    operator delete(v27);
  *(_QWORD *)(a1 + 1120) = off_24C072F78;
  sub_207CEC654(a1 + 1160, *(_QWORD **)(a1 + 1176));
  v28 = *(void **)(a1 + 1160);
  *(_QWORD *)(a1 + 1160) = 0;
  if (v28)
    operator delete(v28);
  v29 = *(std::__shared_weak_count **)(a1 + 1136);
  if (!v29)
    return sub_207D04BC4((_QWORD *)(a1 + 24));
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (v31)
    return sub_207D04BC4((_QWORD *)(a1 + 24));
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  return sub_207D04BC4((_QWORD *)(a1 + 24));
}

uint64_t sub_207D45D5C(uint64_t a1)
{
  void *v2;

  sub_207D45E00(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_207D45D94(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
      {
        v7 = (void *)sub_207D43610(v6);
        operator delete(v7);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_207D45E00(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (void *)v1[84];
      if (v3)
      {
        v1[85] = v3;
        operator delete(v3);
      }
      v4 = (void *)v1[81];
      if (v4)
      {
        v1[82] = v4;
        operator delete(v4);
      }
      v5 = (void *)v1[78];
      if (v5)
      {
        v1[79] = v5;
        operator delete(v5);
      }
      v6 = (void *)v1[72];
      if (v6)
      {
        v1[73] = v6;
        operator delete(v6);
      }
      v7 = (void *)v1[66];
      if (v7)
      {
        v1[67] = v7;
        operator delete(v7);
      }
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *sub_207D45E8C(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_207CA6B84(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_207D4616C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D46180((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D46180(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      v2[3] = 0;
      if (v3)
      {
        v4 = (void *)sub_207D43610(v3);
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_207D461D0(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = v7[3];
              v7[3] = 0;
              if (v17)
              {
                v18 = (void *)sub_207D43610(v17);
                operator delete(v18);
              }
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

uint64_t sub_207D463D0(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  void **v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  __int128 *v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 *v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD *v52;
  __int128 *v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD *v61;
  __int128 *v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  int *v82;
  _BYTE *v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  int v107;
  char v108;
  void *__p[2];
  uint64_t v110;
  char v111;
  char v112;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = (void **)(a1 + 56);
  v7 = (__int128 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if (*(char *)(a1 + 79) < 0)
        operator delete(*v6);
      v8 = *v7;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)v6 = v8;
      *(_BYTE *)(a2 + 79) = 0;
      *(_BYTE *)(a2 + 56) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 79) < 0)
      operator delete(*v6);
    *(_BYTE *)(a1 + 80) = 0;
  }
  else
  {
    v9 = *v7;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v6 = v9;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v10;
  v11 = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 156) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v12;
  v13 = *(_QWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 180) = v13;
  v14 = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v14;
  v15 = *(_QWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_QWORD *)(a1 + 204) = v15;
  v16 = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v16;
  v17 = *(_QWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_QWORD *)(a1 + 228) = v17;
  v18 = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v18;
  v19 = *(_QWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_QWORD *)(a1 + 252) = v19;
  sub_207D26DDC(a1 + 264, (uint64_t *)(a2 + 264));
  v20 = *(_OWORD *)(a2 + 456);
  v21 = *(_OWORD *)(a2 + 472);
  v22 = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = v22;
  *(_OWORD *)(a1 + 456) = v20;
  *(_OWORD *)(a1 + 472) = v21;
  v23 = (_OWORD *)(a1 + 520);
  v24 = (__int128 *)(a2 + 520);
  if (*(unsigned __int8 *)(a1 + 584) != *(unsigned __int8 *)(a2 + 584))
  {
    if (!*(_BYTE *)(a1 + 584))
    {
      v37 = *v24;
      v38 = *(_OWORD *)(a2 + 536);
      v39 = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 568) = v39;
      *v23 = v37;
      *(_OWORD *)(a1 + 536) = v38;
      *(_BYTE *)(a1 + 584) = 1;
      v28 = (_OWORD *)(a1 + 588);
      v29 = (__int128 *)(a2 + 588);
      v30 = *(unsigned __int8 *)(a1 + 652);
      if (v30 != *(unsigned __int8 *)(a2 + 652))
        goto LABEL_24;
LABEL_20:
      if (v30)
      {
        v31 = *v29;
        v32 = v29[1];
        v33 = v29[3];
        v28[2] = v29[2];
        v28[3] = v33;
        *v28 = v31;
        v28[1] = v32;
        v34 = (_OWORD *)(a1 + 656);
        v35 = (__int128 *)(a2 + 656);
        v36 = *(unsigned __int8 *)(a1 + 720);
        if (v36 == *(unsigned __int8 *)(a2 + 720))
          goto LABEL_27;
        goto LABEL_31;
      }
LABEL_26:
      v34 = (_OWORD *)(a1 + 656);
      v35 = (__int128 *)(a2 + 656);
      v36 = *(unsigned __int8 *)(a1 + 720);
      if (v36 == *(unsigned __int8 *)(a2 + 720))
        goto LABEL_27;
LABEL_31:
      if (!v36)
      {
        v55 = *v35;
        v56 = v35[1];
        v57 = v35[3];
        v34[2] = v35[2];
        v34[3] = v57;
        *v34 = v55;
        v34[1] = v56;
        *(_BYTE *)(a1 + 720) = 1;
        v43 = (_OWORD *)(a1 + 724);
        v44 = (__int128 *)(a2 + 724);
        v45 = *(unsigned __int8 *)(a1 + 788);
        if (v45 != *(unsigned __int8 *)(a2 + 788))
          goto LABEL_38;
LABEL_34:
        if (v45)
        {
          v49 = *v44;
          v50 = v44[1];
          v51 = v44[3];
          v43[2] = v44[2];
          v43[3] = v51;
          *v43 = v49;
          v43[1] = v50;
          v52 = (_OWORD *)(a1 + 792);
          v53 = (__int128 *)(a2 + 792);
          v54 = *(unsigned __int8 *)(a1 + 856);
          if (v54 == *(unsigned __int8 *)(a2 + 856))
            goto LABEL_41;
          goto LABEL_45;
        }
LABEL_40:
        v52 = (_OWORD *)(a1 + 792);
        v53 = (__int128 *)(a2 + 792);
        v54 = *(unsigned __int8 *)(a1 + 856);
        if (v54 == *(unsigned __int8 *)(a2 + 856))
          goto LABEL_41;
LABEL_45:
        if (!v54)
        {
          v70 = *v53;
          v71 = v53[1];
          v72 = v53[3];
          v52[2] = v53[2];
          v52[3] = v72;
          *v52 = v70;
          v52[1] = v71;
          *(_BYTE *)(a1 + 856) = 1;
          v61 = (_OWORD *)(a1 + 860);
          v62 = (__int128 *)(a2 + 860);
          v63 = *(unsigned __int8 *)(a1 + 924);
          if (v63 != *(unsigned __int8 *)(a2 + 924))
            goto LABEL_51;
          goto LABEL_48;
        }
        *(_BYTE *)(a1 + 856) = 0;
LABEL_47:
        v61 = (_OWORD *)(a1 + 860);
        v62 = (__int128 *)(a2 + 860);
        v63 = *(unsigned __int8 *)(a1 + 924);
        if (v63 != *(unsigned __int8 *)(a2 + 924))
          goto LABEL_51;
        goto LABEL_48;
      }
      *(_BYTE *)(a1 + 720) = 0;
LABEL_33:
      v43 = (_OWORD *)(a1 + 724);
      v44 = (__int128 *)(a2 + 724);
      v45 = *(unsigned __int8 *)(a1 + 788);
      if (v45 != *(unsigned __int8 *)(a2 + 788))
        goto LABEL_38;
      goto LABEL_34;
    }
    *(_BYTE *)(a1 + 584) = 0;
LABEL_19:
    v28 = (_OWORD *)(a1 + 588);
    v29 = (__int128 *)(a2 + 588);
    v30 = *(unsigned __int8 *)(a1 + 652);
    if (v30 != *(unsigned __int8 *)(a2 + 652))
      goto LABEL_24;
    goto LABEL_20;
  }
  if (!*(_BYTE *)(a1 + 584))
    goto LABEL_19;
  v25 = *v24;
  v26 = *(_OWORD *)(a2 + 536);
  v27 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = v27;
  *v23 = v25;
  *(_OWORD *)(a1 + 536) = v26;
  v28 = (_OWORD *)(a1 + 588);
  v29 = (__int128 *)(a2 + 588);
  v30 = *(unsigned __int8 *)(a1 + 652);
  if (v30 == *(unsigned __int8 *)(a2 + 652))
    goto LABEL_20;
LABEL_24:
  if (v30)
  {
    *(_BYTE *)(a1 + 652) = 0;
    goto LABEL_26;
  }
  v46 = *v29;
  v47 = v29[1];
  v48 = v29[3];
  v28[2] = v29[2];
  v28[3] = v48;
  *v28 = v46;
  v28[1] = v47;
  *(_BYTE *)(a1 + 652) = 1;
  v34 = (_OWORD *)(a1 + 656);
  v35 = (__int128 *)(a2 + 656);
  v36 = *(unsigned __int8 *)(a1 + 720);
  if (v36 != *(unsigned __int8 *)(a2 + 720))
    goto LABEL_31;
LABEL_27:
  if (!v36)
    goto LABEL_33;
  v40 = *v35;
  v41 = v35[1];
  v42 = v35[3];
  v34[2] = v35[2];
  v34[3] = v42;
  *v34 = v40;
  v34[1] = v41;
  v43 = (_OWORD *)(a1 + 724);
  v44 = (__int128 *)(a2 + 724);
  v45 = *(unsigned __int8 *)(a1 + 788);
  if (v45 == *(unsigned __int8 *)(a2 + 788))
    goto LABEL_34;
LABEL_38:
  if (v45)
  {
    *(_BYTE *)(a1 + 788) = 0;
    goto LABEL_40;
  }
  v64 = *v44;
  v65 = v44[1];
  v66 = v44[3];
  v43[2] = v44[2];
  v43[3] = v66;
  *v43 = v64;
  v43[1] = v65;
  *(_BYTE *)(a1 + 788) = 1;
  v52 = (_OWORD *)(a1 + 792);
  v53 = (__int128 *)(a2 + 792);
  v54 = *(unsigned __int8 *)(a1 + 856);
  if (v54 != *(unsigned __int8 *)(a2 + 856))
    goto LABEL_45;
LABEL_41:
  if (!v54)
    goto LABEL_47;
  v58 = *v53;
  v59 = v53[1];
  v60 = v53[3];
  v52[2] = v53[2];
  v52[3] = v60;
  *v52 = v58;
  v52[1] = v59;
  v61 = (_OWORD *)(a1 + 860);
  v62 = (__int128 *)(a2 + 860);
  v63 = *(unsigned __int8 *)(a1 + 924);
  if (v63 != *(unsigned __int8 *)(a2 + 924))
  {
LABEL_51:
    if (v63)
    {
      *(_BYTE *)(a1 + 924) = 0;
    }
    else
    {
      v73 = *v62;
      v74 = v62[1];
      v75 = v62[3];
      v61[2] = v62[2];
      v61[3] = v75;
      *v61 = v73;
      v61[1] = v74;
      *(_BYTE *)(a1 + 924) = 1;
    }
    goto LABEL_54;
  }
LABEL_48:
  if (v63)
  {
    v67 = *v62;
    v68 = v62[1];
    v69 = v62[3];
    v61[2] = v62[2];
    v61[3] = v69;
    *v61 = v67;
    v61[1] = v68;
  }
LABEL_54:
  v76 = *(_OWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 928) = v76;
  v77 = *(void **)(a1 + 952);
  if (v77)
  {
    *(_QWORD *)(a1 + 960) = v77;
    operator delete(v77);
    *(_QWORD *)(a1 + 952) = 0;
    *(_QWORD *)(a1 + 960) = 0;
    *(_QWORD *)(a1 + 968) = 0;
  }
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_QWORD *)(a2 + 952) = 0;
  *(_QWORD *)(a2 + 960) = 0;
  *(_QWORD *)(a2 + 968) = 0;
  v78 = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a2 + 976) = 0;
  *(_QWORD *)(a1 + 976) = v78;
  v79 = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a2 + 984) = 0;
  *(_QWORD *)(a1 + 984) = v79;
  v80 = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a2 + 992) = 0;
  *(_QWORD *)(a1 + 992) = v80;
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v81 = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1019) = *(_OWORD *)(a2 + 1019);
  *(_OWORD *)(a1 + 1008) = v81;
  v82 = (int *)(a1 + 1040);
  v83 = (_BYTE *)(a2 + 1040);
  v112 = *(_BYTE *)(a2 + 1080);
  if (!v112)
  {
    LOBYTE(v107) = *v83;
    sub_207D2F188(&v107, v82);
    if (!v112)
      goto LABEL_65;
    goto LABEL_62;
  }
  v107 = *(_DWORD *)v83;
  v108 = *(_BYTE *)(a2 + 1044);
  LOBYTE(__p[0]) = 0;
  v111 = 0;
  if (*(_BYTE *)(a2 + 1072))
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 1048);
    v110 = *(_QWORD *)(a2 + 1064);
    *(_QWORD *)(a2 + 1064) = 0;
    *(_QWORD *)(a2 + 1056) = 0;
    *(_QWORD *)(a2 + 1048) = 0;
    v111 = 1;
  }
  sub_207D2F188(&v107, v82);
  if (v112)
  {
LABEL_62:
    if (v111 && __p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
LABEL_65:
  v84 = *(_OWORD *)(a2 + 1088);
  *(_QWORD *)(a2 + 1096) = 0;
  *(_QWORD *)(a2 + 1088) = 0;
  v85 = *(std::__shared_weak_count **)(a1 + 1096);
  *(_OWORD *)(a1 + 1088) = v84;
  if (v85)
  {
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a2 + 1104) = 0u;
  v89 = *(std::__shared_weak_count **)(a1 + 1112);
  *(_OWORD *)(a1 + 1104) = v88;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = *(_OWORD *)(a2 + 1120);
  v93 = *(_OWORD *)(a2 + 1136);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v93;
  *(_OWORD *)(a1 + 1120) = v92;
  v94 = *(_QWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1160) = v94;
  v95 = *(_OWORD *)(a2 + 1172);
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1172) = v95;
  v96 = *(_QWORD *)(a2 + 1200);
  *(_DWORD *)(a1 + 1208) = *(_DWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1200) = v96;
  v97 = *(_QWORD *)(a2 + 1212);
  *(_DWORD *)(a1 + 1220) = *(_DWORD *)(a2 + 1220);
  *(_QWORD *)(a1 + 1212) = v97;
  v98 = *(_QWORD *)(a2 + 1224);
  *(_DWORD *)(a1 + 1232) = *(_DWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1224) = v98;
  v99 = *(_QWORD *)(a2 + 1236);
  *(_DWORD *)(a1 + 1244) = *(_DWORD *)(a2 + 1244);
  *(_QWORD *)(a1 + 1236) = v99;
  v100 = *(_QWORD *)(a2 + 1248);
  *(_DWORD *)(a1 + 1256) = *(_DWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1248) = v100;
  v101 = *(_QWORD *)(a2 + 1260);
  *(_DWORD *)(a1 + 1268) = *(_DWORD *)(a2 + 1268);
  *(_QWORD *)(a1 + 1260) = v101;
  v102 = *(_QWORD *)(a2 + 1272);
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1272) = v102;
  v103 = *(_QWORD *)(a2 + 1284);
  *(_DWORD *)(a1 + 1292) = *(_DWORD *)(a2 + 1292);
  *(_QWORD *)(a1 + 1284) = v103;
  v104 = *(_OWORD *)(a2 + 1296);
  v105 = *(_OWORD *)(a2 + 1312);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(_OWORD *)(a1 + 1312) = v105;
  *(_OWORD *)(a1 + 1296) = v104;
  return a1;
}

uint64_t sub_207D46B24(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

BOOL sub_207D46C58(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _BOOL8 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;
  char v19;
  void *__dst[2];
  uint64_t v21;
  char v22;

  LOBYTE(__dst[0]) = 0;
  v22 = 0;
  if (!*(_BYTE *)(a2 + 80))
    return 0;
  v4 = a2 + 56;
  if ((*(char *)(a2 + 79) & 0x80000000) == 0)
  {
    *(_OWORD *)__dst = *(_OWORD *)v4;
    v21 = *(_QWORD *)(a2 + 72);
    v22 = 1;
    v5 = *a1;
    v19 = 0;
LABEL_7:
    *(_OWORD *)__p = *(_OWORD *)v4;
    v18 = *(_QWORD *)(v4 + 16);
    goto LABEL_8;
  }
  sub_207CA40D8(__dst, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  v7 = *(unsigned __int8 *)(a2 + 80);
  v22 = 1;
  v5 = *a1;
  LOBYTE(__p[0]) = 0;
  v19 = 0;
  if (!v7)
    sub_207CA2A4C();
  if ((*(char *)(a2 + 79) & 0x80000000) == 0)
    goto LABEL_7;
  sub_207CA40D8(__p, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
LABEL_8:
  v19 = 1;
  v8 = *v5;
  v9 = v5[1];
  v10 = HIBYTE(v18);
  if (v8 != v9)
  {
    if (v18 >= 0)
      v11 = (void *)HIBYTE(v18);
    else
      v11 = __p[1];
    if (v18 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    do
    {
      v13 = *(unsigned __int8 *)(v8 + 23);
      if ((v13 & 0x80u) == 0)
        v14 = (void *)*(unsigned __int8 *)(v8 + 23);
      else
        v14 = *(void **)(v8 + 8);
      if (v14 == v11)
      {
        if ((v13 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v8, v12, *(_QWORD *)(v8 + 8)))
            goto LABEL_26;
        }
        else
        {
          if (!*(_BYTE *)(v8 + 23))
            goto LABEL_26;
          v15 = 0;
          while (*(unsigned __int8 *)(v8 + v15) == *((unsigned __int8 *)v12 + v15))
          {
            if (v13 == ++v15)
              goto LABEL_26;
          }
        }
      }
      v8 += 24;
    }
    while (v8 != v9);
    v6 = 1;
    if ((v10 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_26:
  v6 = v8 == v9;
  if (v10 < 0)
LABEL_27:
    operator delete(__p[0]);
LABEL_28:
  if (v22 && SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
  return v6;
}

void sub_207D46E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 && a14 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_207D46E50(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

__n128 sub_207D47084(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C073160;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_207D470C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C073160;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207D470EC(uint64_t a1)
{
  float *v1;
  float *v2;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  unint64_t v6;
  unint64_t v7;

  v1 = *(float **)(a1 + 16);
  v2 = *(float **)(a1 + 24);
  task_info_outCnt = 93;
  if (!task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt))
  {
    *v2 = (float)((float)v7 * 0.00097656) * 0.00097656;
    *v1 = (float)((float)v6 * 0.00097656) * 0.00097656;
  }
  return kdebug_trace();
}

uint64_t sub_207D471B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3odt8tracking25DetectTrackRefinePipeline7ProcessE"
                     "RKNS3_6vectorINS_3kit2cv14PixelBufferRefENS3_9allocatorISB_EEEEdRKNS3_8optionalINS8_INS3_6chrono8du"
                     "rationIdNS3_5ratioILl1ELl1EEEEENSC_ISM_EEEEEERKNS8_IN3cva6MatrixIfLj3ELj3ELb1EEENSC_ISU_EEEERKNSH_I"
                     "NSS_15SE3GroupStorageIfNST_IfLj4ELj4ELb1EEEEEEERKNSH_IbEENS0_11OptionalRefINS6_17PipelineDebugInfoEEEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3odt8tracking25DetectTrackRefinePipeli"
                                "ne7ProcessERKNS3_6vectorINS_3kit2cv14PixelBufferRefENS3_9allocatorISB_EEEEdRKNS3_8option"
                                "alINS8_INS3_6chrono8durationIdNS3_5ratioILl1ELl1EEEEENSC_ISM_EEEEEERKNS8_IN3cva6MatrixIf"
                                "Lj3ELj3ELb1EEENSC_ISU_EEEERKNSH_INSS_15SE3GroupStorageIfNST_IfLj4ELj4ELb1EEEEEEERKNSH_Ib"
                                "EENS0_11OptionalRefINS6_17PipelineDebugInfoEEEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3odt8tracking25DetectTrackRefinePipeline7ProcessERKNS3_6vectorINS_3kit2cv14PixelBufferRefENS3_9allocatorISB_EEEEdRKNS3_8optionalINS8_INS3_6chrono8durationIdNS3_5ratioILl1ELl1EEEEENSC_ISM_EEEEEERKNS8_IN3cva6MatrixIfLj3ELj3ELb1EEENSC_ISU_EEEERKNSH_INSS_15SE3GroupStorageIfNST_IfLj4ELj4ELb1EEEEEEERKNSH_IbEENS0_11OptionalRefINS6_17PipelineDebugInfoEEEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3odt8tracking25DetectTrackRefinePipeline7ProcessERKNS3_6vectorINS_3kit2cv14PixelBufferRefENS3_9allocatorISB_EEEEdRKNS3_8optionalINS8_INS3_6chrono8durationIdNS3_5ratioILl1ELl1EEEEENSC_ISM_EEEEEERKNS8_IN3cva6MatrixIfLj3ELj3ELb1EEENSC_ISU_EEEERKNSH_INSS_15SE3GroupStorageIfNST_IfLj4ELj4ELb1EEEEEEERKNSH_IbEENS0_11OptionalRefINS6_17PipelineDebugInfoEEEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207D4721C()
{
  return &unk_24C0731C0;
}

void sub_207D47228(char a1, _QWORD *__p)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v3 = (void *)__p[84];
    if (v3)
    {
      __p[85] = v3;
      operator delete(v3);
    }
    v4 = (void *)__p[81];
    if (v4)
    {
      __p[82] = v4;
      operator delete(v4);
    }
    v5 = (void *)__p[78];
    if (v5)
    {
      __p[79] = v5;
      operator delete(v5);
    }
    v6 = (void *)__p[72];
    if (v6)
    {
      __p[73] = v6;
      operator delete(v6);
    }
    v7 = (void *)__p[66];
    if (v7)
    {
      __p[67] = v7;
      operator delete(v7);
      operator delete(__p);
      return;
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_207D472C0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v26 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a3 + 8);
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  v25 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = v4;
  v28 = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v29 = &off_24C078D18;
  v30 = v8;
  v31 = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v27);
  v14 = v31;
  if (v31)
  {
    v15 = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v26)
    return v13;
  v22 = (unint64_t *)&v26->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return v13;
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  return v13;
}

void sub_207D47460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  sub_207D4765C((uint64_t)&a14);
  sub_207EFE910((uint64_t)&a9);
  sub_207C99D78((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_207D47484(_QWORD *a1, int *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  _DWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info v15;
  void *__p;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_2545308B0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
  {
    mach_timebase_info(&v15);
    LODWORD(v13) = v15.numer;
    LODWORD(v14) = v15.denom;
    *(double *)&qword_2545308A8 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_2545308B0);
  }
  v19[0] = llround(*(double *)&qword_2545308A8 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v20 = *a3;
    v21 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a4;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a2;
  LOBYTE(v15.numer) = 11;
  v11 = operator new(4uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_207D47708(a1, (char *)&v15, (uint64_t)v19);
  if (__p)
    operator delete(__p);
  return sub_207D49CF4((uint64_t)v19);
}

void sub_207D47610(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545308B0);
  _Unwind_Resume(a1);
}

void sub_207D47628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_207D49CF4((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_207D49CF4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_207D4765C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_207D47708(_QWORD *a1, char *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *result;
  __int128 v9;

  v5 = *a2;
  v9 = *(_OWORD *)(a2 + 8);
  v6 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  v7 = operator new(0x100uLL);
  *(_QWORD *)v7 = off_24C0732D8;
  v7[8] = v5;
  *((_OWORD *)v7 + 1) = v9;
  *((_QWORD *)v7 + 4) = v6;
  sub_207D47D34((uint64_t)(v7 + 48), a3);
  *(_QWORD *)v7 = off_24C073258;
  *a1 = &off_24C078D18;
  a1[1] = v7;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a1[2] = result;
  return result;
}

void sub_207D477C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207D4784C(v1);
  _Unwind_Resume(a1);
}

void sub_207D477D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _QWORD *v9;
  void *v11;

  v11 = (void *)v9[2];
  if (v11)
  {
    v9[3] = v11;
    operator delete(v11);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D4780C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C0732D8;
  sub_207D49CF4((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_207D4784C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C0732D8;
  sub_207D49CF4((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete(a1);
}

uint64_t sub_207D4788C(uint64_t a1)
{
  return a1 + 48;
}

unint64_t sub_207D47894(unsigned __int8 *a1, unsigned __int8 *lpsrc)
{
  unint64_t result;

  result = (unint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C073298, 0);
  if (result)
    return a1 == lpsrc || sub_208206DF8(a1 + 8, (_BYTE *)(result + 8)) == 0;
  return result;
}

void sub_207D47904(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_207D4978C();
  sub_207D479B8(a1);
  sub_207D49528(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 48, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_207D4799C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D479B8(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25452B6F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452B6F8))
  {
    v4 = sub_207D48F38();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_25452B6E0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25452B6F0 = *(_QWORD *)(v9 - 8);
      xmmword_25452B6E0 = v7;
    }
    sub_207C99DE0(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B6E0, &dword_207C77000);
    __cxa_guard_release(&qword_25452B6F8);
  }
  return sub_207D49B4C(&xmmword_25452B6E0, (uint64_t)"{", (unsigned __int8 *)(a1 + 8), (uint64_t)"}");
}

void sub_207D47AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  __cxa_guard_abort(&qword_25452B6F8);
  _Unwind_Resume(a1);
}

void sub_207D47AE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B6F8);
  _Unwind_Resume(a1);
}

void sub_207D47B00(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 8;
}

void sub_207D47B28(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 8, a2);
}

_QWORD *sub_207D47B60(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C0732D8;
  sub_207D49CF4((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_207D47BA0(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C0732D8;
  sub_207D49CF4((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete(a1);
}

uint64_t sub_207D47BE0(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207D489D4();
  return sub_207D482D0(v2, (uint64_t)"{", (unsigned __int8 *)(a1 + 8), (uint64_t)",", a1 + 48, (uint64_t)"}");
}

uint64_t sub_207D47C38(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207D484FC((uint64_t)v5, (uint64_t)v2, (unsigned __int8 *)(a1 + 8));
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C073230[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0731E8[v3])(v5, v2);
  return result;
}

void sub_207D47CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C0731E8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207D47D08(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207D47D34(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v4;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v5;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v8;
    }
    v9 = (unsigned __int128 *)(a2 + 144);
    do
      v10 = __ldaxp(v9);
    while (__stlxp(v10, v9));
    *(_OWORD *)(a1 + 144) = v10;
    *(_BYTE *)(a1 + 160) = 1;
  }
  sub_207D47EE0(a1 + 176, a2 + 176);
  return a1;
}

void sub_207D47E78(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[160] && v2[135] < 0)
    operator delete(*v4);
  if (v2[72] && v2[71] < 0)
    operator delete(*v3);
  if (v2[40])
  {
    if (v2[39] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D47EE0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_207D47FC8((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_207D47F4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v3;
  void **v4;
  void **v5;

  if (*(_BYTE *)(v1 + 24))
  {
    v3 = *(void ***)v1;
    if (*(_QWORD *)v1)
    {
      v4 = *(void ***)(v1 + 8);
      v5 = *(void ***)v1;
      if (v4 != v3)
      {
        do
        {
          if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
            operator delete(*(v4 - 8));
          if (*((_BYTE *)v4 - 72))
          {
            if (*((char *)v4 - 73) < 0)
              operator delete(*(v4 - 12));
          }
          v4 -= 12;
        }
        while (v4 != v3);
        v5 = *(void ***)v1;
      }
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207D47FC8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x2AAAAAAAAAAAAABLL)
      sub_207CA420C();
    result = operator new(96 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[12 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_207D481C4(&v8[v9 / 8], (__int128 *)(a2 + v9));
        v9 += 96;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_207D48084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207D48104(&a9);
  _Unwind_Resume(a1);
}

void sub_207D48098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (!v11)
  {
LABEL_2:
    *(_QWORD *)(v9 + 8) = v10;
    sub_207D48104(&a9);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v13 = v10 + v11;
    if (*(_BYTE *)(v10 + v11 - 16) && *(char *)(v13 - 41) < 0)
    {
      operator delete(*(void **)(v13 - 64));
      if (*(_BYTE *)(v13 - 72))
      {
LABEL_7:
        if (*(char *)(v10 + v11 - 73) < 0)
          operator delete(*(void **)(v13 - 96));
      }
    }
    else if (*(_BYTE *)(v13 - 72))
    {
      goto LABEL_7;
    }
    v11 -= 96;
    if (!v11)
      goto LABEL_2;
  }
}

void ***sub_207D48104(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_15:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        if (*((_BYTE *)v4 - 16) && *((char *)v4 - 41) < 0)
        {
          operator delete(*(v4 - 8));
          if (*((_BYTE *)v4 - 72))
          {
LABEL_10:
            if (*((char *)v4 - 73) < 0)
              operator delete(*(v4 - 12));
          }
        }
        else if (*((_BYTE *)v4 - 72))
        {
          goto LABEL_10;
        }
        v4 -= 12;
        if (v4 == v3)
        {
          v5 = **v1;
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

_BYTE *sub_207D481C4(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  __dst[32] = 0;
  __dst[80] = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 55) < 0)
    {
      sub_207CA40D8(__dst + 32, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v5 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *((_OWORD *)__dst + 2) = v5;
    }
    v6 = (unsigned __int128 *)(a2 + 4);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *((_OWORD *)__dst + 4) = v7;
    __dst[80] = 1;
  }
  return __dst;
}

void sub_207D4828C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D482D0(__int128 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207D484FC((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073200[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073200[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C073230[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0731E8[v16])(&p_dst, &__dst);
  return result;
}

void sub_207D4846C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D48484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D48498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D484AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D484C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D484D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D484E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D484FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_20820796C((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C073218[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207D4872C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207D48754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207D48768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_207EFE770((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C073218[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207D48998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207D489C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

__int128 *sub_207D489D4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B5B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B5B8))
    return &xmmword_25452B5A0;
  v2 = sub_207D48AB0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452B5A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452B5B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452B5A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B5A0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B5B8);
  return &xmmword_25452B5A0;
}

void sub_207D48A98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B5B8);
  _Unwind_Resume(a1);
}

std::string *sub_207D48AB0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B5D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B5D8))
    return &stru_25452B5C0;
  sub_207D48D54((uint64_t)__p);
  sub_207D48BA0((char *)__p, &stru_25452B5C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B5C0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B5D8);
  return &stru_25452B5C0;
}

void sub_207D48B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B5D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B5D8);
  _Unwind_Resume(a1);
}

void sub_207D48BA0(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207D48F38();
  if (*((char *)v4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207D48D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207D48D54(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452B658);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452B658))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::Number>]", qword_25452B640);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B640, &dword_207C77000);
    __cxa_guard_release(&qword_25452B658);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452B678);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452B678))
  {
    v5 = sub_207D49434(qword_25452B640, "<", 0);
    sub_207D49330(qword_25452B640, 0, v5, qword_25452B660);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B660, &dword_207C77000);
    __cxa_guard_release(&qword_25452B678);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452B698);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452B698))
  {
    sub_208215C6C((uint64_t)qword_25452B660, (uint64_t)&xmmword_25452B680);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B680, &dword_207C77000);
    __cxa_guard_release(&qword_25452B698);
  }
  if (byte_25452B697 < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452B680, *((unint64_t *)&xmmword_25452B680 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452B680;
    *(_QWORD *)(a1 + 16) = unk_25452B690;
  }
}

void sub_207D48EF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B698);
  _Unwind_Resume(a1);
}

void sub_207D48F08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B678);
  _Unwind_Resume(a1);
}

void sub_207D48F20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B658);
  _Unwind_Resume(a1);
}

__int128 *sub_207D48F38()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B5F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B5F8))
    return &xmmword_25452B5E0;
  v2 = (char *)sub_207D49014();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452B5E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452B5F0 = *((_QWORD *)v2 + 2);
    xmmword_25452B5E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B5E0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B5F8);
  return &xmmword_25452B5E0;
}

void sub_207D48FFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B5F8);
  _Unwind_Resume(a1);
}

void *sub_207D49014()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B618))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::Number]", qword_25452B600);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B600, &dword_207C77000);
    __cxa_guard_release(&qword_25452B618);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452B638);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B638))
    return &unk_25452B620;
  sub_208215C6C((uint64_t)qword_25452B600, (uint64_t)&unk_25452B620);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452B620, &dword_207C77000);
  __cxa_guard_release(&qword_25452B638);
  return &unk_25452B620;
}

void sub_207D49104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B638);
  _Unwind_Resume(a1);
}

void sub_207D4911C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B618);
  _Unwind_Resume(a1);
}

__int128 *sub_207D49134()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B720);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B720))
    return &xmmword_25452B708;
  v2 = (char *)sub_207D49210();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452B708, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452B718 = *((_QWORD *)v2 + 2);
    xmmword_25452B708 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B708, &dword_207C77000);
  __cxa_guard_release(&qword_25452B720);
  return &xmmword_25452B708;
}

void sub_207D491F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B720);
  _Unwind_Resume(a1);
}

void *sub_207D49210()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B740);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B740))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::UnknownPackage]", qword_25452B728);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B728, &dword_207C77000);
    __cxa_guard_release(&qword_25452B740);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452B760);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B760))
    return &unk_25452B748;
  sub_208215C6C((uint64_t)qword_25452B728, (uint64_t)&unk_25452B748);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452B748, &dword_207C77000);
  __cxa_guard_release(&qword_25452B760);
  return &unk_25452B748;
}

void sub_207D49300(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B760);
  _Unwind_Resume(a1);
}

void sub_207D49318(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B740);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D49330@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  size_t v14;

  v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      v8 = v7 - a2;
      if (v8 >= a3)
        v9 = a3;
      else
        v9 = v8;
      if (v9 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_7;
LABEL_19:
      sub_207C95C50();
    }
LABEL_20:
    sub_207CA4004();
  }
  v13 = result[1];
  if (v13 < a2)
    goto LABEL_20;
  v5 = (_QWORD *)*result;
  v14 = v13 - a2;
  if (v14 >= a3)
    v9 = a3;
  else
    v9 = v14;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
LABEL_7:
  if (v9 >= 0x17)
  {
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v9;
    if (!v9)
    {
      *(_BYTE *)a4 = 0;
      return result;
    }
  }
  result = memmove(a4, (char *)v5 + a2, v9);
  *((_BYTE *)a4 + v9) = 0;
  return result;
}

unint64_t sub_207D49434(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v9;
  void *v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  v9 = v7;
  if (v7)
  {
    v10 = (void *)(v5 + a3);
    v11 = (char *)(v5 + v6);
    v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      v14 = *__s;
      do
      {
        v15 = v12 - v9;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16)
          break;
        v13 = v16;
        if (!memcmp(v16, __s, v9))
          goto LABEL_9;
        v10 = v13 + 1;
        v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    v13 = v11;
LABEL_9:
    if (v13 == v11)
      return -1;
    else
      return (unint64_t)&v13[-v5];
  }
  return a3;
}

uint64_t sub_207D49528(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  __int128 __dst;
  uint64_t v14;
  int v15;
  __int128 *p_dst;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 **p_p_dst;

  v15 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v14 = *((_QWORD *)a1 + 2);
  }
  v15 = 1;
  p_dst = &__dst;
  v17 = a2;
  v18 = &__dst;
  v19 = a2;
  v20 = a2;
  sub_207CD45F4((uint64_t *)&v18, (uint64_t)&__dst);
  p_dst = &__dst;
  v17 = a3;
  v18 = &__dst;
  v19 = a3;
  v20 = a3;
  if (v15 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0731D0[v15])(&p_p_dst, &__dst);
  p_dst = &__dst;
  v17 = a4;
  v18 = &__dst;
  v19 = a4;
  v20 = a4;
  if (v15 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073200[v15])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v17 = a6;
  v18 = &__dst;
  v19 = a6;
  v20 = a6;
  if (v15 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073200[v15])(&p_p_dst, &__dst);
  if (v15 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C073230[v15])(&p_dst, &__dst);
  if (v15 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0731E8[v15])(&p_dst, &__dst);
  return result;
}

void sub_207D496FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_207D4978C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452B6B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B6B8))
  {
    sub_207C96EE8(v9, "viz::PackageData");
    v2 = sub_207D48F38();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v14 = 0xC00000000000000;
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v4 = sub_207D49A54();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    v18 = 0x400000000000000;
    *(_OWORD *)__p = *(_OWORD *)"void";
    sub_207CAA110(v8, (uint64_t)__dst, 4uLL);
    sub_208215D20((char *)v9, (uint64_t *)v8, &stru_25452B6A0, v6, v7);
    sub_207C99DE0(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B6A0, &dword_207C77000);
        __cxa_guard_release(&qword_25452B6B8);
        return &stru_25452B6A0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25452B6A0;
}

void sub_207D49970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_207C99DE0(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25452B6B8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25452B6B8);
  _Unwind_Resume(a1);
}

std::string *sub_207D49A54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B6D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B6D8))
    return &stru_25452B6C0;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 8U]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452B6C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B6C0, &dword_207C77000);
  __cxa_guard_release(&qword_25452B6D8);
  return &stru_25452B6C0;
}

void sub_207D49B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B6D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B6D8);
  _Unwind_Resume(a1);
}

uint64_t sub_207D49B4C(__int128 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207D484FC((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073200[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C073230[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0731E8[v11])(&p_dst, &__dst);
  return result;
}

void sub_207D49C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D49CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D49CF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 200))
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 184);
      v4 = *(void **)(a1 + 176);
      if (v3 == v2)
      {
LABEL_14:
        *(_QWORD *)(a1 + 184) = v2;
        operator delete(v4);
        goto LABEL_15;
      }
      while (1)
      {
        if (*(_BYTE *)(v3 - 16) && *(char *)(v3 - 41) < 0)
        {
          operator delete(*(void **)(v3 - 64));
          if (*(_BYTE *)(v3 - 72))
          {
LABEL_9:
            if (*(char *)(v3 - 73) < 0)
              operator delete(*(void **)(v3 - 96));
          }
        }
        else if (*(_BYTE *)(v3 - 72))
        {
          goto LABEL_9;
        }
        v3 -= 96;
        if (v3 == v2)
        {
          v4 = *(void **)(a1 + 176);
          goto LABEL_14;
        }
      }
    }
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 160) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(a1 + 72))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_21:
  if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_207D49E00(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_207CA3AB8();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_207D4A29C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D4A2B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D4A2B0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207D4A2FC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C084918;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

void sub_207D4A354(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C084918;
  if (*((_BYTE *)a1 + 152))
  {
    v2 = (void *)a1[16];
    if (v2)
    {
      a1[17] = v2;
      operator delete(v2);
    }
  }
  *a1 = off_24C084A40;
  sub_207CA6534((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_207D4A3AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C084970;
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

void sub_207D4A428(void **a1)
{
  *a1 = off_24C084970;
  if (*((_BYTE *)a1 + 200) && *((char *)a1 + 199) < 0)
  {
    operator delete(a1[22]);
    if (!*((_BYTE *)a1 + 152))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)a1 + 152))
  {
    goto LABEL_7;
  }
  if (*((char *)a1 + 151) < 0)
    operator delete(a1[16]);
LABEL_7:
  *a1 = off_24C084A40;
  sub_207CA6534((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_207D4A4A4(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t (**v8)();
  char *v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  void (**v23)();
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  char v29;
  char *v30;
  void *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unsigned int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  std::string::size_type v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  BOOL v62;
  std::__shared_weak_count *v63;
  BOOL v64;
  _QWORD *v65;
  std::string::size_type v66;
  unint64_t *v67;
  unint64_t v68;
  std::string::size_type v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  std::string::size_type v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  std::__shared_weak_count *v91;
  BOOL v92;
  _QWORD *v93;
  std::string::size_type v94;
  unint64_t *v95;
  unint64_t v96;
  std::string::size_type v97;
  std::__shared_weak_count *size;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  int v114;
  std::string::size_type v115;
  const std::string::value_type *v116;
  std::string *v117;
  std::string::size_type v118;
  std::string::size_type v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  int v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  std::string *v126;
  std::string::size_type v127;
  void **v128;
  int v129;
  uint64_t v130;
  void **v131;
  char v132;
  void **v133;
  size_t v134;
  unint64_t v135;
  void *v137;
  uint64_t v138;
  std::string __dst;
  _BYTE v140[24];
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  char v147;
  __int128 v148;
  std::__shared_weak_count_vtbl *v149;
  char v150;
  __int128 v151;
  __int128 v152;
  std::__shared_weak_count_vtbl *v153;
  char v154;
  __int128 v155;
  char *v156;
  char v157;
  __int128 v158;
  __int128 __p;
  std::__shared_weak_count_vtbl *v160;
  char v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  int v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  char v176;
  __int128 __src;
  std::__shared_weak_count_vtbl *v178;
  char v179;
  __int128 v180;
  __int128 v181;
  std::__shared_weak_count_vtbl *v182;
  char v183;
  __int128 v184;
  char v185;
  __int128 v186;
  uint64_t v187;

  v6 = (uint64_t)a1;
  v187 = *MEMORY[0x24BDAC8D0];
  if (*a1 == 1)
  {
    v7 = (char *)operator new(0x4E0uLL);
    bzero(v7, 0x4E0uLL);
    sub_207D4D758((uint64_t)v7);
    *(_QWORD *)v7 = off_24C073C50;
    *((_QWORD *)v7 + 123) = 0;
    *((_QWORD *)v7 + 125) = 0;
    *((_QWORD *)v7 + 124) = 0;
    LODWORD(v184) = 0;
    v7[1044] = 0;
    *((_QWORD *)v7 + 126) = 0;
    *((_QWORD *)v7 + 128) = 0;
    *((_QWORD *)v7 + 127) = 0;
    v7[1032] = 0;
    __dst.__r_.__value_.__r.__words[0] = 0;
    LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
    *(_QWORD *)&v166 = 0;
    DWORD2(v166) = 0;
    sub_207D0E228((uint64_t)(v7 + 1048), (unsigned int *)&v166, (uint64_t *)&__dst, 1, (uint64_t)&v184, 1, 0);
    v7[1096] = 0;
    v7[1240] = 0;
  }
  else if (*a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: Detector type not supported", (uint8_t *)&__dst, 2u);
    }
    v7 = 0;
  }
  else
  {
    v7 = (char *)operator new(0x3D8uLL);
    bzero(v7, 0x3D8uLL);
    sub_207D4D758((uint64_t)v7);
    *(_QWORD *)v7 = off_24C072CA8;
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 8))(v7, v6);
  if (*(_DWORD *)(v6 + 128) != 1)
  {
    v9 = (char *)operator new(0x20uLL);
    strcpy(v9, "Unsupported decoder version");
    v10 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    sub_207CA40D8(v10, v9, 0x1BuLL);
    v11 = (std::__shared_weak_count *)operator new(0x20uLL);
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_BYTE *)(a3 + 8) = 1;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = *(std::__shared_weak_count **)(a3 + 24);
    *(_QWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 24) = v11;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v9);
    goto LABEL_224;
  }
  v138 = 0;
  kdebug_trace();
  v135 = a2;
  if (*(_BYTE *)(v6 + 141))
  {
    sub_207D4D8DC((uint64_t)&v184, v6);
    sub_207DE5124(v6 + 32, (uint64_t)&v155);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C084A40;
    sub_207CA4F70((uint64_t)&__dst.__r_.__value_.__l.__size_, (uint64_t *)&v184);
    v8 = off_24C084970;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C084970;
    LOBYTE(v148) = 0;
    v150 = 0;
    if (v157)
    {
      if (SHIBYTE(v156) < 0)
      {
        sub_207CA40D8(&v148, (void *)v155, *((unint64_t *)&v155 + 1));
      }
      else
      {
        v148 = v155;
        v149 = (std::__shared_weak_count_vtbl *)v156;
      }
      v150 = 1;
    }
    v151 = v158;
    LOBYTE(v152) = 0;
    v154 = 0;
    if (v161)
    {
      if (SHIBYTE(v160) < 0)
      {
        sub_207CA40D8(&v152, (void *)__p, *((unint64_t *)&__p + 1));
        v154 = 1;
        if (v161 && SHIBYTE(v160) < 0)
          operator delete((void *)__p);
      }
      else
      {
        v152 = __p;
        v153 = v160;
        v154 = 1;
      }
    }
    if (v157 && SHIBYTE(v156) < 0)
      operator delete((void *)v155);
    sub_207CA6534((uint64_t)&v184);
    *((_QWORD *)&v166 + 1) = __dst.__r_.__value_.__l.__size_;
    v167 = __dst.__r_.__value_.__r.__words[2];
    v169 = *(_QWORD *)&v140[16];
    v171 = v142;
    v168 = *(_OWORD *)v140;
    memset(v140, 0, sizeof(v140));
    v170 = v141;
    v141 = 0uLL;
    v142 = 0;
    v172 = v143;
    v173 = v144;
    v143 = 0uLL;
    v144 = 0;
    LOBYTE(v174) = 0;
    v176 = 0;
    if (v147)
    {
      v174 = v145;
      v175 = v146;
      v146 = 0;
      v145 = 0uLL;
      v176 = 1;
    }
    *(_QWORD *)&v166 = off_24C084970;
    LOBYTE(__src) = 0;
    v179 = 0;
    if (v150)
    {
      __src = v148;
      v178 = v149;
      v149 = 0;
      v148 = 0uLL;
      v179 = 1;
    }
    v180 = v151;
    LOBYTE(v181) = 0;
    v183 = 0;
    if (v154)
    {
      v181 = v152;
      v182 = v153;
      v153 = 0;
      v152 = 0uLL;
      v183 = 1;
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C084970;
    if (v150 && SHIBYTE(v149) < 0)
      operator delete((void *)v148);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C084A40;
    sub_207CA6534((uint64_t)&__dst.__r_.__value_.__l.__size_);
    v23 = (void (**)())off_24C073350;
    *(_QWORD *)&v166 = off_24C073350;
    sub_2080A1D38((uint64_t)&v166, (uint64_t)&v184);
    if (v185)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      v140[0] = 0;
      *(_QWORD *)&v140[8] = off_24C06E9E8;
      v140[16] = v185;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
      v141 = v186;
      if (!*((_QWORD *)&v186 + 1))
        goto LABEL_172;
      v25 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      *((_QWORD *)&v184 + 1) = off_24C06E9E8;
    }
    else
    {
      v27 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v27->__shared_owners_ = 0;
      v28 = (unint64_t *)&v27->__shared_owners_;
      v27->__shared_weak_owners_ = 0;
      v27->__vftable = (std::__shared_weak_count_vtbl *)off_24C0733E0;
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084A40;
      sub_207CA4F70((uint64_t)&v27[1].__shared_owners_, (uint64_t *)&v166 + 1);
      LOBYTE(v27[6].__shared_owners_) = 0;
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084970;
      LOBYTE(v27[7].__shared_owners_) = 0;
      if (v179)
      {
        if (SHIBYTE(v178) < 0)
        {
          sub_207CA40D8(&v27[6].__shared_owners_, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          *(_OWORD *)&v27[6].__shared_owners_ = __src;
          v27[7].__vftable = v178;
        }
        LOBYTE(v27[7].__shared_owners_) = 1;
      }
      v73 = v180;
      LOBYTE(v27[8].__shared_owners_) = 0;
      *(_OWORD *)&v27[7].__shared_weak_owners_ = v73;
      LOBYTE(v27[9].__shared_owners_) = 0;
      if (v183)
      {
        if (SHIBYTE(v182) < 0)
        {
          sub_207CA40D8(&v27[8].__shared_owners_, (void *)v181, *((unint64_t *)&v181 + 1));
        }
        else
        {
          *(_OWORD *)&v27[8].__shared_owners_ = v181;
          v27[9].__vftable = v182;
        }
        LOBYTE(v27[9].__shared_owners_) = 1;
      }
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C073350;
      v164 = v27 + 1;
      v165 = v27;
      v162 = 0;
      v163 = 0;
      v74 = v184;
      *(_QWORD *)&v184 = 0;
      *(_QWORD *)&v155 = v27 + 1;
      *((_QWORD *)&v155 + 1) = v27;
      do
        v75 = __ldxr(v28);
      while (__stxr(v75 + 1, v28));
      v8 = off_24C084970;
      if (!v74
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Model.cpp", 39, (uint64_t)"instance_ != nullptr", 20, (uint64_t)&unk_2082258F5, 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1];
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      v155 = 0uLL;
      __dst.__r_.__value_.__r.__words[2] = v74;
      v140[0] = 1;
      *(_QWORD *)&v140[8] = off_24C06E9E8;
      v140[16] = 0;
      v141 = v186;
      if (*((_QWORD *)&v186 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      v156 = 0;
      do
        v78 = __ldaxr(v28);
      while (__stlxr(v78 - 1, v28));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      v79 = v163;
      if (v163)
      {
        v80 = (unint64_t *)&v163->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
      *((_QWORD *)&v184 + 1) = off_24C06E9E8;
      if (!*((_QWORD *)&v186 + 1))
      {
LABEL_172:
        if ((_QWORD)v184)
          (*(void (**)(_QWORD))(*(_QWORD *)v184 + 8))(v184);
        *(_BYTE *)(a3 + 8) = v140[16];
        v84 = v141;
        if (*((_QWORD *)&v141 + 1))
        {
          v85 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v87 = *(std::__shared_weak_count **)(a3 + 24);
        *(_OWORD *)(a3 + 16) = v84;
        if (!v87)
          goto LABEL_181;
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
          if (v140[16])
            v92 = 1;
          else
            v92 = v140[0] == 0;
          if (!v92)
          {
LABEL_192:
            v93 = operator new(0x18uLL);
            *(_OWORD *)v93 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            v94 = __dst.__r_.__value_.__r.__words[2];
            memset(&__dst, 0, sizeof(__dst));
            v93[2] = v94;
            v137 = v93;
            *(_QWORD *)&v140[8] = off_24C06E9E8;
            v91 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
            if (*((_QWORD *)&v141 + 1))
              goto LABEL_193;
            goto LABEL_197;
          }
        }
        else
        {
LABEL_181:
          if (v140[16])
            v90 = 1;
          else
            v90 = v140[0] == 0;
          if (!v90)
            goto LABEL_192;
        }
        v137 = 0;
        *(_QWORD *)&v140[8] = off_24C06E9E8;
        v91 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
        if (*((_QWORD *)&v141 + 1))
        {
LABEL_193:
          v95 = (unint64_t *)&v91->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
LABEL_197:
        if (v140[0])
        {
          v97 = __dst.__r_.__value_.__r.__words[2];
          __dst.__r_.__value_.__r.__words[2] = 0;
          if (v97)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v97 + 8))(v97);
          size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_)
          {
            v99 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        *(_QWORD *)&v166 = off_24C084970;
        if (v183 && SHIBYTE(v182) < 0)
          operator delete((void *)v181);
        if (v179 && SHIBYTE(v178) < 0)
          operator delete((void *)__src);
        *(_QWORD *)&v166 = off_24C084A40;
        goto LABEL_212;
      }
    }
    v82 = (unint64_t *)&v24->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_172;
  }
  sub_207D4D8DC((uint64_t)&v184, v6);
  v19 = *(_DWORD *)(v6 + 4);
  if (v19)
    v20 = 1;
  else
    v20 = 2;
  if (*(_BYTE *)(v6 + 143))
  {
    v21 = (unsigned __int16)sub_207CF7368();
    if (v21 <= 0x100)
      LOBYTE(v21) = 0;
    v22 = v21 != 0;
  }
  else
  {
    v22 = 0;
  }
  v29 = v19 == 0;
  v30 = (char *)operator new(28 << (v19 == 0));
  v31 = v30;
  v32 = (28 << (v19 == 0)) - 28;
  v33 = v30;
  if (v32 < 0x1C)
    goto LABEL_310;
  v34 = v32 / 0x1C + 1;
  v33 = &v30[28 * (v34 & 0x1FFFFFFFFFFFFFFELL)];
  v35 = v30 + 28;
  v36 = v34 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v35 - 28) = 0;
    *v35 = 0;
    *(v35 - 16) = 0;
    v35[12] = 0;
    *(v35 - 12) = 0;
    v35[16] = 0;
    *(v35 - 8) = 0;
    v35[20] = 0;
    *(v35 - 4) = 0;
    v35[24] = 0;
    *(v35 - 3) = v22;
    v35[25] = v22;
    v35 += 56;
    v36 -= 2;
  }
  while (v36);
  if (v34 != (v34 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_310:
    do
    {
      *v33 = 0;
      v33[12] = 0;
      v33[16] = 0;
      v33[20] = 0;
      v33[24] = 0;
      v33[25] = v22;
      v33 += 28;
    }
    while (v33 != &v30[28 * v20]);
  }
  v37 = (char *)operator new(28 << v29);
  v38 = &v37[28 * (1 << v29)];
  *(_QWORD *)&v155 = v37;
  v156 = v38;
  memcpy(v37, v31, (28 << (v19 == 0)) - 2);
  *((_QWORD *)&v155 + 1) = v38;
  v157 = 1;
  *(_QWORD *)&v158 = 0;
  WORD4(v158) = 0;
  if (*(_BYTE *)(v6 + 140))
  {
    LODWORD(v158) = 3;
    v39 = 2 * *(unsigned __int8 *)(v6 + 144);
  }
  else
  {
    v40 = (unsigned __int16)sub_207CF7368();
    if (v40 <= 0x100)
      LOBYTE(v40) = 0;
    if ((_BYTE)v40)
      v39 = 1;
    else
      v39 = 2;
    LODWORD(v158) = v39;
    if (!*(_BYTE *)(v6 + 144))
      v39 = 1;
  }
  DWORD1(v158) = v39;
  operator delete(v31);
  v23 = off_24C084A40;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C084A40;
  sub_207CA4F70((uint64_t)&__dst.__r_.__value_.__l.__size_, (uint64_t *)&v184);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C084918;
  sub_207D4EC30((uint64_t)&v148, (uint64_t)&v155);
  *(_QWORD *)&v151 = v158;
  WORD4(v151) = WORD4(v158);
  if (v157 && (_QWORD)v155)
  {
    *((_QWORD *)&v155 + 1) = v155;
    operator delete((void *)v155);
  }
  sub_207CA6534((uint64_t)&v184);
  *((_QWORD *)&v166 + 1) = __dst.__r_.__value_.__l.__size_;
  v167 = __dst.__r_.__value_.__r.__words[2];
  v169 = *(_QWORD *)&v140[16];
  v171 = v142;
  v168 = *(_OWORD *)v140;
  memset(v140, 0, sizeof(v140));
  v170 = v141;
  v141 = 0uLL;
  v142 = 0;
  v172 = v143;
  v173 = v144;
  v143 = 0uLL;
  v144 = 0;
  LOBYTE(v174) = 0;
  v176 = 0;
  if (v147)
  {
    v174 = v145;
    v175 = v146;
    v146 = 0;
    v145 = 0uLL;
    v176 = 1;
  }
  *(_QWORD *)&v166 = off_24C084918;
  LOBYTE(__src) = 0;
  v179 = 0;
  if (v150)
  {
    __src = v148;
    v178 = v149;
    v149 = 0;
    v148 = 0uLL;
    v179 = 1;
  }
  *(_QWORD *)&v180 = v151;
  WORD4(v180) = WORD4(v151);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C084A40;
  sub_207CA6534((uint64_t)&__dst.__r_.__value_.__l.__size_);
  *(_QWORD *)&v166 = off_24C073328;
  sub_2080A19F8((uint64_t)&v166, (uint64_t)&v184);
  v8 = (uint64_t (**)())&v166 + 1;
  if (v185)
  {
    __dst.__r_.__value_.__s.__data_[0] = 0;
    v140[0] = 0;
    *(_QWORD *)&v140[8] = off_24C06E9E8;
    v140[16] = v185;
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
    v141 = v186;
    if (!*((_QWORD *)&v186 + 1))
      goto LABEL_107;
    v42 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    *((_QWORD *)&v184 + 1) = off_24C06E9E8;
    goto LABEL_103;
  }
  v44 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v44->__shared_owners_ = 0;
  v45 = (unint64_t *)&v44->__shared_owners_;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)off_24C073430;
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084A40;
  sub_207CA4F70((uint64_t)&v44[1].__shared_owners_, (uint64_t *)&v166 + 1);
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084918;
  sub_207D4EC30((uint64_t)&v44[6].__shared_owners_, (uint64_t)&__src);
  v44[7].__shared_weak_owners_ = v180;
  LOWORD(v44[8].__vftable) = WORD4(v180);
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C073328;
  v164 = v44 + 1;
  v165 = v44;
  v162 = 0;
  v163 = 0;
  v46 = v184;
  *(_QWORD *)&v184 = 0;
  *(_QWORD *)&v155 = v44 + 1;
  *((_QWORD *)&v155 + 1) = v44;
  do
    v47 = __ldxr(v45);
  while (__stxr(v47 + 1, v45));
  if (!v46
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Model.cpp", 39, (uint64_t)"instance_ != nullptr", 20, (uint64_t)&unk_2082258F5, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44[1];
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
  v155 = 0uLL;
  __dst.__r_.__value_.__r.__words[2] = v46;
  v140[0] = 1;
  *(_QWORD *)&v140[8] = off_24C06E9E8;
  v140[16] = 0;
  v141 = v186;
  if (*((_QWORD *)&v186 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v156 = 0;
  do
    v50 = __ldaxr(v45);
  while (__stlxr(v50 - 1, v45));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  v51 = v163;
  if (v163)
  {
    v52 = (unint64_t *)&v163->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  *((_QWORD *)&v184 + 1) = off_24C06E9E8;
  v23 = off_24C084A40;
  if (*((_QWORD *)&v186 + 1))
  {
LABEL_103:
    v54 = (unint64_t *)&v41->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
LABEL_107:
  if ((_QWORD)v184)
    (*(void (**)(_QWORD))(*(_QWORD *)v184 + 8))(v184);
  *(_BYTE *)(a3 + 8) = v140[16];
  v56 = v141;
  if (*((_QWORD *)&v141 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v56;
  if (!v59)
    goto LABEL_116;
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
    if (v140[16])
      v64 = 1;
    else
      v64 = v140[0] == 0;
    if (!v64)
    {
LABEL_127:
      v65 = operator new(0x18uLL);
      *(_OWORD *)v65 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      v66 = __dst.__r_.__value_.__r.__words[2];
      memset(&__dst, 0, sizeof(__dst));
      v65[2] = v66;
      v137 = v65;
      *(_QWORD *)&v140[8] = off_24C06E9E8;
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      if (*((_QWORD *)&v141 + 1))
        goto LABEL_128;
      goto LABEL_132;
    }
  }
  else
  {
LABEL_116:
    if (v140[16])
      v62 = 1;
    else
      v62 = v140[0] == 0;
    if (!v62)
      goto LABEL_127;
  }
  v137 = 0;
  *(_QWORD *)&v140[8] = off_24C06E9E8;
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
LABEL_128:
    v67 = (unint64_t *)&v63->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_132:
  if (v140[0])
  {
    v69 = __dst.__r_.__value_.__r.__words[2];
    __dst.__r_.__value_.__r.__words[2] = 0;
    if (v69)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v69 + 8))(v69);
    v70 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v71 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
  *(_QWORD *)&v166 = off_24C084918;
  if (v179 && (_QWORD)__src)
  {
    *((_QWORD *)&__src + 1) = __src;
    operator delete((void *)__src);
  }
  *(_QWORD *)&v166 = off_24C084A40;
LABEL_212:
  sub_207CA6534((uint64_t)&v166 + 8);
  kdebug_trace();
  if (v137)
  {
    v101 = operator new(0x20uLL);
    *v101 = &off_24C073480;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v137;
    *((_QWORD *)v7 + 110) = v137;
    v102 = (std::__shared_weak_count *)*((_QWORD *)v7 + 111);
    *((_QWORD *)v7 + 111) = v101;
    if (!v102)
      goto LABEL_220;
  }
  else
  {
    *((_QWORD *)v7 + 110) = 0;
    v102 = (std::__shared_weak_count *)*((_QWORD *)v7 + 111);
    *((_QWORD *)v7 + 111) = 0;
    if (!v102)
      goto LABEL_220;
  }
  v103 = (unint64_t *)&v102->__shared_owners_;
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
LABEL_220:
  if (!*((_QWORD *)v7 + 110))
  {
LABEL_224:
    *a4 = 0;
    (*(void (**)(char *))(*(_QWORD *)v7 + 32))(v7);
    return;
  }
  sub_207D54AEC((uint64_t)(v7 + 432), (uint64_t **)v7 + 110);
  v105 = v135;
  v106 = *(_DWORD *)(v6 + 4);
  if (v106)
  {
    if (v106 != 1)
      goto LABEL_227;
    v107 = 1278226488;
  }
  else
  {
    v107 = 875704422;
  }
  *((_DWORD *)v7 + 134) = v107;
LABEL_227:
  if (*(_BYTE *)(v6 + 408))
  {
    v108 = *(_QWORD *)(v6 + 152) * *(_QWORD *)(v6 + 160);
    v109 = *((_QWORD *)v7 + 68);
    v110 = (*((_QWORD *)v7 + 69) - v109) >> 2;
    if (v108 <= v110)
    {
      if (v108 < v110)
        *((_QWORD *)v7 + 69) = v109 + 4 * v108;
    }
    else
    {
      sub_207D55DD4((uint64_t)(v7 + 544), v108 - v110);
    }
    if (*((_DWORD *)v7 + 134) != 1278226488)
    {
      v111 = *((_QWORD *)v7 + 71);
      v112 = (*((_QWORD *)v7 + 72) - v111) >> 2;
      if (v108 >> 1 <= v112)
      {
        if (v108 >> 1 < v112)
          *((_QWORD *)v7 + 72) = v111 + 4 * (v108 >> 1);
      }
      else
      {
        sub_207D55DD4((uint64_t)(v7 + 568), (v108 >> 1) - v112);
      }
    }
  }
  v113 = *(unsigned __int8 *)(v135 + 56);
  if (!*(_BYTE *)(v135 + 56))
  {
    v127 = 0;
    v128 = (void **)(v7 + 928);
    v129 = v7[976];
    if (!v7[976])
      goto LABEL_273;
    goto LABEL_259;
  }
  v114 = *(char *)(v135 + 23);
  if (v114 >= 0)
    v115 = *(unsigned __int8 *)(v135 + 23);
  else
    v115 = *(_QWORD *)(v135 + 8);
  if (v115)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&__dst, ".detector");
    if (v114 >= 0)
      v116 = (const std::string::value_type *)v135;
    else
      v116 = *(const std::string::value_type **)v135;
    v117 = std::string::insert(&__dst, 0, v116, v115);
    v119 = v117->__r_.__value_.__r.__words[0];
    v118 = v117->__r_.__value_.__l.__size_;
    v120 = v118 & 0xFFFFFFFFFFFFFF00;
    LODWORD(v155) = v117->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v155 + 3) = *(_DWORD *)((char *)&v117->__r_.__value_.__r.__words[2] + 3);
    v121 = HIBYTE(v117->__r_.__value_.__r.__words[2]);
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v122 = v118;
    LOBYTE(v23) = 4;
    v6 = 2020565602;
    if (*(_BYTE *)(v135 + 48))
    {
LABEL_248:
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__dst, "bbox");
      v123 = *(char *)(v135 + 47);
      if (v123 >= 0)
        v124 = (const std::string::value_type *)(v135 + 24);
      else
        v124 = *(const std::string::value_type **)(v135 + 24);
      if (v123 >= 0)
        v125 = *(unsigned __int8 *)(v135 + 47);
      else
        v125 = *(_QWORD *)(v135 + 32);
      v126 = std::string::append(&__dst, v124, v125);
      v6 = v126->__r_.__value_.__r.__words[0];
      v105 = v126->__r_.__value_.__l.__size_;
      LODWORD(v138) = v126->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)&v138 + 3) = *(_DWORD *)((char *)&v126->__r_.__value_.__r.__words[2] + 3);
      LOBYTE(v23) = *((_BYTE *)&v126->__r_.__value_.__s + 23);
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v121 & 0x80) == 0)
        goto LABEL_257;
      goto LABEL_268;
    }
  }
  else
  {
    v120 = 0;
    v122 = 0;
    v119 = 0x726F746365746564;
    v121 = 8;
    LOBYTE(v23) = 4;
    v6 = 2020565602;
    if (*(_BYTE *)(v135 + 48))
      goto LABEL_248;
  }
  if ((v121 & 0x80) == 0)
  {
LABEL_257:
    __dst.__r_.__value_.__r.__words[0] = v119;
    __dst.__r_.__value_.__l.__size_ = v122 | v120;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v155;
    *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v155 + 3);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v121;
    goto LABEL_269;
  }
LABEL_268:
  sub_207CA40D8(&__dst, (void *)v119, v122 | v120);
LABEL_269:
  if ((v23 & 0x80) == 0)
  {
    *(_QWORD *)&v140[8] = v105;
    *(_DWORD *)&v140[16] = v138;
    *(_DWORD *)&v140[19] = *(_DWORD *)((char *)&v138 + 3);
    *(_QWORD *)&v166 = __dst.__r_.__value_.__l.__size_;
    v127 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v166 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v8) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
    *(_QWORD *)&v184 = v105;
    *(_QWORD *)((char *)&v184 + 7) = *(_QWORD *)&v140[15];
    if ((v121 & 0x80) == 0)
      goto LABEL_272;
    goto LABEL_271;
  }
  sub_207CA40D8(v140, (void *)v6, v105);
  *(_QWORD *)&v166 = __dst.__r_.__value_.__l.__size_;
  v127 = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v166 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
  LOBYTE(v8) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
  *(_QWORD *)&v184 = *(_QWORD *)&v140[8];
  v130 = *(_QWORD *)v140;
  *(_QWORD *)((char *)&v184 + 7) = *(_QWORD *)&v140[15];
  LOBYTE(v23) = v140[23];
  operator delete((void *)v6);
  v6 = v130;
  if (v121 < 0)
LABEL_271:
    operator delete((void *)v119);
LABEL_272:
  v128 = (void **)(v7 + 928);
  v129 = v7[976];
  if (v129 == 1)
  {
LABEL_273:
    if (v129)
    {
      if (v7[951] < 0)
        operator delete(*v128);
      *((_QWORD *)v7 + 116) = v127;
      *((_QWORD *)v7 + 117) = v166;
      *(_QWORD *)(v7 + 943) = *(_QWORD *)((char *)&v166 + 7);
      v7[951] = (char)v8;
      v127 &= 0xFFFFFFFFFFFFFF00;
      if (v7[975] < 0)
        operator delete(*((void **)v7 + 119));
      LOBYTE(v8) = 0;
      *((_QWORD *)v7 + 119) = v6;
      *((_QWORD *)v7 + 120) = v184;
      *(_QWORD *)(v7 + 967) = *(_QWORD *)((char *)&v184 + 7);
      v7[975] = (char)v23;
      v6 &= 0xFFFFFFFFFFFFFF00;
      LOBYTE(v23) = 0;
    }
    if (!v113)
      goto LABEL_288;
    goto LABEL_280;
  }
LABEL_259:
  if (v129)
  {
    if (v7[975] < 0)
      operator delete(*((void **)v7 + 119));
    if (v7[951] < 0)
      operator delete(*v128);
    v7[976] = 0;
    if (!v113)
      goto LABEL_288;
  }
  else
  {
    *((_QWORD *)v7 + 116) = v127;
    *((_QWORD *)v7 + 117) = v166;
    *(_QWORD *)(v7 + 943) = *(_QWORD *)((char *)&v166 + 7);
    v7[951] = (char)v8;
    *(_QWORD *)&v166 = 0;
    *(_QWORD *)((char *)&v166 + 7) = 0;
    *((_QWORD *)v7 + 119) = v6;
    *((_QWORD *)v7 + 120) = v184;
    *(_QWORD *)(v7 + 967) = *(_QWORD *)((char *)&v184 + 7);
    v7[975] = (char)v23;
    *(_QWORD *)&v184 = 0;
    *(_QWORD *)((char *)&v184 + 7) = 0;
    v7[976] = 1;
    v127 = 0;
    v6 = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v8) = 0;
    if (!v113)
      goto LABEL_288;
  }
LABEL_280:
  if ((v23 & 0x80) != 0)
  {
    operator delete((void *)v6);
    if ((v8 & 0x80) != 0)
LABEL_284:
      operator delete((void *)v127);
  }
  else if ((v8 & 0x80) != 0)
  {
    goto LABEL_284;
  }
LABEL_288:
  if (v7[976])
  {
    v131 = (void **)(v7 + 816);
    if (v7[840])
    {
      v132 = v7[951];
      if (v7[839] < 0)
      {
        if (v132 >= 0)
          v133 = v128;
        else
          v133 = (void **)*((_QWORD *)v7 + 116);
        if (v132 >= 0)
          v134 = v7[951];
        else
          v134 = *((_QWORD *)v7 + 117);
        sub_207CC2244(v131, v133, v134);
      }
      else if (v7[951] < 0)
      {
        sub_207CC2180(v131, *((void **)v7 + 116), *((_QWORD *)v7 + 117));
      }
      else
      {
        *(_OWORD *)v131 = *(_OWORD *)v128;
        *((_QWORD *)v7 + 104) = v128[2];
      }
    }
    else
    {
      if (v7[951] < 0)
      {
        sub_207CA40D8(v131, *((void **)v7 + 116), *((_QWORD *)v7 + 117));
      }
      else
      {
        *(_OWORD *)v131 = *(_OWORD *)v128;
        *((_QWORD *)v7 + 104) = v128[2];
      }
      v7[840] = 1;
    }
  }
  *a4 = v7;
}

void sub_207D4BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  void **v64;
  void **v65;
  uint64_t v66;
  void *v67;

  if (*(_BYTE *)(v62 + 224) && *(char *)(v62 + 223) < 0)
    operator delete(*v65);
  if (*(_BYTE *)(v62 + 176))
  {
    if (*(char *)(v62 + 175) < 0)
      operator delete(*v64);
  }
  *v63 = off_24C084A40;
  sub_207CA6534(a10);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v62);
  operator delete(v67);
  sub_207D4EA24((uint64_t *)(v66 - 224));
  sub_2080A1BC4((uint64_t)&a61);
  sub_207CD822C((uint64_t)&a15);
  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
  _Unwind_Resume(a1);
}

_QWORD **sub_207D4BEC4(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[2];
    v2[2] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = (std::__shared_weak_count *)v2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207D4BF50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = &unk_24C073378;
  if (!*(_BYTE *)(a1 + 976))
    goto LABEL_4;
  if (*(char *)(a1 + 975) < 0)
  {
    operator delete(*(void **)(a1 + 952));
    if (*(char *)(a1 + 951) < 0)
      goto LABEL_10;
LABEL_4:
    v2 = *(std::__shared_weak_count **)(a1 + 888);
    if (!v2)
      goto LABEL_11;
    goto LABEL_5;
  }
  if ((*(char *)(a1 + 951) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_10:
  operator delete(*(void **)(a1 + 928));
  v2 = *(std::__shared_weak_count **)(a1 + 888);
  if (!v2)
    goto LABEL_11;
LABEL_5:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_11:
  sub_207D31050(a1 + 432);
  sub_207D049E4(a1 + 8);
  return a1;
}

void sub_207D4C008(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t **v6;
  int v7;
  size_t size;
  std::string *p_p;
  size_t v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  std::string *v17;
  size_t v18;
  size_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  char v35;
  uint64_t **v36;
  uint64_t *v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  char v43;
  std::string *v44;
  std::string::size_type v45;
  uint64_t **v46;
  int v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  int v55;
  uint64_t *v56;
  size_t v57;
  size_t v58;
  int v59;
  std::string *v60;
  std::string *v61;
  size_t v62;
  void *__src;
  std::string v64;
  std::string __p;
  unint64_t v66[3];

  v66[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 312))
    goto LABEL_41;
  v66[0] = sub_20815C768(a1, 0);
  sub_207C9F428(v66);
  v4 = std::string::insert(&v64, 0, "image_stride_", 0xDuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    v6 = *(uint64_t ***)(a2 + 200);
    if (!v6)
      goto LABEL_40;
  }
  else
  {
    v6 = *(uint64_t ***)(a2 + 200);
    if (!v6)
      goto LABEL_40;
  }
  v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  __src = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v10 = __p.__r_.__value_.__l.__size_;
  while (1)
  {
    v11 = *((char *)v6 + 55);
    if (v11 >= 0)
      v12 = (uint64_t *)(v6 + 4);
    else
      v12 = v6[4];
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)v6 + 55);
    else
      v13 = (size_t)v6[5];
    if (v13 >= v10)
      v14 = v10;
    else
      v14 = v13;
    v15 = memcmp(p_p, v12, v14);
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_14;
    }
    else if (v10 < v13)
    {
      goto LABEL_14;
    }
    v16 = memcmp(v12, p_p, v14);
    if (!v16)
    {
      if (v13 >= v10)
        break;
      goto LABEL_13;
    }
    if ((v16 & 0x80000000) == 0)
      break;
LABEL_13:
    ++v6;
LABEL_14:
    v6 = (uint64_t **)*v6;
    if (!v6)
      goto LABEL_40;
  }
  v17 = (std::string *)(a2 + 280);
  if (*(_BYTE *)(a2 + 304))
  {
    if (v17 != &__p)
    {
      if (*(char *)(a2 + 303) < 0)
      {
        sub_207CC2244((void **)&v17->__r_.__value_.__l.__data_, p_p, v10);
      }
      else if (v7 < 0)
      {
        sub_207CC2180(v17, __src, size);
      }
      else
      {
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(a2 + 296) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
    }
  }
  else
  {
    if (v7 < 0)
    {
      sub_207CA40D8(v17, __src, size);
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 296) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    *(_BYTE *)(a2 + 304) = 1;
  }
LABEL_40:
  *(_BYTE *)(a2 + 312) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (*(_QWORD *)(a2 + 168) == *(_QWORD *)(a2 + 176))
      return;
  }
  else
  {
LABEL_41:
    if (*(_QWORD *)(a2 + 168) == *(_QWORD *)(a2 + 176))
      return;
  }
  v18 = sub_20815C130(a1);
  v19 = sub_20815C3B0(a1);
  v20 = *(float **)(a2 + 168);
  v21 = *(_QWORD *)(a2 + 176) - (_QWORD)v20;
  if (v21 == 4)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = (float)v18 / (float)v19;
    v24 = v21 >> 2;
    v25 = v23 / *v20;
    if ((float)(*v20 / v23) >= v25)
      v25 = *v20 / v23;
    v26 = 1;
    do
    {
      v27 = v20[v26];
      v28 = v27 / v23;
      v29 = v23 / v27;
      if (v28 >= v29)
        v29 = v28;
      if (v29 < v25)
      {
        v22 = v26;
        v25 = v29;
      }
      ++v26;
    }
    while (v24 != v26);
  }
  memset(&__p, 0, sizeof(__p));
  if (!*(_BYTE *)(a2 + 240))
  {
    std::to_string(&v64, v20[v22]);
    v38 = *(char *)(a2 + 239);
    if (v38 >= 0)
      v39 = (const std::string::value_type *)(a2 + 216);
    else
      v39 = *(const std::string::value_type **)(a2 + 216);
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a2 + 239);
    else
      v40 = *(_QWORD *)(a2 + 224);
    v41 = std::string::insert(&v64, 0, v39, v40);
    v42 = v41->__r_.__value_.__r.__words[0];
    v66[0] = v41->__r_.__value_.__l.__size_;
    *(unint64_t *)((char *)v66 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
    v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(unint64_t *)((char *)v66 + 7);
    __p.__r_.__value_.__r.__words[0] = v42;
    __p.__r_.__value_.__l.__size_ = v66[0];
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v43;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      v36 = (uint64_t **)(a2 + 200);
      v37 = *(uint64_t **)(a2 + 200);
      if (v37)
        goto LABEL_72;
    }
    else
    {
      v36 = (uint64_t **)(a2 + 200);
      v37 = *(uint64_t **)(a2 + 200);
      if (v37)
        goto LABEL_72;
    }
    goto LABEL_114;
  }
  if (*(_BYTE *)(a2 + 272))
  {
    std::to_string(&v64, v20[v22]);
    v30 = *(char *)(a2 + 271);
    if (v30 >= 0)
      v31 = (const std::string::value_type *)(a2 + 248);
    else
      v31 = *(const std::string::value_type **)(a2 + 248);
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 271);
    else
      v32 = *(_QWORD *)(a2 + 256);
    v33 = std::string::insert(&v64, 0, v31, v32);
    v34 = v33->__r_.__value_.__r.__words[0];
    v66[0] = v33->__r_.__value_.__l.__size_;
    *(unint64_t *)((char *)v66 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
    v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(unint64_t *)((char *)v66 + 7);
    __p.__r_.__value_.__r.__words[0] = v34;
    __p.__r_.__value_.__l.__size_ = v66[0];
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v35;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    *(_BYTE *)(a2 + 272) ^= 1u;
    v36 = (uint64_t **)(a2 + 200);
    v37 = *(uint64_t **)(a2 + 200);
    if (!v37)
      goto LABEL_114;
  }
  else
  {
    std::to_string(&v64, v20[v22]);
    __p = v64;
    *(_BYTE *)(a2 + 272) ^= 1u;
    v36 = (uint64_t **)(a2 + 200);
    v37 = *(uint64_t **)(a2 + 200);
    if (!v37)
      goto LABEL_114;
  }
LABEL_72:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &__p;
  else
    v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v45 = __p.__r_.__value_.__l.__size_;
  v46 = v36;
  while (2)
  {
    while (2)
    {
      v47 = *((char *)v37 + 55);
      if (v47 >= 0)
        v48 = v37 + 4;
      else
        v48 = (const void *)v37[4];
      if (v47 >= 0)
        v49 = *((unsigned __int8 *)v37 + 55);
      else
        v49 = v37[5];
      if (v45 >= v49)
        v50 = v49;
      else
        v50 = v45;
      v51 = memcmp(v48, v44, v50);
      if (v51)
      {
        if ((v51 & 0x80000000) == 0)
          break;
        goto LABEL_79;
      }
      if (v49 < v45)
      {
LABEL_79:
        v37 = (uint64_t *)v37[1];
        if (!v37)
          goto LABEL_94;
        continue;
      }
      break;
    }
    v46 = (uint64_t **)v37;
    v37 = (uint64_t *)*v37;
    if (v37)
      continue;
    break;
  }
LABEL_94:
  if (v46 == v36)
  {
LABEL_114:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Detector.cpp", 291, (uint64_t)"config.model_configs.find(model_config_name) != config.model_configs.end()", 74, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    goto LABEL_115;
  }
  v54 = v46[4];
  v53 = (uint64_t *)(v46 + 4);
  v52 = v54;
  v55 = *((char *)v53 + 23);
  if (v55 >= 0)
    v56 = v53;
  else
    v56 = v52;
  if (v55 >= 0)
    v57 = *((unsigned __int8 *)v53 + 23);
  else
    v57 = v53[1];
  if (v57 >= v45)
    v58 = v45;
  else
    v58 = v57;
  v59 = memcmp(v44, v56, v58);
  if (v59)
  {
    if (v59 < 0)
      goto LABEL_114;
  }
  else if (v45 < v57)
  {
    goto LABEL_114;
  }
LABEL_115:
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(sub_207D4EE34(v36 - 1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p)[7]+ 8);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(sub_207D4EE34(v36 - 1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p)[7]+ 16);
  v60 = (std::string *)(a2 + 280);
  if (*(_BYTE *)(a2 + 304))
  {
    if (v60 != &__p)
    {
      if (*(char *)(a2 + 303) < 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &__p;
        else
          v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v62 = __p.__r_.__value_.__l.__size_;
        sub_207CC2244((void **)&v60->__r_.__value_.__l.__data_, v61, v62);
      }
      else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_207CC2180(v60, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(a2 + 296) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(v60, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 296) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    *(_BYTE *)(a2 + 304) = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207D4C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207D4C67C(uint64_t a1, uint64_t *a2, unsigned int *a3, double a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  __int128 v14;
  float *v15;
  char *v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  float *v34;
  unint64_t v35;
  float *v36;
  float *v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float *v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  float *v50;
  unint64_t v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float *v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  float *v65;
  unint64_t v66;
  float *v67;
  float *v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  float *v79;
  unint64_t v80;
  float *v81;
  float *v82;
  uint64_t v83;
  float *v84;
  int64_t v85;
  unint64_t v86;
  float *v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  const double *v105;
  double *v106;
  uint64_t v107;
  const double *v108;
  double *v109;
  float *v110;
  int64_t v111;
  unint64_t v112;
  float *v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  const double *v131;
  double *v132;
  uint64_t v133;
  const double *v134;
  double *v135;
  float *v136;
  int64_t v137;
  unint64_t v138;
  float *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  const double *v157;
  double *v158;
  uint64_t v159;
  const double *v160;
  double *v161;
  float *v162;
  int64_t v163;
  unint64_t v164;
  float *v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  BOOL v172;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  BOOL v176;
  BOOL v177;
  BOOL v178;
  BOOL v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  const double *v183;
  double *v184;
  uint64_t v185;
  const double *v186;
  double *v187;
  _QWORD *v188;
  uint64_t *v189;
  void *v190;
  char v191;
  uint64_t v192;
  unsigned __int8 v193;
  std::__shared_weak_count_vtbl *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *p_shared_owners;
  unint64_t v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  char *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  double v215;
  float v216;
  __int128 v217;
  float *v218;
  __int128 v219;
  std::string v220;
  void *__dst[4];
  void *__p;
  uint64_t v223;
  std::__shared_weak_count *v224;
  void *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  _QWORD v228[2];
  const char *v229;
  uint64_t v230;
  void *v231;
  _BYTE v232[15];
  char v233;
  char v234;
  char v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  char v240;
  char v241;
  char v242;
  char v243;
  mach_timebase_info info;
  char *v245;
  std::__shared_weak_count *v246;
  uint64_t v247;
  float64x2x2_t v248;
  float64x2x2_t v249;
  float64x2x2_t v250;
  float64x2x2_t v251;
  float64x2x2_t v252;

  v247 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 976))
    return;
  v8 = (void *)(a1 + 928);
  v229 = "cv3d.odt.";
  v230 = 9;
  v9 = *(unsigned __int8 *)(a1 + 951);
  if ((v9 & 0x80u) != 0)
  {
    v8 = *(void **)(a1 + 928);
    v9 = *(_QWORD *)(a1 + 936);
  }
  v231 = v8;
  *(_QWORD *)v232 = v9;
  sub_207CAC8F4((uint64_t)&v229, (uint64_t)&v232[8], 0, 0, &v220);
  sub_207CF7E1C();
  sub_207CF7B20();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_296;
  sub_207F0D4B0();
  v10 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    goto LABEL_296;
  kdebug_trace();
  v11 = *a2;
  v12 = a2[1];
  v219 = 0uLL;
  v218 = 0;
  if (v12 == *a2)
    goto LABEL_259;
  if ((0xB6DB6DB6DB6DB6DCLL * ((v12 - v11) >> 3)) >> 60)
    sub_207CA420C();
  v214 = v10;
  v215 = a4;
  v13 = (float *)operator new(0x6DB6DB6DB6DB6DC0 * ((v12 - v11) >> 3));
  v15 = v13;
  v16 = (char *)&v13[0x1B6DB6DB6DB6DB70 * ((v12 - v11) >> 3)];
  do
  {
    while (1)
    {
      while (1)
      {
        v17 = *(float32x2_t *)(v11 + 12);
        v18 = vmul_f32(vadd_f32(*(float32x2_t *)(v11 + 4), v17), (float32x2_t)0x3F0000003F000000);
        v19 = vsub_f32(v18, v17);
        *(float32x2_t *)&v14 = vadd_f32(v18, v19);
        v20 = vsub_f32(v18, v19).f32[0];
        v21 = v18.f32[1];
        v22 = v19.f32[1];
        v23 = v18.f32[1] + v19.f32[1];
        v18.f32[0] = (float)*a3;
        v24 = v18.f32[0] * *(float *)&v14;
        v19.f32[0] = (float)a3[1];
        v216 = v20;
        v217 = v14;
        v25 = vmuls_lane_f32(v19.f32[0], *(float32x2_t *)&v14, 1);
        v26 = v18.f32[0] * v20;
        v27 = (float)(v18.f32[1] + v19.f32[1]) * v19.f32[0];
        if (v15 < (float *)v16)
        {
          *v15 = v24;
          v15[1] = v25;
          v28 = v15 + 4;
          v15[2] = v26;
          v15[3] = v27;
          goto LABEL_31;
        }
        v29 = (char *)v15 - (char *)v13;
        v30 = ((char *)v15 - (char *)v13) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          sub_207CA420C();
        if ((v16 - (char *)v13) >> 3 > v31)
          v31 = (v16 - (char *)v13) >> 3;
        if ((unint64_t)(v16 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
          v32 = 0xFFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          if (v32 >> 60)
            sub_207CA3AB8();
          v33 = (char *)operator new(16 * v32);
        }
        else
        {
          v33 = 0;
        }
        v34 = (float *)&v33[16 * v30];
        *v34 = v24;
        v34[1] = v25;
        v16 = &v33[16 * v32];
        v34[2] = v26;
        v34[3] = v27;
        v28 = v34 + 4;
        if (v15 != v13)
        {
          v35 = (char *)v15 - (char *)v13 - 16;
          if (v35 < 0x3F0)
            goto LABEL_24;
          v84 = v15 - 4;
          v85 = (char *)(v15 - 4) - (char *)v13;
          v86 = v85 & 0xFFFFFFFFFFFFFFF0;
          if (&v33[v29 - 16 - (v85 & 0xFFFFFFFFFFFFFFF0)] > &v33[v29 - 16])
            goto LABEL_24;
          if (&v33[v29 - 8 - v86] > &v33[v29 - 8])
            goto LABEL_24;
          if ((float *)((char *)v84 - v86) > v84)
            goto LABEL_24;
          v87 = v15 - 2;
          if ((float *)((char *)v15 - v86 - 8) > v15 - 2)
            goto LABEL_24;
          v88 = v85 & 0xFFFFFFFFFFFFFFF0;
          v89 = (unint64_t)&v33[v29 - v88 - 16];
          v90 = &v33[v29 - 8];
          v91 = (unint64_t)&v33[v29 - v88 - 8];
          v92 = (unint64_t)v84 - v88;
          v93 = (unint64_t)v87 - v88;
          v94 = v89 >= (unint64_t)v87 || v92 >= (unint64_t)v90;
          v95 = !v94;
          v96 = v89 >= (unint64_t)v15 || v93 >= (unint64_t)v90;
          v97 = !v96;
          v98 = v91 >= (unint64_t)v87 || v92 >= (unint64_t)v34;
          v99 = !v98;
          v100 = v91 >= (unint64_t)v15 || v93 >= (unint64_t)v34;
          v101 = !v100;
          v102 = v91 >= (unint64_t)v90 || v89 >= (unint64_t)v34;
          if (!v102 || v95 || v97 || v99 || v101)
          {
LABEL_24:
            v36 = v15;
            v37 = v34;
          }
          else
          {
            v103 = (v35 >> 4) + 1;
            v104 = 16 * (v103 & 0x1FFFFFFFFFFFFFFCLL);
            v36 = &v15[v104 / 0xFFFFFFFFFFFFFFFCLL];
            v37 = &v34[v104 / 0xFFFFFFFFFFFFFFFCLL];
            v105 = (const double *)(v15 - 8);
            v106 = (double *)(v34 - 8);
            v107 = v103 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v248 = vld2q_f64(v105);
              v108 = v105 - 4;
              v252 = vld2q_f64(v108);
              vst2q_f64(v106, v248);
              v109 = v106 - 4;
              vst2q_f64(v109, v252);
              v106 -= 8;
              v105 -= 8;
              v107 -= 4;
            }
            while (v107);
            if (v103 == (v103 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_26:
              if (!v13)
                goto LABEL_30;
              goto LABEL_29;
            }
          }
          do
          {
            v38 = *((_QWORD *)v36 - 2);
            v36 -= 4;
            *((_QWORD *)v37 - 2) = v38;
            v37 -= 4;
            *((_QWORD *)v37 + 1) = *((_QWORD *)v36 + 1);
          }
          while (v36 != v13);
          goto LABEL_26;
        }
        v37 = v34;
LABEL_29:
        operator delete(v13);
LABEL_30:
        v13 = v37;
LABEL_31:
        v39 = v21 - v22;
        *((_QWORD *)&v14 + 1) = *((_QWORD *)&v217 + 1);
        v40 = *(float *)&v217 * (float)*a3;
        v41 = (float)a3[1];
        v42 = *((float *)&v217 + 1) * v41;
        v43 = v39 * v41;
        if (v28 < (float *)v16)
        {
          *v28 = v40;
          v28[1] = v42;
          v44 = v28 + 4;
          v28[2] = v40;
          v28[3] = v43;
          goto LABEL_52;
        }
        v45 = (char *)v28 - (char *)v13;
        v46 = ((char *)v28 - (char *)v13) >> 4;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60)
          sub_207CA420C();
        if ((v16 - (char *)v13) >> 3 > v47)
          v47 = (v16 - (char *)v13) >> 3;
        if ((unint64_t)(v16 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
        {
          if (v48 >> 60)
            sub_207CA3AB8();
          v49 = (char *)operator new(16 * v48);
        }
        else
        {
          v49 = 0;
        }
        v50 = (float *)&v49[16 * v46];
        *v50 = v40;
        v50[1] = v42;
        v16 = &v49[16 * v48];
        v50[2] = v40;
        v50[3] = v43;
        v44 = v50 + 4;
        if (v28 != v13)
        {
          v51 = (char *)v28 - (char *)v13 - 16;
          if (v51 < 0x3F0)
            goto LABEL_45;
          v110 = v28 - 4;
          v111 = (char *)(v28 - 4) - (char *)v13;
          v112 = v111 & 0xFFFFFFFFFFFFFFF0;
          if (&v49[v45 - 16 - (v111 & 0xFFFFFFFFFFFFFFF0)] > &v49[v45 - 16])
            goto LABEL_45;
          if (&v49[v45 - 8 - v112] > &v49[v45 - 8])
            goto LABEL_45;
          if ((float *)((char *)v110 - v112) > v110)
            goto LABEL_45;
          v113 = v28 - 2;
          if ((float *)((char *)v28 - v112 - 8) > v28 - 2)
            goto LABEL_45;
          v114 = v111 & 0xFFFFFFFFFFFFFFF0;
          v115 = (unint64_t)&v49[v45 - v114 - 16];
          v116 = &v49[v45 - 8];
          v117 = (unint64_t)&v49[v45 - v114 - 8];
          v118 = (unint64_t)v110 - v114;
          v119 = (unint64_t)v113 - v114;
          v120 = v115 >= (unint64_t)v113 || v118 >= (unint64_t)v116;
          v121 = !v120;
          v122 = v115 >= (unint64_t)v28 || v119 >= (unint64_t)v116;
          v123 = !v122;
          v124 = v117 >= (unint64_t)v113 || v118 >= (unint64_t)v50;
          v125 = !v124;
          v126 = v117 >= (unint64_t)v28 || v119 >= (unint64_t)v50;
          v127 = !v126;
          v128 = v117 >= (unint64_t)v116 || v115 >= (unint64_t)v50;
          if (!v128 || v121 || v123 || v125 || v127)
          {
LABEL_45:
            v52 = v28;
            v53 = v50;
          }
          else
          {
            v129 = (v51 >> 4) + 1;
            v130 = 16 * (v129 & 0x1FFFFFFFFFFFFFFCLL);
            v52 = &v28[v130 / 0xFFFFFFFFFFFFFFFCLL];
            v53 = &v50[v130 / 0xFFFFFFFFFFFFFFFCLL];
            v131 = (const double *)(v28 - 8);
            v132 = (double *)(v50 - 8);
            v133 = v129 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v249 = vld2q_f64(v131);
              v134 = v131 - 4;
              *(float64x2x2_t *)(&v14 - 1) = vld2q_f64(v134);
              vst2q_f64(v132, v249);
              v135 = v132 - 4;
              vst2q_f64(v135, *(float64x2x2_t *)(&v14 - 1));
              v132 -= 8;
              v131 -= 8;
              v133 -= 4;
            }
            while (v133);
            if (v129 == (v129 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_47:
              if (!v13)
                goto LABEL_51;
              goto LABEL_50;
            }
          }
          do
          {
            v54 = *((_QWORD *)v52 - 2);
            v52 -= 4;
            *((_QWORD *)v53 - 2) = v54;
            v53 -= 4;
            *((_QWORD *)v53 + 1) = *((_QWORD *)v52 + 1);
          }
          while (v52 != v13);
          goto LABEL_47;
        }
        v53 = v50;
LABEL_50:
        operator delete(v13);
LABEL_51:
        v13 = v53;
LABEL_52:
        v55 = v216 * (float)*a3;
        v56 = (float)a3[1];
        v57 = v23 * v56;
        v58 = v39 * v56;
        if (v44 < (float *)v16)
        {
          *v44 = v55;
          v44[1] = v57;
          v59 = v44 + 4;
          v44[2] = v55;
          v44[3] = v58;
          goto LABEL_73;
        }
        v60 = (char *)v44 - (char *)v13;
        v61 = ((char *)v44 - (char *)v13) >> 4;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60)
          sub_207CA420C();
        if ((v16 - (char *)v13) >> 3 > v62)
          v62 = (v16 - (char *)v13) >> 3;
        if ((unint64_t)(v16 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
          v63 = 0xFFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        if (v63)
        {
          if (v63 >> 60)
            sub_207CA3AB8();
          v64 = (char *)operator new(16 * v63);
        }
        else
        {
          v64 = 0;
        }
        v65 = (float *)&v64[16 * v61];
        *v65 = v55;
        v65[1] = v57;
        v16 = &v64[16 * v63];
        v65[2] = v55;
        v65[3] = v58;
        v59 = v65 + 4;
        if (v44 != v13)
        {
          v66 = (char *)v44 - (char *)v13 - 16;
          if (v66 < 0x3F0)
            goto LABEL_66;
          v136 = v44 - 4;
          v137 = (char *)(v44 - 4) - (char *)v13;
          v138 = v137 & 0xFFFFFFFFFFFFFFF0;
          if (&v64[v60 - 16 - (v137 & 0xFFFFFFFFFFFFFFF0)] > &v64[v60 - 16])
            goto LABEL_66;
          if (&v64[v60 - 8 - v138] > &v64[v60 - 8])
            goto LABEL_66;
          if ((float *)((char *)v136 - v138) > v136)
            goto LABEL_66;
          v139 = v44 - 2;
          if ((float *)((char *)v44 - v138 - 8) > v44 - 2)
            goto LABEL_66;
          v140 = v137 & 0xFFFFFFFFFFFFFFF0;
          v141 = (unint64_t)&v64[v60 - v140 - 16];
          v142 = &v64[v60 - 8];
          v143 = (unint64_t)&v64[v60 - v140 - 8];
          v144 = (unint64_t)v136 - v140;
          v145 = (unint64_t)v139 - v140;
          v146 = v141 >= (unint64_t)v139 || v144 >= (unint64_t)v142;
          v147 = !v146;
          v148 = v141 >= (unint64_t)v44 || v145 >= (unint64_t)v142;
          v149 = !v148;
          v150 = v143 >= (unint64_t)v139 || v144 >= (unint64_t)v65;
          v151 = !v150;
          v152 = v143 >= (unint64_t)v44 || v145 >= (unint64_t)v65;
          v153 = !v152;
          v154 = v143 >= (unint64_t)v142 || v141 >= (unint64_t)v65;
          if (!v154 || v147 || v149 || v151 || v153)
          {
LABEL_66:
            v67 = v44;
            v68 = v65;
          }
          else
          {
            v155 = (v66 >> 4) + 1;
            v156 = 16 * (v155 & 0x1FFFFFFFFFFFFFFCLL);
            v67 = &v44[v156 / 0xFFFFFFFFFFFFFFFCLL];
            v68 = &v65[v156 / 0xFFFFFFFFFFFFFFFCLL];
            v157 = (const double *)(v44 - 8);
            v158 = (double *)(v65 - 8);
            v159 = v155 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v250 = vld2q_f64(v157);
              v160 = v157 - 4;
              *(float64x2x2_t *)(&v14 - 1) = vld2q_f64(v160);
              vst2q_f64(v158, v250);
              v161 = v158 - 4;
              vst2q_f64(v161, *(float64x2x2_t *)(&v14 - 1));
              v158 -= 8;
              v157 -= 8;
              v159 -= 4;
            }
            while (v159);
            if (v155 == (v155 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_68:
              if (!v13)
                goto LABEL_72;
              goto LABEL_71;
            }
          }
          do
          {
            v69 = *((_QWORD *)v67 - 2);
            v67 -= 4;
            *((_QWORD *)v68 - 2) = v69;
            v68 -= 4;
            *((_QWORD *)v68 + 1) = *((_QWORD *)v67 + 1);
          }
          while (v67 != v13);
          goto LABEL_68;
        }
        v68 = v65;
LABEL_71:
        operator delete(v13);
LABEL_72:
        v13 = v68;
LABEL_73:
        v70 = (float)*a3;
        v71 = *(float *)&v217 * v70;
        v72 = v39 * (float)a3[1];
        v73 = v216 * v70;
        if (v59 >= (float *)v16)
          break;
        *v59 = v71;
        v59[1] = v72;
        v15 = v59 + 4;
        v59[2] = v73;
        v59[3] = v72;
        v11 += 56;
        if (v11 == v12)
          goto LABEL_258;
      }
      v74 = (char *)v59 - (char *)v13;
      v75 = ((char *)v59 - (char *)v13) >> 4;
      v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 60)
        sub_207CA420C();
      if ((v16 - (char *)v13) >> 3 > v76)
        v76 = (v16 - (char *)v13) >> 3;
      v77 = (unint64_t)(v16 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v76;
      if (v77)
      {
        if (v77 >> 60)
          sub_207CA3AB8();
        v78 = (char *)operator new(16 * v77);
      }
      else
      {
        v78 = 0;
      }
      v79 = (float *)&v78[16 * v75];
      *v79 = v71;
      v79[1] = v72;
      v16 = &v78[16 * v77];
      v79[2] = v73;
      v79[3] = v72;
      v15 = v79 + 4;
      if (v59 == v13)
        break;
      v80 = (char *)v59 - (char *)v13 - 16;
      if (v80 < 0x3F0)
        goto LABEL_86;
      v162 = v59 - 4;
      v163 = (char *)(v59 - 4) - (char *)v13;
      v164 = v163 & 0xFFFFFFFFFFFFFFF0;
      if (&v78[v74 - 16 - (v163 & 0xFFFFFFFFFFFFFFF0)] > &v78[v74 - 16])
        goto LABEL_86;
      if (&v78[v74 - 8 - v164] > &v78[v74 - 8])
        goto LABEL_86;
      if ((float *)((char *)v162 - v164) > v162)
        goto LABEL_86;
      v165 = v59 - 2;
      if ((float *)((char *)v59 - v164 - 8) > v59 - 2)
        goto LABEL_86;
      v166 = v163 & 0xFFFFFFFFFFFFFFF0;
      v167 = (unint64_t)&v78[v74 - v166 - 16];
      v168 = &v78[v74 - 8];
      v169 = (unint64_t)&v78[v74 - v166 - 8];
      v170 = (unint64_t)v162 - v166;
      v171 = (unint64_t)v165 - v166;
      v172 = v167 >= (unint64_t)v165 || v170 >= (unint64_t)v168;
      v173 = !v172;
      v174 = v167 >= (unint64_t)v59 || v171 >= (unint64_t)v168;
      v175 = !v174;
      v176 = v169 >= (unint64_t)v165 || v170 >= (unint64_t)v79;
      v177 = !v176;
      v178 = v169 >= (unint64_t)v59 || v171 >= (unint64_t)v79;
      v179 = !v178;
      v180 = v169 >= (unint64_t)v168 || v167 >= (unint64_t)v79;
      if (!v180 || v173 || v175 || v177 || v179)
      {
LABEL_86:
        v81 = v59;
        v82 = v79;
        do
        {
LABEL_87:
          v83 = *((_QWORD *)v81 - 2);
          v81 -= 4;
          *((_QWORD *)v82 - 2) = v83;
          v82 -= 4;
          *((_QWORD *)v82 + 1) = *((_QWORD *)v81 + 1);
        }
        while (v81 != v13);
        goto LABEL_88;
      }
      v181 = (v80 >> 4) + 1;
      v182 = 16 * (v181 & 0x1FFFFFFFFFFFFFFCLL);
      v81 = &v59[v182 / 0xFFFFFFFFFFFFFFFCLL];
      v82 = &v79[v182 / 0xFFFFFFFFFFFFFFFCLL];
      v183 = (const double *)(v59 - 8);
      v184 = (double *)(v79 - 8);
      v185 = v181 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v251 = vld2q_f64(v183);
        v186 = v183 - 4;
        *(float64x2x2_t *)(&v14 - 1) = vld2q_f64(v186);
        vst2q_f64(v184, v251);
        v187 = v184 - 4;
        vst2q_f64(v187, *(float64x2x2_t *)(&v14 - 1));
        v184 -= 8;
        v183 -= 8;
        v185 -= 4;
      }
      while (v185);
      if (v181 != (v181 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_87;
LABEL_88:
      if (v13)
        goto LABEL_92;
      v13 = v82;
      v11 += 56;
      if (v11 == v12)
        goto LABEL_258;
    }
    v82 = v79;
LABEL_92:
    operator delete(v13);
    v13 = v82;
    v11 += 56;
  }
  while (v11 != v12);
LABEL_258:
  *(_QWORD *)&v219 = v15;
  *((_QWORD *)&v219 + 1) = v16;
  v218 = v13;
  a4 = v215;
  v10 = v214;
LABEL_259:
  if (!*(_BYTE *)(a1 + 976))
    sub_207CA2A4C();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
  {
    if (*(char *)(a1 + 975) < 0)
    {
      sub_207CA40D8(__dst, *(void **)(a1 + 952), *(_QWORD *)(a1 + 960));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a1 + 952);
      __dst[2] = *(void **)(a1 + 968);
    }
    v188 = sub_207F0D4B0();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
    {
      v189 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
      v190 = __dst[0];
      v228[0] = __dst[1];
      *(void **)((char *)v228 + 7) = *(void **)((char *)&__dst[1] + 7);
      v191 = HIBYTE(__dst[2]);
      memset(__dst, 0, 24);
      v192 = mach_continuous_time();
      v193 = atomic_load((unsigned __int8 *)&qword_2545308B0);
      if ((v193 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
      {
        mach_timebase_info(&info);
        LODWORD(v212) = info.numer;
        LODWORD(v213) = info.denom;
        *(double *)&qword_2545308A8 = (double)v212 / (double)v213;
        __cxa_guard_release(&qword_2545308B0);
      }
      v229 = (const char *)llround(*(double *)&qword_2545308A8 * (double)v192);
      v230 = 2;
      v231 = v190;
      *(_QWORD *)v232 = v228[0];
      *(_QWORD *)&v232[7] = *(_QWORD *)((char *)v228 + 7);
      v233 = v191;
      v228[0] = 0;
      *(_QWORD *)((char *)v228 + 7) = 0;
      v234 = 1;
      v235 = 0;
      v236 = 0;
      v237 = (uint64_t)(a4 * 1000000000.0);
      v238 = 2;
      v239 = 1;
      v240 = 0;
      v241 = 0;
      v242 = 0;
      v243 = 0;
      v194 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
      v195 = (uint64_t)v218;
      v194->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v218;
      *(_OWORD *)&v194->~__shared_weak_count_0 = v219;
      v218 = 0;
      v225 = 0;
      __p = v194;
      v196 = (std::__shared_weak_count *)operator new(0x20uLL);
      v196->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073530;
      v196->__shared_owners_ = 0;
      if (v195)
        v197 = ((uint64_t)v219 - v195) >> 2;
      else
        v197 = 0;
      v196->__shared_weak_owners_ = 0;
      v196[1].__vftable = v194;
      __p = 0;
      v245 = (char *)v194;
      v246 = v196;
      v226 = 0;
      v227 = 0;
      info = (mach_timebase_info)sub_207D50CAC;
      sub_20807E9EC(&v223, 11, (void (**)(uint64_t))&info, v197, v195);
      if (info)
        (*(void (**)(int))&info)(0);
      v199 = v223;
      v198 = v224;
      v223 = 0;
      v224 = 0;
      if ((*(_BYTE *)(v199 + 56) & 3) != 0)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v200 = v224;
        if (v224)
        {
          p_shared_owners = (unint64_t *)&v224->__shared_owners_;
          do
            v202 = __ldaxr(p_shared_owners);
          while (__stlxr(v202 - 1, p_shared_owners));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
      }
      v203 = __p;
      if (__p)
      {
        v204 = *(void **)__p;
        if (*(_QWORD *)__p)
        {
          *((_QWORD *)__p + 1) = v204;
          operator delete(v204);
        }
        operator delete(v203);
      }
      v205 = v225;
      if (v225)
      {
        v206 = *(void **)v225;
        if (*(_QWORD *)v225)
        {
          *((_QWORD *)v225 + 1) = v206;
          operator delete(v206);
        }
        operator delete(v205);
      }
      v226 = v199;
      v227 = v198;
      v207 = (char *)operator new(0xF0uLL);
      *(_QWORD *)v207 = off_24C073610;
      *((_QWORD *)v207 + 1) = v199;
      *((_QWORD *)v207 + 2) = v198;
      v226 = 0;
      v227 = 0;
      sub_207D47D34((uint64_t)(v207 + 32), (uint64_t)&v229);
      *(_QWORD *)v207 = off_24C073590;
      info = (mach_timebase_info)&off_24C078D18;
      v245 = v207;
      v208 = (std::__shared_weak_count *)operator new(0x20uLL);
      v208->__vftable = (std::__shared_weak_count_vtbl *)&off_24C078E28;
      v208->__shared_owners_ = 0;
      v208->__shared_weak_owners_ = 0;
      v208[1].__vftable = (std::__shared_weak_count_vtbl *)v207;
      v246 = v208;
      sub_207D49CF4((uint64_t)&v229);
      sub_207D472C0((uint64_t)v188, v189, (uint64_t)&info);
      v209 = v246;
      if (v246)
      {
        v210 = (unint64_t *)&v246->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
    }
    if (SHIBYTE(__dst[2]) < 0)
      operator delete(__dst[0]);
  }
  if (v218)
    operator delete(v218);
  kdebug_trace();
LABEL_296:
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v220.__r_.__value_.__l.__data_);
}

void sub_207D4D548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  int v52;
  void *v54;

  __cxa_guard_abort(&qword_2545308B0);
  if (v52 < 0)
  {
    operator delete(v51);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      v54 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  v54 = __p;
  if (!__p)
  {
LABEL_5:
    sub_207CD822C((uint64_t)&a19);
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v54);
  goto LABEL_5;
}

void sub_207D4D748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
    JUMPOUT(0x207D4D62CLL);
  JUMPOUT(0x207D4D620);
}

uint64_t sub_207D4D758(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C073378;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 147) = 0;
  *(_WORD *)(a1 + 151) = 1;
  *(_OWORD *)(a1 + 160) = xmmword_208233340;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 279) = 8;
  strcpy((char *)(a1 + 256), "low_res_");
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 324) = 1058642330;
  *(_BYTE *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 332) = 1050253722;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 391) = 7;
  strcpy((char *)(a1 + 368), "image_y");
  *(_WORD *)(a1 + 415) = 266;
  strcpy((char *)(a1 + 392), "image_cbcr");
  *(_QWORD *)(a1 + 424) = 0x3FE0000000000000;
  sub_207D30C0C(a1 + 432);
  *(_OWORD *)(a1 + 880) = 0u;
  *(_QWORD *)(a1 + 896) = 0x3FE0000000000000;
  *(_BYTE *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 912) = 0;
  *(_BYTE *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  return a1;
}

void sub_207D4D8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D049E4(v1);
  _Unwind_Resume(a1);
}

void sub_207D4D8DC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  const char *v25;
  size_t v26;
  void *v27;
  void *v28;
  void **v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void **v36;
  _OWORD *v37;
  __int128 v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  void **v42;
  void **v43;
  void **v44;
  void *v45;
  void *v46;
  unint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void **v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  void **v60;
  __int128 v61;
  void *__p[2];
  unint64_t v63;
  char v64;
  int v65;
  char v66;
  int v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  int v73;
  char v74;
  int v75;
  char v76;
  char v77;
  _BYTE v78[24];
  _BYTE *v79;
  char v80;
  _BYTE v81[24];
  _BYTE *v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = 0;
  v59 = 0;
  if (!*(_BYTE *)(a2 + 143))
    goto LABEL_7;
  v4 = (unsigned __int16)sub_207CF7368();
  if (v4 <= 0x100)
    LOBYTE(v4) = 0;
  if (!(_BYTE)v4)
  {
LABEL_7:
    if (*(char *)(a2 + 383) < 0)
    {
      sub_207CA40D8(__p, *(void **)(a2 + 360), *(_QWORD *)(a2 + 368));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 360);
      v63 = *(_QWORD *)(a2 + 376);
    }
    v64 = 1;
    v65 = 65;
    v66 = 1;
    v67 = 1;
    v68 = 1;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 1;
    v74 = 1;
    v75 = 1;
    v76 = 1;
    v77 = 1;
    v78[0] = 0;
    v80 = 0;
    v81[0] = 0;
    v83 = 0;
    v58 = sub_207D4E49C((__int128 **)&v57, (__int128 *)__p);
    if (v83)
    {
      v5 = v82;
      if (v82 == v81)
      {
        v6 = 4;
        v5 = v81;
      }
      else
      {
        if (!v82)
          goto LABEL_21;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
LABEL_21:
    if (v80)
    {
      v9 = v79;
      if (v79 == v78)
      {
        v10 = 4;
        v9 = v78;
        goto LABEL_26;
      }
      if (v79)
      {
        v10 = 5;
LABEL_26:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
    }
    if (v64 && SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    if (*(_DWORD *)(a2 + 4))
      goto LABEL_78;
    if (*(char *)(a2 + 407) < 0)
    {
      sub_207CA40D8(__p, *(void **)(a2 + 384), *(_QWORD *)(a2 + 392));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 384);
      v63 = *(_QWORD *)(a2 + 400);
    }
    v64 = 1;
    v65 = 65;
    v66 = 1;
    v67 = 1;
    v68 = 1;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 2;
    v74 = 1;
    v75 = 1;
    v76 = 1;
    v77 = 1;
    v78[0] = 0;
    v80 = 0;
    v81[0] = 0;
    v83 = 0;
    v13 = v58;
    if (v58 >= v59)
    {
      v14 = sub_207D4E49C((__int128 **)&v57, (__int128 *)__p);
    }
    else
    {
      sub_207D4E678(v58, (__int128 *)__p);
      v14 = v13 + 168;
    }
    v58 = v14;
    if (v83)
    {
      v15 = v82;
      if (v82 == v81)
      {
        v16 = 4;
        v15 = v81;
        goto LABEL_64;
      }
      if (v82)
      {
        v16 = 5;
LABEL_64:
        (*(void (**)(void))(*v15 + 8 * v16))();
      }
    }
    if (!v80)
      goto LABEL_75;
    v21 = v79;
    if (v79 == v78)
    {
LABEL_73:
      v22 = 4;
      v21 = v78;
      goto LABEL_74;
    }
LABEL_67:
    if (v21)
    {
      v22 = 5;
LABEL_74:
      (*(void (**)(void))(*v21 + 8 * v22))();
    }
LABEL_75:
    if (v64 && SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    goto LABEL_78;
  }
  if (*(char *)(a2 + 383) < 0)
  {
    sub_207CA40D8(__p, *(void **)(a2 + 360), *(_QWORD *)(a2 + 368));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 360);
    v63 = *(_QWORD *)(a2 + 376);
  }
  v64 = 1;
  v65 = 17;
  v66 = 1;
  v67 = 1;
  v68 = 1;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 1;
  v74 = 1;
  v75 = 1;
  v76 = 1;
  v77 = 1;
  v78[0] = 0;
  v80 = 0;
  v81[0] = 0;
  v83 = 0;
  v58 = sub_207D4E49C((__int128 **)&v57, (__int128 *)__p);
  if (v83)
  {
    v7 = v82;
    if (v82 == v81)
    {
      v8 = 4;
      v7 = v81;
    }
    else
    {
      if (!v82)
        goto LABEL_35;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
LABEL_35:
  if (v80)
  {
    v11 = v79;
    if (v79 == v78)
    {
      v12 = 4;
      v11 = v78;
      goto LABEL_40;
    }
    if (v79)
    {
      v12 = 5;
LABEL_40:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
  }
  if (v64 && SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  if (!*(_DWORD *)(a2 + 4))
  {
    if (*(char *)(a2 + 407) < 0)
    {
      sub_207CA40D8(__p, *(void **)(a2 + 384), *(_QWORD *)(a2 + 392));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 384);
      v63 = *(_QWORD *)(a2 + 400);
    }
    v64 = 1;
    v65 = 18;
    v66 = 1;
    v67 = 1;
    v68 = 1;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 1;
    v74 = 1;
    v75 = 1;
    v76 = 1;
    v77 = 1;
    v78[0] = 0;
    v80 = 0;
    v81[0] = 0;
    v83 = 0;
    v17 = v58;
    if (v58 >= v59)
    {
      v18 = sub_207D4E49C((__int128 **)&v57, (__int128 *)__p);
    }
    else
    {
      sub_207D4E678(v58, (__int128 *)__p);
      v18 = v17 + 168;
    }
    v58 = v18;
    if (!v83)
      goto LABEL_71;
    v19 = v82;
    if (v82 == v81)
    {
      v20 = 4;
      v19 = v81;
    }
    else
    {
      if (!v82)
      {
LABEL_71:
        if (!v80)
          goto LABEL_75;
        v21 = v79;
        if (v79 == v78)
          goto LABEL_73;
        goto LABEL_67;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_71;
  }
LABEL_78:
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v23 = *(_QWORD *)(a2 + 336);
  for (i = *(_QWORD *)(a2 + 344); v23 != i; v23 += 24)
  {
    v25 = (const char *)v23;
    if (*(char *)(v23 + 23) < 0)
      v25 = *(const char **)v23;
    v26 = strlen(v25);
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    v27 = (void *)v26;
    if (v26 >= 0x17)
    {
      v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v32 = v26 | 7;
      v33 = v32 + 1;
      v28 = operator new(v32 + 1);
      __p[1] = v27;
      v63 = v33 | 0x8000000000000000;
      __p[0] = v28;
    }
    else
    {
      HIBYTE(v63) = v26;
      v28 = __p;
      if (!v26)
      {
        LOBYTE(__p[0]) = 0;
        v64 = 1;
        v29 = v55;
        if ((unint64_t)v55 < v56)
          goto LABEL_87;
        goto LABEL_94;
      }
    }
    memmove(v28, v25, (size_t)v27);
    *((_BYTE *)v27 + (_QWORD)v28) = 0;
    v64 = 1;
    v29 = v55;
    if ((unint64_t)v55 < v56)
    {
LABEL_87:
      *(_BYTE *)v29 = 0;
      *((_BYTE *)v29 + 24) = 0;
      if (v64)
      {
        v30 = *(_OWORD *)__p;
        v29[2] = (void *)v63;
        *(_OWORD *)v29 = v30;
        __p[1] = 0;
        v63 = 0;
        __p[0] = 0;
        *((_BYTE *)v29 + 24) = 1;
      }
      v31 = (uint64_t)(v29 + 4);
      goto LABEL_95;
    }
LABEL_94:
    v31 = sub_207D4E7A8((uint64_t)&v54, (uint64_t)__p);
LABEL_95:
    v55 = (void **)v31;
    if (v64 && SHIBYTE(v63) < 0)
      operator delete(__p[0]);
  }
  v34 = *(_QWORD *)(a2 + 208);
  v61 = 0uLL;
  v60 = 0;
  sub_207CA44DC((char **)&v60, v34);
  v35 = *(_QWORD **)(a2 + 192);
  if (v35 != (_QWORD *)(a2 + 200))
  {
    do
    {
      if (*((char *)v35 + 55) < 0)
      {
        sub_207CA40D8(__p, (void *)v35[4], v35[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v35 + 2);
        v63 = v35[6];
      }
      v37 = (_OWORD *)v61;
      if ((unint64_t)v61 >= *((_QWORD *)&v61 + 1))
      {
        *(_QWORD *)&v61 = sub_207CA4674((void **)&v60, (uint64_t)__p);
        if (SHIBYTE(v63) < 0)
        {
          operator delete(__p[0]);
          v39 = (_QWORD *)v35[1];
          if (v39)
          {
            do
            {
LABEL_110:
              v40 = v39;
              v39 = (_QWORD *)*v39;
            }
            while (v39);
            goto LABEL_101;
          }
        }
        else
        {
          v39 = (_QWORD *)v35[1];
          if (v39)
            goto LABEL_110;
        }
      }
      else
      {
        v38 = *(_OWORD *)__p;
        *(_QWORD *)(v61 + 16) = v63;
        *v37 = v38;
        *(_QWORD *)&v61 = (char *)v37 + 24;
        v39 = (_QWORD *)v35[1];
        if (v39)
          goto LABEL_110;
      }
      do
      {
        v40 = (_QWORD *)v35[2];
        v41 = *v40 == (_QWORD)v35;
        v35 = v40;
      }
      while (!v41);
LABEL_101:
      v35 = v40;
    }
    while (v40 != (_QWORD *)(a2 + 200));
  }
  v36 = v60;
  v53 = v61;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 136);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 16), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 24);
  }
  sub_207CA51F8(a1 + 40, (uint64_t *)&v57);
  sub_207CA550C((_QWORD *)(a1 + 64), (uint64_t *)&v54);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v42 = (void **)v53;
  sub_207CA5698((char *)(a1 + 88), (uint64_t)v36, v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - (uint64_t)v36) >> 3));
  *(_BYTE *)(a1 + 112) = 1;
  if (v36)
  {
    while (v42 != v36)
    {
      if (*((char *)v42 - 1) < 0)
        operator delete(*(v42 - 3));
      v42 -= 3;
    }
    operator delete(v36);
    v43 = (void **)v54;
    if (v54)
    {
LABEL_119:
      v44 = v55;
      if (v55 == v43)
      {
        v55 = v43;
        operator delete(v43);
        v45 = v57;
        if (!v57)
          return;
      }
      else
      {
        do
        {
          if (*((_BYTE *)v44 - 8) && *((char *)v44 - 9) < 0)
            operator delete(*(v44 - 4));
          v44 -= 4;
        }
        while (v44 != v43);
        v55 = v43;
        operator delete(v54);
        v45 = v57;
        if (!v57)
          return;
      }
      goto LABEL_134;
    }
  }
  else
  {
    v43 = (void **)v54;
    if (v54)
      goto LABEL_119;
  }
  v45 = v57;
  if (!v57)
    return;
LABEL_134:
  v46 = v45;
  if ((void *)v58 == v45)
    goto LABEL_153;
  v47 = v58 - 80;
  do
  {
    if (!*(_BYTE *)(v47 + 72))
      goto LABEL_143;
    v49 = *(_QWORD **)(v47 + 64);
    if ((_QWORD *)(v47 + 40) == v49)
    {
      v49 = (_QWORD *)(v47 + 40);
      v50 = 4;
    }
    else
    {
      if (!v49)
        goto LABEL_143;
      v50 = 5;
    }
    (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_143:
    if (!*(_BYTE *)(v47 + 32))
      goto LABEL_149;
    v51 = *(_QWORD **)(v47 + 24);
    if ((_QWORD *)v47 == v51)
    {
      v51 = (_QWORD *)v47;
      v52 = 4;
    }
    else
    {
      if (!v51)
        goto LABEL_149;
      v52 = 5;
    }
    (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_149:
    if (*(_BYTE *)(v47 - 64))
    {
      if (*(char *)(v47 - 65) < 0)
        operator delete(*(void **)(v47 - 88));
    }
    v48 = (void *)(v47 - 88);
    v47 -= 168;
  }
  while (v48 != v45);
  v46 = v57;
LABEL_153:
  v58 = (unint64_t)v45;
  operator delete(v46);
}

void sub_207D4E268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA510C((void **)va);
  _Unwind_Resume(a1);
}

void sub_207D4E27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, void *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_207D4E3E4((uint64_t)va1);
  sub_207CA510C((void **)va);
  _Unwind_Resume(a1);
}

void sub_207D4E2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_207C99DE0(&a11);
  sub_207CA5094(&a14);
  sub_207CA510C(&a17);
  _Unwind_Resume(a1);
}

void sub_207D4E394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
    {
      operator delete(__p);
      sub_207CA5094(&a14);
      sub_207CA510C(&a17);
      _Unwind_Resume(a1);
    }
  }
  sub_207CA5094(&a14);
  sub_207CA510C(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_207D4E3E4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(_QWORD **)(a1 + 152);
    if (v2 == (_QWORD *)(a1 + 128))
    {
      v3 = 4;
      v2 = (_QWORD *)(a1 + 128);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  if (*(_BYTE *)(a1 + 120))
  {
    v4 = *(_QWORD **)(a1 + 112);
    if (v4 == (_QWORD *)(a1 + 88))
    {
      v5 = 4;
      v4 = (_QWORD *)(a1 + 88);
      goto LABEL_12;
    }
    if (v4)
    {
      v5 = 5;
LABEL_12:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }
  }
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207D4E49C(__int128 **a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;

  v3 = 0xCF3CF3CF3CF3CF3DLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    sub_207CA420C();
  if (0x9E79E79E79E79E7ALL * (((char *)a1[2] - (char *)*a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * (((char *)a1[2] - (char *)*a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x186186186186186)
      sub_207CA3AB8();
    v7 = (char *)operator new(168 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t)&v7[168 * v3];
  v9 = (__int128 *)&v7[168 * v6];
  sub_207D4E678(v8, a2);
  v10 = v8 + 168;
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = (__int128 *)v8;
    a1[1] = (__int128 *)v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v8 -= 168;
      v11 = (__int128 *)((char *)v11 - 168);
      sub_207D4E678(v8, v11);
    }
    while (v11 != v12);
    v11 = *a1;
    v13 = a1[1];
    *a1 = (__int128 *)v8;
    a1[1] = (__int128 *)v10;
    a1[2] = v9;
    if (v13 != v11)
    {
      v14 = v13 - 5;
      do
      {
        if (!*((_BYTE *)v14 + 72))
          goto LABEL_22;
        v16 = (_QWORD *)*((_QWORD *)v14 + 8);
        if ((_QWORD *)((char *)v14 + 40) == v16)
        {
          v16 = (_QWORD *)v14 + 5;
          v17 = 4;
        }
        else
        {
          if (!v16)
            goto LABEL_22;
          v17 = 5;
        }
        (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_22:
        if (!*((_BYTE *)v14 + 32))
          goto LABEL_28;
        v18 = (__int128 *)*((_QWORD *)v14 + 3);
        if (v14 == v18)
        {
          v18 = v14;
          v19 = 4;
        }
        else
        {
          if (!v18)
            goto LABEL_28;
          v19 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_28:
        if (*((_BYTE *)v14 - 64) && *((char *)v14 - 65) < 0)
          operator delete(*((void **)v14 - 11));
        v15 = (__int128 *)((char *)v14 - 88);
        v14 = (__int128 *)((char *)v14 - 168);
      }
      while (v15 != v11);
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

uint64_t sub_207D4E678(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v11;
  __int128 *v12;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_DWORD *)a2 + 20);
  *(_BYTE *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    v9 = a2 + 7;
    v10 = (__int128 *)*((_QWORD *)a2 + 14);
    if (v10)
    {
      if (v10 == (__int128 *)((char *)a2 + 88))
      {
        *(_QWORD *)(a1 + 112) = a1 + 88;
        (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 24))(*v9);
        goto LABEL_10;
      }
      *(_QWORD *)(a1 + 112) = v10;
    }
    else
    {
      v9 = (_QWORD *)(a1 + 112);
    }
    *v9 = 0;
LABEL_10:
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v11 = (_QWORD *)a2 + 19;
    v12 = (__int128 *)*((_QWORD *)a2 + 19);
    if (v12)
    {
      if (v12 == a2 + 8)
      {
        *(_QWORD *)(a1 + 152) = a1 + 128;
        (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11);
        goto LABEL_18;
      }
      *(_QWORD *)(a1 + 152) = v12;
    }
    else
    {
      v11 = (_QWORD *)(a1 + 152);
    }
    *v11 = 0;
LABEL_18:
    *(_BYTE *)(a1 + 160) = 1;
  }
  return a1;
}

uint64_t sub_207D4E7A8(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  void **v17;

  v3 = *(void ***)a1;
  v4 = *(void ***)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_207CA420C();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      sub_207CA3AB8();
    v10 = (char *)operator new(32 * v9);
    v11 = (uint64_t)&v10[32 * v5];
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
      goto LABEL_10;
  }
  else
  {
    v10 = 0;
    v11 = 32 * v5;
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 24) = 0;
    if (*(_BYTE *)(a2 + 24))
    {
LABEL_10:
      *(_OWORD *)v11 = *(_OWORD *)a2;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(v11 + 24) = 1;
      v3 = *(void ***)a1;
      v4 = *(void ***)(a1 + 8);
    }
  }
  v12 = &v10[32 * v9];
  v13 = v11 + 32;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
  }
  else
  {
    v14 = v11;
    do
    {
      *(_BYTE *)(v14 - 32) = 0;
      v14 -= 32;
      v15 = (char *)(v4 - 4);
      *(_BYTE *)(v14 + 24) = 0;
      if (*((_BYTE *)v4 - 8))
      {
        v16 = *(_OWORD *)v15;
        *(_QWORD *)(v14 + 16) = *(v4 - 2);
        *(_OWORD *)v14 = v16;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(_QWORD *)v15 = 0;
        *(_BYTE *)(v11 - 8) = 1;
      }
      v11 = v14;
      v4 -= 4;
    }
    while (v15 != (char *)v3);
    v3 = *(void ***)a1;
    v17 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    while (v17 != v3)
    {
      if (*((_BYTE *)v17 - 8))
      {
        if (*((char *)v17 - 9) < 0)
          operator delete(*(v17 - 4));
      }
      v17 -= 4;
    }
  }
  if (v3)
    operator delete(v3);
  return v13;
}

void sub_207D4E938()
{
  sub_207C95C64("vector");
}

uint64_t sub_207D4E94C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 32) = off_24C06E9E8;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_18:
    if (*(_BYTE *)(a1 + 24))
      goto LABEL_6;
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t *sub_207D4EA24(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  a1[1] = (uint64_t)off_24C06E9E8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *a1;
      *a1 = 0;
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_207D4EAB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0733E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D4EAC0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0733E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207D4EAE0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_BYTE *sub_207D4EAF0(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *__dst = 0;
  __dst[24] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  v5 = a2[2];
  __dst[48] = 0;
  *((_OWORD *)__dst + 2) = v5;
  __dst[72] = 0;
  if (*((_BYTE *)a2 + 72))
  {
    if (*((char *)a2 + 71) < 0)
    {
      sub_207CA40D8(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
    }
    else
    {
      v6 = a2[3];
      *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
      *((_OWORD *)__dst + 3) = v6;
    }
    __dst[72] = 1;
  }
  return __dst;
}

void sub_207D4EBAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 72) && *(char *)(v1 + 71) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D4EBF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C073430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D4EC00(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C073430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207D4EC20(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_207D4EC30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v5 >> 2)) >= 0x924924924924925)
        sub_207D4E938();
      v6 = (char *)operator new(v5);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = &v6[4 * (v5 >> 2)];
      *(_QWORD *)(a1 + 16) = v7;
      memcpy(v6, v4, v5 - 2);
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_207D4ECE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207D4ED20(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D4ED34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = v1[2];
    v1[2] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = (std::__shared_weak_count *)v1[1];
    if (!v3)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      operator delete(v1);
    }
    else
    {
LABEL_8:
      operator delete(v1);
    }
  }
}

uint64_t sub_207D4EDC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2ml5ModelEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2ml5ModelEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2ml5ModelEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2ml5ModelEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_207D4EE34(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x50uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x50uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_207CA40D8(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_207CC24B4(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_207D4EFB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D4EFCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073610;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207D4F044(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073610;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207D4F0BC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207D4F0C4(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C0735D0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_20807F93C(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_207D4F16C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_207D50638();
  sub_207D4F220(a1);
  sub_207D49528(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_207D4F204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D4F220(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25452B920);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452B920))
  {
    v4 = sub_207D50068();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_25452B908, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25452B918 = *(_QWORD *)(v9 - 8);
      xmmword_25452B908 = v7;
    }
    sub_207C99DE0(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B908, &dword_207C77000);
    __cxa_guard_release(&qword_25452B920);
  }
  return sub_207D509F8(&xmmword_25452B908, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)"}");
}

void sub_207D4F330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  __cxa_guard_abort(&qword_25452B920);
  _Unwind_Resume(a1);
}

void sub_207D4F350(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B920);
  _Unwind_Resume(a1);
}

void sub_207D4F368(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 12;
}

void sub_207D4F394(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 12, a2);
}

_QWORD *sub_207D4F3CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073610;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207D4F444(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073610;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207D4F4BC(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207D4FB04();
  return sub_207D4F610(v2, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_207D4F514(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207D4F83C((uint64_t)v5, (uint64_t)v2, (unsigned __int8 **)(a1 + 8));
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0734F0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0734D8[v3])(v5, v2);
  return result;
}

void sub_207D4F5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C0734D8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207D4F5E4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207D4F610(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207D4F83C((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073508[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073508[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0734F0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0734D8[v16])(&p_dst, &__dst);
  return result;
}

void sub_207D4F7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4F7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4F7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4F800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4F828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D4F83C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD *v23[5];
  _QWORD *v24;

  v5 = (char *)operator new(0x118uLL);
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v24 = v5;
  v6 = sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_208205930(v6, v23);
  sub_207CBAB98(v7, (uint64_t)",", 1);
  v23[0] = v5 + 16;
  sub_208078110(**a3, a3, v23);
  sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)"}", 1);
  v8 = *((_DWORD *)v5 + 30);
  if ((v8 & 0x10) != 0)
  {
    v11 = *((_QWORD *)v5 + 14);
    v12 = *((_QWORD *)v5 + 9);
    if (v11 < v12)
    {
      *((_QWORD *)v5 + 14) = v12;
      v11 = v12;
    }
    v13 = (const void *)*((_QWORD *)v5 + 8);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = (const void *)*((_QWORD *)v5 + 5);
    v9 = *((_QWORD *)v5 + 7) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v16 + 16);
    operator delete(v16);
  }
  v23[0] = (_QWORD *)a2;
  v23[1] = __dst;
  v23[2] = (_QWORD *)a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_207CA9F48();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24C0734C0[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_207D4FAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207D4FAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2082155DC((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_207D4FB04()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B7A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B7A0))
    return &xmmword_25452B788;
  v2 = sub_207D4FBE0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452B788, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452B798 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452B788 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B788, &dword_207C77000);
  __cxa_guard_release(&qword_25452B7A0);
  return &xmmword_25452B788;
}

void sub_207D4FBC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B7A0);
  _Unwind_Resume(a1);
}

std::string *sub_207D4FBE0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B7C0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B7C0))
    return &stru_25452B7A8;
  sub_207D4FE84((uint64_t)__p);
  sub_207D4FCD0((char *)__p, &stru_25452B7A8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B7A8, &dword_207C77000);
  __cxa_guard_release(&qword_25452B7C0);
  return &stru_25452B7A8;
}

void sub_207D4FC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B7C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B7C0);
  _Unwind_Resume(a1);
}

void sub_207D4FCD0(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207D50068();
  if (*((char *)v4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207D4FE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207D4FE84(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452B880);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452B880))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Lines<2>>]", qword_25452B868);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B868, &dword_207C77000);
    __cxa_guard_release(&qword_25452B880);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452B8A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452B8A0))
  {
    v5 = sub_207D49434(qword_25452B868, "<", 0);
    sub_207D49330(qword_25452B868, 0, v5, qword_25452B888);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B888, &dword_207C77000);
    __cxa_guard_release(&qword_25452B8A0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452B8C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452B8C0))
  {
    sub_208215C6C((uint64_t)qword_25452B888, (uint64_t)&xmmword_25452B8A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B8A8, &dword_207C77000);
    __cxa_guard_release(&qword_25452B8C0);
  }
  if (byte_25452B8BF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452B8A8, *((unint64_t *)&xmmword_25452B8A8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452B8A8;
    *(_QWORD *)(a1 + 16) = unk_25452B8B8;
  }
}

void sub_207D50020(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B8C0);
  _Unwind_Resume(a1);
}

void sub_207D50038(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B8A0);
  _Unwind_Resume(a1);
}

void sub_207D50050(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B880);
  _Unwind_Resume(a1);
}

__int128 *sub_207D50068()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B7E0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B7E0))
    return &xmmword_25452B7C8;
  v2 = sub_207D50144();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452B7C8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452B7D8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452B7C8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B7C8, &dword_207C77000);
  __cxa_guard_release(&qword_25452B7E0);
  return &xmmword_25452B7C8;
}

void sub_207D5012C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B7E0);
  _Unwind_Resume(a1);
}

std::string *sub_207D50144()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B800);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B800))
    return &stru_25452B7E8;
  sub_207D5035C((uint64_t)__p);
  sub_207D50234((char *)__p, &stru_25452B7E8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B7E8, &dword_207C77000);
  __cxa_guard_release(&qword_25452B800);
  return &stru_25452B7E8;
}

void sub_207D501F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B800);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B800);
  _Unwind_Resume(a1);
}

void sub_207D50234(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207D50540();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_207D50330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207D5035C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452B820);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452B820))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Lines<2>]", qword_25452B808);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B808, &dword_207C77000);
    __cxa_guard_release(&qword_25452B820);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452B840);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452B840))
  {
    v5 = sub_207D49434(qword_25452B808, "<", 0);
    sub_207D49330(qword_25452B808, 0, v5, qword_25452B828);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B828, &dword_207C77000);
    __cxa_guard_release(&qword_25452B840);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452B860);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452B860))
  {
    sub_208215C6C((uint64_t)qword_25452B828, (uint64_t)&xmmword_25452B848);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B848, &dword_207C77000);
    __cxa_guard_release(&qword_25452B860);
  }
  if (byte_25452B85F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452B848, *((unint64_t *)&xmmword_25452B848 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452B848;
    *(_QWORD *)(a1 + 16) = unk_25452B858;
  }
}

void sub_207D504F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B860);
  _Unwind_Resume(a1);
}

void sub_207D50510(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B840);
  _Unwind_Resume(a1);
}

void sub_207D50528(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B820);
  _Unwind_Resume(a1);
}

std::string *sub_207D50540()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B780);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B780))
    return &stru_25452B768;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 2U]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452B768);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B768, &dword_207C77000);
  __cxa_guard_release(&qword_25452B780);
  return &stru_25452B768;
}

void sub_207D505F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B780);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B780);
  _Unwind_Resume(a1);
}

std::string *sub_207D50638()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452B8E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B8E0))
  {
    sub_207C96EE8(v9, "viz::PackageData");
    v2 = sub_207D50068();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_207D50900();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_207CAA110(v8, (uint64_t)__dst, 4uLL);
    sub_208215D20((char *)v9, (uint64_t *)v8, &stru_25452B8C8, v6, v7);
    sub_207C99DE0(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B8C8, &dword_207C77000);
        __cxa_guard_release(&qword_25452B8E0);
        return &stru_25452B8C8;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25452B8C8;
}

void sub_207D5081C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_207C99DE0(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25452B8E0);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25452B8E0);
  _Unwind_Resume(a1);
}

std::string *sub_207D50900()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B900);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B900))
    return &stru_25452B8E8;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 12U]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452B8E8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B8E8, &dword_207C77000);
  __cxa_guard_release(&qword_25452B900);
  return &stru_25452B8E8;
}

void sub_207D509B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B900);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B900);
  _Unwind_Resume(a1);
}

uint64_t sub_207D509F8(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207D4F83C((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073508[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0734F0[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0734D8[v11])(&p_dst, &__dst);
  return result;
}

void sub_207D50B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D50B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D50B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D50B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D50B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void (**sub_207D50BA0(void (**a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*a1)
    (*a1)(0, a1, 0, 0, 0);
  return a1;
}

void sub_207D50BE8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D50BFC(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t sub_207D50C3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207D50CAC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_207D50CE0()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_207D50D2C(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_207D50CAC;
  return result;
}

__n128 sub_207D50D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_207D50CAC;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_207D50D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3kit4geom5Line2IfEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_2082345F0)
  {
    return 0;
  }
  return v5 + 8;
}

uint64_t sub_207D50E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float v16;
  size_t v17;
  size_t v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CFDictionaryRef DictionaryRepresentation;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  float v28;
  float v29;
  float v30;
  unint64_t *v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  float v62;
  float v63;
  _QWORD *v64;
  _QWORD *v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t prime;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  size_t v75;
  size_t v76;
  _QWORD *i;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  unint64_t v90;
  uint64_t *v91;
  OpaqueVTPixelTransferSession **v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  BOOL v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  BOOL v114;
  BOOL v115;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120[2];
  char v121;
  char v122;
  void *v123;
  char v124;
  void *v125;
  char v126;
  char v127;
  char v128;
  __int128 v129;
  __int128 __p;
  uint64_t v131;
  unsigned __int8 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  char v138;
  char v139;
  _QWORD v140[2];
  std::__shared_weak_count *v141;
  _QWORD v142[2];
  std::__shared_weak_count *v143;
  CFTypeRef propertyValue;
  std::__shared_weak_count *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  char v150;
  void *v151[2];
  uint64_t v152;
  uint64_t v153;
  void *v154[2];
  uint64_t v155;
  char v156;
  char v157;
  char v158;
  __int128 v159;
  __int128 v160;
  int v161;
  CGRect v162;

  v159 = 0u;
  v160 = 0u;
  v161 = 733236904;
  kdebug_trace();
  if (sub_20815C3B0(a2) == *(_QWORD *)(a1 + 8))
  {
    v6 = sub_20815C130(a2);
    v7 = *(_QWORD *)a1;
    if (v6 == *(_QWORD *)a1)
    {
      v7 = v6;
      if (*(float *)(a1 + 16) <= 0.0)
      {
        *(_QWORD *)&v147 = a1 + 360;
        v8 = sub_207D55F70(a1 + 160, a1 + 360, (__int128 **)&v147);
        v10 = *(_QWORD *)(a2 + 8);
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
        {
          v11 = (unint64_t *)(v9 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v13 = (std::__shared_weak_count *)v8[7];
        v8[6] = v10;
        v8[7] = v9;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        *(_BYTE *)(a3 + 120) = 1;
        return kdebug_trace();
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)a1;
  }
  sub_207D51B24((int8x8_t *)a1, a1 + 360, *(_QWORD *)(a1 + 8), v7, *(_DWORD *)(a1 + 104), (uint64_t)&v147);
  if (!v158)
  {
    *(_BYTE *)(a3 + 120) = 0;
    *(_OWORD *)a3 = v147;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (!v157)
      return kdebug_trace();
    *(_BYTE *)(a3 + 40) = 0;
    if (v150)
    {
      *(_OWORD *)(a3 + 16) = v148;
      *(_QWORD *)(a3 + 32) = v149;
      v149 = 0;
      v148 = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v156)
    {
      v42 = v153;
      *(_QWORD *)(a3 + 64) = v152;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v151;
      v151[0] = 0;
      v151[1] = 0;
      *(_QWORD *)(a3 + 72) = v42;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)v154;
      *(_QWORD *)(a3 + 96) = v155;
      v152 = 0;
      v154[0] = 0;
      v154[1] = 0;
      v155 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    goto LABEL_200;
  }
  v16 = *(float *)(a1 + 16);
  v17 = sub_20815C130(a2);
  v18 = sub_20815C3B0(a2);
  v19 = (float)(v16 * 0.5) * (float)v17;
  v20 = (float)(v16 * 0.5) * (float)v18;
  v21 = v19;
  v22 = v20;
  v23 = (float)((float)v17 - (float)(v19 + v19));
  v24 = (float)((float)v18 - (float)(v20 + v20));
  v162.origin.x = v19;
  v162.origin.y = v22;
  v162.size.width = v23;
  v162.size.height = v24;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v162);
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v27 = v26;
  v26->__shared_owners_ = 0;
  v31 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)DictionaryRepresentation;
  propertyValue = DictionaryRepresentation;
  v145 = v26;
  do
    v33 = __ldxr(v31);
  while (__stxr(v33 + 1, v31));
  v32 = v21 / (double)v17;
  *(float *)&v146 = v32;
  v30 = v22 / (double)v18;
  *((float *)&v146 + 1) = v30;
  v29 = v23 / (double)v17;
  *((float *)&v146 + 2) = v29;
  v28 = v24 / (double)v18;
  *((float *)&v146 + 3) = v28;
  do
    v34 = __ldaxr(v31);
  while (__stlxr(v34 - 1, v31));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  v35 = *(char *)(a1 + 383);
  if (v35 >= 0)
    v36 = (uint64_t *)(a1 + 360);
  else
    v36 = *(uint64_t **)(a1 + 360);
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a1 + 383);
  else
    v37 = *(_QWORD *)(a1 + 368);
  v38 = sub_207CA77C0((uint64_t)&v129, v36, v37);
  v39 = v38;
  v40 = *(_QWORD *)(a1 + 328);
  if (v40)
  {
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
    v41.i16[0] = vaddlv_u8(v41);
    if (v41.u32[0] > 1uLL)
    {
      v27 = (std::__shared_weak_count *)v38;
      if (v38 >= v40)
        v27 = (std::__shared_weak_count *)(v38 % v40);
    }
    else
    {
      v27 = (std::__shared_weak_count *)((v40 - 1) & v38);
    }
    v43 = *(uint64_t ***)(*(_QWORD *)(a1 + 320) + 8 * (_QWORD)v27);
    if (v43)
    {
      v44 = *v43;
      if (*v43)
      {
        v45 = *(_BYTE *)(a1 + 383);
        if (v45 >= 0)
          v46 = *(unsigned __int8 *)(a1 + 383);
        else
          v46 = *(_QWORD *)(a1 + 368);
        if (v45 >= 0)
          v47 = (unsigned __int8 *)(a1 + 360);
        else
          v47 = *(unsigned __int8 **)(a1 + 360);
        if (v41.u32[0] < 2uLL)
        {
          v48 = v40 - 1;
          while (1)
          {
            v54 = v44[1];
            if (v54 == v39)
            {
              v55 = *((unsigned __int8 *)v44 + 39);
              if ((v55 & 0x80u) == 0)
                v56 = *((unsigned __int8 *)v44 + 39);
              else
                v56 = v44[3];
              if (v56 == v46)
              {
                if ((v55 & 0x80) != 0)
                {
                  v117 = v48;
                  v119 = v46;
                  v58 = memcmp((const void *)v44[2], v47, v44[3]);
                  v48 = v117;
                  v46 = v119;
                  if (!v58)
                    goto LABEL_154;
                }
                else
                {
                  if (!*((_BYTE *)v44 + 39))
                    goto LABEL_154;
                  v57 = 0;
                  while (*((unsigned __int8 *)v44 + v57 + 16) == v47[v57])
                  {
                    if (v55 == ++v57)
                      goto LABEL_154;
                  }
                }
              }
            }
            else if ((std::__shared_weak_count *)(v54 & v48) != v27)
            {
              goto LABEL_81;
            }
            v44 = (uint64_t *)*v44;
            if (!v44)
              goto LABEL_81;
          }
        }
        do
        {
          v49 = v44[1];
          if (v49 == v39)
          {
            v50 = *((unsigned __int8 *)v44 + 39);
            if ((v50 & 0x80u) == 0)
              v51 = *((unsigned __int8 *)v44 + 39);
            else
              v51 = v44[3];
            if (v51 == v46)
            {
              if ((v50 & 0x80) != 0)
              {
                v118 = v46;
                v53 = memcmp((const void *)v44[2], v47, v44[3]);
                v46 = v118;
                if (!v53)
                  goto LABEL_154;
              }
              else
              {
                if (!*((_BYTE *)v44 + 39))
                  goto LABEL_154;
                v52 = 0;
                while (*((unsigned __int8 *)v44 + v52 + 16) == v47[v52])
                {
                  if (v50 == ++v52)
                    goto LABEL_154;
                }
              }
            }
          }
          else
          {
            if (v49 >= v40)
              v49 %= v40;
            if ((std::__shared_weak_count *)v49 != v27)
              break;
          }
          v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
    }
  }
LABEL_81:
  v59 = operator new(0x38uLL);
  v60 = (_QWORD *)(a1 + 336);
  *(_QWORD *)&v129 = v59;
  *((_QWORD *)&v129 + 1) = a1 + 336;
  LOBYTE(__p) = 0;
  *v59 = 0;
  v59[1] = v39;
  v61 = v59 + 2;
  if (*(char *)(a1 + 383) < 0)
  {
    sub_207CA40D8(v61, *(void **)(a1 + 360), *(_QWORD *)(a1 + 368));
  }
  else
  {
    *(_OWORD *)v61 = *(_OWORD *)(a1 + 360);
    v61[2] = *(_QWORD *)(a1 + 376);
  }
  LOBYTE(__p) = 1;
  v62 = (float)(unint64_t)(*(_QWORD *)(a1 + 344) + 1);
  v63 = *(float *)(a1 + 352);
  if (!v40 || (float)(v63 * (float)v40) < v62)
  {
    v66 = 1;
    if (v40 >= 3)
      v66 = (v40 & (v40 - 1)) != 0;
    v67 = v66 | (2 * v40);
    v68 = vcvtps_u32_f32(v62 / v63);
    if (v67 <= v68)
      prime = v68;
    else
      prime = v67;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(_QWORD *)(a1 + 328);
    if (prime > v40)
    {
LABEL_98:
      if (prime >> 61)
        sub_207CA3AB8();
      v70 = operator new(8 * prime);
      v71 = *(void **)(a1 + 320);
      *(_QWORD *)(a1 + 320) = v70;
      if (v71)
        operator delete(v71);
      v72 = 0;
      *(_QWORD *)(a1 + 328) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v72++) = 0;
      while (prime != v72);
      v73 = (_QWORD *)*v60;
      if (!*v60)
        goto LABEL_130;
      v74 = v73[1];
      v75 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v76 = v74 & v75;
        *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v76) = v60;
        for (i = (_QWORD *)*v73; *v73; i = (_QWORD *)*v73)
        {
          v78 = i[1] & v75;
          if (v78 == v76)
          {
            v73 = i;
          }
          else
          {
            v79 = *(_QWORD *)(a1 + 320);
            if (*(_QWORD *)(v79 + 8 * v78))
            {
              *v73 = *i;
              v80 = 8 * v78;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 320) + v80);
              **(_QWORD **)(*(_QWORD *)(a1 + 320) + v80) = i;
            }
            else
            {
              *(_QWORD *)(v79 + 8 * v78) = v73;
              v73 = i;
              v76 = v78;
            }
          }
        }
        goto LABEL_130;
      }
      if (v74 >= prime)
        v74 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v74) = v60;
      v84 = (_QWORD *)*v73;
      if (!*v73)
      {
LABEL_130:
        v40 = prime;
        v88 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_131;
        goto LABEL_146;
      }
      while (1)
      {
        v86 = v84[1];
        if (v86 >= prime)
          v86 %= prime;
        if (v86 == v74)
          goto LABEL_124;
        v87 = *(_QWORD *)(a1 + 320);
        if (*(_QWORD *)(v87 + 8 * v86))
        {
          *v73 = *v84;
          v85 = 8 * v86;
          *v84 = **(_QWORD **)(*(_QWORD *)(a1 + 320) + v85);
          **(_QWORD **)(*(_QWORD *)(a1 + 320) + v85) = v84;
          v84 = v73;
LABEL_124:
          v73 = v84;
          v84 = (_QWORD *)*v84;
          if (!v84)
            goto LABEL_130;
        }
        else
        {
          *(_QWORD *)(v87 + 8 * v86) = v73;
          v73 = v84;
          v84 = (_QWORD *)*v84;
          v74 = v86;
          if (!v84)
            goto LABEL_130;
        }
      }
    }
    if (prime < v40)
    {
      v81 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 344) / *(float *)(a1 + 352));
      if (v40 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v40), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        v81 = std::__next_prime(v81);
      }
      else
      {
        v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2)
          v81 = v83;
      }
      if (prime <= v81)
        prime = v81;
      if (prime < v40)
      {
        if (!prime)
        {
          v89 = *(void **)(a1 + 320);
          *(_QWORD *)(a1 + 320) = 0;
          if (v89)
            operator delete(v89);
          v40 = 0;
          *(_QWORD *)(a1 + 328) = 0;
          v88 = -1;
          goto LABEL_146;
        }
        goto LABEL_98;
      }
      v40 = *(_QWORD *)(a1 + 328);
    }
    v88 = v40 - 1;
    if ((v40 & (v40 - 1)) != 0)
    {
LABEL_131:
      if (v39 >= v40)
      {
        v27 = (std::__shared_weak_count *)(v39 % v40);
        v64 = *(_QWORD **)(*(_QWORD *)(a1 + 320) + 8 * (v39 % v40));
        v65 = (_QWORD *)v129;
        if (v64)
          goto LABEL_87;
      }
      else
      {
        v27 = (std::__shared_weak_count *)v39;
        v64 = *(_QWORD **)(*(_QWORD *)(a1 + 320) + 8 * v39);
        v65 = (_QWORD *)v129;
        if (v64)
          goto LABEL_87;
      }
LABEL_147:
      *v65 = *(_QWORD *)(a1 + 336);
      *(_QWORD *)(a1 + 336) = v129;
      *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * (_QWORD)v27) = v60;
      if (*(_QWORD *)v129)
      {
        v90 = *(_QWORD *)(*(_QWORD *)v129 + 8);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v90 >= v40)
            v90 %= v40;
        }
        else
        {
          v90 &= v40 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v90) = v129;
      }
      goto LABEL_153;
    }
LABEL_146:
    v27 = (std::__shared_weak_count *)(v88 & v39);
    v64 = *(_QWORD **)(*(_QWORD *)(a1 + 320) + 8 * (v88 & v39));
    v65 = (_QWORD *)v129;
    if (v64)
      goto LABEL_87;
    goto LABEL_147;
  }
  v64 = *(_QWORD **)(*(_QWORD *)(a1 + 320) + 8 * (_QWORD)v27);
  v65 = (_QWORD *)v129;
  if (!v64)
    goto LABEL_147;
LABEL_87:
  *v65 = *v64;
  *v64 = v129;
LABEL_153:
  v44 = (uint64_t *)v129;
  ++*(_QWORD *)(a1 + 344);
LABEL_154:
  *(_OWORD *)(v44 + 5) = v146;
  *(_QWORD *)&v129 = a1 + 360;
  v91 = sub_207D5662C(a1 + 200, a1 + 360, (__int128 **)&v129);
  VTSessionSetProperty(*(VTSessionRef *)v91[5], (CFStringRef)*MEMORY[0x24BDF9688], propertyValue);
  *(_QWORD *)&v129 = a1 + 360;
  v92 = (OpaqueVTPixelTransferSession **)sub_207D5662C(a1 + 200, a1 + 360, (__int128 **)&v129)[5];
  v94 = *(_QWORD *)(a2 + 8);
  v93 = *(std::__shared_weak_count **)(a2 + 16);
  v142[0] = &off_24C08A5D8;
  v142[1] = v94;
  v143 = v93;
  if (v93)
  {
    v95 = (unint64_t *)&v93->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  *(_QWORD *)&v129 = a1 + 360;
  v97 = sub_207D55F70(a1 + 160, a1 + 360, (__int128 **)&v129);
  v99 = v97[6];
  v98 = v97[7];
  v140[0] = &off_24C08A5D8;
  v140[1] = v99;
  v141 = (std::__shared_weak_count *)v98;
  if (v98)
  {
    v100 = (unint64_t *)(v98 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = sub_207DFF878(v92, (uint64_t)v142, (uint64_t)v140);
  v140[0] = &off_24C08A5D8;
  v103 = v141;
  if (!v141)
    goto LABEL_164;
  v104 = (unint64_t *)&v141->__shared_owners_;
  do
    v105 = __ldaxr(v104);
  while (__stlxr(v105 - 1, v104));
  if (!v105)
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
    v142[0] = &off_24C08A5D8;
    v106 = v143;
    if (!v143)
      goto LABEL_168;
  }
  else
  {
LABEL_164:
    v142[0] = &off_24C08A5D8;
    v106 = v143;
    if (!v143)
      goto LABEL_168;
  }
  v107 = (unint64_t *)&v106->__shared_owners_;
  do
    v108 = __ldaxr(v107);
  while (__stlxr(v108 - 1, v107));
  if (!v108)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
    if (v102)
      goto LABEL_169;
    goto LABEL_173;
  }
LABEL_168:
  if (v102)
  {
LABEL_169:
    *(_BYTE *)(a3 + 120) = 1;
    goto LABEL_192;
  }
LABEL_173:
  sub_207CCB5A4((uint64_t)v120, "Resizing of detector input buffer failed.");
  v128 = 1;
  sub_207CCAFD0(0x59u, (__int128 *)v120, (uint64_t)&v129);
  *(_OWORD *)a3 = v129;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v139)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v128)
      goto LABEL_192;
    goto LABEL_184;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v109 = v132;
  if (v132)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v131;
    v131 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v138)
  {
    v110 = v135;
    *(_QWORD *)(a3 + 64) = v134;
    *(_OWORD *)(a3 + 48) = v133;
    v133 = 0uLL;
    *(_QWORD *)(a3 + 72) = v110;
    *(_OWORD *)(a3 + 80) = v136;
    *(_QWORD *)(a3 + 96) = v137;
    v134 = 0;
    v136 = 0uLL;
    v137 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v109 && SHIBYTE(v131) < 0)
    operator delete((void *)__p);
  if (v128)
  {
LABEL_184:
    if (v127)
    {
      if (v126 < 0)
        operator delete(v125);
      if (v124 < 0)
        operator delete(v123);
    }
    if (v122 && v121 < 0)
      operator delete(v120[0]);
  }
LABEL_192:
  v111 = v145;
  if (!v145)
    goto LABEL_196;
  v112 = (unint64_t *)&v145->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
    if (v158)
      v115 = 1;
    else
      v115 = v157 == 0;
    if (v115)
      return kdebug_trace();
  }
  else
  {
LABEL_196:
    if (v158)
      v114 = 1;
    else
      v114 = v157 == 0;
    if (v114)
      return kdebug_trace();
  }
LABEL_200:
  if (!v156)
    goto LABEL_203;
  if (SHIBYTE(v155) < 0)
  {
    operator delete(v154[0]);
    if ((SHIBYTE(v152) & 0x80000000) == 0)
    {
LABEL_203:
      if (!v150)
        return kdebug_trace();
      goto LABEL_204;
    }
  }
  else if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
    goto LABEL_203;
  }
  operator delete(v151[0]);
  if (!v150)
    return kdebug_trace();
LABEL_204:
  if (SHIBYTE(v149) < 0)
    operator delete((void *)v148);
  return kdebug_trace();
}

void sub_207D51A38()
{
  __break(1u);
}

void sub_207D51AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  __cxa_end_catch();
  sub_207D04458((uint64_t)&a49);
  sub_207CD822C(v49 - 176);
  _Unwind_Resume(a1);
}

void sub_207D51AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CD822C(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_207D51AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CD822C(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_207D51B24(int8x8_t *a1@<X0>, uint64_t a2@<X1>, size_t a3@<X2>, size_t a4@<X3>, OSType a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  VTPixelTransferSessionRef *v30;
  uint64_t *v31;
  uint64_t v32;
  void (**v33)(_QWORD, _QWORD);
  void (*v34)(_QWORD, _QWORD);
  uint64_t *v35;
  CVPixelBufferRef v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  void *v59[2];
  char v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  char v66;
  char v67;
  __int128 v68;
  __int128 __p;
  uint64_t v70;
  unsigned __int8 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  char v78;
  CVPixelBufferRef pixelBufferOut;
  __int128 *v80;

  v6 = a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = sub_207CA77C0((uint64_t)&v68, (uint64_t *)a2, v10);
  v12 = a1[26];
  if (v12)
  {
    v13 = v11;
    v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = v11;
      if (v11 >= *(_QWORD *)&v12)
        v15 = v11 % *(_QWORD *)&v12;
    }
    else
    {
      v15 = (*(_QWORD *)&v12 - 1) & v11;
    }
    v16 = *(uint64_t ***)(*(_QWORD *)&a1[25] + 8 * v15);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = *(_BYTE *)(v6 + 23);
        if (v18 >= 0)
          v19 = *(unsigned __int8 *)(v6 + 23);
        else
          v19 = *(_QWORD *)(v6 + 8);
        if (v18 >= 0)
          v20 = (unsigned __int8 *)v6;
        else
          v20 = *(unsigned __int8 **)v6;
        if (v14.u32[0] < 2uLL)
        {
          v21 = *(_QWORD *)&v12 - 1;
          while (1)
          {
            v26 = v17[1];
            if (v26 == v13)
            {
              v27 = *((unsigned __int8 *)v17 + 39);
              if ((v27 & 0x80u) == 0)
                v28 = *((unsigned __int8 *)v17 + 39);
              else
                v28 = v17[3];
              if (v28 == v19)
              {
                if ((v27 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v17[2], v20, v17[3]))
                    goto LABEL_80;
                }
                else
                {
                  if (!*((_BYTE *)v17 + 39))
                    goto LABEL_80;
                  v29 = 0;
                  while (*((unsigned __int8 *)v17 + v29 + 16) == v20[v29])
                  {
                    if (v27 == ++v29)
                      goto LABEL_51;
                  }
                }
              }
            }
            else if ((v26 & v21) != v15)
            {
              goto LABEL_52;
            }
            v17 = (uint64_t *)*v17;
            if (!v17)
              goto LABEL_52;
          }
        }
        do
        {
          v22 = v17[1];
          if (v22 == v13)
          {
            v23 = *((unsigned __int8 *)v17 + 39);
            if ((v23 & 0x80u) == 0)
              v24 = *((unsigned __int8 *)v17 + 39);
            else
              v24 = v17[3];
            if (v24 == v19)
            {
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp((const void *)v17[2], v20, v17[3]))
                  goto LABEL_80;
              }
              else
              {
                if (!*((_BYTE *)v17 + 39))
                  goto LABEL_80;
                v25 = 0;
                while (*((unsigned __int8 *)v17 + v25 + 16) == v20[v25])
                {
                  if (v23 == ++v25)
                  {
LABEL_51:
                    if (v17)
                      goto LABEL_80;
                    goto LABEL_52;
                  }
                }
              }
            }
          }
          else
          {
            if (v22 >= *(_QWORD *)&v12)
              v22 %= *(_QWORD *)&v12;
            if (v22 != v15)
              break;
          }
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
    }
  }
LABEL_52:
  v30 = (VTPixelTransferSessionRef *)operator new(0x10uLL);
  sub_207DFF76C(v30);
  *(_QWORD *)&v68 = v6;
  v31 = sub_207D5662C((uint64_t)&a1[25], v6, (__int128 **)&v68);
  v33 = (void (**)(_QWORD, _QWORD))v31[5];
  v31[5] = (uint64_t)v30;
  if (v33)
  {
    v34 = *v33;
    *v33 = 0;
    if (v34)
      v33[1](v34, v32);
    operator delete(v33);
  }
  *(_QWORD *)&v68 = v6;
  v35 = sub_207D5662C((uint64_t)&a1[25], v6, (__int128 **)&v68);
  VTSessionSetProperty(*(VTSessionRef *)v35[5], (CFStringRef)*MEMORY[0x24BDF9680], (CFTypeRef)*MEMORY[0x24BDF98F8]);
  pixelBufferOut = 0;
  CVPixelBufferCreate(0, a4, a3, a5, 0, &pixelBufferOut);
  v36 = pixelBufferOut;
  if (!pixelBufferOut)
  {
    sub_207CCB5A4((uint64_t)v59, "Resizing of detector input buffer failed.");
    v67 = 1;
    sub_207CCAFD0(0x59u, (__int128 *)v59, (uint64_t)&v68);
    *(_OWORD *)a6 = v68;
    *(_BYTE *)(a6 + 16) = 0;
    *(_BYTE *)(a6 + 112) = 0;
    if (v78)
    {
      *(_BYTE *)(a6 + 40) = 0;
      v54 = v71;
      if (v71)
      {
        *(_OWORD *)(a6 + 16) = __p;
        *(_QWORD *)(a6 + 32) = v70;
        v70 = 0;
        __p = 0uLL;
        *(_BYTE *)(a6 + 40) = 1;
      }
      *(_BYTE *)(a6 + 48) = 0;
      *(_BYTE *)(a6 + 104) = 0;
      if (v77)
      {
        v55 = v74;
        *(_QWORD *)(a6 + 64) = v73;
        *(_OWORD *)(a6 + 48) = v72;
        v72 = 0uLL;
        *(_QWORD *)(a6 + 72) = v55;
        *(_OWORD *)(a6 + 80) = v75;
        *(_QWORD *)(a6 + 96) = v76;
        v73 = 0;
        v75 = 0uLL;
        v76 = 0;
        *(_BYTE *)(a6 + 104) = 1;
      }
      *(_BYTE *)(a6 + 112) = 1;
      *(_BYTE *)(a6 + 120) = 0;
      if (v54 && SHIBYTE(v70) < 0)
        operator delete((void *)__p);
      if (!v67)
        return;
    }
    else
    {
      *(_BYTE *)(a6 + 120) = 0;
      if (!v67)
        return;
    }
    if (v66)
    {
      if (v65 < 0)
        operator delete(v64);
      if (v63 < 0)
        operator delete(v62);
    }
    if (v61 && v60 < 0)
      operator delete(v59[0]);
    return;
  }
  v37 = (std::__shared_weak_count *)operator new(0x20uLL);
  v37->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0709D8;
  v37->__shared_weak_owners_ = 0;
  v37[1].__vftable = (std::__shared_weak_count_vtbl *)v36;
  *(_QWORD *)&v68 = &off_24C08A5D8;
  v39 = (char *)operator new(0xA0uLL);
  v40 = v39;
  *((_QWORD *)v39 + 1) = 0;
  *((_QWORD *)v39 + 2) = 0;
  *(_QWORD *)v39 = off_24C08A688;
  v41 = v39 + 24;
  do
    v42 = __ldxr(p_shared_owners);
  while (__stxr(v42 + 1, p_shared_owners));
  *((_QWORD *)v39 + 3) = v36;
  *((_QWORD *)v39 + 4) = v37;
  do
    v43 = __ldxr(p_shared_owners);
  while (__stxr(v43 + 1, p_shared_owners));
  *((_DWORD *)v39 + 10) = 0;
  *((_QWORD *)v39 + 6) = 0;
  *((_QWORD *)v39 + 7) = 0;
  *((_QWORD *)v39 + 8) = 850045863;
  *(_OWORD *)(v39 + 72) = 0u;
  *(_OWORD *)(v39 + 88) = 0u;
  *(_OWORD *)(v39 + 104) = 0u;
  *((_QWORD *)v39 + 15) = 0;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  *((_OWORD *)v40 + 8) = 0u;
  *((_OWORD *)v40 + 9) = 0u;
  *((_QWORD *)&v68 + 1) = v41;
  *(_QWORD *)&__p = v40;
  v80 = (__int128 *)v6;
  v45 = sub_207D55F70((uint64_t)&a1[20], v6, &v80);
  *((_QWORD *)&v68 + 1) = 0;
  *(_QWORD *)&__p = 0;
  v46 = (std::__shared_weak_count *)v45[7];
  v45[6] = (uint64_t)v41;
  v45[7] = (uint64_t)v40;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  *(_QWORD *)&v68 = &off_24C08A5D8;
  v49 = (std::__shared_weak_count *)__p;
  if ((_QWORD)__p)
  {
    v50 = (unint64_t *)(__p + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v37)
  {
    v52 = (unint64_t *)&v37->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_80:
  *(_BYTE *)(a6 + 120) = 1;
}

void sub_207D520D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207CCB148((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D520F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_20815B3F4(&a27);
  sub_207C99D78((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_207D5210C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D52120(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D52134(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207D52170(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  _OWORD v41[2];
  mach_timebase_info info;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  _QWORD v51[2];
  char v52;
  _QWORD v53[2];
  _QWORD v54[3];
  _BYTE v55[15];
  __int16 v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v6 = sub_207F0D4B0();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    {
      v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v8 = mach_continuous_time();
      v9 = atomic_load((unsigned __int8 *)&qword_2545308B0);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
      {
        mach_timebase_info(&info);
        LODWORD(v38) = info.numer;
        LODWORD(v39) = info.denom;
        *(double *)&qword_2545308A8 = (double)v38 / (double)v39;
        __cxa_guard_release(&qword_2545308B0);
      }
      v54[0] = llround(*(double *)&qword_2545308A8 * (double)v8);
      v54[1] = 2;
      v54[2] = 0x6567616D69;
      *(_QWORD *)v55 = v53[0];
      *(_QWORD *)&v55[7] = *(_QWORD *)((char *)v53 + 7);
      v56 = 261;
      v53[0] = 0;
      *(_QWORD *)((char *)v53 + 7) = 0;
      v57 = 0;
      v58 = 0;
      v59 = (uint64_t)(a3 * 1000000000.0);
      v60 = 2;
      v61 = 1;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v10 = (char *)operator new(0x110uLL);
      info = (mach_timebase_info)&off_24C0736D0;
      v11 = *(_QWORD *)(a2 + 8);
      if (v11)
      {
        v12 = *(std::__shared_weak_count **)(a2 + 16);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v11 = *(_QWORD *)(a2 + 8);
          v16 = *(std::__shared_weak_count **)(a2 + 16);
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
            do
              v19 = __ldaxr(v17);
            while (__stlxr(v19 - 1, v17));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v11 + 32))(v51, v11);
        v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v51[0] + 48))(v51[0]);
        v21 = (std::__shared_weak_count_vtbl *)v51[0];
        if (v51[0])
        {
          v22 = (std::__shared_weak_count *)operator new(0x20uLL);
          v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073880;
          v22->__shared_owners_ = 0;
          v22->__shared_weak_owners_ = 0;
          v22[1].__vftable = v21;
        }
        else
        {
          v22 = 0;
        }
        v23 = *(_DWORD *)(a2 + 48);
        v24 = *(_WORD *)(a2 + 52);
        v43 = v21;
        v44 = v22;
        v25 = *(_QWORD *)(a2 + 24);
        v45 = 0;
        v46 = v25;
        v47 = *(_DWORD *)(a2 + 32);
        v48 = v20;
        v49 = v23;
        v50 = v24;
      }
      else
      {
        v51[0] = &v52;
        v51[1] = a2;
        sub_2081A3100(*(_DWORD *)(a2 + 48));
      }
      sub_207D56E28((uint64_t)&info, (uint64_t)&v40);
      v26 = v44;
      if (v44)
      {
        v27 = (unint64_t *)&v44->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      *(_QWORD *)v10 = off_24C073B78;
      *((_QWORD *)v10 + 1) = &off_24C073BC8;
      v29 = v40;
      v40 = 0uLL;
      v30 = v41[0];
      *((_OWORD *)v10 + 1) = v29;
      *((_OWORD *)v10 + 2) = v30;
      *(_OWORD *)(v10 + 46) = *(_OWORD *)((char *)v41 + 14);
      sub_207D47D34((uint64_t)(v10 + 64), (uint64_t)v54);
      *(_QWORD *)v10 = off_24C073728;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      *(_QWORD *)v10 = off_24C078EA0;
      info = (mach_timebase_info)&off_24C078D18;
      v43 = (std::__shared_weak_count_vtbl *)v10;
      v34 = (std::__shared_weak_count *)operator new(0x20uLL);
      v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24C078E28;
      v34->__shared_owners_ = 0;
      v34->__shared_weak_owners_ = 0;
      v34[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
      v44 = v34;
      sub_207D49CF4((uint64_t)v54);
      sub_207D472C0((uint64_t)v6, v7, (uint64_t)&info);
      v35 = v44;
      if (v44)
      {
        v36 = (unint64_t *)&v44->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
  }
}

void sub_207D525B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545308B0);
  _Unwind_Resume(a1);
}

void sub_207D525C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_207EFE910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D525DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;

  sub_207EFF84C(v29);
  sub_207D56CB8(&a9);
  sub_207D49CF4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_207D52600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  v29[1] = v30;
  v32 = (std::__shared_weak_count *)v29[3];
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  sub_207D56D4C(&a9);
  operator delete(v29);
  sub_207D49CF4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_207D52660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  sub_207D56DC0((uint64_t)&a16);
  operator delete(v29);
  sub_207D49CF4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_207D52684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  operator delete(v29);
  sub_207D49CF4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_207D526A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_207D49CF4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_207D526B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 8))(a24);
  operator delete(v29);
  sub_207D49CF4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_207D526E8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C073660[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t *sub_207D52740(uint64_t a1, const void **a2)
{
  uint64_t **v2;
  int v3;
  const void *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  size_t v9;
  int v10;
  int v11;

  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_27:
    sub_207CA4018("map::at:  key not found");
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *a2;
  if (v3 >= 0)
    v5 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  else
    v5 = (uint64_t *)a2[1];
  while (1)
  {
    while (1)
    {
      v6 = *((char *)v2 + 55);
      v7 = v6 >= 0 ? (uint64_t *)(v2 + 4) : v2[4];
      v8 = v6 >= 0 ? (uint64_t *)*((unsigned __int8 *)v2 + 55) : v2[5];
      v9 = (size_t)(v8 >= v5 ? v5 : v8);
      v10 = memcmp(v4, v7, v9);
      if (v10)
        break;
      if (v5 >= v8)
        goto LABEL_22;
LABEL_8:
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_27;
    }
    if (v10 < 0)
      goto LABEL_8;
LABEL_22:
    v11 = memcmp(v7, v4, v9);
    if (v11)
    {
      if ((v11 & 0x80000000) == 0)
        return (uint64_t *)(v2 + 7);
      goto LABEL_26;
    }
    if (v8 >= v5)
      return (uint64_t *)(v2 + 7);
LABEL_26:
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_27;
  }
}

uint64_t sub_207D5281C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C073660[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t sub_207D52874@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mach_timebase_info v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  float32x4_t *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  mach_timebase_info v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  unint64_t v55;
  size_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  size_t v67;
  int v68;
  BOOL v69;
  size_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  __int16 v120;
  unint64_t v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  char *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  __int16 v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  __int16 v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  int v171;
  int v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  __int16 v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  int v188;
  int v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  int v198;
  __int16 v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t *v207;
  unint64_t v209;
  unint64_t v210;
  uint64_t (**v211)();
  uint64_t v212;
  std::__shared_weak_count *v213;
  __int128 v214;
  __int128 v215;
  int v216;
  _BYTE __p[54];
  char v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  __int16 v225;
  char v226;
  mach_timebase_info info[2];
  __int128 v228;
  __int128 v229;
  int v230;
  __int16 v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  int v237;
  __int16 v238;
  char v239;
  __int128 v240;
  __int128 v241;
  int v242;
  std::string v243;
  __int128 v244;
  std::__shared_weak_count *v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  char v248;
  __int128 v249;
  _BYTE v250[32];
  int v251;
  __int16 v252;
  uint64_t (**v253)();
  uint64_t v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  __int16 v260;
  char v261;
  unsigned int v262;
  _OWORD v263[2];
  __int128 v264;
  int v265;
  uint64_t (**v266)();
  uint64_t v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  int v272;
  __int16 v273;
  char v274;
  int v275;
  uint64_t v276;
  _QWORD v277[5];

  v277[2] = *MEMORY[0x24BDAC8D0];
  v214 = 0u;
  v215 = 0u;
  v216 = 733236912;
  kdebug_trace();
  if (*(_DWORD *)(a1 + 104) != 1278226488)
  {
    if (sub_207D5A890((_QWORD *)(a1 + 160), a1 + 360))
    {
      v11 = sub_207D5A890((_QWORD *)(a1 + 160), a1 + 360);
      if (!v11)
        sub_207CA4018("unordered_map::at: key not found");
      v13 = v11[6];
      v12 = v11[7];
      v211 = &off_24C08A5D8;
      v212 = v13;
      v213 = (std::__shared_weak_count *)v12;
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v212 = 0;
      v213 = 0;
      v211 = &off_24C08A5D8;
    }
    if (sub_20815A764((uint64_t)&v211) != 875704422
      && sub_20815A764((uint64_t)&v211) != 875704438
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectorInput.cpp", 106, (uint64_t)"FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_420YpCbCr8BiPlanarFullRange || FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange", 175, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (*(_BYTE *)(a1 + 72))
    {
      v44 = (unsigned __int16)sub_207CF7368();
      if (v44 <= 0x100)
        LOBYTE(v44) = 0;
      if ((_BYTE)v44)
      {
        sub_207DE54F8((uint64_t)&v211, *(unsigned __int8 *)(a1 + 73), (_QWORD *)(a1 + 240), (uint64_t)info);
        if (*(_BYTE *)(a1 + 408))
        {
          v45 = a1 + 384;
          *(_QWORD *)&v249 = "cv3d.odt.";
          *((_QWORD *)&v249 + 1) = 9;
          v46 = *(unsigned __int8 *)(a1 + 407);
          if ((v46 & 0x80u) != 0)
          {
            v45 = *(_QWORD *)(a1 + 384);
            v46 = *(_QWORD *)(a1 + 392);
          }
          *(_QWORD *)v250 = v45;
          *(_QWORD *)&v250[8] = v46;
          sub_207CAC8F4((uint64_t)&v249, (uint64_t)&v250[16], 0, 0, (std::string *)__p);
          sub_207CF7E1C();
          sub_207CF7B20();
          if (os_variant_has_internal_diagnostics())
          {
            sub_207F0D4B0();
            v47 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
            {
              v249 = 0u;
              *(_OWORD *)v250 = 0u;
              *(_DWORD *)&v250[16] = 733237308;
              kdebug_trace();
              sub_207D52170(v47, (uint64_t)info, a3);
              kdebug_trace();
            }
          }
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        sub_207DE6A1C((uint64_t)&v211, *(unsigned __int8 *)(a1 + 73), (_QWORD *)(a1 + 280), (uint64_t)__p);
        *(_QWORD *)&v249 = off_24C06E878;
        v48 = info[1];
        v49 = (std::__shared_weak_count *)v228;
        if ((_QWORD)v228)
        {
          v50 = (unint64_t *)(v228 + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          v52 = *((_QWORD *)&v229 + 1);
          v53 = v230;
          v54 = v231;
          do
            v55 = __ldxr(v50);
          while (__stxr(v55 + 1, v50));
        }
        else
        {
          v52 = *((_QWORD *)&v229 + 1);
          v53 = v230;
          v54 = v231;
        }
        *((mach_timebase_info *)&v249 + 1) = v48;
        *(_QWORD *)v250 = v49;
        *(_QWORD *)&v250[8] = *((_QWORD *)&v228 + 1);
        *(_DWORD *)&v250[16] = v229;
        *(_QWORD *)&v250[24] = v52;
        v251 = v53;
        v252 = v54;
        if (!v49)
          goto LABEL_166;
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v123 = __ldaxr(p_shared_owners);
        while (__stlxr(v123 - 1, p_shared_owners));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
          v262 = 2;
          v124 = a2[1];
          if (v124 < a2[2])
            goto LABEL_167;
        }
        else
        {
LABEL_166:
          v262 = 2;
          v124 = a2[1];
          if (v124 < a2[2])
          {
LABEL_167:
            *(_BYTE *)v124 = 0;
            *(_DWORD *)(v124 + 120) = -1;
            v125 = v262;
            if (v262 != -1)
            {
              ((void (*)(__int128 *, unint64_t, __int128 *))off_24C073678[v262])(&v240, v124, &v249);
              *(_DWORD *)(v124 + 120) = v125;
            }
            v126 = (char *)(v124 + 128);
            a2[1] = v124 + 128;
LABEL_191:
            a2[1] = (uint64_t)v126;
            if (v262 != -1)
              ((void (*)(__int128 *, __int128 *))off_24C073660[v262])(&v246, &v249);
            *(_QWORD *)&v249 = off_24C06E878;
            v133 = *(_QWORD *)&__p[8];
            v134 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v135 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v136 = __ldxr(v135);
              while (__stxr(v136 + 1, v135));
              v137 = *(_QWORD *)&__p[40];
              v138 = *(_DWORD *)&__p[48];
              v139 = *(_WORD *)&__p[52];
              do
                v140 = __ldxr(v135);
              while (__stxr(v140 + 1, v135));
            }
            else
            {
              v137 = *(_QWORD *)&__p[40];
              v138 = *(_DWORD *)&__p[48];
              v139 = *(_WORD *)&__p[52];
            }
            *((_QWORD *)&v249 + 1) = v133;
            *(_QWORD *)v250 = v134;
            *(_QWORD *)&v250[8] = *(_QWORD *)&__p[24];
            *(_DWORD *)&v250[16] = *(_DWORD *)&__p[32];
            *(_QWORD *)&v250[24] = v137;
            v251 = v138;
            v252 = v139;
            if (!v134)
              goto LABEL_204;
            v141 = (unint64_t *)&v134->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
              v262 = 2;
              v143 = a2[1];
              if (v143 < a2[2])
              {
LABEL_205:
                *(_DWORD *)(v143 + 120) = -1;
                *(_QWORD *)v143 = off_24C06E878;
                v144 = *((_QWORD *)&v249 + 1);
                v145 = *(std::__shared_weak_count **)v250;
                if (*(_QWORD *)v250)
                {
                  v146 = (unint64_t *)(*(_QWORD *)v250 + 8);
                  do
                    v147 = __ldxr(v146);
                  while (__stxr(v147 + 1, v146));
                  v148 = *(_QWORD *)&v250[24];
                  v149 = v251;
                  v150 = v252;
                  do
                    v151 = __ldxr(v146);
                  while (__stxr(v151 + 1, v146));
                }
                else
                {
                  v148 = *(_QWORD *)&v250[24];
                  v149 = v251;
                  v150 = v252;
                }
                *(_QWORD *)(v143 + 8) = v144;
                *(_QWORD *)(v143 + 16) = v145;
                v160 = *(_QWORD *)&v250[8];
                *(_DWORD *)(v143 + 32) = *(_DWORD *)&v250[16];
                *(_QWORD *)(v143 + 24) = v160;
                *(_QWORD *)(v143 + 40) = v148;
                *(_DWORD *)(v143 + 48) = v149;
                *(_WORD *)(v143 + 52) = v150;
                if (v145)
                {
                  v161 = (unint64_t *)&v145->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
                *(_DWORD *)(v143 + 120) = 2;
                a2[1] = v143 + 128;
                a2[1] = v143 + 128;
                v152 = v262;
                if (v262 == -1)
                  goto LABEL_239;
                goto LABEL_238;
              }
            }
            else
            {
LABEL_204:
              v262 = 2;
              v143 = a2[1];
              if (v143 < a2[2])
                goto LABEL_205;
            }
            a2[1] = (uint64_t)sub_207D54C78((uint64_t)a2, (uint64_t)&v249);
            v152 = v262;
            if (v262 == -1)
            {
LABEL_239:
              v163 = *(std::__shared_weak_count **)&__p[16];
              if (*(_QWORD *)&__p[16])
              {
                v164 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                do
                  v165 = __ldaxr(v164);
                while (__stlxr(v165 - 1, v164));
                if (!v165)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
              v166 = (std::__shared_weak_count *)v228;
              if (!(_QWORD)v228)
                goto LABEL_307;
              v167 = (unint64_t *)(v228 + 8);
              do
                v168 = __ldaxr(v167);
              while (__stlxr(v168 - 1, v167));
LABEL_305:
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
LABEL_307:
              v211 = &off_24C08A5D8;
              v157 = v213;
              if (!v213)
                return kdebug_trace();
              v207 = (unint64_t *)&v213->__shared_owners_;
              do
                v159 = __ldaxr(v207);
              while (__stlxr(v159 - 1, v207));
              goto LABEL_310;
            }
LABEL_238:
            ((void (*)(__int128 *, __int128 *))off_24C073660[v152])(&v246, &v249);
            goto LABEL_239;
          }
        }
        v126 = sub_207D54C78((uint64_t)a2, (uint64_t)&v249);
        goto LABEL_191;
      }
    }
    if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 120)
      || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectorInput.cpp", 118, (uint64_t)"!deplaned_y_data_.empty()", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      v56 = *(_QWORD *)(a1 + 136);
      if (v56 != *(_QWORD *)(a1 + 144))
        goto LABEL_78;
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectorInput.cpp", 119, (uint64_t)"!deplaned_cbcr_data_.empty()", 28, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        v56 = *(_QWORD *)(a1 + 136);
LABEL_78:
        sub_207DE7E00((uint64_t)&v211, *(float32x4_t **)(a1 + 112));
        *(_QWORD *)&v249 = &off_24C08A5D8;
        *((_QWORD *)&v249 + 1) = v212;
        *(_QWORD *)v250 = v213;
        if (v213)
        {
          v57 = (unint64_t *)&v213->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        sub_207DE8900((uint64_t)&v249, v56);
        *(_QWORD *)&v249 = &off_24C08A5D8;
        v59 = *(std::__shared_weak_count **)v250;
        if (!*(_QWORD *)v250)
          goto LABEL_324;
        v60 = (unint64_t *)(*(_QWORD *)v250 + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          if (*(_BYTE *)(a1 + 408))
          {
LABEL_86:
            sub_207CF7E1C();
            sub_207CF7B20();
            if (os_variant_has_internal_diagnostics())
            {
              if (!*(_BYTE *)(a1 + 408))
                sub_207CA2A4C();
              v62 = a1 + 384;
              *(_QWORD *)&v249 = "cv3d.odt.";
              *((_QWORD *)&v249 + 1) = 9;
              v63 = *(unsigned __int8 *)(a1 + 407);
              if ((v63 & 0x80u) != 0)
              {
                v62 = *(_QWORD *)(a1 + 384);
                v63 = *(_QWORD *)(a1 + 392);
              }
              *(_QWORD *)v250 = v62;
              *(_QWORD *)&v250[8] = v63;
              sub_207CAC8F4((uint64_t)&v249, (uint64_t)&v250[16], 0, 0, &v243);
              sub_207F0D4B0();
              v64 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
              {
                v240 = 0u;
                v241 = 0u;
                v242 = 733237316;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
                {
                  v65 = sub_207F0D4B0();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64))
                  {
                    v66 = *(_QWORD *)(a1 + 112);
                    v67 = sub_20815C130((uint64_t)&v211);
                    v68 = sub_20815C3B0((uint64_t)&v211);
                    *(_DWORD *)__p = v67;
                    *(_DWORD *)&__p[4] = v68;
                    *(_QWORD *)&v249 = v66;
                    *(_QWORD *)&v246 = &off_24C073A50;
                    if (v68)
                      v69 = (_DWORD)v67 == 0;
                    else
                      v69 = 1;
                    v70 = v67 << 32;
                    if (v69)
                      v70 = 0;
                    info[0] = (mach_timebase_info)(v70 | ((_DWORD)v67 != 0));
                    sub_207D5A53C(&v249, __p, (uint64_t *)info, (uint64_t)&v246 + 8);
                    v71 = mach_continuous_time();
                    v72 = atomic_load((unsigned __int8 *)&qword_2545308B0);
                    if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
                    {
                      mach_timebase_info(info);
                      LODWORD(v209) = info[0].numer;
                      LODWORD(v210) = info[0].denom;
                      *(double *)&qword_2545308A8 = (double)v209 / (double)v210;
                      __cxa_guard_release(&qword_2545308B0);
                    }
                    *(_QWORD *)&v249 = llround(*(double *)&qword_2545308A8 * (double)v71);
                    *((_QWORD *)&v249 + 1) = 2;
                    *(_QWORD *)v250 = 0x6567616D69;
                    *(_QWORD *)&v250[8] = v277[0];
                    *(_QWORD *)&v250[15] = *(_QWORD *)((char *)v277 + 7);
                    *(_WORD *)&v250[23] = 261;
                    v277[0] = 0;
                    *(_QWORD *)((char *)v277 + 7) = 0;
                    LOBYTE(v251) = 0;
                    LOBYTE(v255) = 0;
                    v256 = (uint64_t)(a3 * 1000000000.0);
                    v257 = 2;
                    LOBYTE(v258) = 1;
                    v261 = 0;
                    LOBYTE(v264) = 0;
                    LOBYTE(v265) = 0;
                    LOBYTE(v268) = 0;
                    v73 = (char *)operator new(0x110uLL);
                    info[0] = (mach_timebase_info)&off_24C0736D0;
                    sub_207D591BC((uint64_t)&v246, (uint64_t)&info[1]);
                    *(_QWORD *)__p = &off_24C073BC8;
                    sub_207D56E28((uint64_t)info, (uint64_t)&__p[8]);
                    v74 = (std::__shared_weak_count *)v228;
                    if ((_QWORD)v228)
                    {
                      v75 = (unint64_t *)(v228 + 8);
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                    *(_QWORD *)v73 = off_24C073B78;
                    *((_QWORD *)v73 + 1) = &off_24C073BC8;
                    v77 = *(_OWORD *)&__p[8];
                    *(_QWORD *)&__p[8] = 0;
                    *(_QWORD *)&__p[16] = 0;
                    v78 = *(_OWORD *)&__p[24];
                    *((_OWORD *)v73 + 1) = v77;
                    *((_OWORD *)v73 + 2) = v78;
                    *(_OWORD *)(v73 + 46) = *(_OWORD *)&__p[38];
                    sub_207D47D34((uint64_t)(v73 + 64), (uint64_t)&v249);
                    *(_QWORD *)v73 = off_24C073728;
                    *(_QWORD *)__p = &off_24C073BC8;
                    v79 = *(std::__shared_weak_count **)&__p[16];
                    if (*(_QWORD *)&__p[16])
                    {
                      v80 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
                      do
                        v81 = __ldaxr(v80);
                      while (__stlxr(v81 - 1, v80));
                      if (!v81)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                    }
                    *(_QWORD *)v73 = off_24C078EA0;
                    info[0] = 0;
                    *(_QWORD *)&v244 = &off_24C078D18;
                    *((_QWORD *)&v244 + 1) = v73;
                    v82 = (std::__shared_weak_count *)operator new(0x20uLL);
                    v82->__vftable = (std::__shared_weak_count_vtbl *)&off_24C078E28;
                    v82->__shared_owners_ = 0;
                    v82->__shared_weak_owners_ = 0;
                    v82[1].__vftable = (std::__shared_weak_count_vtbl *)v73;
                    v245 = v82;
                    sub_207D49CF4((uint64_t)&v249);
                    v83 = v247;
                    if (v247)
                    {
                      v84 = (unint64_t *)&v247->__shared_owners_;
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    v86 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 56))(v64);
                    v87 = *v86;
                    v88 = (std::__shared_weak_count *)v86[1];
                    if (v88)
                    {
                      v89 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v90 = __ldxr(v89);
                      while (__stxr(v90 + 1, v89));
                    }
                    v92 = *((_QWORD *)&v244 + 1);
                    v91 = v245;
                    info[0] = (mach_timebase_info)&off_24C078D18;
                    info[1] = *(mach_timebase_info *)((char *)&v244 + 8);
                    *(_QWORD *)&v228 = v245;
                    *((_QWORD *)&v244 + 1) = 0;
                    v245 = 0;
                    *(_QWORD *)&v249 = v87;
                    *((_QWORD *)&v249 + 1) = v88;
                    if (v88)
                    {
                      v93 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v94 = __ldxr(v93);
                      while (__stxr(v94 + 1, v93));
                    }
                    *(_QWORD *)v250 = &off_24C078D18;
                    *(_QWORD *)&v250[8] = v92;
                    *(_QWORD *)&v250[16] = v91;
                    if (v91)
                    {
                      v95 = (unint64_t *)&v91->__shared_owners_;
                      do
                        v96 = __ldxr(v95);
                      while (__stxr(v96 + 1, v95));
                    }
                    (*(void (**)(_QWORD *, __int128 *))(*v65 + 16))(v65, &v249);
                    v97 = *(std::__shared_weak_count **)&v250[16];
                    if (*(_QWORD *)&v250[16])
                    {
                      v98 = (unint64_t *)(*(_QWORD *)&v250[16] + 8);
                      do
                        v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                        std::__shared_weak_count::__release_weak(v97);
                      }
                    }
                    v100 = (std::__shared_weak_count *)*((_QWORD *)&v249 + 1);
                    if (*((_QWORD *)&v249 + 1))
                    {
                      v101 = (unint64_t *)(*((_QWORD *)&v249 + 1) + 8);
                      do
                        v102 = __ldaxr(v101);
                      while (__stlxr(v102 - 1, v101));
                      if (!v102)
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
                    }
                    v103 = (std::__shared_weak_count *)v228;
                    if ((_QWORD)v228)
                    {
                      v104 = (unint64_t *)(v228 + 8);
                      do
                        v105 = __ldaxr(v104);
                      while (__stlxr(v105 - 1, v104));
                      if (!v105)
                      {
                        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                        std::__shared_weak_count::__release_weak(v103);
                      }
                    }
                    if (v88)
                    {
                      v106 = (unint64_t *)&v88->__shared_owners_;
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                    v108 = v245;
                    if (v245)
                    {
                      v109 = (unint64_t *)&v245->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v243.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
LABEL_324:
          if (*(_BYTE *)(a1 + 408))
            goto LABEL_86;
        }
        v169 = *(_QWORD *)(a1 + 112);
        v170 = sub_207D52740(a1 + 80, (const void **)(a1 + 24));
        v171 = *((_DWORD *)v170 + 8);
        v172 = *((_DWORD *)v170 + 10);
        LODWORD(v244) = 65;
        __p[0] = 0;
        v218 = 0;
        *(int32x2_t *)((char *)&v240 + 4) = vmovn_s64(*(int64x2_t *)a1);
        LODWORD(v240) = 1;
        HIDWORD(v240) = v171;
        LODWORD(v241) = v172;
        LOBYTE(v246) = 0;
        BYTE4(v247) = 0;
        sub_20809F1D0((uint64_t)info, v169, &v240, &v246, &v244, (uint64_t)__p);
        if (v218)
        {
          v173 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v174 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
        }
        v249 = *(_OWORD *)&info[0].numer;
        *(_OWORD *)v250 = v228;
        *(_OWORD *)&v250[16] = v229;
        v251 = v230;
        LOBYTE(v253) = 0;
        v261 = 0;
        if (v239)
        {
          v253 = off_24C06E878;
          v176 = v232;
          v177 = v233;
          if (v233)
          {
            v178 = (unint64_t *)&v233->__shared_owners_;
            do
              v179 = __ldxr(v178);
            while (__stxr(v179 + 1, v178));
            v180 = v236;
            v181 = v237;
            v182 = v238;
            do
              v183 = __ldxr(v178);
            while (__stxr(v183 + 1, v178));
          }
          else
          {
            v180 = v236;
            v181 = v237;
            v182 = v238;
          }
          v254 = v176;
          v255 = v177;
          v256 = v234;
          LODWORD(v257) = v235;
          v258 = v180;
          v259 = v181;
          v260 = v182;
          if (v177)
          {
            v184 = (unint64_t *)&v177->__shared_owners_;
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          v261 = 1;
        }
        v262 = 1;
        v186 = *(_QWORD *)(a1 + 136);
        v187 = sub_207D52740(a1 + 80, (const void **)(a1 + 48));
        v188 = *((_DWORD *)v187 + 8);
        v189 = *((_DWORD *)v187 + 10);
        LODWORD(v243.__r_.__value_.__l.__data_) = 65;
        LOBYTE(v246) = 0;
        v248 = 0;
        *(int32x2_t *)((char *)&v244 + 4) = vshrn_n_s64(*(int64x2_t *)a1, 1uLL);
        LODWORD(v244) = 1;
        HIDWORD(v244) = v188;
        LODWORD(v245) = v189;
        LOBYTE(v240) = 0;
        BYTE4(v241) = 0;
        sub_20809F1D0((uint64_t)__p, v186, &v244, &v240, &v243, (uint64_t)&v246);
        if (v248)
        {
          v190 = v247;
          if (v247)
          {
            v191 = (unint64_t *)&v247->__shared_owners_;
            do
              v192 = __ldaxr(v191);
            while (__stlxr(v192 - 1, v191));
            if (!v192)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
        }
        v263[0] = *(_OWORD *)__p;
        v263[1] = *(_OWORD *)&__p[16];
        v264 = *(_OWORD *)&__p[32];
        v265 = *(_DWORD *)&__p[48];
        LOBYTE(v266) = 0;
        v274 = 0;
        if (v226)
        {
          v266 = off_24C06E878;
          v193 = v219;
          v194 = v220;
          if (v220)
          {
            v195 = (unint64_t *)&v220->__shared_owners_;
            do
              v196 = __ldxr(v195);
            while (__stxr(v196 + 1, v195));
            v197 = v223;
            v198 = v224;
            v199 = v225;
            do
              v200 = __ldxr(v195);
            while (__stxr(v200 + 1, v195));
          }
          else
          {
            v197 = v223;
            v198 = v224;
            v199 = v225;
          }
          v267 = v193;
          v268 = v194;
          v269 = v221;
          v270 = v222;
          v271 = v197;
          v272 = v198;
          v273 = v199;
          if (v194)
          {
            v201 = (unint64_t *)&v194->__shared_owners_;
            do
              v202 = __ldaxr(v201);
            while (__stlxr(v202 - 1, v201));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
              std::__shared_weak_count::__release_weak(v194);
            }
          }
          v274 = 1;
        }
        v275 = 1;
        sub_207D552FC(a2, (uint64_t)&v249, (uint64_t)&v276, 2uLL);
        if (v275 != -1)
          ((void (*)(__int128 *, _OWORD *))off_24C073660[v275])(&v246, v263);
        v275 = -1;
        if (v262 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C073660[v262])(&v246, &v249);
        v262 = -1;
        if (v226)
        {
          v203 = v220;
          if (v220)
          {
            v204 = (unint64_t *)&v220->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
        }
        if (!v239)
          goto LABEL_307;
        v166 = v233;
        if (!v233)
          goto LABEL_307;
        v206 = (unint64_t *)&v233->__shared_owners_;
        do
          v168 = __ldaxr(v206);
        while (__stlxr(v168 - 1, v206));
        goto LABEL_305;
      }
    }
    abort();
  }
  if (sub_207D5A890((_QWORD *)(a1 + 160), a1 + 360))
  {
    v6 = sub_207D5A890((_QWORD *)(a1 + 160), a1 + 360);
    if (!v6)
      sub_207CA4018("unordered_map::at: key not found");
    v8 = v6[6];
    v7 = v6[7];
    *(_QWORD *)&v240 = &off_24C08A5D8;
    *((_QWORD *)&v240 + 1) = v8;
    *(_QWORD *)&v241 = v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    *((_QWORD *)&v240 + 1) = 0;
    *(_QWORD *)&v241 = 0;
    *(_QWORD *)&v240 = &off_24C08A5D8;
  }
  if (sub_20815A764((uint64_t)&v240) != 1278226488
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectorInput.cpp", 144, (uint64_t)"FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_OneComponent8", 71, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_35;
  v16 = (unsigned __int16)sub_207CF7368();
  if (v16 <= 0x100)
    LOBYTE(v16) = 0;
  if (!(_BYTE)v16)
  {
LABEL_35:
    v28 = *(float32x4_t **)(a1 + 112);
    if (v28 == *(float32x4_t **)(a1 + 120))
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectorInput.cpp", 154, (uint64_t)"!deplaned_y_data_.empty()", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v28 = *(float32x4_t **)(a1 + 112);
    }
    sub_207DE8390((uint64_t)&v240, v28);
    v29 = *(_QWORD *)(a1 + 112);
    v30 = sub_207D52740(a1 + 80, (const void **)(a1 + 24));
    v31 = *((_DWORD *)v30 + 8);
    v32 = *((_DWORD *)v30 + 10);
    LODWORD(v243.__r_.__value_.__l.__data_) = 65;
    __p[0] = 0;
    v218 = 0;
    *(int32x2_t *)((char *)&v244 + 4) = vmovn_s64(*(int64x2_t *)a1);
    LODWORD(v244) = 1;
    HIDWORD(v244) = v31;
    LODWORD(v245) = v32;
    LOBYTE(v246) = 0;
    BYTE4(v247) = 0;
    sub_20809F1D0((uint64_t)info, v29, &v244, &v246, &v243, (uint64_t)__p);
    if (v218)
    {
      v33 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v34 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    v249 = *(_OWORD *)&info[0].numer;
    *(_OWORD *)v250 = v228;
    *(_OWORD *)&v250[16] = v229;
    v251 = v230;
    LOBYTE(v253) = 0;
    v261 = 0;
    if (v239)
    {
      v253 = off_24C06E878;
      v36 = v232;
      v37 = v233;
      if (v233)
      {
        v38 = (unint64_t *)&v233->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v40 = v236;
        v41 = v237;
        v42 = v238;
        do
          v43 = __ldxr(v38);
        while (__stxr(v43 + 1, v38));
      }
      else
      {
        v40 = v236;
        v41 = v237;
        v42 = v238;
      }
      v254 = v36;
      v255 = v37;
      v256 = v234;
      LODWORD(v257) = v235;
      v258 = v40;
      v259 = v41;
      v260 = v42;
      if (v37)
      {
        v127 = (unint64_t *)&v37->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v261 = 1;
    }
    v262 = 1;
    sub_207D552FC(a2, (uint64_t)&v249, (uint64_t)v263, 1uLL);
    if (v262 != -1)
      ((void (*)(_BYTE *, __int128 *))off_24C073660[v262])(__p, &v249);
    v262 = -1;
    if (!v239)
      goto LABEL_227;
    v129 = v233;
    if (!v233)
      goto LABEL_227;
    v130 = (unint64_t *)&v233->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    goto LABEL_225;
  }
  sub_207DE54F8((uint64_t)&v240, *(unsigned __int8 *)(a1 + 73), (_QWORD *)(a1 + 240), (uint64_t)info);
  if (*(_BYTE *)(a1 + 408))
  {
    v17 = a1 + 384;
    *(_QWORD *)&v249 = "cv3d.odt.";
    *((_QWORD *)&v249 + 1) = 9;
    v18 = *(unsigned __int8 *)(a1 + 407);
    if ((v18 & 0x80u) != 0)
    {
      v17 = *(_QWORD *)(a1 + 384);
      v18 = *(_QWORD *)(a1 + 392);
    }
    *(_QWORD *)v250 = v17;
    *(_QWORD *)&v250[8] = v18;
    sub_207CAC8F4((uint64_t)&v249, (uint64_t)&v250[16], 0, 0, (std::string *)__p);
    sub_207CF7E1C();
    sub_207CF7B20();
    if (os_variant_has_internal_diagnostics())
    {
      sub_207F0D4B0();
      v19 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
      {
        v249 = 0u;
        *(_OWORD *)v250 = 0u;
        *(_DWORD *)&v250[16] = 733237308;
        kdebug_trace();
        sub_207D52170(v19, (uint64_t)info, a3);
        kdebug_trace();
      }
    }
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  *(_QWORD *)&v249 = off_24C06E878;
  v20 = info[1];
  v21 = (std::__shared_weak_count *)v228;
  if ((_QWORD)v228)
  {
    v22 = (unint64_t *)(v228 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v24 = *((_QWORD *)&v229 + 1);
    v25 = v230;
    v26 = v231;
    do
      v27 = __ldxr(v22);
    while (__stxr(v27 + 1, v22));
  }
  else
  {
    v24 = *((_QWORD *)&v229 + 1);
    v25 = v230;
    v26 = v231;
  }
  *((mach_timebase_info *)&v249 + 1) = v20;
  *(_QWORD *)v250 = v21;
  *(_QWORD *)&v250[8] = *((_QWORD *)&v228 + 1);
  *(_DWORD *)&v250[16] = v229;
  *(_QWORD *)&v250[24] = v24;
  v251 = v25;
  v252 = v26;
  if (!v21)
    goto LABEL_154;
  v111 = (unint64_t *)&v21->__shared_owners_;
  do
    v112 = __ldaxr(v111);
  while (__stlxr(v112 - 1, v111));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v262 = 2;
    v113 = a2[1];
    if (v113 < a2[2])
    {
LABEL_155:
      *(_DWORD *)(v113 + 120) = -1;
      *(_QWORD *)v113 = off_24C06E878;
      v114 = *((_QWORD *)&v249 + 1);
      v115 = *(std::__shared_weak_count **)v250;
      if (*(_QWORD *)v250)
      {
        v116 = (unint64_t *)(*(_QWORD *)v250 + 8);
        do
          v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
        v118 = *(_QWORD *)&v250[24];
        v119 = v251;
        v120 = v252;
        do
          v121 = __ldxr(v116);
        while (__stxr(v121 + 1, v116));
      }
      else
      {
        v118 = *(_QWORD *)&v250[24];
        v119 = v251;
        v120 = v252;
      }
      *(_QWORD *)(v113 + 8) = v114;
      *(_QWORD *)(v113 + 16) = v115;
      v153 = *(_QWORD *)&v250[8];
      *(_DWORD *)(v113 + 32) = *(_DWORD *)&v250[16];
      *(_QWORD *)(v113 + 24) = v153;
      *(_QWORD *)(v113 + 40) = v118;
      *(_DWORD *)(v113 + 48) = v119;
      *(_WORD *)(v113 + 52) = v120;
      if (v115)
      {
        v154 = (unint64_t *)&v115->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      *(_DWORD *)(v113 + 120) = 2;
      a2[1] = v113 + 128;
      a2[1] = v113 + 128;
      v132 = v262;
      if (v262 != -1)
        goto LABEL_221;
      goto LABEL_222;
    }
  }
  else
  {
LABEL_154:
    v262 = 2;
    v113 = a2[1];
    if (v113 < a2[2])
      goto LABEL_155;
  }
  a2[1] = (uint64_t)sub_207D54C78((uint64_t)a2, (uint64_t)&v249);
  v132 = v262;
  if (v262 != -1)
LABEL_221:
    ((void (*)(_BYTE *, __int128 *))off_24C073660[v132])(__p, &v249);
LABEL_222:
  v129 = (std::__shared_weak_count *)v228;
  if ((_QWORD)v228)
  {
    v156 = (unint64_t *)(v228 + 8);
    do
      v131 = __ldaxr(v156);
    while (__stlxr(v131 - 1, v156));
LABEL_225:
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
LABEL_227:
  *(_QWORD *)&v240 = &off_24C08A5D8;
  v157 = (std::__shared_weak_count *)v241;
  if (!(_QWORD)v241)
    return kdebug_trace();
  v158 = (unint64_t *)(v241 + 8);
  do
    v159 = __ldaxr(v158);
  while (__stlxr(v159 - 1, v158));
LABEL_310:
  if (!v159)
  {
    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
    std::__shared_weak_count::__release_weak(v157);
  }
  return kdebug_trace();
}

void sub_207D54108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  void **v66;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;

  __cxa_guard_abort(&qword_2545308B0);
  v68 = (std::__shared_weak_count *)a66;
  if (a66)
  {
    v69 = (unint64_t *)(a66 + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  sub_207CD822C((uint64_t)&a49);
  if (a60 < 0)
    operator delete(__p);
  sub_207D2E058(v66);
  sub_20815B3F4(&a10);
  sub_207CD822C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_207D54508(uint64_t a1@<X0>, size_t a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  _QWORD *v31;
  std::__shared_weak_count *v32;

  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(const void **)v10;
    v12 = *(std::__shared_weak_count **)(v10 + 8);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v16 = (std::__shared_weak_count_vtbl *)CMGetAttachment(v11, CFSTR("LowResolutionImage"), 0);
  sub_20815B050(&v30, v16, 1, 0);
  if (!v31)
    goto LABEL_23;
  v18 = *v31;
  v17 = (std::__shared_weak_count *)v31[1];
  if (!v17)
    goto LABEL_15;
  v19 = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!v18)
      goto LABEL_23;
  }
  else
  {
LABEL_15:
    if (!v18)
      goto LABEL_23;
  }
  if (sub_20815C130((uint64_t)&v30) < a2 || sub_20815C3B0((uint64_t)&v30) < a3)
  {
LABEL_23:
    v24 = *(_QWORD *)(a1 + 8);
    v22 = *(std::__shared_weak_count **)(a1 + 16);
    *a5 = &off_24C08A5D8;
    a5[1] = v24;
    a5[2] = v22;
    if (!v22)
      goto LABEL_26;
    goto LABEL_24;
  }
  if (*(_BYTE *)(a4 + 8))
    *(_BYTE *)(a4 + 8) = 0;
  v23 = v31;
  v22 = v32;
  *a5 = &off_24C08A5D8;
  a5[1] = v23;
  a5[2] = v22;
  if (v22)
  {
LABEL_24:
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207D546D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_207D546E8(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  void **v13;
  double result;
  std::string v15;
  void *__p[2];
  uint64_t v17;
  void *__dst[2];
  uint64_t v19;

  if (*(char *)(a4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
    if ((*(char *)(a5 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    v19 = *(_QWORD *)(a4 + 16);
    if ((*(char *)(a5 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)__p = *(_OWORD *)a5;
      v17 = *(_QWORD *)(a5 + 16);
      goto LABEL_6;
    }
  }
  sub_207CA40D8(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
LABEL_6:
  sub_207D54854(a1, a2, a3, __dst, __p, a6, a7);
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__dst[0]);
LABEL_8:
  sub_207D54974(a3, a2, &v15);
  v13 = (void **)(a1 + 360);
  if (*(char *)(a1 + 383) < 0)
    operator delete(*v13);
  result = *(double *)&v15.__r_.__value_.__l.__data_;
  *(_OWORD *)v13 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 376) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  return result;
}

void sub_207D54808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a25 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_207D54854(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, void **a5, char a6, char a7)
{
  void **v11;
  char v12;
  __int128 v13;
  void **result;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void *v19;
  size_t v20;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (void **)(a1 + 24);
  if (v11 != a4)
  {
    v12 = *((_BYTE *)a4 + 23);
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      if ((*((_BYTE *)a4 + 23) & 0x80) != 0)
      {
        sub_207CC2180(v11, *a4, (size_t)a4[1]);
        result = (void **)(a1 + 48);
        if ((void **)(a1 + 48) == a5)
          goto LABEL_17;
      }
      else
      {
        v13 = *(_OWORD *)a4;
        v11[2] = a4[2];
        *(_OWORD *)v11 = v13;
        result = (void **)(a1 + 48);
        if ((void **)(a1 + 48) == a5)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    if (v12 >= 0)
      v15 = a4;
    else
      v15 = *a4;
    if (v12 >= 0)
      v16 = *((unsigned __int8 *)a4 + 23);
    else
      v16 = (size_t)a4[1];
    sub_207CC2244(v11, v15, v16);
  }
  result = (void **)(a1 + 48);
  if ((void **)(a1 + 48) == a5)
  {
LABEL_17:
    *(_BYTE *)(a1 + 72) = a6;
    *(_BYTE *)(a1 + 73) = a7;
    return result;
  }
LABEL_14:
  v17 = *((_BYTE *)a5 + 23);
  if (*(char *)(a1 + 71) < 0)
  {
    if (v17 >= 0)
      v19 = a5;
    else
      v19 = *a5;
    if (v17 >= 0)
      v20 = *((unsigned __int8 *)a5 + 23);
    else
      v20 = (size_t)a5[1];
    result = sub_207CC2244(result, v19, v20);
    *(_BYTE *)(a1 + 72) = a6;
    *(_BYTE *)(a1 + 73) = a7;
  }
  else
  {
    if ((*((_BYTE *)a5 + 23) & 0x80) == 0)
    {
      v18 = *(_OWORD *)a5;
      result[2] = a5[2];
      *(_OWORD *)result = v18;
      goto LABEL_17;
    }
    result = (void **)sub_207CC2180(result, *a5, (size_t)a5[1]);
    *(_BYTE *)(a1 + 72) = a6;
    *(_BYTE *)(a1 + 73) = a7;
  }
  return result;
}

void sub_207D54974(unint64_t __val@<X1>, unint64_t a2@<X2>, std::string *a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  std::string __p;
  std::string v11;
  std::string v12;

  std::to_string(&v11, __val);
  v5 = std::string::append(&v11, "_", 1uLL);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v12, (const std::string::value_type *)p_p, size);
  *a3 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(v11.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_207D54A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_207D54AEC(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t **v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t *v13;
  BOOL v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v2 = **a2;
  v3 = *(__int128 **)(v2 + 48);
  v4 = *(__int128 **)(v2 + 56);
  if (v3 != v4)
  {
    v5 = (uint64_t **)(a1 + 80);
    v6 = (uint64_t *)(a1 + 88);
    do
    {
      if (!*((_BYTE *)v3 + 24) || !*((_BYTE *)v3 + 80))
        sub_207CA2A4C();
      if (*((char *)v3 + 23) < 0)
      {
        sub_207CA40D8(v15, *(void **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v7 = *v3;
        v16 = *((_QWORD *)v3 + 2);
        *(_OWORD *)v15 = v7;
      }
      v8 = v3[2];
      v9 = v3[4];
      v18 = v3[3];
      v19 = v9;
      v17 = v8;
      *(_OWORD *)__p = *(_OWORD *)v15;
      v21 = v16;
      v15[0] = 0;
      v15[1] = 0;
      v16 = 0;
      v11 = v3[3];
      v10 = v3[4];
      v22 = v3[2];
      v23 = v11;
      v24 = v10;
      v12 = sub_207D55CC8(v5, v6, (const void **)__p, (uint64_t)__p);
      v13 = (uint64_t *)*((_QWORD *)v12 + 1);
      if (v13)
      {
        do
        {
          v6 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)*((_QWORD *)v12 + 2);
          v14 = *v6 == (_QWORD)v12;
          v12 = (char *)v6;
        }
        while (!v14);
      }
      if (SHIBYTE(v21) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v16) < 0)
LABEL_18:
          operator delete(v15[0]);
      }
      else if (SHIBYTE(v16) < 0)
      {
        goto LABEL_18;
      }
      v3 = (__int128 *)((char *)v3 + 168);
    }
    while (v3 != v4);
  }
}

void sub_207D54C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

char *sub_207D54C78(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  v3 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v5 = (uint64_t)&v4[-*(_QWORD *)a1] >> 7;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57)
    sub_207CA420C();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 6 > v6)
    v6 = v8 >> 6;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
    v9 = 0x1FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 57)
      sub_207CA3AB8();
    v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[128 * v5];
  v22 = &v10[128 * v9];
  *v11 = 0;
  *((_DWORD *)v11 + 30) = -1;
  v12 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_24C073678[v12])(&v23, v11, a2);
    *((_DWORD *)v11 + 30) = v12;
    v3 = *(char **)a1;
    v4 = *(char **)(a1 + 8);
    v13 = v11 + 128;
    v21 = v11 + 128;
    if (v4 != *(char **)a1)
      goto LABEL_13;
LABEL_19:
    v17 = v3;
    goto LABEL_20;
  }
  v13 = v11 + 128;
  v21 = v11 + 128;
  if (v4 == v3)
    goto LABEL_19;
LABEL_13:
  v14 = v11;
  do
  {
    *(v14 - 128) = 0;
    v14 -= 128;
    v15 = v4 - 128;
    *((_DWORD *)v14 + 30) = -1;
    v16 = *((unsigned int *)v4 - 2);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *, char *, char *))off_24C073690[v16])(&v24, v14, v15);
      *((_DWORD *)v11 - 2) = v16;
    }
    v11 = v14;
    v4 = v15;
  }
  while (v15 != v3);
  v17 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  v11 = v14;
  v13 = v21;
LABEL_20:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v22;
  if (v3 != v17)
  {
    do
    {
      v18 = v3 - 128;
      v19 = *((unsigned int *)v3 - 2);
      if ((_DWORD)v19 != -1)
      {
        ((void (*)(char *))off_24C073660[v19])(&v24);
        v18 = v3 - 128;
      }
      *((_DWORD *)v3 - 2) = -1;
      v3 = v18;
    }
    while (v18 != v17);
    v3 = v17;
  }
  if (v3)
    operator delete(v3);
  return v13;
}

void sub_207D54E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(unsigned int *)(v17 + 120);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_24C073660[v19])(&a17, v17);
  *(_DWORD *)(v17 + 120) = -1;
  sub_207D5517C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D54ECC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_207D54FC0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*((_BYTE *)a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    v7 = *((_QWORD *)a3 + 8);
    v8 = (std::__shared_weak_count *)*((_QWORD *)a3 + 9);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      v11 = *((_QWORD *)a3 + 12);
      v12 = *((_DWORD *)a3 + 26);
      v13 = *((_WORD *)a3 + 54);
    }
    *(_QWORD *)(a2 + 64) = v7;
    *(_QWORD *)(a2 + 72) = v8;
    v15 = *((_QWORD *)a3 + 10);
    *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
    *(_QWORD *)(a2 + 80) = v15;
    *(_QWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 104) = v12;
    *(_WORD *)(a2 + 108) = v13;
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
}

void sub_207D550B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a2 = off_24C06E878;
  v3 = *(_QWORD *)(a3 + 8);
  v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  v11 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 52) = v9;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t sub_207D5517C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = v3 - 128;
      *(_QWORD *)(a1 + 16) = v3 - 128;
      v5 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(char *))off_24C073660[v5])(&v7);
        v4 = *(_QWORD *)(a1 + 16);
      }
      *(_DWORD *)(v3 - 8) = -1;
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_207D55218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_207D55274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a3 + 112))
  {
    *(_QWORD *)(a2 + 56) = off_24C06E878;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_OWORD *)(a2 + 94) = *(_OWORD *)(a3 + 94);
    *(__n128 *)(a2 + 80) = result;
    *(_BYTE *)(a2 + 112) = 1;
  }
  return result;
}

__n128 sub_207D552D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = off_24C06E878;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t *sub_207D552FC(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2;
  v7 = (uint64_t)result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = *result;
  if (__sz > (v8 - *result) >> 7)
  {
    if (v10)
    {
      v11 = result[1];
      v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          v13 = v11 - 128;
          v14 = *(unsigned int *)(v11 - 8);
          if ((_DWORD)v14 != -1)
            ((void (*)(uint64_t *, uint64_t))off_24C073660[v14])(&v31, v11 - 128);
          *(_DWORD *)(v11 - 8) = -1;
          v11 -= 128;
        }
        while (v13 != v10);
        v12 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (__sz >> 57)
      goto LABEL_45;
    v24 = v8 >> 6;
    if (v8 >> 6 <= __sz)
      v24 = __sz;
    v25 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF80;
    v26 = 0x1FFFFFFFFFFFFFFLL;
    if (!v25)
      v26 = v24;
    if (v26 >> 57)
LABEL_45:
      sub_207CA420C();
    v27 = v26 << 7;
    v28 = (char *)operator new(v26 << 7);
    *(_QWORD *)v7 = v28;
    *(_QWORD *)(v7 + 8) = v28;
    *(_QWORD *)(v7 + 16) = &v28[v27];
    result = (uint64_t *)sub_207D55618(v9, v6, a3, (uint64_t)v28);
    goto LABEL_38;
  }
  v15 = result[1];
  v16 = (v15 - v10) >> 7;
  if (v16 >= __sz)
  {
    if (a2 == a3)
    {
      v21 = *result;
      if (v15 == v10)
      {
LABEL_44:
        *(_QWORD *)(v7 + 8) = v21;
        return result;
      }
      do
      {
LABEL_42:
        v29 = v15 - 128;
        v30 = *(unsigned int *)(v15 - 8);
        if ((_DWORD)v30 != -1)
          result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_24C073660[v30])(&v31, v15 - 128);
        *(_DWORD *)(v15 - 8) = -1;
        v15 -= 128;
      }
      while (v29 != v21);
      goto LABEL_44;
    }
    v21 = *result;
    while (1)
    {
      while (1)
      {
        v22 = *(unsigned int *)(v10 + 120);
        v23 = *(unsigned int *)(v6 + 120);
        if ((_DWORD)v22 != -1)
          break;
        if ((_DWORD)v23 != -1)
          goto LABEL_22;
LABEL_23:
        v6 += 128;
        v10 += 128;
        v21 += 128;
        if (v6 == a3)
          goto LABEL_27;
      }
      if ((_DWORD)v23 != -1)
      {
LABEL_22:
        v31 = v10;
        result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24C0736A8[v23])(&v31, v10, v6);
        goto LABEL_23;
      }
      result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_24C073660[v22])(&v31, v10);
      *(_DWORD *)(v10 + 120) = -1;
      v6 += 128;
      v10 += 128;
      v21 += 128;
      if (v6 == a3)
      {
LABEL_27:
        v15 = *(_QWORD *)(v7 + 8);
        if (v15 == v21)
          goto LABEL_44;
        goto LABEL_42;
      }
    }
  }
  if (v15 == v10)
    goto LABEL_18;
  v17 = v16 << 7;
  v18 = a2;
  do
  {
    while (1)
    {
      v19 = *(unsigned int *)(v10 + 120);
      v20 = *(unsigned int *)(v18 + 120);
      if ((_DWORD)v19 != -1)
        break;
      if ((_DWORD)v20 != -1)
        goto LABEL_12;
LABEL_13:
      v18 += 128;
      v10 += 128;
      v17 -= 128;
      if (!v17)
        goto LABEL_17;
    }
    if ((_DWORD)v20 != -1)
    {
LABEL_12:
      v31 = v10;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_24C0736A8[v20])(&v31, v10, v18);
      goto LABEL_13;
    }
    ((void (*)(uint64_t *, uint64_t))off_24C073660[v19])(&v31, v10);
    *(_DWORD *)(v10 + 120) = -1;
    v18 += 128;
    v10 += 128;
    v17 -= 128;
  }
  while (v17);
LABEL_17:
  v10 = *(_QWORD *)(v7 + 8);
LABEL_18:
  result = (uint64_t *)sub_207D55618(v9, v6 + (v16 << 7), a3, v10);
LABEL_38:
  *(_QWORD *)(v7 + 8) = result;
  return result;
}

void sub_207D555F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_207D55600(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_207D55618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[3];

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_BYTE *)v8 = 0;
      *(_DWORD *)(v8 + 120) = -1;
      v9 = *(unsigned int *)(a2 + v7 + 120);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(_BYTE *, uint64_t))off_24C073678[v9])(v11, a4 + v7);
        *(_DWORD *)(v8 + 120) = v9;
      }
      v7 += 128;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_207D556C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = *(unsigned int *)(v13 + v14 + 120);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C073660[v16])(&a12, v13 + v14);
  for (*(_DWORD *)(v13 + v14 + 120) = -1; v14; v14 -= 128)
  {
    v17 = v13 + v14;
    v18 = *(unsigned int *)(v13 + v14 - 8);
    if ((_DWORD)v18 != -1)
      ((void (*)(char *, uint64_t))off_24C073660[v18])(&a13, v17 - 128);
    *(_DWORD *)(v17 - 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_207D55748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120))
  {
    v7[0] = *(_QWORD *)a1;
    v7[1] = a3;
    sub_207D559B4(v7);
  }
  else
  {
    v4 = *(_OWORD *)a3;
    v5 = *(_OWORD *)(a3 + 16);
    v6 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v4;
    sub_207CA5F7C(a2 + 56, a3 + 56);
  }
  return result;
}

void sub_207D557A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6[2];

  if (*(_DWORD *)(*(_QWORD *)a1 + 120) == 1)
  {
    v3 = *(_OWORD *)a3;
    v4 = *(_OWORD *)(a3 + 16);
    v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v5;
    *(_OWORD *)a2 = v3;
    sub_207CA5F7C(a2 + 56, a3 + 56);
  }
  else
  {
    v6[0] = *(_QWORD *)a1;
    v6[1] = a3;
    sub_207D55B3C(v6);
  }
}

__n128 sub_207D55804(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 result;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  char v25;

  v4 = *a1;
  if (*(_DWORD *)(*a1 + 120) != 2)
  {
    v15 = *(_QWORD *)(a3 + 8);
    v14 = *(std::__shared_weak_count **)(a3 + 16);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v18 = *(_QWORD *)(a3 + 40);
      v19 = *(_DWORD *)(a3 + 48);
      v20 = *(_WORD *)(a3 + 52);
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v24.n128_u64[0] = *(_QWORD *)(a3 + 24);
      v24.n128_u32[2] = *(_DWORD *)(a3 + 32);
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      v23 = *(unsigned int *)(v4 + 120);
      if ((_DWORD)v23 == -1)
        goto LABEL_24;
    }
    else
    {
      v18 = *(_QWORD *)(a3 + 40);
      v19 = *(_DWORD *)(a3 + 48);
      v20 = *(_WORD *)(a3 + 52);
      v24.n128_u64[0] = *(_QWORD *)(a3 + 24);
      v24.n128_u32[2] = *(_DWORD *)(a3 + 32);
      v23 = *(unsigned int *)(v4 + 120);
      if ((_DWORD)v23 == -1)
      {
LABEL_24:
        *(_QWORD *)v4 = off_24C06E878;
        *(_QWORD *)(v4 + 8) = v15;
        *(_QWORD *)(v4 + 16) = v14;
        result = v24;
        *(__n128 *)(v4 + 24) = v24;
        *(_QWORD *)(v4 + 40) = v18;
        *(_DWORD *)(v4 + 48) = v19;
        *(_WORD *)(v4 + 52) = v20;
        *(_DWORD *)(v4 + 120) = 2;
        return result;
      }
    }
    ((void (*)(char *, uint64_t))off_24C073660[v23])(&v25, v4);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_207D559B4(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  __int128 *v6;
  uint64_t v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;

  v7 = *a1;
  v6 = (__int128 *)a1[1];
  v15 = *v6;
  v16 = v6[1];
  v17 = v6[2];
  v18 = *((_DWORD *)v6 + 12);
  v8 = *((unsigned __int8 *)v6 + 112);
  if (!*((_BYTE *)v6 + 112))
    goto LABEL_12;
  v2 = *((_QWORD *)v6 + 8);
  v1 = (std::__shared_weak_count *)*((_QWORD *)v6 + 9);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v3 = *((_QWORD *)v6 + 12);
    v4 = *((_DWORD *)v6 + 26);
    v5 = *((_WORD *)v6 + 54);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_QWORD *)&v14 = *((_QWORD *)v6 + 10);
    DWORD2(v14) = *((_DWORD *)v6 + 22);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
      v13 = *(unsigned int *)(v7 + 120);
      if ((_DWORD)v13 == -1)
        goto LABEL_14;
LABEL_13:
      ((void (*)(char *, uint64_t))off_24C073660[v13])(&v19, v7);
      goto LABEL_14;
    }
LABEL_12:
    v13 = *(unsigned int *)(v7 + 120);
    if ((_DWORD)v13 == -1)
      goto LABEL_14;
    goto LABEL_13;
  }
  v3 = *((_QWORD *)v6 + 12);
  v4 = *((_DWORD *)v6 + 26);
  v5 = *((_WORD *)v6 + 54);
  *(_QWORD *)&v14 = *((_QWORD *)v6 + 10);
  DWORD2(v14) = *((_DWORD *)v6 + 22);
  v13 = *(unsigned int *)(v7 + 120);
  if ((_DWORD)v13 != -1)
    goto LABEL_13;
LABEL_14:
  *(_OWORD *)v7 = v15;
  *(_OWORD *)(v7 + 16) = v16;
  *(_OWORD *)(v7 + 32) = v17;
  *(_DWORD *)(v7 + 48) = v18;
  *(_BYTE *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 112) = 0;
  if (v8)
  {
    *(_QWORD *)(v7 + 56) = off_24C06E878;
    *(_QWORD *)(v7 + 64) = v2;
    *(_QWORD *)(v7 + 72) = v1;
    *(_OWORD *)(v7 + 80) = v14;
    *(_QWORD *)(v7 + 96) = v3;
    *(_DWORD *)(v7 + 104) = v4;
    *(_WORD *)(v7 + 108) = v5;
    *(_BYTE *)(v7 + 112) = 1;
  }
  *(_DWORD *)(v7 + 120) = 0;
}

void sub_207D55B3C(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  __int128 *v6;
  uint64_t v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;

  v7 = *a1;
  v6 = (__int128 *)a1[1];
  v15 = *v6;
  v16 = v6[1];
  v17 = v6[2];
  v18 = *((_DWORD *)v6 + 12);
  v8 = *((unsigned __int8 *)v6 + 112);
  if (!*((_BYTE *)v6 + 112))
    goto LABEL_12;
  v2 = *((_QWORD *)v6 + 8);
  v1 = (std::__shared_weak_count *)*((_QWORD *)v6 + 9);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v3 = *((_QWORD *)v6 + 12);
    v4 = *((_DWORD *)v6 + 26);
    v5 = *((_WORD *)v6 + 54);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_QWORD *)&v14 = *((_QWORD *)v6 + 10);
    DWORD2(v14) = *((_DWORD *)v6 + 22);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
      v13 = *(unsigned int *)(v7 + 120);
      if ((_DWORD)v13 == -1)
        goto LABEL_14;
LABEL_13:
      ((void (*)(char *, uint64_t))off_24C073660[v13])(&v19, v7);
      goto LABEL_14;
    }
LABEL_12:
    v13 = *(unsigned int *)(v7 + 120);
    if ((_DWORD)v13 == -1)
      goto LABEL_14;
    goto LABEL_13;
  }
  v3 = *((_QWORD *)v6 + 12);
  v4 = *((_DWORD *)v6 + 26);
  v5 = *((_WORD *)v6 + 54);
  *(_QWORD *)&v14 = *((_QWORD *)v6 + 10);
  DWORD2(v14) = *((_DWORD *)v6 + 22);
  v13 = *(unsigned int *)(v7 + 120);
  if ((_DWORD)v13 != -1)
    goto LABEL_13;
LABEL_14:
  *(_OWORD *)v7 = v15;
  *(_OWORD *)(v7 + 16) = v16;
  *(_OWORD *)(v7 + 32) = v17;
  *(_DWORD *)(v7 + 48) = v18;
  *(_BYTE *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 112) = 0;
  if (v8)
  {
    *(_QWORD *)(v7 + 56) = off_24C06E878;
    *(_QWORD *)(v7 + 64) = v2;
    *(_QWORD *)(v7 + 72) = v1;
    *(_OWORD *)(v7 + 80) = v14;
    *(_QWORD *)(v7 + 96) = v3;
    *(_DWORD *)(v7 + 104) = v4;
    *(_WORD *)(v7 + 108) = v5;
    *(_BYTE *)(v7 + 112) = 1;
  }
  *(_DWORD *)(v7 + 120) = 1;
}

char *sub_207D55CC8(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_207D1DCB8(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x68uLL);
  v10 = v9 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_207CA40D8(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a4;
    *((_QWORD *)v9 + 6) = *(_QWORD *)(a4 + 16);
  }
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(a4 + 56);
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  sub_207CC24B4(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_207D55DC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D55DD4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_207D0CD58();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_207CA3AB8();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t *sub_207D55F70(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  _QWORD v58[2];
  char v59;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v58, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x40uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  v59 = 0;
  *v26 = 0;
  v26[1] = v10;
  v27 = v26 + 2;
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_207CA40D8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[6] = 0;
  v26[7] = 0;
  v26[5] = &off_24C08A5D8;
  v59 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime > v11)
    {
LABEL_68:
      if (prime >> 61)
        sub_207CA3AB8();
      v38 = operator new(8 * prime);
      v39 = *(void **)a1;
      *(_QWORD *)a1 = v38;
      if (v39)
        operator delete(v39);
      v40 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      v41 = (_QWORD *)*v25;
      if (!*v25)
        goto LABEL_100;
      v42 = v41[1];
      v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v44 = v42 & v43;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v25;
        for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
        {
          v46 = i[1] & v43;
          if (v46 == v44)
          {
            v41 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
          {
            *v41 = *i;
            v47 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v47);
            **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v41;
            v41 = i;
            v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime)
        v42 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      v51 = (_QWORD *)*v41;
      if (!*v41)
      {
LABEL_100:
        v11 = prime;
        v54 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_101;
        goto LABEL_116;
      }
      while (1)
      {
        v53 = v51[1];
        if (v53 >= prime)
          v53 %= prime;
        if (v53 == v42)
          goto LABEL_94;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v53))
        {
          *v41 = *v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)(*(_QWORD *)a1 + v52);
          **(_QWORD **)(*(_QWORD *)a1 + v52) = v51;
          v51 = v41;
LABEL_94:
          v41 = v51;
          v51 = (_QWORD *)*v51;
          if (!v51)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v41;
          v41 = v51;
          v51 = (_QWORD *)*v51;
          v42 = v53;
          if (!v51)
            goto LABEL_100;
        }
      }
    }
    if (prime < v11)
    {
      v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (prime <= v48)
        prime = v48;
      if (prime < v11)
      {
        if (!prime)
        {
          v55 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v55)
            operator delete(v55);
          v11 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v54 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_101:
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
LABEL_117:
      *v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v58[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v25;
      if (*(_QWORD *)v58[0])
      {
        v56 = *(_QWORD *)(*(_QWORD *)v58[0] + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v56 >= v11)
            v56 %= v11;
        }
        else
        {
          v56 &= v11 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    v3 = v54 & v10;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v54 & v10));
    v33 = (_QWORD *)v58[0];
    if (v32)
      goto LABEL_57;
    goto LABEL_117;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v58[0];
  if (!v32)
    goto LABEL_117;
LABEL_57:
  *v33 = *v32;
  *v32 = v58[0];
LABEL_123:
  v14 = (uint64_t *)v58[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207D5655C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D56588((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207D56570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D56588((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D56588(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v2 + 40) = &off_24C08A5D8;
      v3 = *(std::__shared_weak_count **)(v2 + 56);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_207D5662C(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  _QWORD v58[2];
  char v59;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v58, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x30uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  v59 = 0;
  *v26 = 0;
  v26[1] = v10;
  v27 = v26 + 2;
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_207CA40D8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[5] = 0;
  v59 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime > v11)
    {
LABEL_68:
      if (prime >> 61)
        sub_207CA3AB8();
      v38 = operator new(8 * prime);
      v39 = *(void **)a1;
      *(_QWORD *)a1 = v38;
      if (v39)
        operator delete(v39);
      v40 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      v41 = (_QWORD *)*v25;
      if (!*v25)
        goto LABEL_100;
      v42 = v41[1];
      v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v44 = v42 & v43;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v25;
        for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
        {
          v46 = i[1] & v43;
          if (v46 == v44)
          {
            v41 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
          {
            *v41 = *i;
            v47 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v47);
            **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v41;
            v41 = i;
            v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime)
        v42 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      v51 = (_QWORD *)*v41;
      if (!*v41)
      {
LABEL_100:
        v11 = prime;
        v54 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_101;
        goto LABEL_116;
      }
      while (1)
      {
        v53 = v51[1];
        if (v53 >= prime)
          v53 %= prime;
        if (v53 == v42)
          goto LABEL_94;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v53))
        {
          *v41 = *v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)(*(_QWORD *)a1 + v52);
          **(_QWORD **)(*(_QWORD *)a1 + v52) = v51;
          v51 = v41;
LABEL_94:
          v41 = v51;
          v51 = (_QWORD *)*v51;
          if (!v51)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v41;
          v41 = v51;
          v51 = (_QWORD *)*v51;
          v42 = v53;
          if (!v51)
            goto LABEL_100;
        }
      }
    }
    if (prime < v11)
    {
      v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (prime <= v48)
        prime = v48;
      if (prime < v11)
      {
        if (!prime)
        {
          v55 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v55)
            operator delete(v55);
          v11 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v54 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_101:
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
LABEL_117:
      *v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v58[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v25;
      if (*(_QWORD *)v58[0])
      {
        v56 = *(_QWORD *)(*(_QWORD *)v58[0] + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v56 >= v11)
            v56 %= v11;
        }
        else
        {
          v56 &= v11 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    v3 = v54 & v10;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v54 & v10));
    v33 = (_QWORD *)v58[0];
    if (v32)
      goto LABEL_57;
    goto LABEL_117;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v58[0];
  if (!v32)
    goto LABEL_117;
LABEL_57:
  *v33 = *v32;
  *v32 = v58[0];
LABEL_123:
  v14 = (uint64_t *)v58[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207D56C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D56C38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207D56C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D56C38((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D56C38(uint64_t *a1)
{
  uint64_t v2;
  void (**v3)(void);
  void (*v4)(void);

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void (***)(void))(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
      {
        v4 = *v3;
        *v3 = 0;
        if (v4)
          v3[1]();
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD **sub_207D56CB8(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *v2 = off_24C073B78;
    sub_207D49CF4((uint64_t)(v2 + 8));
    v2[1] = &off_24C073BC8;
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_207D56D4C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C073BC8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D56DC0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207D56E28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  if (v4)
  {
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v14 & 0xFFFFFFu) <= 0x10000)
      v15 = 0;
    else
      v15 = v14;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    v3 = v24;
    *(_WORD *)(a2 + 44) = v16 & 0xFF00 | v15;
    if (!v24)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v19 = v25;
    if (!v25)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v19 = v25;
  if (!v25)
    return;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_207D57004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207D57058(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C073BC8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207D570CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_207D570D4(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_207D570DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_207D570F0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_207D5716C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t sub_207D57180(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

void sub_207D57188(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207D571F0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207D571F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_207D57208(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207D5721C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207D57234(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_207D572A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073B78;
  sub_207D49CF4((uint64_t)(a1 + 8));
  a1[1] = &off_24C073BC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207D57328(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073B78;
  sub_207D49CF4((uint64_t)(a1 + 8));
  a1[1] = &off_24C073BC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207D573AC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_207D573B4(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  BOOL v5;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C073B38, 0);
  if (result)
  {
    if ((void *)a1 == lpsrc)
    {
      return 1;
    }
    else if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(result + 48))
    {
      if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(result + 56)
        && (*(_DWORD *)(a1 + 32) == *(_DWORD *)(result + 32)
          ? (v5 = *(_DWORD *)(a1 + 36) == *(_DWORD *)(result + 36))
          : (v5 = 0),
            v5))
      {
        return *(_DWORD *)(a1 + 40) == *(_DWORD *)(result + 40);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_207D57470(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = sub_207D58DB0();
  sub_207D57524(a1);
  sub_207D49528(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_207D57508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D57524(uint64_t a1)
{
  unsigned __int8 v2;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BB40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BB40))
  {
    v4 = sub_207D5827C();
    size = v4->__r_.__value_.__l.__size_;
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    }
    else
    {
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
      v6 = size;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_25452BB28, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25452BB38 = *(_QWORD *)(v9 - 8);
      xmmword_25452BB28 = v7;
    }
    sub_207C99DE0(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BB28, &dword_207C77000);
    __cxa_guard_release(&qword_25452BB40);
  }
  return sub_207D58FAC(&xmmword_25452BB28, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_207D57634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  __cxa_guard_abort(&qword_25452BB40);
  _Unwind_Resume(a1);
}

void sub_207D57654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BB40);
  _Unwind_Resume(a1);
}

void sub_207D5766C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 1;
}

void sub_207D57698(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 1, a2);
}

_QWORD *sub_207D576D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073B78;
  sub_207D49CF4((uint64_t)(a1 + 8));
  a1[1] = &off_24C073BC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207D57754(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C073B78;
  sub_207D49CF4((uint64_t)(a1 + 8));
  a1[1] = &off_24C073BC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207D577D8(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207D5884C();
  return sub_207D5792C(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 64, (uint64_t)"}");
}

uint64_t sub_207D57830(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207D57B58((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0737B0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C073768[v3])(v5, v2);
  return result;
}

void sub_207D578C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C073768[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207D57900(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207D5792C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207D57B58((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073780[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073780[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0737B0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C073768[v16])(&p_dst, &__dst);
  return result;
}

void sub_207D57AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D57AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D57AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D57B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D57B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D57B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D57B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D57B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_207D57DC4((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C073798[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207D57D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207D57DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D57DC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  uint64_t size;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *p_p;
  std::string::size_type v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  std::string::size_type v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t result;
  std::string __p;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  __int16 v50;
  uint64_t v51;
  _QWORD *v52;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_19;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_19;
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(_BYTE *)(a2 + 53))
          goto LABEL_17;
        goto LABEL_19;
      }
    }
  }
  else if (!v4)
  {
    goto LABEL_19;
  }
  if (*(_BYTE *)(a2 + 53))
  {
LABEL_17:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v51, v4, 0);
    goto LABEL_20;
  }
LABEL_19:
  v51 = 0;
LABEL_20:
  v13 = sub_207D5827C();
  v14 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  if (v14 >= 0)
    v15 = (uint64_t)v13;
  else
    v15 = v13->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  else
    size = v13->__r_.__value_.__l.__size_;
  v17 = sub_207CBAB98(a1, v15, size);
  sub_207CBAB98(v17, (uint64_t)": ", 2);
  v18 = *(unsigned int *)(a2 + 48);
  if (v18 >= 0x29)
  {
    sub_207CBAB98(a1, (uint64_t)"Invalid Format (", 16);
    v20 = (_QWORD *)std::ostream::operator<<();
    v19 = sub_207CBAB98(v20, (uint64_t)")", 1);
  }
  else
  {
    v19 = sub_207CBAB98(a1, (uint64_t)(&off_24C08A7B8)[2 * v18], (uint64_t)(&off_24C08A7B8)[2 * v18 + 1]);
  }
  sub_207CBAB98(v19, (uint64_t)", ", 2);
  sub_207D58538((unsigned int *)(a2 + 24), (unsigned int *)(a2 + 32), "x", 1uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v22 = __p.__r_.__value_.__l.__size_;
  v23 = sub_207CBAB98(a1, (uint64_t)p_p, v22);
  sub_207CBAB98(v23, (uint64_t)" ", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_207CBAB98(a1, (uint64_t)"[row byte stride ", 17);
  v24 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v24, (uint64_t)", ", 2);
  if (*(_BYTE *)(a2 + 52) && *(_QWORD *)(a2 + 40))
  {
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(std::__shared_weak_count **)(a2 + 16);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v25 + 88))(v25, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
  }
  v30 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v30, (uint64_t)"]", 1);
  sub_207CBAB98(a1, (uint64_t)", values = {\n", 13);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E878;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(std::__shared_weak_count **)(a2 + 16);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = *(_QWORD *)(a2 + 40);
    v36 = *(_DWORD *)(a2 + 48);
    v37 = *(_WORD *)(a2 + 52);
    do
      v38 = __ldxr(v33);
    while (__stxr(v38 + 1, v33));
  }
  else
  {
    v35 = *(_QWORD *)(a2 + 40);
    v36 = *(_DWORD *)(a2 + 48);
    v37 = *(_WORD *)(a2 + 52);
  }
  __p.__r_.__value_.__l.__size_ = v31;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
  v46 = *(_QWORD *)(a2 + 24);
  v47 = *(_DWORD *)(a2 + 32);
  v48 = v35;
  v49 = v36;
  v50 = v37;
  if (v32)
  {
    v39 = (unint64_t *)&v32->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v52 = a1;
  sub_2081C03D4(v49, &v52, &__p);
  v41 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v42 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_207CBAB98(a1, (uint64_t)"\n}", 2);
  result = v51;
  v51 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_207D581C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21;

  sub_207CA2C88((uint64_t)&__p);
  v21 = a20;
  a20 = 0;
  if (!v21)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

std::string *sub_207D5827C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452BA20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BA20))
  {
    sub_207C96EE8(v7, "ConstSharedImage");
    v2 = sub_207CAC138();
    sub_207D58480((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207D58480((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452BA08, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BA08, &dword_207C77000);
          __cxa_guard_release(&qword_25452BA20);
          return &stru_25452BA08;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452BA08;
}

void sub_207D583CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452BA20);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452BA20);
  _Unwind_Resume(a1);
}

void sub_207D58480(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207D5851C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207D58538(unsigned int *a1@<X0>, unsigned int *a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int64_t v13;
  unsigned int *v14;
  std::string::size_type v15;
  const std::string::value_type *p_p;
  std::string::size_type v17;
  unsigned int *i;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void *__p;
  std::string::size_type v23;
  unsigned __int8 v24;

  v9 = a1 - a2;
  if (v9 >= -1)
    v10 = -1;
  else
    v10 = a1 - a2;
  v11 = a4 * ~v10;
  v12 = 0;
  v13 = (char *)a1 - (char *)a2;
  if (a1 != a2)
  {
    v14 = a1;
    do
    {
      sub_207D58724(v14);
      if ((v24 & 0x80u) == 0)
        v15 = v24;
      else
        v15 = v23;
      if ((char)v24 < 0)
        operator delete(__p);
      v12 += v15;
      ++v14;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v12 + v11);
  if (v13 < 0)
  {
    sub_207D58724(a1);
    if ((v24 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v24 & 0x80u) == 0)
      v17 = v24;
    else
      v17 = v23;
    std::string::append(a5, p_p, v17);
    if ((char)v24 < 0)
    {
      operator delete(__p);
      if ((unint64_t)(v9 + 1) < 2)
        return;
    }
    else if ((unint64_t)(v9 + 1) < 2)
    {
      return;
    }
    for (i = a1 + 1; i != a2; ++i)
    {
      std::string::append(a5, a3, a4);
      sub_207D58724(i);
      if ((v24 & 0x80u) == 0)
        v19 = (const std::string::value_type *)&__p;
      else
        v19 = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v20 = v24;
      else
        v20 = v23;
      std::string::append(a5, v19, v20);
      if ((char)v24 < 0)
        operator delete(__p);
    }
  }
}

void sub_207D586E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D58724(unsigned int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_207CAB414)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0737B0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C073768[v3])(v5, v2);
  return result;
}

void sub_207D58810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D58828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

__int128 *sub_207D5884C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BA40);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BA40))
    return &xmmword_25452BA28;
  v2 = sub_207D58928();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452BA28, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452BA38 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452BA28 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BA28, &dword_207C77000);
  __cxa_guard_release(&qword_25452BA40);
  return &xmmword_25452BA28;
}

void sub_207D58910(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BA40);
  _Unwind_Resume(a1);
}

std::string *sub_207D58928()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BA60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BA60))
    return &stru_25452BA48;
  sub_207D58BCC((uint64_t)__p);
  sub_207D58A18((char *)__p, &stru_25452BA48);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BA48, &dword_207C77000);
  __cxa_guard_release(&qword_25452BA60);
  return &stru_25452BA48;
}

void sub_207D589D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BA60);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BA60);
  _Unwind_Resume(a1);
}

void sub_207D58A18(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  std::string::size_type v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207D5827C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207D58B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207D58BCC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BA80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BA80))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::img::SharedImage<cv3d::kit::img::Format::Dynamic, cv3d::kit::img::DynamicBuffer, cv3d::kit::img::Mutability::Const>>]", qword_25452BA68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BA68, &dword_207C77000);
    __cxa_guard_release(&qword_25452BA80);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452BAA0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452BAA0))
  {
    v5 = sub_207D49434(qword_25452BA68, "<", 0);
    sub_207D49330(qword_25452BA68, 0, v5, qword_25452BA88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BA88, &dword_207C77000);
    __cxa_guard_release(&qword_25452BAA0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452BAC0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452BAC0))
  {
    sub_208215C6C((uint64_t)qword_25452BA88, (uint64_t)&xmmword_25452BAA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BAA8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BAC0);
  }
  if (byte_25452BABF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452BAA8, *((unint64_t *)&xmmword_25452BAA8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452BAA8;
    *(_QWORD *)(a1 + 16) = unk_25452BAB8;
  }
}

void sub_207D58D68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BAC0);
  _Unwind_Resume(a1);
}

void sub_207D58D80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BAA0);
  _Unwind_Resume(a1);
}

void sub_207D58D98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BA80);
  _Unwind_Resume(a1);
}

__int128 *sub_207D58DB0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BAE0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BAE0))
    return &xmmword_25452BAC8;
  v2 = (char *)sub_207D58E8C();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452BAC8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452BAD8 = *((_QWORD *)v2 + 2);
    xmmword_25452BAC8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BAC8, &dword_207C77000);
  __cxa_guard_release(&qword_25452BAE0);
  return &xmmword_25452BAC8;
}

void sub_207D58E74(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BAE0);
  _Unwind_Resume(a1);
}

void *sub_207D58E8C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BB00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BB00))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ImageData]", qword_25452BAE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BAE8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BB00);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452BB20);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BB20))
    return &unk_25452BB08;
  sub_208215C6C((uint64_t)qword_25452BAE8, (uint64_t)&unk_25452BB08);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452BB08, &dword_207C77000);
  __cxa_guard_release(&qword_25452BB20);
  return &unk_25452BB08;
}

void sub_207D58F7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BB20);
  _Unwind_Resume(a1);
}

void sub_207D58F94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BB00);
  _Unwind_Resume(a1);
}

uint64_t sub_207D58FAC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207D57B58((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C073780[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0737B0[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C073768[v11])(&p_dst, &__dst);
  return result;
}

void sub_207D590EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D59104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D59118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D5912C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D59140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D59154(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207D591BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v4 + 32))(&v31, v4);
    v13 = (*((uint64_t (**)(uint64_t (**)()))*v31 + 6))(v31);
    v14 = v31;
    if (v31)
    {
      v15 = operator new(0x20uLL);
      *v15 = &off_24C073880;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = v14;
    }
    else
    {
      v15 = 0;
    }
    v21 = *(_QWORD *)(a1 + 32);
    v22 = 4 * *(_DWORD *)(a1 + 44);
    v23 = *(_WORD *)(a1 + 48);
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v21;
    *(_DWORD *)(a2 + 32) = v22;
    *(_QWORD *)(a2 + 40) = v13;
    *(_DWORD *)(a2 + 48) = 4;
    *(_WORD *)(a2 + 52) = v23;
  }
  else
  {
    v31 = &off_24C0738D0;
    sub_207D5956C(a1, (uint64_t)&v32);
    v16 = v32;
    v17 = v33;
    if (v33)
    {
      v18 = (unint64_t *)&v33->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = v33;
    }
    else
    {
      v20 = 0;
    }
    v24 = 4 * v38;
    if (v35)
      v25 = (4 * v34) | 0x100000000;
    else
      v25 = 0;
    v26 = v37;
    v27 = v36;
    v28 = v39;
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v17;
    *(_QWORD *)(a2 + 16) = v25;
    *(_QWORD *)(a2 + 24) = v26;
    *(_DWORD *)(a2 + 32) = v24;
    *(_QWORD *)(a2 + 40) = v27;
    *(_DWORD *)(a2 + 48) = 4;
    *(_WORD *)(a2 + 52) = v28;
    if (v20)
    {
      v29 = (unint64_t *)&v20->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_207D593D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D593F8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D59460@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 76);
  return result;
}

void sub_207D59478(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207D594E0()
{
  return 4;
}

uint64_t sub_207D594E8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_207D594F0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_207D5956C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  __int16 v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  void *__p;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v30, v4);
    v13 = v30;
    if (v30)
    {
      v14 = (std::__shared_weak_count *)operator new(0x20uLL);
      v14->__shared_owners_ = 0;
      v15 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073880;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v13;
      v29 = v14;
      v30 = 0;
      v16 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v16 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(void **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count + 8))(&__p, v13, 4);
    v20 = __p;
    v21 = *((_QWORD *)__p + 2);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 40) = v21;
    __p = 0;
    operator delete(v20);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a2 + 72) = v16;
    if (v29)
    {
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v24 = v30;
    v30 = 0;
    if (v24)
      (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  }
  else
  {
    v18 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v19 = *(_QWORD *)(a1 + 24) == 0;
    else
      v19 = 1;
    if (v19)
    {
      sub_207D597F4(v18, (_QWORD *)a2);
    }
    else
    {
      v25 = *(std::__shared_weak_count **)(a1 + 16);
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      __break(1u);
    }
  }
}

void sub_207D597B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_207D597F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  __int16 v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *__p;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t (**v22)();

  v16 = *(_QWORD *)(a1 + 8);
  v22 = &off_24C0739C8;
  sub_20819ED88(&v16, (uint64_t)&__p);
  v4 = (char *)operator new(0x50uLL);
  *(_QWORD *)v4 = &off_24C0737D8;
  *(_OWORD *)(v4 + 8) = v19[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v19 + 12);
  *(_OWORD *)(v4 + 40) = v19[2];
  *((_QWORD *)v4 + 7) = v20;
  *((_OWORD *)v4 + 4) = v21;
  v17 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073A00;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v17 = 0;
  *a2 = v4;
  a2[1] = v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20818D1F4((uint64_t)v4, 4, &__p);
  v8 = __p;
  v9 = *((_QWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  a2[5] = v9;
  __p = 0;
  operator delete(v8);
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v11 = v10;
  if ((v10 & 0xFFFFFF) <= 0x10000)
    v11 = 0;
  v12 = v10 & 0xFF00;
  if ((v10 & 0xFF0000) == 0)
    v12 = 0;
  *((_WORD *)a2 + 36) = v12 & 0xFF00 | v11;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_207D5A1F4(a1, (uint64_t)(a2 + 3));
  v14 = v17;
  if (v17)
  {
    v15 = (void *)*((_QWORD *)v17 + 6);
    if (v15)
      free(v15);
    operator delete(v14);
  }
}

void sub_207D599A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_207C99D78(v5);
  sub_207D59A20((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_207D599C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va);
  sub_207D59A20((_QWORD **)va1);
  _Unwind_Resume(a1);
}

void sub_207D599F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207D59A20((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_207D59A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20)
    free(a20);
  _Unwind_Resume(exception_object);
}

_QWORD **sub_207D59A20(_QWORD **a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[6];
    if (v3)
      free(v3);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207D59A68()
{
  return 4;
}

void sub_207D59A78(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_207D59A80()
{
  return 0;
}

__int128 *sub_207D59A88()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B940);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452B940))
  {
    v2 = sub_207D59B60();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452B928, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452B938 = *((_QWORD *)v2 + 2);
      xmmword_25452B928 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B928, &dword_207C77000);
    __cxa_guard_release(&qword_25452B940);
  }
  if (byte_25452B93F >= 0)
    return &xmmword_25452B928;
  else
    return (__int128 *)xmmword_25452B928;
}

void sub_207D59B48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B940);
  _Unwind_Resume(a1);
}

__int128 *sub_207D59B60()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B960);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B960))
    return &xmmword_25452B948;
  v2 = sub_207D59C3C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452B948, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452B958 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452B948 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B948, &dword_207C77000);
  __cxa_guard_release(&qword_25452B960);
  return &xmmword_25452B948;
}

void sub_207D59C24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B960);
  _Unwind_Resume(a1);
}

std::string *sub_207D59C3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452B980);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452B980))
    return &stru_25452B968;
  sub_207D59E54((uint64_t)__p);
  sub_207D59D2C((char *)__p, &stru_25452B968);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B968, &dword_207C77000);
  __cxa_guard_release(&qword_25452B980);
  return &stru_25452B968;
}

void sub_207D59CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452B980);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452B980);
  _Unwind_Resume(a1);
}

void sub_207D59D2C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207D5A038();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_207D59E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207D59E54(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452B9A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452B9A0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray32f>]", qword_25452B988);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B988, &dword_207C77000);
    __cxa_guard_release(&qword_25452B9A0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452B9C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452B9C0))
  {
    v5 = sub_207D49434(qword_25452B988, "<", 0);
    sub_207D49330(qword_25452B988, 0, v5, qword_25452B9A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452B9A8, &dword_207C77000);
    __cxa_guard_release(&qword_25452B9C0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452B9E0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452B9E0))
  {
    sub_208215C6C((uint64_t)qword_25452B9A8, (uint64_t)&xmmword_25452B9C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452B9C8, &dword_207C77000);
    __cxa_guard_release(&qword_25452B9E0);
  }
  if (byte_25452B9DF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452B9C8, *((unint64_t *)&xmmword_25452B9C8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452B9C8;
    *(_QWORD *)(a1 + 16) = unk_25452B9D8;
  }
}

void sub_207D59FF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B9E0);
  _Unwind_Resume(a1);
}

void sub_207D5A008(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B9C0);
  _Unwind_Resume(a1);
}

void sub_207D5A020(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452B9A0);
  _Unwind_Resume(a1);
}

std::string *sub_207D5A038()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BA00);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BA00))
    return &stru_25452B9E8;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray32f]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452B9E8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452B9E8, &dword_207C77000);
  __cxa_guard_release(&qword_25452BA00);
  return &stru_25452B9E8;
}

void sub_207D5A0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BA00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BA00);
  _Unwind_Resume(a1);
}

void sub_207D5A134(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D5A148(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[6];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_207D5A184(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

float sub_207D5A1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  float result;
  uint64_t v28;
  char *v29;
  BOOL v30;
  uint64_t v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v23 = *(_DWORD *)(a1 + 20);
    v24 = *(_DWORD *)(a1 + 8);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      v28 = (*(_DWORD *)(a1 + 12) * v23);
      v29 = *(char **)a1;
      if ((_DWORD)v28)
        v30 = v29 == 0;
      else
        v30 = 0;
      if (v30)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
      }
      else if (!(_DWORD)v28)
      {
        return result;
      }
      memmove(*(void **)a2, v29, 4 * v28);
      return result;
    }
    v31 = *(unsigned int *)(a1 + 8);
    if (v24)
      v26 = *(_DWORD *)(a1 + 12) == 0;
    else
      v26 = 1;
    if (!v26)
      sub_207D5A3D0(&v31, (char **)a1, (char **)a2);
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)a1;
      v11 = *(_DWORD **)a2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 20);
        v14 = *(unsigned int *)(a1 + 20);
        if (!v9)
        {
          do
          {
            *v11 = *(_DWORD *)v10;
            v10 += 4 * v14;
            v11 += v13;
            --v12;
          }
          while (v12);
LABEL_38:
          result = *(float *)v10;
          *v11 = *(_DWORD *)v10;
          return result;
        }
        v15 = 0;
        v16 = 4 * v14;
        v17 = 4 * v13;
        do
        {
          v18 = v11;
          v19 = v10;
          v20 = v9;
          do
          {
            *v18 = *(_DWORD *)v19;
            v19 += 4 * v3;
            v18 += v4;
            --v20;
          }
          while (v20);
          *v18 = *(_DWORD *)v19;
          v10 += v16;
          v11 = (_DWORD *)((char *)v11 + v17);
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        v21 = 4 * v3;
        v22 = 4 * v4;
        do
        {
          *v11 = *(_DWORD *)v10;
          v10 += v21;
          v11 = (_DWORD *)((char *)v11 + v22);
          --v9;
        }
        while (v9);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_207D5A3D0(uint64_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 4 * *((unsigned int *)a2 + 5);
      v10 = 4 * *((unsigned int *)a3 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 4 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 4 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 4 * v12);
  }
  return result;
}

uint64_t sub_207D5A524@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

void sub_207D5A53C(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_207D5A740(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_207D5A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D5A644(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207D5A6AC()
{
  return 4;
}

uint64_t sub_207D5A6B4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207D5A6BC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_207D5A740(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_207D5A84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_207D5A890(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_207D5AABC(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_207D5ACE8(uint64_t a1@<X0>, _QWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v16;
  char v17;
  int v18;
  BOOL v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  unint64_t v47;
  unsigned int v48;
  float32x2_t v49;
  float v50;
  int *v54;
  char *v55;
  float *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  float *v71;
  float *v72;
  float *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  int v78;
  int *v79;
  char *v80;
  int *v81;
  int v82;
  int v83;
  int *v84;
  float v85;
  float v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  float v92;
  int v93;
  int v94;
  int v95;
  float v96;
  int v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float *v103;
  float v104;
  int v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float *v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  float v122;
  int v123;
  int v124;
  float v125;
  int v126;
  int v127;
  int v128;
  __int32 v129;
  int *v130;
  float32x2_t v131;
  size_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  float v137;
  float *v138;
  int v139;
  uint64_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  __int128 v169;
  char *v170;
  char *v171;
  char **v172;
  float *v173;
  char *v174;
  char *i;
  __int128 v176;
  __int128 *v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  __int128 v184;
  uint64_t v185;
  char *v186;
  __int128 v187;
  char *v188;
  char *v189;
  char *v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  void *v196;
  char *v197;
  char *v198;
  void *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  _BOOL4 v208;
  int v209;
  int v210;
  char **v211;
  unsigned int v212;
  char *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  int v217;
  unint64_t v218;
  __int32 v219;
  float32x2_t v220;
  int v221;
  int *v222;
  _BYTE v223[12];
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  unint64_t v228;
  float *__p;
  uint64_t __src;
  float __srca;
  int v232;
  char *v233;
  float v234;
  void *v235;
  char *v236;
  _DWORD *v237;
  int v238;
  unint64_t v239;
  int v240;
  __int128 v241;
  __int128 v242;
  int v243;
  uint64_t (**v244)();
  unsigned __int8 v245;
  char *v246;
  std::__shared_weak_count *v247;
  void *v248;
  char *v249;
  char v250;
  void *v251;
  char *v252;
  _BYTE v253[12];
  int v254;
  char v255;
  char v256;
  void *memptr[3];
  unint64_t v258;
  unint64_t v259;
  int v260;
  uint64_t v261;

  v261 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v207 = a1;
  if (*(_BYTE *)(a1 + 312))
  {
    v6 = a1;
    v7 = *(_QWORD *)(a1 + 880);
    memptr[0] = &off_24C0848B8;
    if (*(char *)(v6 + 311) < 0)
    {
      sub_207CA40D8(&memptr[1], *(void **)(v6 + 288), *(_QWORD *)(v6 + 296));
    }
    else
    {
      *(_OWORD *)&memptr[1] = *(_OWORD *)(v6 + 288);
      v258 = *(_QWORD *)(v6 + 304);
    }
    (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, void **))(**(_QWORD **)(v7 + 16) + 48))(&v244, *(_QWORD *)(v7 + 16), memptr);
    memptr[0] = &off_24C0848B8;
    a1 = v207;
    if (SHIBYTE(v258) < 0)
      operator delete(memptr[1]);
    v8 = v245;
    if (v245)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v194 = v246;
        if (v246[23] < 0)
          v194 = *(char **)v246;
        LODWORD(memptr[0]) = 136315138;
        *(void **)((char *)memptr + 4) = v194;
        _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: EffenterNet configuration failed with error: %s", (uint8_t *)memptr, 0xCu);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    v244 = off_24C06E9E8;
    v9 = v247;
    if (!v247)
      goto LABEL_14;
    p_shared_owners = (unint64_t *)&v247->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v8)
        return;
    }
    else
    {
LABEL_14:
      if (v8)
        return;
    }
  }
  sub_2080BA4D8(*(_QWORD *)(*(_QWORD *)(a1 + 880) + 16), a2, 0, 0, (uint64_t)&v244);
  kdebug_trace();
  v241 = 0u;
  v242 = 0u;
  v243 = 733236936;
  kdebug_trace();
  if ((!v250 || v248 == v249) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v195 = v246;
    if (v246[23] < 0)
      v195 = *(char **)v246;
    LODWORD(memptr[0]) = 136315138;
    *(void **)((char *)memptr + 4) = v195;
    _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: Error running EffenterNet: %s", (uint8_t *)memptr, 0xCu);
  }
  v206 = v248;
  sub_207CB36E8((uint64_t)v248, (uint64_t)memptr);
  v12 = *(uint64_t *)((char *)&memptr[1] + 4);
  v13 = v259;
  v14 = v260;
  v216 = (char *)memptr[0];
  if (HIDWORD(*(unint64_t *)((char *)&memptr[1] + 4)))
    _ZF = HIDWORD(memptr[1]) == 0;
  else
    _ZF = 1;
  v16 = _ZF || HIDWORD(memptr[2]) == 0;
  v17 = v16;
  v214 = HIDWORD(memptr[2]);
  if (v16)
    v18 = 0;
  else
    v18 = HIDWORD(memptr[2]);
  if (v18 * v260 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v211 = a3;
  if ((v17 & 1) == 0)
  {
    if ((_DWORD)v12)
      v43 = v12;
    else
      v43 = 0;
    v44 = (HIDWORD(v43) - 1);
    v45 = v14 == -1 && v12 != 0;
    v226 = (v43 - 1);
    _CF = v44 >= 2 && (v43 - 1) >= 2;
    v47 = HIDWORD(v13);
    v210 = HIDWORD(v43) * HIDWORD(v13);
    if (!_CF)
    {
      if (v45)
      {
        if (v210 == -1)
        {
          while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
            {
              goto LABEL_305;
            }
            if (!--v214)
              goto LABEL_33;
          }
        }
        else
        {
          while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            if (!--v214)
              goto LABEL_33;
          }
        }
LABEL_304:
        abort();
      }
      if (v210 == -1)
      {
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          if (!--v214)
            goto LABEL_33;
        }
LABEL_305:
        abort();
      }
      goto LABEL_33;
    }
    v48 = 0;
    v215 = 0;
    v227 = 0;
    v228 = HIDWORD(v13);
    v213 = 0;
    *(_DWORD *)&v223[8] = 0;
    v49.f32[0] = (float)v43;
    v50 = sqrtf(NAN);
    v49.f32[1] = (float)HIDWORD(v43);
    v220 = v49;
    __asm { FMOV            V12.2S, #3.0 }
    v208 = v45;
    v209 = v14;
    v217 = v13;
    v218 = (HIDWORD(v43) - 1);
    *(_QWORD *)v223 = (v43 - 2);
    v221 = HIDWORD(v43) - 2;
LABEL_94:
    if (v45
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      goto LABEL_304;
    }
    if (v210 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      goto LABEL_305;
    }
    __p = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v212 = v48;
    v224 = 4 * v48;
    v57 = &v216[4 * v14 * *(_DWORD *)&v223[4]];
    v58 = &v57[4 * v47];
    v59 = 1;
    v60 = v57;
    v61 = v226;
LABEL_100:
    v62 = v58;
    v58 += 4 * v47;
    v63 = v59 << 32;
    v64 = 1;
    while (1)
    {
      v65 = *(float *)&v62[4 * v64];
      if (v65 < 0.5)
        goto LABEL_102;
      v66 = &v62[4 * v64];
      if (v65 <= *((float *)v66 - 1)
        || v65 <= *((float *)v66 + 1)
        || v65 <= *(float *)&v60[4 * v64]
        || v65 <= *(float *)&v58[4 * v64])
      {
        goto LABEL_102;
      }
      v67 = v64 | v63;
      if (v56 >= (float *)v55)
        break;
      *(_QWORD *)v56 = v67;
      v56[2] = v65;
      v54 = (int *)(v56 + 3);
      v56 += 3;
      v61 = v226;
LABEL_102:
      if (++v64 == v61)
      {
        ++v59;
        v60 = v62;
        if (v59 != v44)
          goto LABEL_100;
        v251 = 0;
        v252 = 0;
        *(_QWORD *)v253 = 0;
        if (v54 == (int *)__p)
        {
          v80 = 0;
          v171 = 0;
          v172 = v211;
          v173 = __p;
          if (__p)
            goto LABEL_210;
        }
        else
        {
          v222 = v54;
          v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)__p) >> 2);
          v78 = *(_DWORD *)v223;
          if (v77 > 0x492492492492492)
            sub_207D0CD58();
          v251 = operator new(0x5555555555555568 * (((char *)v54 - (char *)__p) >> 2));
          v252 = (char *)v251;
          *(_QWORD *)v253 = (char *)v251 + 56 * v77;
          v225 = &v216[v224];
          v79 = (int *)__p;
          do
          {
            while (1)
            {
              v81 = v79;
              v82 = *v79;
              v83 = v81[1];
              v84 = v81;
              v85 = *((float *)v81 + 2);
              v86 = v85 * 0.5;
              v87 = v83 * v47;
              v88 = v82 >= 1 ? 1 : v82;
              v89 = v88 - 1;
              v90 = v87 + v13 * (v82 - 1);
              v91 = v82;
              while (v91 >= 2)
              {
                v92 = *(float *)&v57[4 * v90];
                --v91;
                v90 -= v13;
                if (v92 <= v86)
                  goto LABEL_136;
              }
              v91 = v89;
LABEL_136:
              v93 = v78 <= v82 + 1 ? v82 + 1 : v78;
              v94 = v87 + v13 * (v82 + 1);
              v95 = v82;
              while (++v95 < v78)
              {
                v96 = *(float *)&v57[4 * v94];
                v94 += v13;
                if (v96 <= v86)
                {
                  v97 = v95 - v91;
                  v98 = v95 - v91 + 1;
                  goto LABEL_147;
                }
              }
              v97 = v93 - v91;
              v98 = v93 - v91 + 1;
              v99 = v93 - v91 == -1;
              if (!v216 && !v99)
              {
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  abort();
                }
                v85 = *((float *)v84 + 2);
                v47 = v228;
              }
LABEL_147:
              if (v97 < 0)
              {
                v234 = NAN;
                v116 = NAN;
              }
              else
              {
                v100 = (v87 + v91 * v13);
                v101 = v98;
                v102 = 4 * v100;
                v103 = (float *)&v225[4 * v100];
                v104 = 0.0;
                v105 = v91;
                v106 = v101;
                v107 = 0.0;
                do
                {
                  v108 = *v103++;
                  v104 = v104 + v108;
                  v107 = v107 + (float)(v108 * (float)v105++);
                  --v106;
                }
                while (v106);
                v234 = v107 / v104;
                v109 = logf(v85);
                v110 = (float *)&v225[v102];
                v111 = 0.0;
                v112 = 0.0;
                do
                {
                  v113 = *v110++;
                  v114 = logf(v113);
                  v115 = (float)((float)v91 - v234) * (float)((float)v91 - v234);
                  v112 = v112 - (float)(v115 * (float)((float)(v114 - v109) + (float)(v114 - v109)));
                  v111 = v111 + (float)(v115 * v115);
                  ++v91;
                  --v101;
                }
                while (v101);
                v116 = v111 / v112;
              }
              v117 = v82 * v13;
              v118 = v83 >= 1 ? 1 : v83;
              v119 = v118 - 1;
              v120 = v117 + v47 * (v83 - 1);
              v121 = v83;
              while (v121 >= 2)
              {
                v122 = *(float *)&v57[4 * v120];
                --v121;
                v120 -= v47;
                if (v122 <= v86)
                  goto LABEL_162;
              }
              v121 = v119;
LABEL_162:
              v123 = v221 <= v83 + 1 ? v83 + 1 : v221;
              v124 = v117 + v47 * (v83 + 1);
              do
              {
                if (++v83 >= v221)
                {
                  v126 = v123 - v121;
                  memset(memptr, 0, sizeof(memptr));
                  v127 = v123 - v121 + 1;
                  if (v126 == -1)
                    goto LABEL_169;
                  goto LABEL_171;
                }
                v125 = *(float *)&v57[4 * v124];
                v124 += v47;
              }
              while (v125 > v86);
              v126 = v83 - v121;
              memset(memptr, 0, sizeof(memptr));
              v127 = v83 - v121 + 1;
              if (v83 - v121 == -1)
              {
LABEL_169:
                v128 = 2143289344;
                v129 = LODWORD(v50);
                v130 = v84;
                v131.f32[0] = v234;
                goto LABEL_182;
              }
LABEL_171:
              if (v126 <= -2)
                sub_207D0CD58();
              LODWORD(v135) = v127;
              v132 = 4 * v127;
              v133 = (char *)operator new(v132);
              bzero(v133, v132);
              v134 = 0;
              v135 = v135;
              v47 = v228;
              v136 = v117 + v228 * v121;
              do
              {
                *(_DWORD *)&v133[v134] = *(_DWORD *)&v57[4 * v136];
                v134 += 4;
                v136 += v228;
              }
              while (4 * v135 != v134);
              if (v126 < 0)
              {
                __srca = NAN;
                v150 = v50;
              }
              else
              {
                v137 = 0.0;
                v138 = (float *)v133;
                v139 = v121;
                v140 = v135;
                v141 = 0.0;
                do
                {
                  v142 = *v138++;
                  v137 = v137 + v142;
                  v141 = v141 + (float)(v142 * (float)v139++);
                  --v140;
                }
                while (v140);
                __srca = v141 / v137;
                v143 = logf(v85);
                v144 = 0.0;
                v145 = (float *)v133;
                v146 = 0.0;
                do
                {
                  v147 = *v145++;
                  v148 = logf(v147);
                  v149 = (float)((float)v121 - __srca) * (float)((float)v121 - __srca);
                  v146 = v146 - (float)(v149 * (float)((float)(v148 - v143) + (float)(v148 - v143)));
                  v144 = v144 + (float)(v149 * v149);
                  ++v121;
                  --v135;
                }
                while (v135);
                v150 = sqrtf(v144 / v146);
              }
              v219 = LODWORD(v150);
              operator delete(v133);
              v130 = v84;
              v128 = LODWORD(__srca);
              v131.f32[0] = v234;
              v129 = v219;
LABEL_182:
              v131.i32[1] = v128;
              v151.f32[0] = sqrtf(v116);
              v151.i32[1] = v129;
              v152 = vmul_f32(v151, _D12);
              v153 = vdiv_f32(vcvt_f32_u32(vcvt_u32_f32(vsub_f32(v131, v152))), v220);
              v154 = vdiv_f32(vcvt_f32_u32(vcvt_u32_f32(vadd_f32(v131, v152))), v220);
              v155 = (unint64_t)v153;
              v156 = (unint64_t)v154;
              if (v153.f32[0] > v154.f32[0])
              {
                v156 = *(_QWORD *)&v154 & 0xFFFFFFFF00000000 | v153.u32[0];
                v155 = *(_QWORD *)&v153 & 0xFFFFFFFF00000000 | v154.u32[0];
              }
              v157 = v153.f32[1] > v154.f32[1] ? v156 | ((unint64_t)v153.u32[1] << 32) : v156;
              v158 = v153.f32[1] > v154.f32[1] ? v155 | ((unint64_t)v154.u32[1] << 32) : v155;
              v159 = v130[2];
              v160 = v252;
              if ((unint64_t)v252 >= *(_QWORD *)v253)
                break;
              *(_DWORD *)v252 = v159;
              *(_QWORD *)(v160 + 4) = v158;
              *(_QWORD *)(v160 + 12) = v157;
              *((_QWORD *)v160 + 4) = 0;
              *((_QWORD *)v160 + 5) = 0;
              *((_QWORD *)v160 + 3) = 0;
              v80 = v160 + 56;
              *((_DWORD *)v160 + 12) = 0;
              v78 = *(_DWORD *)v223;
              v252 = v160 + 56;
              v79 = v130 + 3;
              if (v79 == v222)
                goto LABEL_209;
            }
            v161 = (char *)v251;
            v162 = 0x6DB6DB6DB6DB6DB7 * ((v252 - (_BYTE *)v251) >> 3);
            v163 = v162 + 1;
            if ((unint64_t)(v162 + 1) > 0x492492492492492)
              sub_207D0CD58();
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)v253 - (_QWORD)v251) >> 3) > v163)
              v163 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)v253 - (_QWORD)v251) >> 3);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)v253 - (_QWORD)v251) >> 3)) >= 0x249249249249249)
              v164 = 0x492492492492492;
            else
              v164 = v163;
            if (v164)
            {
              if (v164 > 0x492492492492492)
                sub_207CA3AB8();
              v165 = (char *)operator new(56 * v164);
            }
            else
            {
              v165 = 0;
            }
            v166 = &v165[56 * v162];
            *(_DWORD *)v166 = v159;
            *(_QWORD *)(v166 + 4) = v158;
            *(_QWORD *)(v166 + 12) = v157;
            *((_QWORD *)v166 + 4) = 0;
            *((_QWORD *)v166 + 5) = 0;
            *((_QWORD *)v166 + 3) = 0;
            *((_DWORD *)v166 + 12) = 0;
            if (v160 == v161)
            {
              v170 = &v165[56 * v162];
              v47 = v228;
              v78 = *(_DWORD *)v223;
            }
            else
            {
              v167 = 0;
              v47 = v228;
              v78 = *(_DWORD *)v223;
              do
              {
                v168 = &v166[v167];
                *((_DWORD *)v168 - 14) = *(_DWORD *)&v160[v167 - 56];
                *(_QWORD *)(v168 - 52) = *(_QWORD *)&v160[v167 - 52];
                *(_QWORD *)(v168 - 44) = *(_QWORD *)&v160[v167 - 44];
                v169 = *(_OWORD *)&v160[v167 - 32];
                *(_OWORD *)(v168 - 20) = *(_OWORD *)&v160[v167 - 20];
                *((_OWORD *)v168 - 2) = v169;
                v167 -= 56;
              }
              while (&v160[v167] != v161);
              v160 = (char *)v251;
              v170 = &v166[v167];
            }
            v80 = v166 + 56;
            v251 = v170;
            *(_QWORD *)v253 = &v165[56 * v164];
            if (v160)
              operator delete(v160);
            v252 = v80;
            v79 = v84 + 3;
          }
          while (v84 + 3 != v222);
LABEL_209:
          v171 = (char *)v251;
          v44 = v218;
          v172 = v211;
          v173 = __p;
          if (__p)
LABEL_210:
            operator delete(v173);
        }
        v174 = v215;
        v235 = v171;
        for (i = v213; v171 != v80; v171 += 56)
        {
          while (1)
          {
            *((_QWORD *)v171 + 3) = *(_QWORD *)&v223[4];
            v177 = (__int128 *)(v171 + 24);
            if (i >= v227)
              break;
            *(_DWORD *)i = *(_DWORD *)v171;
            *(_QWORD *)(i + 4) = *(_QWORD *)(v171 + 4);
            *(_QWORD *)(i + 12) = *(_QWORD *)(v171 + 12);
            v176 = *v177;
            *(_OWORD *)(i + 36) = *(_OWORD *)(v171 + 36);
            *(_OWORD *)(i + 24) = v176;
            i += 56;
            v172[1] = i;
            v171 += 56;
            if (v171 == v80)
              goto LABEL_234;
          }
          v178 = 0x6DB6DB6DB6DB6DB7 * ((i - v174) >> 3);
          v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) > 0x492492492492492)
            sub_207D0CD58();
          v180 = i;
          if (0xDB6DB6DB6DB6DB6ELL * ((v227 - v174) >> 3) > v179)
            v179 = 0xDB6DB6DB6DB6DB6ELL * ((v227 - v174) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v227 - v174) >> 3)) >= 0x249249249249249)
            v181 = 0x492492492492492;
          else
            v181 = v179;
          if (v181)
          {
            if (v181 > 0x492492492492492)
              sub_207CA3AB8();
            v182 = (char *)operator new(56 * v181);
          }
          else
          {
            v182 = 0;
          }
          v183 = &v182[56 * v178];
          *(_DWORD *)v183 = *(_DWORD *)v171;
          *(_QWORD *)(v183 + 4) = *(_QWORD *)(v171 + 4);
          *(_QWORD *)(v183 + 12) = *(_QWORD *)(v171 + 12);
          v184 = *v177;
          *(_OWORD *)(v183 + 36) = *(_OWORD *)(v171 + 36);
          *(_OWORD *)(v183 + 24) = v184;
          if (v180 == v174)
          {
            v188 = &v182[56 * v178];
            v47 = v228;
          }
          else
          {
            v185 = 0;
            v47 = v228;
            do
            {
              v186 = &v183[v185];
              *((_DWORD *)v186 - 14) = *(_DWORD *)&v180[v185 - 56];
              *(_QWORD *)(v186 - 52) = *(_QWORD *)&v180[v185 - 52];
              *(_QWORD *)(v186 - 44) = *(_QWORD *)&v180[v185 - 44];
              v187 = *(_OWORD *)&v180[v185 - 32];
              *(_OWORD *)(v186 - 20) = *(_OWORD *)&v180[v185 - 20];
              *((_OWORD *)v186 - 2) = v187;
              v185 -= 56;
            }
            while (&v180[v185] != v174);
            v188 = &v183[v185];
          }
          i = v183 + 56;
          *v172 = v188;
          v172[1] = v183 + 56;
          v227 = &v182[56 * v181];
          v172[2] = v227;
          v215 = v188;
          if (v174)
          {
            v189 = v174;
            v190 = v183 + 56;
            v174 = v188;
            operator delete(v189);
            i = v190;
          }
          else
          {
            v174 = v188;
          }
          v172[1] = i;
        }
LABEL_234:
        v213 = i;
        if (v235)
          operator delete(v235);
        v45 = v208;
        v14 = v209;
        v48 = v212 + v209;
        if (++*(_QWORD *)&v223[4] == v214)
          goto LABEL_33;
        goto LABEL_94;
      }
    }
    v68 = 0xAAAAAAAAAAAAAAABLL * (v56 - __p) + 1;
    if (v68 > 0x1555555555555555)
      sub_207CA420C();
    __src = v63;
    v233 = v58;
    if (0x5555555555555556 * ((v55 - (char *)__p) >> 2) > v68)
      v68 = 0x5555555555555556 * ((v55 - (char *)__p) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * ((v55 - (char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v69 = 0x1555555555555555;
    else
      v69 = v68;
    if (v69 > 0x1555555555555555)
      sub_207CA3AB8();
    v70 = (char *)operator new(12 * v69);
    v71 = (float *)&v70[4 * (v56 - __p)];
    *(_QWORD *)v71 = v67;
    v71[2] = v65;
    v72 = v71;
    if (v56 == __p)
    {
      v73 = __p;
      v55 = &v70[12 * v69];
      v75 = (char *)(v71 + 3);
      v13 = v218;
      if (!__p)
        goto LABEL_121;
    }
    else
    {
      v73 = __p;
      do
      {
        v74 = *(_QWORD *)(v56 - 3);
        v56 -= 3;
        *(_QWORD *)(v72 - 3) = v74;
        v72 -= 3;
        v72[2] = v56[2];
      }
      while (v56 != __p);
      v55 = &v70[12 * v69];
      v75 = (char *)(v71 + 3);
      v13 = v218;
      if (!__p)
        goto LABEL_121;
    }
    v76 = v55;
    operator delete(v73);
    v55 = v76;
LABEL_121:
    __p = v72;
    v56 = (float *)v75;
    v61 = v226;
    v47 = v228;
    v54 = (int *)v75;
    v44 = v13;
    LODWORD(v13) = v217;
    v58 = v233;
    v63 = __src;
    goto LABEL_102;
  }
LABEL_33:
  if (*(_BYTE *)(v207 + 336))
  {
    sub_207CB36E8((uint64_t)v206, (uint64_t)memptr);
    if (HIDWORD(*(unint64_t *)((char *)&memptr[1] + 4)))
      v19 = HIDWORD(memptr[1]) == 0;
    else
      v19 = 1;
    v20 = v19 || HIDWORD(memptr[2]) == 0;
    v21 = v20;
    if (v20)
      v22 = 0;
    else
      v22 = *(uint64_t *)((char *)&memptr[1] + 4);
    if (v20)
      v23 = 0;
    else
      v23 = HIDWORD(memptr[2]);
    v236 = (char *)memptr[0];
    v237 = (_DWORD *)v22;
    v238 = v23;
    v239 = v259;
    v240 = v260;
    v24 = v23;
    if (v23 * v260 == -1)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v24 = v238;
    }
    if ((_DWORD)v22)
      v25 = v21;
    else
      v25 = 1;
    if (v25)
    {
      v22 = 0;
      v26 = 0;
    }
    else
    {
      v26 = v23;
    }
    if (v25)
      v27 = 0;
    else
      v27 = HIDWORD(v22) * v22;
    v28 = (_DWORD)v22 != 0;
    if (HIDWORD(v22))
      v29 = v22 << 32;
    else
      v29 = 0;
    v30 = 4 * v27;
    v31 = v30 - 1;
    v32 = 4 * v24 * v27;
    _ZF = (v30 & (v30 - 1)) == 0;
    v33 = 3;
    if (_ZF)
      v33 = v31;
    v34 = v33 | (v33 >> 1) | ((v33 | (v33 >> 1)) >> 2);
    v35 = v34 | (v34 >> 4) | ((v34 | (v34 >> 4)) >> 8);
    v36 = v35 | (v35 >> 16) | ((v35 | (v35 >> 16)) >> 32);
    if (v36 + 1 > 8)
      v37 = v36 + 1;
    else
      v37 = 8;
    v232 = v26;
    if (v24 * v27)
    {
      memptr[0] = 0;
      v38 = malloc_type_posix_memalign(memptr, v37, 4 * v24 * v27, 0x1F88E90uLL);
      if (v38)
        sub_2081FBF78(v38, v37, 4 * v24 * v27);
      v39 = memptr[0];
      v24 = v238;
      v40 = v29 | v28;
      v41 = 4 * v40;
      v42 = (unint64_t)v237;
      if (!(_DWORD)v237)
        goto LABEL_274;
    }
    else
    {
      v39 = 0;
      v40 = v29 | v28;
      v41 = 4 * v40;
      v42 = (unint64_t)v237;
      if (!(_DWORD)v237)
        goto LABEL_274;
    }
    if (!HIDWORD(v42) || !v24)
      goto LABEL_274;
    v191 = v27 & 0x3FFFFFFF;
    v251 = v39;
    v252 = (char *)v42;
    *(_QWORD *)&v253[4] = v40 & 0x3FFFFFFF00000001;
    *(_DWORD *)v253 = v24;
    v254 = v27 & 0x3FFFFFFF;
    if (v24 * (v27 & 0x3FFFFFFF) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
LABEL_254:
      abort();
    }
    v192 = v41 >> 34;
    if (!(_DWORD)v22 || (_DWORD)v239 != 1)
    {
      v255 = 0;
      if (HIDWORD(v237) && v238)
      {
        memptr[0] = 0;
        BYTE4(memptr[1]) = v239;
        BYTE5(memptr[1]) = BYTE1(v239);
        BYTE6(memptr[1]) = BYTE2(v239);
        HIBYTE(memptr[1]) = BYTE3(v239);
        LOBYTE(memptr[2]) = (_DWORD)v22 != 0;
        LODWORD(memptr[1]) = (_DWORD)v237 - 1;
        HIDWORD(memptr[2]) = HIDWORD(v237) - 1;
        v258 = HIDWORD(v239) | (v192 << 32);
        LODWORD(v259) = v238 - 1;
        HIDWORD(v259) = v240;
        v260 = v27 & 0x3FFFFFFF;
        v256 = 0;
        sub_207D5CFB0(memptr, (uint64_t)&v256, (uint64_t)&v255, v236, v39);
      }
      goto LABEL_274;
    }
    if (HIDWORD(v239) != (_DWORD)v192 || (_DWORD)v237 != (_DWORD)v192)
    {
      memptr[0] = (void *)v237;
      if (HIDWORD(v237) && v238)
        sub_207D5CB40((uint64_t *)memptr, &v236, (char **)&v251);
      goto LABEL_274;
    }
    if (v240 == v191 && v191 == HIDWORD(v237) * (_DWORD)v192)
    {
      v193 = (v238 * v191);
      if ((_DWORD)v193 && !v236)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_254;
        }
        goto LABEL_273;
      }
      if ((_DWORD)v193)
LABEL_273:
        memmove(v39, v236, 4 * v193);
    }
    else
    {
      sub_207D5C9EC(&v236, (char **)&v251);
    }
LABEL_274:
    *(_QWORD *)(v207 + 1008) = v22;
    *(_DWORD *)(v207 + 1016) = v232;
    *(_QWORD *)(v207 + 1020) = v40;
    *(_DWORD *)(v207 + 1028) = v27;
    *(_BYTE *)(v207 + 1032) = 0;
    *(_BYTE *)(v207 + 1044) = 0;
    *(_QWORD *)(v207 + 1072) = v42;
    *(_DWORD *)(v207 + 1080) = v24;
    *(_QWORD *)(v207 + 1084) = v41;
    *(_DWORD *)(v207 + 1092) = 4 * v27;
    *(_QWORD *)(v207 + 1048) = v32;
    v196 = *(void **)(v207 + 1056);
    if (v196)
      free(v196);
    *(_QWORD *)(v207 + 1056) = v39;
    *(_QWORD *)(v207 + 1064) = v37;
  }
  kdebug_trace();
  if (v250)
  {
    v197 = (char *)v248;
    if (v248)
    {
      v198 = v249;
      v199 = v248;
      if (v249 != v248)
      {
        do
        {
          if (*(v198 - 8))
          {
            v200 = (std::__shared_weak_count *)*((_QWORD *)v198 - 6);
            if (v200)
            {
              v201 = (unint64_t *)&v200->__shared_owners_;
              do
                v202 = __ldaxr(v201);
              while (__stlxr(v202 - 1, v201));
              if (!v202)
              {
                ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                std::__shared_weak_count::__release_weak(v200);
              }
            }
          }
          v198 -= 120;
        }
        while (v198 != v197);
        v199 = v248;
      }
      v249 = v197;
      operator delete(v199);
    }
  }
  v244 = off_24C06E9E8;
  v203 = v247;
  if (v247)
  {
    v204 = (unint64_t *)&v247->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
}

void sub_207D5C1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  void *v57;
  void *v59;

  if (v57)
    free(v57);
  v59 = *(void **)a13;
  if (*(_QWORD *)a13)
  {
    *(_QWORD *)(a13 + 8) = v59;
    operator delete(v59);
    sub_207CD822C((uint64_t)&a43);
    sub_207CA86F4((uint64_t)&a48);
    _Unwind_Resume(a1);
  }
  sub_207CD822C((uint64_t)&a43);
  sub_207CA86F4((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t sub_207D5C3D4(uint64_t a1, _QWORD *a2)
{
  return sub_207D0B474(a1 + 8, a2);
}

uint64_t sub_207D5C3DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_QWORD *)(a1 + 984);
  v5 = *(_QWORD *)(a1 + 992);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493)
      sub_207D0CD58();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = &v8[56 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      *(_DWORD *)v11 = *(_DWORD *)(v4 + v9);
      *(_QWORD *)(v11 + 4) = *(_QWORD *)(v4 + v9 + 4);
      *(_QWORD *)(v11 + 12) = *(_QWORD *)(v4 + v9 + 12);
      v12 = *(_OWORD *)(v4 + v9 + 24);
      *(_OWORD *)(v11 + 36) = *(_OWORD *)(v4 + v9 + 36);
      *(_OWORD *)(v11 + 24) = v12;
      v9 += 56;
    }
    while (v10 + 56 != v5);
    *(_QWORD *)(a2 + 8) = &v8[v9];
  }
  v13 = *(_OWORD *)(a1 + 1024);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 1008);
  *(_OWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 1040);
  sub_207D5C5E8(a2 + 64, a1 + 1048);
  *(_BYTE *)(a2 + 112) = 0;
  result = a2 + 112;
  *(_BYTE *)(a2 + 256) = 0;
  if (*(_BYTE *)(a1 + 1240))
  {
    result = sub_207D5D250(result, a1 + 1096);
    *(_BYTE *)(a2 + 256) = 1;
  }
  return result;
}

void sub_207D5C504(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  void *v11;

  if (*(_BYTE *)(v1 + 256))
  {
    *(_QWORD *)(v1 + 112) = &off_24C072BC8;
    v3 = *(void **)(v1 + 232);
    if (v3)
    {
      *(_QWORD *)(v1 + 240) = v3;
      operator delete(v3);
    }
    v4 = *(std::__shared_weak_count **)(v1 + 224);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = *(std::__shared_weak_count **)(v1 + 208);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = *(void **)(v1 + 72);
  if (v10)
    free(v10);
  *(_QWORD *)(v1 + 72) = 0;
  v11 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D5C5D4(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207D5D378(a1);
  operator delete(v1);
}

uint64_t sub_207D5C5E8(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v15[2];
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    v15[0] = 0;
    v6 = malloc_type_posix_memalign(v15, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = v15[0];
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 24))
    v9 = *(_DWORD *)(a2 + 28) == 0;
  else
    v9 = 1;
  v10 = *(_DWORD *)(a2 + 44) >> 2;
  v11 = (*(_QWORD *)(a2 + 36) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
  v12 = v9 || v8 == 0;
  v13 = *(void **)(a2 + 24);
  if (v12)
  {
    v13 = 0;
    v8 = 0;
  }
  v15[0] = *(void **)(a2 + 8);
  v15[1] = v13;
  v16 = v8;
  v17 = v11;
  v18 = v10;
  if (v8 * v10 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_207D5C728(a1, v15);
  return a1;
}

void sub_207D5C70C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_207D5C728(uint64_t a1, _DWORD *a2)
{
  BOOL v2;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15[2];

  if (a2[2])
    v2 = a2[3] == 0;
  else
    v2 = 1;
  if (!v2 && a2[4] != 0)
  {
    v5 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v6 = *(_DWORD *)(a1 + 28) == 0;
    else
      v6 = 1;
    v7 = *(_DWORD *)(a1 + 44) >> 2;
    v8 = (*(_QWORD *)(a1 + 36) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
    v9 = v6 || v5 == 0;
    v10 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = 0;
      v5 = 0;
    }
    v11[0] = *(_QWORD *)(a1 + 8);
    v11[1] = v10;
    v12 = v5;
    v13 = v8;
    v14 = v7;
    if (v5 * v7 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v15[0] = (uint64_t)a2;
    v15[1] = (uint64_t)v11;
    sub_207D5C800(v15);
  }
}

void sub_207D5C800(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  _DWORD *v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  char v21;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 20);
  v4 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    sub_207D5C8B8(a1);
  }
  else
  {
    v13 = 0;
    v7 = *(_DWORD *)(v1 + 8);
    v6 = *(_DWORD *)(v1 + 12);
    v8 = *(_DWORD *)(v1 + 16);
    if (v7)
      v9 = v6 == 0;
    else
      v9 = 1;
    if (!v9 && v8 != 0)
    {
      v14 = 0;
      v15 = v7 - 1;
      v16 = v3 | (v4 << 32);
      v17 = v6 - 1;
      v18 = *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v2 + 24) << 32);
      v19 = v8 - 1;
      v20 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
      v11 = *(_DWORD **)v1;
      v12 = *(_DWORD **)v2;
      v21 = 0;
      sub_207D5CFB0(&v14, (uint64_t)&v21, (uint64_t)&v13, v11, v12);
    }
  }
}

uint64_t *sub_207D5C8B8(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_207D5C9EC((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_207D5C9EC((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 4 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_207D5CB40(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_207D5C9EC(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 4 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 4 * result[7];
      v12 = 4 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        result = memmove(v9, v8, 4 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_207D5CB40(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_254530A20;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_254530A10 || byte_254530A18)
              {
                v22 = qword_2545309E8;
                v23 = qword_2545309F0;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_254530A10)
                goto LABEL_52;
              v8 = v18;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 4 * v17);
LABEL_19:
            v15 = &v16[4 * v43];
            v13 += 4 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 4 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[4 * v36];
          v13 = &v39[4 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 4 * *((unsigned int *)a2 + 7);
      v33 = 4 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 4 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 4 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 4 * v30);
LABEL_44:
        v28 += 4 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 4 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 4 * v31);
  }
  return result;
}

float sub_207D5CFB0(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  float result;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    v8 = a1[9];
    v9 = a1[10];
    if (v6)
    {
      v10 = a1[6];
      v11 = a1[7];
      if (!v7)
      {
        do
        {
          v50 = a5;
          v51 = a4;
          v52 = v6;
          do
          {
            *v50 = *v51;
            v51 += v10;
            v50 += v11;
            --v52;
          }
          while (v52);
          *v50 = *v51;
          a4 += v8;
          a5 += v9;
          ++v7;
        }
        while (v7 != v5);
        goto LABEL_32;
      }
      v12 = 0;
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[3];
      v16 = 4 * v9;
      v17 = v11;
      v18 = 4 * a1[4];
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            *v28 = *v29;
            v29 = (_DWORD *)((char *)v29 + v15);
            v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *v28 = *v29;
          v25 = (_DWORD *)((char *)v25 + v14 * 4);
          v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v31 = v7;
        do
        {
          *v27 = *v26;
          v26 = (_DWORD *)((char *)v26 + v15);
          v27 = (_DWORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *v27 = *v26;
        a4 = (_DWORD *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        v19 = (_DWORD *)((char *)v19 + v13);
        v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v10 = a1[6];
      v11 = a1[7];
      if (v7)
      {
        v32 = 0;
        v33 = 4 * v10;
        v34 = 4 * a1[3];
        v35 = 4 * v11;
        v36 = 4 * a1[4];
        do
        {
          v37 = a5;
          v38 = a4;
          v39 = v7;
          do
          {
            *v37 = *v38;
            v38 = (_DWORD *)((char *)v38 + v34);
            v37 = (_DWORD *)((char *)v37 + v36);
            --v39;
          }
          while (v39);
          *v37 = *v38;
          a4 = (_DWORD *)((char *)a4 + v33);
          a5 = (_DWORD *)((char *)a5 + v35);
          ++v32;
        }
        while (v32 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a5 = *a4;
        a4 += v10;
        a5 += v11;
        --v6;
      }
      while (v6);
      goto LABEL_35;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_35;
    }
    v40 = 0;
    v41 = 4 * v8;
    v42 = 4 * a1[3];
    v43 = 4 * v9;
    v44 = 4 * a1[4];
    do
    {
      v45 = a5;
      v46 = a4;
      v47 = v7;
      do
      {
        *v45 = *v46;
        v46 = (_DWORD *)((char *)v46 + v42);
        v45 = (_DWORD *)((char *)v45 + v44);
        --v47;
      }
      while (v47);
      *v45 = *v46;
      a4 = (_DWORD *)((char *)a4 + v41);
      a5 = (_DWORD *)((char *)a5 + v43);
      ++v40;
    }
    while (v40 != v5);
  }
  else
  {
    v7 = a1[2];
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v48 = 4 * a1[3];
    v49 = 4 * a1[4];
    do
    {
      *a5 = *a4;
      a4 = (_DWORD *)((char *)a4 + v48);
      a5 = (_DWORD *)((char *)a5 + v49);
      --v7;
    }
    while (v7);
  }
LABEL_35:
  result = *(float *)a4;
  *a5 = *a4;
  return result;
}

uint64_t sub_207D5D250(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_QWORD *)a1 = &off_24C072BC8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)&v10 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)&v10 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_207D2E32C(a1, &v10, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(unsigned __int8 *)(a2 + 8), (uint64_t *)(a2 + 72));
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (!*((_QWORD *)&v10 + 1))
    return a1;
  v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_207D5D34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  v6 = *(void **)(v3 + 120);
  if (v6)
  {
    *(_QWORD *)(v3 + 128) = v6;
    operator delete(v6);
  }
  sub_207D2E210(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_207D5D378(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 1240))
  {
    *(_QWORD *)(a1 + 1096) = &off_24C072BC8;
    v2 = *(void **)(a1 + 1216);
    if (v2)
    {
      *(_QWORD *)(a1 + 1224) = v2;
      operator delete(v2);
    }
    v3 = *(std::__shared_weak_count **)(a1 + 1208);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(a1 + 1192);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = *(void **)(a1 + 1056);
  if (v9)
    free(v9);
  *(_QWORD *)(a1 + 1056) = 0;
  v10 = *(void **)(a1 + 984);
  if (v10)
  {
    *(_QWORD *)(a1 + 992) = v10;
    operator delete(v10);
  }
  return sub_207D4BF50(a1);
}

void sub_207D5D44C(uint64_t *a1, double *a2, double *a3, double *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  double v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;

  kdebug_trace();
  v8 = *((unsigned int *)a1 + 5);
  v9 = 0;
  v10 = 0;
  v11 = v8 * (unint64_t)*((unsigned int *)a1 + 3);
  if (v11)
  {
    v12 = 0;
    v13 = 1.1755e-38;
    do
    {
      if (v13 < *(float *)(*a1 + 4 * v12) && v12 % v8 <= *((unsigned int *)a1 + 2))
      {
        v9 = v12 % v8;
        v10 = v12 / v8;
        v13 = *(float *)(*a1 + 4 * v12);
      }
      ++v12;
    }
    while (v11 != v12);
  }
  kdebug_trace();
  v14 = 0.0;
  if (v10 && v9 && v10 + 1 < *((unsigned int *)a1 + 3) && v9 + 1 < *((unsigned int *)a1 + 2))
  {
    v15 = *((_DWORD *)a1 + 4);
    v16 = *((_DWORD *)a1 + 5);
    v28 = a3;
    v17 = v16 * v10 + v15 * v9;
    v18 = *a1;
    v14 = *(float *)(v18 + 4 * v17);
    v19 = log(v14 + 1.0e-12);
    v20 = log(*(float *)(v18 + 4 * (v16 * v10 + v15 * (v9 - 1))) + 1.0e-12);
    v21 = log(*(float *)(v18 + 4 * (v16 * v10 + v15 + v15 * v9)) + 1.0e-12);
    v22 = log(*(float *)(v18 + 4 * (v15 * v9 + v16 * (v10 - 1))) + 1.0e-12);
    v23 = log(*(float *)(v18 + 4 * (v17 + v16)) + 1.0e-12);
    v24 = v22 - v23;
    v25 = v22 + v23 - (v19 + v19) + v22 + v23 - (v19 + v19);
    if (v25 == 0.0)
      v25 = 1.0;
    v26 = v24 / v25;
    v27 = v20 + v21 - (v19 + v19) + v20 + v21 - (v19 + v19);
    if (v27 == 0.0)
      v27 = 1.0;
    *a2 = (v20 - v21) / v27 + (double)v9;
    *v28 = v26 + (double)v10;
  }
  *a4 = v14;
}

void sub_207D5D684(uint64_t a1, double *a2, double *a3, _QWORD *a4)
{
  double v8;
  int16x8_t v9;
  unint64_t v10;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  double v24;
  double v27;
  double v30;
  double v33;
  long double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;

  kdebug_trace();
  v43 = 0;
  v44 = 0;
  sub_207C86E60(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 20), &v44, &v43, v8, v9);
  kdebug_trace();
  v10 = v44;
  _D0 = 0;
  if (v44)
  {
    v12 = v43;
    if (v43)
    {
      if (v44 + 1 < *(unsigned int *)(a1 + 12) && v43 + 1 < *(unsigned int *)(a1 + 8))
      {
        v13 = *(_DWORD *)(a1 + 16);
        v14 = *(_DWORD *)(a1 + 20);
        v15 = v13 * v43;
        v16 = v14 * v44;
        v42 = v14 * v44 + v13 * v43;
        v17 = *(_QWORD *)a1;
        _H0 = *(_WORD *)(v17 + 2 * v42);
        __asm { FCVT            D0, H0 }
        v24 = log(_D0 + 1.0e-12);
        _H0 = *(_WORD *)(v17 + 2 * (v16 + v13 * (v12 - 1)));
        __asm { FCVT            D0, H0 }
        v27 = log(_D0 + 1.0e-12);
        _H0 = *(_WORD *)(v17 + 2 * (v16 + v13 + v15));
        __asm { FCVT            D0, H0 }
        v30 = log(_D0 + 1.0e-12);
        _H0 = *(_WORD *)(v17 + 2 * (v15 + v14 * (v10 - 1)));
        __asm { FCVT            D0, H0 }
        v33 = log(_D0 + 1.0e-12);
        _H0 = *(_WORD *)(v17 + 2 * (v42 + v14));
        __asm { FCVT            D0, H0 }
        v36 = log(_D0 + 1.0e-12);
        v37 = v33 - v36;
        v38 = v33 + v36 - (v24 + v24) + v33 + v36 - (v24 + v24);
        if (v38 == 0.0)
          v38 = 1.0;
        v39 = v37 / v38;
        v40 = v27 + v30 - (v24 + v24) + v27 + v30 - (v24 + v24);
        if (v40 == 0.0)
          v40 = 1.0;
        *a2 = (v27 - v30) / v40 + (double)v12;
        *a3 = v39 + (double)v10;
        _H0 = *(_WORD *)(v17 + 2 * v42);
        __asm { FCVT            D0, H0 }
      }
    }
  }
  *a4 = _D0;
}

void sub_207D5D88C(uint64_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unint64_t v3;
  double *v6;
  double *v7;
  double *v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  uint64_t i;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double *v28;
  double *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  double *v37;
  unint64_t v38;
  double *v39;
  double *v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  double *v48;
  unint64_t v49;
  double *v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  double *v57;
  unint64_t v58;
  double *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  double *v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  double *v73;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  double *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  float64x2_t v84;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  double v93;
  float64_t v94;
  float64_t v95;
  float64_t v96;
  double v97;
  float64_t v98;
  double v99;
  double *v101;
  double *v102;
  double *v103;
  double *v104;
  double *v105;
  double *v106;
  double *v107;
  double *v108;

  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v101 = 0;
    v104 = 0;
    v105 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v14 = *((_DWORD *)a1 + 4);
      v15 = *((_DWORD *)a1 + 5) * v9;
      v16 = *a1;
      v17 = *(float *)(*a1 + 4 * (v15 + v14));
      v18 = *((unsigned int *)a1 + 2);
      if (v18 < 4)
      {
        v20 = 1.0;
        if (v17 <= a3)
          goto LABEL_5;
      }
      else
      {
        v19 = v15 + 2 * v14;
        v20 = 1.0;
        for (i = 3; i != v18; ++i)
        {
          if (*(float *)(v16 + 4 * v19) > v17)
          {
            v17 = *(float *)(v16 + 4 * v19);
            v20 = (float)(unint64_t)(i - 1);
          }
          v19 += v14;
        }
        if (v17 <= a3)
          goto LABEL_5;
      }
      v22 = *(float *)(v16 + 4 * (v15 + v14 * (float)(v20 + 1.0)));
      v23 = logf(*(float *)(v16 + 4 * (v15 + v14 * (float)(v20 + -1.0))));
      v24 = logf(v17);
      v25 = logf(v22);
      v26 = (float)(v23 - v25)
          / (float)((float)((float)(v23 + v25) - (float)(v24 + v24)) + (float)((float)(v23 + v25) - (float)(v24 + v24)));
      if (fabsf(v26) >= 0.5)
        goto LABEL_5;
      v106 = v6;
      if (v8 < v105)
      {
        *v8 = v17;
        v103 = v8 + 1;
        v27 = v20 + v26;
        if (v7 < v104)
          goto LABEL_17;
        goto LABEL_36;
      }
      v28 = v10;
      v29 = v7;
      v30 = (char *)((char *)v8 - (char *)v28);
      v31 = v8 - v28;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_115;
      v107 = v28;
      v33 = (char *)v105 - (char *)v28;
      v34 = ((char *)v105 - (char *)v28) >> 2;
      if (v34 > v32)
        v32 = v34;
      v35 = v33 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v32;
      if (v35)
      {
        if (v35 >> 61)
          goto LABEL_112;
        v36 = operator new(8 * v35);
      }
      else
      {
        v36 = 0;
      }
      v37 = (double *)&v36[8 * v31];
      *v37 = v17;
      v103 = v37 + 1;
      if (v8 != v107)
        break;
      v6 = v106;
      v40 = v107;
      v7 = v29;
      v105 = (double *)&v36[8 * v35];
      if (v107)
        goto LABEL_34;
LABEL_35:
      v10 = v37;
      v27 = v20 + v26;
      if (v7 < v104)
      {
LABEL_17:
        *v7 = v27;
        v102 = v7 + 1;
        if (v6 >= v101)
          goto LABEL_53;
        goto LABEL_3;
      }
LABEL_36:
      v108 = v10;
      v42 = v7;
      v43 = (char *)v7 - (char *)v11;
      v44 = v43 >> 3;
      v45 = (v43 >> 3) + 1;
      if (v45 >> 61)
        sub_207CA420C();
      if (((char *)v104 - (char *)v11) >> 2 > v45)
        v45 = ((char *)v104 - (char *)v11) >> 2;
      if ((unint64_t)((char *)v104 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
      {
        if (v46 >> 61)
          sub_207CA3AB8();
        v47 = (char *)operator new(8 * v46);
      }
      else
      {
        v47 = 0;
      }
      v48 = (double *)&v47[8 * v44];
      *v48 = v27;
      v102 = v48 + 1;
      if (v42 != v11)
      {
        v49 = (char *)v42 - (char *)v11 - 8;
        if (v49 < 0x168
          || (v69 = ((char *)(v42 - 1) - (char *)v11) & 0xFFFFFFFFFFFFFFF8, &v47[v43 - 8 - v69] > &v47[v43 - 8])
          || (double *)((char *)v42 - v69 - 8) > v42 - 1
          || (unint64_t)((char *)v42 - v47 - v43) < 0x20)
        {
          v50 = v42;
          v6 = v106;
          v10 = v108;
        }
        else
        {
          v70 = (v49 >> 3) + 1;
          v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          v50 = &v42[v71 / 0xFFFFFFFFFFFFFFF8];
          v48 = (double *)((char *)v48 - v71);
          v72 = &v47[8 * v44 - 16];
          v73 = v42 - 2;
          v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          v6 = v106;
          do
          {
            v75 = *(_OWORD *)v73;
            *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
            *(_OWORD *)v72 = v75;
            v72 -= 32;
            v73 -= 4;
            v74 -= 4;
          }
          while (v74);
          v10 = v108;
          if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            v104 = (double *)&v47[8 * v46];
            if (!v11)
              goto LABEL_52;
LABEL_51:
            operator delete(v11);
            goto LABEL_52;
          }
        }
        do
        {
          v51 = *((_QWORD *)v50-- - 1);
          *((_QWORD *)v48-- - 1) = v51;
        }
        while (v50 != v11);
        goto LABEL_50;
      }
      v6 = v106;
      v10 = v108;
      v104 = (double *)&v47[8 * v46];
      if (v11)
        goto LABEL_51;
LABEL_52:
      v11 = v48;
      if (v6 >= v101)
      {
LABEL_53:
        v52 = (char *)v6 - (char *)v12;
        v53 = v6 - v12;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
LABEL_115:
          sub_207CA420C();
        if (((char *)v101 - (char *)v12) >> 2 > v54)
          v54 = ((char *)v101 - (char *)v12) >> 2;
        if ((unint64_t)((char *)v101 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
        {
          if (v55 >> 61)
LABEL_112:
            sub_207CA3AB8();
          v56 = (char *)operator new(8 * v55);
        }
        else
        {
          v56 = 0;
        }
        v57 = (double *)&v56[8 * v53];
        *v57 = (double)v9;
        v13 = v57 + 1;
        if (v106 != v12)
        {
          v58 = (char *)v106 - (char *)v12 - 8;
          if (v58 < 0x168)
          {
            v59 = v106;
            goto LABEL_68;
          }
          v76 = ((char *)(v106 - 1) - (char *)v12) & 0xFFFFFFFFFFFFFFF8;
          if (&v56[v52 - 8 - v76] > &v56[v52 - 8])
          {
            v59 = v106;
            goto LABEL_68;
          }
          if ((double *)((char *)v106 - v76 - 8) > v106 - 1)
          {
            v59 = v106;
            goto LABEL_68;
          }
          if ((unint64_t)((char *)v106 - v56 - v52) < 0x20)
          {
            v59 = v106;
            goto LABEL_68;
          }
          v77 = (v58 >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v59 = &v106[v78 / 0xFFFFFFFFFFFFFFF8];
          v57 = (double *)((char *)v57 - v78);
          v79 = &v56[8 * v53 - 16];
          v80 = v106 - 2;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *(_OWORD *)v80;
            *((_OWORD *)v79 - 1) = *((_OWORD *)v80 - 1);
            *(_OWORD *)v79 = v82;
            v79 -= 32;
            v80 -= 4;
            v81 -= 4;
          }
          while (v81);
          if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_68:
              v60 = *((_QWORD *)v59-- - 1);
              *((_QWORD *)v57-- - 1) = v60;
            }
            while (v59 != v12);
          }
        }
        v101 = (double *)&v56[8 * v55];
        if (v12)
          operator delete(v12);
        v12 = v57;
        goto LABEL_4;
      }
LABEL_3:
      *v6 = (double)v9;
      v13 = v6 + 1;
LABEL_4:
      v3 = *((unsigned int *)a1 + 3);
      v6 = v13;
      v7 = v102;
      v8 = v103;
LABEL_5:
      if (++v9 >= v3)
        goto LABEL_100;
    }
    v38 = (char *)v8 - (char *)v107 - 8;
    if (v38 < 0x168
      || (v61 = ((char *)(v8 - 1) - (char *)v107) & 0xFFFFFFFFFFFFFFF8,
          &v30[(_QWORD)v36 - 8 - v61] > &v30[(_QWORD)v36 - 8])
      || (double *)((char *)v8 - v61 - 8) > v8 - 1
      || (unint64_t)((char *)v8 - v36 - (_QWORD)v30) < 0x20)
    {
      v39 = v8;
      v6 = v106;
      v40 = v107;
      v7 = v29;
    }
    else
    {
      v62 = (v38 >> 3) + 1;
      v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
      v39 = &v8[v63 / 0xFFFFFFFFFFFFFFF8];
      v37 = (double *)((char *)v37 - v63);
      v64 = &v36[8 * v31 - 16];
      v65 = v8 - 2;
      v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      v6 = v106;
      v7 = v29;
      do
      {
        v67 = *(_OWORD *)v65;
        *(v64 - 1) = *((_OWORD *)v65 - 1);
        *v64 = v67;
        v64 -= 2;
        v65 -= 4;
        v66 -= 4;
      }
      while (v66);
      _ZF = v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL);
      v40 = v107;
      if (_ZF)
      {
LABEL_33:
        v105 = (double *)&v36[8 * v35];
        if (!v40)
          goto LABEL_35;
LABEL_34:
        operator delete(v40);
        goto LABEL_35;
      }
    }
    do
    {
      v41 = *((_QWORD *)v39-- - 1);
      *((_QWORD *)v37-- - 1) = v41;
    }
    while (v39 != v40);
    goto LABEL_33;
  }
  v6 = 0;
  v7 = 0;
  v12 = 0;
  v11 = 0;
  v10 = 0;
LABEL_100:
  if ((unint64_t)((char *)v7 - (char *)v11) < 0xA0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    if (!v10)
      goto LABEL_107;
LABEL_106:
    operator delete(v10);
    goto LABEL_107;
  }
  v83 = 0;
  v84 = 0uLL;
  __asm { FMOV            V3.2D, #1.0 }
  v89 = 0uLL;
  v90 = 0uLL;
  do
  {
    *(_QWORD *)&v91.f64[0] = _Q3;
    v91.f64[1] = v12[v83];
    v84 = vaddq_f64(v84, vmulq_n_f64(v91, v11[v83]));
    v89 = vaddq_f64(v89, v91);
    v90 = vmlaq_n_f64(v90, v91, v91.f64[1]);
    ++v83;
  }
  while (v7 - v11 != v83);
  v92 = sqrt(v89.f64[0]);
  v90.f64[0] = v90.f64[0] / v92;
  v93 = sqrt(v90.f64[1] - v90.f64[0] * v90.f64[0]);
  v94 = v84.f64[0] / v92;
  v95 = (v84.f64[1] - v90.f64[0] * (v84.f64[0] / v92)) / v93 / v93;
  v96 = (v94 - v90.f64[0] * v95) / v92;
  v97 = *v12;
  v98 = v96 + v95 * *v12;
  v99 = *(v6 - 1);
  *(float64_t *)a2 = v96;
  *(float64_t *)(a2 + 8) = v95;
  *(float64_t *)(a2 + 16) = v98;
  *(double *)(a2 + 24) = v97;
  *(float64_t *)(a2 + 32) = v96 + v95 * v99;
  *(double *)(a2 + 40) = v99;
  *(_BYTE *)(a2 + 48) = 1;
  if (v10)
    goto LABEL_106;
LABEL_107:
  if (v12)
    operator delete(v12);
  if (v11)
    operator delete(v11);
}

void sub_207D5E0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v30;
  void *v31;

  if (__p)
  {
    operator delete(__p);
    v30 = v28;
    if (!v28)
    {
LABEL_3:
      v31 = v27;
      if (!v27)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v30 = v28;
    if (!v28)
      goto LABEL_3;
  }
  operator delete(v30);
  v31 = v27;
  if (!v27)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

void sub_207D5E19C(uint64_t *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unint64_t v3;
  double *v6;
  double *v7;
  unint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v22;
  unsigned int v23;
  float v24;
  uint64_t i;
  float v32;
  float v33;
  float v34;
  double *v39;
  float v40;
  double *v41;
  double *v42;
  double *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  double *v52;
  unint64_t v53;
  double *v54;
  double *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  double *v62;
  int64_t v63;
  unint64_t v64;
  double *v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  double *v73;
  unint64_t v74;
  double *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  double *v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  double *v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  double *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  float64x2_t v99;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  double v104;
  double v105;
  float64_t v106;
  float64_t v107;
  float64_t v108;
  double v109;
  float64_t v110;
  double v111;
  double *v113;
  double *v114;
  double *v115;
  double *v116;
  double *__p;
  double *__pa;

  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    v115 = 0;
    v116 = 0;
    v6 = 0;
    v7 = 0;
    v113 = 0;
    v114 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *((_DWORD *)a1 + 4);
      v14 = *((_DWORD *)a1 + 5) * v8;
      v15 = *a1;
      _H0 = *(_WORD *)(*a1 + 2 * (v14 + v13));
      __asm { FCVT            S9, H0 }
      v22 = *((unsigned int *)a1 + 2);
      if (v22 < 4)
      {
        v24 = 1.0;
        if (_S9 > a3)
          goto LABEL_12;
LABEL_3:
        v12 = (uint64_t)v6;
        if (++v8 >= v3)
          goto LABEL_98;
      }
      else
      {
        v23 = v14 + 2 * v13;
        v24 = 1.0;
        for (i = 3; i != v22; ++i)
        {
          _H0 = *(_WORD *)(v15 + 2 * v23);
          __asm { FCVT            S0, H0 }
          if (_S9 < _S0)
          {
            _S9 = _S0;
            v24 = (float)(unint64_t)(i - 1);
          }
          v23 += v13;
        }
        if (_S9 <= a3)
          goto LABEL_3;
LABEL_12:
        _H0 = *(_WORD *)(v15 + 2 * (v14 + v13 * (float)(v24 + -1.0)));
        _H1 = *(_WORD *)(v15 + 2 * (v14 + v13 * (float)(v24 + 1.0)));
        __asm
        {
          FCVT            S0, H0; float
          FCVT            S10, H1
        }
        v32 = logf(_S0);
        v33 = logf(_S9);
        v34 = logf(_S10);
        _S0 = (float)(v32 - v34)
            / (float)((float)((float)(v32 + v34) - (float)(v33 + v33)) + (float)((float)(v32 + v34) - (float)(v33 + v33)));
        __asm
        {
          FCVT            H0, S0
          FCVT            S10, H0
        }
        _S0 = fabsf(_S10);
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        if (_S0 >= 0.5)
          goto LABEL_3;
        if (v7 < v115)
        {
          *v7 = _S9;
          v39 = v7 + 1;
          v40 = v24 + _S10;
          __p = v9;
          if (v6 < v114)
            goto LABEL_15;
          goto LABEL_34;
        }
        v43 = v9;
        v44 = (char *)v7 - (char *)v9;
        v45 = v44 >> 3;
        v46 = (v44 >> 3) + 1;
        if (v46 >> 61)
          goto LABEL_113;
        __pa = v43;
        v47 = (char *)v115 - (char *)v43;
        v48 = ((char *)v115 - (char *)v43) >> 2;
        if (v48 > v46)
          v46 = v48;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v46;
        if (v49)
        {
          if (v49 >> 61)
            goto LABEL_110;
          v50 = v49;
          v51 = operator new(8 * v49);
          v49 = v50;
        }
        else
        {
          v51 = 0;
        }
        v52 = (double *)&v51[8 * v45];
        *v52 = _S9;
        v39 = v52 + 1;
        if (v7 != __pa)
        {
          v53 = (char *)v7 - (char *)__pa - 8;
          if (v53 < 0x168
            || (v77 = ((char *)(v7 - 1) - (char *)__pa) & 0xFFFFFFFFFFFFFFF8, &v51[v44 - 8 - v77] > &v51[v44 - 8])
            || (double *)((char *)v7 - v77 - 8) > v7 - 1
            || (unint64_t)((char *)v7 - v51 - v44) < 0x20)
          {
            v54 = v7;
            v55 = __pa;
          }
          else
          {
            v78 = (v53 >> 3) + 1;
            v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
            v54 = &v7[v79 / 0xFFFFFFFFFFFFFFF8];
            v52 = (double *)((char *)v52 - v79);
            v80 = &v51[8 * v45 - 16];
            v81 = v7 - 2;
            v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
            v55 = __pa;
            do
            {
              v83 = *(_OWORD *)v81;
              *(v80 - 1) = *((_OWORD *)v81 - 1);
              *v80 = v83;
              v80 -= 2;
              v81 -= 4;
              v82 -= 4;
            }
            while (v82);
            if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_31:
              v115 = (double *)&v51[8 * v49];
              if (!v55)
                goto LABEL_33;
LABEL_32:
              operator delete(v55);
              goto LABEL_33;
            }
          }
          do
          {
            v56 = *((_QWORD *)v54-- - 1);
            *((_QWORD *)v52-- - 1) = v56;
          }
          while (v54 != v55);
          goto LABEL_31;
        }
        v55 = __pa;
        v115 = (double *)&v51[8 * v49];
        if (__pa)
          goto LABEL_32;
LABEL_33:
        v9 = v52;
        v40 = v24 + _S10;
        __p = v52;
        if (v6 < v114)
        {
LABEL_15:
          *v6 = v40;
          v12 = (uint64_t)(v6 + 1);
          v41 = v116;
          if (v116 >= v113)
            goto LABEL_49;
          goto LABEL_16;
        }
LABEL_34:
        v57 = v6 - v10;
        v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 61)
          sub_207CA420C();
        if (((char *)v114 - (char *)v10) >> 2 > v58)
          v58 = ((char *)v114 - (char *)v10) >> 2;
        if ((unint64_t)((char *)v114 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
        {
          if (v59 >> 61)
            sub_207CA3AB8();
          v60 = v59;
          v61 = operator new(8 * v59);
          v59 = v60;
          v62 = (double *)&v61[8 * v57];
          *v62 = v40;
          v12 = (uint64_t)(v62 + 1);
          v63 = (char *)v6 - (char *)v10;
          if (v6 != v10)
          {
LABEL_43:
            v64 = v63 - 8;
            if (v64 < 0x168
              || (v84 = ((char *)(v6 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFF8,
                  &v61[(char *)v6 - (char *)v10 - 8 - v84] > &v61[(char *)v6 - (char *)v10 - 8])
              || (double *)((char *)v6 - v84 - 8) > v6 - 1
              || (unint64_t)((char *)v10 - v61) < 0x20)
            {
              v65 = v6;
              v41 = v116;
              v9 = __p;
            }
            else
            {
              v85 = (v64 >> 3) + 1;
              v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              v65 = &v6[v86 / 0xFFFFFFFFFFFFFFF8];
              v62 = (double *)((char *)v62 - v86);
              v87 = &v61[8 * v57 - 16];
              v88 = v6 - 2;
              v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              v9 = __p;
              do
              {
                v90 = *(_OWORD *)v88;
                *(v87 - 1) = *((_OWORD *)v88 - 1);
                *v87 = v90;
                v87 -= 2;
                v88 -= 4;
                v89 -= 4;
              }
              while (v89);
              v41 = v116;
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_46:
                v114 = (double *)&v61[8 * v59];
                if (!v10)
                  goto LABEL_48;
LABEL_47:
                operator delete(v10);
                goto LABEL_48;
              }
            }
            do
            {
              v66 = *((_QWORD *)v65-- - 1);
              *((_QWORD *)v62-- - 1) = v66;
            }
            while (v65 != v10);
            goto LABEL_46;
          }
        }
        else
        {
          v61 = 0;
          v62 = (double *)(8 * v57);
          *(double *)(8 * v57) = v40;
          v12 = 8 * v57 + 8;
          v63 = (char *)v6 - (char *)v10;
          if (v6 != v10)
            goto LABEL_43;
        }
        v41 = v116;
        v9 = __p;
        v114 = (double *)&v61[8 * v59];
        if (v10)
          goto LABEL_47;
LABEL_48:
        v10 = v62;
        if (v41 >= v113)
        {
LABEL_49:
          v67 = (char *)v41 - (char *)v11;
          v68 = v41 - v11;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 61)
LABEL_113:
            sub_207CA420C();
          if (((char *)v113 - (char *)v11) >> 2 > v69)
            v69 = ((char *)v113 - (char *)v11) >> 2;
          if ((unint64_t)((char *)v113 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v69;
          if (v70)
          {
            if (v70 >> 61)
LABEL_110:
              sub_207CA3AB8();
            v71 = v70;
            v72 = (char *)operator new(8 * v70);
            v70 = v71;
          }
          else
          {
            v72 = 0;
          }
          v73 = (double *)&v72[8 * v68];
          *v73 = (double)v8;
          v42 = v73 + 1;
          if (v116 != v11)
          {
            v74 = (char *)v116 - (char *)v11 - 8;
            if (v74 < 0x168
              || (v91 = ((char *)(v116 - 1) - (char *)v11) & 0xFFFFFFFFFFFFFFF8, &v72[v67 - 8 - v91] > &v72[v67 - 8])
              || (double *)((char *)v116 - v91 - 8) > v116 - 1)
            {
              v75 = v116;
              v9 = __p;
            }
            else
            {
              if ((unint64_t)((char *)v116 - v72 - v67) < 0x20)
              {
                v75 = v116;
                v9 = __p;
                goto LABEL_67;
              }
              v92 = (v74 >> 3) + 1;
              v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
              v75 = &v116[v93 / 0xFFFFFFFFFFFFFFF8];
              v73 = (double *)((char *)v73 - v93);
              v94 = &v72[8 * v68 - 16];
              v95 = v116 - 2;
              v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
              v9 = __p;
              do
              {
                v97 = *(_OWORD *)v95;
                *((_OWORD *)v94 - 1) = *((_OWORD *)v95 - 1);
                *(_OWORD *)v94 = v97;
                v94 -= 32;
                v95 -= 4;
                v96 -= 4;
              }
              while (v96);
              if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_68:
                v113 = (double *)&v72[8 * v70];
                if (v11)
                  goto LABEL_69;
                goto LABEL_70;
              }
            }
            do
            {
LABEL_67:
              v76 = *((_QWORD *)v75-- - 1);
              *((_QWORD *)v73-- - 1) = v76;
            }
            while (v75 != v11);
            goto LABEL_68;
          }
          v9 = __p;
          v113 = (double *)&v72[8 * v70];
          if (v11)
LABEL_69:
            operator delete(v11);
LABEL_70:
          v11 = v73;
          goto LABEL_71;
        }
LABEL_16:
        *v41 = (double)v8;
        v42 = v41 + 1;
LABEL_71:
        v3 = *((unsigned int *)a1 + 3);
        v116 = v42;
        ++v8;
        v6 = (double *)v12;
        v7 = v39;
        if (v8 >= v3)
          goto LABEL_98;
      }
    }
  }
  v9 = 0;
  v11 = 0;
  v116 = 0;
  v10 = 0;
  v12 = 0;
LABEL_98:
  if ((unint64_t)(v12 - (_QWORD)v10) < 0xA0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    if (!v9)
      goto LABEL_105;
LABEL_104:
    operator delete(v9);
    goto LABEL_105;
  }
  v98 = 0;
  v99 = 0uLL;
  __asm { FMOV            V3.2D, #1.0 }
  v101 = 0uLL;
  v102 = 0uLL;
  do
  {
    *(_QWORD *)&v103.f64[0] = _Q3;
    v103.f64[1] = v11[v98];
    v99 = vaddq_f64(v99, vmulq_n_f64(v103, v10[v98]));
    v101 = vaddq_f64(v101, v103);
    v102 = vmlaq_n_f64(v102, v103, v103.f64[1]);
    ++v98;
  }
  while ((v12 - (uint64_t)v10) >> 3 != v98);
  v104 = sqrt(v101.f64[0]);
  v102.f64[0] = v102.f64[0] / v104;
  v105 = sqrt(v102.f64[1] - v102.f64[0] * v102.f64[0]);
  v106 = v99.f64[0] / v104;
  v107 = (v99.f64[1] - v102.f64[0] * (v99.f64[0] / v104)) / v105 / v105;
  v108 = (v106 - v102.f64[0] * v107) / v104;
  v109 = *v11;
  v110 = v108 + v107 * *v11;
  v111 = *(v116 - 1);
  *(float64_t *)a2 = v108;
  *(float64_t *)(a2 + 8) = v107;
  *(float64_t *)(a2 + 16) = v110;
  *(double *)(a2 + 24) = v109;
  *(float64_t *)(a2 + 32) = v108 + v107 * v111;
  *(double *)(a2 + 40) = v111;
  *(_BYTE *)(a2 + 48) = 1;
  if (v9)
    goto LABEL_104;
LABEL_105:
  if (v11)
    operator delete(v11);
  if (v10)
    operator delete(v10);
}

void sub_207D5E9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v23;
  void *v24;

  if (__p)
  {
    operator delete(__p);
    v23 = a18;
    if (!a18)
    {
LABEL_3:
      v24 = a21;
      if (!a21)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v23 = a18;
    if (!a18)
      goto LABEL_3;
  }
  operator delete(v23);
  v24 = a21;
  if (!a21)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_207D5EA3C(uint64_t *a1, uint64_t a2, _QWORD *a3, float *a4, float *a5, int a6, float a7, float a8, int8x16_t a9)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  float v30;
  int v31;
  int v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float32x2_t *v39;
  uint64_t v40;
  float v41;
  unint64_t v42;
  unint64_t v43;
  float32x2_t v44;
  unint64_t v45;
  double v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int8x16_t v51;
  float32x2_t *v52;
  unint64_t v53;
  const float *v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  unint64_t v64;
  float32x2_t *v65;
  float32x2_t v66;
  float v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  float *v71;
  float *v72;
  uint64_t v73;
  _QWORD *v74;
  float v75[2];
  float32x2_t *v76;
  float32x2_t *v77;
  uint64_t v78;
  float32x4x2_t v79;

  v15 = a1[1];
  v14 = a1[2];
  v16 = *a1;
  *a3 = 0;
  v17 = *(unsigned __int8 *)(a2 + 24);
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v74 = a3;
  if (&v76 != (float32x2_t **)a2 && v17)
  {
    sub_207D5F308(&v76, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    a3 = v74;
  }
  v18 = HIDWORD(v14);
  v19 = (HIDWORD(v14) * HIDWORD(v15));
  v71 = a4;
  v72 = a5;
  v68 = HIDWORD(v15);
  v69 = v15;
  v70 = v17;
  if (HIDWORD(v14) * HIDWORD(v15))
  {
    v20 = v15;
    if (v17 && a6)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      LODWORD(v24) = v18;
      v25 = HIDWORD(v15);
      v73 = v19;
      do
      {
        if (*(float *)(v16 + 4 * v21) > a7)
        {
          v26 = v21 / v18;
          v27 = v21 % v18;
          if (v21 % v18 <= v20)
          {
            v28 = v23;
            v75[0] = (float)(int)v27 * a8;
            v75[1] = (float)(int)v26 * a8;
            v29 = sub_207CF3A50(&v76, v75, 0, 0.000001);
            a3 = v74;
            v23 = v28;
            if (v29)
            {
              ++*v74;
              if ((int)v24 >= (int)v27)
                LODWORD(v24) = v21 % v18;
              if (v22 <= (int)v27 + 1)
                v22 = v27 + 1;
              if ((int)v25 >= (int)v26)
                LODWORD(v25) = v21 / v18;
              if ((int)v28 <= (int)v26 + 1)
                v23 = (v26 + 1);
              else
                v23 = v28;
            }
            v19 = v73;
          }
        }
        ++v21;
      }
      while (v19 != v21);
    }
    else
    {
      v47 = 0;
      v22 = 0;
      LODWORD(v23) = 0;
      v48 = *a3;
      LODWORD(v24) = v18;
      v25 = HIDWORD(v15);
      do
      {
        if (*(float *)(v16 + 4 * v47) > a7)
        {
          v49 = v47 / v18;
          v50 = v47 % v18;
          if (v47 % v18 <= v20)
          {
            *a3 = ++v48;
            if ((int)v24 >= (int)v50)
              LODWORD(v24) = v47 % v18;
            if (v22 <= (int)v50 + 1)
              v22 = v50 + 1;
            if ((int)v25 >= (int)v49)
              LODWORD(v25) = v47 / v18;
            if ((int)v23 <= (int)v49 + 1)
              LODWORD(v23) = v49 + 1;
          }
        }
        ++v47;
      }
      while (v19 != v47);
    }
  }
  else
  {
    LODWORD(v23) = 0;
    v22 = 0;
    v25 = HIDWORD(v15);
    v24 = HIDWORD(v14);
  }
  v30 = -1.0;
  v31 = (int)(float)((float)((float)v22 * a8) + -1.0);
  if (v31 < 0)
  {
    a9.i32[0] = -1.0;
    v35 = v72;
    *v71 = -1.0;
    v71[1] = -1.0;
    v71[2] = -1.0;
    v71[3] = -1.0;
    if (v70)
      goto LABEL_37;
LABEL_56:
    v41 = (float)((float)((float)v69 * a8) * (float)v68) * a8;
    v39 = v76;
    goto LABEL_57;
  }
  v32 = (int)(float)((float)((float)(int)v23 * a8) + -1.0);
  a9.i32[0] = -1.0;
  v33 = -1.0;
  v34 = -1.0;
  v35 = v72;
  if ((v32 & 0x80000000) == 0)
  {
    v36 = (float)(int)(float)((float)(int)v24 * a8);
    v37 = (float)(int)(float)((float)(int)v25 * a8);
    v30 = (float)v31;
    v38 = (float)v32;
    if (v36 <= (float)v31)
      v33 = (float)v31;
    else
      v33 = (float)(int)(float)((float)(int)v24 * a8);
    if (v36 <= (float)v31)
      v30 = (float)(int)(float)((float)(int)v24 * a8);
    if (v37 <= v38)
      v34 = (float)v32;
    else
      v34 = (float)(int)(float)((float)(int)v25 * a8);
    if (v37 <= v38)
      *(float *)a9.i32 = (float)(int)(float)((float)(int)v25 * a8);
    else
      *(float *)a9.i32 = (float)v32;
  }
  *v71 = v30;
  v71[1] = *(float *)a9.i32;
  v71[2] = v33;
  v71[3] = v34;
  if (!v70)
    goto LABEL_56;
LABEL_37:
  v39 = v76;
  v40 = (char *)v77 - (char *)v76;
  v41 = 0.0;
  if ((unint64_t)((char *)v77 - (char *)v76) >= 0x18)
  {
    v42 = v40 & 0xFFFFFFFFFFFFFFF8;
    if ((unint64_t)(v40 >> 3) <= 1)
      v43 = 1;
    else
      v43 = v40 >> 3;
    v44 = *(float32x2_t *)((char *)v76 + v42 - 8);
    if (v43 >= 8)
    {
      a9.u64[1] = *(unint64_t *)((char *)v76 + v42 - 8);
      v45 = v43 & 0xFFFFFFFFFFFFFFF8;
      v51 = (int8x16_t)vdupq_lane_s32((int32x2_t)v44, 0);
      v52 = v76 + 4;
      v46 = 0.0;
      v53 = v43 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v54 = (const float *)&v52[-4];
        v79 = vld2q_f32(v54);
        v56 = *(int32x4_t *)v52->f32;
        v55 = *(int8x16_t *)v52[2].f32;
        v52 += 8;
        v57 = (int8x16_t)vuzp1q_s32(v56, (int32x4_t)v55);
        v58 = (int8x16_t)vuzp2q_s32(v56, (int32x4_t)v55);
        v59 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v51, (int8x16_t)v79.val[0], 0xCuLL), v79.val[0]), vsubq_f32(v79.val[1], (float32x4_t)vextq_s8(a9, (int8x16_t)v79.val[1], 0xCuLL)));
        v60 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v79.val[0], v57, 0xCuLL), (float32x4_t)v57), vsubq_f32((float32x4_t)v58, (float32x4_t)vextq_s8((int8x16_t)v79.val[1], v58, 0xCuLL)));
        v79.val[0] = (float32x4_t)vcvt_hight_f64_f32(v59);
        v61 = vcvtq_f64_f32(*(float32x2_t *)v59.f32);
        v62 = vcvt_hight_f64_f32(v60);
        v63 = vcvtq_f64_f32(*(float32x2_t *)v60.f32);
        v46 = v46
            + v61.f64[0]
            + v61.f64[1]
            + *(double *)v79.val[0].i64
            + *(double *)&v79.val[0].i64[1]
            + v63.f64[0]
            + v63.f64[1]
            + v62.f64[0]
            + v62.f64[1];
        a9 = v58;
        v51 = v57;
        v53 -= 8;
      }
      while (v53);
      if (v43 == v45)
        goto LABEL_65;
      v44 = (float32x2_t)vextq_s8(v55, v55, 8uLL).u64[0];
    }
    else
    {
      v45 = 0;
      v46 = 0.0;
    }
    v64 = v43 - v45;
    v65 = &v76[v45];
    do
    {
      v66 = *v65++;
      v46 = v46 + vmul_lane_f32(vadd_f32(v66, v44), vsub_f32(v66, v44), 1).f32[0];
      v44 = v66;
      --v64;
    }
    while (v64);
LABEL_65:
    v67 = v46 * 0.5;
    *v35 = (float)(unint64_t)*a3 / v67;
    goto LABEL_66;
  }
LABEL_57:
  *v35 = (float)(unint64_t)*a3 / v41;
  if (v39)
  {
LABEL_66:
    v77 = v39;
    operator delete(v39);
  }
}

void sub_207D5EE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207D5EE94(uint64_t *a1, uint64_t a2, _QWORD *a3, float *a4, float *a5, int a6, float a7, float a8, int8x16_t a9)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v31;
  int v32;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float32x2_t *v49;
  uint64_t v50;
  float v51;
  unint64_t v52;
  unint64_t v53;
  float32x2_t v54;
  unint64_t v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v62;
  unint64_t v63;
  int8x16_t v64;
  float32x2_t *v65;
  unint64_t v66;
  const float *v67;
  int8x16_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  unint64_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  float *v84;
  float *v85;
  _QWORD *v86;
  float v87[2];
  float32x2_t *v88;
  float32x2_t *v89;
  uint64_t v90;
  float32x4x2_t v91;

  _S9 = a7;
  v15 = a1[1];
  v14 = a1[2];
  v16 = *a1;
  *a3 = 0;
  v17 = *(unsigned __int8 *)(a2 + 24);
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v86 = a3;
  if (&v88 != (float32x2_t **)a2 && v17)
  {
    sub_207D5F308(&v88, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    a3 = v86;
  }
  v18 = HIDWORD(v15);
  v19 = HIDWORD(v14);
  v20 = (HIDWORD(v14) * HIDWORD(v15));
  v84 = a4;
  v85 = a5;
  v81 = HIDWORD(v15);
  v82 = v15;
  v83 = v17;
  if (HIDWORD(v14) * HIDWORD(v15))
  {
    __asm { FCVT            H0, S9 }
    v26 = v15;
    if (v17 && a6)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      __asm { FCVT            S9, H0 }
      v31 = HIDWORD(v14);
      v32 = v18;
      do
      {
        _H0 = *(_WORD *)(v16 + 2 * v27);
        __asm { FCVT            S0, H0 }
        if (_S0 > _S9)
        {
          v35 = v27 / v19;
          v36 = v27 % v19;
          if (v27 % v19 <= v26)
          {
            v37 = v31;
            v38 = v26;
            v87[0] = (float)(int)v36 * a8;
            v87[1] = (float)(int)v35 * a8;
            v39 = sub_207CF3A50(&v88, v87, 0, 0.000001);
            a3 = v86;
            v31 = v37;
            if (v39)
            {
              ++*v86;
              if ((int)v37 >= (int)v36)
                v31 = v36;
              else
                v31 = v37;
              if (v28 <= (int)v36 + 1)
                v28 = v36 + 1;
              if (v32 >= (int)v35)
                v32 = v27 / v19;
              if (v29 <= (int)v35 + 1)
                v29 = v35 + 1;
            }
            v26 = v38;
            v20 = (HIDWORD(v14) * HIDWORD(v15));
          }
        }
        ++v27;
      }
      while (v20 != v27);
    }
    else
    {
      v57 = 0;
      v28 = 0;
      v29 = 0;
      v58 = *a3;
      __asm { FCVT            S0, H0 }
      v31 = HIDWORD(v14);
      v32 = v18;
      do
      {
        _H1 = *(_WORD *)(v16 + 2 * v57);
        __asm { FCVT            S1, H1 }
        if (_S1 > _S0)
        {
          v62 = v57 / v19;
          v63 = v57 % v19;
          if (v57 % v19 <= v26)
          {
            *a3 = ++v58;
            if ((int)v31 >= (int)v63)
              LODWORD(v31) = v57 % v19;
            if (v28 <= (int)v63 + 1)
              v28 = v63 + 1;
            if (v32 >= (int)v62)
              v32 = v57 / v19;
            if (v29 <= (int)v62 + 1)
              v29 = v62 + 1;
          }
        }
        ++v57;
      }
      while (v20 != v57);
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
    v32 = v18;
    LODWORD(v31) = v19;
  }
  v40 = -1.0;
  v41 = (int)(float)((float)((float)v28 * a8) + -1.0);
  if (v41 < 0)
  {
    a9.i32[0] = -1.0;
    v45 = v85;
    *v84 = -1.0;
    v84[1] = -1.0;
    v84[2] = -1.0;
    v84[3] = -1.0;
    if (v83)
      goto LABEL_37;
LABEL_56:
    v51 = (float)((float)((float)v82 * a8) * (float)v81) * a8;
    v49 = v88;
    goto LABEL_57;
  }
  v42 = (int)(float)((float)((float)v29 * a8) + -1.0);
  a9.i32[0] = -1.0;
  v43 = -1.0;
  v44 = -1.0;
  v45 = v85;
  if ((v42 & 0x80000000) == 0)
  {
    v46 = (float)(int)(float)((float)(int)v31 * a8);
    v47 = (float)(int)(float)((float)v32 * a8);
    v40 = (float)v41;
    v48 = (float)v42;
    if (v46 <= (float)v41)
      v43 = (float)v41;
    else
      v43 = (float)(int)(float)((float)(int)v31 * a8);
    if (v46 <= (float)v41)
      v40 = (float)(int)(float)((float)(int)v31 * a8);
    if (v47 <= v48)
      v44 = (float)v42;
    else
      v44 = (float)(int)(float)((float)v32 * a8);
    if (v47 <= v48)
      *(float *)a9.i32 = (float)(int)(float)((float)v32 * a8);
    else
      *(float *)a9.i32 = (float)v42;
  }
  *v84 = v40;
  v84[1] = *(float *)a9.i32;
  v84[2] = v43;
  v84[3] = v44;
  if (!v83)
    goto LABEL_56;
LABEL_37:
  v49 = v88;
  v50 = (char *)v89 - (char *)v88;
  v51 = 0.0;
  if ((unint64_t)((char *)v89 - (char *)v88) >= 0x18)
  {
    v52 = v50 & 0xFFFFFFFFFFFFFFF8;
    if ((unint64_t)(v50 >> 3) <= 1)
      v53 = 1;
    else
      v53 = v50 >> 3;
    v54 = *(float32x2_t *)((char *)v88 + v52 - 8);
    if (v53 >= 8)
    {
      a9.u64[1] = *(unint64_t *)((char *)v88 + v52 - 8);
      v55 = v53 & 0xFFFFFFFFFFFFFFF8;
      v64 = (int8x16_t)vdupq_lane_s32((int32x2_t)v54, 0);
      v65 = v88 + 4;
      v56 = 0.0;
      v66 = v53 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v67 = (const float *)&v65[-4];
        v91 = vld2q_f32(v67);
        v69 = *(int32x4_t *)v65->f32;
        v68 = *(int8x16_t *)v65[2].f32;
        v65 += 8;
        v70 = (int8x16_t)vuzp1q_s32(v69, (int32x4_t)v68);
        v71 = (int8x16_t)vuzp2q_s32(v69, (int32x4_t)v68);
        v72 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v64, (int8x16_t)v91.val[0], 0xCuLL), v91.val[0]), vsubq_f32(v91.val[1], (float32x4_t)vextq_s8(a9, (int8x16_t)v91.val[1], 0xCuLL)));
        v73 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v91.val[0], v70, 0xCuLL), (float32x4_t)v70), vsubq_f32((float32x4_t)v71, (float32x4_t)vextq_s8((int8x16_t)v91.val[1], v71, 0xCuLL)));
        v91.val[0] = (float32x4_t)vcvt_hight_f64_f32(v72);
        v74 = vcvtq_f64_f32(*(float32x2_t *)v72.f32);
        v75 = vcvt_hight_f64_f32(v73);
        v76 = vcvtq_f64_f32(*(float32x2_t *)v73.f32);
        v56 = v56
            + v74.f64[0]
            + v74.f64[1]
            + *(double *)v91.val[0].i64
            + *(double *)&v91.val[0].i64[1]
            + v76.f64[0]
            + v76.f64[1]
            + v75.f64[0]
            + v75.f64[1];
        a9 = v71;
        v64 = v70;
        v66 -= 8;
      }
      while (v66);
      if (v53 == v55)
        goto LABEL_65;
      v54 = (float32x2_t)vextq_s8(v68, v68, 8uLL).u64[0];
    }
    else
    {
      v55 = 0;
      v56 = 0.0;
    }
    v77 = v53 - v55;
    v78 = &v88[v55];
    do
    {
      v79 = *v78++;
      v56 = v56 + vmul_lane_f32(vadd_f32(v79, v54), vsub_f32(v79, v54), 1).f32[0];
      v54 = v79;
      --v77;
    }
    while (v77);
LABEL_65:
    v80 = v56 * 0.5;
    *v45 = (float)(unint64_t)*a3 / v80;
    goto LABEL_66;
  }
LABEL_57:
  *v45 = (float)(unint64_t)*a3 / v51;
  if (v49)
  {
LABEL_66:
    v89 = v49;
    operator delete(v49);
  }
}

void sub_207D5F2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207D5F308(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v7 = result;
  v8 = result[2];
  v9 = *result;
  v10 = (_QWORD *)*result;
  if (__sz <= (v8 - *result) >> 3)
  {
    v17 = (_QWORD **)(result + 1);
    v18 = result[1];
    v19 = v18 - v9;
    v20 = (v18 - v9) >> 3;
    if (v20 < __sz)
    {
      v21 = &a2[8 * v20];
      if (v18 == v9)
        goto LABEL_35;
      if ((unint64_t)(v19 - 8) < 0x18)
      {
        v22 = a2;
      }
      else
      {
        v22 = a2;
        if ((unint64_t)(v9 - (_QWORD)a2) >= 0x20)
        {
          v23 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v10 = (_QWORD *)(v9 + v24);
          v22 = &a2[v24];
          v25 = (__int128 *)(a2 + 16);
          v26 = (_OWORD *)(v9 + 16);
          v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = *v25;
            *(v26 - 1) = *(v25 - 1);
            *v26 = v28;
            v25 += 2;
            v26 += 2;
            v27 -= 4;
          }
          while (v27);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_34;
        }
      }
      do
      {
        v39 = *(_QWORD *)v22;
        v22 += 8;
        *v10++ = v39;
      }
      while (v22 != v21);
LABEL_34:
      v10 = *v17;
LABEL_35:
      v40 = (char *)v10;
      if (v21 != a3)
      {
        v41 = a3 - &a2[v19] - 8;
        if (v41 >= 0x38)
        {
          v40 = (char *)v10;
          if ((unint64_t)((char *)v10 - v19 - a2) >= 0x20)
          {
            v42 = (v41 >> 3) + 1;
            v43 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            v21 += v43 * 8;
            v40 = (char *)&v10[v43];
            v44 = v10 + 2;
            v45 = &a2[8 * v20 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *v44 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_43;
          }
        }
        else
        {
          v40 = (char *)v10;
        }
        do
        {
          v48 = *(_QWORD *)v21;
          v21 += 8;
          *(_QWORD *)v40 = v48;
          v40 += 8;
        }
        while (v21 != a3);
      }
LABEL_43:
      v16 = (char *)(v40 - (char *)v10);
      goto LABEL_44;
    }
    if (a2 == a3)
    {
      v16 = (char *)v10 - v9;
      goto LABEL_44;
    }
    v29 = a3 - a2 - 8;
    if (v29 < 0x18 || (unint64_t)(v9 - (_QWORD)a2) < 0x20)
    {
      v32 = (_QWORD *)*result;
      v33 = a2;
    }
    else
    {
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v32 = (_QWORD *)(v9 + v31);
      v33 = &a2[v31];
      v34 = (__int128 *)(a2 + 16);
      v35 = (_OWORD *)(v9 + 16);
      v36 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *v35 = v37;
        v34 += 2;
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_31;
    }
    do
    {
      v38 = *(_QWORD *)v33;
      v33 += 8;
      *v32++ = v38;
    }
    while (v33 != a3);
LABEL_31:
    v16 = (char *)v32 - v9;
    goto LABEL_44;
  }
  if (v10)
  {
    result[1] = v10;
    operator delete(v10);
    v8 = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  if (__sz >> 61)
    goto LABEL_45;
  v11 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v11 = __sz;
  v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v11;
  if (v13 >> 61)
LABEL_45:
    sub_207CA420C();
  v14 = v13;
  result = operator new(8 * v13);
  v10 = result;
  *v7 = result;
  v7[1] = result;
  v7[2] = &result[v14];
  v15 = (char *)result;
  if (a2 != a3)
  {
    result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF8);
    v15 = (char *)v10 + ((a3 - a2) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = (char *)(v15 - (char *)v10);
  v17 = (_QWORD **)(v7 + 1);
LABEL_44:
  *v17 = &v16[(_QWORD)v10];
  return result;
}

uint64_t sub_207D5F5D4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C084918;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

void sub_207D5F62C(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C084918;
  if (*((_BYTE *)a1 + 152))
  {
    v2 = (void *)a1[16];
    if (v2)
    {
      a1[17] = v2;
      operator delete(v2);
    }
  }
  *a1 = off_24C084A40;
  sub_207CA6534((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_207D5F684(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C084970;
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

void sub_207D5F700(void **a1)
{
  *a1 = off_24C084970;
  if (*((_BYTE *)a1 + 200) && *((char *)a1 + 199) < 0)
  {
    operator delete(a1[22]);
    if (!*((_BYTE *)a1 + 152))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)a1 + 152))
  {
    goto LABEL_7;
  }
  if (*((char *)a1 + 151) < 0)
    operator delete(a1[16]);
LABEL_7:
  *a1 = off_24C084A40;
  sub_207CA6534((uint64_t)(a1 + 1));
  operator delete(a1);
}

void sub_207D5F77C(void **a1@<X0>, uint64_t a2@<X1>, void ***a3@<X8>)
{
  void **v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  char v8;
  void *v9;
  size_t v10;
  char v11;
  void *v12;
  size_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unsigned int v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  BOOL v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  int32x2_t v60;
  uint64_t v61;
  __int128 *v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  unint64_t v79;
  _BYTE *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  float v89;
  double v90;
  float v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float32x4_t v96;
  float32x4_t v97;
  uint64_t v98;
  uint64_t v99;
  int64x2_t v100;
  float32x4_t v101;
  int64x2_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int32x4_t v107;
  float32x4_t *v108;
  _OWORD *v109;
  int64x2_t v110;
  int64x2_t v111;
  uint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  unint64_t v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t v118;
  _BYTE *v119;
  unint64_t v120;
  _BYTE *v121;
  unint64_t v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unint64_t v128;
  _BOOL4 v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  __int128 v135;
  double v136;
  __int128 v137;
  void *v138;
  void *v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  BOOL v158;
  std::__shared_weak_count *v159;
  BOOL v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t *v174;
  std::__shared_weak_count *v175;
  uint64_t **v178;
  unint64_t v179;
  __int128 v180;
  void *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned __int8 v189;
  char v190;
  uint64_t v191;
  char v192;
  char v193;
  char v194;
  char v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  void **v199;
  std::__shared_weak_count *v200;
  __int128 __dst;
  uint64_t v202;
  __int128 v203;
  _BYTE v204[32];
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  char v209;
  __int128 v210;
  std::__shared_weak_count_vtbl *v211;
  char v212;
  __int128 v213;
  __int128 v214;
  std::__shared_weak_count_vtbl *v215;
  char v216;
  __int128 v217;
  _BYTE v218[56];
  _BYTE v219[24];
  __int128 v220;
  uint64_t v221;
  char v222;
  __int128 v223;
  std::__shared_weak_count_vtbl *v224;
  char v225;
  __int128 v226;
  __int128 v227;
  std::__shared_weak_count_vtbl *v228;
  char v229;
  __int128 __p;
  char *v231;
  char v232;
  __int128 v233;
  __int128 __src;
  std::__shared_weak_count_vtbl *v235;
  char v236;
  unint64_t v237;
  uint64_t (**v238)();
  char v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count *v242;
  std::__shared_weak_count *v243;
  char *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;

  v4 = (void **)operator new(0x2B8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  sub_207D051B4((uint64_t)(v4 + 3));
  v178 = (uint64_t **)(v4 + 38);
  v5 = (uint64_t *)(v4 + 40);
  v4[40] = 0;
  v4[41] = 0;
  v4[38] = 0;
  v4[39] = v4 + 40;
  v173 = (uint64_t *)(v4 + 45);
  v174 = (uint64_t *)(v4 + 42);
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  *((_OWORD *)v4 + 24) = 0u;
  *((_OWORD *)v4 + 25) = 0u;
  *((_OWORD *)v4 + 26) = 0u;
  *((_OWORD *)v4 + 27) = 0u;
  *((_OWORD *)v4 + 28) = 0u;
  *((_OWORD *)v4 + 29) = 0u;
  *((_OWORD *)v4 + 30) = 0u;
  *((_OWORD *)v4 + 31) = 0u;
  *((_OWORD *)v4 + 32) = 0u;
  *((_OWORD *)v4 + 33) = 0u;
  *((_OWORD *)v4 + 34) = 0u;
  LODWORD(__dst) = 0;
  *((_BYTE *)v4 + 624) = 0;
  *((_OWORD *)v4 + 35) = 0u;
  *((_OWORD *)v4 + 36) = 0u;
  *((_OWORD *)v4 + 37) = 0u;
  *((_BYTE *)v4 + 608) = 0;
  v179 = 0;
  *(_QWORD *)&v180 = 0;
  v217 = 0uLL;
  sub_207D68AEC((uint64_t)(v4 + 79), (unsigned int *)&v217, &v179, 1, (float *)&__dst, 1, 0);
  v199 = v4;
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073E48;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v175 = v6;
  v200 = v6;
  if (v4 != a1)
  {
    v8 = *((_BYTE *)a1 + 23);
    if (*((char *)v4 + 23) < 0)
    {
      if (v8 >= 0)
        v9 = a1;
      else
        v9 = *a1;
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)a1 + 23);
      else
        v10 = (size_t)a1[1];
      sub_207CC2244(v4, v9, v10);
    }
    else if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
    {
      sub_207CC2180(v4, *a1, (size_t)a1[1]);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)a1;
      v4[2] = a1[2];
    }
  }
  sub_207D27668((uint64_t)(v4 + 3), (uint64_t)(a1 + 3));
  sub_207D2843C((uint64_t)&v179, (uint64_t)(a1 + 3));
  if (&v180 != (__int128 *)a1)
  {
    v11 = *((_BYTE *)a1 + 23);
    if (SHIBYTE(v181) < 0)
    {
      if (v11 >= 0)
        v12 = a1;
      else
        v12 = *a1;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a1 + 23);
      else
        v13 = (size_t)a1[1];
      sub_207CC2244((void **)&v180, v12, v13);
    }
    else if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
    {
      sub_207CC2180(&v180, *a1, (size_t)a1[1]);
    }
    else
    {
      v180 = *(_OWORD *)a1;
      v181 = a1[2];
    }
  }
  kdebug_trace();
  if (v188)
  {
    sub_207D69C30((uint64_t)&v237, (uint64_t)&v179);
    sub_207DE5124((uint64_t)&v182, (uint64_t)&__p);
    *(_QWORD *)&v217 = off_24C084A40;
    sub_207CA4F70((uint64_t)&v217 + 8, (uint64_t *)&v237);
    *(_QWORD *)&v217 = off_24C084970;
    LOBYTE(v223) = 0;
    v225 = 0;
    if (v232)
    {
      if (SHIBYTE(v231) < 0)
      {
        sub_207CA40D8(&v223, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        v223 = __p;
        v224 = (std::__shared_weak_count_vtbl *)v231;
      }
      v225 = 1;
    }
    v226 = v233;
    LOBYTE(v227) = 0;
    v229 = 0;
    if (v236)
    {
      if (SHIBYTE(v235) < 0)
      {
        sub_207CA40D8(&v227, (void *)__src, *((unint64_t *)&__src + 1));
        v229 = 1;
        if (v236 && SHIBYTE(v235) < 0)
          operator delete((void *)__src);
      }
      else
      {
        v227 = __src;
        v228 = v235;
        v229 = 1;
      }
    }
    if (v232 && SHIBYTE(v231) < 0)
      operator delete((void *)__p);
    sub_207CA6534((uint64_t)&v237);
    *((_QWORD *)&__dst + 1) = *((_QWORD *)&v217 + 1);
    LODWORD(v202) = *(_DWORD *)v218;
    v203 = *(_OWORD *)&v218[8];
    memset(&v218[8], 0, 48);
    *(_OWORD *)&v204[8] = *(_OWORD *)&v218[32];
    *(_QWORD *)v204 = *(_QWORD *)&v218[24];
    *(_QWORD *)&v204[24] = *(_QWORD *)&v218[48];
    v205 = *(_OWORD *)v219;
    v206 = *(_QWORD *)&v219[16];
    memset(v219, 0, sizeof(v219));
    LOBYTE(v207) = 0;
    v209 = 0;
    if (v222)
    {
      v207 = v220;
      v208 = v221;
      v221 = 0;
      v220 = 0uLL;
      v209 = 1;
    }
    *(_QWORD *)&__dst = off_24C084970;
    LOBYTE(v210) = 0;
    v212 = 0;
    if (v225)
    {
      v210 = v223;
      v211 = v224;
      v224 = 0;
      v223 = 0uLL;
      v212 = 1;
    }
    v213 = v226;
    LOBYTE(v214) = 0;
    v216 = 0;
    if (v229)
    {
      v214 = v227;
      v215 = v228;
      v228 = 0;
      v227 = 0uLL;
      v216 = 1;
    }
    *(_QWORD *)&v217 = off_24C084970;
    if (v225 && SHIBYTE(v224) < 0)
      operator delete((void *)v223);
    *(_QWORD *)&v217 = off_24C084A40;
    sub_207CA6534((uint64_t)&v217 + 8);
    *(_QWORD *)&__dst = off_24C073CC0;
    sub_2080A1D38((uint64_t)&__dst, (uint64_t)&v237);
    if (v239)
    {
      LOBYTE(v217) = 0;
      v218[8] = 0;
      *(_QWORD *)&v218[16] = off_24C06E9E8;
      v218[24] = v239;
      v22 = v241;
      *(_QWORD *)&v218[32] = v240;
      *(_QWORD *)&v218[40] = v241;
      if (!v241)
        goto LABEL_275;
      v23 = (unint64_t *)&v241->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v238 = off_24C06E9E8;
    }
    else
    {
      v25 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__shared_weak_owners_ = 0;
      v25->__vftable = (std::__shared_weak_count_vtbl *)off_24C073DA8;
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084A40;
      sub_207CA4F70((uint64_t)&v25[1].__shared_owners_, (uint64_t *)&__dst + 1);
      LOBYTE(v25[6].__shared_owners_) = 0;
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084970;
      LOBYTE(v25[7].__shared_owners_) = 0;
      if (v212)
      {
        if (SHIBYTE(v211) < 0)
        {
          sub_207CA40D8(&v25[6].__shared_owners_, (void *)v210, *((unint64_t *)&v210 + 1));
        }
        else
        {
          *(_OWORD *)&v25[6].__shared_owners_ = v210;
          v25[7].__vftable = v211;
        }
        LOBYTE(v25[7].__shared_owners_) = 1;
      }
      v140 = v213;
      LOBYTE(v25[8].__shared_owners_) = 0;
      *(_OWORD *)&v25[7].__shared_weak_owners_ = v140;
      LOBYTE(v25[9].__shared_owners_) = 0;
      if (v216)
      {
        if (SHIBYTE(v215) < 0)
        {
          sub_207CA40D8(&v25[8].__shared_owners_, (void *)v214, *((unint64_t *)&v214 + 1));
        }
        else
        {
          *(_OWORD *)&v25[8].__shared_owners_ = v214;
          v25[9].__vftable = v215;
        }
        LOBYTE(v25[9].__shared_owners_) = 1;
      }
      v25[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C073CC0;
      v242 = v25 + 1;
      v243 = v25;
      v245 = 0;
      v246 = 0;
      v141 = v237;
      v237 = 0;
      *(_QWORD *)&__p = v25 + 1;
      *((_QWORD *)&__p + 1) = v25;
      do
        v142 = __ldxr(v26);
      while (__stxr(v142 + 1, v26));
      if (!v141
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Model.cpp", 39, (uint64_t)"instance_ != nullptr", 20, (uint64_t)&unk_2082258F5, 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      *(_QWORD *)&v217 = v25 + 1;
      *((_QWORD *)&v217 + 1) = v25;
      __p = 0uLL;
      *(_QWORD *)v218 = v141;
      v218[8] = 1;
      *(_QWORD *)&v218[16] = off_24C06E9E8;
      v218[24] = 0;
      *(_QWORD *)&v218[32] = v240;
      *(_QWORD *)&v218[40] = v241;
      if (v241)
      {
        v143 = (unint64_t *)&v241->__shared_owners_;
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      v231 = 0;
      do
        v145 = __ldaxr(v26);
      while (__stlxr(v145 - 1, v26));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      v146 = v246;
      if (v246)
      {
        v147 = (unint64_t *)&v246->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v22 = v241;
      v238 = off_24C06E9E8;
      if (!v241)
      {
LABEL_275:
        if (v237)
          (*(void (**)(unint64_t))(*(_QWORD *)v237 + 8))(v237);
        *(_BYTE *)(a2 + 8) = v218[24];
        v151 = *(_QWORD *)&v218[32];
        v152 = *(_QWORD *)&v218[40];
        if (*(_QWORD *)&v218[40])
        {
          v153 = (unint64_t *)(*(_QWORD *)&v218[40] + 8);
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
        }
        v155 = *(std::__shared_weak_count **)(a2 + 24);
        *(_QWORD *)(a2 + 16) = v151;
        *(_QWORD *)(a2 + 24) = v152;
        if (!v155)
          goto LABEL_284;
        v156 = (unint64_t *)&v155->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
          if (v218[24])
            v160 = 1;
          else
            v160 = v218[8] == 0;
          if (!v160)
          {
LABEL_295:
            v49 = (uint64_t *)operator new(0x18uLL);
            *(_OWORD *)v49 = v217;
            v161 = *(_QWORD *)v218;
            *(_QWORD *)v218 = 0;
            v217 = 0uLL;
            v49[2] = v161;
            *(_QWORD *)&v218[16] = off_24C06E9E8;
            v159 = *(std::__shared_weak_count **)&v218[40];
            if (!*(_QWORD *)&v218[40])
              goto LABEL_300;
LABEL_296:
            v162 = (unint64_t *)&v159->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
LABEL_300:
            if (v218[8])
            {
              v164 = *(_QWORD *)v218;
              *(_QWORD *)v218 = 0;
              if (v164)
                (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
              v165 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
              if (*((_QWORD *)&v217 + 1))
              {
                v166 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
            }
            *(_QWORD *)&__dst = off_24C084970;
            if (v216 && SHIBYTE(v215) < 0)
              operator delete((void *)v214);
            if (v212 && SHIBYTE(v211) < 0)
              operator delete((void *)v210);
            *(_QWORD *)&__dst = off_24C084A40;
            sub_207CA6534((uint64_t)&__dst + 8);
            v59 = *v178;
            *v178 = v49;
            if (v59)
              goto LABEL_315;
LABEL_142:
            if (!v49)
              goto LABEL_322;
            goto LABEL_143;
          }
        }
        else
        {
LABEL_284:
          if (v218[24])
            v158 = 1;
          else
            v158 = v218[8] == 0;
          if (!v158)
            goto LABEL_295;
        }
        v49 = 0;
        *(_QWORD *)&v218[16] = off_24C06E9E8;
        v159 = *(std::__shared_weak_count **)&v218[40];
        if (!*(_QWORD *)&v218[40])
          goto LABEL_300;
        goto LABEL_296;
      }
    }
    v149 = (unint64_t *)&v22->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_275;
  }
  sub_207D69C30((uint64_t)&v237, (uint64_t)&v179);
  sub_207D69C30((uint64_t)&v217, (uint64_t)&v179);
  v243 = 0;
  v244 = 0;
  v242 = 0;
  if (*(_QWORD *)&v218[32] == *(_QWORD *)&v218[24])
  {
    v15 = 0;
    __p = 0uLL;
    v231 = 0;
    v232 = 1;
    *(_QWORD *)&v233 = 0;
    WORD4(v233) = 0;
    if (v187)
      goto LABEL_32;
LABEL_75:
    v27 = (unsigned __int16)sub_207CF7368();
    if (v27 <= 0x100)
      LOBYTE(v27) = 0;
    if ((_BYTE)v27)
      v28 = 1;
    else
      v28 = 2;
    LODWORD(v233) = v28;
    if (!v189)
      v28 = 1;
    DWORD1(v233) = v28;
    if (v15)
      goto LABEL_33;
    goto LABEL_34;
  }
  v14 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)&v218[32] - *(_QWORD *)&v218[24]) >> 3);
  if (v14 >= 0x924924924924925)
    sub_207D4E938();
  v15 = (std::__shared_weak_count *)operator new(0xAAAAAAAAAAAAAAACLL* ((uint64_t)(*(_QWORD *)&v218[32] - *(_QWORD *)&v218[24]) >> 3));
  v242 = v15;
  v244 = (char *)v15 + 28 * v14;
  v16 = 28 * ((28 * v14 - 28) / 0x1C);
  bzero(v15, v16 + 28);
  __p = 0uLL;
  v231 = 0;
  v17 = (char *)operator new(v16 + 28);
  v18 = &v17[v16 + 28];
  *(_QWORD *)&__p = v17;
  v231 = v18;
  memcpy(v17, v15, v16 + 26);
  *((_QWORD *)&__p + 1) = v18;
  v232 = 1;
  *(_QWORD *)&v233 = 0;
  WORD4(v233) = 0;
  if (!v187)
    goto LABEL_75;
LABEL_32:
  LODWORD(v233) = 3;
  DWORD1(v233) = 2 * v189;
  if (v15)
LABEL_33:
    operator delete(v15);
LABEL_34:
  sub_207CA6534((uint64_t)&v217);
  *(_QWORD *)&v217 = off_24C084A40;
  sub_207CA4F70((uint64_t)&v217 + 8, (uint64_t *)&v237);
  *(_QWORD *)&v217 = off_24C084918;
  sub_207D4EC30((uint64_t)&v223, (uint64_t)&__p);
  *(_QWORD *)&v226 = v233;
  WORD4(v226) = WORD4(v233);
  if (v232 && (_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  sub_207CA6534((uint64_t)&v237);
  *((_QWORD *)&__dst + 1) = *((_QWORD *)&v217 + 1);
  LODWORD(v202) = *(_DWORD *)v218;
  v203 = *(_OWORD *)&v218[8];
  memset(&v218[8], 0, 48);
  *(_OWORD *)&v204[8] = *(_OWORD *)&v218[32];
  *(_QWORD *)v204 = *(_QWORD *)&v218[24];
  *(_QWORD *)&v204[24] = *(_QWORD *)&v218[48];
  v205 = *(_OWORD *)v219;
  v206 = *(_QWORD *)&v219[16];
  memset(v219, 0, sizeof(v219));
  LOBYTE(v207) = 0;
  v209 = 0;
  if (v222)
  {
    v207 = v220;
    v208 = v221;
    v221 = 0;
    v220 = 0uLL;
    v209 = 1;
  }
  *(_QWORD *)&__dst = off_24C084918;
  LOBYTE(v210) = 0;
  v212 = 0;
  if (v225)
  {
    v210 = v223;
    v211 = v224;
    v224 = 0;
    v223 = 0uLL;
    v212 = 1;
  }
  *(_QWORD *)&v213 = v226;
  WORD4(v213) = WORD4(v226);
  *(_QWORD *)&v217 = off_24C084A40;
  sub_207CA6534((uint64_t)&v217 + 8);
  *(_QWORD *)&__dst = off_24C073C98;
  sub_2080A19F8((uint64_t)&__dst, (uint64_t)&v237);
  if (v239)
  {
    LOBYTE(v217) = 0;
    v218[8] = 0;
    *(_QWORD *)&v218[16] = off_24C06E9E8;
    v218[24] = v239;
    v19 = v241;
    *(_QWORD *)&v218[32] = v240;
    *(_QWORD *)&v218[40] = v241;
    if (!v241)
      goto LABEL_105;
    v20 = (unint64_t *)&v241->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v238 = off_24C06E9E8;
    goto LABEL_101;
  }
  v29 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v29->__shared_owners_ = 0;
  v30 = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)off_24C073DF8;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084A40;
  sub_207CA4F70((uint64_t)&v29[1].__shared_owners_, (uint64_t *)&__dst + 1);
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084918;
  sub_207D4EC30((uint64_t)&v29[6].__shared_owners_, (uint64_t)&v210);
  v29[7].__shared_weak_owners_ = v213;
  LOWORD(v29[8].__vftable) = WORD4(v213);
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C073C98;
  v242 = v29 + 1;
  v243 = v29;
  v245 = 0;
  v246 = 0;
  v31 = v237;
  v237 = 0;
  *(_QWORD *)&__p = v29 + 1;
  *((_QWORD *)&__p + 1) = v29;
  do
    v32 = __ldxr(v30);
  while (__stxr(v32 + 1, v30));
  if (!v31
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Model.cpp", 39, (uint64_t)"instance_ != nullptr", 20, (uint64_t)&unk_2082258F5, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&v217 = v29 + 1;
  *((_QWORD *)&v217 + 1) = v29;
  __p = 0uLL;
  *(_QWORD *)v218 = v31;
  v218[8] = 1;
  *(_QWORD *)&v218[16] = off_24C06E9E8;
  v218[24] = 0;
  *(_QWORD *)&v218[32] = v240;
  *(_QWORD *)&v218[40] = v241;
  if (v241)
  {
    v33 = (unint64_t *)&v241->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v231 = 0;
  do
    v35 = __ldaxr(v30);
  while (__stlxr(v35 - 1, v30));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  v36 = v246;
  if (v246)
  {
    v37 = (unint64_t *)&v246->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v19 = v241;
  v238 = off_24C06E9E8;
  if (v241)
  {
LABEL_101:
    v39 = (unint64_t *)&v19->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_105:
  if (v237)
    (*(void (**)(unint64_t))(*(_QWORD *)v237 + 8))(v237);
  *(_BYTE *)(a2 + 8) = v218[24];
  v41 = *(_QWORD *)&v218[32];
  v42 = *(_QWORD *)&v218[40];
  if (*(_QWORD *)&v218[40])
  {
    v43 = (unint64_t *)(*(_QWORD *)&v218[40] + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = *(std::__shared_weak_count **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = v42;
  if (!v45)
    goto LABEL_114;
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (v47)
  {
LABEL_114:
    if (v218[24])
      v48 = 1;
    else
      v48 = v218[8] == 0;
    if (!v48)
      goto LABEL_125;
LABEL_119:
    v49 = 0;
    *(_QWORD *)&v218[16] = off_24C06E9E8;
    v50 = *(std::__shared_weak_count **)&v218[40];
    if (!*(_QWORD *)&v218[40])
      goto LABEL_130;
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  if (v218[24])
    v51 = 1;
  else
    v51 = v218[8] == 0;
  if (v51)
    goto LABEL_119;
LABEL_125:
  v49 = (uint64_t *)operator new(0x18uLL);
  *(_OWORD *)v49 = v217;
  v52 = *(_QWORD *)v218;
  *(_QWORD *)v218 = 0;
  v217 = 0uLL;
  v49[2] = v52;
  *(_QWORD *)&v218[16] = off_24C06E9E8;
  v50 = *(std::__shared_weak_count **)&v218[40];
  if (!*(_QWORD *)&v218[40])
    goto LABEL_130;
LABEL_126:
  v53 = (unint64_t *)&v50->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
LABEL_130:
  if (v218[8])
  {
    v55 = *(_QWORD *)v218;
    *(_QWORD *)v218 = 0;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
    if (*((_QWORD *)&v217 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  *(_QWORD *)&__dst = off_24C084918;
  if (v212 && (_QWORD)v210)
  {
    *((_QWORD *)&v210 + 1) = v210;
    operator delete((void *)v210);
  }
  *(_QWORD *)&__dst = off_24C084A40;
  sub_207CA6534((uint64_t)&__dst + 8);
  v59 = *v178;
  *v178 = v49;
  if (!v59)
    goto LABEL_142;
LABEL_315:
  v168 = v59[2];
  v59[2] = 0;
  if (v168)
    (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
  v169 = (std::__shared_weak_count *)v59[1];
  if (!v169)
    goto LABEL_321;
  v170 = (unint64_t *)&v169->__shared_owners_;
  do
    v171 = __ldaxr(v170);
  while (__stlxr(v171 - 1, v170));
  if (!v171)
  {
    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
    std::__shared_weak_count::__release_weak(v169);
    operator delete(v59);
    if (!*v178)
    {
LABEL_322:
      *a3 = 0;
      a3[1] = 0;
      sub_207D04890((uint64_t)&v179);
      do
        v172 = __ldaxr(p_shared_owners);
      while (__stlxr(v172 - 1, p_shared_owners));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
      return;
    }
  }
  else
  {
LABEL_321:
    operator delete(v59);
    if (!*v178)
      goto LABEL_322;
  }
LABEL_143:
  kdebug_trace();
  v61 = **v178;
  v62 = *(__int128 **)(v61 + 48);
  v63 = *(__int128 **)(v61 + 56);
  if (v62 != v63)
  {
    while (1)
    {
      if (!*((_BYTE *)v62 + 24) || !*((_BYTE *)v62 + 80))
        sub_207CA2A4C();
      if (*((char *)v62 + 23) < 0)
      {
        sub_207CA40D8(&__dst, *(void **)v62, *((_QWORD *)v62 + 1));
      }
      else
      {
        v64 = *v62;
        v202 = *((_QWORD *)v62 + 2);
        __dst = v64;
      }
      v65 = v62[2];
      v66 = v62[4];
      *(_OWORD *)v204 = v62[3];
      *(_OWORD *)&v204[16] = v66;
      v203 = v65;
      v217 = __dst;
      *(_QWORD *)v218 = v202;
      __dst = 0uLL;
      v202 = 0;
      v68 = v62[3];
      v67 = v62[4];
      *(_OWORD *)&v218[8] = v62[2];
      *(_OWORD *)&v218[24] = v68;
      *(_OWORD *)&v218[40] = v67;
      v69 = sub_207D55CC8((uint64_t **)v4 + 39, v5, (const void **)&v217, (uint64_t)&v217);
      v70 = (uint64_t *)*((_QWORD *)v69 + 1);
      if (v70)
      {
        do
        {
          v5 = v70;
          v70 = (uint64_t *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v5 = (uint64_t *)*((_QWORD *)v69 + 2);
          v48 = *v5 == (_QWORD)v69;
          v69 = (char *)v5;
        }
        while (!v48);
      }
      if ((v218[7] & 0x80000000) != 0)
      {
        operator delete((void *)v217);
        if ((SHIBYTE(v202) & 0x80000000) == 0)
          goto LABEL_146;
LABEL_159:
        operator delete((void *)__dst);
        v62 = (__int128 *)((char *)v62 + 168);
        if (v62 == v63)
          break;
      }
      else
      {
        if (SHIBYTE(v202) < 0)
          goto LABEL_159;
LABEL_146:
        v62 = (__int128 *)((char *)v62 + 168);
        if (v62 == v63)
          break;
      }
    }
  }
  v72 = v183;
  v71 = v184;
  v73 = v185;
  v74 = v186;
  v75 = v191;
  v76 = v198;
  v77 = v186 * v185;
  v78 = v4[42];
  v79 = ((_BYTE *)v4[43] - v78) >> 2;
  if (v186 * v185 <= v79)
  {
    if (v186 * v185 < v79)
      v4[43] = &v78[4 * v77];
  }
  else
  {
    sub_207D55DD4((uint64_t)v174, v186 * v185 - v79);
  }
  v80 = v4[45];
  v81 = ((_BYTE *)v4[46] - v80) >> 2;
  if (v77 <= v81)
  {
    if (v77 < v81)
      v4[46] = &v80[4 * v77];
  }
  else
  {
    sub_207D55DD4((uint64_t)v173, v77 - v81);
  }
  v82 = v76 * v75;
  v83 = v76 * v75 * v77;
  v84 = v4[60];
  v85 = ((_BYTE *)v4[61] - v84) >> 2;
  if (v83 <= v85)
  {
    if (v83 < v85)
      v4[61] = &v84[4 * v83];
  }
  else
  {
    sub_207D55DD4((uint64_t)(v4 + 60), v83 - v85);
  }
  v86 = v4[63];
  v87 = ((_BYTE *)v4[64] - v86) >> 2;
  if (v83 <= v87)
  {
    if (v83 < v87)
      v4[64] = &v86[4 * v83];
  }
  else
  {
    sub_207D55DD4((uint64_t)(v4 + 63), v83 - v87);
  }
  if (v73 && v74)
  {
    v88 = 0;
    v89 = ((double)v183 + -1.0) * 0.5;
    v92 = (double)v184;
    v90 = ((double)v184 + -1.0) * 0.5;
    *(float *)&v90 = v90;
    v91 = (float)v183 / (float)v73;
    *(float *)&v92 = v91 * 0.5;
    v93 = *v174;
    v94 = *v173;
    v95 = 4 * v74;
    v96 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v92, 0);
    v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v90, 0);
    v98 = *v173 + 16;
    v99 = *v174 + 16;
    v100 = vdupq_n_s64(4uLL);
    v101.i64[0] = 0xBF000000BF000000;
    v101.i64[1] = 0xBF000000BF000000;
    v102 = vdupq_n_s64(8uLL);
    v103 = *v174;
    v104 = *v173;
    do
    {
      *(float *)v60.i32 = (float)((float)(*(float *)&v92 + (float)(v91 * (float)v88)) + -0.5) - v89;
      if (v74 >= 8)
      {
        if (v95 * v88 + v94 - (v95 * v88 + v93) >= 0x20)
        {
          v106 = v74 & 0xFFFFFFFFFFFFFFF8;
          v107 = vdupq_lane_s32(v60, 0);
          v108 = (float32x4_t *)v99;
          v109 = (_OWORD *)v98;
          v110 = (int64x2_t)xmmword_208234F90;
          v111 = (int64x2_t)xmmword_208234F80;
          do
          {
            v108[-1] = vsubq_f32(vaddq_f32(vaddq_f32(v96, vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v110)), vcvtq_f64_u64((uint64x2_t)v111)), v91)), v101), v97);
            *v108 = vsubq_f32(vaddq_f32(vaddq_f32(v96, vmulq_n_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v110, v100))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v111, v100))), v91)), v101), v97);
            *(v109 - 1) = v107;
            *v109 = v107;
            v111 = vaddq_s64(v111, v102);
            v110 = vaddq_s64(v110, v102);
            v109 += 2;
            v108 += 2;
            v106 -= 8;
          }
          while (v106);
          v105 = v74 & 0xFFFFFFFFFFFFFFF8;
          if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_179;
        }
        else
        {
          v105 = 0;
        }
      }
      else
      {
        v105 = 0;
      }
      do
      {
        v112 = 4 * v105;
        *(float *)(v103 + v112) = (float)((float)(*(float *)&v92 + (float)(v91 * (float)v105)) + -0.5) - *(float *)&v90;
        *(_DWORD *)(v104 + v112) = v60.i32[0];
        ++v105;
      }
      while (v74 != v105);
LABEL_179:
      ++v88;
      v98 += v95;
      v99 += v95;
      v104 += v95;
      v103 += v95;
    }
    while (v88 != v73);
  }
  if (v193)
  {
    v113 = 16 * v75 * v76;
    v114 = v4[57];
    v115 = ((_BYTE *)v4[58] - v114) >> 2;
    v116 = v113 - v115;
    if (v113 > v115)
    {
      v117 = v175;
LABEL_194:
      sub_207D55DD4((uint64_t)(v4 + 57), v116);
      goto LABEL_197;
    }
    v117 = v175;
    if (v113 >= v115)
      goto LABEL_197;
LABEL_196:
    v4[58] = &v114[4 * v113];
    goto LABEL_197;
  }
  v117 = v175;
  if (v192)
  {
    v113 = (v72 * v71 * v82) >> 2;
    v114 = v4[57];
    v118 = ((_BYTE *)v4[58] - v114) >> 2;
    v116 = v113 - v118;
    if (v113 > v118)
      goto LABEL_194;
    if (v113 >= v118)
      goto LABEL_197;
    goto LABEL_196;
  }
LABEL_197:
  if (v190)
  {
    v119 = v4[66];
    v120 = ((_BYTE *)v4[67] - v119) >> 2;
    if (9 * v82 <= v120)
    {
      if (9 * v82 < v120)
        v4[67] = &v119[36 * v82];
    }
    else
    {
      sub_207D55DD4((uint64_t)(v4 + 66), 9 * v82 - v120);
    }
  }
  if (v194)
  {
    v121 = v4[69];
    v122 = ((_BYTE *)v4[70] - v121) >> 2;
    if (v82 <= v122)
    {
      if (v82 < v122)
        v4[70] = &v121[4 * v82];
    }
    else
    {
      sub_207D55DD4((uint64_t)(v4 + 69), v82 - v122);
    }
  }
  if (v195)
  {
    LODWORD(__p) = 0;
    if (v197)
      v123 = v196 << 33 == 0;
    else
      v123 = 1;
    v124 = v123 || (_DWORD)v76 == 0;
    if (v124)
      v125 = 0;
    else
      v125 = v197 | ((unint64_t)v196 << 33);
    if (v124)
      v126 = 0;
    else
      v126 = (v76 << 32) | 1;
    v127 = HIDWORD(v125) * v125;
    if (HIDWORD(v125))
      v128 = v125 << 32;
    else
      v128 = 0;
    if (HIDWORD(v125))
      v129 = v125 == 0;
    else
      v129 = 1;
    if ((_DWORD)v126)
      v130 = v127;
    else
      v130 = 0;
    v131 = (unint64_t)(v127 * v126) << 32;
    v132 = HIDWORD(v126);
    if (!(_DWORD)v126)
      v129 = 1;
    *(_QWORD *)&v217 = v125;
    *((_QWORD *)&v217 + 1) = v126;
    if (!v132)
      v131 = 0;
    *(_QWORD *)v218 = v128 | ((_DWORD)v125 != 0);
    *(_QWORD *)&v218[8] = v131 | v130;
    v218[16] = 0;
    v218[32] = 0;
    *(_QWORD *)&__dst = *(_QWORD *)v218;
    *((_QWORD *)&__dst + 1) = v131 | v130;
    if (v132)
      v133 = v129;
    else
      v133 = 1;
    if (v133)
    {
      v125 = 0;
      v126 = 0;
    }
    v237 = v125;
    v238 = (uint64_t (**)())v126;
    if (((v131 >> 30) & ((v131 >> 30) - 1)) != 0)
      v134 = 4;
    else
      v134 = v131 >> 30;
    sub_207D68AEC((uint64_t)&v218[40], (unsigned int *)&v237, (unint64_t *)&__dst, 1, (float *)&__p, 1, v134);
    v135 = *(_OWORD *)v218;
    *((_OWORD *)v4 + 36) = v217;
    *((_OWORD *)v4 + 37) = v135;
    *((_OWORD *)v4 + 38) = *(_OWORD *)&v218[16];
    *((_DWORD *)v4 + 156) = *(_DWORD *)&v218[32];
    v136 = *(double *)&v219[8];
    v137 = v220;
    *((_OWORD *)v4 + 41) = *(_OWORD *)&v219[8];
    *((_OWORD *)v4 + 42) = v137;
    v4[79] = *(void **)&v218[40];
    v138 = v4[80];
    if (v138)
      free(v138);
    v139 = *(void **)v219;
    v4[80] = *(void **)&v218[48];
    v4[81] = v139;
    sub_207D61388((uint64_t)v4, 0, 0, v136);
  }
  *a3 = v4;
  a3[1] = (void **)&v117->__vftable;
  sub_207D04890((uint64_t)&v179);
}

void sub_207D60EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59)
{
  void **v59;
  void **v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *v65;

  if (*(_BYTE *)(v62 + 224) && *(char *)(v62 + 223) < 0)
    operator delete(*v60);
  if (*(_BYTE *)(v62 + 176))
  {
    if (*(char *)(v62 + 175) < 0)
      operator delete(*v59);
  }
  *v61 = off_24C084A40;
  sub_207CA6534(a9);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v62);
  operator delete(v65);
  sub_207D4EA24((uint64_t *)(v63 - 256));
  sub_2080A1BC4((uint64_t)&a59);
  sub_207D04890((uint64_t)&a22);
  sub_207C99D78((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_207D61194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_207C99D78((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_207D611A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_207D6BB44(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_207D611C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD **a21)
{
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void **v24;
  void **v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v27 = *(void **)(v21 + 552);
  if (v27)
  {
    *(_QWORD *)(v21 + 560) = v27;
    operator delete(v27);
    v28 = *a11;
    if (!*a11)
    {
LABEL_3:
      v29 = *v25;
      if (!*v25)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v28 = *a11;
    if (!*a11)
      goto LABEL_3;
  }
  *(_QWORD *)(v21 + 536) = v28;
  operator delete(v28);
  v29 = *v25;
  if (!*v25)
  {
LABEL_4:
    v30 = *v24;
    if (!*v24)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v21 + 512) = v29;
  operator delete(v29);
  v30 = *v24;
  if (!*v24)
  {
LABEL_5:
    v31 = *a12;
    if (!*a12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v21 + 488) = v30;
  operator delete(v30);
  v31 = *a12;
  if (!*a12)
  {
LABEL_6:
    sub_207D14AB4(v23);
    v32 = *(void **)(v21 + 408);
    if (!v32)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v21 + 464) = v31;
  operator delete(v31);
  sub_207D14AB4(v23);
  v32 = *(void **)(v21 + 408);
  if (!v32)
  {
LABEL_7:
    v33 = *(void **)(v21 + 384);
    if (!v33)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v21 + 416) = v32;
  operator delete(v32);
  v33 = *(void **)(v21 + 384);
  if (!v33)
  {
LABEL_8:
    v34 = *a15;
    if (!*a15)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v21 + 392) = v33;
  operator delete(v33);
  v34 = *a15;
  if (!*a15)
  {
LABEL_9:
    v35 = *a16;
    if (!*a16)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_19:
  *(_QWORD *)(v21 + 368) = v34;
  operator delete(v34);
  v35 = *a16;
  if (!*a16)
  {
LABEL_11:
    sub_207CFF9E4(v22, *(char **)(v21 + 320));
    sub_207D4BEC4(a21);
    v36 = (void *)sub_207D68AA4(v21);
    operator delete(v36);
    _Unwind_Resume(a1);
  }
LABEL_10:
  *(_QWORD *)(v21 + 344) = v35;
  operator delete(v35);
  goto LABEL_11;
}

void sub_207D612F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void sub_207D61318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_207C99D78((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_207D61330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (a64 < 0)
  {
    operator delete(a59);
    sub_207D04890((uint64_t)&a22);
    sub_207C99D78((uint64_t)&a57);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x207D61370);
}

void sub_207D6136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_207D04890((uint64_t)&a22);
  sub_207C99D78((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_207D61388(uint64_t a1, unsigned int a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int i;
  uint64_t v37;
  int v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  uint64_t v41;
  unint64_t v42;
  float *v43;
  int32x4_t v44;
  int32x4_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v52;
  int v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  uint64_t v56;
  unint64_t v57;
  float *v58;
  int32x4_t v59;
  int32x4_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  unsigned int j;
  uint64_t v73;
  int v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  uint64_t v77;
  unint64_t v78;
  float *v79;
  int32x4_t v80;
  int32x4_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v88;
  int v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  uint64_t v92;
  unint64_t v93;
  float *v94;
  int32x4_t v95;
  int32x4_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  int32x4_t *v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  __int128 v113;
  _BOOL4 v114;
  float *v115;
  uint64_t v116;
  unint64_t v117;
  float *v118;
  unint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  __int128 v123;
  _BOOL4 v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  float *v133;
  _OWORD *v134;
  unint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  int v141;
  float *v142;
  float *v143;
  int v144;
  int v145;
  float *v146;
  float *v147;
  int v148;
  uint64_t v149;
  char v150;
  char *v151;
  uint64_t *v152;
  int *v153;
  int32x4_t *v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  int v164;

  v4 = *(unsigned int *)(a1 + 576);
  if (!(_DWORD)v4)
    return;
  v5 = *(unsigned int *)(a1 + 580);
  if (!(_DWORD)v5)
    return;
  v6 = *(_DWORD *)(a1 + 584);
  if (!v6)
    return;
  v7 = *(_DWORD *)(a1 + 588);
  if (!v7)
    return;
  if (a3)
  {
    v9 = *(unsigned int *)(a1 + 604);
    v10 = *(_QWORD *)(a1 + 640);
    if (a2)
      v11 = v4 | (v5 << 32);
    else
      v11 = 0;
    if (a2)
      v12 = *(unsigned int *)(a1 + 584) | ((unint64_t)a2 << 32);
    else
      v12 = 0;
    v13 = *(_DWORD *)(a1 + 592);
    v14 = *(_DWORD *)(a1 + 596);
    v15 = *(_DWORD *)(a1 + 600);
    if ((_DWORD)v9 * HIDWORD(v12) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      goto LABEL_221;
    }
    v16 = (float *)(v10 + 4 * v9 * a2);
    v148 = 0;
    if (v13 != 1)
    {
      if (HIDWORD(v12) && (_DWORD)v12 && (_DWORD)v11 && HIDWORD(v11))
      {
        v156 = 0;
        v157 = v11 - 1;
        v158 = v13;
        v159 = HIDWORD(v11) - 1;
        v160 = v14;
        v161 = v12 - 1;
        v27 = HIDWORD(v12) - 1;
        v162 = v15;
        v163 = HIDWORD(v12) - 1;
        v164 = v9;
        if (HIDWORD(v12) != 1)
        {
          v28 = 4 * v9;
          do
          {
            sub_207D6C3B0(&v156, &v148, v16);
            v16 = (float *)((char *)v16 + v28);
            --v27;
          }
          while (v27);
        }
        sub_207D6C3B0(&v156, &v148, v16);
      }
      return;
    }
    if (v14 == (_DWORD)v11)
    {
      if (v15 == v14 * HIDWORD(v11))
      {
        v17 = v14 * v12 * HIDWORD(v11);
        if ((_DWORD)v9 == v15 * (_DWORD)v12)
        {
          v18 = (v17 * HIDWORD(v12));
          if ((_DWORD)v18)
            v19 = v10 == 0;
          else
            v19 = 0;
          if (!v19)
          {
            if (!(_DWORD)v18)
              return;
LABEL_213:
            bzero(v16, 4 * v18);
            return;
          }
          if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))goto LABEL_213;
LABEL_221:
          abort();
        }
        if (HIDWORD(v12) && (_DWORD)v12 && v14 && HIDWORD(v11))
        {
          if (HIDWORD(v12) != 1)
          {
            if (!(_DWORD)v17)
              return;
            v111 = 0;
            v112 = v9;
            v113 = 0uLL;
            do
            {
              if (!v16)
              {
                v114 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                v113 = 0uLL;
                if (v114)
                  goto LABEL_221;
              }
              v115 = v16;
              v116 = v14 * v12 * HIDWORD(v11);
              if (v17 < 8)
                goto LABEL_196;
              v117 = 0;
              v16 += v17 & 0xFFFFFFF8;
              do
              {
                v118 = &v115[v117 / 4];
                *(_OWORD *)v118 = v113;
                *((_OWORD *)v118 + 1) = v113;
                v117 += 32;
              }
              while (((4 * v17) & 0x3FFFFFFE0) != v117);
              v116 = ((_BYTE)v14 * (_BYTE)v12 * BYTE4(v11)) & 7;
              if ((v17 & 0xFFFFFFF8) != v17)
              {
LABEL_196:
                v119 = v116 + 1;
                do
                {
                  *v16++ = 0.0;
                  --v119;
                }
                while (v119 > 1);
              }
              v16 = &v115[v112];
            }
            while (++v111 != HIDWORD(v12) - 1);
          }
          if (!(_DWORD)v17 || v16)
          {
            if (!(_DWORD)v17)
              return;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_221;
          }
          v132 = v17 - ((_DWORD)v17 != 0) + 1;
          if (v132 < 8)
          {
            v133 = v16;
LABEL_239:
            v139 = v17 + 1;
            do
            {
              *v133++ = 0.0;
              --v139;
            }
            while (v139 > 1);
            return;
          }
          v133 = &v16[v132 & 0xFFFFFFFFFFFFFFF8];
          v17 -= v132 & 0xFFFFFFFFFFFFFFF8;
          v137 = v16 + 4;
          v138 = v132 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            *(v137 - 1) = 0uLL;
            *v137 = 0uLL;
            v137 += 2;
            v138 -= 8;
          }
          while (v138);
          if (v132 != (v132 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_239;
        }
      }
      else
      {
        v150 = 0;
        v149 = (HIDWORD(v11) * v11);
        v151 = &v150;
        v152 = &v149;
        v153 = &v148;
        if (HIDWORD(v12) && (_DWORD)v12 && v14 && HIDWORD(v11))
        {
          v156 = 0;
          v157 = v14 - 1;
          v158 = 1;
          v159 = HIDWORD(v11) - 1;
          v160 = v14;
          v161 = v12 - 1;
          v154 = 0;
          v155 = 0;
          v103 = HIDWORD(v12) - 1;
          v162 = v15;
          v163 = HIDWORD(v12) - 1;
          v164 = v9;
          if (HIDWORD(v12) != 1)
          {
            v104 = 4 * v9;
            do
            {
              sub_207D6BF94((_BOOL8)&v156, &v154, (uint64_t)&v151, (int32x4_t *)v16, a4);
              v16 = (float *)((char *)v16 + v104);
              --v103;
            }
            while (v103);
          }
          sub_207D6BF94((_BOOL8)&v156, &v154, (uint64_t)&v151, (int32x4_t *)v16, a4);
        }
      }
      return;
    }
    v150 = 0;
    v149 = v11;
    v151 = &v150;
    v152 = &v149;
    v153 = &v148;
    if (!HIDWORD(v12) || !(_DWORD)v12 || !(_DWORD)v11 || !HIDWORD(v11))
      return;
    v156 = 0;
    v157 = v11 - 1;
    v158 = 1;
    v159 = HIDWORD(v11) - 1;
    v33 = v12 - 1;
    v160 = v14;
    v161 = v12 - 1;
    v154 = 0;
    v155 = 0;
    v162 = v15;
    v163 = HIDWORD(v12) - 1;
    v164 = v9;
    if (HIDWORD(v12) != 1)
    {
      v34 = 0;
      while (1)
      {
        v140 = v34;
        v142 = v16;
        if (v161)
          break;
LABEL_50:
        sub_207D6C1A4((uint64_t)&v156, (uint64_t)&v154, (uint64_t)&v151, (int32x4_t *)v16, a4);
        v16 = &v142[v164];
        v34 = v140 + 1;
        if (v140 + 1 >= v163)
        {
          v33 = v161;
          goto LABEL_174;
        }
      }
      v35 = 0;
      while (1)
      {
        v144 = v35;
        LODWORD(v155) = v158;
        v146 = v16;
        if (v159)
        {
          for (i = 0; i < v159; ++i)
          {
            v154 = (int32x4_t *)v16;
            v37 = *v152;
            v38 = *v153;
            if (!v16 && v37)
            {
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v39 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v48 = qword_2545309E8;
                v49 = qword_2545309F0;
                while (v48 != v49)
                {
                  v51 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v48;
                  v50 = *(_QWORD *)(v48 + 8);
                  v48 += 16;
                  v51(v50, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v40 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_221;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
            }
            if (v37 >= 1)
            {
              *(float *)&a4 = (float)v38;
              v41 = v37 & 0x3FFFFFFFFFFFFFFFLL;
              v42 = (v37 & 0x3FFFFFFFFFFFFFFFLL) - ((v37 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
              v43 = v16;
              if (v42 < 8)
                goto LABEL_70;
              v43 = &v16[v42 & 0xFFFFFFFFFFFFFFF8];
              v41 -= v42 & 0xFFFFFFFFFFFFFFF8;
              v44 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
              v45 = (int32x4_t *)(v16 + 4);
              v46 = v42 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v45[-1] = v44;
                *v45 = v44;
                v45 += 2;
                v46 -= 8;
              }
              while (v46);
              if (v42 != (v42 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_70:
                v47 = v41 + 1;
                do
                {
                  *v43++ = *(float *)&a4;
                  --v47;
                }
                while (v47 > 1);
              }
            }
            v16 += v160;
          }
        }
        v154 = (int32x4_t *)v16;
        v52 = *v152;
        v53 = *v153;
        if (!v16 && v52)
        {
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v54 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10 || byte_254530A18)
          {
            v64 = qword_2545309E8;
            v63 = qword_2545309F0;
            while (v64 != v63)
            {
              v66 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v64;
              v65 = *(_QWORD *)(v64 + 8);
              v64 += 16;
              v66(v65, "ptr != nullptr || size == 0", 27, "", 0);
            }
          }
          v55 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10)
            goto LABEL_221;
          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
        }
        if (v52 >= 1)
        {
          *(float *)&a4 = (float)v53;
          v56 = v52 & 0x3FFFFFFFFFFFFFFFLL;
          v57 = (v52 & 0x3FFFFFFFFFFFFFFFLL) - ((v52 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
          if (v57 >= 8)
          {
            v58 = &v16[v57 & 0xFFFFFFFFFFFFFFF8];
            v56 -= v57 & 0xFFFFFFFFFFFFFFF8;
            v59 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            v60 = (int32x4_t *)(v16 + 4);
            v61 = v57 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v60[-1] = v59;
              *v60 = v59;
              v60 += 2;
              v61 -= 8;
            }
            while (v61);
            if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_53;
          }
          else
          {
            v58 = v16;
          }
          v62 = v56 + 1;
          do
          {
            *v58++ = *(float *)&a4;
            --v62;
          }
          while (v62 > 1);
        }
LABEL_53:
        v16 = &v146[v162];
        v35 = v144 + 1;
        if (v144 + 1 >= v161)
          goto LABEL_50;
      }
    }
LABEL_174:
    if (v33)
    {
      v106 = 0;
      do
      {
        sub_207D6C1A4((uint64_t)&v156, (uint64_t)&v154, (uint64_t)&v151, (int32x4_t *)v16, a4);
        v16 += v162;
        ++v106;
      }
      while (v106 < v161);
    }
LABEL_172:
    sub_207D6C1A4((uint64_t)&v156, (uint64_t)&v154, (uint64_t)&v151, (int32x4_t *)v16, a4);
    return;
  }
  v148 = 0;
  v20 = *(_DWORD *)(a1 + 592);
  if (v20 != 1)
  {
    v156 = 0;
    v157 = v4 - 1;
    v158 = v20;
    v159 = v5 - 1;
    v160 = *(_DWORD *)(a1 + 596);
    v161 = v6 - 1;
    v29 = *(unsigned int *)(a1 + 604);
    v30 = *(float **)(a1 + 640);
    v31 = v7 - 1;
    v162 = *(_DWORD *)(a1 + 600);
    v163 = v7 - 1;
    v164 = v29;
    if (v7 != 1)
    {
      v32 = 4 * v29;
      do
      {
        sub_207D6C3B0(&v156, &v148, v30);
        v30 = (float *)((char *)v30 + v32);
        --v31;
      }
      while (v31);
    }
    sub_207D6C3B0(&v156, &v148, v30);
    return;
  }
  v21 = *(_DWORD *)(a1 + 596);
  if (v21 != (_DWORD)v4)
  {
    v150 = 0;
    v149 = v4;
    v151 = &v150;
    v152 = &v149;
    v153 = &v148;
    v154 = 0;
    v156 = 0;
    v157 = v4 - 1;
    v158 = 1;
    v159 = v5 - 1;
    v67 = v6 - 1;
    v160 = v21;
    v161 = v67;
    v68 = *(_DWORD *)(a1 + 600);
    v69 = *(_DWORD *)(a1 + 604);
    v16 = *(float **)(a1 + 640);
    v155 = 0;
    v162 = v68;
    v163 = v7 - 1;
    v164 = v69;
    if (v7 == 1)
    {
LABEL_169:
      if (v67)
      {
        v105 = 0;
        do
        {
          sub_207D6C1A4((uint64_t)&v156, (uint64_t)&v154, (uint64_t)&v151, (int32x4_t *)v16, a4);
          v16 += v162;
          ++v105;
        }
        while (v105 < v161);
      }
      goto LABEL_172;
    }
    v70 = 0;
    while (1)
    {
      v141 = v70;
      v143 = v16;
      if (v161)
        break;
LABEL_106:
      sub_207D6C1A4((uint64_t)&v156, (uint64_t)&v154, (uint64_t)&v151, (int32x4_t *)v16, a4);
      v16 = &v143[v164];
      v70 = v141 + 1;
      if (v141 + 1 >= v163)
      {
        v67 = v161;
        goto LABEL_169;
      }
    }
    v71 = 0;
    while (1)
    {
      v145 = v71;
      LODWORD(v155) = v158;
      v147 = v16;
      if (v159)
      {
        for (j = 0; j < v159; ++j)
        {
          v154 = (int32x4_t *)v16;
          v73 = *v152;
          v74 = *v153;
          if (!v16 && v73)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v75 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v84 = qword_2545309E8;
              v85 = qword_2545309F0;
              while (v84 != v85)
              {
                v87 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v84;
                v86 = *(_QWORD *)(v84 + 8);
                v84 += 16;
                v87(v86, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v76 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_221;
            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
          }
          if (v73 >= 1)
          {
            *(float *)&a4 = (float)v74;
            v77 = v73 & 0x3FFFFFFFFFFFFFFFLL;
            v78 = (v73 & 0x3FFFFFFFFFFFFFFFLL) - ((v73 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
            v79 = v16;
            if (v78 < 8)
              goto LABEL_126;
            v79 = &v16[v78 & 0xFFFFFFFFFFFFFFF8];
            v77 -= v78 & 0xFFFFFFFFFFFFFFF8;
            v80 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            v81 = (int32x4_t *)(v16 + 4);
            v82 = v78 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v81[-1] = v80;
              *v81 = v80;
              v81 += 2;
              v82 -= 8;
            }
            while (v82);
            if (v78 != (v78 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_126:
              v83 = v77 + 1;
              do
              {
                *v79++ = *(float *)&a4;
                --v83;
              }
              while (v83 > 1);
            }
          }
          v16 += v160;
        }
      }
      v154 = (int32x4_t *)v16;
      v88 = *v152;
      v89 = *v153;
      if (!v16 && v88)
      {
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v90 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v100 = qword_2545309E8;
          v99 = qword_2545309F0;
          while (v100 != v99)
          {
            v102 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v100;
            v101 = *(_QWORD *)(v100 + 8);
            v100 += 16;
            v102(v101, "ptr != nullptr || size == 0", 27, "", 0);
          }
        }
        v91 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10)
          goto LABEL_221;
        qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
      }
      if (v88 >= 1)
      {
        *(float *)&a4 = (float)v89;
        v92 = v88 & 0x3FFFFFFFFFFFFFFFLL;
        v93 = (v88 & 0x3FFFFFFFFFFFFFFFLL) - ((v88 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v93 >= 8)
        {
          v94 = &v16[v93 & 0xFFFFFFFFFFFFFFF8];
          v92 -= v93 & 0xFFFFFFFFFFFFFFF8;
          v95 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          v96 = (int32x4_t *)(v16 + 4);
          v97 = v93 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v96[-1] = v95;
            *v96 = v95;
            v96 += 2;
            v97 -= 8;
          }
          while (v97);
          if (v93 == (v93 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_109;
        }
        else
        {
          v94 = v16;
        }
        v98 = v92 + 1;
        do
        {
          *v94++ = *(float *)&a4;
          --v98;
        }
        while (v98 > 1);
      }
LABEL_109:
      v16 = &v147[v162];
      v71 = v145 + 1;
      if (v145 + 1 >= v161)
        goto LABEL_106;
    }
  }
  v22 = *(_DWORD *)(a1 + 600);
  if (v22 == (_DWORD)v5 * (_DWORD)v4)
  {
    v23 = *(unsigned int *)(a1 + 604);
    v24 = v6 * v22;
    v25 = *(char **)(a1 + 640);
    if ((_DWORD)v23 == (_DWORD)v24)
    {
      v26 = (v23 * v7);
      if (v25 || !(_DWORD)v26)
      {
        if (!(_DWORD)v26)
          return;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_221;
      }
      bzero(v25, 4 * v26);
      return;
    }
    v120 = v7 - 1;
    if (v7 != 1)
    {
      if (!(_DWORD)v24)
        return;
      v121 = 0;
      v122 = 4 * v23;
      v123 = 0uLL;
      do
      {
        if (!v25)
        {
          v124 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v123 = 0uLL;
          if (v124)
            goto LABEL_221;
        }
        v125 = v25;
        v126 = v24;
        if (v24 < 8)
          goto LABEL_209;
        v127 = 0;
        v125 = &v25[4 * (v24 & 0xFFFFFFF8)];
        do
        {
          v128 = &v25[v127];
          *(_OWORD *)v128 = v123;
          *((_OWORD *)v128 + 1) = v123;
          v127 += 32;
        }
        while (((4 * v24) & 0x3FFFFFFE0) != v127);
        v126 = v24 & 7;
        if ((v24 & 0xFFFFFFF8) != v24)
        {
LABEL_209:
          v129 = v126 + 1;
          do
          {
            *(_DWORD *)v125 = 0;
            v125 += 4;
            --v129;
          }
          while (v129 > 1);
        }
        v25 += v122;
      }
      while (++v121 != v120);
    }
    if (!(_DWORD)v24 || v25)
    {
      if (!(_DWORD)v24)
        return;
    }
    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_221;
    }
    v130 = v24 - ((_DWORD)v24 != 0) + 1;
    if (v130 >= 8)
    {
      v131 = &v25[4 * (v130 & 0xFFFFFFFFFFFFFFF8)];
      v24 -= v130 & 0xFFFFFFFFFFFFFFF8;
      v134 = v25 + 16;
      v135 = v130 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(v134 - 1) = 0uLL;
        *v134 = 0uLL;
        v134 += 2;
        v135 -= 8;
      }
      while (v135);
      if (v130 == (v130 & 0xFFFFFFFFFFFFFFF8))
        return;
    }
    else
    {
      v131 = v25;
    }
    v136 = v24 + 1;
    do
    {
      *(_DWORD *)v131 = 0;
      v131 += 4;
      --v136;
    }
    while (v136 > 1);
    return;
  }
  v150 = 0;
  v149 = (v5 * v4);
  v151 = &v150;
  v152 = &v149;
  v153 = &v148;
  v154 = 0;
  v156 = 0;
  v157 = v4 - 1;
  v158 = 1;
  v159 = v5 - 1;
  v160 = v4;
  v161 = v6 - 1;
  v107 = *(unsigned int *)(a1 + 604);
  v108 = *(int32x4_t **)(a1 + 640);
  v155 = 0;
  v109 = v7 - 1;
  v162 = v22;
  v163 = v7 - 1;
  v164 = v107;
  if (v7 != 1)
  {
    v110 = 4 * v107;
    do
    {
      sub_207D6BF94((_BOOL8)&v156, &v154, (uint64_t)&v151, v108, a4);
      v108 = (int32x4_t *)((char *)v108 + v110);
      --v109;
    }
    while (v109);
  }
  sub_207D6BF94((_BOOL8)&v156, &v154, (uint64_t)&v151, v108, a4);
}

uint64_t sub_207D623F0(uint64_t result, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const float *v32;
  const float *v33;
  unint64_t v34;
  unint64_t v35;
  __int32 *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int32 *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int32 *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int32 *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int32 *v56;
  unint64_t v57;
  const float *v58;
  unint64_t v59;
  unint64_t v60;
  __int32 *v61;
  unint64_t v62;
  const float *v63;
  unint64_t v64;
  unint64_t v65;
  __int32 *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int32 *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __int32 *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int32 *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __int32 *v86;
  unint64_t v87;
  const float *v88;
  unint64_t v89;
  unint64_t v90;
  __int32 *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  __int32 *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  unint64_t v101;
  const float *v102;
  float32x4_t v103;
  unint64_t v104;
  _OWORD *v105;
  const float *v106;
  float32x4_t v107;
  unint64_t v108;
  _OWORD *v109;
  const float *v110;
  float32x4_t v111;
  unint64_t v112;
  _OWORD *v113;
  const float *v114;
  float32x4_t v115;
  unint64_t v116;
  _OWORD *v117;
  const float *v118;
  float32x4_t v119;
  unint64_t v120;
  _OWORD *v121;
  const float *v122;
  float32x4_t v123;
  unint64_t v124;
  _OWORD *v125;
  const float *v126;
  float32x4_t v127;
  unint64_t v128;
  _OWORD *v129;
  const float *v130;
  float32x4_t v131;
  unint64_t v132;
  _OWORD *v133;
  const float *v134;
  float32x4_t v135;
  unint64_t v136;
  _OWORD *v137;
  const float *v138;
  float32x4_t v139;
  unint64_t v140;
  _OWORD *v141;
  const float *v142;
  float32x4_t v143;
  unint64_t v144;
  _OWORD *v145;
  const float *v146;
  float32x4_t v147;
  unint64_t v148;
  _OWORD *v149;
  const float *v150;
  float32x4_t v151;
  unint64_t v152;
  _OWORD *v153;
  unint64_t v154;
  __int32 *v155;
  unint64_t v156;
  unint64_t v157;
  float32x4_t *v158;
  unint64_t v159;
  __int32 *v160;
  unint64_t v161;
  float32x4_t *v162;
  unint64_t v163;
  __int32 *v164;
  const float *v165;
  float32x4_t v166;
  unint64_t v167;
  _OWORD *v168;
  const float *v169;
  float32x4_t v170;
  unint64_t v171;
  float32x4_t *v172;
  unint64_t v173;
  uint64_t v174;
  float32x4_t *v175;
  float32x4_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;

  v5 = result;
  if (!*(_BYTE *)(result + 176) && !*(_BYTE *)(result + 177))
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingInference.cpp", 344, (uint64_t)"config_.model_config.use_extrinsics || config_.model_config.use_extrinsics_short", 80, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      abort();
  }
  if (a3)
  {
    v174 = *a2;
    v6 = a2[1] - *a2;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = v6 >> 6;
      v10 = *(float32x4_t **)(v5 + 456);
      if (v9 <= 1)
        v9 = 1;
      v173 = v9;
      v11 = a3 << 6;
      v12 = 4 * a3;
      v13 = 8 * a3;
      v14 = 2 * a3;
      v15 = 3 * a3;
      v16 = 5 * a3;
      v17 = 9 * a3;
      v18 = 16 * a3;
      v19 = a3 & 0xFFFFFFFFFFFFFFF8;
      v192 = (uint64_t)v10[1].i64 + 4 * a3;
      v191 = (uint64_t)&v10[1] + 8 * a3;
      v190 = (uint64_t)&v10[1] + 12 * a3;
      v20 = 11 * a3;
      result = 13 * a3;
      v189 = (uint64_t)&v10[a3 + 1];
      v188 = (uint64_t)&v10[1] + 20 * a3;
      v187 = (uint64_t)&v10[1] + 24 * a3;
      v21 = 6 * a3;
      v186 = (uint64_t)&v10[1] + 28 * a3;
      v22 = 7 * a3;
      v185 = (uint64_t)&v10[2 * a3 + 1];
      v184 = (uint64_t)&v10[1] + 36 * a3;
      v183 = (uint64_t)&v10[1] + 40 * a3;
      v23 = v10 + 1;
      v24 = 10 * a3;
      v182 = (uint64_t)&v10[1] + 44 * a3;
      v181 = (uint64_t)&v10[3 * a3 + 1];
      v180 = (uint64_t)&v10[1] + 52 * a3;
      v179 = (uint64_t)&v10[1] + 56 * a3;
      v25 = 14 * a3;
      v26 = (uint64_t)&v10[1] + 60 * a3;
      v27 = 15 * a3;
      v28 = 12 * a3;
      v29 = a3;
      while (1)
      {
        v175 = (float32x4_t *)v26;
        v176 = v23;
        v30 = v11 * v8;
        v31 = (unint64_t)v10->u64 + 4 * a3 + v11 * v8;
        v32 = (const float *)(v174 + (v8 << 6));
        v33 = v32 + 1;
        if (a3 < 8 || (char *)v10 + v30 < (char *)v33 && (unint64_t)v32 < v31)
          break;
        v100 = vld1q_dup_f32(v32);
        v101 = a3 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v23[-1] = v100;
          *v23 = v100;
          v23 += 2;
          v101 -= 8;
        }
        while (v101);
        v34 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_14;
LABEL_16:
        v178 = v7;
        v37 = (unint64_t)v10 + 8 * a3 + v30;
        v38 = (unint64_t)(v32 + 5);
        if (a3 < 8 || v31 < v38 && (unint64_t)(v32 + 4) < v37)
        {
          v39 = 0;
LABEL_20:
          v40 = a3 - v39;
          v41 = &v10->i32[v39 + v29];
          do
          {
            *v41++ = *((_DWORD *)v32 + 4);
            --v40;
          }
          while (v40);
          goto LABEL_22;
        }
        v102 = v32 + 4;
        v103 = vld1q_dup_f32(v102);
        v104 = a3 & 0xFFFFFFFFFFFFFFF8;
        v105 = (_OWORD *)v192;
        do
        {
          *(v105 - 1) = v103;
          *v105 = v103;
          v105 += 2;
          v104 -= 8;
        }
        while (v104);
        v39 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_20;
LABEL_22:
        v42 = (unint64_t)v10 + 12 * a3 + v30;
        v43 = (unint64_t)(v32 + 9);
        if (a3 < 8 || v37 < v43 && (unint64_t)(v32 + 8) < v42)
        {
          v44 = 0;
LABEL_26:
          v45 = a3 - v44;
          v46 = &v10->i32[v44 + v14];
          do
          {
            *v46++ = *((_DWORD *)v32 + 8);
            --v45;
          }
          while (v45);
          goto LABEL_28;
        }
        v106 = v32 + 8;
        v107 = vld1q_dup_f32(v106);
        v108 = a3 & 0xFFFFFFFFFFFFFFF8;
        v109 = (_OWORD *)v191;
        do
        {
          *(v109 - 1) = v107;
          *v109 = v107;
          v109 += 2;
          v108 -= 8;
        }
        while (v108);
        v44 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_26;
LABEL_28:
        v177 = v14;
        v47 = (unint64_t)&v10[(unint64_t)v18 / 0x10] + v30;
        v48 = (unint64_t)(v32 + 13);
        if (a3 < 8 || v42 < v48 && (unint64_t)(v32 + 12) < v47)
        {
          v49 = 0;
LABEL_32:
          v50 = a3 - v49;
          v51 = &v10->i32[v49 + v15];
          do
          {
            *v51++ = *((_DWORD *)v32 + 12);
            --v50;
          }
          while (v50);
          goto LABEL_34;
        }
        v110 = v32 + 12;
        v111 = vld1q_dup_f32(v110);
        v112 = a3 & 0xFFFFFFFFFFFFFFF8;
        v113 = (_OWORD *)v190;
        do
        {
          *(v113 - 1) = v111;
          *v113 = v111;
          v113 += 2;
          v112 -= 8;
        }
        while (v112);
        v49 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_32;
LABEL_34:
        v52 = (unint64_t)v10 + 20 * a3 + v30;
        v53 = (unint64_t)(v32 + 2);
        if (a3 < 8 || v47 < v53 && (unint64_t)v33 < v52)
        {
          v54 = 0;
LABEL_38:
          v55 = a3 - v54;
          v56 = &v10->i32[v54 + v12];
          do
          {
            *v56++ = *((_DWORD *)v32 + 1);
            --v55;
          }
          while (v55);
          goto LABEL_40;
        }
        v114 = v32 + 1;
        v115 = vld1q_dup_f32(v114);
        v116 = a3 & 0xFFFFFFFFFFFFFFF8;
        v117 = (_OWORD *)v189;
        do
        {
          *(v117 - 1) = v115;
          *v117 = v115;
          v117 += 2;
          v116 -= 8;
        }
        while (v116);
        v54 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_38;
LABEL_40:
        v57 = (unint64_t)v10 + 24 * a3 + v30;
        v58 = v32 + 6;
        if (a3 < 8 || v52 < (unint64_t)v58 && v38 < v57)
        {
          v59 = 0;
LABEL_44:
          v60 = a3 - v59;
          v61 = &v10->i32[v59 + v16];
          do
          {
            *v61++ = *((_DWORD *)v32 + 5);
            --v60;
          }
          while (v60);
          goto LABEL_46;
        }
        v118 = v32 + 5;
        v119 = vld1q_dup_f32(v118);
        v120 = a3 & 0xFFFFFFFFFFFFFFF8;
        v121 = (_OWORD *)v188;
        do
        {
          *(v121 - 1) = v119;
          *v121 = v119;
          v121 += 2;
          v120 -= 8;
        }
        while (v120);
        v59 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_44;
LABEL_46:
        v62 = (unint64_t)v10 + 28 * a3 + v30;
        v63 = v32 + 10;
        if (a3 < 8 || v57 < (unint64_t)v63 && v43 < v62)
        {
          v64 = 0;
LABEL_50:
          v65 = a3 - v64;
          v66 = &v10->i32[v64 + v21];
          do
          {
            *v66++ = *((_DWORD *)v32 + 9);
            --v65;
          }
          while (v65);
          goto LABEL_52;
        }
        v122 = v32 + 9;
        v123 = vld1q_dup_f32(v122);
        v124 = a3 & 0xFFFFFFFFFFFFFFF8;
        v125 = (_OWORD *)v187;
        do
        {
          *(v125 - 1) = v123;
          *v125 = v123;
          v125 += 2;
          v124 -= 8;
        }
        while (v124);
        v64 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_50;
LABEL_52:
        v67 = (unint64_t)&v10[2 * a3] + v30;
        v68 = (unint64_t)(v32 + 14);
        if (a3 < 8 || v62 < v68 && v48 < v67)
        {
          v69 = 0;
LABEL_56:
          v70 = a3 - v69;
          v71 = &v10->i32[v69 + v22];
          do
          {
            *v71++ = *((_DWORD *)v32 + 13);
            --v70;
          }
          while (v70);
          goto LABEL_58;
        }
        v126 = v32 + 13;
        v127 = vld1q_dup_f32(v126);
        v128 = a3 & 0xFFFFFFFFFFFFFFF8;
        v129 = (_OWORD *)v186;
        do
        {
          *(v129 - 1) = v127;
          *v129 = v127;
          v129 += 2;
          v128 -= 8;
        }
        while (v128);
        v69 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_56;
LABEL_58:
        v72 = (unint64_t)v10 + 36 * a3 + v30;
        v73 = (unint64_t)(v32 + 3);
        if (a3 < 8 || v67 < v73 && v53 < v72)
        {
          v74 = 0;
LABEL_62:
          v75 = a3 - v74;
          v76 = &v10->i32[v74 + v13];
          do
          {
            *v76++ = *((_DWORD *)v32 + 2);
            --v75;
          }
          while (v75);
          goto LABEL_64;
        }
        v130 = v32 + 2;
        v131 = vld1q_dup_f32(v130);
        v132 = a3 & 0xFFFFFFFFFFFFFFF8;
        v133 = (_OWORD *)v185;
        do
        {
          *(v133 - 1) = v131;
          *v133 = v131;
          v133 += 2;
          v132 -= 8;
        }
        while (v132);
        v74 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_62;
LABEL_64:
        v77 = (unint64_t)v10 + 40 * a3 + v30;
        v78 = (unint64_t)(v32 + 7);
        if (a3 < 8 || v72 < v78 && (unint64_t)v58 < v77)
        {
          v79 = 0;
LABEL_68:
          v80 = a3 - v79;
          v81 = &v10->i32[v79 + v17];
          do
          {
            *v81++ = *((_DWORD *)v32 + 6);
            --v80;
          }
          while (v80);
          goto LABEL_70;
        }
        v134 = v32 + 6;
        v135 = vld1q_dup_f32(v134);
        v136 = a3 & 0xFFFFFFFFFFFFFFF8;
        v137 = (_OWORD *)v184;
        do
        {
          *(v137 - 1) = v135;
          *v137 = v135;
          v137 += 2;
          v136 -= 8;
        }
        while (v136);
        v79 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_68;
LABEL_70:
        v82 = (unint64_t)v10 + 44 * a3 + v30;
        v83 = (unint64_t)(v32 + 11);
        if (a3 < 8 || v77 < v83 && (unint64_t)v63 < v82)
        {
          v84 = 0;
LABEL_74:
          v85 = a3 - v84;
          v86 = &v10->i32[v84 + v24];
          do
          {
            *v86++ = *((_DWORD *)v32 + 10);
            --v85;
          }
          while (v85);
          goto LABEL_76;
        }
        v138 = v32 + 10;
        v139 = vld1q_dup_f32(v138);
        v140 = a3 & 0xFFFFFFFFFFFFFFF8;
        v141 = (_OWORD *)v183;
        do
        {
          *(v141 - 1) = v139;
          *v141 = v139;
          v141 += 2;
          v140 -= 8;
        }
        while (v140);
        v84 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_74;
LABEL_76:
        v87 = (unint64_t)&v10[3 * a3] + v30;
        v88 = v32 + 15;
        if (a3 < 8 || v82 < (unint64_t)v88 && v68 < v87)
        {
          v89 = 0;
LABEL_80:
          v90 = a3 - v89;
          v91 = &v10->i32[v89 + v20];
          do
          {
            *v91++ = *((_DWORD *)v32 + 14);
            --v90;
          }
          while (v90);
          goto LABEL_82;
        }
        v142 = v32 + 14;
        v143 = vld1q_dup_f32(v142);
        v144 = a3 & 0xFFFFFFFFFFFFFFF8;
        v145 = (_OWORD *)v182;
        do
        {
          *(v145 - 1) = v143;
          *v145 = v143;
          v145 += 2;
          v144 -= 8;
        }
        while (v144);
        v89 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_80;
LABEL_82:
        v92 = (unint64_t)v10 + 52 * a3 + v30;
        if (a3 < 8 || v87 < (unint64_t)(v32 + 4) && v73 < v92)
        {
          v93 = 0;
          v94 = v177;
LABEL_86:
          v95 = a3 - v93;
          v96 = &v10->i32[v93 + v28];
          do
          {
            *v96++ = *((_DWORD *)v32 + 3);
            --v95;
          }
          while (v95);
          goto LABEL_88;
        }
        v146 = v32 + 3;
        v147 = vld1q_dup_f32(v146);
        v148 = a3 & 0xFFFFFFFFFFFFFFF8;
        v149 = (_OWORD *)v181;
        v94 = v177;
        do
        {
          *(v149 - 1) = v147;
          *v149 = v147;
          v149 += 2;
          v148 -= 8;
        }
        while (v148);
        v93 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_86;
LABEL_88:
        v97 = (unint64_t)v10 + 56 * a3 + v30;
        if (a3 < 8)
        {
          v98 = 0;
          v99 = v178;
          goto LABEL_148;
        }
        v99 = v178;
        if (v92 < (unint64_t)(v32 + 8) && v78 < v97)
        {
          v98 = 0;
LABEL_148:
          v154 = a3 - v98;
          v155 = &v10->i32[v98 + result];
          do
          {
            *v155++ = *((_DWORD *)v32 + 7);
            --v154;
          }
          while (v154);
          goto LABEL_150;
        }
        v150 = v32 + 7;
        v151 = vld1q_dup_f32(v150);
        v152 = a3 & 0xFFFFFFFFFFFFFFF8;
        v153 = (_OWORD *)v180;
        do
        {
          *(v153 - 1) = v151;
          *v153 = v151;
          v153 += 2;
          v152 -= 8;
        }
        while (v152);
        v98 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_148;
LABEL_150:
        v156 = (unint64_t)v10 + 60 * a3 + v30;
        if (a3 < 8 || v97 < (unint64_t)(v32 + 12) && v83 < v156)
        {
          v157 = 0;
          v158 = v176;
LABEL_154:
          v159 = a3 - v157;
          v160 = &v10->i32[v157 + v25];
          do
          {
            *v160++ = *((_DWORD *)v32 + 11);
            --v159;
          }
          while (v159);
          goto LABEL_156;
        }
        v165 = v32 + 11;
        v166 = vld1q_dup_f32(v165);
        v167 = a3 & 0xFFFFFFFFFFFFFFF8;
        v168 = (_OWORD *)v179;
        v158 = v176;
        do
        {
          *(v168 - 1) = v166;
          *v168 = v166;
          v168 += 2;
          v167 -= 8;
        }
        while (v167);
        v157 = a3 & 0xFFFFFFFFFFFFFFF8;
        if (v19 != a3)
          goto LABEL_154;
LABEL_156:
        if (a3 >= 8 && (v156 >= (unint64_t)(v32 + 16) || v88 >= (const float *)((char *)v10->f32 + v11 + v30)))
        {
          v169 = v32 + 15;
          v170 = vld1q_dup_f32(v169);
          v171 = a3 & 0xFFFFFFFFFFFFFFF8;
          v162 = v175;
          v172 = v175;
          do
          {
            v172[-1] = v170;
            *v172 = v170;
            v172 += 2;
            v171 -= 8;
          }
          while (v171);
          v161 = a3 & 0xFFFFFFFFFFFFFFF8;
          if (v19 == a3)
            goto LABEL_9;
        }
        else
        {
          v161 = 0;
          v162 = v175;
        }
        v163 = a3 - v161;
        v164 = &v10->i32[v161 + v27];
        do
        {
          *v164++ = *((_DWORD *)v32 + 15);
          --v163;
        }
        while (v163);
LABEL_9:
        ++v8;
        v23 = (float32x4_t *)((char *)v158 + v11);
        v7 = v99 + v18;
        v192 += v11;
        v29 += v18;
        v191 += v11;
        v14 = v94 + v18;
        v190 += v11;
        v15 += v18;
        v189 += v11;
        v12 += v18;
        v188 += v11;
        v16 += v18;
        v187 += v11;
        v21 += v18;
        v186 += v11;
        v22 += v18;
        v185 += v11;
        v13 += v18;
        v184 += v11;
        v17 += v18;
        v183 += v11;
        v24 += v18;
        v182 += v11;
        v20 += v18;
        v181 += v11;
        v28 += v18;
        v180 += v11;
        result += v18;
        v179 += v11;
        v25 += v18;
        v26 = (uint64_t)v162 + v11;
        v27 += v18;
        if (v8 == v173)
          return result;
      }
      v34 = 0;
LABEL_14:
      v35 = a3 - v34;
      v36 = &v10->i32[v34 + v7];
      do
      {
        *v36++ = *(_DWORD *)v32;
        --v35;
      }
      while (v35);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_207D62EBC(uint64_t result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float32x4_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float v23;
  float *v24;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t *v34;
  float v35;
  float *v36;
  float *v37;
  uint64_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t v41;
  float v42;

  v3 = (_QWORD *)result;
  if (!*(_BYTE *)(result + 140))
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingInference.cpp", 359, (uint64_t)"config_.model_config.use_ray_dir", 32, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      abort();
  }
  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5)
  {
    v7 = (float32x4_t *)v3[42];
    v6 = (float *)v3[43];
    v8 = 0x8E38E38E38E38E39 * (v5 >> 2);
    if (v7 != (float32x4_t *)v6)
    {
      v9 = 0;
      v10 = ((char *)v6 - (char *)v7) >> 2;
      v11 = (float32x4_t *)v3[60];
      v12 = (char *)v6 - (char *)v7 - 4;
      v13 = (v12 >> 2) + 1;
      result = v13 & 0x7FFFFFFFFFFFFFF8;
      v14 = v13 & 0x7FFFFFFFFFFFFFF8;
      v15 = v11 + 1;
      do
      {
        v16 = 1.0 / *(float *)(v4 + 36 * v9);
        v17 = &v11->f32[v9 * v10];
        if (v12 >= 0x1C)
        {
          v18 = (float *)v7;
          if ((unint64_t)((char *)v11 + (((char *)v6 - (char *)v7) & 0xFFFFFFFFFFFFFFFCLL) * v9 - (char *)v7) >= 0x20)
          {
            v17 = (float *)((char *)v17 + v14 * 4);
            v19 = v13 & 0x7FFFFFFFFFFFFFF8;
            v20 = v15;
            v21 = v7 + 1;
            do
            {
              v22 = vmulq_n_f32(*v21, v16);
              v20[-1] = vmulq_n_f32(v21[-1], v16);
              *v20 = v22;
              v21 += 2;
              v20 += 2;
              v19 -= 8;
            }
            while (v19);
            v18 = &v7->f32[v14];
            if (v13 == result)
              goto LABEL_6;
          }
        }
        else
        {
          v18 = (float *)v7;
        }
        do
        {
          v23 = *v18++;
          *v17++ = v16 * v23;
        }
        while (v18 != v6);
LABEL_6:
        ++v9;
        v15 = (float32x4_t *)((char *)v15 + 4 * v10);
      }
      while (v9 != v8);
    }
    v25 = (float32x4_t *)v3[45];
    v24 = (float *)v3[46];
    v26 = (char *)v24 - (char *)v25;
    if (v24 != (float *)v25)
    {
      v27 = 0;
      v28 = v26 >> 2;
      v29 = (float32x4_t *)v3[63];
      v30 = v26 & 0xFFFFFFFFFFFFFFFCLL;
      v31 = v26 - 4;
      v32 = (v31 >> 2) + 1;
      result = v32 & 0x7FFFFFFFFFFFFFF8;
      v33 = v32 & 0x7FFFFFFFFFFFFFF8;
      v34 = v29 + 1;
      do
      {
        v35 = 1.0 / *(float *)(v4 + 36 * v27 + 16);
        v36 = &v29->f32[v27 * v28];
        if (v31 >= 0x1C)
        {
          v37 = (float *)v25;
          if ((unint64_t)((char *)v29 + v30 * v27 - (char *)v25) >= 0x20)
          {
            v36 = (float *)((char *)v36 + v33 * 4);
            v38 = v32 & 0x7FFFFFFFFFFFFFF8;
            v39 = v34;
            v40 = v25 + 1;
            do
            {
              v41 = vmulq_n_f32(*v40, v35);
              v39[-1] = vmulq_n_f32(v40[-1], v35);
              *v39 = v41;
              v40 += 2;
              v39 += 2;
              v38 -= 8;
            }
            while (v38);
            v37 = &v25->f32[v33];
            if (v32 == result)
              goto LABEL_17;
          }
        }
        else
        {
          v37 = (float *)v25;
        }
        do
        {
          v42 = *v37++;
          *v36++ = v35 * v42;
        }
        while (v37 != v24);
LABEL_17:
        ++v27;
        v34 = (float32x4_t *)((char *)v34 + 4 * v28);
      }
      while (v27 != v8);
    }
  }
  return result;
}

void sub_207D6311C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t **a8@<X7>, uint64_t a9@<X8>)
{
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  __int16 v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  __int16 v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  __int16 v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  __int16 v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  __int16 v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  char *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  int v200;
  __int16 v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  void **v211;
  void **v212;
  uint64_t v213;
  void **v214;
  char v215;
  __int128 v216;
  _OWORD *v217;
  __int128 v218;
  _QWORD *v219;
  _QWORD *v220;
  BOOL v221;
  __int128 v222;
  void *v223;
  size_t v224;
  void **i;
  char *v226;
  char *v227;
  void *v228;
  char *v229;
  uint64_t v230;
  void **v231;
  void **v232;
  const void *v235[2];
  char v236;
  _BYTE v237[32];
  __int128 v238;
  int v239;
  char v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  __int16 v247;
  char v248;
  const void *v249[2];
  char v250;
  _BYTE v251[32];
  __int128 v252;
  int v253;
  char v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  __int16 v261;
  char v262;
  void *v263[2];
  char v264;
  __int128 __dst;
  __int128 v266;
  __int128 v267;
  int v268;
  char v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  __int16 v276;
  char v277;
  void *v278;
  char *v279;
  unint64_t v280;
  __int128 __p;
  std::__shared_weak_count *v282;
  char v283;
  __int128 v284;
  int v285;
  char v286;
  __int128 v287;
  int v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  int v292;
  uint64_t (**v293)();
  uint64_t v294;
  std::__shared_weak_count *v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int v299;
  __int16 v300;
  char v301;
  int v302;
  _OWORD v303[3];
  int v304;
  uint64_t (**v305)();
  uint64_t v306;
  std::__shared_weak_count *v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  __int16 v312;
  char v313;
  int v314;
  _OWORD v315[3];
  int v316;
  uint64_t (**v317)();
  uint64_t v318;
  std::__shared_weak_count *v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  int v323;
  __int16 v324;
  char v325;
  int v326;
  _QWORD v327[4];

  v327[1] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *(_QWORD *)(a1 + 688) = a7;
  v278 = 0;
  v279 = 0;
  v280 = 0;
  v16 = *(_DWORD *)(a1 + 24);
  if (v16 == 1)
  {
    HIBYTE(v282) = 7;
    strcpy((char *)&__p, "image_y");
    v33 = sub_207D52740(a1 + 312, (const void **)&__p);
    v34 = *(_QWORD *)(a1 + 688);
    v35 = *((_DWORD *)v33 + 4);
    v36 = *((_DWORD *)v33 + 6);
    v37 = *((_DWORD *)v33 + 8);
    v251[0] = 0;
    v254 = 0;
    LODWORD(v284) = 1;
    *(_QWORD *)((char *)&v284 + 4) = __PAIR64__(v36, v35);
    HIDWORD(v284) = v37;
    v285 = v34;
    v237[0] = 0;
    v237[20] = 0;
    sub_20809F1D0((uint64_t)&__dst, a2, &v284, (__int128 *)v237, v33, (uint64_t)v251);
    if (v254)
    {
      v38 = *(std::__shared_weak_count **)&v251[16];
      if (*(_QWORD *)&v251[16])
      {
        v39 = (unint64_t *)(*(_QWORD *)&v251[16] + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    v289 = __dst;
    v290 = v266;
    v291 = v267;
    v292 = v268;
    LOBYTE(v293) = 0;
    v301 = 0;
    if (v277)
    {
      v293 = off_24C06E878;
      v41 = v270;
      v42 = v271;
      if (v271)
      {
        p_shared_owners = (unint64_t *)&v271->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
        v45 = v274;
        v46 = v275;
        v47 = v276;
        do
          v48 = __ldxr(p_shared_owners);
        while (__stxr(v48 + 1, p_shared_owners));
      }
      else
      {
        v45 = v274;
        v46 = v275;
        v47 = v276;
      }
      v294 = v41;
      v295 = v42;
      v296 = v272;
      v297 = v273;
      v298 = v45;
      v299 = v46;
      v300 = v47;
      if (v42)
      {
        v67 = (unint64_t *)&v42->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v301 = 1;
    }
    v302 = 1;
    sub_207D552FC((uint64_t *)&v278, (uint64_t)&v289, (uint64_t)v303, 1uLL);
    if (v302 != -1)
      ((void (*)(_BYTE *, __int128 *))off_24C073D08[v302])(v251, &v289);
    v302 = -1;
    if (!v277)
      goto LABEL_63;
    v69 = v271;
    if (!v271)
      goto LABEL_63;
    v70 = (unint64_t *)&v271->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
      if ((SHIBYTE(v282) & 0x80000000) == 0)
        goto LABEL_121;
    }
    else
    {
LABEL_63:
      if ((SHIBYTE(v282) & 0x80000000) == 0)
        goto LABEL_121;
    }
    operator delete((void *)__p);
    if (!*(_BYTE *)(a1 + 140))
      goto LABEL_183;
    goto LABEL_122;
  }
  if (v16)
    goto LABEL_121;
  v264 = 7;
  strcpy((char *)v263, "image_y");
  v17 = sub_207D52740(a1 + 312, (const void **)v263);
  v18 = *(_QWORD *)(a1 + 688);
  v19 = *((_DWORD *)v17 + 4);
  v20 = *((_DWORD *)v17 + 6);
  v21 = *((_DWORD *)v17 + 8);
  v251[0] = 0;
  v254 = 0;
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = __PAIR64__(v20, v19);
  HIDWORD(__p) = v21;
  LODWORD(v282) = v18;
  v237[0] = 0;
  v237[20] = 0;
  sub_20809F1D0((uint64_t)&__dst, a2, &__p, (__int128 *)v237, v17, (uint64_t)v251);
  if (v254)
  {
    v22 = *(std::__shared_weak_count **)&v251[16];
    if (*(_QWORD *)&v251[16])
    {
      v23 = (unint64_t *)(*(_QWORD *)&v251[16] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v289 = __dst;
  v290 = v266;
  v291 = v267;
  v292 = v268;
  LOBYTE(v293) = 0;
  v301 = 0;
  if (v277)
  {
    v293 = off_24C06E878;
    v25 = v270;
    v26 = v271;
    if (v271)
    {
      v27 = (unint64_t *)&v271->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = v274;
      v30 = v275;
      v31 = v276;
      do
        v32 = __ldxr(v27);
      while (__stxr(v32 + 1, v27));
    }
    else
    {
      v29 = v274;
      v30 = v275;
      v31 = v276;
    }
    v294 = v25;
    v295 = v26;
    v296 = v272;
    v297 = v273;
    v298 = v29;
    v299 = v30;
    v300 = v31;
    if (v26)
    {
      v49 = (unint64_t *)&v26->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v301 = 1;
  }
  v302 = 1;
  v250 = 8;
  strcpy((char *)v249, "image_cb");
  v51 = sub_207D52740(a1 + 312, v249);
  v52 = *(_QWORD *)(a1 + 688);
  v53 = *((_DWORD *)v51 + 4);
  v54 = *((_DWORD *)v51 + 6);
  v55 = *((_DWORD *)v51 + 8);
  v237[0] = 0;
  v240 = 0;
  LODWORD(v284) = 1;
  *(_QWORD *)((char *)&v284 + 4) = __PAIR64__(v54, v53);
  HIDWORD(v284) = v55;
  v285 = v52;
  LOBYTE(__p) = 0;
  BYTE4(v282) = 0;
  sub_20809F1D0((uint64_t)v251, a3, &v284, &__p, v51, (uint64_t)v237);
  if (v240)
  {
    v56 = *(std::__shared_weak_count **)&v237[16];
    if (*(_QWORD *)&v237[16])
    {
      v57 = (unint64_t *)(*(_QWORD *)&v237[16] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  v303[0] = *(_OWORD *)v251;
  v303[1] = *(_OWORD *)&v251[16];
  v303[2] = v252;
  v304 = v253;
  LOBYTE(v305) = 0;
  v313 = 0;
  if (v262)
  {
    v305 = off_24C06E878;
    v59 = v255;
    v60 = v256;
    if (v256)
    {
      v61 = (unint64_t *)&v256->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      v63 = v259;
      v64 = v260;
      v65 = v261;
      do
        v66 = __ldxr(v61);
      while (__stxr(v66 + 1, v61));
    }
    else
    {
      v63 = v259;
      v64 = v260;
      v65 = v261;
    }
    v306 = v59;
    v307 = v60;
    v308 = v257;
    v309 = v258;
    v310 = v63;
    v311 = v64;
    v312 = v65;
    if (v60)
    {
      v72 = (unint64_t *)&v60->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v313 = 1;
  }
  v314 = 1;
  v236 = 8;
  strcpy((char *)v235, "image_cr");
  v74 = sub_207D52740(a1 + 312, v235);
  v75 = *(_QWORD *)(a1 + 688);
  v76 = *((_DWORD *)v74 + 4);
  v77 = *((_DWORD *)v74 + 6);
  v78 = *((_DWORD *)v74 + 8);
  LOBYTE(__p) = 0;
  v283 = 0;
  LODWORD(v287) = 1;
  *(_QWORD *)((char *)&v287 + 4) = __PAIR64__(v77, v76);
  HIDWORD(v287) = v78;
  v288 = v75;
  LOBYTE(v284) = 0;
  v286 = 0;
  sub_20809F1D0((uint64_t)v237, a4, &v287, &v284, v74, (uint64_t)&__p);
  if (v283)
  {
    v79 = v282;
    if (v282)
    {
      v80 = (unint64_t *)&v282->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  v315[0] = *(_OWORD *)v237;
  v315[1] = *(_OWORD *)&v237[16];
  v315[2] = v238;
  v316 = v239;
  LOBYTE(v317) = 0;
  v325 = 0;
  if (v248)
  {
    v317 = off_24C06E878;
    v82 = v241;
    v83 = v242;
    if (v242)
    {
      v84 = (unint64_t *)&v242->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
      v86 = v245;
      v87 = v246;
      v88 = v247;
      do
        v89 = __ldxr(v84);
      while (__stxr(v89 + 1, v84));
    }
    else
    {
      v86 = v245;
      v87 = v246;
      v88 = v247;
    }
    v318 = v82;
    v319 = v83;
    v320 = v243;
    v321 = v244;
    v322 = v86;
    v323 = v87;
    v324 = v88;
    if (v83)
    {
      v90 = (unint64_t *)&v83->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v325 = 1;
  }
  v326 = 1;
  sub_207D552FC((uint64_t *)&v278, (uint64_t)&v289, (uint64_t)v327, 3uLL);
  if (v326 != -1)
    ((void (*)(__int128 *, _OWORD *))off_24C073D08[v326])(&__p, v315);
  v326 = -1;
  if (v314 != -1)
    ((void (*)(__int128 *, _OWORD *))off_24C073D08[v314])(&__p, v303);
  v314 = -1;
  if (v302 != -1)
    ((void (*)(__int128 *, __int128 *))off_24C073D08[v302])(&__p, &v289);
  v302 = -1;
  if (v248)
  {
    v92 = v242;
    if (v242)
    {
      v93 = (unint64_t *)&v242->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
  }
  if (v236 < 0)
    operator delete((void *)v235[0]);
  if (v262)
  {
    v95 = v256;
    if (v256)
    {
      v96 = (unint64_t *)&v256->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  if (v250 < 0)
    operator delete((void *)v249[0]);
  if (!v277)
    goto LABEL_120;
  v98 = v271;
  if (!v271)
    goto LABEL_120;
  v99 = (unint64_t *)&v271->__shared_owners_;
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (v100)
  {
LABEL_120:
    if ((v264 & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_306;
  }
  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
  std::__shared_weak_count::__release_weak(v98);
  if ((v264 & 0x80000000) == 0)
  {
LABEL_121:
    if (!*(_BYTE *)(a1 + 140))
      goto LABEL_183;
    goto LABEL_122;
  }
LABEL_306:
  operator delete(v263[0]);
  if (!*(_BYTE *)(a1 + 140))
    goto LABEL_183;
LABEL_122:
  sub_207D62EBC(a1, a5);
  v101 = *(_QWORD *)(a1 + 480);
  v237[23] = 9;
  strcpy(v237, "ray_dir_x");
  v102 = sub_207D52740(a1 + 312, (const void **)v237);
  v103 = *(_QWORD *)(a1 + 688);
  v104 = *((_DWORD *)v102 + 4);
  v105 = *((_DWORD *)v102 + 6);
  v106 = *((_DWORD *)v102 + 8);
  LOBYTE(__dst) = 0;
  v269 = 0;
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = __PAIR64__(v105, v104);
  HIDWORD(__p) = v106;
  LODWORD(v282) = v103;
  v251[0] = 0;
  v251[20] = 0;
  sub_20809F1D0((uint64_t)&v289, v101, &__p, (__int128 *)v251, v102, (uint64_t)&__dst);
  if (!v269)
    goto LABEL_127;
  v107 = (std::__shared_weak_count *)v266;
  if (!(_QWORD)v266)
    goto LABEL_127;
  v108 = (unint64_t *)(v266 + 8);
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (!v109)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    v110 = v279;
    if ((unint64_t)v279 < v280)
    {
LABEL_128:
      v111 = v289;
      v112 = v290;
      v113 = v291;
      *((_DWORD *)v110 + 12) = v292;
      *((_OWORD *)v110 + 1) = v112;
      *((_OWORD *)v110 + 2) = v113;
      *(_OWORD *)v110 = v111;
      v110[56] = 0;
      v110[112] = 0;
      if (v301)
      {
        *((_QWORD *)v110 + 7) = off_24C06E878;
        v114 = v294;
        v115 = v295;
        if (v295)
        {
          v116 = (unint64_t *)&v295->__shared_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
          v118 = v298;
          v119 = v299;
          v120 = v300;
          do
            v121 = __ldxr(v116);
          while (__stxr(v121 + 1, v116));
        }
        else
        {
          v118 = v298;
          v119 = v299;
          v120 = v300;
        }
        *((_QWORD *)v110 + 8) = v114;
        *((_QWORD *)v110 + 9) = v115;
        v122 = v296;
        *((_DWORD *)v110 + 22) = v297;
        *((_QWORD *)v110 + 10) = v122;
        *((_QWORD *)v110 + 12) = v118;
        *((_DWORD *)v110 + 26) = v119;
        *((_WORD *)v110 + 54) = v120;
        if (v115)
        {
          v123 = (unint64_t *)&v115->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v110[112] = 1;
      }
      *((_DWORD *)v110 + 30) = 1;
      v279 = v110 + 128;
      if (!v301)
        goto LABEL_150;
      goto LABEL_146;
    }
  }
  else
  {
LABEL_127:
    v110 = v279;
    if ((unint64_t)v279 < v280)
      goto LABEL_128;
  }
  v279 = sub_207D697D4((char **)&v278, (uint64_t)&v289);
  if (!v301)
    goto LABEL_150;
LABEL_146:
  v125 = v295;
  if (v295)
  {
    v126 = (unint64_t *)&v295->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
      if ((v237[23] & 0x80000000) == 0)
        goto LABEL_152;
      goto LABEL_151;
    }
  }
LABEL_150:
  if ((v237[23] & 0x80000000) != 0)
LABEL_151:
    operator delete(*(void **)v237);
LABEL_152:
  v128 = *(_QWORD *)(a1 + 504);
  v237[23] = 9;
  strcpy(v237, "ray_dir_y");
  v129 = sub_207D52740(a1 + 312, (const void **)v237);
  v130 = *(_QWORD *)(a1 + 688);
  v131 = *((_DWORD *)v129 + 4);
  v132 = *((_DWORD *)v129 + 6);
  v133 = *((_DWORD *)v129 + 8);
  LOBYTE(__dst) = 0;
  v269 = 0;
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = __PAIR64__(v132, v131);
  HIDWORD(__p) = v133;
  LODWORD(v282) = v130;
  v251[0] = 0;
  v251[20] = 0;
  sub_20809F1D0((uint64_t)&v289, v128, &__p, (__int128 *)v251, v129, (uint64_t)&__dst);
  if (!v269)
    goto LABEL_157;
  v134 = (std::__shared_weak_count *)v266;
  if (!(_QWORD)v266)
    goto LABEL_157;
  v135 = (unint64_t *)(v266 + 8);
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (v136)
  {
LABEL_157:
    v137 = v279;
    if ((unint64_t)v279 < v280)
      goto LABEL_158;
LABEL_168:
    v279 = sub_207D697D4((char **)&v278, (uint64_t)&v289);
    if (!v301)
      goto LABEL_182;
    goto LABEL_178;
  }
  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
  std::__shared_weak_count::__release_weak(v134);
  v137 = v279;
  if ((unint64_t)v279 >= v280)
    goto LABEL_168;
LABEL_158:
  v138 = v289;
  v139 = v290;
  v140 = v291;
  *((_DWORD *)v137 + 12) = v292;
  *((_OWORD *)v137 + 1) = v139;
  *((_OWORD *)v137 + 2) = v140;
  *(_OWORD *)v137 = v138;
  v137[56] = 0;
  v137[112] = 0;
  if (v301)
  {
    *((_QWORD *)v137 + 7) = off_24C06E878;
    v141 = v294;
    v142 = v295;
    if (v295)
    {
      v143 = (unint64_t *)&v295->__shared_owners_;
      do
        v144 = __ldxr(v143);
      while (__stxr(v144 + 1, v143));
      v145 = v298;
      v146 = v299;
      v147 = v300;
      do
        v148 = __ldxr(v143);
      while (__stxr(v148 + 1, v143));
    }
    else
    {
      v145 = v298;
      v146 = v299;
      v147 = v300;
    }
    *((_QWORD *)v137 + 8) = v141;
    *((_QWORD *)v137 + 9) = v142;
    v149 = v296;
    *((_DWORD *)v137 + 22) = v297;
    *((_QWORD *)v137 + 10) = v149;
    *((_QWORD *)v137 + 12) = v145;
    *((_DWORD *)v137 + 26) = v146;
    *((_WORD *)v137 + 54) = v147;
    if (v142)
    {
      v150 = (unint64_t *)&v142->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    v137[112] = 1;
  }
  *((_DWORD *)v137 + 30) = 1;
  v279 = v137 + 128;
  if (v301)
  {
LABEL_178:
    v152 = v295;
    if (!v295)
      goto LABEL_182;
    v153 = (unint64_t *)&v295->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (v154)
      goto LABEL_182;
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
    if ((v237[23] & 0x80000000) != 0)
      goto LABEL_198;
LABEL_183:
    if (!*(_BYTE *)(a1 + 176))
      goto LABEL_216;
    goto LABEL_184;
  }
LABEL_182:
  if ((v237[23] & 0x80000000) == 0)
    goto LABEL_183;
LABEL_198:
  operator delete(*(void **)v237);
  if (!*(_BYTE *)(a1 + 176))
    goto LABEL_216;
LABEL_184:
  sub_207D623F0(a1, a6, (*(_QWORD *)(a1 + 88) * *(_QWORD *)(a1 + 96)) >> 6);
  v155 = *(_QWORD *)(a1 + 456);
  v237[23] = 10;
  strcpy(v237, "extrinsics");
  v156 = sub_207D52740(a1 + 312, (const void **)v237);
  v157 = *(_QWORD *)(a1 + 688);
  v158 = *((_DWORD *)v156 + 4);
  v159 = *((_DWORD *)v156 + 6);
  v160 = *((_DWORD *)v156 + 8);
  LOBYTE(__dst) = 0;
  v269 = 0;
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = __PAIR64__(v159, v158);
  HIDWORD(__p) = v160;
  LODWORD(v282) = v157;
  v251[0] = 0;
  v251[20] = 0;
  sub_20809F1D0((uint64_t)&v289, v155, &__p, (__int128 *)v251, v156, (uint64_t)&__dst);
  if (!v269)
    goto LABEL_189;
  v161 = (std::__shared_weak_count *)v266;
  if (!(_QWORD)v266)
    goto LABEL_189;
  v162 = (unint64_t *)(v266 + 8);
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (v163)
  {
LABEL_189:
    v164 = v279;
    if ((unint64_t)v279 < v280)
      goto LABEL_190;
LABEL_201:
    v279 = sub_207D697D4((char **)&v278, (uint64_t)&v289);
    if (!v301)
      goto LABEL_215;
    goto LABEL_211;
  }
  ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
  std::__shared_weak_count::__release_weak(v161);
  v164 = v279;
  if ((unint64_t)v279 >= v280)
    goto LABEL_201;
LABEL_190:
  v165 = v289;
  v166 = v290;
  v167 = v291;
  *((_DWORD *)v164 + 12) = v292;
  *((_OWORD *)v164 + 1) = v166;
  *((_OWORD *)v164 + 2) = v167;
  *(_OWORD *)v164 = v165;
  v164[56] = 0;
  v164[112] = 0;
  if (v301)
  {
    *((_QWORD *)v164 + 7) = off_24C06E878;
    v168 = v294;
    v169 = v295;
    if (v295)
    {
      v170 = (unint64_t *)&v295->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
      v172 = v298;
      v173 = v299;
      v174 = v300;
      do
        v175 = __ldxr(v170);
      while (__stxr(v175 + 1, v170));
    }
    else
    {
      v172 = v298;
      v173 = v299;
      v174 = v300;
    }
    *((_QWORD *)v164 + 8) = v168;
    *((_QWORD *)v164 + 9) = v169;
    v176 = v296;
    *((_DWORD *)v164 + 22) = v297;
    *((_QWORD *)v164 + 10) = v176;
    *((_QWORD *)v164 + 12) = v172;
    *((_DWORD *)v164 + 26) = v173;
    *((_WORD *)v164 + 54) = v174;
    if (v169)
    {
      v177 = (unint64_t *)&v169->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v164[112] = 1;
  }
  *((_DWORD *)v164 + 30) = 1;
  v279 = v164 + 128;
  if (v301)
  {
LABEL_211:
    v179 = v295;
    if (!v295)
      goto LABEL_215;
    v180 = (unint64_t *)&v295->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (v181)
      goto LABEL_215;
    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
    std::__shared_weak_count::__release_weak(v179);
    if ((v237[23] & 0x80000000) != 0)
      goto LABEL_231;
LABEL_216:
    if (!*(_BYTE *)(a1 + 179))
      goto LABEL_250;
    goto LABEL_217;
  }
LABEL_215:
  if ((v237[23] & 0x80000000) == 0)
    goto LABEL_216;
LABEL_231:
  operator delete(*(void **)v237);
  if (!*(_BYTE *)(a1 + 179))
    goto LABEL_250;
LABEL_217:
  v182 = *(_QWORD *)(a1 + 640);
  v237[23] = 9;
  strcpy(v237, "rnn_hc_in");
  v183 = sub_207D52740(a1 + 312, (const void **)v237);
  v184 = *(_QWORD *)(a1 + 688);
  v185 = *((_DWORD *)v183 + 4);
  v186 = *((_DWORD *)v183 + 6);
  v187 = *((_DWORD *)v183 + 8);
  LOBYTE(__dst) = 0;
  v269 = 0;
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = __PAIR64__(v186, v185);
  HIDWORD(__p) = v187;
  LODWORD(v282) = v184;
  v251[0] = 0;
  v251[20] = 0;
  sub_20809F1D0((uint64_t)&v289, v182, &__p, (__int128 *)v251, v183, (uint64_t)&__dst);
  if (!v269)
    goto LABEL_222;
  v188 = (std::__shared_weak_count *)v266;
  if (!(_QWORD)v266)
    goto LABEL_222;
  v189 = (unint64_t *)(v266 + 8);
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 - 1, v189));
  if (!v190)
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
    v191 = v279;
    if ((unint64_t)v279 < v280)
    {
LABEL_223:
      v192 = v289;
      v193 = v290;
      v194 = v291;
      *((_DWORD *)v191 + 12) = v292;
      *((_OWORD *)v191 + 1) = v193;
      *((_OWORD *)v191 + 2) = v194;
      *(_OWORD *)v191 = v192;
      v191[56] = 0;
      v191[112] = 0;
      if (v301)
      {
        *((_QWORD *)v191 + 7) = off_24C06E878;
        v195 = v294;
        v196 = v295;
        if (v295)
        {
          v197 = (unint64_t *)&v295->__shared_owners_;
          do
            v198 = __ldxr(v197);
          while (__stxr(v198 + 1, v197));
          v199 = v298;
          v200 = v299;
          v201 = v300;
          do
            v202 = __ldxr(v197);
          while (__stxr(v202 + 1, v197));
        }
        else
        {
          v199 = v298;
          v200 = v299;
          v201 = v300;
        }
        *((_QWORD *)v191 + 8) = v195;
        *((_QWORD *)v191 + 9) = v196;
        v203 = v296;
        *((_DWORD *)v191 + 22) = v297;
        *((_QWORD *)v191 + 10) = v203;
        *((_QWORD *)v191 + 12) = v199;
        *((_DWORD *)v191 + 26) = v200;
        *((_WORD *)v191 + 54) = v201;
        if (v196)
        {
          v204 = (unint64_t *)&v196->__shared_owners_;
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
            std::__shared_weak_count::__release_weak(v196);
          }
        }
        v191[112] = 1;
      }
      *((_DWORD *)v191 + 30) = 1;
      v279 = v191 + 128;
      if (!v301)
      {
LABEL_248:
        if ((v237[23] & 0x80000000) == 0)
          goto LABEL_250;
        goto LABEL_249;
      }
      goto LABEL_244;
    }
  }
  else
  {
LABEL_222:
    v191 = v279;
    if ((unint64_t)v279 < v280)
      goto LABEL_223;
  }
  v279 = sub_207D697D4((char **)&v278, (uint64_t)&v289);
  if (!v301)
    goto LABEL_248;
LABEL_244:
  v206 = v295;
  if (!v295)
    goto LABEL_248;
  v207 = (unint64_t *)&v295->__shared_owners_;
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 - 1, v207));
  if (v208)
    goto LABEL_248;
  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
  std::__shared_weak_count::__release_weak(v206);
  if ((v237[23] & 0x80000000) != 0)
LABEL_249:
    operator delete(*(void **)v237);
LABEL_250:
  kdebug_trace();
  v289 = 0u;
  v290 = 0u;
  LODWORD(v291) = 733237024;
  kdebug_trace();
  if (*(_QWORD *)(a1 + 200) == 1)
    goto LABEL_294;
  v209 = *(_QWORD *)(a1 + 264);
  memset(v251, 0, 24);
  sub_207CA44DC((char **)v251, v209);
  v210 = *(_QWORD **)(a1 + 248);
  if (v210 != (_QWORD *)(a1 + 256))
  {
    do
    {
      if (*((char *)v210 + 55) < 0)
      {
        sub_207CA40D8(&__dst, (void *)v210[4], v210[5]);
      }
      else
      {
        __dst = *((_OWORD *)v210 + 2);
        *(_QWORD *)&v266 = v210[6];
      }
      v217 = *(_OWORD **)&v251[8];
      if (*(_QWORD *)&v251[8] >= *(_QWORD *)&v251[16])
      {
        *(_QWORD *)&v251[8] = sub_207CA4674((void **)v251, (uint64_t)&__dst);
        if (SBYTE7(v266) < 0)
        {
          operator delete((void *)__dst);
          v219 = (_QWORD *)v210[1];
          if (v219)
          {
            do
            {
LABEL_267:
              v220 = v219;
              v219 = (_QWORD *)*v219;
            }
            while (v219);
            goto LABEL_258;
          }
        }
        else
        {
          v219 = (_QWORD *)v210[1];
          if (v219)
            goto LABEL_267;
        }
      }
      else
      {
        v218 = __dst;
        *(_QWORD *)(*(_QWORD *)&v251[8] + 16) = v266;
        *v217 = v218;
        *(_QWORD *)&v251[8] = (char *)v217 + 24;
        v219 = (_QWORD *)v210[1];
        if (v219)
          goto LABEL_267;
      }
      do
      {
        v220 = (_QWORD *)v210[2];
        v221 = *v220 == (_QWORD)v210;
        v210 = v220;
      }
      while (!v221);
LABEL_258:
      v210 = v220;
    }
    while (v220 != (_QWORD *)(a1 + 256));
  }
  v211 = *(void ***)v251;
  *(_QWORD *)v237 = *(_QWORD *)v251;
  v212 = *(void ***)&v251[8];
  *(_OWORD *)&v237[8] = *(_OWORD *)&v251[8];
  v213 = *(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 24;
  v214 = (void **)(a1 + 216);
  if (*(_BYTE *)(a1 + 240))
  {
    if (v214 == (void **)v213)
    {
      if (!*(_QWORD *)v251)
        goto LABEL_294;
    }
    else
    {
      v231 = *(void ***)&v251[8];
      v215 = *(_BYTE *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 1);
      if (*(char *)(a1 + 239) < 0)
      {
        if (v215 >= 0)
          v223 = (void *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 24);
        else
          v223 = *(void **)v213;
        if (v215 >= 0)
          v224 = *(unsigned __int8 *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 1);
        else
          v224 = *(_QWORD *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 16);
        sub_207CC2244(v214, v223, v224);
        v212 = v231;
      }
      else
      {
        if ((*(_BYTE *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 1) & 0x80) != 0)
        {
          sub_207CC2180(v214, *(void **)v213, *(_QWORD *)(v213 + 8));
        }
        else
        {
          v216 = *(_OWORD *)v213;
          *(_QWORD *)(a1 + 232) = *(_QWORD *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 8);
          *(_OWORD *)v214 = v216;
        }
        v212 = v231;
      }
    }
  }
  else
  {
    if (*(char *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 1) < 0)
    {
      v232 = *(void ***)&v251[8];
      sub_207CA40D8(v214, *(void **)v213, *(_QWORD *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 16));
      v212 = v232;
    }
    else
    {
      v222 = *(_OWORD *)v213;
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(*(_QWORD *)v251 + 24 * *(_QWORD *)(a1 + 688) - 8);
      *(_OWORD *)v214 = v222;
    }
    *(_BYTE *)(a1 + 240) = 1;
  }
  for (i = v212; i != v211; i -= 3)
  {
    if (*((char *)i - 1) < 0)
      operator delete(*(i - 3));
  }
  operator delete(v211);
LABEL_294:
  sub_207D6499C(a9, a1, &v278, a1 + 216, a8);
  kdebug_trace();
  v226 = (char *)v278;
  if (v278)
  {
    v227 = v279;
    v228 = v278;
    if (v279 != v278)
    {
      do
      {
        v229 = v227 - 128;
        v230 = *((unsigned int *)v227 - 2);
        if ((_DWORD)v230 != -1)
          ((void (*)(__int128 *, char *))off_24C073D08[v230])(&v289, v227 - 128);
        *((_DWORD *)v227 - 2) = -1;
        v227 -= 128;
      }
      while (v229 != v226);
      v228 = v278;
    }
    v279 = v226;
    operator delete(v228);
  }
}

void sub_207D646DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;

  sub_207C99DE0(&__p);
  sub_207CD822C((uint64_t)&STACK[0x260]);
  sub_207D2E058(&a68);
  _Unwind_Resume(a1);
}

void sub_207D6499C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t **a5)
{
  char *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unsigned __int8 v10;
  char *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 v39;
  char *v40;
  size_t v41;
  size_t v42;
  __int128 *p_buf;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t **v56;
  unint64_t v57;
  __int128 *v58;
  unsigned int *v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t *v62;
  int v63;
  const void *v64;
  size_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  int v69;
  uint64_t *v70;
  size_t v71;
  size_t v72;
  int v73;
  int v74;
  char *v75;
  _BYTE *v76;
  __int128 v77;
  uint64_t *v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  BOOL v86;
  BOOL v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  BOOL v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  unsigned __int8 v101;
  char *v102;
  unsigned __int8 v103;
  __int128 v104;
  int v105;
  _DWORD *v106;
  size_t v107;
  int v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  char *v113;
  char *v114;
  int v115;
  unsigned __int8 v116;
  BOOL v117;
  uint64_t v118;
  uint64_t i;
  unsigned __int8 v120;
  unsigned __int8 v121;
  uint64_t j;
  uint64_t v123;
  unsigned __int8 v124;
  int k;
  unsigned __int8 v126;
  BOOL v127;
  uint64_t v128;
  uint64_t m;
  unsigned __int8 v130;
  int v131;
  size_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  BOOL v141;
  char v142;
  char *v143;
  char *v144;
  int v145;
  int v146;
  char *v147;
  int n;
  int v149;
  char *v150;
  unsigned __int8 v151;
  BOOL v152;
  uint64_t ii;
  uint64_t v154;
  unsigned __int8 v155;
  char *v156;
  char *v157;
  size_t v158;
  char *v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  size_t __lena;
  int __lenb;
  int v183;
  uint64_t v184;
  std::error_condition v185;
  std::error_condition v186;
  uint64_t (**v187)();
  char v188;
  char *v189;
  std::__shared_weak_count *v190;
  void *__p[2];
  uint64_t v192;
  char v193;
  __int128 buf;
  char *__s;
  std::__shared_weak_count *v196;
  __int128 v197;
  uint64_t v198;
  unsigned __int8 v199;
  unsigned int v200;
  _BYTE __dst[32];
  __int128 v202;
  uint64_t v203;
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  v187 = off_24C06E9E8;
  v188 = 10;
  v7 = (char *)operator new(0x18uLL);
  *(_QWORD *)v7 = 0;
  v7[23] = 0;
  v189 = v7;
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v190 = v8;
  LOBYTE(__p[0]) = 0;
  v193 = 0;
  if (!*(_BYTE *)(a4 + 24))
    goto LABEL_21;
  v9 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)__dst = &off_24C0848B8;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_207CA40D8(&__dst[8], *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&__dst[8] = *(_OWORD *)a4;
    *(_QWORD *)&__dst[24] = *(_QWORD *)(a4 + 16);
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, _BYTE *))(**(_QWORD **)(v9 + 16) + 48))(&buf, *(_QWORD *)(v9 + 16), __dst);
  *(_QWORD *)__dst = &off_24C0848B8;
  if ((__dst[31] & 0x80000000) == 0)
  {
    if (BYTE8(buf))
      goto LABEL_7;
    goto LABEL_16;
  }
  operator delete(*(void **)&__dst[8]);
  if (!BYTE8(buf))
  {
LABEL_16:
    *(_QWORD *)&buf = off_24C06E9E8;
    v15 = v196;
    if (v196)
    {
      p_shared_owners = (unint64_t *)&v196->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
LABEL_21:
    sub_2080BA604(*(_QWORD *)(*(_QWORD *)(a2 + 304) + 16), a3, 0, 0, (uint64_t)&buf);
    v188 = BYTE8(buf);
    v19 = __s;
    v18 = v196;
    if (v196)
    {
      v20 = (unint64_t *)&v196->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22 = v190;
    v189 = v19;
    v190 = v18;
    if (!v22)
      goto LABEL_28;
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v25 = v199;
      if (v193 == v199)
        goto LABEL_45;
    }
    else
    {
LABEL_28:
      v25 = v199;
      if (v193 == v199)
        goto LABEL_45;
    }
    *(_OWORD *)__p = v197;
    v192 = v198;
    v198 = 0;
    v197 = 0uLL;
    v193 = 1;
    v25 = v199;
LABEL_45:
    if (v25)
    {
      v31 = v197;
      if ((_QWORD)v197)
      {
        v32 = *((_QWORD *)&v197 + 1);
        v33 = (void *)v197;
        if (*((_QWORD *)&v197 + 1) != (_QWORD)v197)
        {
          do
          {
            v34 = v32 - 128;
            v35 = *(unsigned int *)(v32 - 8);
            if ((_DWORD)v35 != -1)
              ((void (*)(_BYTE *, uint64_t))off_24C073D50[v35])(__dst, v32 - 128);
            *(_DWORD *)(v32 - 8) = -1;
            v32 -= 128;
          }
          while (v34 != v31);
          v33 = (void *)v197;
        }
        *((_QWORD *)&v197 + 1) = v31;
        operator delete(v33);
      }
    }
    *(_QWORD *)&buf = off_24C06E9E8;
    v36 = v196;
    if (!v196)
      goto LABEL_58;
    v37 = (unint64_t *)&v196->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (v188)
      {
LABEL_59:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          v102 = v189;
          if (v189[23] < 0)
            v102 = *(char **)v189;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v102;
          _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: PatchTrackingInference failed with error: %s", (uint8_t *)&buf, 0xCu);
          v103 = atomic_load((unsigned __int8 *)&qword_25452B598);
          if ((v103 & 1) != 0)
          {
LABEL_61:
            *(_QWORD *)&v185.__val_ = 15;
            v185.__cat_ = (const std::error_category *)&off_253E50C48;
            v40 = v189;
            if (v189[23] < 0)
              v40 = *(char **)v189;
            v41 = strlen(v40);
            if (v41 > 0x7FFFFFFFFFFFFFF7)
              sub_207C95C50();
            v42 = v41;
            if (v41 >= 0x17)
            {
              v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v41 | 7) != 0x17)
                v44 = v41 | 7;
              v45 = v44 + 1;
              p_buf = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&buf + 1) = v42;
              __s = (char *)(v45 | 0x8000000000000000);
              *(_QWORD *)&buf = p_buf;
            }
            else
            {
              HIBYTE(__s) = v41;
              p_buf = &buf;
              if (!v41)
              {
LABEL_71:
                *((_BYTE *)p_buf + v42) = 0;
                sub_207D01528(&v185, (uint64_t)&buf, (CFErrorRef *)a1);
                if (SHIBYTE(__s) < 0)
                {
                  operator delete((void *)buf);
                  if (!v193)
                    goto LABEL_81;
                  goto LABEL_73;
                }
                goto LABEL_72;
              }
            }
            memmove(p_buf, v40, v42);
            goto LABEL_71;
          }
        }
        else
        {
          v39 = atomic_load((unsigned __int8 *)&qword_25452B598);
          if ((v39 & 1) != 0)
            goto LABEL_61;
        }
        if (__cxa_guard_acquire(&qword_25452B598))
        {
          __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
          __cxa_guard_release(&qword_25452B598);
        }
        goto LABEL_61;
      }
    }
    else
    {
LABEL_58:
      if (v188)
        goto LABEL_59;
    }
    if (v193)
    {
      v54 = *(_QWORD *)(a2 + 144);
      if (*(_QWORD *)(a2 + 152) != v54)
      {
        v55 = 0;
        v56 = a5 + 1;
        while (1)
        {
          v58 = (__int128 *)(v54 + 24 * v55);
          v59 = (unsigned int *)__p[0];
          v60 = *v56;
          v61 = a5 + 1;
          v62 = (uint64_t *)(a5 + 1);
          if (*v56)
            break;
LABEL_121:
          v75 = (char *)operator new(0xB8uLL);
          v76 = v75 + 32;
          if (*((char *)v58 + 23) < 0)
          {
            sub_207CA40D8(v76, *(void **)v58, *((_QWORD *)v58 + 1));
          }
          else
          {
            v77 = *v58;
            *((_QWORD *)v75 + 6) = *((_QWORD *)v58 + 2);
            *(_OWORD *)v76 = v77;
          }
          *(_OWORD *)(v75 + 104) = 0u;
          *((_QWORD *)v75 + 21) = 0;
          *(_OWORD *)(v75 + 152) = 0u;
          *(_OWORD *)(v75 + 136) = 0u;
          *(_OWORD *)(v75 + 120) = 0u;
          *(_OWORD *)(v75 + 88) = 0u;
          *(_OWORD *)(v75 + 72) = 0u;
          *(_OWORD *)(v75 + 56) = 0u;
          *((_DWORD *)v75 + 26) = 16;
          *((_DWORD *)v75 + 44) = 0;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v75 + 1) = 0;
          *((_QWORD *)v75 + 2) = v62;
          *v61 = (uint64_t *)v75;
          v78 = (uint64_t *)v75;
          v79 = (uint64_t *)**a5;
          if (v79)
          {
            *a5 = v79;
            v78 = *v61;
          }
          sub_207CC24B4(a5[1], v78);
          a5[2] = (uint64_t *)((char *)a5[2] + 1);
          v80 = v75 + 56;
          v81 = *((unsigned int *)v75 + 44);
          v82 = v59[32 * v55 + 30];
          if ((_DWORD)v81 == -1)
            goto LABEL_91;
LABEL_129:
          if ((_DWORD)v82 == -1)
          {
            ((void (*)(__int128 *, char *))off_24C073D50[v81])(&buf, v80);
            *((_DWORD *)v75 + 44) = -1;
          }
          else
          {
LABEL_92:
            *(_QWORD *)&buf = v80;
            ((void (*)(__int128 *))off_24C073D68[v82])(&buf);
          }
LABEL_93:
          ++v55;
          v54 = *(_QWORD *)(a2 + 144);
          v57 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v54) >> 3);
          if (v55 >= v57)
            goto LABEL_136;
        }
        v63 = *((char *)v58 + 23);
        if (v63 >= 0)
          v64 = v58;
        else
          v64 = *(const void **)v58;
        if (v63 >= 0)
          v65 = *((unsigned __int8 *)v58 + 23);
        else
          v65 = *((_QWORD *)v58 + 1);
        while (1)
        {
          v62 = v60;
          v68 = (uint64_t *)v60[4];
          v66 = v60 + 4;
          v67 = v68;
          v69 = *((char *)v66 + 23);
          if (v69 >= 0)
            v70 = v66;
          else
            v70 = v67;
          if (v69 >= 0)
            v71 = *((unsigned __int8 *)v66 + 23);
          else
            v71 = v66[1];
          if (v71 >= v65)
            v72 = v65;
          else
            v72 = v71;
          v73 = memcmp(v64, v70, v72);
          if (v73)
          {
            if (v73 < 0)
              goto LABEL_101;
LABEL_115:
            v74 = memcmp(v70, v64, v72);
            if (v74)
            {
              if ((v74 & 0x80000000) == 0)
                goto LABEL_128;
            }
            else if (v71 >= v65)
            {
LABEL_128:
              v75 = (char *)v62;
              v80 = (char *)(v62 + 7);
              v81 = *((unsigned int *)v62 + 44);
              v82 = *((unsigned int *)__p[0] + 32 * v55 + 30);
              if ((_DWORD)v81 != -1)
                goto LABEL_129;
LABEL_91:
              if ((_DWORD)v82 != -1)
                goto LABEL_92;
              goto LABEL_93;
            }
            v60 = (uint64_t *)v62[1];
            if (!v60)
            {
              v61 = (uint64_t **)(v62 + 1);
              goto LABEL_121;
            }
          }
          else
          {
            if (v65 >= v71)
              goto LABEL_115;
LABEL_101:
            v60 = (uint64_t *)*v62;
            v61 = (uint64_t **)v62;
            if (!*v62)
              goto LABEL_121;
          }
        }
      }
      v57 = 0;
LABEL_136:
      if (*(_BYTE *)(a2 + 179))
      {
        LOBYTE(buf) = 0;
        v200 = -1;
        v83 = *((unsigned int *)__p[0] + 32 * v57 + 30);
        if ((_DWORD)v83 != -1)
        {
          ((void (*)(std::error_condition *, __int128 *))off_24C073D80[v83])(&v185, &buf);
          v200 = v83;
          if ((_DWORD)v83 != 2)
          {
LABEL_375:
            ((void (*)(_BYTE *, __int128 *))off_24C073D50[v83])(__dst, &buf);
            goto LABEL_376;
          }
          sub_207CB36E8((uint64_t)&buf, (uint64_t)__dst);
          v84 = v202;
          v85 = *(char **)__dst;
          if (HIDWORD(*(_QWORD *)&__dst[12]))
            v86 = *(_DWORD *)&__dst[12] == 0;
          else
            v86 = 1;
          v88 = v86 || *(_DWORD *)&__dst[20] == 0 || HIDWORD(*(_QWORD *)&__dst[20]) == 0;
          v89 = v88;
          if (v88)
            v90 = 0;
          else
            v90 = *(_QWORD *)&__dst[12];
          if (v88)
            v91 = 0;
          else
            v91 = *(_QWORD *)&__dst[20];
          v160 = DWORD2(v202);
          v163 = HIDWORD(*((_QWORD *)&v202 + 1));
          v92 = (HIDWORD(v91) * HIDWORD(v202));
          if ((_DWORD)v92 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            goto LABEL_296;
          }
          v93 = HIDWORD(v90);
          if ((*(_DWORD *)(a2 + 576) != (_DWORD)v90
             || *(_QWORD *)(a2 + 580) != __PAIR64__(v91, HIDWORD(v90))
             || *(_DWORD *)(a2 + 588) < HIDWORD(v91))
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingInference.cpp", 380, (uint64_t)"w_ == w && h_ == h && c_ == c && b_ <= b", 40, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_296;
          }
          v167 = *(char **)(a2 + 640);
          v94 = !(_DWORD)v90 || (_DWORD)v91 == 0;
          v95 = v94 ? 1 : v89;
          v96 = v95 ? 0 : HIDWORD(v91);
          v97 = *(_DWORD *)(a2 + 592);
          v177 = *(unsigned int *)(a2 + 596);
          v171 = *(unsigned int *)(a2 + 600);
          v162 = *(unsigned int *)(a2 + 604);
          if (*(_DWORD *)(a2 + 604) * v96 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            goto LABEL_296;
          }
          if (v84 != 1 || v97 != 1)
          {
            if ((_DWORD)v91 && (_DWORD)v90 && HIDWORD(v90) && HIDWORD(v91))
            {
              *(_QWORD *)__dst = 0;
              __dst[12] = v84;
              __dst[13] = BYTE1(v84);
              __dst[14] = BYTE2(v84);
              __dst[15] = BYTE3(v84);
              *(_DWORD *)&__dst[16] = v97;
              *(_DWORD *)&__dst[8] = v90 - 1;
              *(_DWORD *)&__dst[20] = HIDWORD(v90) - 1;
              *((_QWORD *)&v104 + 1) = v177;
              *(_QWORD *)&v104 = v84;
              *(_QWORD *)&__dst[24] = v104 >> 32;
              *(_QWORD *)((char *)&v202 + 4) = v160 | ((unint64_t)v171 << 32);
              v203 = v163 | (v162 << 32);
              v105 = HIDWORD(v91) - 1;
              LODWORD(v202) = v91 - 1;
              HIDWORD(v202) = HIDWORD(v91) - 1;
              if (HIDWORD(v91) == 1)
              {
                v106 = v167;
              }
              else
              {
                v106 = v167;
                do
                {
                  sub_207D6BCF4(__dst, v85, v106);
                  v85 += 4 * v163;
                  v106 += v162;
                  --v105;
                }
                while (v105);
              }
              sub_207D6BCF4(__dst, v85, v106);
            }
            goto LABEL_374;
          }
          v98 = HIDWORD(v84);
          if ((_DWORD)v98 != (_DWORD)v90 || (_DWORD)v177 != (_DWORD)v98)
          {
            if (!(_DWORD)v91 || !(_DWORD)v90 || !HIDWORD(v90) || !HIDWORD(v91))
              goto LABEL_374;
            v183 = HIDWORD(v90) - 1;
            v172 = v91 - 1;
            v107 = 4 * v90;
            v161 = HIDWORD(v91) - 1;
            __lena = v107;
            if (HIDWORD(v91) == 1)
            {
              v109 = v167;
            }
            else
            {
              v108 = 0;
              v109 = v167;
              do
              {
                v164 = v108;
                v165 = v85;
                v168 = v109;
                v110 = v85;
                v111 = v177;
                if (v172)
                {
                  v112 = 0;
                  v110 = v165;
                  do
                  {
                    v175 = v112;
                    v113 = v109;
                    v114 = v110;
                    if (v183)
                    {
                      v115 = 0;
                      v114 = v110;
                      v113 = v109;
                      do
                      {
                        if (!v114)
                        {
                          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                          v116 = atomic_load((unsigned __int8 *)&qword_254530A20);
                          if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                          {
                            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                            __cxa_guard_release(&qword_254530A20);
                          }
                          if (byte_254530A10)
                            v117 = byte_254530A18 == 0;
                          else
                            v117 = 0;
                          if (!v117)
                          {
                            v118 = qword_2545309E8;
                            for (i = qword_2545309F0; v118 != i; v118 += 16)
                              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v118)(*(_QWORD *)(v118 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                          }
                          v120 = atomic_load((unsigned __int8 *)&qword_254530A20);
                          if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                          {
                            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                            __cxa_guard_release(&qword_254530A20);
                          }
                          if (!byte_254530A10)
                            goto LABEL_296;
                          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                          v111 = v177;
                          v107 = __lena;
                        }
                        memmove(v113, v114, v107);
                        v114 += 4 * v98;
                        v113 += 4 * v111;
                        ++v115;
                      }
                      while (v115 != v183);
                    }
                    if (!v114)
                    {
                      sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                      v121 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      if (!byte_254530A10 || byte_254530A18)
                      {
                        v123 = qword_2545309E8;
                        for (j = qword_2545309F0; v123 != j; v123 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v123)(*(_QWORD *)(v123 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                      }
                      v124 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      if (!byte_254530A10)
                        goto LABEL_296;
                      qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                      v111 = v177;
                      v107 = __lena;
                    }
                    memmove(v113, v114, v107);
                    v110 += 4 * v160;
                    v109 += 4 * v171;
                    v112 = v175 + 1;
                  }
                  while (v175 + 1 != v172);
                }
                if (v183)
                {
                  for (k = 0; k != v183; ++k)
                  {
                    if (!v110)
                    {
                      sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                      v126 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      if (byte_254530A10)
                        v127 = byte_254530A18 == 0;
                      else
                        v127 = 0;
                      if (!v127)
                      {
                        v128 = qword_2545309E8;
                        for (m = qword_2545309F0; v128 != m; v128 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v128)(*(_QWORD *)(v128 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                      }
                      v130 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      if (!byte_254530A10)
                        goto LABEL_296;
                      qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                      v111 = v177;
                      v107 = __lena;
                    }
                    memmove(v109, v110, v107);
                    v110 += 4 * v98;
                    v109 += 4 * v111;
                  }
                }
                if (!v110
                  && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_296;
                }
                v107 = __lena;
                memmove(v109, v110, __lena);
                v85 = &v165[4 * v163];
                v109 = &v168[4 * v162];
                v108 = v164 + 1;
              }
              while (v164 + 1 != v161);
            }
            if (v172)
            {
              v147 = v109;
              if (v183)
              {
                for (n = 0; n != v172; ++n)
                {
                  v149 = 0;
                  v150 = v85;
                  v170 = v147;
                  do
                  {
                    while (v85)
                    {
                      memmove(v147, v85, __lena);
                      v85 += 4 * v98;
                      v147 += 4 * v177;
                      if (++v149 == v183)
                        goto LABEL_314;
                    }
                    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                    v151 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v151 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    if (byte_254530A10)
                      v152 = byte_254530A18 == 0;
                    else
                      v152 = 0;
                    if (!v152)
                    {
                      v154 = qword_2545309E8;
                      for (ii = qword_2545309F0; v154 != ii; v154 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v154)(*(_QWORD *)(v154 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                    }
                    v155 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v155 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    if (!byte_254530A10)
                      goto LABEL_296;
                    qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                    memcpy(v147, 0, __lena);
                    v147 += 4 * v177;
                    ++v149;
                    v85 = (char *)(4 * v98);
                  }
                  while (v149 != v183);
                  v85 = (char *)(4 * v98);
                  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    goto LABEL_296;
                  }
LABEL_314:
                  memmove(v147, v85, __lena);
                  v85 = &v150[4 * v160];
                  v147 = &v170[4 * v171];
                }
              }
              else
              {
                do
                {
                  if (!v85
                    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    goto LABEL_296;
                  }
                  memmove(v147, v85, __lena);
                  v85 += 4 * v160;
                  v147 += 4 * v171;
                  --v172;
                }
                while (v172);
              }
            }
            else
            {
              v147 = v109;
            }
            for (; v183; --v183)
            {
              if (!v85
                && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_296;
              }
              memmove(v147, v85, __lena);
              v85 += 4 * v98;
              v147 += 4 * v177;
            }
            if (!v85
              && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_296;
            }
            v156 = v147;
            v157 = v85;
            v158 = __lena;
LABEL_373:
            memmove(v156, v157, v158);
            goto LABEL_374;
          }
          if ((_DWORD)v171 == v160 && (_DWORD)v177 * HIDWORD(v90) == v160)
          {
            v99 = v91 * v160;
            if ((_DWORD)v99 == (_DWORD)v163 && (_DWORD)v162 == (_DWORD)v163)
            {
              if (v85 || !(_DWORD)v92)
              {
                if (!(_DWORD)v92)
                  goto LABEL_374;
              }
              else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_296;
              }
              v158 = 4 * v92;
              v156 = v167;
              v157 = v85;
              goto LABEL_373;
            }
            if ((_DWORD)v91 && HIDWORD(v91) && (_DWORD)v93 && (_DWORD)v177)
            {
              v132 = 4 * v99;
              v146 = HIDWORD(v91) - 1;
              if (HIDWORD(v91) != 1)
              {
                if ((_DWORD)v99)
                {
                  while (v85
                       || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    memmove(v167, v85, 4 * v99);
                    v85 += 4 * v163;
                    v167 += 4 * v162;
                    if (!--v146)
                      goto LABEL_352;
                  }
                  goto LABEL_296;
                }
                goto LABEL_374;
              }
LABEL_352:
              if (!(_DWORD)v99 || v85)
              {
                if (!(_DWORD)v99)
                  goto LABEL_374;
              }
              else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_296;
              }
              v156 = v167;
              v157 = v85;
              goto LABEL_372;
            }
            goto LABEL_374;
          }
          v184 = (v177 * HIDWORD(v90));
          if (!(_DWORD)v91 || !HIDWORD(v91) || !HIDWORD(v90) || !(_DWORD)v177)
            goto LABEL_374;
          v131 = v91 - 1;
          v132 = 4 * v184;
          v133 = 4 * v160;
          v134 = 4 * v171;
          __lenb = HIDWORD(v91) - 1;
          if (HIDWORD(v91) == 1)
          {
            v137 = v85;
            v139 = v167;
LABEL_357:
            v159 = v139;
            if (!v131)
            {
LABEL_364:
              if (!(_DWORD)v184 || v137)
              {
                if (!(_DWORD)v184)
                  goto LABEL_374;
              }
              else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_296;
              }
              v156 = v159;
              v157 = v137;
LABEL_372:
              v158 = v132;
              goto LABEL_373;
            }
            if ((_DWORD)v184)
            {
              while (v137
                   || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                memmove(v159, v137, v132);
                v137 += v133;
                v159 += v134;
                if (!--v131)
                  goto LABEL_364;
              }
              goto LABEL_296;
            }
LABEL_374:
            v83 = v200;
            if (v200 == -1)
              goto LABEL_376;
            goto LABEL_375;
          }
          v135 = 0;
          v176 = 4 * v163;
          v173 = 4 * v162;
          v136 = ((4 * v91 + 0x3FFFFFFF8) & 0x3FFFFFFFCLL) + 4;
          v137 = v85;
          v138 = &v85[v136 * v160];
          v139 = v167;
          v140 = &v167[v136 * v171];
          if (v131)
            v141 = (_DWORD)v184 == 0;
          else
            v141 = 1;
          v142 = v141;
          v178 = v142;
          while (1)
          {
            if (v131)
              v143 = v140;
            else
              v143 = v139;
            if (v131)
              v144 = v138;
            else
              v144 = v137;
            v166 = v137;
            v169 = v139;
            v145 = v131;
            if ((v178 & 1) == 0)
            {
              while (v137
                   || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                memmove(v139, v137, v132);
                v137 += v133;
                v139 += v134;
                if (!--v145)
                  goto LABEL_289;
              }
LABEL_296:
              abort();
            }
            v139 = v143;
            v137 = v144;
LABEL_289:
            if ((_DWORD)v184 && !v137)
              break;
            if ((_DWORD)v184)
              goto LABEL_279;
LABEL_280:
            v137 = &v166[v176];
            v139 = &v169[v173];
            ++v135;
            v138 += v176;
            v140 += v173;
            if (v135 == __lenb)
              goto LABEL_357;
          }
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_296;
          }
LABEL_279:
          memmove(v139, v137, v132);
          goto LABEL_280;
        }
      }
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: PatchTrackingInference didn't generate any outputs", (uint8_t *)&buf, 2u);
    }
LABEL_376:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (!v193)
      goto LABEL_81;
    goto LABEL_73;
  }
LABEL_7:
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v10 = atomic_load((unsigned __int8 *)&qword_25452B598);
    if ((v10 & 1) != 0)
      goto LABEL_9;
    goto LABEL_189;
  }
  v100 = __s;
  if (__s[23] < 0)
    v100 = *(char **)__s;
  *(_DWORD *)__dst = 136315138;
  *(_QWORD *)&__dst[4] = v100;
  _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: PatchTrackingInference failed with error: %s", __dst, 0xCu);
  v101 = atomic_load((unsigned __int8 *)&qword_25452B598);
  if ((v101 & 1) == 0)
  {
LABEL_189:
    if (__cxa_guard_acquire(&qword_25452B598))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
      __cxa_guard_release(&qword_25452B598);
    }
  }
LABEL_9:
  *(_QWORD *)&v186.__val_ = 15;
  v186.__cat_ = (const std::error_category *)&off_253E50C48;
  v11 = __s;
  if (__s[23] < 0)
    v11 = *(char **)__s;
  v12 = strlen(v11);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v26 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v26 = v12 | 7;
    v27 = v26 + 1;
    v14 = operator new(v26 + 1);
    *(_QWORD *)&__dst[8] = v13;
    *(_QWORD *)&__dst[16] = v27 | 0x8000000000000000;
    *(_QWORD *)__dst = v14;
    goto LABEL_33;
  }
  __dst[23] = v12;
  v14 = __dst;
  if (v12)
LABEL_33:
    memmove(v14, v11, v13);
  v14[v13] = 0;
  sub_207D01528(&v186, (uint64_t)__dst, (CFErrorRef *)a1);
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    *(_QWORD *)&buf = off_24C06E9E8;
    v28 = v196;
    if (!v196)
      goto LABEL_72;
  }
  else
  {
    *(_QWORD *)&buf = off_24C06E9E8;
    v28 = v196;
    if (!v196)
      goto LABEL_72;
  }
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (!v193)
      goto LABEL_81;
    goto LABEL_73;
  }
LABEL_72:
  if (!v193)
    goto LABEL_81;
LABEL_73:
  v46 = (char *)__p[0];
  if (__p[0])
  {
    v47 = (char *)__p[1];
    v48 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v49 = v47 - 128;
        v50 = *((unsigned int *)v47 - 2);
        if ((_DWORD)v50 != -1)
          ((void (*)(__int128 *, char *))off_24C073D50[v50])(&buf, v47 - 128);
        *((_DWORD *)v47 - 2) = -1;
        v47 -= 128;
      }
      while (v49 != v46);
      v48 = __p[0];
    }
    __p[1] = v46;
    operator delete(v48);
  }
LABEL_81:
  v187 = off_24C06E9E8;
  v51 = v190;
  if (v190)
  {
    v52 = (unint64_t *)&v190->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_207D664E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55)
{
  sub_207C96AFC((uint64_t)&__p);
  sub_207D689B4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_207D66628(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t **a11)
{
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  size_t size;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  std::string *v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  uint64_t v90;
  int v91;
  __int16 v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  size_t v101;
  unint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  std::string *v108;
  uint64_t *v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  __int16 v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  size_t v136;
  unint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  std::string *v143;
  uint64_t *v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  __int16 v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  __int16 v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  char *v186;
  int v187;
  char *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  char *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  int v207;
  __int16 v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  char *v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  int v234;
  __int16 v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  int v246;
  int v247;
  int v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  char *v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  __int16 v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  char *v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  int v282;
  __int16 v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t *v294;
  _DWORD *v295;
  _DWORD *v296;
  uint64_t v297;
  _DWORD *v298;
  uint64_t *v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  char *v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  int v316;
  __int16 v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  void **v325;
  _BYTE *v326;
  unint64_t v327;
  char *v328;
  unint64_t v329;
  BOOL v330;
  unint64_t v331;
  _BYTE *v332;
  uint64_t *v333;
  uint64_t v334;
  int v335;
  int v336;
  int v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  char *v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  int v350;
  __int16 v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  int v362;
  int v363;
  int v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  char *v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  int v377;
  __int16 v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::string *v386;
  uint64_t **v387;
  void *v388;
  void **v389;
  void *v390;
  int v391;
  uint64_t *v392;
  size_t v393;
  size_t v394;
  int v395;
  int v396;
  std::string *v397;
  std::string::size_type v398;
  char v399;
  uint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v410;
  uint64_t *v412;
  uint64_t *v413;
  uint64_t v414;
  void *v415[2];
  __int128 v416;
  __int128 v417;
  int v418;
  __int16 v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  uint64_t v422;
  int v423;
  uint64_t v424;
  int v425;
  __int16 v426;
  char v427;
  int v428;
  _BYTE __p[24];
  std::string v430;
  char *v431;
  char *v432;
  unint64_t v433;
  __int128 v434;
  int v435;
  std::string v436;
  char v437;
  __int128 v438;
  char v439;
  uint64_t v440;

  v440 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *(_QWORD *)(a1 + 688) = a8;
  v431 = 0;
  v432 = 0;
  v433 = 0;
  v19 = *a2;
  v18 = a2[1];
  v20 = 0x8E38E38E38E38E39 * ((v18 - *a2) >> 2);
  v21 = *(_QWORD *)(a1 + 384);
  v22 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 392) - v21) >> 2);
  v413 = (uint64_t *)(a1 + 384);
  if (v20 <= v22)
  {
    if (v20 < v22)
      *(_QWORD *)(a1 + 392) = v21 + 4 * ((v18 - *a2) >> 2);
  }
  else
  {
    sub_207D69A5C((char **)(a1 + 384), v20 - v22);
  }
  if (v18 != v19)
  {
    v23 = *a2 + 12;
    v24 = *v413 + 12;
    do
    {
      v16.i64[0] = *(_QWORD *)(v23 - 12);
      v17.i64[0] = *(_QWORD *)v23;
      v25 = vzip1q_s32(v16, v17).u64[0];
      v26 = vtrn2q_s32(v16, v17).u64[0];
      v16.i32[2] = *(_DWORD *)(v23 - 4);
      v17.i32[2] = *(_DWORD *)(v23 + 8);
      v27 = *(_QWORD *)(v23 + 12);
      v28 = *(_DWORD *)(v23 + 20);
      v16 = vzip2q_s32(v16, v17);
      *(_DWORD *)(v24 - 4) = v27;
      *(_QWORD *)(v24 - 12) = v25;
      *(_DWORD *)(v24 + 8) = HIDWORD(v27);
      *(_QWORD *)v24 = v26;
      *(_DWORD *)(v24 + 20) = v28;
      *(_QWORD *)(v24 + 12) = v16.i64[0];
      v23 += 36;
      v24 += 36;
      --v20;
    }
    while (v20);
  }
  v30 = *a3;
  v29 = a3[1];
  v31 = 0x8E38E38E38E38E39 * ((v29 - *a3) >> 2);
  v32 = *(_QWORD *)(a1 + 408);
  v33 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 416) - v32) >> 2);
  v412 = (uint64_t *)(a1 + 408);
  if (v31 <= v33)
  {
    if (v31 < v33)
      *(_QWORD *)(a1 + 416) = v32 + 4 * ((v29 - *a3) >> 2);
  }
  else
  {
    sub_207D69A5C((char **)(a1 + 408), v31 - v33);
  }
  if (v29 != v30)
  {
    v34 = *a3 + 12;
    v35 = *v412 + 12;
    do
    {
      v16.i64[0] = *(_QWORD *)(v34 - 12);
      v17.i64[0] = *(_QWORD *)v34;
      v36 = vzip1q_s32(v16, v17).u64[0];
      v37 = vtrn2q_s32(v16, v17).u64[0];
      v16.i32[2] = *(_DWORD *)(v34 - 4);
      v17.i32[2] = *(_DWORD *)(v34 + 8);
      v38 = *(_QWORD *)(v34 + 12);
      v39 = *(_DWORD *)(v34 + 20);
      v16 = vzip2q_s32(v16, v17);
      *(_DWORD *)(v35 - 4) = v38;
      *(_QWORD *)(v35 - 12) = v36;
      *(_DWORD *)(v35 + 8) = HIDWORD(v38);
      *(_QWORD *)v35 = v37;
      *(_DWORD *)(v35 + 20) = v39;
      *(_QWORD *)(v35 + 12) = v16.i64[0];
      v34 += 36;
      v35 += 36;
      --v31;
    }
    while (v31);
  }
  v40 = (_QWORD *)(a1 + 432);
  v41 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v43 = *(_QWORD *)(a1 + 432);
  v42 = *(_QWORD *)(a1 + 440);
  v44 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v43) >> 3);
  if (v41 <= v44)
  {
    if (v41 < v44)
    {
      v45 = v43 + 8 * ((a4[1] - *a4) >> 3);
      if (v42 != v45)
      {
        v46 = *(_QWORD *)(a1 + 440);
        do
        {
          v48 = *(void **)(v46 - 24);
          v46 -= 24;
          v47 = v48;
          if (v48)
          {
            *(_QWORD *)(v42 - 16) = v47;
            operator delete(v47);
          }
          v42 = v46;
        }
        while (v46 != v45);
      }
      *(_QWORD *)(a1 + 440) = v45;
    }
  }
  else
  {
    sub_207D454F4(a1 + 432, v41 - v44);
  }
  v49 = a4[1] - *a4;
  if (v49)
  {
    v50 = 0;
    v51 = v49 / 24;
    do
    {
      v52 = (_QWORD *)(*v40 + v50);
      v53 = *a4;
      v54 = *a4 + v50;
      v55 = *(_BYTE **)v54;
      v56 = (uint64_t)(*(_QWORD *)(v54 + 8) - *(_QWORD *)v54) >> 2;
      v57 = (uint64_t)(v52[1] - *v52) >> 2;
      v58 = v56 >= v57;
      v59 = v56 - v57;
      if (v59 != 0 && v58)
      {
        sub_207D55DD4((uint64_t)v52, v59);
        v53 = *a4;
        v55 = *(_BYTE **)(*a4 + v50);
      }
      else if (!v58)
      {
        v52[1] = *v52 + 4 * v56;
      }
      v60 = *(_BYTE **)(v53 + v50 + 8);
      if (v60 != v55)
        memmove(*(void **)(*v40 + v50), v55, v60 - v55);
      v50 += 24;
      --v51;
    }
    while (v51);
  }
  v61 = a2[1] - *a2;
  v414 = a1;
  v62 = (uint64_t *)(a1 + 384);
  if (v61)
  {
    v63 = 0;
    v64 = a1 + 312;
    v410 = 0x8E38E38E38E38E39 * (v61 >> 2);
    do
    {
      std::to_string(&v430, v63);
      v65 = SHIBYTE(v430.__r_.__value_.__r.__words[2]);
      if ((v430.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v430.__r_.__value_.__r.__words[2]);
      else
        size = v430.__r_.__value_.__l.__size_;
      v67 = size + 20;
      if (size + 20 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      v68 = *v62;
      if (v67 >= 0x17)
      {
        v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v70 = v67 | 7;
        v71 = v70 + 1;
        v72 = (char *)operator new(v70 + 1);
        *(_QWORD *)&__p[8] = size + 20;
        *(_QWORD *)&__p[16] = v71 | 0x8000000000000000;
        *(_QWORD *)__p = v72;
        *((_DWORD *)v72 + 4) = 1953853279;
        *(_OWORD *)v72 = *(_OWORD *)"cameraIntrinsics_out";
        v69 = v72 + 20;
      }
      else
      {
        *(_DWORD *)&__p[20] = 0;
        __p[23] = size + 20;
        qmemcpy(__p, "cameraIntrinsics_out", 20);
        v69 = &__p[20];
        if (!size)
          goto LABEL_51;
      }
      if (v65 >= 0)
        v73 = &v430;
      else
        v73 = (std::string *)v430.__r_.__value_.__r.__words[0];
      memmove(v69, v73, size);
LABEL_51:
      v69[size] = 0;
      v74 = sub_207D52740(v64, (const void **)__p);
      v75 = *(_QWORD *)(v414 + 688);
      v76 = *((_DWORD *)v74 + 4);
      v77 = *((_DWORD *)v74 + 6);
      v78 = *((_DWORD *)v74 + 8);
      v436.__r_.__value_.__s.__data_[0] = 0;
      v437 = 0;
      LODWORD(v434) = 1;
      *(_QWORD *)((char *)&v434 + 4) = __PAIR64__(v77, v76);
      HIDWORD(v434) = v78;
      v435 = v75;
      LOBYTE(v438) = 0;
      v439 = 0;
      sub_20809F1D0((uint64_t)v415, v68 + 36 * v63, &v434, &v438, v74, (uint64_t)&v436);
      if (!v437)
        goto LABEL_56;
      v79 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
      if (!v436.__r_.__value_.__r.__words[2])
        goto LABEL_56;
      v80 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
        v82 = v432;
        if ((unint64_t)v432 >= v433)
        {
LABEL_65:
          v432 = sub_207D697D4(&v431, (uint64_t)v415);
          if (!v427)
            goto LABEL_79;
          goto LABEL_75;
        }
      }
      else
      {
LABEL_56:
        v82 = v432;
        if ((unint64_t)v432 >= v433)
          goto LABEL_65;
      }
      v83 = *(_OWORD *)v415;
      v84 = v416;
      v85 = v417;
      *((_DWORD *)v82 + 12) = v418;
      *((_OWORD *)v82 + 1) = v84;
      *((_OWORD *)v82 + 2) = v85;
      *(_OWORD *)v82 = v83;
      v82[56] = 0;
      v82[112] = 0;
      if (v427)
      {
        *((_QWORD *)v82 + 7) = off_24C06E878;
        v86 = v420;
        v87 = v421;
        if (v421)
        {
          p_shared_owners = (unint64_t *)&v421->__shared_owners_;
          do
            v89 = __ldxr(p_shared_owners);
          while (__stxr(v89 + 1, p_shared_owners));
          v90 = v424;
          v91 = v425;
          v92 = v426;
          do
            v93 = __ldxr(p_shared_owners);
          while (__stxr(v93 + 1, p_shared_owners));
        }
        else
        {
          v90 = v424;
          v91 = v425;
          v92 = v426;
        }
        *((_QWORD *)v82 + 8) = v86;
        *((_QWORD *)v82 + 9) = v87;
        v94 = v422;
        *((_DWORD *)v82 + 22) = v423;
        *((_QWORD *)v82 + 10) = v94;
        *((_QWORD *)v82 + 12) = v90;
        *((_DWORD *)v82 + 26) = v91;
        *((_WORD *)v82 + 54) = v92;
        if (v87)
        {
          v95 = (unint64_t *)&v87->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v82[112] = 1;
      }
      *((_DWORD *)v82 + 30) = 1;
      v432 = v82 + 128;
      if (!v427)
      {
LABEL_79:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_81;
LABEL_80:
        operator delete(*(void **)__p);
        goto LABEL_81;
      }
LABEL_75:
      v97 = v421;
      if (!v421)
        goto LABEL_79;
      v98 = (unint64_t *)&v421->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (v99)
        goto LABEL_79;
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
      if ((__p[23] & 0x80000000) != 0)
        goto LABEL_80;
LABEL_81:
      v100 = SHIBYTE(v430.__r_.__value_.__r.__words[2]);
      if ((v430.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = HIBYTE(v430.__r_.__value_.__r.__words[2]);
      else
        v101 = v430.__r_.__value_.__l.__size_;
      v102 = v101 + 19;
      if (v101 + 19 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      v103 = *v412;
      if (v102 >= 0x17)
      {
        v105 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v102 | 7) != 0x17)
          v105 = v102 | 7;
        v106 = v105 + 1;
        v107 = (char *)operator new(v105 + 1);
        *(_QWORD *)&__p[8] = v101 + 19;
        *(_QWORD *)&__p[16] = v106 | 0x8000000000000000;
        *(_QWORD *)__p = v107;
        *(_DWORD *)(v107 + 15) = 1852399475;
        *(_OWORD *)v107 = *(_OWORD *)"cameraIntrinsics_in";
        v104 = v107 + 19;
      }
      else
      {
        *(_QWORD *)&__p[16] = 0;
        __p[23] = v101 + 19;
        qmemcpy(__p, "cameraIntrinsics_in", 19);
        v104 = &__p[19];
        if (!v101)
          goto LABEL_95;
      }
      if (v100 >= 0)
        v108 = &v430;
      else
        v108 = (std::string *)v430.__r_.__value_.__r.__words[0];
      memmove(v104, v108, v101);
LABEL_95:
      v104[v101] = 0;
      v109 = sub_207D52740(v64, (const void **)__p);
      v110 = *(_QWORD *)(v414 + 688);
      v111 = *((_DWORD *)v109 + 4);
      v112 = *((_DWORD *)v109 + 6);
      v113 = *((_DWORD *)v109 + 8);
      v436.__r_.__value_.__s.__data_[0] = 0;
      v437 = 0;
      LODWORD(v434) = 1;
      *(_QWORD *)((char *)&v434 + 4) = __PAIR64__(v112, v111);
      HIDWORD(v434) = v113;
      v435 = v110;
      LOBYTE(v438) = 0;
      v439 = 0;
      sub_20809F1D0((uint64_t)v415, v103 + 36 * v63, &v434, &v438, v109, (uint64_t)&v436);
      if (!v437)
        goto LABEL_100;
      v114 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
      if (!v436.__r_.__value_.__r.__words[2])
        goto LABEL_100;
      v115 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
        v117 = v432;
        if ((unint64_t)v432 >= v433)
        {
LABEL_111:
          v432 = sub_207D697D4(&v431, (uint64_t)v415);
          if (!v427)
            goto LABEL_125;
          goto LABEL_121;
        }
      }
      else
      {
LABEL_100:
        v117 = v432;
        if ((unint64_t)v432 >= v433)
          goto LABEL_111;
      }
      v118 = *(_OWORD *)v415;
      v119 = v416;
      v120 = v417;
      *((_DWORD *)v117 + 12) = v418;
      *((_OWORD *)v117 + 1) = v119;
      *((_OWORD *)v117 + 2) = v120;
      *(_OWORD *)v117 = v118;
      v117[56] = 0;
      v117[112] = 0;
      if (v427)
      {
        *((_QWORD *)v117 + 7) = off_24C06E878;
        v121 = v420;
        v122 = v421;
        if (v421)
        {
          v123 = (unint64_t *)&v421->__shared_owners_;
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
          v125 = v424;
          v126 = v425;
          v127 = v426;
          do
            v128 = __ldxr(v123);
          while (__stxr(v128 + 1, v123));
        }
        else
        {
          v125 = v424;
          v126 = v425;
          v127 = v426;
        }
        *((_QWORD *)v117 + 8) = v121;
        *((_QWORD *)v117 + 9) = v122;
        v129 = v422;
        *((_DWORD *)v117 + 22) = v423;
        *((_QWORD *)v117 + 10) = v129;
        *((_QWORD *)v117 + 12) = v125;
        *((_DWORD *)v117 + 26) = v126;
        *((_WORD *)v117 + 54) = v127;
        if (v122)
        {
          v130 = (unint64_t *)&v122->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v117[112] = 1;
      }
      *((_DWORD *)v117 + 30) = 1;
      v432 = v117 + 128;
      if (!v427)
      {
LABEL_125:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_127;
LABEL_126:
        operator delete(*(void **)__p);
        goto LABEL_127;
      }
LABEL_121:
      v132 = v421;
      if (!v421)
        goto LABEL_125;
      v133 = (unint64_t *)&v421->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (v134)
        goto LABEL_125;
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
      if ((__p[23] & 0x80000000) != 0)
        goto LABEL_126;
LABEL_127:
      v135 = SHIBYTE(v430.__r_.__value_.__r.__words[2]);
      if ((v430.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = HIBYTE(v430.__r_.__value_.__r.__words[2]);
      else
        v136 = v430.__r_.__value_.__l.__size_;
      v137 = v136 + 16;
      if (v136 + 16 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      v138 = *(_QWORD *)(*v40 + 24 * v63);
      if (v137 >= 0x17)
      {
        v140 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v137 | 7) != 0x17)
          v140 = v137 | 7;
        v141 = v140 + 1;
        v142 = operator new(v140 + 1);
        *(_QWORD *)&__p[8] = v136 + 16;
        *(_QWORD *)&__p[16] = v141 | 0x8000000000000000;
        *(_QWORD *)__p = v142;
        *v142 = *(_OWORD *)"radialDistortion";
        v139 = v142 + 1;
      }
      else
      {
        *(_QWORD *)&__p[16] = 0;
        __p[23] = v136 + 16;
        *(_OWORD *)__p = *(_OWORD *)"radialDistortion";
        v139 = &__p[16];
        if (!v136)
          goto LABEL_141;
      }
      if (v135 >= 0)
        v143 = &v430;
      else
        v143 = (std::string *)v430.__r_.__value_.__r.__words[0];
      memmove(v139, v143, v136);
LABEL_141:
      v139[v136] = 0;
      v144 = sub_207D52740(v64, (const void **)__p);
      a1 = v414;
      v145 = *(_QWORD *)(v414 + 688);
      v146 = *((_DWORD *)v144 + 4);
      v147 = *((_DWORD *)v144 + 6);
      v148 = *((_DWORD *)v144 + 8);
      v436.__r_.__value_.__s.__data_[0] = 0;
      v437 = 0;
      LODWORD(v434) = 1;
      *(_QWORD *)((char *)&v434 + 4) = __PAIR64__(v147, v146);
      HIDWORD(v434) = v148;
      v435 = v145;
      LOBYTE(v438) = 0;
      v439 = 0;
      sub_20809F1D0((uint64_t)v415, v138, &v434, &v438, v144, (uint64_t)&v436);
      if (!v437)
        goto LABEL_146;
      v149 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
      if (!v436.__r_.__value_.__r.__words[2])
        goto LABEL_146;
      v150 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
        v152 = v432;
        if ((unint64_t)v432 >= v433)
        {
LABEL_157:
          v432 = sub_207D697D4(&v431, (uint64_t)v415);
          if (!v427)
            goto LABEL_171;
          goto LABEL_167;
        }
      }
      else
      {
LABEL_146:
        v152 = v432;
        if ((unint64_t)v432 >= v433)
          goto LABEL_157;
      }
      v153 = *(_OWORD *)v415;
      v154 = v416;
      v155 = v417;
      *((_DWORD *)v152 + 12) = v418;
      *((_OWORD *)v152 + 1) = v154;
      *((_OWORD *)v152 + 2) = v155;
      *(_OWORD *)v152 = v153;
      v152[56] = 0;
      v152[112] = 0;
      if (v427)
      {
        *((_QWORD *)v152 + 7) = off_24C06E878;
        v156 = v420;
        v157 = v421;
        if (v421)
        {
          v158 = (unint64_t *)&v421->__shared_owners_;
          do
            v159 = __ldxr(v158);
          while (__stxr(v159 + 1, v158));
          v160 = v424;
          v161 = v425;
          v162 = v426;
          do
            v163 = __ldxr(v158);
          while (__stxr(v163 + 1, v158));
        }
        else
        {
          v160 = v424;
          v161 = v425;
          v162 = v426;
        }
        *((_QWORD *)v152 + 8) = v156;
        *((_QWORD *)v152 + 9) = v157;
        v164 = v422;
        *((_DWORD *)v152 + 22) = v423;
        *((_QWORD *)v152 + 10) = v164;
        *((_QWORD *)v152 + 12) = v160;
        *((_DWORD *)v152 + 26) = v161;
        *((_WORD *)v152 + 54) = v162;
        if (v157)
        {
          v165 = (unint64_t *)&v157->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        v152[112] = 1;
      }
      *((_DWORD *)v152 + 30) = 1;
      v432 = v152 + 128;
      if (!v427)
      {
LABEL_171:
        if ((__p[23] & 0x80000000) == 0)
          goto LABEL_173;
LABEL_172:
        operator delete(*(void **)__p);
        goto LABEL_173;
      }
LABEL_167:
      v167 = v421;
      if (!v421)
        goto LABEL_171;
      v168 = (unint64_t *)&v421->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (v169)
        goto LABEL_171;
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
      if ((__p[23] & 0x80000000) != 0)
        goto LABEL_172;
LABEL_173:
      v170 = *a5;
      v415[0] = off_24C06E878;
      v171 = v170 + 56 * v63;
      v172 = *(void **)(v171 + 8);
      v173 = *(std::__shared_weak_count **)(v171 + 16);
      if (v173)
      {
        v174 = (unint64_t *)&v173->__shared_owners_;
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 1, v174));
        v176 = v170 + 56 * v63;
        v177 = *(_QWORD *)(v176 + 40);
        v178 = *(_DWORD *)(v176 + 48);
        v179 = *(_WORD *)(v176 + 52);
        do
          v180 = __ldxr(v174);
        while (__stxr(v180 + 1, v174));
      }
      else
      {
        v181 = v170 + 56 * v63;
        v177 = *(_QWORD *)(v181 + 40);
        v178 = *(_DWORD *)(v181 + 48);
        v179 = *(_WORD *)(v181 + 52);
      }
      v182 = v170 + 56 * v63;
      v415[1] = v172;
      *(_QWORD *)&v416 = v173;
      v183 = *(_QWORD *)(v182 + 24);
      LODWORD(v417) = *(_DWORD *)(v182 + 32);
      *((_QWORD *)&v416 + 1) = v183;
      *((_QWORD *)&v417 + 1) = v177;
      v418 = v178;
      v419 = v179;
      if (!v173)
        goto LABEL_184;
      v184 = (unint64_t *)&v173->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
        v428 = 2;
        v186 = v432;
        if ((unint64_t)v432 < v433)
        {
LABEL_185:
          *v186 = 0;
          *((_DWORD *)v186 + 30) = -1;
          v187 = v428;
          if (v428 != -1)
          {
            ((void (*)(__int128 *, char *, void **))off_24C073D20[v428])(&v438, v186, v415);
            *((_DWORD *)v186 + 30) = v187;
          }
          v188 = v186 + 128;
          v62 = v413;
          goto LABEL_190;
        }
      }
      else
      {
LABEL_184:
        v428 = 2;
        v186 = v432;
        if ((unint64_t)v432 < v433)
          goto LABEL_185;
      }
      v188 = sub_207D54C78((uint64_t)&v431, (uint64_t)v415);
      v62 = v413;
LABEL_190:
      v432 = v188;
      if (v428 != -1)
        ((void (*)(std::string *, void **))off_24C073D08[v428])(&v436, v415);
      if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v430.__r_.__value_.__l.__data_);
      ++v63;
    }
    while (v63 != v410);
  }
  if (!*(_BYTE *)(a1 + 140))
    goto LABEL_258;
  sub_207D62EBC(a1, a6);
  v189 = *(_QWORD *)(a1 + 480);
  *((_BYTE *)&v430.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v430, "ray_dir_x");
  v190 = sub_207D52740(a1 + 312, (const void **)&v430.__r_.__value_.__l.__data_);
  v191 = *(_QWORD *)(a1 + 688);
  v192 = *((_DWORD *)v190 + 4);
  v193 = *((_DWORD *)v190 + 6);
  v194 = *((_DWORD *)v190 + 8);
  v436.__r_.__value_.__s.__data_[0] = 0;
  v437 = 0;
  *(_DWORD *)__p = 1;
  *(_DWORD *)&__p[4] = v192;
  *(_DWORD *)&__p[8] = v193;
  *(_DWORD *)&__p[12] = v194;
  *(_DWORD *)&__p[16] = v191;
  LOBYTE(v438) = 0;
  v439 = 0;
  sub_20809F1D0((uint64_t)v415, v189, (__int128 *)__p, &v438, v190, (uint64_t)&v436);
  if (!v437)
    goto LABEL_202;
  v195 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
  if (!v436.__r_.__value_.__r.__words[2])
    goto LABEL_202;
  v196 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
  do
    v197 = __ldaxr(v196);
  while (__stlxr(v197 - 1, v196));
  if (!v197)
  {
    ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
    std::__shared_weak_count::__release_weak(v195);
    v198 = v432;
    if ((unint64_t)v432 < v433)
    {
LABEL_203:
      v199 = *(_OWORD *)v415;
      v200 = v416;
      v201 = v417;
      *((_DWORD *)v198 + 12) = v418;
      *((_OWORD *)v198 + 1) = v200;
      *((_OWORD *)v198 + 2) = v201;
      *(_OWORD *)v198 = v199;
      v198[56] = 0;
      v198[112] = 0;
      if (v427)
      {
        *((_QWORD *)v198 + 7) = off_24C06E878;
        v202 = v420;
        v203 = v421;
        if (v421)
        {
          v204 = (unint64_t *)&v421->__shared_owners_;
          do
            v205 = __ldxr(v204);
          while (__stxr(v205 + 1, v204));
          v206 = v424;
          v207 = v425;
          v208 = v426;
          do
            v209 = __ldxr(v204);
          while (__stxr(v209 + 1, v204));
        }
        else
        {
          v206 = v424;
          v207 = v425;
          v208 = v426;
        }
        *((_QWORD *)v198 + 8) = v202;
        *((_QWORD *)v198 + 9) = v203;
        v210 = v422;
        *((_DWORD *)v198 + 22) = v423;
        *((_QWORD *)v198 + 10) = v210;
        *((_QWORD *)v198 + 12) = v206;
        *((_DWORD *)v198 + 26) = v207;
        *((_WORD *)v198 + 54) = v208;
        if (v203)
        {
          v211 = (unint64_t *)&v203->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
        v198[112] = 1;
      }
      *((_DWORD *)v198 + 30) = 1;
      v432 = v198 + 128;
      if (!v427)
        goto LABEL_225;
      goto LABEL_221;
    }
  }
  else
  {
LABEL_202:
    v198 = v432;
    if ((unint64_t)v432 < v433)
      goto LABEL_203;
  }
  v432 = sub_207D697D4(&v431, (uint64_t)v415);
  if (!v427)
    goto LABEL_225;
LABEL_221:
  v213 = v421;
  if (v421)
  {
    v214 = (unint64_t *)&v421->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
      if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_227;
      goto LABEL_226;
    }
  }
LABEL_225:
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
LABEL_226:
    operator delete(v430.__r_.__value_.__l.__data_);
LABEL_227:
  v216 = *(_QWORD *)(a1 + 504);
  *((_BYTE *)&v430.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v430, "ray_dir_y");
  v217 = sub_207D52740(a1 + 312, (const void **)&v430.__r_.__value_.__l.__data_);
  v218 = *(_QWORD *)(a1 + 688);
  v219 = *((_DWORD *)v217 + 4);
  v220 = *((_DWORD *)v217 + 6);
  v221 = *((_DWORD *)v217 + 8);
  v436.__r_.__value_.__s.__data_[0] = 0;
  v437 = 0;
  *(_DWORD *)__p = 1;
  *(_DWORD *)&__p[4] = v219;
  *(_DWORD *)&__p[8] = v220;
  *(_DWORD *)&__p[12] = v221;
  *(_DWORD *)&__p[16] = v218;
  LOBYTE(v438) = 0;
  v439 = 0;
  sub_20809F1D0((uint64_t)v415, v216, (__int128 *)__p, &v438, v217, (uint64_t)&v436);
  if (!v437)
    goto LABEL_232;
  v222 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
  if (!v436.__r_.__value_.__r.__words[2])
    goto LABEL_232;
  v223 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
  do
    v224 = __ldaxr(v223);
  while (__stlxr(v224 - 1, v223));
  if (!v224)
  {
    ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
    std::__shared_weak_count::__release_weak(v222);
    v225 = v432;
    if ((unint64_t)v432 < v433)
    {
LABEL_233:
      v226 = *(_OWORD *)v415;
      v227 = v416;
      v228 = v417;
      *((_DWORD *)v225 + 12) = v418;
      *((_OWORD *)v225 + 1) = v227;
      *((_OWORD *)v225 + 2) = v228;
      *(_OWORD *)v225 = v226;
      v225[56] = 0;
      v225[112] = 0;
      if (v427)
      {
        *((_QWORD *)v225 + 7) = off_24C06E878;
        v229 = v420;
        v230 = v421;
        if (v421)
        {
          v231 = (unint64_t *)&v421->__shared_owners_;
          do
            v232 = __ldxr(v231);
          while (__stxr(v232 + 1, v231));
          v233 = v424;
          v234 = v425;
          v235 = v426;
          do
            v236 = __ldxr(v231);
          while (__stxr(v236 + 1, v231));
        }
        else
        {
          v233 = v424;
          v234 = v425;
          v235 = v426;
        }
        *((_QWORD *)v225 + 8) = v229;
        *((_QWORD *)v225 + 9) = v230;
        v237 = v422;
        *((_DWORD *)v225 + 22) = v423;
        *((_QWORD *)v225 + 10) = v237;
        *((_QWORD *)v225 + 12) = v233;
        *((_DWORD *)v225 + 26) = v234;
        *((_WORD *)v225 + 54) = v235;
        if (v230)
        {
          v238 = (unint64_t *)&v230->__shared_owners_;
          do
            v239 = __ldaxr(v238);
          while (__stlxr(v239 - 1, v238));
          if (!v239)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v225[112] = 1;
      }
      *((_DWORD *)v225 + 30) = 1;
      v432 = v225 + 128;
      if (!v427)
      {
LABEL_257:
        if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_258;
LABEL_273:
        operator delete(v430.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 177))
          goto LABEL_259;
        goto LABEL_274;
      }
      goto LABEL_253;
    }
  }
  else
  {
LABEL_232:
    v225 = v432;
    if ((unint64_t)v432 < v433)
      goto LABEL_233;
  }
  v432 = sub_207D697D4(&v431, (uint64_t)v415);
  if (!v427)
    goto LABEL_257;
LABEL_253:
  v240 = v421;
  if (!v421)
    goto LABEL_257;
  v241 = (unint64_t *)&v421->__shared_owners_;
  do
    v242 = __ldaxr(v241);
  while (__stlxr(v242 - 1, v241));
  if (v242)
    goto LABEL_257;
  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
  std::__shared_weak_count::__release_weak(v240);
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_273;
LABEL_258:
  if (*(_BYTE *)(a1 + 177))
  {
LABEL_259:
    sub_207D623F0(a1, a7, 1uLL);
    v243 = *(_QWORD *)(a1 + 456);
    *((_BYTE *)&v430.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&v430, "extrinsics");
    v244 = sub_207D52740(a1 + 312, (const void **)&v430.__r_.__value_.__l.__data_);
    v245 = *(_QWORD *)(a1 + 688);
    v246 = *((_DWORD *)v244 + 4);
    v247 = *((_DWORD *)v244 + 6);
    v248 = *((_DWORD *)v244 + 8);
    v436.__r_.__value_.__s.__data_[0] = 0;
    v437 = 0;
    *(_DWORD *)__p = 1;
    *(_DWORD *)&__p[4] = v246;
    *(_DWORD *)&__p[8] = v247;
    *(_DWORD *)&__p[12] = v248;
    *(_DWORD *)&__p[16] = v245;
    LOBYTE(v438) = 0;
    v439 = 0;
    sub_20809F1D0((uint64_t)v415, v243, (__int128 *)__p, &v438, v244, (uint64_t)&v436);
    if (!v437)
      goto LABEL_264;
    v249 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
    if (!v436.__r_.__value_.__r.__words[2])
      goto LABEL_264;
    v250 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
      v252 = v432;
      if ((unint64_t)v432 < v433)
      {
LABEL_265:
        v253 = *(_OWORD *)v415;
        v254 = v416;
        v255 = v417;
        *((_DWORD *)v252 + 12) = v418;
        *((_OWORD *)v252 + 1) = v254;
        *((_OWORD *)v252 + 2) = v255;
        *(_OWORD *)v252 = v253;
        v252[56] = 0;
        v252[112] = 0;
        if (v427)
        {
          *((_QWORD *)v252 + 7) = off_24C06E878;
          v256 = v420;
          v257 = v421;
          if (v421)
          {
            v258 = (unint64_t *)&v421->__shared_owners_;
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 1, v258));
            v260 = v424;
            v261 = v425;
            v262 = v426;
            do
              v263 = __ldxr(v258);
            while (__stxr(v263 + 1, v258));
          }
          else
          {
            v260 = v424;
            v261 = v425;
            v262 = v426;
          }
          *((_QWORD *)v252 + 8) = v256;
          *((_QWORD *)v252 + 9) = v257;
          v285 = v422;
          *((_DWORD *)v252 + 22) = v423;
          *((_QWORD *)v252 + 10) = v285;
          *((_QWORD *)v252 + 12) = v260;
          *((_DWORD *)v252 + 26) = v261;
          *((_WORD *)v252 + 54) = v262;
          if (v257)
          {
            v286 = (unint64_t *)&v257->__shared_owners_;
            do
              v287 = __ldaxr(v286);
            while (__stlxr(v287 - 1, v286));
            if (!v287)
            {
              ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
              std::__shared_weak_count::__release_weak(v257);
            }
          }
          v252[112] = 1;
        }
        *((_DWORD *)v252 + 30) = 1;
        v432 = v252 + 128;
        if (v427)
          goto LABEL_299;
        goto LABEL_318;
      }
    }
    else
    {
LABEL_264:
      v252 = v432;
      if ((unint64_t)v432 < v433)
        goto LABEL_265;
    }
    v432 = sub_207D697D4(&v431, (uint64_t)v415);
    if (v427)
    {
LABEL_299:
      v288 = v421;
      if (!v421)
        goto LABEL_318;
      v289 = (unint64_t *)&v421->__shared_owners_;
      do
        v290 = __ldaxr(v289);
      while (__stlxr(v290 - 1, v289));
      goto LABEL_317;
    }
LABEL_318:
    if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_319;
LABEL_322:
    operator delete(v430.__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(a1 + 141))
      goto LABEL_355;
    goto LABEL_323;
  }
LABEL_274:
  if (!*(_BYTE *)(a1 + 176))
    goto LABEL_319;
  sub_207D623F0(a1, a7, (*(_QWORD *)(a1 + 88) * *(_QWORD *)(a1 + 96)) >> 6);
  v264 = *(_QWORD *)(a1 + 456);
  *((_BYTE *)&v430.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v430, "extrinsics");
  v265 = sub_207D52740(a1 + 312, (const void **)&v430.__r_.__value_.__l.__data_);
  v266 = *(_QWORD *)(a1 + 688);
  v267 = *((_DWORD *)v265 + 4);
  v268 = *((_DWORD *)v265 + 6);
  v269 = *((_DWORD *)v265 + 8);
  v436.__r_.__value_.__s.__data_[0] = 0;
  v437 = 0;
  *(_DWORD *)__p = 1;
  *(_DWORD *)&__p[4] = v267;
  *(_DWORD *)&__p[8] = v268;
  *(_DWORD *)&__p[12] = v269;
  *(_DWORD *)&__p[16] = v266;
  LOBYTE(v438) = 0;
  v439 = 0;
  sub_20809F1D0((uint64_t)v415, v264, (__int128 *)__p, &v438, v265, (uint64_t)&v436);
  if (!v437)
    goto LABEL_280;
  v270 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
  if (!v436.__r_.__value_.__r.__words[2])
    goto LABEL_280;
  v271 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
  do
    v272 = __ldaxr(v271);
  while (__stlxr(v272 - 1, v271));
  if (v272)
  {
LABEL_280:
    v273 = v432;
    if ((unint64_t)v432 < v433)
      goto LABEL_281;
LABEL_304:
    v432 = sub_207D697D4(&v431, (uint64_t)v415);
    if (!v427)
      goto LABEL_318;
    goto LABEL_314;
  }
  ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
  std::__shared_weak_count::__release_weak(v270);
  v273 = v432;
  if ((unint64_t)v432 >= v433)
    goto LABEL_304;
LABEL_281:
  v274 = *(_OWORD *)v415;
  v275 = v416;
  v276 = v417;
  *((_DWORD *)v273 + 12) = v418;
  *((_OWORD *)v273 + 1) = v275;
  *((_OWORD *)v273 + 2) = v276;
  *(_OWORD *)v273 = v274;
  v273[56] = 0;
  v273[112] = 0;
  if (v427)
  {
    *((_QWORD *)v273 + 7) = off_24C06E878;
    v277 = v420;
    v278 = v421;
    if (v421)
    {
      v279 = (unint64_t *)&v421->__shared_owners_;
      do
        v280 = __ldxr(v279);
      while (__stxr(v280 + 1, v279));
      v281 = v424;
      v282 = v425;
      v283 = v426;
      do
        v284 = __ldxr(v279);
      while (__stxr(v284 + 1, v279));
    }
    else
    {
      v281 = v424;
      v282 = v425;
      v283 = v426;
    }
    *((_QWORD *)v273 + 8) = v277;
    *((_QWORD *)v273 + 9) = v278;
    v291 = v422;
    *((_DWORD *)v273 + 22) = v423;
    *((_QWORD *)v273 + 10) = v291;
    *((_QWORD *)v273 + 12) = v281;
    *((_DWORD *)v273 + 26) = v282;
    *((_WORD *)v273 + 54) = v283;
    if (v278)
    {
      v292 = (unint64_t *)&v278->__shared_owners_;
      do
        v293 = __ldaxr(v292);
      while (__stlxr(v293 - 1, v292));
      if (!v293)
      {
        ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
        std::__shared_weak_count::__release_weak(v278);
      }
    }
    v273[112] = 1;
  }
  *((_DWORD *)v273 + 30) = 1;
  v432 = v273 + 128;
  if (!v427)
    goto LABEL_318;
LABEL_314:
  v288 = v421;
  if (!v421)
    goto LABEL_318;
  v294 = (unint64_t *)&v421->__shared_owners_;
  do
    v290 = __ldaxr(v294);
  while (__stlxr(v290 - 1, v294));
LABEL_317:
  if (v290)
    goto LABEL_318;
  ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
  std::__shared_weak_count::__release_weak(v288);
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_322;
LABEL_319:
  if (!*(_BYTE *)(a1 + 141))
  {
LABEL_355:
    if (!*(_BYTE *)(a1 + 178))
      goto LABEL_395;
    goto LABEL_356;
  }
LABEL_323:
  v295 = (_DWORD *)*a6;
  v296 = (_DWORD *)a6[1];
  v297 = *(_QWORD *)(a1 + 528);
  if ((_DWORD *)*a6 != v296)
  {
    v298 = (_DWORD *)(v297 + 16);
    do
    {
      *(v298 - 4) = *v295;
      *(v298 - 3) = v295[3];
      *(v298 - 2) = v295[6];
      *(v298 - 1) = v295[1];
      *v298 = v295[4];
      v298[1] = v295[7];
      v298[2] = v295[2];
      v298[3] = v295[5];
      v298[4] = v295[8];
      v298 += 9;
      v295 += 9;
    }
    while (v295 != v296);
  }
  *((_BYTE *)&v430.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v430, "cam_intrinsics");
  v299 = sub_207D52740(a1 + 312, (const void **)&v430.__r_.__value_.__l.__data_);
  v300 = *(_QWORD *)(a1 + 688);
  v301 = *((_DWORD *)v299 + 4);
  v302 = *((_DWORD *)v299 + 6);
  v303 = *((_DWORD *)v299 + 8);
  v436.__r_.__value_.__s.__data_[0] = 0;
  v437 = 0;
  *(_DWORD *)__p = 1;
  *(_DWORD *)&__p[4] = v301;
  *(_DWORD *)&__p[8] = v302;
  *(_DWORD *)&__p[12] = v303;
  *(_DWORD *)&__p[16] = v300;
  LOBYTE(v438) = 0;
  v439 = 0;
  sub_20809F1D0((uint64_t)v415, v297, (__int128 *)__p, &v438, v299, (uint64_t)&v436);
  if (!v437)
    goto LABEL_331;
  v304 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
  if (!v436.__r_.__value_.__r.__words[2])
    goto LABEL_331;
  v305 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
  do
    v306 = __ldaxr(v305);
  while (__stlxr(v306 - 1, v305));
  if (v306)
  {
LABEL_331:
    v307 = v432;
    if ((unint64_t)v432 < v433)
      goto LABEL_332;
LABEL_340:
    v432 = sub_207D697D4(&v431, (uint64_t)v415);
    if (!v427)
      goto LABEL_354;
    goto LABEL_350;
  }
  ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
  std::__shared_weak_count::__release_weak(v304);
  v307 = v432;
  if ((unint64_t)v432 >= v433)
    goto LABEL_340;
LABEL_332:
  v308 = *(_OWORD *)v415;
  v309 = v416;
  v310 = v417;
  *((_DWORD *)v307 + 12) = v418;
  *((_OWORD *)v307 + 1) = v309;
  *((_OWORD *)v307 + 2) = v310;
  *(_OWORD *)v307 = v308;
  v307[56] = 0;
  v307[112] = 0;
  if (v427)
  {
    *((_QWORD *)v307 + 7) = off_24C06E878;
    v311 = v420;
    v312 = v421;
    if (v421)
    {
      v313 = (unint64_t *)&v421->__shared_owners_;
      do
        v314 = __ldxr(v313);
      while (__stxr(v314 + 1, v313));
      v315 = v424;
      v316 = v425;
      v317 = v426;
      do
        v318 = __ldxr(v313);
      while (__stxr(v318 + 1, v313));
    }
    else
    {
      v315 = v424;
      v316 = v425;
      v317 = v426;
    }
    *((_QWORD *)v307 + 8) = v311;
    *((_QWORD *)v307 + 9) = v312;
    v319 = v422;
    *((_DWORD *)v307 + 22) = v423;
    *((_QWORD *)v307 + 10) = v319;
    *((_QWORD *)v307 + 12) = v315;
    *((_DWORD *)v307 + 26) = v316;
    *((_WORD *)v307 + 54) = v317;
    if (v312)
    {
      v320 = (unint64_t *)&v312->__shared_owners_;
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
        std::__shared_weak_count::__release_weak(v312);
      }
    }
    v307[112] = 1;
  }
  *((_DWORD *)v307 + 30) = 1;
  v432 = v307 + 128;
  if (!v427)
  {
LABEL_354:
    if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_355;
    goto LABEL_377;
  }
LABEL_350:
  v322 = v421;
  if (!v421)
    goto LABEL_354;
  v323 = (unint64_t *)&v421->__shared_owners_;
  do
    v324 = __ldaxr(v323);
  while (__stlxr(v324 - 1, v323));
  if (v324)
    goto LABEL_354;
  ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
  std::__shared_weak_count::__release_weak(v322);
  if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_355;
LABEL_377:
  operator delete(v430.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 178))
    goto LABEL_395;
LABEL_356:
  v325 = (void **)(a1 + 552);
  v326 = *(_BYTE **)a10;
  v327 = (uint64_t)(*(_QWORD *)(a10 + 8) - *(_QWORD *)a10) >> 2;
  v328 = *(char **)(a1 + 552);
  v329 = (uint64_t)(*(_QWORD *)(a1 + 560) - (_QWORD)v328) >> 2;
  v330 = v327 >= v329;
  v331 = v327 - v329;
  if (v331 != 0 && v330)
  {
    sub_207D55DD4(a1 + 552, v331);
    v326 = *(_BYTE **)a10;
    v328 = (char *)*v325;
  }
  else if (!v330)
  {
    *(_QWORD *)(a1 + 560) = &v328[4 * v327];
  }
  v332 = *(_BYTE **)(a10 + 8);
  if (v332 != v326)
  {
    memmove(v328, v326, v332 - v326);
    v328 = (char *)*v325;
  }
  *((_BYTE *)&v430.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v430, "patch_distance");
  v333 = sub_207D52740(a1 + 312, (const void **)&v430.__r_.__value_.__l.__data_);
  v334 = *(_QWORD *)(a1 + 688);
  v335 = *((_DWORD *)v333 + 4);
  v336 = *((_DWORD *)v333 + 6);
  v337 = *((_DWORD *)v333 + 8);
  v436.__r_.__value_.__s.__data_[0] = 0;
  v437 = 0;
  *(_DWORD *)__p = 1;
  *(_DWORD *)&__p[4] = v335;
  *(_DWORD *)&__p[8] = v336;
  *(_DWORD *)&__p[12] = v337;
  *(_DWORD *)&__p[16] = v334;
  LOBYTE(v438) = 0;
  v439 = 0;
  sub_20809F1D0((uint64_t)v415, (uint64_t)v328, (__int128 *)__p, &v438, v333, (uint64_t)&v436);
  if (!v437)
    goto LABEL_368;
  v338 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
  if (!v436.__r_.__value_.__r.__words[2])
    goto LABEL_368;
  v339 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
  do
    v340 = __ldaxr(v339);
  while (__stlxr(v340 - 1, v339));
  if (v340)
  {
LABEL_368:
    v341 = v432;
    if ((unint64_t)v432 < v433)
      goto LABEL_369;
LABEL_380:
    v432 = sub_207D697D4(&v431, (uint64_t)v415);
    if (!v427)
      goto LABEL_394;
    goto LABEL_390;
  }
  ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
  std::__shared_weak_count::__release_weak(v338);
  v341 = v432;
  if ((unint64_t)v432 >= v433)
    goto LABEL_380;
LABEL_369:
  v342 = *(_OWORD *)v415;
  v343 = v416;
  v344 = v417;
  *((_DWORD *)v341 + 12) = v418;
  *((_OWORD *)v341 + 1) = v343;
  *((_OWORD *)v341 + 2) = v344;
  *(_OWORD *)v341 = v342;
  v341[56] = 0;
  v341[112] = 0;
  if (v427)
  {
    *((_QWORD *)v341 + 7) = off_24C06E878;
    v345 = v420;
    v346 = v421;
    if (v421)
    {
      v347 = (unint64_t *)&v421->__shared_owners_;
      do
        v348 = __ldxr(v347);
      while (__stxr(v348 + 1, v347));
      v349 = v424;
      v350 = v425;
      v351 = v426;
      do
        v352 = __ldxr(v347);
      while (__stxr(v352 + 1, v347));
    }
    else
    {
      v349 = v424;
      v350 = v425;
      v351 = v426;
    }
    *((_QWORD *)v341 + 8) = v345;
    *((_QWORD *)v341 + 9) = v346;
    v353 = v422;
    *((_DWORD *)v341 + 22) = v423;
    *((_QWORD *)v341 + 10) = v353;
    *((_QWORD *)v341 + 12) = v349;
    *((_DWORD *)v341 + 26) = v350;
    *((_WORD *)v341 + 54) = v351;
    if (v346)
    {
      v354 = (unint64_t *)&v346->__shared_owners_;
      do
        v355 = __ldaxr(v354);
      while (__stlxr(v355 - 1, v354));
      if (!v355)
      {
        ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
        std::__shared_weak_count::__release_weak(v346);
      }
    }
    v341[112] = 1;
  }
  *((_DWORD *)v341 + 30) = 1;
  v432 = v341 + 128;
  if (v427)
  {
LABEL_390:
    v356 = v421;
    if (!v421)
      goto LABEL_394;
    v357 = (unint64_t *)&v421->__shared_owners_;
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (v358)
      goto LABEL_394;
    ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
    std::__shared_weak_count::__release_weak(v356);
    if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_410;
LABEL_395:
    if (!*(_BYTE *)(a1 + 179))
      goto LABEL_428;
    goto LABEL_396;
  }
LABEL_394:
  if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_395;
LABEL_410:
  operator delete(v430.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 179))
    goto LABEL_428;
LABEL_396:
  v359 = *(_QWORD *)(a1 + 640);
  *((_BYTE *)&v430.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v430, "rnn_hc_in");
  v360 = sub_207D52740(a1 + 312, (const void **)&v430.__r_.__value_.__l.__data_);
  v361 = *(_QWORD *)(a1 + 688);
  v362 = *((_DWORD *)v360 + 4);
  v363 = *((_DWORD *)v360 + 6);
  v364 = *((_DWORD *)v360 + 8);
  v436.__r_.__value_.__s.__data_[0] = 0;
  v437 = 0;
  *(_DWORD *)__p = 1;
  *(_DWORD *)&__p[4] = v362;
  *(_DWORD *)&__p[8] = v363;
  *(_DWORD *)&__p[12] = v364;
  *(_DWORD *)&__p[16] = v361;
  LOBYTE(v438) = 0;
  v439 = 0;
  sub_20809F1D0((uint64_t)v415, v359, (__int128 *)__p, &v438, v360, (uint64_t)&v436);
  if (!v437)
    goto LABEL_401;
  v365 = (std::__shared_weak_count *)v436.__r_.__value_.__r.__words[2];
  if (!v436.__r_.__value_.__r.__words[2])
    goto LABEL_401;
  v366 = (unint64_t *)(v436.__r_.__value_.__r.__words[2] + 8);
  do
    v367 = __ldaxr(v366);
  while (__stlxr(v367 - 1, v366));
  if (!v367)
  {
    ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
    std::__shared_weak_count::__release_weak(v365);
    v368 = v432;
    if ((unint64_t)v432 < v433)
    {
LABEL_402:
      v369 = *(_OWORD *)v415;
      v370 = v416;
      v371 = v417;
      *((_DWORD *)v368 + 12) = v418;
      *((_OWORD *)v368 + 1) = v370;
      *((_OWORD *)v368 + 2) = v371;
      *(_OWORD *)v368 = v369;
      v368[56] = 0;
      v368[112] = 0;
      if (v427)
      {
        *((_QWORD *)v368 + 7) = off_24C06E878;
        v372 = v420;
        v373 = v421;
        if (v421)
        {
          v374 = (unint64_t *)&v421->__shared_owners_;
          do
            v375 = __ldxr(v374);
          while (__stxr(v375 + 1, v374));
          v376 = v424;
          v377 = v425;
          v378 = v426;
          do
            v379 = __ldxr(v374);
          while (__stxr(v379 + 1, v374));
        }
        else
        {
          v376 = v424;
          v377 = v425;
          v378 = v426;
        }
        *((_QWORD *)v368 + 8) = v372;
        *((_QWORD *)v368 + 9) = v373;
        v380 = v422;
        *((_DWORD *)v368 + 22) = v423;
        *((_QWORD *)v368 + 10) = v380;
        *((_QWORD *)v368 + 12) = v376;
        *((_DWORD *)v368 + 26) = v377;
        *((_WORD *)v368 + 54) = v378;
        if (v373)
        {
          v381 = (unint64_t *)&v373->__shared_owners_;
          do
            v382 = __ldaxr(v381);
          while (__stlxr(v382 - 1, v381));
          if (!v382)
          {
            ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
            std::__shared_weak_count::__release_weak(v373);
          }
        }
        v368[112] = 1;
      }
      *((_DWORD *)v368 + 30) = 1;
      v432 = v368 + 128;
      if (!v427)
      {
LABEL_427:
        if ((SHIBYTE(v430.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_428;
LABEL_465:
        operator delete(v430.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 272))
          goto LABEL_466;
        goto LABEL_429;
      }
      goto LABEL_423;
    }
  }
  else
  {
LABEL_401:
    v368 = v432;
    if ((unint64_t)v432 < v433)
      goto LABEL_402;
  }
  v432 = sub_207D697D4(&v431, (uint64_t)v415);
  if (!v427)
    goto LABEL_427;
LABEL_423:
  v383 = v421;
  if (!v421)
    goto LABEL_427;
  v384 = (unint64_t *)&v421->__shared_owners_;
  do
    v385 = __ldaxr(v384);
  while (__stlxr(v385 - 1, v384));
  if (v385)
    goto LABEL_427;
  ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
  std::__shared_weak_count::__release_weak(v383);
  if (SHIBYTE(v430.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_465;
LABEL_428:
  if (*(_BYTE *)(a1 + 272))
    goto LABEL_466;
LABEL_429:
  LODWORD(v430.__r_.__value_.__l.__data_) = *(_DWORD *)(*a5 + 32);
  sub_207D58724((unsigned int *)&v430);
  v386 = std::string::insert(&v436, 0, "image_stride_", 0xDuLL);
  *(_OWORD *)v415 = *(_OWORD *)&v386->__r_.__value_.__l.__data_;
  *(_QWORD *)&v416 = *((_QWORD *)&v386->__r_.__value_.__l + 2);
  v386->__r_.__value_.__l.__size_ = 0;
  v386->__r_.__value_.__r.__words[2] = 0;
  v386->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v436.__r_.__value_.__l.__data_);
    v387 = *(uint64_t ***)(a1 + 256);
    v388 = (void *)BYTE7(v416);
    if (!v387)
      goto LABEL_462;
  }
  else
  {
    v387 = *(uint64_t ***)(a1 + 256);
    v388 = (void *)BYTE7(v416);
    if (!v387)
      goto LABEL_462;
  }
  if ((char)v388 >= 0)
    v389 = v415;
  else
    v389 = (void **)v415[0];
  if ((char)v388 >= 0)
    v390 = v388;
  else
    v390 = v415[1];
  while (1)
  {
    v391 = *((char *)v387 + 55);
    if (v391 >= 0)
      v392 = (uint64_t *)(v387 + 4);
    else
      v392 = v387[4];
    if (v391 >= 0)
      v393 = *((unsigned __int8 *)v387 + 55);
    else
      v393 = (size_t)v387[5];
    if (v393 >= (unint64_t)v390)
      v394 = (size_t)v390;
    else
      v394 = v393;
    v395 = memcmp(v389, v392, v394);
    if (v395)
    {
      if (v395 < 0)
        goto LABEL_441;
    }
    else if ((unint64_t)v390 < v393)
    {
      goto LABEL_441;
    }
    v396 = memcmp(v392, v389, v394);
    if (!v396)
    {
      if (v393 >= (unint64_t)v390)
        break;
      goto LABEL_440;
    }
    if ((v396 & 0x80000000) == 0)
      break;
LABEL_440:
    ++v387;
LABEL_441:
    v387 = (uint64_t **)*v387;
    if (!v387)
      goto LABEL_462;
  }
  sub_207D58724((unsigned int *)&v430);
  v397 = std::string::insert(&v436, 0, "image_stride_", 0xDuLL);
  v398 = v397->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v438 = v397->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v438 + 7) = *(std::string::size_type *)((char *)&v397->__r_.__value_.__r.__words[1] + 7);
  v399 = HIBYTE(v397->__r_.__value_.__r.__words[2]);
  v397->__r_.__value_.__l.__size_ = 0;
  v397->__r_.__value_.__r.__words[2] = 0;
  v397->__r_.__value_.__r.__words[0] = 0;
  if (*(_BYTE *)(v414 + 240))
  {
    if (*(char *)(v414 + 239) < 0)
      operator delete(*(void **)(v414 + 216));
    v400 = v438;
    *(_QWORD *)(v414 + 216) = v398;
    *(_QWORD *)(v414 + 224) = v400;
    *(_QWORD *)(v414 + 231) = *(_QWORD *)((char *)&v438 + 7);
    *(_BYTE *)(v414 + 239) = v399;
    if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
LABEL_461:
      operator delete(v436.__r_.__value_.__l.__data_);
  }
  else
  {
    v406 = v438;
    *(_QWORD *)(v414 + 216) = v398;
    *(_QWORD *)(v414 + 224) = v406;
    *(_QWORD *)(v414 + 231) = *(_QWORD *)((char *)&v438 + 7);
    *(_BYTE *)(v414 + 239) = v399;
    *(_BYTE *)(v414 + 240) = 1;
    if (SHIBYTE(v436.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_461;
  }
LABEL_462:
  a1 = v414;
  *(_BYTE *)(v414 + 272) = 1;
  if ((v388 & 0x80) != 0)
    operator delete(v415[0]);
LABEL_466:
  kdebug_trace();
  *(_OWORD *)v415 = 0u;
  v416 = 0u;
  LODWORD(v417) = 733237024;
  kdebug_trace();
  sub_207D6499C(a9, a1, &v431, a1 + 216, a11);
  kdebug_trace();
  v401 = v431;
  if (v431)
  {
    v402 = v432;
    v403 = v431;
    if (v432 != v431)
    {
      do
      {
        v404 = v402 - 128;
        v405 = *((unsigned int *)v402 - 2);
        if ((_DWORD)v405 != -1)
          ((void (*)(void **, char *))off_24C073D08[v405])(v415, v402 - 128);
        *((_DWORD *)v402 - 2) = -1;
        v402 -= 128;
      }
      while (v404 != v401);
      v403 = v431;
    }
    v432 = v401;
    operator delete(v403);
  }
}

void sub_207D687C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  char v49;
  uint64_t v50;

  if (*(char *)(v50 - 169) < 0)
    operator delete(*(void **)(v50 - 192));
  if (v49 < 0)
    operator delete(v48);
  sub_207D2E058((void **)(v50 - 240));
  _Unwind_Resume(a1);
}

uint64_t sub_207D689B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(void **)(a1 + 32);
      if (v3 != v2)
      {
        do
        {
          v5 = v3 - 128;
          v6 = *(unsigned int *)(v3 - 8);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_24C073D50[v6])(&v11, v3 - 128);
          *(_DWORD *)(v3 - 8) = -1;
          v3 -= 128;
        }
        while (v5 != v2);
        v4 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v4);
    }
  }
  *(_QWORD *)a1 = off_24C06E9E8;
  v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_207D68AA4(uint64_t a1)
{
  sub_207D04890(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207D68AEC(uint64_t a1, unsigned int *a2, unint64_t *a3, char a4, float *a5, char a6, uint64_t a7)
{
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  int v25;
  float32x4_t *v26;
  uint64_t v27;
  unint64_t v28;
  float32x4_t *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  unsigned int i;
  const float *v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t j;
  unsigned __int8 v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  unint64_t v63;
  unint64_t v64;
  const float *v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t k;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  unint64_t v75;
  float32x4_t v76;
  float32x4_t *v77;
  unint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  unint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t *v90;
  unint64_t v91;
  unint64_t v92;
  float32x4_t *v93;
  unint64_t v94;
  float32x4_t v95;
  float32x4_t *v96;
  uint64_t v97;
  float32x4_t v98;
  float32x4_t *v99;
  unint64_t v100;
  int v102;
  unint64_t v103;
  int v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t *v110;
  const float *v111;
  void *memptr;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  uint64_t v121;

  if (a4)
  {
    v10 = *a3;
    v11 = a3[1];
    v12 = a2[3];
  }
  else
  {
    v13 = *a2;
    v14 = a2[1];
    if (v14)
      v15 = v13;
    else
      v15 = 0;
    LODWORD(v16) = v14 * v13;
    v17 = a2[2];
    v12 = a2[3];
    v40 = v17 == 0;
    LODWORD(v18) = v16 * v17;
    if (v40)
      v16 = 0;
    else
      v16 = v16;
    if (v12)
      v18 = v18;
    else
      v18 = 0;
    v11 = v16 | (v18 << 32);
    v10 = (*a2 != 0) | (unint64_t)(v15 << 32);
  }
  v19 = v12 * HIDWORD(v11);
  v20 = 4 * v19;
  v21 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
  v23 = v22 | (v22 >> 16) | ((v22 | (v22 >> 16)) >> 32);
  if (v23 + 1 > 8)
    v24 = v23 + 1;
  else
    v24 = 8;
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v24;
  if (v19)
  {
    memptr = 0;
    v25 = malloc_type_posix_memalign(&memptr, v24, 4 * v19, 0x1F88E90uLL);
    if (v25)
      sub_2081FBF78(v25, *(_QWORD *)(a1 + 16), v20);
    v26 = (float32x4_t *)memptr;
    v27 = a1;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v26 = 0;
    v27 = a1;
  }
  v28 = 4 * v11;
  *(_OWORD *)(v27 + 24) = *(_OWORD *)a2;
  *(_QWORD *)(v27 + 40) = (4 * v10) & 0xFFFFFFFCFFFFFFFCLL;
  *(_QWORD *)(v27 + 48) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  if (!v26 || !a6)
    return a1;
  v29 = v26;
  v30 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(a1 + 24)), (int8x16_t)xmmword_208234FA0));
  if ((v30 & 0xF) != 0)
    v31 = 0;
  else
    v31 = *(_QWORD *)(a1 + 24);
  if ((v30 & 0xF) != 0)
    v32 = 0;
  else
    v32 = *(_QWORD *)(a1 + 32);
  v33 = v28 >> 34;
  if (HIDWORD(v32) * (v28 >> 34) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_175;
  }
  v34 = v28 >> 2;
  if ((v10 & 0x3FFFFFFF) != 1)
  {
    if (HIDWORD(v32))
      v40 = (_DWORD)v32 == 0;
    else
      v40 = 1;
    if (!v40 && (_DWORD)v31 != 0 && HIDWORD(v31) != 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      v113 = v10 & 0x3FFFFFFF;
      v114 = HIDWORD(v31) - 1;
      v115 = HIDWORD(v10) & 0x3FFFFFFF;
      v116 = v32 - 1;
      v43 = HIDWORD(v32) - 1;
      v117 = v28 >> 2;
      v118 = HIDWORD(v32) - 1;
      v119 = v28 >> 34;
      if (HIDWORD(v32) != 1)
      {
        v44 = 4 * v33;
        do
        {
          sub_207D695D8(&memptr, a5, v29);
          v29 = (float32x4_t *)((char *)v29 + v44);
          --v43;
        }
        while (v43);
      }
      sub_207D695D8(&memptr, a5, v29);
    }
    return a1;
  }
  if ((_DWORD)v31 != (HIDWORD(v10) & 0x3FFFFFFF))
  {
    v108 = 0;
    v107 = v31;
    v109 = &v108;
    v110 = &v107;
    v111 = a5;
    if (!HIDWORD(v32) || !(_DWORD)v32 || !(_DWORD)v31 || !HIDWORD(v31))
      return a1;
    LODWORD(memptr) = 0;
    HIDWORD(memptr) = v31 - 1;
    v113 = 1;
    v114 = HIDWORD(v31) - 1;
    v45 = v32 - 1;
    v115 = HIDWORD(v10) & 0x3FFFFFFF;
    v116 = v32 - 1;
    v120 = 0;
    v121 = 0;
    v117 = v28 >> 2;
    v118 = HIDWORD(v32) - 1;
    v119 = v28 >> 34;
    if (HIDWORD(v32) == 1)
      goto LABEL_125;
    v46 = 0;
    v47 = (unint64_t)v29;
    while (1)
    {
      v102 = v46;
      v103 = v47;
      if (v116)
        break;
LABEL_123:
      sub_207D0E984((uint64_t)&memptr, (uint64_t)&v120, (uint64_t)&v109, v47);
      v47 = v103 + 4 * v119;
      v46 = v102 + 1;
      if (v102 + 1 >= v118)
      {
        v29 = (float32x4_t *)(v103 + 4 * v119);
        v45 = v116;
LABEL_125:
        if (v45)
        {
          v79 = 0;
          do
          {
            sub_207D0E984((uint64_t)&memptr, (uint64_t)&v120, (uint64_t)&v109, (unint64_t)v29);
            v29 = (float32x4_t *)((char *)v29 + 4 * v117);
            ++v79;
          }
          while (v79 < v116);
        }
        sub_207D0E984((uint64_t)&memptr, (uint64_t)&v120, (uint64_t)&v109, (unint64_t)v29);
        return a1;
      }
    }
    v48 = 0;
    while (1)
    {
      v105 = v48;
      LODWORD(v121) = v113;
      v106 = v47;
      if (v114)
      {
        for (i = 0; i < v114; ++i)
        {
          v120 = v47;
          v50 = v111;
          v51 = *v110;
          if (!v47 && v51)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v52 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v53 = qword_2545309E8;
              for (j = qword_2545309F0; v53 != j; v53 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v53)(*(_QWORD *)(v53 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v55 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_175;
            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
          }
          if (v51 >= 1)
          {
            v56 = v51 & 0x3FFFFFFFFFFFFFFFLL;
            v57 = (v51 & 0x3FFFFFFFFFFFFFFFLL) - ((v51 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
            if (v57 >= 0x10)
            {
              v59 = -4;
              if (!v56)
                v59 = 0;
              if (v47 >= (unint64_t)(v50 + 1)
                || (v60 = v47 + v59 + 4 * v51 + 4, v58 = (_DWORD *)v47, (unint64_t)v50 >= v60))
              {
                v58 = (_DWORD *)(v47 + 4 * (v57 & 0xFFFFFFFFFFFFFFF8));
                v56 -= v57 & 0xFFFFFFFFFFFFFFF8;
                v61 = vld1q_dup_f32(v50);
                v62 = (float32x4_t *)(v47 + 16);
                v63 = v57 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v62[-1] = v61;
                  *v62 = v61;
                  v62 += 2;
                  v63 -= 8;
                }
                while (v63);
                if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_67;
              }
            }
            else
            {
              v58 = (_DWORD *)v47;
            }
            v64 = v56 + 1;
            do
            {
              *v58++ = *(_DWORD *)v50;
              --v64;
            }
            while (v64 > 1);
          }
LABEL_67:
          v47 += 4 * v115;
        }
      }
      v120 = v47;
      v65 = v111;
      v66 = *v110;
      if (!v47 && v66)
      {
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v67 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v69 = qword_2545309E8;
          for (k = qword_2545309F0; v69 != k; v69 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v69)(*(_QWORD *)(v69 + 8), "ptr != nullptr || size == 0", 27, "", 0);
        }
        v70 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10)
          goto LABEL_175;
        qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
      }
      if (v66 >= 1)
      {
        v71 = v66 & 0x3FFFFFFFFFFFFFFFLL;
        v72 = (v66 & 0x3FFFFFFFFFFFFFFFLL) - ((v66 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v72 < 0x10)
          goto LABEL_111;
        v73 = -4;
        if (!v71)
          v73 = 0;
        if (v47 >= (unint64_t)(v65 + 1) || (unint64_t)v65 >= v47 + v73 + 4 * v66 + 4)
        {
          v74 = (_DWORD *)(v47 + 4 * (v72 & 0xFFFFFFFFFFFFFFF8));
          v71 -= v72 & 0xFFFFFFFFFFFFFFF8;
          v76 = vld1q_dup_f32(v65);
          v77 = (float32x4_t *)(v47 + 16);
          v78 = v72 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v77[-1] = v76;
            *v77 = v76;
            v77 += 2;
            v78 -= 8;
          }
          while (v78);
          if (v72 == (v72 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_64;
        }
        else
        {
LABEL_111:
          v74 = (_DWORD *)v47;
        }
        v75 = v71 + 1;
        do
        {
          *v74++ = *(_DWORD *)v65;
          --v75;
        }
        while (v75 > 1);
      }
LABEL_64:
      v47 = v106 + 4 * v117;
      v48 = v105 + 1;
      if (v105 + 1 >= v116)
        goto LABEL_123;
    }
  }
  if (v34 != HIDWORD(v31) * (_DWORD)v31)
  {
    v108 = 0;
    v107 = (HIDWORD(v31) * v31);
    v109 = &v108;
    v110 = &v107;
    v111 = a5;
    if (HIDWORD(v32) && (_DWORD)v32 && (_DWORD)v31 && HIDWORD(v31))
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      v113 = 1;
      v114 = HIDWORD(v31) - 1;
      v115 = v31;
      v116 = v32 - 1;
      v120 = 0;
      v121 = 0;
      v80 = HIDWORD(v32) - 1;
      v117 = v28 >> 2;
      v118 = HIDWORD(v32) - 1;
      v119 = v28 >> 34;
      if (HIDWORD(v32) != 1)
      {
        v81 = 4 * v33;
        do
        {
          sub_207D0E66C((_BOOL8)&memptr, &v120, (uint64_t)&v109, (unint64_t)v29);
          v29 = (float32x4_t *)((char *)v29 + v81);
          --v80;
        }
        while (v80);
      }
      sub_207D0E66C((_BOOL8)&memptr, &v120, (uint64_t)&v109, (unint64_t)v29);
    }
    return a1;
  }
  v35 = (v32 * v31 * HIDWORD(v31));
  if (v34 * (_DWORD)v32 == (_DWORD)v33)
  {
    v36 = (v35 * HIDWORD(v32));
    if (!(_DWORD)v36)
      return a1;
    if (v36 >= 8 && (v29 >= (float32x4_t *)(a5 + 1) || &v29->f32[v36] <= a5))
    {
      v37 = (float32x4_t *)((char *)v29 + 4 * (v36 & 0xFFFFFFF8));
      v38 = ((_BYTE)v32 * (_BYTE)v31 * BYTE4(v31) * BYTE4(v32)) & 7;
      v95 = vld1q_dup_f32(a5);
      v96 = v29 + 1;
      v97 = v36 & 0xFFFFFFF8;
      do
      {
        v96[-1] = v95;
        *v96 = v95;
        v96 += 2;
        v97 -= 8;
      }
      while (v97);
      if ((v36 & 0xFFFFFFF8) == v36)
        return a1;
    }
    else
    {
      v37 = v29;
      v38 = (v35 * HIDWORD(v32));
    }
    v39 = v38 + 1;
    do
    {
      v37->f32[0] = *a5;
      v37 = (float32x4_t *)((char *)v37 + 4);
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  if (HIDWORD(v32) && (_DWORD)v32 && (_DWORD)v31 && HIDWORD(v31))
  {
    if (HIDWORD(v32) == 1)
    {
      if (!(_DWORD)v35)
        return a1;
    }
    else
    {
      if (!(_DWORD)v35)
        return a1;
      v82 = 0;
      v83 = 4 * v33;
      v84 = v29;
      do
      {
        v85 = (unint64_t)v84;
        if (!v84
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_175;
        }
        v86 = (_DWORD *)v85;
        v87 = v35;
        if (v35 < 8)
          goto LABEL_153;
        if (v85 < (unint64_t)(a5 + 1))
        {
          v86 = (_DWORD *)v85;
          v87 = v35;
          if ((char *)&v29->f32[v35] + v83 * v82 > (char *)a5)
            goto LABEL_153;
        }
        v88 = 0;
        v86 = (_DWORD *)(v85 + 4 * (v35 & 0xFFFFFFF8));
        v89 = vld1q_dup_f32(a5);
        do
        {
          v90 = (float32x4_t *)(v85 + v88);
          *v90 = v89;
          v90[1] = v89;
          v88 += 32;
        }
        while (((4 * v35) & 0x3FFFFFFE0) != v88);
        v87 = v35 & 7;
        if ((v35 & 0xFFFFFFF8) != v35)
        {
LABEL_153:
          v91 = v87 + 1;
          do
          {
            *v86++ = *(_DWORD *)a5;
            --v91;
          }
          while (v91 > 1);
        }
        v84 = (float32x4_t *)(v85 + v83);
        ++v82;
      }
      while ((_DWORD)v82 != HIDWORD(v32) - 1);
      v29 = (float32x4_t *)(v85 + v83);
      if (!v85)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v29 = 0;
          goto LABEL_160;
        }
LABEL_175:
        abort();
      }
    }
LABEL_160:
    v92 = v35 - ((_DWORD)v35 != 0) + 1;
    if (v92 >= 0x10 && (v29 >= (float32x4_t *)(a5 + 1) || &v29->f32[v35] <= a5))
    {
      v93 = (float32x4_t *)((char *)v29 + 4 * (v92 & 0xFFFFFFFFFFFFFFF8));
      v35 -= v92 & 0xFFFFFFFFFFFFFFF8;
      v98 = vld1q_dup_f32(a5);
      v99 = v29 + 1;
      v100 = v92 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v99[-1] = v98;
        *v99 = v98;
        v99 += 2;
        v100 -= 8;
      }
      while (v100);
      if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8))
        return a1;
    }
    else
    {
      v93 = v29;
    }
    v94 = v35 + 1;
    do
    {
      v93->f32[0] = *a5;
      v93 = (float32x4_t *)((char *)v93 + 4);
      --v94;
    }
    while (v94 > 1);
  }
  return a1;
}

void sub_207D69594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)(a12 + 8);
  if (v13)
    free(v13);
  *(_QWORD *)(a12 + 8) = 0;
  _Unwind_Resume(exception_object);
}

float sub_207D695D8(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  float result;

  v3 = a1[5];
  v4 = a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = a1[6];
    if (v4)
    {
      v7 = a1[4];
      if (!v5)
      {
        do
        {
          v31 = a3;
          v32 = v4;
          do
          {
            *v31 = *a2;
            v31 += v7;
            --v32;
          }
          while (v32);
          *v31 = *a2;
          a3 += v6;
          ++v5;
        }
        while (v5 != v3);
        goto LABEL_32;
      }
      v8 = 0;
      v9 = 4 * v6;
      v10 = v7;
      v11 = 4 * a1[2];
      v12 = &a3[v10];
      do
      {
        v13 = 0;
        v14 = v12;
        v15 = a3;
        do
        {
          v16 = v14;
          v17 = v15;
          v18 = v5;
          do
          {
            *v17 = *a2;
            v17 = (_DWORD *)((char *)v17 + v11);
            --v18;
          }
          while (v18);
          *v17 = *a2;
          v15 = (_DWORD *)((char *)v15 + v10 * 4);
          ++v13;
          v14 = &v16[v10];
        }
        while (v13 != v4);
        v19 = v5;
        do
        {
          *v16 = *a2;
          v16 = (_DWORD *)((char *)v16 + v11);
          --v19;
        }
        while (v19);
        *v16 = *a2;
        a3 = (_DWORD *)((char *)a3 + v9);
        ++v8;
        v12 = (_DWORD *)((char *)v12 + v9);
      }
      while (v8 != v3);
LABEL_14:
      v7 = a1[4];
      if (v5)
      {
        v20 = 0;
        v21 = 4 * v7;
        v22 = 4 * a1[2];
        do
        {
          v23 = a3;
          v24 = v5;
          do
          {
            *v23 = *a2;
            v23 = (_DWORD *)((char *)v23 + v22);
            --v24;
          }
          while (v24);
          *v23 = *a2;
          a3 = (_DWORD *)((char *)a3 + v21);
          ++v20;
        }
        while (v20 != v4);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a3 = *a2;
        a3 += v7;
        --v4;
      }
      while (v4);
      goto LABEL_35;
    }
    if (!v5)
    {
      do
      {
        *a3 = *a2;
        a3 += v6;
        --v3;
      }
      while (v3);
      goto LABEL_35;
    }
    v25 = 0;
    v26 = 4 * v6;
    v27 = 4 * a1[2];
    do
    {
      v28 = a3;
      v29 = v5;
      do
      {
        *v28 = *a2;
        v28 = (_DWORD *)((char *)v28 + v27);
        --v29;
      }
      while (v29);
      *v28 = *a2;
      a3 = (_DWORD *)((char *)a3 + v26);
      ++v25;
    }
    while (v25 != v3);
  }
  else
  {
    v5 = a1[1];
    if (v4)
      goto LABEL_14;
  }
LABEL_25:
  if (v5)
  {
    v30 = 4 * a1[2];
    do
    {
      *a3 = *a2;
      a3 = (_DWORD *)((char *)a3 + v30);
      --v5;
    }
    while (v5);
  }
LABEL_35:
  result = *(float *)a2;
  *a3 = *a2;
  return result;
}

char *sub_207D697D4(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v31;
  char v32;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 7;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57)
    sub_207CA420C();
  v8 = a1[2] - v3;
  if (v8 >> 6 > v6)
    v6 = v8 >> 6;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
    v9 = 0x1FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 57)
      sub_207CA3AB8();
    v10 = (char *)operator new(v9 << 7);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[128 * v5];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  v11[56] = 0;
  v11[112] = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *((_QWORD *)v11 + 7) = off_24C06E878;
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(std::__shared_weak_count **)(a2 + 72);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v17 = *(_QWORD *)(a2 + 96);
      v18 = *(_DWORD *)(a2 + 104);
      v19 = *(_WORD *)(a2 + 108);
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 96);
      v18 = *(_DWORD *)(a2 + 104);
      v19 = *(_WORD *)(a2 + 108);
    }
    *((_QWORD *)v11 + 8) = v13;
    *((_QWORD *)v11 + 9) = v14;
    *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
    *((_DWORD *)v11 + 22) = *(_DWORD *)(a2 + 88);
    *((_QWORD *)v11 + 12) = v17;
    *((_DWORD *)v11 + 26) = v18;
    *((_WORD *)v11 + 54) = v19;
    if (v14)
    {
      v21 = (unint64_t *)&v14->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v11[112] = 1;
    v3 = *a1;
    v4 = a1[1];
  }
  v23 = &v10[128 * v9];
  *((_DWORD *)v11 + 30) = 1;
  v24 = v11 + 128;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v24;
    a1[2] = v23;
  }
  else
  {
    v25 = 0;
    do
    {
      v11[v25 - 128] = 0;
      *(_DWORD *)&v11[v25 - 8] = -1;
      v26 = *(unsigned int *)&v4[v25 - 8];
      if ((_DWORD)v26 != -1)
      {
        ((void (*)(char *, char *, char *))off_24C073D38[v26])(&v31, &v11[v25 - 128], &v4[v25 - 128]);
        *(_DWORD *)&v11[v25 - 8] = v26;
      }
      v25 -= 128;
    }
    while (&v4[v25] != v3);
    v3 = *a1;
    v27 = a1[1];
    v24 = v11 + 128;
    *a1 = &v11[v25];
    a1[1] = v11 + 128;
    a1[2] = v23;
    if (v27 != v3)
    {
      do
      {
        v28 = v27 - 128;
        v29 = *((unsigned int *)v27 - 2);
        if ((_DWORD)v29 != -1)
          ((void (*)(char *, char *))off_24C073D08[v29])(&v32, v27 - 128);
        *((_DWORD *)v27 - 2) = -1;
        v27 -= 128;
      }
      while (v28 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v24;
}

void sub_207D69A5C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x71C71C71C71C71CLL)
      sub_207CA420C();
    v9 = 0x8E38E38E38E38E39 * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x38E38E38E38E38ELL)
      v10 = 0x71C71C71C71C71CLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x71C71C71C71C71CLL)
        sub_207CA3AB8();
      v11 = (char *)operator new(36 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[36 * v7];
    v14 = &v11[36 * v10];
    v15 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 36);
        v18 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v18;
        *(_OWORD *)(v13 - 36) = v17;
        v13 -= 36;
        v5 -= 36;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_207D69C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  size_t size;
  unint64_t v10;
  std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::string *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  size_t v23;
  unint64_t v24;
  std::string::value_type *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::string *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  std::string *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  size_t v51;
  unint64_t v52;
  std::string::value_type *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  std::string *v57;
  std::string *v58;
  void *v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  __int128 *v127;
  __int128 *v128;
  uint64_t v129;
  unint64_t v130;
  std::string::size_type v131;
  std::string::size_type v132;
  __int128 v133;
  std::string::size_type v134;
  __int128 v135;
  std::string::size_type v136;
  __int128 v137;
  std::string::size_type v138;
  unint64_t v139;
  _QWORD *v140;
  void **v141;
  unsigned __int128 v142;
  uint64_t v143;
  _OWORD *v144;
  __int128 v145;
  _QWORD *v146;
  _QWORD *v147;
  BOOL v148;
  void **v149;
  void *v150;
  std::string::size_type v151;
  void *v152;
  void *v153;
  unint64_t v154;
  void *v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v162;
  unint64_t v163;
  uint64_t v165;
  uint64_t v166;
  std::string __p;
  __int16 v168;
  char v169;
  __int16 v170;
  char v171;
  __int16 v172;
  char v173;
  __int16 v174;
  char v175;
  __int16 v176;
  char v177;
  __int16 v178;
  char v179;
  __int16 v180;
  char v181;
  __int16 v182;
  char v183;
  __int16 v184;
  char v185;
  __int16 v186;
  char v187;
  __int16 v188;
  char v189;
  __int16 v190;
  char v191;
  __int16 v192;
  char v193;
  __int16 v194;
  char v195;
  __int16 v196;
  char v197;
  __int16 v198;
  char v199;
  __int16 v200;
  char v201;
  __int16 v202;
  char v203;
  void *v204;
  unint64_t v205;
  unint64_t v206;
  std::string v207;
  std::string v208;
  void *v209[4];
  int v210;
  char v211;
  __int16 v212;
  char v213;
  int v214;
  char v215;
  __int16 v216;
  char v217;
  int v218;
  char v219;
  __int16 v220;
  char v221;
  int v222;
  char v223;
  __int16 v224;
  char v225;
  int v226;
  char v227;
  uint64_t v228;
  __int16 v229;
  char v230;
  char v231;
  _BYTE v232[24];
  _BYTE *v233;
  char v234;
  _BYTE v235[24];
  _BYTE *v236;
  char v237;
  uint64_t v238;

  v2 = a2;
  v238 = *MEMORY[0x24BDAC8D0];
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v4 = *(_QWORD *)(a2 + 64);
  v3 = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 144);
  v6 = 0x100000001;
  if (*(_QWORD *)(a2 + 176) != 1)
    v6 = 0;
  v165 = v6 << 24;
  v160 = *(_QWORD *)(a2 + 72);
  if (!*(_BYTE *)(a2 + 184))
  {
    *(_WORD *)((char *)&v209[2] + 7) = 263;
    strcpy((char *)v209, "image_y");
    v210 = 65;
    v211 = 1;
    v214 = 1;
    v215 = 1;
    v218 = v3;
    v219 = 1;
    v222 = v4;
    v223 = 1;
    v226 = v5;
    v227 = 1;
    v228 = v6 << 24;
    v231 = 1;
    v232[0] = 0;
    v234 = 0;
    v235[0] = 0;
    v237 = 0;
    v205 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
    if (!v237)
      goto LABEL_146;
    v67 = v236;
    if (v236 == v235)
    {
      v68 = 4;
      v67 = v235;
    }
    else
    {
      if (!v236)
        goto LABEL_146;
      v68 = 5;
    }
    (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_146:
    if (v234)
    {
      v69 = v233;
      if (v233 == v232)
      {
        v70 = 4;
        v69 = v232;
        goto LABEL_151;
      }
      if (v233)
      {
        v70 = 5;
LABEL_151:
        (*(void (**)(void))(*v69 + 8 * v70))();
      }
    }
    if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
      operator delete(v209[0]);
    if (*(_DWORD *)v2)
      goto LABEL_192;
    *(_WORD *)((char *)&v209[2] + 7) = 264;
    strcpy((char *)v209, "image_cb");
    v210 = 65;
    v211 = 1;
    v214 = 1;
    v215 = 1;
    v218 = v160 >> 1;
    v219 = 1;
    v222 = v4 >> 1;
    v223 = 1;
    v226 = v5;
    v227 = 1;
    v228 = v165;
    v231 = 1;
    v232[0] = 0;
    v234 = 0;
    v235[0] = 0;
    v237 = 0;
    v71 = v205;
    if (v205 >= v206)
    {
      v72 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
    }
    else
    {
      sub_207D4E678(v205, (__int128 *)v209);
      v72 = v71 + 168;
    }
    v205 = v72;
    if (v237)
    {
      v73 = v236;
      if (v236 == v235)
      {
        v74 = 4;
        v73 = v235;
      }
      else
      {
        if (!v236)
          goto LABEL_165;
        v74 = 5;
      }
      (*(void (**)(void))(*v73 + 8 * v74))();
    }
LABEL_165:
    if (v234)
    {
      v75 = v233;
      if (v233 == v232)
      {
        v76 = 4;
        v75 = v232;
        goto LABEL_170;
      }
      if (v233)
      {
        v76 = 5;
LABEL_170:
        (*(void (**)(void))(*v75 + 8 * v76))();
      }
    }
    if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
      operator delete(v209[0]);
    *(_WORD *)((char *)&v209[2] + 7) = 264;
    strcpy((char *)v209, "image_cr");
    v210 = 65;
    v211 = 1;
    v214 = 1;
    v215 = 1;
    v218 = v160 >> 1;
    v219 = 1;
    v222 = v4 >> 1;
    v223 = 1;
    v226 = v5;
    v227 = 1;
    v228 = v165;
    v231 = 1;
    v232[0] = 0;
    v234 = 0;
    v235[0] = 0;
    v237 = 0;
    v77 = v205;
    if (v205 >= v206)
    {
      v78 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
    }
    else
    {
      sub_207D4E678(v205, (__int128 *)v209);
      v78 = v77 + 168;
    }
    v205 = v78;
    if (v237)
    {
      v79 = v236;
      if (v236 == v235)
      {
        v80 = 4;
        v79 = v235;
      }
      else
      {
        if (!v236)
          goto LABEL_183;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
    }
LABEL_183:
    if (v234)
    {
      v81 = v233;
      if (v233 == v232)
      {
        v82 = 4;
        v81 = v232;
        goto LABEL_188;
      }
      if (v233)
      {
        v82 = 5;
LABEL_188:
        (*(void (**)(void))(*v81 + 8 * v82))();
      }
    }
    if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
      operator delete(v209[0]);
    goto LABEL_192;
  }
  if (v5)
  {
    v7 = 0;
    v163 = *(_QWORD *)(a2 + 64);
    v162 = *(_QWORD *)(a2 + 144);
    while (1)
    {
      std::to_string(&v207, v7);
      v8 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
      if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v207.__r_.__value_.__r.__words[2]);
      else
        size = v207.__r_.__value_.__l.__size_;
      v10 = size + 20;
      if (size + 20 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      if (v10 >= 0x17)
      {
        v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v12 = v10 | 7;
        v13 = v12 + 1;
        v14 = (char *)operator new(v12 + 1);
        __p.__r_.__value_.__l.__size_ = size + 20;
        __p.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        *((_DWORD *)v14 + 4) = 1953853279;
        *(_OWORD *)v14 = *(_OWORD *)"cameraIntrinsics_out";
        v11 = v14 + 20;
      }
      else
      {
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = size + 20;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = 1953853279;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)"cameraIntrinsics_out";
        v11 = &__p.__r_.__value_.__s.__data_[20];
        if (!size)
          goto LABEL_22;
      }
      if (v8 >= 0)
        v15 = &v207;
      else
        v15 = (std::string *)v207.__r_.__value_.__r.__words[0];
      memmove(v11, v15, size);
LABEL_22:
      v11[size] = 0;
      *(std::string *)v209 = __p;
      memset(&__p, 0, sizeof(__p));
      LOBYTE(v209[3]) = 1;
      v210 = 65;
      v211 = 1;
      v212 = v202;
      v213 = v203;
      v214 = 1;
      v215 = 1;
      v216 = v200;
      v217 = v201;
      v218 = 3;
      v219 = 1;
      v220 = v198;
      v221 = v199;
      v222 = 3;
      v223 = 1;
      v224 = v196;
      v225 = v197;
      v226 = 1;
      v227 = 1;
      v228 = v165;
      v229 = v194;
      v230 = v195;
      v231 = 1;
      v232[0] = 0;
      v234 = 0;
      v235[0] = 0;
      v237 = 0;
      v16 = v205;
      if (v205 >= v206)
      {
        v17 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
      }
      else
      {
        sub_207D4E678(v205, (__int128 *)v209);
        v17 = v16 + 168;
      }
      v205 = v17;
      if (v237)
      {
        v18 = v236;
        if (v236 == v235)
        {
          v18 = v235;
          v19 = 4;
        }
        else
        {
          if (!v236)
            goto LABEL_31;
          v19 = 5;
        }
        (*(void (**)(void))(*v18 + 8 * v19))();
      }
LABEL_31:
      if (v234)
      {
        v20 = v233;
        if (v233 == v232)
        {
          v20 = v232;
          v21 = 4;
          goto LABEL_36;
        }
        if (v233)
        {
          v21 = 5;
LABEL_36:
          (*(void (**)(void))(*v20 + 8 * v21))();
        }
      }
      if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
        operator delete(v209[0]);
      v22 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
      if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
      else
        v23 = v207.__r_.__value_.__l.__size_;
      v24 = v23 + 19;
      if (v23 + 19 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      if (v24 >= 0x17)
      {
        v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v26 = v24 | 7;
        v27 = v26 + 1;
        v28 = (char *)operator new(v26 + 1);
        __p.__r_.__value_.__l.__size_ = v23 + 19;
        __p.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        *(_DWORD *)(v28 + 15) = 1852399475;
        *(_OWORD *)v28 = *(_OWORD *)"cameraIntrinsics_in";
        v25 = v28 + 19;
      }
      else
      {
        __p.__r_.__value_.__r.__words[2] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v23 + 19;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = 1852399475;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)"cameraIntrinsics_in";
        v25 = &__p.__r_.__value_.__s.__data_[19];
        if (!v23)
          goto LABEL_54;
      }
      if (v22 >= 0)
        v29 = &v207;
      else
        v29 = (std::string *)v207.__r_.__value_.__r.__words[0];
      memmove(v25, v29, v23);
LABEL_54:
      v25[v23] = 0;
      *(std::string *)v209 = __p;
      memset(&__p, 0, sizeof(__p));
      LOBYTE(v209[3]) = 1;
      v210 = 65;
      v211 = 1;
      v212 = v202;
      v213 = v203;
      v214 = 1;
      v215 = 1;
      v216 = v200;
      v217 = v201;
      v218 = 3;
      v219 = 1;
      v220 = v198;
      v221 = v199;
      v222 = 3;
      v223 = 1;
      v224 = v196;
      v225 = v197;
      v226 = 1;
      v227 = 1;
      v228 = v165;
      v229 = v194;
      v230 = v195;
      v231 = 1;
      v232[0] = 0;
      v234 = 0;
      v235[0] = 0;
      v237 = 0;
      v30 = v205;
      if (v205 >= v206)
      {
        v31 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
      }
      else
      {
        sub_207D4E678(v205, (__int128 *)v209);
        v31 = v30 + 168;
      }
      v205 = v31;
      if (v237)
      {
        v32 = v236;
        if (v236 == v235)
        {
          v32 = v235;
          v33 = 4;
        }
        else
        {
          if (!v236)
            goto LABEL_63;
          v33 = 5;
        }
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
LABEL_63:
      if (v234)
      {
        v34 = v233;
        if (v233 == v232)
        {
          v34 = v232;
          v35 = 4;
          goto LABEL_68;
        }
        if (v233)
        {
          v35 = 5;
LABEL_68:
          (*(void (**)(void))(*v34 + 8 * v35))();
        }
      }
      if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
        operator delete(v209[0]);
      v36 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
      if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
      else
        v37 = v207.__r_.__value_.__l.__size_;
      v38 = v37 + 16;
      if (v37 + 16 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      if (v38 >= 0x17)
      {
        v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17)
          v40 = v38 | 7;
        v41 = v40 + 1;
        v42 = operator new(v40 + 1);
        __p.__r_.__value_.__l.__size_ = v37 + 16;
        __p.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        *v42 = *(_OWORD *)"radialDistortion";
        v39 = (std::string::value_type *)(v42 + 1);
      }
      else
      {
        __p.__r_.__value_.__r.__words[2] = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v37 + 16;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)"radialDistortion";
        v39 = &__p.__r_.__value_.__s.__data_[16];
        if (!v37)
          goto LABEL_86;
      }
      if (v36 >= 0)
        v43 = &v207;
      else
        v43 = (std::string *)v207.__r_.__value_.__r.__words[0];
      memmove(v39, v43, v37);
LABEL_86:
      v39[v37] = 0;
      *(std::string *)v209 = __p;
      memset(&__p, 0, sizeof(__p));
      LOBYTE(v209[3]) = 1;
      v210 = 65;
      v211 = 1;
      v212 = v192;
      v213 = v193;
      v214 = 1;
      v215 = 1;
      v216 = v190;
      v217 = v191;
      v218 = 4;
      v219 = 1;
      v220 = v188;
      v221 = v189;
      v222 = 1;
      v223 = 1;
      v224 = v186;
      v225 = v187;
      v226 = 1;
      v227 = 1;
      v228 = v165;
      v229 = v184;
      v230 = v185;
      v231 = 1;
      v232[0] = 0;
      v234 = 0;
      v235[0] = 0;
      v237 = 0;
      v44 = v205;
      if (v205 >= v206)
      {
        v45 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
      }
      else
      {
        sub_207D4E678(v205, (__int128 *)v209);
        v45 = v44 + 168;
      }
      v205 = v45;
      if (v237)
      {
        v46 = v236;
        if (v236 == v235)
        {
          v46 = v235;
          v47 = 4;
        }
        else
        {
          if (!v236)
            goto LABEL_95;
          v47 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v47))();
      }
LABEL_95:
      if (v234)
      {
        v48 = v233;
        if (v233 == v232)
        {
          v48 = v232;
          v49 = 4;
          goto LABEL_100;
        }
        if (v233)
        {
          v49 = 5;
LABEL_100:
          (*(void (**)(void))(*v48 + 8 * v49))();
        }
      }
      if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
        operator delete(v209[0]);
      v50 = SHIBYTE(v207.__r_.__value_.__r.__words[2]);
      if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
      else
        v51 = v207.__r_.__value_.__l.__size_;
      v52 = v51 + 7;
      if (v51 + 7 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      if (v52 >= 0x17)
      {
        v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v52 | 7) != 0x17)
          v54 = v52 | 7;
        v55 = v54 + 1;
        v56 = operator new(v54 + 1);
        __p.__r_.__value_.__l.__size_ = v51 + 7;
        __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
        *v56 = 1919905635;
        v53 = (char *)v56 + 7;
        *(_DWORD *)((char *)v56 + 3) = 1601397874;
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v51 + 7;
        v53 = &__p.__r_.__value_.__s.__data_[7];
        strcpy((char *)&__p, "coords_");
        if (!v51)
          goto LABEL_118;
      }
      if (v50 >= 0)
        v57 = &v207;
      else
        v57 = (std::string *)v207.__r_.__value_.__r.__words[0];
      memmove(v53, v57, v51);
LABEL_118:
      v53[v51] = 0;
      v58 = std::string::append(&__p, "x", 1uLL);
      v59 = (void *)v58->__r_.__value_.__r.__words[0];
      v208.__r_.__value_.__r.__words[0] = v58->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v208.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v58->__r_.__value_.__r.__words[1] + 7);
      v60 = HIBYTE(v58->__r_.__value_.__r.__words[2]);
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      v209[0] = v59;
      *(void **)((char *)&v209[1] + 7) = *(void **)((char *)v208.__r_.__value_.__r.__words + 7);
      v209[1] = v208.__r_.__value_.__l.__data_;
      HIBYTE(v209[2]) = v60;
      v208.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v208.__r_.__value_.__r.__words + 7) = 0;
      LOBYTE(v209[3]) = 1;
      v210 = 17;
      v211 = 1;
      v213 = v183;
      v212 = v182;
      v214 = 1;
      v215 = 1;
      v217 = v181;
      v216 = v180;
      LOBYTE(v218) = 0;
      HIBYTE(v218) = v179;
      *(_WORD *)((char *)&v218 + 1) = v178;
      v219 = 0;
      v221 = v177;
      v220 = v176;
      LOBYTE(v222) = 0;
      HIBYTE(v222) = v175;
      *(_WORD *)((char *)&v222 + 1) = v174;
      v223 = 0;
      v225 = v173;
      v224 = v172;
      v226 = 1;
      v227 = 1;
      BYTE2(v228) = v171;
      LOWORD(v228) = v170;
      *(_DWORD *)((char *)&v228 + 3) = 1;
      HIBYTE(v228) = 1;
      v230 = v169;
      v229 = v168;
      v231 = 1;
      v232[0] = 0;
      v234 = 0;
      v235[0] = 0;
      v237 = 0;
      v61 = v205;
      v4 = v163;
      v2 = a2;
      if (v205 >= v206)
      {
        v62 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
      }
      else
      {
        sub_207D4E678(v205, (__int128 *)v209);
        v62 = v61 + 168;
      }
      LODWORD(v5) = v162;
      v205 = v62;
      if (v237)
      {
        v63 = v236;
        if (v236 == v235)
        {
          v63 = v235;
          v64 = 4;
        }
        else
        {
          if (!v236)
            goto LABEL_127;
          v64 = 5;
        }
        (*(void (**)(void))(*v63 + 8 * v64))();
      }
LABEL_127:
      if (!v234)
        goto LABEL_133;
      v65 = v233;
      if (v233 == v232)
      {
        v65 = v232;
        v66 = 4;
      }
      else
      {
        if (!v233)
          goto LABEL_133;
        v66 = 5;
      }
      (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_133:
      if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
        operator delete(v209[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
LABEL_138:
        operator delete(v207.__r_.__value_.__l.__data_);
        if (++v7 >= *(_QWORD *)(a2 + 144))
          break;
      }
      else
      {
        if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_138;
LABEL_7:
        if (++v7 >= *(_QWORD *)(a2 + 144))
          break;
      }
    }
  }
LABEL_192:
  if (!*(_BYTE *)(v2 + 116))
    goto LABEL_229;
  v83 = *(_DWORD *)(v2 + 88);
  v84 = *(_DWORD *)(v2 + 80);
  *(_WORD *)((char *)&v209[2] + 7) = 265;
  strcpy((char *)v209, "ray_dir_x");
  v210 = 65;
  v211 = 1;
  v214 = 1;
  v215 = 1;
  v218 = v83;
  v219 = 1;
  v222 = v84;
  v223 = 1;
  v226 = v5;
  v227 = 1;
  v228 = v165;
  v231 = 1;
  v232[0] = 0;
  v234 = 0;
  v235[0] = 0;
  v237 = 0;
  v85 = v205;
  if (v205 >= v206)
  {
    v86 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
  }
  else
  {
    sub_207D4E678(v205, (__int128 *)v209);
    v86 = v85 + 168;
  }
  v205 = v86;
  if (v237)
  {
    v87 = v236;
    if (v236 == v235)
    {
      v88 = 4;
      v87 = v235;
    }
    else
    {
      if (!v236)
        goto LABEL_202;
      v88 = 5;
    }
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
LABEL_202:
  if (v234)
  {
    v89 = v233;
    if (v233 == v232)
    {
      v90 = 4;
      v89 = v232;
      goto LABEL_207;
    }
    if (v233)
    {
      v90 = 5;
LABEL_207:
      (*(void (**)(void))(*v89 + 8 * v90))();
    }
  }
  if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
    operator delete(v209[0]);
  *(_WORD *)((char *)&v209[2] + 7) = 265;
  strcpy((char *)v209, "ray_dir_y");
  v210 = 65;
  v211 = 1;
  v214 = 1;
  v215 = 1;
  v218 = v83;
  v219 = 1;
  v222 = v84;
  v223 = 1;
  v226 = v5;
  v227 = 1;
  v228 = v165;
  v231 = 1;
  v232[0] = 0;
  v234 = 0;
  v235[0] = 0;
  v237 = 0;
  v91 = v205;
  if (v205 >= v206)
  {
    v92 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
  }
  else
  {
    sub_207D4E678(v205, (__int128 *)v209);
    v92 = v91 + 168;
  }
  v205 = v92;
  if (v237)
  {
    v93 = v236;
    if (v236 == v235)
    {
      v94 = 4;
      v93 = v235;
    }
    else
    {
      if (!v236)
        goto LABEL_220;
      v94 = 5;
    }
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
LABEL_220:
  if (v234)
  {
    v95 = v233;
    if (v233 == v232)
    {
      v96 = 4;
      v95 = v232;
      goto LABEL_225;
    }
    if (v233)
    {
      v96 = 5;
LABEL_225:
      (*(void (**)(void))(*v95 + 8 * v96))();
    }
  }
  if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
    operator delete(v209[0]);
LABEL_229:
  if (!*(_BYTE *)(v2 + 153))
  {
    if (!*(_BYTE *)(v2 + 152))
      goto LABEL_260;
    *(_WORD *)((char *)&v209[2] + 7) = 266;
    strcpy((char *)v209, "extrinsics");
    v210 = 65;
    v211 = 1;
    v214 = 1;
    v215 = 1;
    v218 = v160 >> 3;
    v219 = 1;
    v222 = v4 >> 3;
    v223 = 1;
    v226 = 16 * v5;
    v227 = 1;
    v228 = v165;
    v231 = 1;
    v232[0] = 0;
    v234 = 0;
    v235[0] = 0;
    v237 = 0;
    v99 = v205;
    if (v205 >= v206)
    {
      v100 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
    }
    else
    {
      sub_207D4E678(v205, (__int128 *)v209);
      v100 = v99 + 168;
    }
    v205 = v100;
    if (v237)
    {
      v105 = v236;
      if (v236 == v235)
      {
        v106 = 4;
        v105 = v235;
      }
      else
      {
        if (!v236)
          goto LABEL_253;
        v106 = 5;
      }
      (*(void (**)(void))(*v105 + 8 * v106))();
    }
LABEL_253:
    if (!v234)
      goto LABEL_257;
    v103 = v233;
    if (v233 != v232)
      goto LABEL_244;
LABEL_255:
    v104 = 4;
    v103 = v232;
    goto LABEL_256;
  }
  *(_WORD *)((char *)&v209[2] + 7) = 266;
  strcpy((char *)v209, "extrinsics");
  v210 = 65;
  v211 = 1;
  v214 = 1;
  v215 = 1;
  v218 = 4;
  v219 = 1;
  v222 = 4;
  v223 = 1;
  v226 = v5;
  v227 = 1;
  v228 = v165;
  v231 = 1;
  v232[0] = 0;
  v234 = 0;
  v235[0] = 0;
  v237 = 0;
  v97 = v205;
  if (v205 >= v206)
  {
    v98 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
  }
  else
  {
    sub_207D4E678(v205, (__int128 *)v209);
    v98 = v97 + 168;
  }
  v205 = v98;
  if (v237)
  {
    v101 = v236;
    if (v236 == v235)
    {
      v102 = 4;
      v101 = v235;
    }
    else
    {
      if (!v236)
        goto LABEL_242;
      v102 = 5;
    }
    (*(void (**)(void))(*v101 + 8 * v102))();
  }
LABEL_242:
  if (!v234)
    goto LABEL_257;
  v103 = v233;
  if (v233 == v232)
    goto LABEL_255;
LABEL_244:
  if (v103)
  {
    v104 = 5;
LABEL_256:
    (*(void (**)(void))(*v103 + 8 * v104))();
  }
LABEL_257:
  if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
    operator delete(v209[0]);
LABEL_260:
  if (!*(_BYTE *)(v2 + 117))
    goto LABEL_279;
  *(_WORD *)((char *)&v209[2] + 7) = 270;
  strcpy((char *)v209, "cam_intrinsics");
  v210 = 65;
  v211 = 1;
  v214 = 1;
  v215 = 1;
  v218 = 3;
  v219 = 1;
  v222 = 3;
  v223 = 1;
  v226 = v5;
  v227 = 1;
  v228 = v165;
  v231 = 1;
  v232[0] = 0;
  v234 = 0;
  v235[0] = 0;
  v237 = 0;
  v107 = v205;
  if (v205 >= v206)
  {
    v108 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
  }
  else
  {
    sub_207D4E678(v205, (__int128 *)v209);
    v108 = v107 + 168;
  }
  v205 = v108;
  if (v237)
  {
    v109 = v236;
    if (v236 == v235)
    {
      v110 = 4;
      v109 = v235;
    }
    else
    {
      if (!v236)
        goto LABEL_270;
      v110 = 5;
    }
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
LABEL_270:
  if (v234)
  {
    v111 = v233;
    if (v233 == v232)
    {
      v112 = 4;
      v111 = v232;
      goto LABEL_275;
    }
    if (v233)
    {
      v112 = 5;
LABEL_275:
      (*(void (**)(void))(*v111 + 8 * v112))();
    }
  }
  if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
    operator delete(v209[0]);
LABEL_279:
  if (!*(_BYTE *)(v2 + 154))
    goto LABEL_298;
  *(_WORD *)((char *)&v209[2] + 7) = 270;
  strcpy((char *)v209, "patch_distance");
  v210 = 65;
  v211 = 1;
  v214 = 1;
  v215 = 1;
  v218 = v5;
  v219 = 1;
  v222 = 1;
  v223 = 1;
  v226 = 1;
  v227 = 1;
  *(_DWORD *)((char *)&v228 + 3) = 1;
  HIBYTE(v228) = 1;
  v231 = 1;
  v232[0] = 0;
  v234 = 0;
  v235[0] = 0;
  v237 = 0;
  v113 = v205;
  if (v205 >= v206)
  {
    v114 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
  }
  else
  {
    sub_207D4E678(v205, (__int128 *)v209);
    v114 = v113 + 168;
  }
  v205 = v114;
  if (v237)
  {
    v115 = v236;
    if (v236 == v235)
    {
      v116 = 4;
      v115 = v235;
    }
    else
    {
      if (!v236)
        goto LABEL_289;
      v116 = 5;
    }
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
LABEL_289:
  if (v234)
  {
    v117 = v233;
    if (v233 == v232)
    {
      v118 = 4;
      v117 = v232;
      goto LABEL_294;
    }
    if (v233)
    {
      v118 = 5;
LABEL_294:
      (*(void (**)(void))(*v117 + 8 * v118))();
    }
  }
  if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
    operator delete(v209[0]);
LABEL_298:
  if (!*(_BYTE *)(v2 + 155))
    goto LABEL_317;
  v119 = *(_QWORD *)(v2 + 168);
  v120 = 2 * *(_DWORD *)(v2 + 160);
  *(_WORD *)((char *)&v209[2] + 7) = 265;
  strcpy((char *)v209, "rnn_hc_in");
  v210 = 65;
  v211 = 1;
  v214 = 1;
  v215 = 1;
  v218 = v119;
  v219 = 1;
  v222 = v120;
  v223 = 1;
  v226 = 1;
  v227 = 1;
  v228 = v165;
  v231 = 1;
  v232[0] = 0;
  v234 = 0;
  v235[0] = 0;
  v237 = 0;
  v121 = v205;
  if (v205 >= v206)
  {
    v122 = sub_207D4E49C((__int128 **)&v204, (__int128 *)v209);
  }
  else
  {
    sub_207D4E678(v205, (__int128 *)v209);
    v122 = v121 + 168;
  }
  v205 = v122;
  if (v237)
  {
    v123 = v236;
    if (v236 == v235)
    {
      v124 = 4;
      v123 = v235;
    }
    else
    {
      if (!v236)
        goto LABEL_308;
      v124 = 5;
    }
    (*(void (**)(void))(*v123 + 8 * v124))();
  }
LABEL_308:
  if (v234)
  {
    v125 = v233;
    if (v233 == v232)
    {
      v126 = 4;
      v125 = v232;
      goto LABEL_313;
    }
    if (v233)
    {
      v126 = 5;
LABEL_313:
      (*(void (**)(void))(*v125 + 8 * v126))();
    }
  }
  if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
    operator delete(v209[0]);
LABEL_317:
  v128 = *(__int128 **)(v2 + 120);
  v127 = *(__int128 **)(v2 + 128);
  memset(&v207, 0, sizeof(v207));
  v129 = (char *)v127 - (char *)v128;
  if (v127 == v128)
  {
    v131 = 0;
    v132 = 0;
    goto LABEL_336;
  }
  v130 = 0xAAAAAAAAAAAAAAABLL * (v129 >> 3);
  if (v130 >> 59)
    sub_207CA420C();
  v131 = (std::string::size_type)operator new(0x5555555555555560 * (v129 >> 3));
  v129 = v131 + 32 * v130;
  v207.__r_.__value_.__r.__words[0] = v131;
  v207.__r_.__value_.__l.__size_ = v131;
  v207.__r_.__value_.__r.__words[2] = v129;
  v132 = v131;
  if (v127 == v128)
  {
LABEL_336:
    __p.__r_.__value_.__r.__words[0] = v132;
    __p.__r_.__value_.__l.__size_ = v131;
    __p.__r_.__value_.__r.__words[2] = v129;
    if (!*(_BYTE *)(v2 + 155))
      goto LABEL_345;
    goto LABEL_337;
  }
  do
  {
    if (*((char *)v128 + 23) < 0)
    {
      sub_207CA40D8(v209, *(void **)v128, *((_QWORD *)v128 + 1));
    }
    else
    {
      v133 = *v128;
      v209[2] = *((void **)v128 + 2);
      *(_OWORD *)v209 = v133;
    }
    LOBYTE(v209[3]) = 1;
    v134 = v207.__r_.__value_.__l.__size_;
    if (v207.__r_.__value_.__l.__size_ >= v207.__r_.__value_.__r.__words[2])
    {
      v136 = sub_207D4E7A8((uint64_t)&v207, (uint64_t)v209);
    }
    else
    {
      *(_BYTE *)v207.__r_.__value_.__l.__size_ = 0;
      *(_BYTE *)(v134 + 24) = 0;
      if (LOBYTE(v209[3]))
      {
        v135 = *(_OWORD *)v209;
        *(void **)(v134 + 16) = v209[2];
        *(_OWORD *)v134 = v135;
        memset(v209, 0, 24);
        *(_BYTE *)(v134 + 24) = 1;
      }
      v136 = v134 + 32;
    }
    v207.__r_.__value_.__l.__size_ = v136;
    if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
      operator delete(v209[0]);
    v128 = (__int128 *)((char *)v128 + 24);
  }
  while (v128 != v127);
  v129 = v207.__r_.__value_.__r.__words[2];
  v131 = v207.__r_.__value_.__l.__size_;
  __p = v207;
  if (*(_BYTE *)(v2 + 155))
  {
LABEL_337:
    *(_WORD *)((char *)&v209[2] + 7) = 266;
    strcpy((char *)v209, "rnn_hc_out");
    if (v131 >= v129)
    {
      v138 = sub_207D4E7A8((uint64_t)&__p, (uint64_t)v209);
    }
    else
    {
      *(_BYTE *)v131 = 0;
      *(_BYTE *)(v131 + 24) = 0;
      if (LOBYTE(v209[3]))
      {
        v137 = *(_OWORD *)v209;
        *(void **)(v131 + 16) = v209[2];
        *(_OWORD *)v131 = v137;
        memset(v209, 0, 24);
        *(_BYTE *)(v131 + 24) = 1;
      }
      v138 = v131 + 32;
    }
    __p.__r_.__value_.__l.__size_ = v138;
    if (LOBYTE(v209[3]) && SHIBYTE(v209[2]) < 0)
      operator delete(v209[0]);
  }
LABEL_345:
  v139 = *(_QWORD *)(v2 + 240);
  memset(&v207, 0, sizeof(v207));
  sub_207CA44DC(&v207.__r_.__value_.__l.__data_, v139);
  v140 = *(_QWORD **)(v2 + 224);
  if (v140 != (_QWORD *)(v2 + 232))
  {
    do
    {
      if (*((char *)v140 + 55) < 0)
      {
        sub_207CA40D8(v209, (void *)v140[4], v140[5]);
      }
      else
      {
        *(_OWORD *)v209 = *((_OWORD *)v140 + 2);
        v209[2] = *((void **)v140 + 6);
      }
      v144 = (_OWORD *)v207.__r_.__value_.__l.__size_;
      if (v207.__r_.__value_.__l.__size_ >= v207.__r_.__value_.__r.__words[2])
      {
        v207.__r_.__value_.__l.__size_ = (std::string::size_type)sub_207CA4674((void **)&v207.__r_.__value_.__l.__data_, (uint64_t)v209);
        if (SHIBYTE(v209[2]) < 0)
        {
          operator delete(v209[0]);
          v146 = (_QWORD *)v140[1];
          if (v146)
          {
            do
            {
LABEL_357:
              v147 = v146;
              v146 = (_QWORD *)*v146;
            }
            while (v146);
            goto LABEL_348;
          }
        }
        else
        {
          v146 = (_QWORD *)v140[1];
          if (v146)
            goto LABEL_357;
        }
      }
      else
      {
        v145 = *(_OWORD *)v209;
        *(void **)(v207.__r_.__value_.__l.__size_ + 16) = v209[2];
        *v144 = v145;
        v207.__r_.__value_.__l.__size_ = (std::string::size_type)v144 + 24;
        v146 = (_QWORD *)v140[1];
        if (v146)
          goto LABEL_357;
      }
      do
      {
        v147 = (_QWORD *)v140[2];
        v148 = *v147 == (_QWORD)v140;
        v140 = v147;
      }
      while (!v148);
LABEL_348:
      v140 = v147;
    }
    while (v147 != (_QWORD *)(v2 + 232));
  }
  v142 = *(_OWORD *)&v207.__r_.__value_.__l.__data_;
  v166 = v142 >> 64;
  v141 = (void **)v142;
  v208 = v207;
  v143 = a1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  if (*(char *)(v2 + 31) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 16), *(void **)(v2 + 8), *(_QWORD *)(v2 + 16));
    v143 = a1;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v2 + 24);
  }
  sub_207CA51F8(v143 + 40, (uint64_t *)&v204);
  sub_207CA550C((_QWORD *)(v143 + 64), (uint64_t *)&__p);
  *(_QWORD *)(v143 + 88) = 0;
  *(_QWORD *)(v143 + 96) = 0;
  *(_QWORD *)(v143 + 104) = 0;
  v149 = (void **)v166;
  sub_207CA5698((char *)(v143 + 88), (uint64_t)v141, v166, 0xAAAAAAAAAAAAAAABLL * ((v166 - (uint64_t)v141) >> 3));
  *(_BYTE *)(v143 + 112) = 1;
  if (v141)
  {
    while (v149 != v141)
    {
      if (*((char *)v149 - 1) < 0)
        operator delete(*(v149 - 3));
      v149 -= 3;
    }
    operator delete(v141);
    v150 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
LABEL_366:
      v151 = __p.__r_.__value_.__l.__size_;
      if ((void *)__p.__r_.__value_.__l.__size_ == v150)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
        operator delete(v150);
        v152 = v204;
        if (!v204)
          return;
      }
      else
      {
        do
        {
          if (*(_BYTE *)(v151 - 8) && *(char *)(v151 - 9) < 0)
            operator delete(*(void **)(v151 - 32));
          v151 -= 32;
        }
        while ((void *)v151 != v150);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
        operator delete(__p.__r_.__value_.__l.__data_);
        v152 = v204;
        if (!v204)
          return;
      }
      goto LABEL_381;
    }
  }
  else
  {
    v150 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
      goto LABEL_366;
  }
  v152 = v204;
  if (!v204)
    return;
LABEL_381:
  v153 = v152;
  if ((void *)v205 == v152)
    goto LABEL_400;
  v154 = v205 - 80;
  do
  {
    if (!*(_BYTE *)(v154 + 72))
      goto LABEL_390;
    v156 = *(_QWORD **)(v154 + 64);
    if ((_QWORD *)(v154 + 40) == v156)
    {
      v156 = (_QWORD *)(v154 + 40);
      v157 = 4;
    }
    else
    {
      if (!v156)
        goto LABEL_390;
      v157 = 5;
    }
    (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_390:
    if (!*(_BYTE *)(v154 + 32))
      goto LABEL_396;
    v158 = *(_QWORD **)(v154 + 24);
    if ((_QWORD *)v154 == v158)
    {
      v158 = (_QWORD *)v154;
      v159 = 4;
    }
    else
    {
      if (!v158)
        goto LABEL_396;
      v159 = 5;
    }
    (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_396:
    if (*(_BYTE *)(v154 - 64))
    {
      if (*(char *)(v154 - 65) < 0)
        operator delete(*(void **)(v154 - 88));
    }
    v155 = (void *)(v154 - 88);
    v154 -= 168;
  }
  while (v155 != v152);
  v153 = v204;
LABEL_400:
  v205 = (unint64_t)v152;
  operator delete(v153);
}

void sub_207D6B7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  sub_207D4E3E4((uint64_t)&__p);
  sub_207CA510C(&a38);
  _Unwind_Resume(a1);
}

void sub_207D6B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void **v11;
  void **v12;

  sub_207CA5094(v12);
  sub_207CA510C(v11);
  if (*(char *)(a10 + 39) < 0)
    operator delete(*v10);
  JUMPOUT(0x207D6B934);
}

void sub_207D6B874(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  JUMPOUT(0x207D6B934);
}

void sub_207D6B950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a53)
  {
    if (a52 < 0)
      operator delete(__p);
  }
  sub_207CA5094(&a41);
  sub_207CA510C(&a38);
  _Unwind_Resume(a1);
}

void sub_207D6B984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  sub_207CA510C(&a38);
  _Unwind_Resume(a1);
}

void sub_207D6B9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    JUMPOUT(0x207D6B9C0);
  JUMPOUT(0x207D6B8D8);
}

void sub_207D6B9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    JUMPOUT(0x207D6B9C0);
  JUMPOUT(0x207D6B8D8);
}

void sub_207D6B9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    JUMPOUT(0x207D6B9C0);
  JUMPOUT(0x207D6B8D8);
}

void sub_207D6BA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    JUMPOUT(0x207D6B9C0);
  JUMPOUT(0x207D6B8D8);
}

void sub_207D6BA18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C073DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D6BA28(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C073DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207D6BA48(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_207D6BA58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C073DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D6BA68(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C073DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207D6BA88(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_207D6BA9C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D6BAB0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = (void *)sub_207D6BB44(v1);
    operator delete(v2);
  }
}

uint64_t sub_207D6BAD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3odt8tracking22PatchTrackingInferenceEE27__shared_ptr_default_deleteIS4_S4_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3odt8tracking22PatchTrackingInferenceEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3odt8tracking22PatchTrackingInferenceEE27__shared_ptr_default_deleteIS4_S4_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3odt8tracking22PatchTrackingInferenceEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207D6BB44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v2 = *(void **)(a1 + 640);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 640) = 0;
  v3 = *(void **)(a1 + 552);
  if (v3)
  {
    *(_QWORD *)(a1 + 560) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 528);
  if (v4)
  {
    *(_QWORD *)(a1 + 536) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(_QWORD *)(a1 + 512) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(_QWORD *)(a1 + 488) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 456);
  if (v7)
  {
    *(_QWORD *)(a1 + 464) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 432);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 440);
    v10 = *(void **)(a1 + 432);
    if (v9 != v8)
    {
      v11 = *(_QWORD *)(a1 + 440);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = *(void **)(a1 + 432);
    }
    *(_QWORD *)(a1 + 440) = v8;
    operator delete(v10);
  }
  v14 = *(void **)(a1 + 408);
  if (v14)
  {
    *(_QWORD *)(a1 + 416) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 384);
  if (v15)
  {
    *(_QWORD *)(a1 + 392) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 360);
  if (v16)
  {
    *(_QWORD *)(a1 + 368) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 336);
  if (v17)
  {
    *(_QWORD *)(a1 + 344) = v17;
    operator delete(v17);
  }
  sub_207CFF9E4(a1 + 312, *(char **)(a1 + 320));
  v18 = *(_QWORD **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v18)
  {
    v19 = v18[2];
    v18[2] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = (std::__shared_weak_count *)v18[1];
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    operator delete(v18);
  }
  sub_207D04890(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

float sub_207D6BCF4(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int v50;
  float result;

  v3 = a1[8];
  v4 = a1[5];
  if (v3)
  {
    v5 = a1[2];
    v6 = a1[9];
    v7 = a1[10];
    if (v4)
    {
      v8 = a1[6];
      v9 = a1[7];
      if (!v5)
      {
        do
        {
          v48 = a3;
          v49 = a2;
          v50 = v4;
          do
          {
            *v48 = *v49;
            v49 += v8;
            v48 += v9;
            --v50;
          }
          while (v50);
          *v48 = *v49;
          a2 += v6;
          a3 += v7;
          ++v5;
        }
        while (v5 != v3);
        goto LABEL_32;
      }
      v10 = 0;
      v11 = 4 * v6;
      v12 = v8;
      v13 = 4 * a1[3];
      v14 = 4 * v7;
      v15 = v9;
      v16 = 4 * a1[4];
      v17 = &a2[v12];
      v18 = &a3[v15];
      do
      {
        v19 = 0;
        v20 = v18;
        v21 = v17;
        v22 = a3;
        v23 = a2;
        do
        {
          v24 = v21;
          v25 = v20;
          v26 = v22;
          v27 = v23;
          v28 = v5;
          do
          {
            *v26 = *v27;
            v27 = (_DWORD *)((char *)v27 + v13);
            v26 = (_DWORD *)((char *)v26 + v16);
            --v28;
          }
          while (v28);
          *v26 = *v27;
          v23 = (_DWORD *)((char *)v23 + v12 * 4);
          v22 = (_DWORD *)((char *)v22 + v15 * 4);
          ++v19;
          v21 = &v24[v12];
          v20 = &v25[v15];
        }
        while (v19 != v4);
        v29 = v5;
        do
        {
          *v25 = *v24;
          v24 = (_DWORD *)((char *)v24 + v13);
          v25 = (_DWORD *)((char *)v25 + v16);
          --v29;
        }
        while (v29);
        *v25 = *v24;
        a2 = (_DWORD *)((char *)a2 + v11);
        a3 = (_DWORD *)((char *)a3 + v14);
        ++v10;
        v17 = (_DWORD *)((char *)v17 + v11);
        v18 = (_DWORD *)((char *)v18 + v14);
      }
      while (v10 != v3);
LABEL_14:
      v8 = a1[6];
      v9 = a1[7];
      if (v5)
      {
        v30 = 0;
        v31 = 4 * v8;
        v32 = 4 * a1[3];
        v33 = 4 * v9;
        v34 = 4 * a1[4];
        do
        {
          v35 = a3;
          v36 = a2;
          v37 = v5;
          do
          {
            *v35 = *v36;
            v36 = (_DWORD *)((char *)v36 + v32);
            v35 = (_DWORD *)((char *)v35 + v34);
            --v37;
          }
          while (v37);
          *v35 = *v36;
          a2 = (_DWORD *)((char *)a2 + v31);
          a3 = (_DWORD *)((char *)a3 + v33);
          ++v30;
        }
        while (v30 != v4);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a3 = *a2;
        a2 += v8;
        a3 += v9;
        --v4;
      }
      while (v4);
      goto LABEL_35;
    }
    if (!v5)
    {
      do
      {
        *a3 = *a2;
        a2 += v6;
        a3 += v7;
        --v3;
      }
      while (v3);
      goto LABEL_35;
    }
    v38 = 0;
    v39 = 4 * v6;
    v40 = 4 * a1[3];
    v41 = 4 * v7;
    v42 = 4 * a1[4];
    do
    {
      v43 = a3;
      v44 = a2;
      v45 = v5;
      do
      {
        *v43 = *v44;
        v44 = (_DWORD *)((char *)v44 + v40);
        v43 = (_DWORD *)((char *)v43 + v42);
        --v45;
      }
      while (v45);
      *v43 = *v44;
      a2 = (_DWORD *)((char *)a2 + v39);
      a3 = (_DWORD *)((char *)a3 + v41);
      ++v38;
    }
    while (v38 != v3);
  }
  else
  {
    v5 = a1[2];
    if (v4)
      goto LABEL_14;
  }
LABEL_25:
  if (v5)
  {
    v46 = 4 * a1[3];
    v47 = 4 * a1[4];
    do
    {
      *a3 = *a2;
      a2 = (_DWORD *)((char *)a2 + v46);
      a3 = (_DWORD *)((char *)a3 + v47);
      --v5;
    }
    while (v5);
  }
LABEL_35:
  result = *(float *)a2;
  *a3 = *a2;
  return result;
}

BOOL sub_207D6BF94(_BOOL8 result, int32x4_t **a2, uint64_t a3, int32x4_t *a4, double a5)
{
  int32x4_t *v5;
  unint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  int32x4_t *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  int32x4_t *v27;
  unint64_t v28;
  unint64_t v29;

  v5 = a4;
  v8 = *(unsigned int *)(result + 8) | ((unint64_t)*(unsigned int *)(result + 16) << 32);
  *a2 = a4;
  a2[1] = (int32x4_t *)v8;
  if (*(_DWORD *)(result + 20))
  {
    v9 = (unsigned int *)result;
    v10 = 0;
    while (1)
    {
      *a2 = v5;
      v11 = **(_QWORD **)(a3 + 8);
      v12 = **(_DWORD **)(a3 + 16);
      if (!v5)
      {
        if (v11)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if (result)
            break;
        }
      }
      if (v11 >= 1)
      {
        *(float *)&a5 = (float)v12;
        v13 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v14 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        v15 = v5;
        if (v14 < 8)
          goto LABEL_12;
        v15 = (int32x4_t *)((char *)v5 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
        v13 -= v14 & 0xFFFFFFFFFFFFFFF8;
        v16 = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
        v17 = v5 + 1;
        v18 = v14 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v17[-1] = v16;
          *v17 = v16;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_12:
          v19 = v13 + 1;
          do
          {
            v15->i32[0] = LODWORD(a5);
            v15 = (int32x4_t *)((char *)v15 + 4);
            --v19;
          }
          while (v19 > 1);
        }
      }
      v5 = (int32x4_t *)((char *)v5 + 4 * v9[6]);
      if (++v10 >= v9[5])
        goto LABEL_15;
    }
LABEL_27:
    abort();
  }
LABEL_15:
  *a2 = v5;
  v20 = *(int **)(a3 + 16);
  v21 = **(_QWORD **)(a3 + 8);
  v22 = *v20;
  if (!v5)
  {
    if (v21)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if (result)
        goto LABEL_27;
    }
  }
  if (v21 >= 1)
  {
    *(float *)&a5 = (float)v22;
    v23 = v21 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (v21 & 0x3FFFFFFFFFFFFFFFLL) - ((v21 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 8)
    {
      v25 = v5;
LABEL_24:
      v29 = v23 + 1;
      do
      {
        v25->i32[0] = LODWORD(a5);
        v25 = (int32x4_t *)((char *)v25 + 4);
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v25 = (int32x4_t *)((char *)v5 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v26 = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v27 = v5 + 1;
    v28 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_24;
  }
  return result;
}

uint64_t sub_207D6C1A4(uint64_t result, uint64_t a2, uint64_t a3, int32x4_t *a4, double a5)
{
  int32x4_t *v5;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int32x4_t *v15;
  int32x4_t v16;
  int32x4_t *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  int32x4_t *v27;
  unint64_t v28;
  unint64_t v29;

  v5 = a4;
  v8 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (*(_DWORD *)(result + 12))
  {
    v9 = result;
    v10 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v5;
      v11 = **(_QWORD **)(a3 + 8);
      v12 = **(_DWORD **)(a3 + 16);
      if (!v5)
      {
        if (v11)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if ((_DWORD)result)
            break;
        }
      }
      if (v11 >= 1)
      {
        *(float *)&a5 = (float)v12;
        v13 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v14 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        v15 = v5;
        if (v14 < 8)
          goto LABEL_12;
        v15 = (int32x4_t *)((char *)v5 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
        v13 -= v14 & 0xFFFFFFFFFFFFFFF8;
        v16 = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
        v17 = v5 + 1;
        v18 = v14 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v17[-1] = v16;
          *v17 = v16;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_12:
          v19 = v13 + 1;
          do
          {
            v15->i32[0] = LODWORD(a5);
            v15 = (int32x4_t *)((char *)v15 + 4);
            --v19;
          }
          while (v19 > 1);
        }
      }
      v5 = (int32x4_t *)((char *)v5 + 4 * *(unsigned int *)(v9 + 16));
      if (++v10 >= *(_DWORD *)(v9 + 12))
        goto LABEL_15;
    }
LABEL_27:
    abort();
  }
LABEL_15:
  *(_QWORD *)a2 = v5;
  v20 = *(int **)(a3 + 16);
  v21 = **(_QWORD **)(a3 + 8);
  v22 = *v20;
  if (!v5)
  {
    if (v21)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
        goto LABEL_27;
    }
  }
  if (v21 >= 1)
  {
    *(float *)&a5 = (float)v22;
    v23 = v21 & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (v21 & 0x3FFFFFFFFFFFFFFFLL) - ((v21 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 8)
    {
      v25 = v5;
LABEL_24:
      v29 = v23 + 1;
      do
      {
        v25->i32[0] = LODWORD(a5);
        v25 = (int32x4_t *)((char *)v25 + 4);
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    v25 = (int32x4_t *)((char *)v5 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    v26 = vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v27 = v5 + 1;
    v28 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_24;
  }
  return result;
}

_DWORD *sub_207D6C3B0(_DWORD *result, int *a2, float *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  float v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  int v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  int v35;

  v3 = result[5];
  v4 = result[3];
  if (v3)
  {
    v5 = result[1];
    v6 = result[6];
    if (v4)
    {
      v7 = *a2;
      v8 = (float)*a2;
      v9 = result[4];
      if (!v5)
      {
        v33 = 4 * v6;
        do
        {
          v34 = a3;
          v35 = v4;
          do
          {
            *v34 = v8;
            v34 += v9;
            --v35;
          }
          while (v35);
          *v34 = v8;
          a3 = (float *)((char *)a3 + v33);
          ++v5;
        }
        while (v5 != v3);
        goto LABEL_33;
      }
      v10 = 0;
      v11 = 4 * v6;
      v12 = v9;
      v13 = 4 * result[2];
      v14 = &a3[v12];
      do
      {
        v15 = 0;
        v16 = v14;
        v17 = a3;
        do
        {
          v18 = v16;
          v19 = v17;
          v20 = v5;
          do
          {
            *v19 = v8;
            v19 = (float *)((char *)v19 + v13);
            --v20;
          }
          while (v20);
          *v19 = v8;
          v17 = (float *)((char *)v17 + v12 * 4);
          ++v15;
          v16 = &v18[v12];
        }
        while (v15 != v4);
        v21 = v5;
        do
        {
          *v18 = v8;
          v18 = (float *)((char *)v18 + v13);
          --v21;
        }
        while (v21);
        *v18 = v8;
        a3 = (float *)((char *)a3 + v11);
        ++v10;
        v14 = (float *)((char *)v14 + v11);
      }
      while (v10 != v3);
      v8 = (float)v7;
LABEL_14:
      v9 = result[4];
      if (v5)
      {
        v22 = 0;
        v23 = 4 * v9;
        v24 = 4 * result[2];
        do
        {
          v25 = a3;
          v26 = v5;
          do
          {
            *v25 = v8;
            v25 = (float *)((char *)v25 + v24);
            --v26;
          }
          while (v26);
          *v25 = v8;
          a3 = (float *)((char *)a3 + v23);
          ++v22;
        }
        while (v22 != v4);
        goto LABEL_25;
      }
      do
      {
LABEL_33:
        *a3 = v8;
        a3 += v9;
        --v4;
      }
      while (v4);
      goto LABEL_36;
    }
    v8 = (float)*a2;
    if (!v5)
    {
      do
      {
        *a3 = v8;
        a3 += v6;
        --v3;
      }
      while (v3);
      goto LABEL_36;
    }
    v27 = 0;
    v28 = 4 * v6;
    v29 = 4 * result[2];
    do
    {
      v30 = a3;
      v31 = v5;
      do
      {
        *v30 = v8;
        v30 = (float *)((char *)v30 + v29);
        --v31;
      }
      while (v31);
      *v30 = v8;
      a3 = (float *)((char *)a3 + v28);
      ++v27;
    }
    while (v27 != v3);
  }
  else
  {
    v5 = result[1];
    v8 = (float)*a2;
    if (v4)
      goto LABEL_14;
  }
LABEL_25:
  if (v5)
  {
    v32 = 4 * result[2];
    do
    {
      *a3 = v8;
      a3 = (float *)((char *)a3 + v32);
      --v5;
    }
    while (v5);
  }
LABEL_36:
  *a3 = v8;
  return result;
}

void sub_207D6C590(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  unint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  char *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  double *v62;
  double *v63;
  double *v64;
  double *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  double *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  _OWORD *v75;
  double *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  float *v80;
  double *v81;
  double *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  double *v87;
  unint64_t v88;
  double *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  double *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  float *v100;
  double *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  double *v106;
  unint64_t v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  double *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  char *v142;
  char *v143;
  char *v144;
  unint64_t v145;
  uint64_t v146[3];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *__p;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  unint64_t v155;
  double *v156;
  double *v157;
  double *v158;

  v8 = *((unsigned int *)a1 + 2);
  v9 = *((unsigned int *)a1 + 3);
  v10 = *((unsigned int *)a1 + 4);
  if (*a2 != v10
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 330, (uint64_t)"c == model_keypoints3D.size()", 29, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v134 = a4;
  v135 = a3;
  if ((_DWORD)v10)
  {
    v11 = (2 * v10);
    v156 = (double *)operator new(8 * (3 * v10));
    v157 = v156;
    v158 = &v156[(3 * v10)];
    v153 = 0;
    v154 = 0;
    v155 = 0;
    if ((_DWORD)v11)
    {
      v12 = (char *)operator new(8 * v11);
      v153 = v12;
      v154 = v12;
      v145 = (unint64_t)&v12[8 * v11];
      v155 = v145;
    }
    else
    {
      v145 = 0;
      v12 = 0;
    }
    v13 = (char *)operator new(8 * v10);
    v14 = 0;
    __p = v13;
    v151 = v13;
    v15 = v8 != 0;
    v144 = &v13[8 * v10];
    v152 = v144;
    if (!(_DWORD)v9)
      v15 = 0;
    v139 = v15;
    if ((_DWORD)v9)
      v16 = (_DWORD)v8 == 0;
    else
      v16 = 1;
    v17 = v8 | (v9 << 32);
    if (v16)
      v17 = 0;
    v138 = v17;
    v136 = v10;
    v137 = HIDWORD(v17);
    v18 = v12;
    while (1)
    {
      v148 = 0;
      v149 = 0;
      v147 = 0;
      v21 = *((_DWORD *)a1 + 7);
      v22 = *a1;
      v23 = *(uint64_t *)((char *)a1 + 20);
      v24 = v139;
      if (v21 != -1)
        v24 = 0;
      if (v24
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v146[0] = v22 + 4 * (v21 * v14);
      v146[1] = v138;
      v146[2] = v23;
      if (HIDWORD(v23) * (_DWORD)v137 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      sub_207D5D44C(v146, (double *)&v149, (double *)&v148, (double *)&v147);
      v25 = (char *)v145;
      if ((unint64_t)v18 < v145)
      {
        *(_QWORD *)v18 = v149;
        v26 = v18 + 8;
        v154 = v18 + 8;
        if ((unint64_t)(v18 + 8) < v145)
          goto LABEL_33;
        goto LABEL_52;
      }
      v28 = (v18 - v12) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_185;
      if ((uint64_t)(v145 - (_QWORD)v12) >> 2 > v29)
        v29 = (uint64_t)(v145 - (_QWORD)v12) >> 2;
      if (v145 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 >> 61)
          goto LABEL_184;
        v31 = operator new(8 * v30);
        v32 = &v31[8 * v28];
        *(_QWORD *)v32 = v149;
        v26 = v32 + 8;
        v33 = v18 - v12;
        if (v18 == v12)
          goto LABEL_49;
      }
      else
      {
        v31 = 0;
        v32 = (char *)(8 * v28);
        *(_QWORD *)(8 * v28) = v149;
        v26 = (char *)(8 * v28 + 8);
        v33 = v18 - v12;
        if (v18 == v12)
          goto LABEL_49;
      }
      v34 = v33 - 8;
      if (v34 < 0x168)
      {
        v35 = v18;
        goto LABEL_48;
      }
      v90 = (v18 - 8 - v12) & 0xFFFFFFFFFFFFFFF8;
      if (&v31[v18 - v12 - 8 - v90] > &v31[v18 - v12 - 8])
      {
        v35 = v18;
        do
        {
LABEL_48:
          v36 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *((_QWORD *)v32 - 1) = v36;
          v32 -= 8;
        }
        while (v35 != v12);
        goto LABEL_49;
      }
      if (&v18[-v90 - 8] > v18 - 8)
      {
        v35 = v18;
        goto LABEL_48;
      }
      if ((unint64_t)(v12 - v31) < 0x20)
      {
        v35 = v18;
        goto LABEL_48;
      }
      v116 = (v34 >> 3) + 1;
      v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
      v35 = &v18[-v117];
      v32 -= v117;
      v118 = &v31[8 * v28 - 16];
      v119 = v18 - 16;
      v120 = v116 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v121 = *(_OWORD *)v119;
        *(v118 - 1) = *((_OWORD *)v119 - 1);
        *v118 = v121;
        v118 -= 2;
        v119 -= 32;
        v120 -= 4;
      }
      while (v120);
      if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_48;
LABEL_49:
      v25 = &v31[8 * v30];
      v153 = v32;
      v154 = v26;
      v155 = (unint64_t)v25;
      if (v12)
      {
        operator delete(v12);
        v25 = (char *)v155;
      }
      v12 = v32;
      v154 = v26;
      if (v26 < v25)
      {
LABEL_33:
        *(_QWORD *)v26 = v148;
        v143 = v26 + 8;
        v154 = v26 + 8;
        v145 = (unint64_t)v25;
        if (v13 < v144)
          goto LABEL_34;
        goto LABEL_69;
      }
LABEL_52:
      v37 = (v26 - v12) >> 3;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61)
        goto LABEL_185;
      if ((v25 - v12) >> 2 > v38)
        v38 = (v25 - v12) >> 2;
      if ((unint64_t)(v25 - v12) >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
      {
        if (v39 >> 61)
          goto LABEL_184;
        v40 = operator new(8 * v39);
        v41 = &v40[8 * v37];
        *(_QWORD *)v41 = v148;
        v42 = (uint64_t)(v41 + 8);
        v43 = v26 - v12;
        if (v26 == v12)
          goto LABEL_66;
      }
      else
      {
        v40 = 0;
        v41 = (char *)(8 * v37);
        *(_QWORD *)(8 * v37) = v148;
        v42 = 8 * v37 + 8;
        v43 = v26 - v12;
        if (v26 == v12)
          goto LABEL_66;
      }
      v44 = v43 - 8;
      if (v44 < 0x168)
      {
        v45 = v26;
        goto LABEL_65;
      }
      v91 = (v26 - 8 - v12) & 0xFFFFFFFFFFFFFFF8;
      if (&v40[v26 - v12 - 8 - v91] > &v40[v26 - v12 - 8])
      {
        v45 = v26;
        do
        {
LABEL_65:
          v46 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *((_QWORD *)v41 - 1) = v46;
          v41 -= 8;
        }
        while (v45 != v12);
        goto LABEL_66;
      }
      if (&v26[-v91 - 8] > v26 - 8)
      {
        v45 = v26;
        goto LABEL_65;
      }
      if ((unint64_t)(v12 - v40) < 0x20)
      {
        v45 = v26;
        goto LABEL_65;
      }
      v122 = (v44 >> 3) + 1;
      v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
      v45 = &v26[-v123];
      v41 -= v123;
      v124 = &v40[8 * v37 - 16];
      v125 = v26 - 16;
      v126 = v122 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v127 = *(_OWORD *)v125;
        *(v124 - 1) = *((_OWORD *)v125 - 1);
        *v124 = v127;
        v124 -= 2;
        v125 -= 32;
        v126 -= 4;
      }
      while (v126);
      if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_65;
LABEL_66:
      v47 = &v40[8 * v39];
      v153 = v41;
      v154 = (char *)v42;
      v155 = (unint64_t)v47;
      if (v12)
        operator delete(v12);
      v12 = v41;
      v143 = (char *)v42;
      v154 = (char *)v42;
      v145 = (unint64_t)v47;
      if (v13 < v144)
      {
LABEL_34:
        *(_QWORD *)v13 = v147;
        v27 = v13 + 8;
        goto LABEL_86;
      }
LABEL_69:
      v48 = (char *)__p;
      v49 = v13 - (_BYTE *)__p;
      v50 = (v13 - (_BYTE *)__p) >> 3;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 61)
        goto LABEL_185;
      if ((v144 - (_BYTE *)__p) >> 2 > v51)
        v51 = (v144 - (_BYTE *)__p) >> 2;
      if ((unint64_t)(v144 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
      {
        if (v52 >> 61)
          goto LABEL_184;
        v53 = operator new(8 * v52);
        v54 = &v53[8 * v50];
        *v54 = v147;
        v55 = (uint64_t)(v54 + 1);
        v56 = v13 - v48;
        if (v13 == v48)
          goto LABEL_83;
      }
      else
      {
        v53 = 0;
        v54 = (_QWORD *)(8 * v50);
        *(_QWORD *)(8 * v50) = v147;
        v55 = 8 * v50 + 8;
        v56 = v13 - v48;
        if (v13 == v48)
          goto LABEL_83;
      }
      v57 = v56 - 8;
      if (v57 >= 0x168)
      {
        v92 = (v13 - 8 - v48) & 0xFFFFFFFFFFFFFFF8;
        if (&v53[v49 - 8 - v92] > &v53[v49 - 8])
        {
          v58 = v13;
        }
        else if (&v13[-v92 - 8] > v13 - 8)
        {
          v58 = v13;
        }
        else if ((unint64_t)(v13 - v53 - v49) >= 0x20)
        {
          v128 = (v57 >> 3) + 1;
          v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v13[-v129];
          v54 = (_QWORD *)((char *)v54 - v129);
          v130 = &v53[8 * v50 - 16];
          v131 = (__int128 *)(v13 - 16);
          v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v133 = *v131;
            *(v130 - 1) = *(v131 - 1);
            *v130 = v133;
            v130 -= 2;
            v131 -= 2;
            v132 -= 4;
          }
          while (v132);
          if (v128 == (v128 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_83;
        }
        else
        {
          v58 = v13;
        }
      }
      else
      {
        v58 = v13;
      }
      do
      {
        v59 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *--v54 = v59;
      }
      while (v58 != v48);
LABEL_83:
      __p = v54;
      v144 = &v53[8 * v52];
      v152 = v144;
      if (v48)
        operator delete(v48);
      v27 = (char *)v55;
LABEL_86:
      v142 = v27;
      v151 = v27;
      v60 = a2[1];
      v61 = (float *)(v60 + 12 * v14);
      v62 = v157;
      v63 = v158;
      if (v157 >= v158)
      {
        v65 = v156;
        v66 = v157 - v156;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
          goto LABEL_185;
        if (((char *)v158 - (char *)v156) >> 2 > v67)
          v67 = ((char *)v158 - (char *)v156) >> 2;
        if ((unint64_t)((char *)v158 - (char *)v156) >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          if (v68 >> 61)
            goto LABEL_184;
          v69 = operator new(8 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = (double *)&v69[8 * v66];
        *v70 = *v61;
        v64 = v70 + 1;
        if (v62 != v65)
        {
          v71 = (char *)v62 - (char *)v65 - 8;
          if (v71 < 0x58)
            goto LABEL_191;
          if ((unint64_t)((char *)v65 - v69) < 0x20)
            goto LABEL_191;
          v72 = (v71 >> 3) + 1;
          v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v62[v73 / 0xFFFFFFFFFFFFFFF8];
          v70 = (double *)((char *)v70 - v73);
          v75 = &v69[8 * v66 - 16];
          v76 = v62 - 2;
          v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *v75 = v78;
            v75 -= 2;
            v76 -= 4;
            v77 -= 4;
          }
          while (v77);
          v62 = v74;
          if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_191:
            do
            {
              v79 = *((_QWORD *)v62-- - 1);
              *((_QWORD *)v70-- - 1) = v79;
            }
            while (v62 != v65);
          }
        }
        v63 = (double *)&v69[8 * v68];
        v156 = v70;
        v158 = v63;
        if (v65)
        {
          operator delete(v65);
          v60 = a2[1];
        }
      }
      else
      {
        *v157 = *v61;
        v64 = v62 + 1;
      }
      v157 = v64;
      v80 = (float *)(v60 + 12 * v14 + 4);
      if (v64 < v63)
      {
        *v64 = *v80;
        v81 = v64 + 1;
        goto LABEL_142;
      }
      v82 = v156;
      v83 = v64 - v156;
      v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 61)
        goto LABEL_185;
      if (((char *)v63 - (char *)v156) >> 2 > v84)
        v84 = ((char *)v63 - (char *)v156) >> 2;
      if ((unint64_t)((char *)v63 - (char *)v156) >= 0x7FFFFFFFFFFFFFF8)
        v85 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v85 = v84;
      if (v85)
      {
        if (v85 >> 61)
          goto LABEL_184;
        v86 = operator new(8 * v85);
      }
      else
      {
        v86 = 0;
      }
      v87 = (double *)&v86[8 * v83];
      *v87 = *v80;
      v81 = v87 + 1;
      if (v64 != v82)
      {
        v88 = (char *)v64 - (char *)v82 - 8;
        if (v88 < 0x58)
        {
          v89 = v64;
          goto LABEL_139;
        }
        if ((unint64_t)((char *)v82 - v86) < 0x20)
        {
          v89 = v64;
          do
          {
LABEL_139:
            v99 = *((_QWORD *)v89-- - 1);
            *((_QWORD *)v87-- - 1) = v99;
          }
          while (v89 != v82);
          goto LABEL_140;
        }
        v93 = (v88 >> 3) + 1;
        v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
        v89 = &v64[v94 / 0xFFFFFFFFFFFFFFF8];
        v87 = (double *)((char *)v87 - v94);
        v95 = &v86[8 * v83 - 16];
        v96 = v64 - 2;
        v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v98 = *(_OWORD *)v96;
          *(v95 - 1) = *((_OWORD *)v96 - 1);
          *v95 = v98;
          v95 -= 2;
          v96 -= 4;
          v97 -= 4;
        }
        while (v97);
        if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_139;
      }
LABEL_140:
      v63 = (double *)&v86[8 * v85];
      v156 = v87;
      v158 = v63;
      if (v82)
      {
        operator delete(v82);
        v60 = a2[1];
      }
LABEL_142:
      v157 = v81;
      v100 = (float *)(v60 + 12 * v14 + 8);
      if (v81 < v63)
      {
        *v81 = *v100;
        v19 = v81 + 1;
        v20 = v136;
        v13 = v142;
        v18 = v143;
      }
      else
      {
        v101 = v156;
        v102 = v81 - v156;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 61)
LABEL_185:
          sub_207CA420C();
        if (((char *)v63 - (char *)v156) >> 2 > v103)
          v103 = ((char *)v63 - (char *)v156) >> 2;
        if ((unint64_t)((char *)v63 - (char *)v156) >= 0x7FFFFFFFFFFFFFF8)
          v104 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v104 = v103;
        if (v104)
        {
          v13 = v142;
          v18 = v143;
          if (v104 >> 61)
LABEL_184:
            sub_207CA3AB8();
          v105 = operator new(8 * v104);
        }
        else
        {
          v105 = 0;
          v13 = v142;
          v18 = v143;
        }
        v106 = (double *)&v105[8 * v102];
        *v106 = *v100;
        v19 = v106 + 1;
        if (v81 != v101)
        {
          v107 = (char *)v81 - (char *)v101 - 8;
          if (v107 < 0x58 || (unint64_t)((char *)v101 - v105) < 0x20)
          {
            v108 = v81;
            v20 = v136;
            goto LABEL_157;
          }
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v81[v111 / 0xFFFFFFFFFFFFFFF8];
          v106 = (double *)((char *)v106 - v111);
          v112 = &v105[8 * v102 - 16];
          v113 = v81 - 2;
          v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v115 = *(_OWORD *)v113;
            *(v112 - 1) = *((_OWORD *)v113 - 1);
            *v112 = v115;
            v112 -= 2;
            v113 -= 4;
            v114 -= 4;
          }
          while (v114);
          v20 = v136;
          if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_157:
              v109 = *((_QWORD *)v108-- - 1);
              *((_QWORD *)v106-- - 1) = v109;
            }
            while (v108 != v101);
          }
          v156 = v106;
          v158 = (double *)&v105[8 * v104];
          if (!v101)
            goto LABEL_24;
LABEL_161:
          operator delete(v101);
          goto LABEL_24;
        }
        v20 = v136;
        v156 = (double *)&v105[8 * v102];
        v158 = (double *)&v105[8 * v104];
        if (v101)
          goto LABEL_161;
      }
LABEL_24:
      v157 = v19;
      if (++v14 == v20)
        goto LABEL_7;
    }
  }
  v153 = 0;
  v154 = 0;
  v155 = 0;
  __p = 0;
  v151 = 0;
  v152 = 0;
LABEL_7:
  sub_207D6D15C(v134, (uint64_t *)&v156, &v153, &__p, v135, a5, 0.0, 0.0);
  if (__p)
    operator delete(__p);
  if (v153)
    operator delete(v153);
  if (v156)
    operator delete(v156);
}

void sub_207D6D0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)(v28 - 128);
  if (!v30)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v28 - 120) = v30;
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

void sub_207D6D15C(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, float a6, float a7, float a8)
{
  _QWORD *v8;
  float32x2_t v13;
  float32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float64x2_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  float64x2_t *v26;
  char *v27;
  unint64_t v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float64x2_t *v36;
  unint64_t v37;
  _BYTE *v38;
  double *v39;
  int64_t v40;
  unint64_t v41;
  float64x2_t *v42;
  float64_t v43;
  uint64_t v44;
  unint64_t v45;
  float64x2_t *v46;
  unint64_t v47;
  _BYTE *v48;
  double *v49;
  int64_t v50;
  unint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _QWORD *v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _QWORD *v79;
  int64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  _QWORD *v91;
  int64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  uint64_t v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  __int128 *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  double *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 *v129;
  uint64_t v130;
  __int128 v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  float64x2_t v136;
  float32x2_t v137;
  float64x2_t v138;
  uint64_t v139;
  float64x2_t v140;
  float64x2_t v141;
  int32x2_t v142;
  int8x16_t v143;
  float64x2_t v144;
  float32x2_t v145;
  unsigned int v146;
  unsigned int v147;
  float32x2_t v148;
  __int128 v149;
  int8x16_t v150;
  int8x16_t v154;
  float v156;
  int *v157;
  unint64_t v158;
  int8x16_t v159;
  float32x2_t v160;
  uint64_t v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float v165;
  float v166;
  int v167;
  double *v168;
  float32x2_t v169;
  double v170;
  double v171;
  float32x4_t v172;
  int8x16_t v173;
  float v174;
  float v175;
  uint64_t v176;
  float v177;
  float v178;
  _BYTE *v180;
  uint64_t v182;
  _QWORD *v183;
  float64x2_t v185;
  float64x2_t v186;
  unint64_t v188;
  uint64_t v189;
  int8x16_t v190;
  uint64_t v191;
  float32x4_t v192;
  float64x2_t *v193;
  int8x16_t v194;
  float32x2_t v195;
  float64x2_t *v196;
  __int128 v197;
  void *v198;
  _BYTE *v199;
  uint64_t v200;
  void *__p;
  void *v202;
  float64_t v203;
  double v204;
  float64_t v205;
  float64_t v206;
  float64_t v207;
  double v208;
  uint64_t v209;
  float64_t v210;
  double v211;
  double v212;
  _BYTE v213[32];
  void *v214;
  void *v215;
  char *v216;
  char *v217;
  unint64_t v218;
  float64x2_t *v219;
  float64x2_t *v220;
  float64x2_t *v221;

  v8 = a4;
  v13 = *(float32x2_t *)a5;
  v13.i32[1] = *(_DWORD *)(a5 + 16);
  v195 = v13;
  v14 = *(float32x2_t *)(a5 + 24);
  v16 = *a4;
  v15 = a4[1];
  v17 = v15 - *a4;
  v18 = v17 >> 3;
  v19 = (v17 >> 3) + (v17 >> 2);
  if (v19 != (a2[1] - *a2) >> 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 259, (uint64_t)"keypoints_3d.size() == 3 * num_pts", 34, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| v17 >> 2 != (uint64_t)(a3[1] - *a3) >> 3&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 260, (uint64_t)"keypoints_2d.size() == 2 * num_pts", 34, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v219 = 0;
  v220 = 0;
  v221 = 0;
  v182 = a1;
  v185 = vcvtq_f64_f32(vneg_f32(v14));
  v186 = vcvtq_f64_f32(v195);
  if (v15 != v16)
  {
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_207CA420C();
    v219 = (float64x2_t *)operator new(2 * v17);
    v220 = v219;
    v193 = v219;
    v20 = (float64x2_t *)((char *)v219 + 8 * (v17 >> 2));
    v221 = v20;
    v216 = 0;
    v217 = 0;
    v218 = 0;
    if (v19 >> 61)
      sub_207CA420C();
    v21 = operator new(24 * v18);
    v22 = v21;
    v23 = 0;
    v217 = (char *)v21;
    v24 = a6;
    if (v18 <= 1)
      v25 = 1;
    else
      v25 = v18;
    v191 = v25;
    v26 = v219;
    v27 = (char *)v21;
    v28 = (unint64_t)&v21[v19];
    v183 = v8;
    while (1)
    {
      if (*(double *)(*v8 + 8 * v23) <= v24)
        goto LABEL_14;
      v29 = *(double *)(*a3 + 16 * v23 + 8);
      v30 = (*(double *)(*a3 + 16 * v23) + v185.f64[0]) / v186.f64[0];
      v188 = v28;
      if (v193 < v20)
      {
        v193->f64[0] = v30;
        v31 = &v193->f64[1];
        v220 = (float64x2_t *)&v193->f64[1];
        v32 = (v29 + v185.f64[1]) / v186.f64[1];
        if ((float64x2_t *)&v193->f64[1] < v20)
          goto LABEL_18;
        goto LABEL_36;
      }
      v34 = ((char *)v193 - (char *)v26) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
      {
        v221 = v20;
        v218 = v28;
        v219 = v26;
        v216 = v27;
        sub_207CA420C();
      }
      v36 = v20;
      if (((char *)v20 - (char *)v26) >> 2 > v35)
        v35 = ((char *)v20 - (char *)v26) >> 2;
      if ((unint64_t)((char *)v20 - (char *)v26) >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
        {
          v221 = v36;
          v218 = v28;
          v219 = v26;
          v216 = v27;
          sub_207CA3AB8();
        }
        v38 = operator new(8 * v37);
        v39 = (double *)&v38[8 * v34];
        *v39 = v30;
        v31 = v39 + 1;
        v40 = (char *)v193 - (char *)v26;
        if (v193 == v26)
          goto LABEL_33;
      }
      else
      {
        v38 = 0;
        v39 = (double *)(8 * v34);
        *(double *)(8 * v34) = v30;
        v31 = (double *)(8 * v34 + 8);
        v40 = (char *)v193 - (char *)v26;
        if (v193 == v26)
          goto LABEL_33;
      }
      v41 = v40 - 8;
      if (v41 < 0x168)
      {
        v42 = v193;
        goto LABEL_32;
      }
      v97 = ((char *)&v193[-1].f64[1] - (char *)v26) & 0xFFFFFFFFFFFFFFF8;
      if (&v38[(char *)v193 - (char *)v26 - 8 - v97] > &v38[(char *)v193 - (char *)v26 - 8])
      {
        v42 = v193;
        do
        {
LABEL_32:
          v43 = v42[-1].f64[1];
          v42 = (float64x2_t *)((char *)v42 - 8);
          *--v39 = v43;
        }
        while (v42 != v26);
        goto LABEL_33;
      }
      if ((char *)&v193[-1].f64[1] - v97 > (char *)&v193[-1].f64[1])
      {
        v42 = v193;
        goto LABEL_32;
      }
      if ((unint64_t)((char *)v26 - v38) < 0x20)
      {
        v42 = v193;
        goto LABEL_32;
      }
      v114 = (v41 >> 3) + 1;
      v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
      v42 = (float64x2_t *)((char *)v193 - v115);
      v39 = (double *)((char *)v39 - v115);
      v116 = &v38[8 * v34 - 16];
      v117 = (__int128 *)&v193[-1];
      v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v119 = *v117;
        *(v116 - 1) = *(v117 - 1);
        *v116 = v119;
        v116 -= 2;
        v117 -= 2;
        v118 -= 4;
      }
      while (v118);
      if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_32;
LABEL_33:
      v20 = (float64x2_t *)&v38[8 * v37];
      if (v26)
        operator delete(v26);
      v26 = (float64x2_t *)v39;
      v28 = v188;
      v220 = (float64x2_t *)v31;
      v32 = (v29 + v185.f64[1]) / v186.f64[1];
      if (v31 < (double *)v20)
      {
LABEL_18:
        *v31 = v32;
        v33 = (uint64_t)(v31 + 1);
        goto LABEL_53;
      }
LABEL_36:
      v44 = ((char *)v31 - (char *)v26) >> 3;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 61)
      {
        v221 = v20;
        v218 = v28;
        v219 = v26;
        v216 = v27;
        sub_207CA420C();
      }
      v46 = v20;
      if (((char *)v20 - (char *)v26) >> 2 > v45)
        v45 = ((char *)v20 - (char *)v26) >> 2;
      if ((unint64_t)((char *)v20 - (char *)v26) >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        if (v47 >> 61)
        {
          v221 = v46;
          v218 = v188;
          v219 = v26;
          v216 = v27;
          sub_207CA3AB8();
        }
        v48 = operator new(8 * v47);
        v49 = (double *)&v48[8 * v44];
        *v49 = v32;
        v33 = (uint64_t)(v49 + 1);
        v50 = (char *)v31 - (char *)v26;
        if (v31 == (double *)v26)
          goto LABEL_50;
      }
      else
      {
        v48 = 0;
        v49 = (double *)(8 * v44);
        *(double *)(8 * v44) = v32;
        v33 = 8 * v44 + 8;
        v50 = (char *)v31 - (char *)v26;
        if (v31 == (double *)v26)
          goto LABEL_50;
      }
      v51 = v50 - 8;
      if (v51 >= 0x168)
      {
        v98 = ((char *)(v31 - 1) - (char *)v26) & 0xFFFFFFFFFFFFFFF8;
        if (&v48[(char *)v31 - (char *)v26 - 8 - v98] > &v48[(char *)v31 - (char *)v26 - 8])
        {
          v52 = v31;
        }
        else if ((double *)((char *)v31 - v98 - 8) > v31 - 1)
        {
          v52 = v31;
        }
        else if ((unint64_t)((char *)v26 - v48) >= 0x20)
        {
          v120 = (v51 >> 3) + 1;
          v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
          v52 = &v31[v121 / 0xFFFFFFFFFFFFFFF8];
          v49 = (double *)((char *)v49 - v121);
          v122 = &v48[8 * v44 - 16];
          v123 = v31 - 2;
          v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v125 = *(_OWORD *)v123;
            *(v122 - 1) = *((_OWORD *)v123 - 1);
            *v122 = v125;
            v122 -= 2;
            v123 -= 4;
            v124 -= 4;
          }
          while (v124);
          if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_50;
        }
        else
        {
          v52 = v31;
        }
      }
      else
      {
        v52 = v31;
      }
      do
      {
        v53 = *((_QWORD *)v52-- - 1);
        *((_QWORD *)v49-- - 1) = v53;
      }
      while (v52 != (double *)v26);
LABEL_50:
      v20 = (float64x2_t *)&v48[8 * v47];
      if (v26)
        operator delete(v26);
      v26 = (float64x2_t *)v49;
      v28 = v188;
LABEL_53:
      v220 = (float64x2_t *)v33;
      v54 = 3 * v23;
      v55 = *a2;
      v193 = (float64x2_t *)v33;
      v196 = v20;
      if ((unint64_t)v22 < v28)
      {
        *v22 = *(_QWORD *)(v55 + 24 * v23);
        v56 = v22 + 1;
        v217 = (char *)(v22 + 1);
        v57 = v54 + 1;
        if ((unint64_t)(v22 + 1) < v28)
          goto LABEL_55;
        goto LABEL_74;
      }
      v60 = ((char *)v22 - v27) >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
      {
        v221 = v20;
LABEL_199:
        v218 = v28;
        v219 = v26;
        v216 = v27;
        sub_207CA420C();
      }
      if ((uint64_t)(v28 - (_QWORD)v27) >> 2 > v61)
        v61 = (uint64_t)(v28 - (_QWORD)v27) >> 2;
      if (v28 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
      {
        v63 = v28;
        if (v62 >> 61)
          goto LABEL_195;
        v64 = *a2;
        v65 = v62;
        v66 = operator new(8 * v62);
        v55 = v64;
        v54 = 3 * v23;
        v62 = v65;
        v67 = &v66[8 * v60];
        *v67 = *(_QWORD *)(v55 + 24 * v23);
        v56 = v67 + 1;
        v68 = (char *)v22 - v27;
        if (v22 == (_QWORD *)v27)
          goto LABEL_71;
      }
      else
      {
        v66 = 0;
        v67 = (_QWORD *)(8 * v60);
        *(_QWORD *)(8 * v60) = *(_QWORD *)(v55 + 24 * v23);
        v56 = (_QWORD *)(8 * v60 + 8);
        v68 = (char *)v22 - v27;
        if (v22 == (_QWORD *)v27)
          goto LABEL_71;
      }
      v69 = v68 - 8;
      if (v69 < 0x168)
      {
        v70 = (char *)v22;
        goto LABEL_70;
      }
      v99 = ((char *)(v22 - 1) - v27) & 0xFFFFFFFFFFFFFFF8;
      if (&v66[(char *)v22 - v27 - 8 - v99] > &v66[(char *)v22 - v27 - 8])
      {
        v70 = (char *)v22;
        do
        {
LABEL_70:
          v71 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *--v67 = v71;
        }
        while (v70 != v27);
        goto LABEL_71;
      }
      if ((_QWORD *)((char *)v22 - v99 - 8) > v22 - 1)
      {
        v70 = (char *)v22;
        goto LABEL_70;
      }
      if ((unint64_t)(v27 - v66) < 0x20)
      {
        v70 = (char *)v22;
        goto LABEL_70;
      }
      v126 = (v69 >> 3) + 1;
      v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
      v70 = (char *)&v22[v127 / 0xFFFFFFFFFFFFFFF8];
      v67 = (_QWORD *)((char *)v67 - v127);
      v128 = &v66[8 * v60 - 16];
      v129 = (__int128 *)(v22 - 2);
      v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v131 = *v129;
        *(v128 - 1) = *(v129 - 1);
        *v128 = v131;
        v128 -= 2;
        v129 -= 2;
        v130 -= 4;
      }
      while (v130);
      if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_70;
LABEL_71:
      v28 = (unint64_t)&v66[8 * v62];
      if (v27)
      {
        v72 = v54;
        v73 = &v66[8 * v62];
        operator delete(v27);
        v28 = (unint64_t)v73;
        v54 = v72;
        v55 = *a2;
      }
      v27 = (char *)v67;
      v217 = (char *)v56;
      v57 = v54 + 1;
      if ((unint64_t)v56 < v28)
      {
LABEL_55:
        *v56 = *(_QWORD *)(v55 + 8 * v57);
        v58 = v56 + 1;
        v20 = v196;
        v217 = (char *)v58;
        v59 = v54 + 2;
        if ((unint64_t)v58 >= v28)
          goto LABEL_89;
        goto LABEL_12;
      }
LABEL_74:
      v74 = ((char *)v56 - v27) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        goto LABEL_194;
      v189 = v54;
      if ((uint64_t)(v28 - (_QWORD)v27) >> 2 > v75)
        v75 = (uint64_t)(v28 - (_QWORD)v27) >> 2;
      if (v28 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v75;
      if (v76)
      {
        v63 = v28;
        if (v76 >> 61)
          goto LABEL_195;
        v77 = v55;
        v78 = operator new(8 * v76);
        v55 = v77;
        v79 = &v78[8 * v74];
        *v79 = *(_QWORD *)(v55 + 8 * v57);
        v58 = v79 + 1;
        v80 = (char *)v56 - v27;
        if (v56 != (_QWORD *)v27)
        {
LABEL_83:
          v81 = v80 - 8;
          if (v81 < 0x168
            || (v100 = ((char *)(v56 - 1) - v27) & 0xFFFFFFFFFFFFFFF8,
                &v78[(char *)v56 - v27 - 8 - v100] > &v78[(char *)v56 - v27 - 8])
            || (_QWORD *)((char *)v56 - v100 - 8) > v56 - 1
            || (unint64_t)(v27 - v78) < 0x20)
          {
            v82 = (char *)v56;
            v20 = v196;
          }
          else
          {
            v101 = (v81 >> 3) + 1;
            v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
            v82 = (char *)&v56[v102 / 0xFFFFFFFFFFFFFFF8];
            v79 = (_QWORD *)((char *)v79 - v102);
            v103 = &v78[8 * v74 - 16];
            v104 = (__int128 *)(v56 - 2);
            v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v106 = *v104;
              *(v103 - 1) = *(v104 - 1);
              *v103 = v106;
              v103 -= 2;
              v104 -= 2;
              v105 -= 4;
            }
            while (v105);
            v20 = v196;
            if (v101 == (v101 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_86:
              v28 = (unint64_t)&v78[8 * v76];
              if (!v27)
                goto LABEL_88;
LABEL_87:
              v84 = v28;
              operator delete(v27);
              v28 = v84;
              v55 = *a2;
              goto LABEL_88;
            }
          }
          do
          {
            v83 = *((_QWORD *)v82 - 1);
            v82 -= 8;
            *--v79 = v83;
          }
          while (v82 != v27);
          goto LABEL_86;
        }
      }
      else
      {
        v78 = 0;
        v79 = (_QWORD *)(8 * v74);
        *(_QWORD *)(8 * v74) = *(_QWORD *)(v55 + 8 * v57);
        v58 = (_QWORD *)(8 * v74 + 8);
        v80 = (char *)v56 - v27;
        if (v56 != (_QWORD *)v27)
          goto LABEL_83;
      }
      v20 = v196;
      v28 = (unint64_t)&v78[8 * v76];
      if (v27)
        goto LABEL_87;
LABEL_88:
      v27 = (char *)v79;
      v217 = (char *)v58;
      v59 = v189 + 2;
      if ((unint64_t)v58 >= v28)
      {
LABEL_89:
        v85 = ((char *)v58 - v27) >> 3;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61)
        {
LABEL_194:
          v221 = v196;
          goto LABEL_199;
        }
        if ((uint64_t)(v28 - (_QWORD)v27) >> 2 > v86)
          v86 = (uint64_t)(v28 - (_QWORD)v27) >> 2;
        if (v28 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v87 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v87 = v86;
        if (v87)
        {
          v63 = v28;
          if (v87 >> 61)
          {
LABEL_195:
            v221 = v196;
            v218 = v63;
            v219 = v26;
            v216 = v27;
            sub_207CA3AB8();
          }
          v88 = v55;
          v89 = operator new(8 * v87);
          v90 = v88;
          v91 = &v89[8 * v85];
          *v91 = *(_QWORD *)(v90 + 8 * v59);
          v22 = v91 + 1;
          v92 = (char *)v58 - v27;
          if (v58 != (_QWORD *)v27)
          {
LABEL_98:
            v93 = v92 - 8;
            if (v93 < 0x168
              || (v107 = ((char *)(v58 - 1) - v27) & 0xFFFFFFFFFFFFFFF8,
                  &v89[(char *)v58 - v27 - 8 - v107] > &v89[(char *)v58 - v27 - 8])
              || (_QWORD *)((char *)v58 - v107 - 8) > v58 - 1
              || (unint64_t)(v27 - v89) < 0x20)
            {
              v94 = (char *)v58;
              v8 = v183;
            }
            else
            {
              v108 = (v93 >> 3) + 1;
              v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
              v94 = (char *)&v58[v109 / 0xFFFFFFFFFFFFFFF8];
              v91 = (_QWORD *)((char *)v91 - v109);
              v110 = &v89[8 * v85 - 16];
              v111 = (__int128 *)(v58 - 2);
              v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v113 = *v111;
                *(v110 - 1) = *(v111 - 1);
                *v110 = v113;
                v110 -= 2;
                v111 -= 2;
                v112 -= 4;
              }
              while (v112);
              v8 = v183;
              if (v108 == (v108 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_101:
                v28 = (unint64_t)&v89[8 * v87];
                if (v27)
                  goto LABEL_102;
                goto LABEL_103;
              }
            }
            do
            {
              v95 = *((_QWORD *)v94 - 1);
              v94 -= 8;
              *--v91 = v95;
            }
            while (v94 != v27);
            goto LABEL_101;
          }
        }
        else
        {
          v89 = 0;
          v91 = (_QWORD *)(8 * v85);
          *(_QWORD *)(8 * v85) = *(_QWORD *)(v55 + 8 * v59);
          v22 = (_QWORD *)(8 * v85 + 8);
          v92 = (char *)v58 - v27;
          if (v58 != (_QWORD *)v27)
            goto LABEL_98;
        }
        v8 = v183;
        v28 = (unint64_t)&v89[8 * v87];
        if (v27)
        {
LABEL_102:
          v96 = v28;
          operator delete(v27);
          v28 = v96;
        }
LABEL_103:
        v27 = (char *)v91;
        v20 = v196;
        goto LABEL_13;
      }
LABEL_12:
      *v58 = *(_QWORD *)(v55 + 8 * v59);
      v22 = v58 + 1;
      v8 = v183;
LABEL_13:
      v217 = (char *)v22;
LABEL_14:
      if (++v23 == v191)
        goto LABEL_155;
    }
  }
  v193 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v20 = 0;
  v217 = 0;
  v218 = 0;
LABEL_155:
  v221 = v20;
  v218 = v28;
  v219 = v26;
  v216 = v27;
  v132 = operator new(8uLL);
  if ((unint64_t)((char *)v193 - (char *)v26) < 0x10)
    v133 = 1;
  else
    v133 = (unint64_t)(((char *)v193 - (char *)v26) >> 3) >> 1;
  __p = v132;
  *v132 = 4;
  v134 = v132 + 1;
  if ((((unint64_t)(((char *)v193 - (char *)v26) >> 3) >> 1) - 1)
     * ((unint64_t)(((char *)v193 - (char *)v26) >> 3) >> 1)
     * (((unint64_t)(((char *)v193 - (char *)v26) >> 3) >> 1) - 2)
     / 0xC <= 0xF)
    v135 = 15;
  else
    v135 = (((unint64_t)(((char *)v193 - (char *)v26) >> 3) >> 1) - 1)
         * ((unint64_t)(((char *)v193 - (char *)v26) >> 3) >> 1)
         * (((unint64_t)(((char *)v193 - (char *)v26) >> 3) >> 1) - 2)
         / 0xC;
  v202 = v134;
  v203 = *(double *)&v134;
  sub_207D954BC((uint64_t)v213, v135, 2 * v135, v133, (uint64_t)&__p, 1, 2.0, v186.f64[0]);
  if (__p)
  {
    v202 = __p;
    operator delete(__p);
  }
  v198 = 0;
  v199 = 0;
  v200 = 0;
  if ((sub_20811B8AC((uint64_t)v213, &v219, (uint64_t *)&v216, (uint64_t)&__p, &v198, 0, 0, v136) & 1) == 0)
  {
    *(_OWORD *)v182 = 0u;
    *(_OWORD *)(v182 + 16) = 0u;
    *(_OWORD *)(v182 + 32) = 0u;
    *(_OWORD *)(v182 + 48) = 0u;
    *(_DWORD *)(v182 + 4) = 1065353216;
    *(_DWORD *)(v182 + 24) = 1065353216;
    *(_DWORD *)(v182 + 44) = 1065353216;
    *(_DWORD *)(v182 + 64) = 1065353216;
    v180 = v198;
    if (!v198)
      goto LABEL_185;
    goto LABEL_184;
  }
  *(_QWORD *)&v138.f64[0] = __p;
  v141.f64[0] = v203;
  v138.f64[1] = v205;
  v139 = v209;
  *(_QWORD *)&v144.f64[1] = v202;
  v140.f64[0] = v206;
  v140.f64[1] = v210;
  v141.f64[1] = v207;
  v142 = (int32x2_t)vcvt_f32_f64(v140);
  v143 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v138), v144);
  v148 = vcvt_f32_f64(v144);
  *(float32x2_t *)&v144.f64[0] = vcvt_f32_f64(v141);
  v145.i32[1] = HIDWORD(v211);
  v145.f32[0] = v211;
  *(float *)&v146 = v204;
  *(float *)&v147 = v208;
  *(_QWORD *)&v149 = __PAIR64__(v142.u32[0], v148.u32[1]);
  v148.f32[0] = v212;
  *((_QWORD *)&v149 + 1) = v142.u32[1];
  v150 = v143;
  v150.i32[3] = 0;
  __asm { FMOV            V29.4S, #1.0 }
  v154 = (int8x16_t)v144;
  v154.i32[2] = v145.i32[0];
  _Q29.i64[0] = __PAIR64__(v147, v146);
  _Q29.i32[2] = v148.i32[0];
  v156 = 1.0;
  if (a7 >= 0.0)
  {
    v157 = (int *)v198;
    v158 = (v199 - (_BYTE *)v198) >> 2;
    if (v199 == v198)
    {
      v166 = 0.0;
      v165 = 0.0;
      v175 = 1.0;
      if (a7 <= 0.0)
        goto LABEL_175;
    }
    else
    {
      v159 = (int8x16_t)vcvt_hight_f32_f64(v142, v141);
      v160 = (float32x2_t)vextq_s8(v143, v159, 0xCuLL).u64[0];
      if (v158 <= 1)
        v161 = 1;
      else
        v161 = (v199 - (_BYTE *)v198) >> 2;
      v162 = (float32x2_t)vextq_s8(v143, v143, 8uLL).u64[0];
      v163 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.i8, 1);
      v164 = (float32x2_t)vextq_s8(v154, v154, 8uLL).u64[0];
      v165 = 0.0;
      v166 = 0.0;
      do
      {
        v167 = *v157++;
        v168 = (double *)&v216[24 * v167];
        v169 = *(float32x2_t *)v168;
        v170 = v168[1];
        v169.f32[0] = *v168;
        *(float *)&v170 = v170;
        v171 = v168[2];
        *(float *)&v171 = v171;
        *(float32x2_t *)v172.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v143.i8, v169.f32[0]), v160, *(float *)&v170), *(float32x2_t *)&v144.f64[0], *(float *)&v171);
        *(float32x2_t *)&v172.u32[2] = vmla_f32(vmla_f32(vmul_f32(v162, v169), *(float32x2_t *)&v170, v163), *(float32x2_t *)&v171, v164);
        v173 = (int8x16_t)vaddq_f32(_Q29, v172);
        v137.i32[0] = *(_DWORD *)(a5 + 32);
        v148.i32[0] = *(_DWORD *)(a5 + 8);
        v145.i32[0] = *(_DWORD *)(a5 + 20);
        *(float32x2_t *)v173.i8 = vsub_f32(vcvt_f32_f64(vsubq_f64(vmulq_f64(v219[v167], v186), v185)), vdiv_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a5, *(float *)v173.i32), *(float32x2_t *)(a5 + 12), *(float32x2_t *)v173.i8, 1), *(float32x2_t *)(a5 + 24), (float32x4_t)v173, 2), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v148, *(float32x2_t *)v173.i8), v145, *(float32x2_t *)v173.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL),
                                                                  v137),
                                                     0)));
        v174 = sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v173.i8, *(float32x2_t *)v173.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.i8, 1), *(float32x2_t *)v173.i8, 1).f32[0]);
        v166 = v166 + v174;
        if (v174 > v165)
          v165 = v174;
        --v161;
      }
      while (v161);
      v175 = 1.0;
      if (a7 <= 0.0)
        goto LABEL_175;
    }
    v176 = (uint64_t)(v8[2] - *v8) >> 3;
    v177 = (float)v158;
    v194 = v150;
    v197 = v149;
    v190 = v154;
    v192 = _Q29;
    v178 = expf((float)-(float)((float)(v166 / (float)v158) * (float)(v166 / (float)v158)) / (float)(a7 * a7));
    v154 = v190;
    _Q29 = v192;
    v150 = v194;
    v149 = v197;
    v175 = (float)(v178 * v177) / (float)(unint64_t)v176;
LABEL_175:
    if (v165 <= a8 || a8 == 0.0)
      v156 = v175;
    else
      v156 = 0.0;
  }
  *(float *)v182 = v156;
  *(int8x16_t *)(v182 + 4) = v150;
  *(_OWORD *)(v182 + 20) = v149;
  *(int8x16_t *)(v182 + 36) = v154;
  *(float32x4_t *)(v182 + 52) = _Q29;
  v180 = v198;
  if (v198)
  {
LABEL_184:
    v199 = v180;
    operator delete(v180);
  }
LABEL_185:
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
}

void sub_207D6DF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  uint64_t v48;
  void *v50;
  void *v51;

  if (__p)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  v50 = *(void **)(v48 - 200);
  if (v50)
  {
    *(_QWORD *)(v48 - 192) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v48 - 176);
  if (v51)
  {
    *(_QWORD *)(v48 - 168) = v51;
    operator delete(v51);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D6E060(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  unint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  char *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  double *v62;
  double *v63;
  double *v64;
  double *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  double *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  _OWORD *v75;
  double *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  float *v80;
  double *v81;
  double *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  double *v87;
  unint64_t v88;
  double *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  double *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  float *v100;
  double *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  double *v106;
  unint64_t v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  double *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  _BOOL4 v139;
  char *v142;
  char *v143;
  char *v144;
  unint64_t v145;
  _QWORD v146[3];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *__p;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  unint64_t v155;
  double *v156;
  double *v157;
  double *v158;

  v8 = *((unsigned int *)a1 + 2);
  v9 = *((unsigned int *)a1 + 3);
  v10 = *((unsigned int *)a1 + 4);
  if (*a2 != v10
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 330, (uint64_t)"c == model_keypoints3D.size()", 29, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v134 = a4;
  v135 = a3;
  if ((_DWORD)v10)
  {
    v11 = (2 * v10);
    v156 = (double *)operator new(8 * (3 * v10));
    v157 = v156;
    v158 = &v156[(3 * v10)];
    v153 = 0;
    v154 = 0;
    v155 = 0;
    if ((_DWORD)v11)
    {
      v12 = (char *)operator new(8 * v11);
      v153 = v12;
      v154 = v12;
      v145 = (unint64_t)&v12[8 * v11];
      v155 = v145;
    }
    else
    {
      v145 = 0;
      v12 = 0;
    }
    v13 = (char *)operator new(8 * v10);
    v14 = 0;
    __p = v13;
    v151 = v13;
    v15 = v8 != 0;
    v144 = &v13[8 * v10];
    v152 = v144;
    if (!(_DWORD)v9)
      v15 = 0;
    v139 = v15;
    if ((_DWORD)v9)
      v16 = (_DWORD)v8 == 0;
    else
      v16 = 1;
    v17 = v8 | (v9 << 32);
    if (v16)
      v17 = 0;
    v138 = v17;
    v136 = v10;
    v137 = HIDWORD(v17);
    v18 = v12;
    while (1)
    {
      v148 = 0;
      v149 = 0;
      v147 = 0;
      v21 = *((_DWORD *)a1 + 7);
      v22 = *a1;
      v23 = *(uint64_t *)((char *)a1 + 20);
      v24 = v139;
      if (v21 != -1)
        v24 = 0;
      if (v24
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v146[0] = v22 + 2 * (v21 * v14);
      v146[1] = v138;
      v146[2] = v23;
      if (HIDWORD(v23) * (_DWORD)v137 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      sub_207D5D684((uint64_t)v146, (double *)&v149, (double *)&v148, &v147);
      v25 = (char *)v145;
      if ((unint64_t)v18 < v145)
      {
        *(_QWORD *)v18 = v149;
        v26 = v18 + 8;
        v154 = v18 + 8;
        if ((unint64_t)(v18 + 8) < v145)
          goto LABEL_33;
        goto LABEL_52;
      }
      v28 = (v18 - v12) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_185;
      if ((uint64_t)(v145 - (_QWORD)v12) >> 2 > v29)
        v29 = (uint64_t)(v145 - (_QWORD)v12) >> 2;
      if (v145 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        if (v30 >> 61)
          goto LABEL_184;
        v31 = operator new(8 * v30);
        v32 = &v31[8 * v28];
        *(_QWORD *)v32 = v149;
        v26 = v32 + 8;
        v33 = v18 - v12;
        if (v18 == v12)
          goto LABEL_49;
      }
      else
      {
        v31 = 0;
        v32 = (char *)(8 * v28);
        *(_QWORD *)(8 * v28) = v149;
        v26 = (char *)(8 * v28 + 8);
        v33 = v18 - v12;
        if (v18 == v12)
          goto LABEL_49;
      }
      v34 = v33 - 8;
      if (v34 < 0x168)
      {
        v35 = v18;
        goto LABEL_48;
      }
      v90 = (v18 - 8 - v12) & 0xFFFFFFFFFFFFFFF8;
      if (&v31[v18 - v12 - 8 - v90] > &v31[v18 - v12 - 8])
      {
        v35 = v18;
        do
        {
LABEL_48:
          v36 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *((_QWORD *)v32 - 1) = v36;
          v32 -= 8;
        }
        while (v35 != v12);
        goto LABEL_49;
      }
      if (&v18[-v90 - 8] > v18 - 8)
      {
        v35 = v18;
        goto LABEL_48;
      }
      if ((unint64_t)(v12 - v31) < 0x20)
      {
        v35 = v18;
        goto LABEL_48;
      }
      v116 = (v34 >> 3) + 1;
      v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
      v35 = &v18[-v117];
      v32 -= v117;
      v118 = &v31[8 * v28 - 16];
      v119 = v18 - 16;
      v120 = v116 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v121 = *(_OWORD *)v119;
        *(v118 - 1) = *((_OWORD *)v119 - 1);
        *v118 = v121;
        v118 -= 2;
        v119 -= 32;
        v120 -= 4;
      }
      while (v120);
      if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_48;
LABEL_49:
      v25 = &v31[8 * v30];
      v153 = v32;
      v154 = v26;
      v155 = (unint64_t)v25;
      if (v12)
      {
        operator delete(v12);
        v25 = (char *)v155;
      }
      v12 = v32;
      v154 = v26;
      if (v26 < v25)
      {
LABEL_33:
        *(_QWORD *)v26 = v148;
        v143 = v26 + 8;
        v154 = v26 + 8;
        v145 = (unint64_t)v25;
        if (v13 < v144)
          goto LABEL_34;
        goto LABEL_69;
      }
LABEL_52:
      v37 = (v26 - v12) >> 3;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61)
        goto LABEL_185;
      if ((v25 - v12) >> 2 > v38)
        v38 = (v25 - v12) >> 2;
      if ((unint64_t)(v25 - v12) >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
      {
        if (v39 >> 61)
          goto LABEL_184;
        v40 = operator new(8 * v39);
        v41 = &v40[8 * v37];
        *(_QWORD *)v41 = v148;
        v42 = (uint64_t)(v41 + 8);
        v43 = v26 - v12;
        if (v26 == v12)
          goto LABEL_66;
      }
      else
      {
        v40 = 0;
        v41 = (char *)(8 * v37);
        *(_QWORD *)(8 * v37) = v148;
        v42 = 8 * v37 + 8;
        v43 = v26 - v12;
        if (v26 == v12)
          goto LABEL_66;
      }
      v44 = v43 - 8;
      if (v44 < 0x168)
      {
        v45 = v26;
        goto LABEL_65;
      }
      v91 = (v26 - 8 - v12) & 0xFFFFFFFFFFFFFFF8;
      if (&v40[v26 - v12 - 8 - v91] > &v40[v26 - v12 - 8])
      {
        v45 = v26;
        do
        {
LABEL_65:
          v46 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *((_QWORD *)v41 - 1) = v46;
          v41 -= 8;
        }
        while (v45 != v12);
        goto LABEL_66;
      }
      if (&v26[-v91 - 8] > v26 - 8)
      {
        v45 = v26;
        goto LABEL_65;
      }
      if ((unint64_t)(v12 - v40) < 0x20)
      {
        v45 = v26;
        goto LABEL_65;
      }
      v122 = (v44 >> 3) + 1;
      v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
      v45 = &v26[-v123];
      v41 -= v123;
      v124 = &v40[8 * v37 - 16];
      v125 = v26 - 16;
      v126 = v122 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v127 = *(_OWORD *)v125;
        *(v124 - 1) = *((_OWORD *)v125 - 1);
        *v124 = v127;
        v124 -= 2;
        v125 -= 32;
        v126 -= 4;
      }
      while (v126);
      if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_65;
LABEL_66:
      v47 = &v40[8 * v39];
      v153 = v41;
      v154 = (char *)v42;
      v155 = (unint64_t)v47;
      if (v12)
        operator delete(v12);
      v12 = v41;
      v143 = (char *)v42;
      v154 = (char *)v42;
      v145 = (unint64_t)v47;
      if (v13 < v144)
      {
LABEL_34:
        *(_QWORD *)v13 = v147;
        v27 = v13 + 8;
        goto LABEL_86;
      }
LABEL_69:
      v48 = (char *)__p;
      v49 = v13 - (_BYTE *)__p;
      v50 = (v13 - (_BYTE *)__p) >> 3;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 61)
        goto LABEL_185;
      if ((v144 - (_BYTE *)__p) >> 2 > v51)
        v51 = (v144 - (_BYTE *)__p) >> 2;
      if ((unint64_t)(v144 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
      {
        if (v52 >> 61)
          goto LABEL_184;
        v53 = operator new(8 * v52);
        v54 = &v53[8 * v50];
        *v54 = v147;
        v55 = (uint64_t)(v54 + 1);
        v56 = v13 - v48;
        if (v13 == v48)
          goto LABEL_83;
      }
      else
      {
        v53 = 0;
        v54 = (_QWORD *)(8 * v50);
        *(_QWORD *)(8 * v50) = v147;
        v55 = 8 * v50 + 8;
        v56 = v13 - v48;
        if (v13 == v48)
          goto LABEL_83;
      }
      v57 = v56 - 8;
      if (v57 >= 0x168)
      {
        v92 = (v13 - 8 - v48) & 0xFFFFFFFFFFFFFFF8;
        if (&v53[v49 - 8 - v92] > &v53[v49 - 8])
        {
          v58 = v13;
        }
        else if (&v13[-v92 - 8] > v13 - 8)
        {
          v58 = v13;
        }
        else if ((unint64_t)(v13 - v53 - v49) >= 0x20)
        {
          v128 = (v57 >> 3) + 1;
          v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v13[-v129];
          v54 = (_QWORD *)((char *)v54 - v129);
          v130 = &v53[8 * v50 - 16];
          v131 = (__int128 *)(v13 - 16);
          v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v133 = *v131;
            *(v130 - 1) = *(v131 - 1);
            *v130 = v133;
            v130 -= 2;
            v131 -= 2;
            v132 -= 4;
          }
          while (v132);
          if (v128 == (v128 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_83;
        }
        else
        {
          v58 = v13;
        }
      }
      else
      {
        v58 = v13;
      }
      do
      {
        v59 = *((_QWORD *)v58 - 1);
        v58 -= 8;
        *--v54 = v59;
      }
      while (v58 != v48);
LABEL_83:
      __p = v54;
      v144 = &v53[8 * v52];
      v152 = v144;
      if (v48)
        operator delete(v48);
      v27 = (char *)v55;
LABEL_86:
      v142 = v27;
      v151 = v27;
      v60 = a2[1];
      v61 = (float *)(v60 + 12 * v14);
      v62 = v157;
      v63 = v158;
      if (v157 >= v158)
      {
        v65 = v156;
        v66 = v157 - v156;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
          goto LABEL_185;
        if (((char *)v158 - (char *)v156) >> 2 > v67)
          v67 = ((char *)v158 - (char *)v156) >> 2;
        if ((unint64_t)((char *)v158 - (char *)v156) >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          if (v68 >> 61)
            goto LABEL_184;
          v69 = operator new(8 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = (double *)&v69[8 * v66];
        *v70 = *v61;
        v64 = v70 + 1;
        if (v62 != v65)
        {
          v71 = (char *)v62 - (char *)v65 - 8;
          if (v71 < 0x58)
            goto LABEL_191;
          if ((unint64_t)((char *)v65 - v69) < 0x20)
            goto LABEL_191;
          v72 = (v71 >> 3) + 1;
          v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v62[v73 / 0xFFFFFFFFFFFFFFF8];
          v70 = (double *)((char *)v70 - v73);
          v75 = &v69[8 * v66 - 16];
          v76 = v62 - 2;
          v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *v75 = v78;
            v75 -= 2;
            v76 -= 4;
            v77 -= 4;
          }
          while (v77);
          v62 = v74;
          if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_191:
            do
            {
              v79 = *((_QWORD *)v62-- - 1);
              *((_QWORD *)v70-- - 1) = v79;
            }
            while (v62 != v65);
          }
        }
        v63 = (double *)&v69[8 * v68];
        v156 = v70;
        v158 = v63;
        if (v65)
        {
          operator delete(v65);
          v60 = a2[1];
        }
      }
      else
      {
        *v157 = *v61;
        v64 = v62 + 1;
      }
      v157 = v64;
      v80 = (float *)(v60 + 12 * v14 + 4);
      if (v64 < v63)
      {
        *v64 = *v80;
        v81 = v64 + 1;
        goto LABEL_142;
      }
      v82 = v156;
      v83 = v64 - v156;
      v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 61)
        goto LABEL_185;
      if (((char *)v63 - (char *)v156) >> 2 > v84)
        v84 = ((char *)v63 - (char *)v156) >> 2;
      if ((unint64_t)((char *)v63 - (char *)v156) >= 0x7FFFFFFFFFFFFFF8)
        v85 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v85 = v84;
      if (v85)
      {
        if (v85 >> 61)
          goto LABEL_184;
        v86 = operator new(8 * v85);
      }
      else
      {
        v86 = 0;
      }
      v87 = (double *)&v86[8 * v83];
      *v87 = *v80;
      v81 = v87 + 1;
      if (v64 != v82)
      {
        v88 = (char *)v64 - (char *)v82 - 8;
        if (v88 < 0x58)
        {
          v89 = v64;
          goto LABEL_139;
        }
        if ((unint64_t)((char *)v82 - v86) < 0x20)
        {
          v89 = v64;
          do
          {
LABEL_139:
            v99 = *((_QWORD *)v89-- - 1);
            *((_QWORD *)v87-- - 1) = v99;
          }
          while (v89 != v82);
          goto LABEL_140;
        }
        v93 = (v88 >> 3) + 1;
        v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
        v89 = &v64[v94 / 0xFFFFFFFFFFFFFFF8];
        v87 = (double *)((char *)v87 - v94);
        v95 = &v86[8 * v83 - 16];
        v96 = v64 - 2;
        v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v98 = *(_OWORD *)v96;
          *(v95 - 1) = *((_OWORD *)v96 - 1);
          *v95 = v98;
          v95 -= 2;
          v96 -= 4;
          v97 -= 4;
        }
        while (v97);
        if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_139;
      }
LABEL_140:
      v63 = (double *)&v86[8 * v85];
      v156 = v87;
      v158 = v63;
      if (v82)
      {
        operator delete(v82);
        v60 = a2[1];
      }
LABEL_142:
      v157 = v81;
      v100 = (float *)(v60 + 12 * v14 + 8);
      if (v81 < v63)
      {
        *v81 = *v100;
        v19 = v81 + 1;
        v20 = v136;
        v13 = v142;
        v18 = v143;
      }
      else
      {
        v101 = v156;
        v102 = v81 - v156;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 61)
LABEL_185:
          sub_207CA420C();
        if (((char *)v63 - (char *)v156) >> 2 > v103)
          v103 = ((char *)v63 - (char *)v156) >> 2;
        if ((unint64_t)((char *)v63 - (char *)v156) >= 0x7FFFFFFFFFFFFFF8)
          v104 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v104 = v103;
        if (v104)
        {
          v13 = v142;
          v18 = v143;
          if (v104 >> 61)
LABEL_184:
            sub_207CA3AB8();
          v105 = operator new(8 * v104);
        }
        else
        {
          v105 = 0;
          v13 = v142;
          v18 = v143;
        }
        v106 = (double *)&v105[8 * v102];
        *v106 = *v100;
        v19 = v106 + 1;
        if (v81 != v101)
        {
          v107 = (char *)v81 - (char *)v101 - 8;
          if (v107 < 0x58 || (unint64_t)((char *)v101 - v105) < 0x20)
          {
            v108 = v81;
            v20 = v136;
            goto LABEL_157;
          }
          v110 = (v107 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v81[v111 / 0xFFFFFFFFFFFFFFF8];
          v106 = (double *)((char *)v106 - v111);
          v112 = &v105[8 * v102 - 16];
          v113 = v81 - 2;
          v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v115 = *(_OWORD *)v113;
            *(v112 - 1) = *((_OWORD *)v113 - 1);
            *v112 = v115;
            v112 -= 2;
            v113 -= 4;
            v114 -= 4;
          }
          while (v114);
          v20 = v136;
          if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_157:
              v109 = *((_QWORD *)v108-- - 1);
              *((_QWORD *)v106-- - 1) = v109;
            }
            while (v108 != v101);
          }
          v156 = v106;
          v158 = (double *)&v105[8 * v104];
          if (!v101)
            goto LABEL_24;
LABEL_161:
          operator delete(v101);
          goto LABEL_24;
        }
        v20 = v136;
        v156 = (double *)&v105[8 * v102];
        v158 = (double *)&v105[8 * v104];
        if (v101)
          goto LABEL_161;
      }
LABEL_24:
      v157 = v19;
      if (++v14 == v20)
        goto LABEL_7;
    }
  }
  v153 = 0;
  v154 = 0;
  v155 = 0;
  __p = 0;
  v151 = 0;
  v152 = 0;
LABEL_7:
  sub_207D6D15C(v134, (uint64_t *)&v156, &v153, &__p, v135, a5, 0.0, 0.0);
  if (__p)
    operator delete(__p);
  if (v153)
    operator delete(v153);
  if (v156)
    operator delete(v156);
}

void sub_207D6EBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)(v28 - 128);
  if (!v30)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v28 - 120) = v30;
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D6EC2C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, __int32 **a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  float32x2_t v23;
  __int128 v24;
  __int128 v25;
  float32x2_t v26;
  void **v27;
  char *v28;
  __int32 *v29;
  __int32 *v30;
  uint64_t v31;
  __int32 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  __int32 *v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  float32x2_t *v62;
  float *v63;
  float32x4_t v64;
  float *v65;
  int8x16_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  size_t v104;
  _QWORD *v105;
  __int32 *v106;
  _BOOL4 v107;
  BOOL v108;
  double v109;
  float *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t *v114;
  int v115;
  uint64_t v116;
  double v117;
  _BOOL4 v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  int v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t i;
  unsigned __int8 v127;
  float32x2_t *v128;
  float32x2_t v129;
  float64x2_t v130;
  double v131;
  float32x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  __int32 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  char *v140;
  float32x2_t v141;
  double v142;
  double v143;
  float32x2_t v144;
  float32x2_t v145;
  float *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char **v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  _QWORD *v162;
  int64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  float64x2_t *v168;
  float64x2_t *v169;
  uint64_t v170;
  float64x2_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  _QWORD *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  float64x2_t *v188;
  float64x2_t *v189;
  uint64_t v190;
  float64x2_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  _BYTE *v200;
  _QWORD *v201;
  int64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  float64x2_t *v207;
  float64x2_t *v208;
  uint64_t v209;
  float64x2_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  _QWORD *v219;
  int64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  float64x2_t *v226;
  float64x2_t *v227;
  uint64_t v228;
  float64x2_t v229;
  uint64_t v230;
  char *v231;
  unint64_t v232;
  char *v233;
  _QWORD *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  _QWORD *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  float64x2_t *v248;
  float64x2_t *v249;
  uint64_t v250;
  float64x2_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _BYTE *v261;
  _QWORD *v262;
  int64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  float64x2_t *v268;
  float64x2_t *v269;
  uint64_t v270;
  float64x2_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  _QWORD *v281;
  int64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  unint64_t v287;
  char *v288;
  _QWORD *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  _BYTE *v296;
  char *v297;
  _QWORD *v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  float64x2_t *v304;
  float64x2_t *v305;
  uint64_t v306;
  float64x2_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  _BYTE *v317;
  _QWORD *v318;
  int64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  float64x2_t *v324;
  float64x2_t *v325;
  uint64_t v326;
  float64x2_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  float64x2_t *v331;
  float64x2_t *v332;
  uint64_t v333;
  float64x2_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x2_t v339;
  float32x2_t v340;
  int32x2_t v341;
  float32x2_t v342;
  double v343;
  _QWORD *v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  _BYTE *v354;
  _QWORD *v355;
  int64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  float v367;
  float v368;
  float v369;
  float **v370;
  unint64_t v371;
  float *v372;
  float *v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  char *v378;
  float *v379;
  float *v380;
  uint64_t v381;
  int v382;
  float *v383;
  uint64_t v385;
  void **v386;
  uint64_t v388;
  void **v390;
  void **v391;
  _QWORD *v392;
  _QWORD *v393;
  uint64_t v394;
  char v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _BOOL4 v403;
  uint64_t v404;
  float64_t v405;
  __int128 v407;
  __int32 *v408;
  __int128 v409;
  uint64_t v410;
  __int128 v411;
  _QWORD *v412;
  float64x2_t v413;
  double v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  int8x16_t v418;
  double v419;
  void *__p;
  char *v421;
  char *v422;
  void *v423;
  char *v424;
  char *v425;
  __int128 v426;
  __int128 v427;
  int v428;
  double v429[3];
  float64x2_t v430;
  uint64_t v431;
  float64x2_t v432;
  uint64_t v433;
  uint64_t v434;

  v434 = *MEMORY[0x24BDAC8D0];
  v426 = 0u;
  v427 = 0u;
  v428 = 733237104;
  kdebug_trace();
  v402 = *a1;
  v404 = a1[1];
  v13 = v404 - *a1;
  if ((unint64_t)v13 <= 0x20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 378, (uint64_t)"num_cams > 1", 12, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v14 = v13 >> 5, v13 >> 5 != (uint64_t)(a2[1] - *a2) >> 6) || v14 != 0x8E38E38E38E38E39 * (a3[1] - *a3))&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 379, (uint64_t)"num_cams == T_p0pn_vec.size() && num_cams == K_pn.size()", 56, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *(unsigned int *)(*a1 + 8);
  v16 = *(unsigned int *)(*a1 + 12);
  v17 = *(unsigned int *)(*a1 + 16);
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  *((_OWORD *)a5 + 2) = 0u;
  *((_OWORD *)a5 + 3) = 0u;
  *((_OWORD *)a5 + 4) = 0u;
  *((_OWORD *)a5 + 5) = 0u;
  *((_OWORD *)a5 + 6) = 0u;
  *((_OWORD *)a5 + 7) = 0u;
  *((_OWORD *)a5 + 8) = 0u;
  *((_OWORD *)a5 + 9) = 0u;
  a5[20] = 0;
  v388 = v17;
  v18 = v14 * v17;
  v413 = 0uLL;
  v414 = 0.0;
  v399 = a5;
  if (v14 * v17)
  {
    if (v18 >> 61)
      sub_207CA420C();
    v19 = (char *)operator new(8 * v18);
    a5[8] = &v19[8 * v18];
    a5[6] = v19;
    v391 = (void **)(a5 + 6);
    v393 = a5 + 8;
    a5[7] = v19;
    v398 = a5 + 7;
    v20 = (char *)operator new(8 * v18);
    *a5 = v20;
    a5[1] = v20;
    v392 = a5 + 1;
    a5[2] = &v20[8 * v18];
    v21 = (char *)operator new(8 * v18);
    v22 = &v21[8 * v18];
  }
  else
  {
    v21 = 0;
    v22 = 0;
    a5[6] = 0;
    v391 = (void **)(a5 + 6);
    a5[7] = 0;
    v398 = a5 + 7;
    a5[8] = 0;
    v393 = a5 + 8;
    a5[1] = 0;
    v392 = a5 + 1;
    *a5 = 0;
    a5[2] = 0;
  }
  v400 = v13 >> 5;
  v385 = v16;
  v394 = v15;
  v396 = v13;
  a5[9] = v21;
  a5[10] = v21;
  a5[11] = v22;
  v390 = (void **)(a5 + 9);
  sub_207D80CAC((char **)a5 + 15);
  v27 = (void **)(a5 + 18);
  v28 = (char *)a5[18];
  a5[19] = v28;
  v29 = *a3;
  v30 = a3[1];
  while (v29 != v30)
  {
    v32 = *v29;
    v33 = a5[20];
    if ((unint64_t)v28 < v33)
    {
      *(_DWORD *)v28 = v32;
      v31 = (uint64_t)(v28 + 4);
      goto LABEL_12;
    }
    v34 = (char *)*v27;
    v35 = v28 - (_BYTE *)*v27;
    v36 = v35 >> 2;
    v37 = (v35 >> 2) + 1;
    if (v37 >> 62)
      sub_207D0CD58();
    v38 = v33 - (_QWORD)v34;
    if (v38 >> 1 > v37)
      v37 = v38 >> 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 62)
        sub_207CA3AB8();
      v40 = operator new(4 * v39);
      v41 = (__int32 *)&v40[4 * v36];
      *v41 = v32;
      v31 = (uint64_t)(v41 + 1);
      v42 = v28 - v34;
      if (v28 == v34)
        goto LABEL_29;
    }
    else
    {
      v40 = 0;
      v41 = (__int32 *)(4 * v36);
      *(_DWORD *)(4 * v36) = v32;
      v31 = 4 * v36 + 4;
      v42 = v28 - v34;
      if (v28 == v34)
        goto LABEL_29;
    }
    v43 = v42 - 4;
    if (v43 >= 0xBC)
    {
      v47 = (v28 - 4 - v34) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v40[v35 - 4 - v47] > &v40[v35 - 4])
      {
        v44 = v28;
      }
      else if (&v28[-v47 - 4] > v28 - 4)
      {
        v44 = v28;
      }
      else if ((unint64_t)(v28 - v40 - v35) >= 0x20)
      {
        v48 = (v43 >> 2) + 1;
        v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        v44 = &v28[-v49];
        v41 = (__int32 *)((char *)v41 - v49);
        v50 = &v40[4 * v36 - 16];
        v51 = v28 - 16;
        v52 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *v50 = v53;
          v50 -= 2;
          v51 -= 32;
          v52 -= 8;
        }
        while (v52);
        if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
      else
      {
        v44 = v28;
      }
    }
    else
    {
      v44 = v28;
    }
    do
    {
      v45 = *((_DWORD *)v44 - 1);
      v44 -= 4;
      *--v41 = v45;
    }
    while (v44 != v34);
LABEL_29:
    v46 = &v40[4 * v39];
    a5 = v399;
    v399[18] = v41;
    v399[19] = v31;
    v399[20] = v46;
    if (v34)
      operator delete(v34);
LABEL_12:
    a5[19] = v31;
    v29 += 9;
    v28 = (char *)v31;
  }
  v423 = 0;
  v424 = 0;
  v425 = 0;
  if (v404 == v402)
  {
    v56 = 0;
    v55 = 0;
    v54 = v400;
    v57 = a1[1];
    if (v57 != *a1)
      goto LABEL_44;
    goto LABEL_79;
  }
  v54 = v400;
  if (v396 < 0)
    sub_207CA420C();
  v55 = (char *)operator new(36 * v400);
  v56 = &v55[36 * v400];
  v423 = v55;
  v424 = v55;
  v425 = v56;
  v57 = a1[1];
  if (v57 == *a1)
  {
LABEL_79:
    v61 = v57;
    __p = 0;
    v421 = 0;
    v422 = 0;
    v103 = v396;
    if (v404 != v402)
      goto LABEL_75;
    goto LABEL_80;
  }
LABEL_44:
  v58 = 0;
  v59 = v424;
  v60 = v55;
  do
  {
    while (1)
    {
      v62 = (float32x2_t *)(*a2 + (v58 << 6));
      v63 = (float *)*a3;
      v75 = v62[6];
      v23.i32[0] = v62[7].i32[0];
      *(float32x2_t *)v64.f32 = v75;
      v64.i64[1] = v23.u32[0];
      v65 = (float *)&(*a3)[9 * v58];
      v66 = (int8x16_t)vnegq_f32(v64);
      LODWORD(v24) = v62[1].i32[0];
      LODWORD(v25) = v62[3].i32[0];
      v67 = v62[2];
      v26.i32[0] = v62[5].i32[0];
      v68 = v62[4];
      v69 = vmls_lane_f32(vmla_n_f32(vmul_f32(*v62, 0), v67, v23.f32[0]), v68, v75, 1);
      v70 = vmls_lane_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v24, 0), v23, *(float32x2_t *)&v25), v26, v75, 1);
      v71 = vmla_n_f32(vmla_f32(vmul_laneq_f32(*v62, (float32x4_t)v66, 2), 0, v67), v68, v75.f32[0]);
      v72 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v24, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)), 0, *(float32x2_t *)&v25), v75, v26);
      v73 = vmla_f32(vmls_lane_f32(vmul_lane_f32(*v62, v75, 1), v67, v75, 0), 0, v68);
      v74 = vmla_f32(vmla_f32(vmul_lane_f32(*(float32x2_t *)&v24, v75, 1), *(float32x2_t *)v66.i8, *(float32x2_t *)&v25), 0, v26);
      v75.i32[0] = **a3;
      v76 = 1.0 / v75.f32[0];
      if (v75.f32[0] == 0.0)
      {
        v76 = 1.0;
        v75.f32[0] = 1.0;
      }
      *(float *)&v24 = (float)-v63[6] / v75.f32[0];
      v77 = v63[4];
      v78 = 1.0 / v77;
      if (v77 == 0.0)
      {
        v78 = 1.0;
        v77 = 1.0;
      }
      *(float *)&v25 = (float)-v63[7] / v77;
      v79 = *v65;
      v26.f32[0] = 1.0 / *v65;
      if (*v65 == 0.0)
      {
        v26.f32[0] = 1.0;
        v79 = 1.0;
      }
      v75.f32[0] = (float)-v65[6] / v79;
      v80 = v65[4];
      v81 = (float32x2_t)LODWORD(v76);
      v82.i32[0] = 0;
      v82.f32[1] = v78;
      v83 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v81, v69.f32[0]), v82, v69, 1), 0, v70.f32[0]);
      v84 = vadd_f32(v70, vmla_lane_f32(vmul_f32(*(float32x2_t *)&v24, v69), *(float32x2_t *)&v25, v69, 1));
      v85 = vmla_lane_f32(vmul_n_f32(v81, v71.f32[0]), v82, v71, 1);
      v86 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v24, v71), *(float32x2_t *)&v25, v71, 1);
      v71.f32[0] = 1.0 / v80;
      if (v80 == 0.0)
      {
        v71.f32[0] = 1.0;
        v80 = 1.0;
      }
      v87 = vmla_n_f32(v85, 0, v72.f32[0]);
      v88 = vadd_f32(v72, v86);
      v89 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v81, v73.f32[0]), v82, v73, 1), 0, v74.f32[0]);
      v90 = vadd_f32(v74, vmla_lane_f32(vmul_f32(*(float32x2_t *)&v24, v73), *(float32x2_t *)&v25, v73, 1));
      *(float32x2_t *)&v24 = vmla_f32(vmla_f32(vmul_n_f32(v83, v26.f32[0]), 0, v87), 0, v89);
      v91 = vmla_f32(vmla_f32(vmul_f32(v84, v26), 0, v88), 0, v90);
      *((float32x2_t *)&v24 + 1) = v91;
      v91.f32[0] = (float)-v65[7] / v80;
      *(float32x2_t *)&v25 = vmla_f32(vmla_n_f32(vmul_f32(v83, 0), v87, v71.f32[0]), 0, v89);
      v92 = vmla_f32(vmla_f32(vmul_f32(v84, 0), v71, v88), 0, v90);
      *((float32x2_t *)&v25 + 1) = v92;
      v23 = vmla_n_f32(vmul_n_f32(v83, v75.f32[0]), v87, v91.f32[0]);
      *(float32x2_t *)&v94 = vadd_f32(v89, v23);
      v93 = vadd_f32(v90, vmla_f32(vmul_f32(v84, v75), v91, v88));
      *((float32x2_t *)&v94 + 1) = v93;
      if (v60 >= v56)
        break;
      *((_DWORD *)v60 + 2) = DWORD2(v24);
      *(_QWORD *)v60 = v24;
      *((_DWORD *)v60 + 5) = v92.i32[0];
      *(_QWORD *)(v60 + 12) = v25;
      *((_DWORD *)v60 + 8) = v93.i32[0];
      v59 = v60 + 36;
      *((_QWORD *)v60 + 3) = v94;
      ++v58;
      v57 = *a1;
      v61 = a1[1];
      v60 += 36;
      if (v58 >= (v61 - *a1) >> 5)
        goto LABEL_74;
    }
    v95 = 0x8E38E38E38E38E39 * ((v60 - v55) >> 2) + 1;
    if (v95 > 0x71C71C71C71C71CLL)
    {
      v424 = v59;
      v425 = v56;
      v423 = v55;
      sub_207CA420C();
    }
    if (0x1C71C71C71C71C72 * ((v56 - v55) >> 2) > v95)
      v95 = 0x1C71C71C71C71C72 * ((v56 - v55) >> 2);
    if (0x8E38E38E38E38E39 * ((v56 - v55) >> 2) >= 0x38E38E38E38E38ELL)
      v96 = 0x71C71C71C71C71CLL;
    else
      v96 = v95;
    if (v96)
    {
      v407 = v94;
      v409 = v25;
      v411 = v24;
      if (v96 > 0x71C71C71C71C71CLL)
      {
        v424 = v59;
        v425 = v56;
        v423 = v55;
        sub_207CA3AB8();
      }
      v97 = (char *)operator new(36 * v96);
      v25 = v409;
      v24 = v411;
      v94 = v407;
    }
    else
    {
      v97 = 0;
    }
    v98 = &v97[4 * ((v60 - v55) >> 2)];
    *(_QWORD *)v98 = v24;
    *((_DWORD *)v98 + 2) = DWORD2(v24);
    *((_DWORD *)v98 + 5) = DWORD2(v25);
    *(_QWORD *)(v98 + 12) = v25;
    *((_QWORD *)v98 + 3) = v94;
    *((_DWORD *)v98 + 8) = DWORD2(v94);
    if (v60 == v55)
    {
      v100 = &v97[4 * ((v60 - v55) >> 2)];
      v56 = &v97[36 * v96];
      v59 = v98 + 36;
      if (v55)
        goto LABEL_69;
    }
    else
    {
      v99 = &v97[4 * ((v60 - v55) >> 2)];
      do
      {
        v100 = v99 - 36;
        v101 = *(_OWORD *)(v60 - 36);
        v102 = *(_OWORD *)(v60 - 20);
        *((_DWORD *)v99 - 1) = *((_DWORD *)v60 - 1);
        *(_OWORD *)(v99 - 20) = v102;
        *(_OWORD *)(v99 - 36) = v101;
        v60 -= 36;
        v99 -= 36;
      }
      while (v60 != v55);
      v56 = &v97[36 * v96];
      v59 = v98 + 36;
      if (v55)
LABEL_69:
        operator delete(v55);
    }
    v55 = v100;
    ++v58;
    v57 = *a1;
    v61 = a1[1];
    v60 = v59;
  }
  while (v58 < (v61 - *a1) >> 5);
LABEL_74:
  v424 = v59;
  v425 = v56;
  v422 = 0;
  v423 = v55;
  v54 = v400;
  __p = 0;
  v421 = 0;
  v103 = v396;
  if (v404 == v402)
  {
LABEL_80:
    v105 = 0;
    v106 = 0;
    if (!(_DWORD)v388)
      goto LABEL_393;
    goto LABEL_81;
  }
LABEL_75:
  if ((v103 & 0x8000000000000000) != 0)
    sub_207D0CD58();
  __p = operator new(v103 >> 3);
  v422 = (char *)__p + 4 * v54;
  bzero(__p, v103 >> 3);
  v421 = (char *)__p + (v103 >> 3);
  v104 = v103 >> 2;
  v105 = operator new(v103 >> 2);
  v106 = (__int32 *)operator new(v104);
  if (!(_DWORD)v388)
    goto LABEL_393;
LABEL_81:
  v107 = v394 != 0;
  if (!(_DWORD)v385)
    v107 = 0;
  v403 = v107;
  if ((_DWORD)v385)
    v108 = (_DWORD)v394 == 0;
  else
    v108 = 1;
  *(_QWORD *)&v109 = v394 | (v385 << 32);
  if (v108)
    v109 = 0.0;
  v405 = v109;
  if (v61 == v57)
    goto LABEL_393;
  v410 = 0;
  v401 = HIDWORD(*(_QWORD *)&v109);
  v386 = (void **)(v399 + 12);
  v412 = v105;
  v408 = v106;
  while (2)
  {
    v111 = *a1;
    v112 = v399;
    if (a1[1] == *a1)
      goto LABEL_93;
    v113 = 0;
    do
    {
      v432.f64[0] = 0.0;
      v430.f64[0] = 0.0;
      v429[0] = 0.0;
      v114 = (uint64_t *)(v111 + 32 * v113);
      v115 = *((_DWORD *)v114 + 7);
      v116 = *v114;
      v117 = *(double *)((char *)v114 + 20);
      v118 = v403;
      if (v115 != -1)
        v118 = 0;
      if (v118)
      {
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
        v119 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v120 = qword_2545309E8;
          v121 = qword_2545309F0;
          while (v120 != v121)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v120)(*(_QWORD *)(v120 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            v120 += 16;
          }
        }
        v122 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        v105 = v412;
        if (!byte_254530A10)
          abort();
        qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
      }
      *(_QWORD *)&v413.f64[0] = v116 + 4 * (v115 * v410);
      v413.f64[1] = v405;
      v414 = v117;
      v123 = HIDWORD(v117) * v401;
      v106 = v408;
      if (v123 == -1)
      {
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
        v124 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v125 = qword_2545309E8;
          for (i = qword_2545309F0; v125 != i; v125 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v125)(*(_QWORD *)(v125 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
        }
        v127 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        v105 = v412;
        if (!byte_254530A10)
          abort();
        qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
      }
      sub_207D5D44C((uint64_t *)&v413, v432.f64, v430.f64, v429);
      v128 = (float32x2_t *)&(*a3)[9 * v113];
      v129.i32[0] = v128->i32[0];
      v130.f64[0] = v432.f64[0];
      v131 = v430.f64[0];
      v132.f32[0] = v432.f64[0];
      v130.f64[1] = v430.f64[0];
      v133 = vcvtq_f64_f32(v128[3]);
      v134 = vsubq_f64(v130, v133);
      v129.i32[1] = v128[2].i32[0];
      v105[v113] = vcvt_f32_f64(vdivq_f64(v134, vcvtq_f64_f32(v129)));
      v129.f32[0] = v131;
      v135 = &v408[2 * v113];
      *v135 = v132.i32[0];
      v135[1] = v129.i32[0];
      v129.f32[0] = v429[0];
      *((_DWORD *)__p + v113++) = v129.i32[0];
      v111 = *a1;
      v136 = a1[1];
    }
    while (v113 < (v136 - *a1) >> 5);
    if (v136 == v111)
      goto LABEL_93;
    v395 = 0;
    v397 = 0;
    v137 = 0;
    while (2)
    {
      if (!v137)
        goto LABEL_147;
      v139 = *(float32x2_t *)&v106[2 * v137];
      v140 = (char *)v423 + 36 * v137;
      v141 = vadd_f32(*(float32x2_t *)(v140 + 24), vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v140, v139.f32[0]), *(float32x2_t *)(v140 + 12), v139, 1));
      if (v141.f32[0] == 0.0)
        goto LABEL_140;
      v142 = v141.f32[0];
      if (v141.f32[0] <= 0.0)
        v142 = 0.0 - v141.f32[0];
      if (v142 <= 0.00000001)
      {
LABEL_140:
        if (v141.f32[1] == 0.0)
          goto LABEL_147;
        v143 = v141.f32[1];
        if (v141.f32[1] <= 0.0)
          v143 = 0.0 - v143;
        if (v143 <= 0.00000001)
        {
LABEL_147:
          v146 = (float *)__p;
          goto LABEL_148;
        }
      }
      LODWORD(v131) = *((_DWORD *)v140 + 2);
      LODWORD(v133.f64[0]) = *((_DWORD *)v140 + 5);
      v144 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v131, v139), *(float32x2_t *)&v133.f64[0], v139, 1);
      v132.i32[0] = *((_DWORD *)v140 + 8);
      v145 = vadd_f32(v132, v144);
      v144.i32[0] = *v106;
      LODWORD(v133.f64[0]) = v106[1];
      v132 = (float32x2_t)vdup_lane_s32((int32x2_t)v141, 1);
      v145.i32[0] = vadd_f32(v145, vmla_lane_f32(vmul_f32(v144, v141), *(float32x2_t *)&v133.f64[0], v141, 1)).u32[0];
      v131 = COERCE_DOUBLE(vmla_lane_f32(vmul_f32(v141, v141), v132, v141, 1));
      v146 = (float *)__p;
      if ((float)(fabsf(v145.f32[0]) / sqrtf(*(float *)&v131)) >= a8
        || *(float *)__p <= a7
        || *((float *)__p + v137) <= a7)
      {
LABEL_148:
        if (v146[v137] <= a6)
          goto LABEL_131;
        v150 = v112;
        v151 = (char *)v112[10];
        v152 = v150[11];
        if ((unint64_t)v151 < v152)
        {
          *(_QWORD *)v151 = v137;
          v153 = (uint64_t)(v151 + 8);
          v154 = (char **)v399;
          goto LABEL_170;
        }
        v155 = (char *)*v390;
        v156 = v151 - (_BYTE *)*v390;
        v157 = v156 >> 3;
        v158 = (v156 >> 3) + 1;
        if (v158 >> 61)
          goto LABEL_405;
        v159 = v152 - (_QWORD)v155;
        if (v159 >> 2 > v158)
          v158 = v159 >> 2;
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v158;
        if (v160)
        {
          if (v160 >> 61)
            goto LABEL_404;
          v161 = operator new(8 * v160);
          v162 = &v161[8 * v157];
          *v162 = v137;
          v153 = (uint64_t)(v162 + 1);
          v163 = v151 - v155;
          if (v151 == v155)
            goto LABEL_168;
        }
        else
        {
          v161 = 0;
          v162 = (_QWORD *)(8 * v157);
          *(_QWORD *)(8 * v157) = v137;
          v153 = 8 * v157 + 8;
          v163 = v151 - v155;
          if (v151 == v155)
          {
LABEL_168:
            v154 = (char **)v399;
            v399[9] = v162;
            v399[10] = v153;
            v399[11] = &v161[8 * v160];
            if (v155)
              operator delete(v155);
LABEL_170:
            v154[10] = (char *)v153;
            v174 = v154[1];
            v173 = (unint64_t)v154[2];
            if ((unint64_t)v174 < v173)
            {
              v105 = v412;
              *(_QWORD *)v174 = v412[v137];
              v175 = v174 + 8;
              goto LABEL_191;
            }
            v176 = *v154;
            v177 = v174 - *v154;
            v178 = v177 >> 3;
            v179 = (v177 >> 3) + 1;
            if (v179 >> 61)
              sub_207CA420C();
            v180 = v173 - (_QWORD)v176;
            if (v180 >> 2 > v179)
              v179 = v180 >> 2;
            if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
              v181 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v181 = v179;
            if (v181)
            {
              if (v181 >> 61)
                goto LABEL_404;
              v182 = operator new(8 * v181);
            }
            else
            {
              v182 = 0;
            }
            v183 = &v182[8 * v178];
            *v183 = v412[v137];
            v175 = v183 + 1;
            if (v174 == v176)
            {
              *v399 = v183;
              v399[1] = v175;
              v399[2] = &v182[8 * v181];
              v105 = v412;
              if (v174)
LABEL_190:
                operator delete(v174);
            }
            else
            {
              v184 = v174 - v176 - 8;
              if (v184 < 0x58)
                goto LABEL_426;
              if ((unint64_t)(v174 - v182 - v177) < 0x20)
                goto LABEL_426;
              v185 = (v184 >> 3) + 1;
              v186 = 8 * (v185 & 0x3FFFFFFFFFFFFFFCLL);
              v187 = &v174[-v186];
              v183 = (_QWORD *)((char *)v183 - v186);
              v188 = (float64x2_t *)&v182[8 * v178 - 16];
              v189 = (float64x2_t *)(v174 - 16);
              v190 = v185 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v134 = v189[-1];
                v191 = *v189;
                v188[-1] = v134;
                *v188 = v191;
                v188 -= 2;
                v189 -= 2;
                v190 -= 4;
              }
              while (v190);
              v174 = v187;
              if (v185 != (v185 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_426:
                do
                {
                  v192 = *((_QWORD *)v174 - 1);
                  v174 -= 8;
                  *--v183 = v192;
                }
                while (v174 != v176);
              }
              v174 = (char *)*v399;
              *v399 = v183;
              v399[1] = v175;
              v399[2] = &v182[8 * v181];
              v105 = v412;
              if (v174)
                goto LABEL_190;
            }
LABEL_191:
            *v392 = v175;
            v193 = (char *)*v398;
            if ((unint64_t)*v398 < *v393)
            {
              *(_QWORD *)v193 = v410;
              v138 = (uint64_t)(v193 + 8);
              v112 = v399;
LABEL_130:
              v106 = v408;
              *v398 = v138;
              ++v397;
              v395 |= v137 == 0;
              goto LABEL_131;
            }
            v194 = (char *)*v391;
            v195 = v193 - (_BYTE *)*v391;
            v196 = v195 >> 3;
            v197 = (v195 >> 3) + 1;
            if (v197 >> 61)
LABEL_405:
              sub_207CA420C();
            v198 = *v393 - (_QWORD)v194;
            if (v198 >> 2 > v197)
              v197 = v198 >> 2;
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
              v199 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v199 = v197;
            if (v199)
            {
              if (v199 >> 61)
LABEL_404:
                sub_207CA3AB8();
              v200 = operator new(8 * v199);
              v201 = &v200[8 * v196];
              *v201 = v410;
              v138 = (uint64_t)(v201 + 1);
              v202 = v193 - v194;
              if (v193 == v194)
                goto LABEL_209;
            }
            else
            {
              v200 = 0;
              v201 = (_QWORD *)(8 * v196);
              *(_QWORD *)(8 * v196) = v410;
              v138 = 8 * v196 + 8;
              v202 = v193 - v194;
              if (v193 == v194)
              {
LABEL_209:
                *v391 = v201;
                *v398 = v138;
                *v393 = &v200[8 * v199];
                if (v194)
                  operator delete(v194);
                v112 = v399;
                v105 = v412;
                goto LABEL_130;
              }
            }
            v203 = v202 - 8;
            if (v203 < 0x58)
              goto LABEL_427;
            if ((unint64_t)(v193 - &v200[v195]) < 0x20)
              goto LABEL_427;
            v204 = (v203 >> 3) + 1;
            v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
            v206 = &v193[-v205];
            v201 = (_QWORD *)((char *)v201 - v205);
            v207 = (float64x2_t *)&v200[8 * v196 - 16];
            v208 = (float64x2_t *)(v193 - 16);
            v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v134 = v208[-1];
              v210 = *v208;
              v207[-1] = v134;
              *v207 = v210;
              v207 -= 2;
              v208 -= 2;
              v209 -= 4;
            }
            while (v209);
            v193 = v206;
            if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_427:
              do
              {
                v211 = *((_QWORD *)v193 - 1);
                v193 -= 8;
                *--v201 = v211;
              }
              while (v193 != v194);
            }
            goto LABEL_209;
          }
        }
        v164 = v163 - 8;
        if (v164 < 0x58)
          goto LABEL_428;
        if ((unint64_t)(v151 - v161 - v156) < 0x20)
          goto LABEL_428;
        v165 = (v164 >> 3) + 1;
        v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
        v167 = &v151[-v166];
        v162 = (_QWORD *)((char *)v162 - v166);
        v168 = (float64x2_t *)&v161[8 * v157 - 16];
        v169 = (float64x2_t *)(v151 - 16);
        v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v169[-1];
          v171 = *v169;
          v168[-1] = v134;
          *v168 = v171;
          v168 -= 2;
          v169 -= 2;
          v170 -= 4;
        }
        while (v170);
        v151 = v167;
        if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_428:
          do
          {
            v172 = *((_QWORD *)v151 - 1);
            v151 -= 8;
            *--v162 = v172;
          }
          while (v151 != v155);
        }
        goto LABEL_168;
      }
      v148 = (char *)v112[10];
      v147 = v112[11];
      if ((v395 & 1) != 0)
        goto LABEL_281;
      if ((unint64_t)v148 < v147)
      {
        *(_QWORD *)v148 = 0;
        v149 = (uint64_t)(v148 + 8);
        goto LABEL_234;
      }
      v212 = (char *)*v390;
      v213 = v148 - (_BYTE *)*v390;
      v214 = v213 >> 3;
      v215 = (v213 >> 3) + 1;
      if (v215 >> 61)
        sub_207CA420C();
      v216 = v147 - (_QWORD)v212;
      if (v216 >> 2 > v215)
        v215 = v216 >> 2;
      if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
        v217 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v217 = v215;
      if (!v217)
      {
        v218 = 0;
        v219 = (_QWORD *)(8 * v214);
        *(_QWORD *)(8 * v214) = 0;
        v149 = 8 * v214 + 8;
        v220 = v148 - v212;
        if (v148 != v212)
          goto LABEL_223;
        goto LABEL_226;
      }
      if (v217 >> 61)
        sub_207CA3AB8();
      v218 = operator new(8 * v217);
      v219 = &v218[8 * v214];
      *v219 = 0;
      v149 = (uint64_t)(v219 + 1);
      v220 = v148 - v212;
      if (v148 == v212)
      {
LABEL_226:
        v105 = v412;
        goto LABEL_232;
      }
LABEL_223:
      v221 = v220 - 8;
      if (v221 < 0x58)
      {
        v105 = v412;
        goto LABEL_231;
      }
      v222 = v148 - v218 - v213;
      v105 = v412;
      if (v222 < 0x20)
        goto LABEL_429;
      v223 = (v221 >> 3) + 1;
      v224 = 8 * (v223 & 0x3FFFFFFFFFFFFFFCLL);
      v225 = &v148[-v224];
      v219 = (_QWORD *)((char *)v219 - v224);
      v226 = (float64x2_t *)&v218[8 * v214 - 16];
      v227 = (float64x2_t *)(v148 - 16);
      v228 = v223 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v134 = v227[-1];
        v229 = *v227;
        v226[-1] = v134;
        *v226 = v229;
        v226 -= 2;
        v227 -= 2;
        v228 -= 4;
      }
      while (v228);
      v148 = v225;
      if (v223 != (v223 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_429:
        do
        {
LABEL_231:
          v230 = *((_QWORD *)v148 - 1);
          v148 -= 8;
          *--v219 = v230;
        }
        while (v148 != v212);
      }
LABEL_232:
      v231 = &v218[8 * v217];
      v112 = v399;
      v399[9] = v219;
      v399[10] = v149;
      v399[11] = v231;
      if (v212)
        operator delete(v212);
LABEL_234:
      v112[10] = v149;
      v233 = (char *)v112[1];
      v232 = v112[2];
      if ((unint64_t)v233 < v232)
      {
        *(_QWORD *)v233 = *v105;
        v234 = v233 + 8;
        goto LABEL_258;
      }
      v235 = (char *)*v112;
      v236 = (uint64_t)&v233[-*v112];
      v237 = v236 >> 3;
      v238 = (v236 >> 3) + 1;
      if (v238 >> 61)
        goto LABEL_412;
      v239 = v232 - (_QWORD)v235;
      if (v239 >> 2 > v238)
        v238 = v239 >> 2;
      if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
        v240 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v240 = v238;
      if (v240)
      {
        if (v240 >> 61)
          goto LABEL_411;
        v241 = operator new(8 * v240);
      }
      else
      {
        v241 = 0;
      }
      v242 = &v241[8 * v237];
      *v242 = *v412;
      v234 = v242 + 1;
      if (v233 == v235)
      {
        v105 = v412;
        *v399 = v242;
        v399[1] = v234;
        v399[2] = &v241[8 * v240];
        if (v233)
          goto LABEL_257;
      }
      else
      {
        v243 = v233 - v235 - 8;
        if (v243 < 0x58)
        {
          v105 = v412;
          goto LABEL_255;
        }
        v244 = v233 - &v241[v236];
        v105 = v412;
        if (v244 < 0x20)
          goto LABEL_430;
        v245 = (v243 >> 3) + 1;
        v246 = 8 * (v245 & 0x3FFFFFFFFFFFFFFCLL);
        v247 = &v233[-v246];
        v242 = (_QWORD *)((char *)v242 - v246);
        v248 = (float64x2_t *)&v241[8 * v237 - 16];
        v249 = (float64x2_t *)(v233 - 16);
        v250 = v245 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v249[-1];
          v251 = *v249;
          v248[-1] = v134;
          *v248 = v251;
          v248 -= 2;
          v249 -= 2;
          v250 -= 4;
        }
        while (v250);
        v233 = v247;
        if (v245 != (v245 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_430:
          do
          {
LABEL_255:
            v252 = *((_QWORD *)v233 - 1);
            v233 -= 8;
            *--v242 = v252;
          }
          while (v233 != v235);
        }
        v233 = (char *)*v399;
        *v399 = v242;
        v399[1] = v234;
        v399[2] = &v241[8 * v240];
        if (v233)
LABEL_257:
          operator delete(v233);
      }
LABEL_258:
      *v392 = v234;
      v253 = (char *)*v398;
      if ((unint64_t)*v398 < *v393)
      {
        *(_QWORD *)v253 = v410;
        v254 = (uint64_t)(v253 + 8);
        v112 = v399;
        goto LABEL_280;
      }
      v255 = (char *)*v391;
      v256 = v253 - (_BYTE *)*v391;
      v257 = v256 >> 3;
      v258 = (v256 >> 3) + 1;
      if (v258 >> 61)
        goto LABEL_413;
      v259 = *v393 - (_QWORD)v255;
      if (v259 >> 2 > v258)
        v258 = v259 >> 2;
      if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8)
        v260 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v260 = v258;
      if (v260)
      {
        if (v260 >> 61)
          goto LABEL_411;
        v261 = operator new(8 * v260);
        v262 = &v261[8 * v257];
        *v262 = v410;
        v254 = (uint64_t)(v262 + 1);
        v263 = v253 - v255;
        if (v253 == v255)
          goto LABEL_277;
LABEL_271:
        v264 = v263 - 8;
        if (v264 < 0x58)
          goto LABEL_431;
        if ((unint64_t)(v253 - &v261[v256]) < 0x20)
          goto LABEL_431;
        v265 = (v264 >> 3) + 1;
        v266 = 8 * (v265 & 0x3FFFFFFFFFFFFFFCLL);
        v267 = &v253[-v266];
        v262 = (_QWORD *)((char *)v262 - v266);
        v268 = (float64x2_t *)&v261[8 * v257 - 16];
        v269 = (float64x2_t *)(v253 - 16);
        v270 = v265 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v269[-1];
          v271 = *v269;
          v268[-1] = v134;
          *v268 = v271;
          v268 -= 2;
          v269 -= 2;
          v270 -= 4;
        }
        while (v270);
        v253 = v267;
        if (v265 != (v265 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_431:
          do
          {
            v272 = *((_QWORD *)v253 - 1);
            v253 -= 8;
            *--v262 = v272;
          }
          while (v253 != v255);
        }
      }
      else
      {
        v261 = 0;
        v262 = (_QWORD *)(8 * v257);
        *(_QWORD *)(8 * v257) = v410;
        v254 = 8 * v257 + 8;
        v263 = v253 - v255;
        if (v253 != v255)
          goto LABEL_271;
      }
LABEL_277:
      *v391 = v262;
      *v398 = v254;
      *v393 = &v261[8 * v260];
      if (v255)
        operator delete(v255);
      v112 = v399;
      v105 = v412;
LABEL_280:
      v112[7] = v254;
      ++v397;
      v148 = (char *)v112[10];
      v147 = v112[11];
LABEL_281:
      if ((unint64_t)v148 < v147)
      {
        *(_QWORD *)v148 = v137;
        v273 = (uint64_t)(v148 + 8);
        goto LABEL_298;
      }
      v274 = (char *)*v390;
      v275 = v148 - (_BYTE *)*v390;
      v276 = v275 >> 3;
      v277 = (v275 >> 3) + 1;
      if (v277 >> 61)
        goto LABEL_413;
      v278 = v147 - (_QWORD)v274;
      if (v278 >> 2 > v277)
        v277 = v278 >> 2;
      if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8)
        v279 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v279 = v277;
      if (!v279)
      {
        v280 = 0;
        v281 = (_QWORD *)(8 * v276);
        *(_QWORD *)(8 * v276) = v137;
        v273 = 8 * v276 + 8;
        v282 = v148 - v274;
        if (v148 != v274)
          goto LABEL_292;
LABEL_310:
        v105 = v412;
        v297 = &v280[8 * v279];
        v112 = v399;
        v399[9] = v281;
        v399[10] = v273;
        v399[11] = v297;
        if (v274)
          goto LABEL_297;
        goto LABEL_298;
      }
      if (v279 >> 61)
        goto LABEL_411;
      v280 = operator new(8 * v279);
      v281 = &v280[8 * v276];
      *v281 = v137;
      v273 = (uint64_t)(v281 + 1);
      v282 = v148 - v274;
      if (v148 == v274)
        goto LABEL_310;
LABEL_292:
      v283 = v282 - 8;
      if (v283 < 0x58 || (unint64_t)(v148 - v280 - v275) < 0x20)
      {
        v284 = v148;
        v105 = v412;
        goto LABEL_295;
      }
      v329 = (v283 >> 3) + 1;
      v330 = 8 * (v329 & 0x3FFFFFFFFFFFFFFCLL);
      v284 = &v148[-v330];
      v281 = (_QWORD *)((char *)v281 - v330);
      v331 = (float64x2_t *)&v280[8 * v276 - 16];
      v332 = (float64x2_t *)(v148 - 16);
      v333 = v329 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v134 = v332[-1];
        v334 = *v332;
        v331[-1] = v134;
        *v331 = v334;
        v331 -= 2;
        v332 -= 2;
        v333 -= 4;
      }
      while (v333);
      v105 = v412;
      if (v329 != (v329 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_295:
          v285 = *((_QWORD *)v284 - 1);
          v284 -= 8;
          *--v281 = v285;
        }
        while (v284 != v274);
      }
      v286 = &v280[8 * v279];
      v112 = v399;
      v399[9] = v281;
      v399[10] = v273;
      v399[11] = v286;
      if (v274)
LABEL_297:
        operator delete(v274);
LABEL_298:
      v112[10] = v273;
      v288 = (char *)v112[1];
      v287 = v112[2];
      if ((unint64_t)v288 < v287)
      {
        *(_QWORD *)v288 = v105[v137];
        v289 = v288 + 8;
        goto LABEL_325;
      }
      v290 = (char *)*v112;
      v291 = (uint64_t)&v288[-*v112];
      v292 = v291 >> 3;
      v293 = (v291 >> 3) + 1;
      if (v293 >> 61)
LABEL_412:
        sub_207CA420C();
      v294 = v287 - (_QWORD)v290;
      if (v294 >> 2 > v293)
        v293 = v294 >> 2;
      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8)
        v295 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v295 = v293;
      if (v295)
      {
        if (v295 >> 61)
          goto LABEL_411;
        v296 = operator new(8 * v295);
      }
      else
      {
        v296 = 0;
      }
      v298 = &v296[8 * v292];
      *v298 = v412[v137];
      v289 = v298 + 1;
      if (v288 == v290)
      {
        v105 = v412;
        *v399 = v298;
        v399[1] = v289;
        v399[2] = &v296[8 * v295];
        if (v288)
          goto LABEL_324;
      }
      else
      {
        v299 = v288 - v290 - 8;
        if (v299 < 0x58)
        {
          v105 = v412;
          goto LABEL_322;
        }
        v300 = v288 - v296 - v291;
        v105 = v412;
        if (v300 < 0x20)
          goto LABEL_432;
        v301 = (v299 >> 3) + 1;
        v302 = 8 * (v301 & 0x3FFFFFFFFFFFFFFCLL);
        v303 = &v288[-v302];
        v298 = (_QWORD *)((char *)v298 - v302);
        v304 = (float64x2_t *)&v296[8 * v292 - 16];
        v305 = (float64x2_t *)(v288 - 16);
        v306 = v301 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v305[-1];
          v307 = *v305;
          v304[-1] = v134;
          *v304 = v307;
          v304 -= 2;
          v305 -= 2;
          v306 -= 4;
        }
        while (v306);
        v288 = v303;
        if (v301 != (v301 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_432:
          do
          {
LABEL_322:
            v308 = *((_QWORD *)v288 - 1);
            v288 -= 8;
            *--v298 = v308;
          }
          while (v288 != v290);
        }
        v288 = (char *)*v399;
        *v399 = v298;
        v399[1] = v289;
        v399[2] = &v296[8 * v295];
        if (v288)
LABEL_324:
          operator delete(v288);
      }
LABEL_325:
      *v392 = v289;
      v309 = (char *)*v398;
      if ((unint64_t)*v398 < *v393)
      {
        *(_QWORD *)v309 = v410;
        v310 = (uint64_t)(v309 + 8);
        v112 = v399;
        goto LABEL_347;
      }
      v311 = (char *)*v391;
      v312 = v309 - (_BYTE *)*v391;
      v313 = v312 >> 3;
      v314 = (v312 >> 3) + 1;
      if (v314 >> 61)
LABEL_413:
        sub_207CA420C();
      v315 = *v393 - (_QWORD)v311;
      if (v315 >> 2 > v314)
        v314 = v315 >> 2;
      if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8)
        v316 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v316 = v314;
      if (v316)
      {
        if (v316 >> 61)
LABEL_411:
          sub_207CA3AB8();
        v317 = operator new(8 * v316);
        v318 = &v317[8 * v313];
        *v318 = v410;
        v310 = (uint64_t)(v318 + 1);
        v319 = v309 - v311;
        if (v309 == v311)
          goto LABEL_344;
LABEL_338:
        v320 = v319 - 8;
        if (v320 < 0x58)
          goto LABEL_433;
        if ((unint64_t)(v309 - &v317[v312]) < 0x20)
          goto LABEL_433;
        v321 = (v320 >> 3) + 1;
        v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
        v323 = &v309[-v322];
        v318 = (_QWORD *)((char *)v318 - v322);
        v324 = (float64x2_t *)&v317[8 * v313 - 16];
        v325 = (float64x2_t *)(v309 - 16);
        v326 = v321 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v325[-1];
          v327 = *v325;
          v324[-1] = v134;
          *v324 = v327;
          v324 -= 2;
          v325 -= 2;
          v326 -= 4;
        }
        while (v326);
        v309 = v323;
        if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_433:
          do
          {
            v328 = *((_QWORD *)v309 - 1);
            v309 -= 8;
            *--v318 = v328;
          }
          while (v309 != v311);
        }
      }
      else
      {
        v317 = 0;
        v318 = (_QWORD *)(8 * v313);
        *(_QWORD *)(8 * v313) = v410;
        v310 = 8 * v313 + 8;
        v319 = v309 - v311;
        if (v309 != v311)
          goto LABEL_338;
      }
LABEL_344:
      *v391 = v318;
      *v398 = v310;
      *v393 = &v317[8 * v316];
      if (v311)
        operator delete(v311);
      v112 = v399;
      v105 = v412;
LABEL_347:
      v106 = v408;
      *v398 = v310;
      ++v397;
      v395 = 1;
LABEL_131:
      if (++v137 < (unint64_t)((uint64_t)(a1[1] - *a1) >> 5))
        continue;
      break;
    }
    if (v397 < 2 || (a4 & 1) == 0)
      goto LABEL_93;
    v335 = v112[9];
    v336 = *v112;
    v337 = 8 * (((unint64_t)(v112[10] - v335) >> 3) - v397);
    v432 = vcvtq_f64_f32(*(float32x2_t *)(*v112 + v337));
    v433 = 0x3FF0000000000000;
    v337 += 8;
    v430 = vcvtq_f64_f32(*(float32x2_t *)(v336 + v337));
    v431 = 0x3FF0000000000000;
    v338 = *a2 + (*(_QWORD *)(v335 + v337) << 6);
    v339 = *(float32x2_t *)v338;
    v134.f64[0] = *(float64_t *)(v338 + 16);
    v340.i32[0] = *(_DWORD *)(v338 + 24);
    v341 = *(int32x2_t *)(v338 + 32);
    v342.i32[0] = *(_DWORD *)(v338 + 52);
    v339.i32[0] = *(_DWORD *)(v338 + 48);
    v342.i32[1] = *(_DWORD *)(v338 + 8);
    v340.i32[1] = *(_DWORD *)(v338 + 40);
    v343 = *(float *)(v338 + 56);
    v413 = vcvtq_f64_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v338, *(int32x2_t *)&v134.f64[0]));
    v414 = *(float *)v341.i32;
    v415 = vcvtq_f64_f32(v339);
    v416 = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&v134.f64[0], v341));
    v417 = vcvtq_f64_f32(v342);
    v418 = (int8x16_t)vcvtq_f64_f32(v340);
    v419 = v343;
    v344 = v399;
    if (!sub_208128C74((uint64_t)v429, (uint64_t)&v432, (uint64_t)&v430, (uint64_t)&v413, v418, v134))
      goto LABEL_92;
    v346 = (char *)v399[13];
    v345 = v399[14];
    if ((unint64_t)v346 < v345)
    {
      *(_QWORD *)v346 = v410;
      v347 = (uint64_t)(v346 + 8);
      goto LABEL_377;
    }
    v348 = (char *)*v386;
    v349 = v346 - (_BYTE *)*v386;
    v350 = v349 >> 3;
    v351 = (v349 >> 3) + 1;
    if (v351 >> 61)
      sub_207CA420C();
    v352 = v345 - (_QWORD)v348;
    if (v352 >> 2 > v351)
      v351 = v352 >> 2;
    if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFF8)
      v353 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v353 = v351;
    if (!v353)
    {
      v354 = 0;
      v355 = (_QWORD *)(8 * v350);
      *(_QWORD *)(8 * v350) = v410;
      v347 = 8 * v350 + 8;
      v356 = v346 - v348;
      if (v346 != v348)
        goto LABEL_366;
      goto LABEL_369;
    }
    if (v353 >> 61)
      sub_207CA3AB8();
    v354 = operator new(8 * v353);
    v355 = &v354[8 * v350];
    *v355 = v410;
    v347 = (uint64_t)(v355 + 1);
    v356 = v346 - v348;
    if (v346 == v348)
    {
LABEL_369:
      v344 = v399;
      goto LABEL_375;
    }
LABEL_366:
    v357 = v356 - 8;
    if (v357 < 0x58)
    {
      v344 = v399;
      goto LABEL_374;
    }
    v358 = v346 - &v354[v349];
    v344 = v399;
    if (v358 < 0x20)
      goto LABEL_434;
    v359 = (v357 >> 3) + 1;
    v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
    v361 = &v346[-v360];
    v355 = (_QWORD *)((char *)v355 - v360);
    v362 = &v354[8 * v350 - 16];
    v363 = v346 - 16;
    v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v365 = *(_OWORD *)v363;
      *(v362 - 1) = *((_OWORD *)v363 - 1);
      *v362 = v365;
      v362 -= 2;
      v363 -= 32;
      v364 -= 4;
    }
    while (v364);
    v346 = v361;
    if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_434:
      do
      {
LABEL_374:
        v366 = *((_QWORD *)v346 - 1);
        v346 -= 8;
        *--v355 = v366;
      }
      while (v346 != v348);
    }
LABEL_375:
    v344[12] = v355;
    v344[13] = v347;
    v344[14] = &v354[8 * v353];
    if (v348)
      operator delete(v348);
LABEL_377:
    v344[13] = v347;
    v367 = v429[0];
    v368 = v429[1];
    v369 = v429[2];
    v370 = (float **)v344[15];
    v372 = v370[1];
    v371 = (unint64_t)v370[2];
    if ((unint64_t)v372 < v371)
    {
      *v372 = v367;
      v372[1] = v368;
      v110 = v372 + 3;
      v372[2] = v369;
    }
    else
    {
      v373 = *v370;
      v374 = 0xAAAAAAAAAAAAAAABLL * (v372 - *v370);
      v375 = v374 + 1;
      if (v374 + 1 > 0x1555555555555555)
        sub_207CA420C();
      v376 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v371 - (_QWORD)v373) >> 2);
      if (2 * v376 > v375)
        v375 = 2 * v376;
      if (v376 >= 0xAAAAAAAAAAAAAAALL)
        v377 = 0x1555555555555555;
      else
        v377 = v375;
      if (v377)
      {
        if (v377 > 0x1555555555555555)
          sub_207CA3AB8();
        v378 = (char *)operator new(12 * v377);
      }
      else
      {
        v378 = 0;
      }
      v379 = (float *)&v378[12 * v374];
      *v379 = v367;
      v379[1] = v368;
      v379[2] = v369;
      v380 = v379;
      if (v372 != v373)
      {
        do
        {
          v381 = *(_QWORD *)(v372 - 3);
          v372 -= 3;
          v382 = *((_DWORD *)v372 + 2);
          *(_QWORD *)(v380 - 3) = v381;
          v380 -= 3;
          *((_DWORD *)v380 + 2) = v382;
        }
        while (v372 != v373);
        v372 = *v370;
      }
      v383 = (float *)&v378[12 * v377];
      v110 = v379 + 3;
      *v370 = v380;
      v370[1] = v379 + 3;
      v370[2] = v383;
      if (v372)
        operator delete(v372);
    }
    v370[1] = v110;
LABEL_92:
    v105 = v412;
    v106 = v408;
LABEL_93:
    if (++v410 != v388)
      continue;
    break;
  }
LABEL_393:
  if (v106)
    operator delete(v106);
  if (v105)
    operator delete(v105);
  if (__p)
    operator delete(__p);
  if (v423)
  {
    v424 = (char *)v423;
    operator delete(v423);
  }
  return kdebug_trace();
}

void sub_207D70B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  void *v51;

  if (a25)
  {
    operator delete(a25);
    if (!a29)
    {
LABEL_3:
      v51 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!a29)
  {
    goto LABEL_3;
  }
  operator delete(a29);
  v51 = __p;
  if (!__p)
  {
LABEL_5:
    if (a46)
      operator delete(a46);
    sub_207D80E10(v49);
    sub_207CD822C((uint64_t)&a49);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v51);
  goto LABEL_5;
}

uint64_t sub_207D70CC8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, __int32 **a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  float32x2_t v23;
  __int128 v24;
  __int128 v25;
  float32x2_t v26;
  void **v27;
  char *v28;
  __int32 *v29;
  __int32 *v30;
  uint64_t v31;
  __int32 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  __int32 *v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  float32x2_t *v62;
  float *v63;
  float32x4_t v64;
  float *v65;
  int8x16_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  size_t v104;
  _QWORD *v105;
  __int32 *v106;
  _BOOL4 v107;
  BOOL v108;
  double v109;
  float *v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t *v114;
  int v115;
  uint64_t v116;
  double v117;
  _BOOL4 v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  int v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t i;
  unsigned __int8 v127;
  float32x2_t *v128;
  float32x2_t v129;
  float64x2_t v130;
  double v131;
  float32x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  __int32 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  char *v140;
  float32x2_t v141;
  double v142;
  double v143;
  float32x2_t v144;
  float32x2_t v145;
  float *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char **v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _BYTE *v161;
  _QWORD *v162;
  int64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  float64x2_t *v168;
  float64x2_t *v169;
  uint64_t v170;
  float64x2_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  _QWORD *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  float64x2_t *v188;
  float64x2_t *v189;
  uint64_t v190;
  float64x2_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  _BYTE *v200;
  _QWORD *v201;
  int64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  float64x2_t *v207;
  float64x2_t *v208;
  uint64_t v209;
  float64x2_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  _QWORD *v219;
  int64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  float64x2_t *v226;
  float64x2_t *v227;
  uint64_t v228;
  float64x2_t v229;
  uint64_t v230;
  char *v231;
  unint64_t v232;
  char *v233;
  _QWORD *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  _QWORD *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  float64x2_t *v248;
  float64x2_t *v249;
  uint64_t v250;
  float64x2_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _BYTE *v261;
  _QWORD *v262;
  int64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  float64x2_t *v268;
  float64x2_t *v269;
  uint64_t v270;
  float64x2_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  _QWORD *v281;
  int64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  unint64_t v287;
  char *v288;
  _QWORD *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  _BYTE *v296;
  char *v297;
  _QWORD *v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  float64x2_t *v304;
  float64x2_t *v305;
  uint64_t v306;
  float64x2_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  _BYTE *v317;
  _QWORD *v318;
  int64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  float64x2_t *v324;
  float64x2_t *v325;
  uint64_t v326;
  float64x2_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  float64x2_t *v331;
  float64x2_t *v332;
  uint64_t v333;
  float64x2_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x2_t v339;
  float32x2_t v340;
  int32x2_t v341;
  float32x2_t v342;
  double v343;
  _QWORD *v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  _BYTE *v354;
  _QWORD *v355;
  int64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  float v367;
  float v368;
  float v369;
  float **v370;
  unint64_t v371;
  float *v372;
  float *v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  char *v378;
  float *v379;
  float *v380;
  uint64_t v381;
  int v382;
  float *v383;
  uint64_t v385;
  void **v386;
  uint64_t v388;
  void **v390;
  void **v391;
  _QWORD *v392;
  _QWORD *v393;
  uint64_t v394;
  char v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _BOOL4 v403;
  uint64_t v404;
  float64_t v405;
  __int128 v407;
  __int32 *v408;
  __int128 v409;
  uint64_t v410;
  __int128 v411;
  _QWORD *v412;
  float64x2_t v413;
  double v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  int8x16_t v418;
  double v419;
  void *__p;
  char *v421;
  char *v422;
  void *v423;
  char *v424;
  char *v425;
  __int128 v426;
  __int128 v427;
  int v428;
  double v429[3];
  float64x2_t v430;
  uint64_t v431;
  float64x2_t v432;
  uint64_t v433;
  uint64_t v434;

  v434 = *MEMORY[0x24BDAC8D0];
  v426 = 0u;
  v427 = 0u;
  v428 = 733237104;
  kdebug_trace();
  v402 = *a1;
  v404 = a1[1];
  v13 = v404 - *a1;
  if ((unint64_t)v13 <= 0x20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 378, (uint64_t)"num_cams > 1", 12, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v14 = v13 >> 5, v13 >> 5 != (uint64_t)(a2[1] - *a2) >> 6) || v14 != 0x8E38E38E38E38E39 * (a3[1] - *a3))&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 379, (uint64_t)"num_cams == T_p0pn_vec.size() && num_cams == K_pn.size()", 56, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *(unsigned int *)(*a1 + 8);
  v16 = *(unsigned int *)(*a1 + 12);
  v17 = *(unsigned int *)(*a1 + 16);
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  *((_OWORD *)a5 + 2) = 0u;
  *((_OWORD *)a5 + 3) = 0u;
  *((_OWORD *)a5 + 4) = 0u;
  *((_OWORD *)a5 + 5) = 0u;
  *((_OWORD *)a5 + 6) = 0u;
  *((_OWORD *)a5 + 7) = 0u;
  *((_OWORD *)a5 + 8) = 0u;
  *((_OWORD *)a5 + 9) = 0u;
  a5[20] = 0;
  v388 = v17;
  v18 = v14 * v17;
  v413 = 0uLL;
  v414 = 0.0;
  v399 = a5;
  if (v14 * v17)
  {
    if (v18 >> 61)
      sub_207CA420C();
    v19 = (char *)operator new(8 * v18);
    a5[8] = &v19[8 * v18];
    a5[6] = v19;
    v391 = (void **)(a5 + 6);
    v393 = a5 + 8;
    a5[7] = v19;
    v398 = a5 + 7;
    v20 = (char *)operator new(8 * v18);
    *a5 = v20;
    a5[1] = v20;
    v392 = a5 + 1;
    a5[2] = &v20[8 * v18];
    v21 = (char *)operator new(8 * v18);
    v22 = &v21[8 * v18];
  }
  else
  {
    v21 = 0;
    v22 = 0;
    a5[6] = 0;
    v391 = (void **)(a5 + 6);
    a5[7] = 0;
    v398 = a5 + 7;
    a5[8] = 0;
    v393 = a5 + 8;
    a5[1] = 0;
    v392 = a5 + 1;
    *a5 = 0;
    a5[2] = 0;
  }
  v400 = v13 >> 5;
  v385 = v16;
  v394 = v15;
  v396 = v13;
  a5[9] = v21;
  a5[10] = v21;
  a5[11] = v22;
  v390 = (void **)(a5 + 9);
  sub_207D80CAC((char **)a5 + 15);
  v27 = (void **)(a5 + 18);
  v28 = (char *)a5[18];
  a5[19] = v28;
  v29 = *a3;
  v30 = a3[1];
  while (v29 != v30)
  {
    v32 = *v29;
    v33 = a5[20];
    if ((unint64_t)v28 < v33)
    {
      *(_DWORD *)v28 = v32;
      v31 = (uint64_t)(v28 + 4);
      goto LABEL_12;
    }
    v34 = (char *)*v27;
    v35 = v28 - (_BYTE *)*v27;
    v36 = v35 >> 2;
    v37 = (v35 >> 2) + 1;
    if (v37 >> 62)
      sub_207D0CD58();
    v38 = v33 - (_QWORD)v34;
    if (v38 >> 1 > v37)
      v37 = v38 >> 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 62)
        sub_207CA3AB8();
      v40 = operator new(4 * v39);
      v41 = (__int32 *)&v40[4 * v36];
      *v41 = v32;
      v31 = (uint64_t)(v41 + 1);
      v42 = v28 - v34;
      if (v28 == v34)
        goto LABEL_29;
    }
    else
    {
      v40 = 0;
      v41 = (__int32 *)(4 * v36);
      *(_DWORD *)(4 * v36) = v32;
      v31 = 4 * v36 + 4;
      v42 = v28 - v34;
      if (v28 == v34)
        goto LABEL_29;
    }
    v43 = v42 - 4;
    if (v43 >= 0xBC)
    {
      v47 = (v28 - 4 - v34) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v40[v35 - 4 - v47] > &v40[v35 - 4])
      {
        v44 = v28;
      }
      else if (&v28[-v47 - 4] > v28 - 4)
      {
        v44 = v28;
      }
      else if ((unint64_t)(v28 - v40 - v35) >= 0x20)
      {
        v48 = (v43 >> 2) + 1;
        v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        v44 = &v28[-v49];
        v41 = (__int32 *)((char *)v41 - v49);
        v50 = &v40[4 * v36 - 16];
        v51 = v28 - 16;
        v52 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *v50 = v53;
          v50 -= 2;
          v51 -= 32;
          v52 -= 8;
        }
        while (v52);
        if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_29;
      }
      else
      {
        v44 = v28;
      }
    }
    else
    {
      v44 = v28;
    }
    do
    {
      v45 = *((_DWORD *)v44 - 1);
      v44 -= 4;
      *--v41 = v45;
    }
    while (v44 != v34);
LABEL_29:
    v46 = &v40[4 * v39];
    a5 = v399;
    v399[18] = v41;
    v399[19] = v31;
    v399[20] = v46;
    if (v34)
      operator delete(v34);
LABEL_12:
    a5[19] = v31;
    v29 += 9;
    v28 = (char *)v31;
  }
  v423 = 0;
  v424 = 0;
  v425 = 0;
  if (v404 == v402)
  {
    v56 = 0;
    v55 = 0;
    v54 = v400;
    v57 = a1[1];
    if (v57 != *a1)
      goto LABEL_44;
    goto LABEL_79;
  }
  v54 = v400;
  if (v396 < 0)
    sub_207CA420C();
  v55 = (char *)operator new(36 * v400);
  v56 = &v55[36 * v400];
  v423 = v55;
  v424 = v55;
  v425 = v56;
  v57 = a1[1];
  if (v57 == *a1)
  {
LABEL_79:
    v61 = v57;
    __p = 0;
    v421 = 0;
    v422 = 0;
    v103 = v396;
    if (v404 != v402)
      goto LABEL_75;
    goto LABEL_80;
  }
LABEL_44:
  v58 = 0;
  v59 = v424;
  v60 = v55;
  do
  {
    while (1)
    {
      v62 = (float32x2_t *)(*a2 + (v58 << 6));
      v63 = (float *)*a3;
      v75 = v62[6];
      v23.i32[0] = v62[7].i32[0];
      *(float32x2_t *)v64.f32 = v75;
      v64.i64[1] = v23.u32[0];
      v65 = (float *)&(*a3)[9 * v58];
      v66 = (int8x16_t)vnegq_f32(v64);
      LODWORD(v24) = v62[1].i32[0];
      LODWORD(v25) = v62[3].i32[0];
      v67 = v62[2];
      v26.i32[0] = v62[5].i32[0];
      v68 = v62[4];
      v69 = vmls_lane_f32(vmla_n_f32(vmul_f32(*v62, 0), v67, v23.f32[0]), v68, v75, 1);
      v70 = vmls_lane_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v24, 0), v23, *(float32x2_t *)&v25), v26, v75, 1);
      v71 = vmla_n_f32(vmla_f32(vmul_laneq_f32(*v62, (float32x4_t)v66, 2), 0, v67), v68, v75.f32[0]);
      v72 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v24, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)), 0, *(float32x2_t *)&v25), v75, v26);
      v73 = vmla_f32(vmls_lane_f32(vmul_lane_f32(*v62, v75, 1), v67, v75, 0), 0, v68);
      v74 = vmla_f32(vmla_f32(vmul_lane_f32(*(float32x2_t *)&v24, v75, 1), *(float32x2_t *)v66.i8, *(float32x2_t *)&v25), 0, v26);
      v75.i32[0] = **a3;
      v76 = 1.0 / v75.f32[0];
      if (v75.f32[0] == 0.0)
      {
        v76 = 1.0;
        v75.f32[0] = 1.0;
      }
      *(float *)&v24 = (float)-v63[6] / v75.f32[0];
      v77 = v63[4];
      v78 = 1.0 / v77;
      if (v77 == 0.0)
      {
        v78 = 1.0;
        v77 = 1.0;
      }
      *(float *)&v25 = (float)-v63[7] / v77;
      v79 = *v65;
      v26.f32[0] = 1.0 / *v65;
      if (*v65 == 0.0)
      {
        v26.f32[0] = 1.0;
        v79 = 1.0;
      }
      v75.f32[0] = (float)-v65[6] / v79;
      v80 = v65[4];
      v81 = (float32x2_t)LODWORD(v76);
      v82.i32[0] = 0;
      v82.f32[1] = v78;
      v83 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v81, v69.f32[0]), v82, v69, 1), 0, v70.f32[0]);
      v84 = vadd_f32(v70, vmla_lane_f32(vmul_f32(*(float32x2_t *)&v24, v69), *(float32x2_t *)&v25, v69, 1));
      v85 = vmla_lane_f32(vmul_n_f32(v81, v71.f32[0]), v82, v71, 1);
      v86 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v24, v71), *(float32x2_t *)&v25, v71, 1);
      v71.f32[0] = 1.0 / v80;
      if (v80 == 0.0)
      {
        v71.f32[0] = 1.0;
        v80 = 1.0;
      }
      v87 = vmla_n_f32(v85, 0, v72.f32[0]);
      v88 = vadd_f32(v72, v86);
      v89 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v81, v73.f32[0]), v82, v73, 1), 0, v74.f32[0]);
      v90 = vadd_f32(v74, vmla_lane_f32(vmul_f32(*(float32x2_t *)&v24, v73), *(float32x2_t *)&v25, v73, 1));
      *(float32x2_t *)&v24 = vmla_f32(vmla_f32(vmul_n_f32(v83, v26.f32[0]), 0, v87), 0, v89);
      v91 = vmla_f32(vmla_f32(vmul_f32(v84, v26), 0, v88), 0, v90);
      *((float32x2_t *)&v24 + 1) = v91;
      v91.f32[0] = (float)-v65[7] / v80;
      *(float32x2_t *)&v25 = vmla_f32(vmla_n_f32(vmul_f32(v83, 0), v87, v71.f32[0]), 0, v89);
      v92 = vmla_f32(vmla_f32(vmul_f32(v84, 0), v71, v88), 0, v90);
      *((float32x2_t *)&v25 + 1) = v92;
      v23 = vmla_n_f32(vmul_n_f32(v83, v75.f32[0]), v87, v91.f32[0]);
      *(float32x2_t *)&v94 = vadd_f32(v89, v23);
      v93 = vadd_f32(v90, vmla_f32(vmul_f32(v84, v75), v91, v88));
      *((float32x2_t *)&v94 + 1) = v93;
      if (v60 >= v56)
        break;
      *((_DWORD *)v60 + 2) = DWORD2(v24);
      *(_QWORD *)v60 = v24;
      *((_DWORD *)v60 + 5) = v92.i32[0];
      *(_QWORD *)(v60 + 12) = v25;
      *((_DWORD *)v60 + 8) = v93.i32[0];
      v59 = v60 + 36;
      *((_QWORD *)v60 + 3) = v94;
      ++v58;
      v57 = *a1;
      v61 = a1[1];
      v60 += 36;
      if (v58 >= (v61 - *a1) >> 5)
        goto LABEL_74;
    }
    v95 = 0x8E38E38E38E38E39 * ((v60 - v55) >> 2) + 1;
    if (v95 > 0x71C71C71C71C71CLL)
    {
      v424 = v59;
      v425 = v56;
      v423 = v55;
      sub_207CA420C();
    }
    if (0x1C71C71C71C71C72 * ((v56 - v55) >> 2) > v95)
      v95 = 0x1C71C71C71C71C72 * ((v56 - v55) >> 2);
    if (0x8E38E38E38E38E39 * ((v56 - v55) >> 2) >= 0x38E38E38E38E38ELL)
      v96 = 0x71C71C71C71C71CLL;
    else
      v96 = v95;
    if (v96)
    {
      v407 = v94;
      v409 = v25;
      v411 = v24;
      if (v96 > 0x71C71C71C71C71CLL)
      {
        v424 = v59;
        v425 = v56;
        v423 = v55;
        sub_207CA3AB8();
      }
      v97 = (char *)operator new(36 * v96);
      v25 = v409;
      v24 = v411;
      v94 = v407;
    }
    else
    {
      v97 = 0;
    }
    v98 = &v97[4 * ((v60 - v55) >> 2)];
    *(_QWORD *)v98 = v24;
    *((_DWORD *)v98 + 2) = DWORD2(v24);
    *((_DWORD *)v98 + 5) = DWORD2(v25);
    *(_QWORD *)(v98 + 12) = v25;
    *((_QWORD *)v98 + 3) = v94;
    *((_DWORD *)v98 + 8) = DWORD2(v94);
    if (v60 == v55)
    {
      v100 = &v97[4 * ((v60 - v55) >> 2)];
      v56 = &v97[36 * v96];
      v59 = v98 + 36;
      if (v55)
        goto LABEL_69;
    }
    else
    {
      v99 = &v97[4 * ((v60 - v55) >> 2)];
      do
      {
        v100 = v99 - 36;
        v101 = *(_OWORD *)(v60 - 36);
        v102 = *(_OWORD *)(v60 - 20);
        *((_DWORD *)v99 - 1) = *((_DWORD *)v60 - 1);
        *(_OWORD *)(v99 - 20) = v102;
        *(_OWORD *)(v99 - 36) = v101;
        v60 -= 36;
        v99 -= 36;
      }
      while (v60 != v55);
      v56 = &v97[36 * v96];
      v59 = v98 + 36;
      if (v55)
LABEL_69:
        operator delete(v55);
    }
    v55 = v100;
    ++v58;
    v57 = *a1;
    v61 = a1[1];
    v60 = v59;
  }
  while (v58 < (v61 - *a1) >> 5);
LABEL_74:
  v424 = v59;
  v425 = v56;
  v422 = 0;
  v423 = v55;
  v54 = v400;
  __p = 0;
  v421 = 0;
  v103 = v396;
  if (v404 == v402)
  {
LABEL_80:
    v105 = 0;
    v106 = 0;
    if (!(_DWORD)v388)
      goto LABEL_393;
    goto LABEL_81;
  }
LABEL_75:
  if ((v103 & 0x8000000000000000) != 0)
    sub_207D0CD58();
  __p = operator new(v103 >> 3);
  v422 = (char *)__p + 4 * v54;
  bzero(__p, v103 >> 3);
  v421 = (char *)__p + (v103 >> 3);
  v104 = v103 >> 2;
  v105 = operator new(v103 >> 2);
  v106 = (__int32 *)operator new(v104);
  if (!(_DWORD)v388)
    goto LABEL_393;
LABEL_81:
  v107 = v394 != 0;
  if (!(_DWORD)v385)
    v107 = 0;
  v403 = v107;
  if ((_DWORD)v385)
    v108 = (_DWORD)v394 == 0;
  else
    v108 = 1;
  *(_QWORD *)&v109 = v394 | (v385 << 32);
  if (v108)
    v109 = 0.0;
  v405 = v109;
  if (v61 == v57)
    goto LABEL_393;
  v410 = 0;
  v401 = HIDWORD(*(_QWORD *)&v109);
  v386 = (void **)(v399 + 12);
  v412 = v105;
  v408 = v106;
  while (2)
  {
    v111 = *a1;
    v112 = v399;
    if (a1[1] == *a1)
      goto LABEL_93;
    v113 = 0;
    do
    {
      v432.f64[0] = 0.0;
      v430.f64[0] = 0.0;
      v429[0] = 0.0;
      v114 = (uint64_t *)(v111 + 32 * v113);
      v115 = *((_DWORD *)v114 + 7);
      v116 = *v114;
      v117 = *(double *)((char *)v114 + 20);
      v118 = v403;
      if (v115 != -1)
        v118 = 0;
      if (v118)
      {
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
        v119 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v120 = qword_2545309E8;
          v121 = qword_2545309F0;
          while (v120 != v121)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v120)(*(_QWORD *)(v120 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            v120 += 16;
          }
        }
        v122 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        v105 = v412;
        if (!byte_254530A10)
          abort();
        qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
      }
      *(_QWORD *)&v413.f64[0] = v116 + 2 * (v115 * v410);
      v413.f64[1] = v405;
      v414 = v117;
      v123 = HIDWORD(v117) * v401;
      v106 = v408;
      if (v123 == -1)
      {
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
        v124 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v124 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v125 = qword_2545309E8;
          for (i = qword_2545309F0; v125 != i; v125 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v125)(*(_QWORD *)(v125 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
        }
        v127 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        v105 = v412;
        if (!byte_254530A10)
          abort();
        qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
      }
      sub_207D5D684((uint64_t)&v413, v432.f64, v430.f64, v429);
      v128 = (float32x2_t *)&(*a3)[9 * v113];
      v129.i32[0] = v128->i32[0];
      v130.f64[0] = v432.f64[0];
      v131 = v430.f64[0];
      v132.f32[0] = v432.f64[0];
      v130.f64[1] = v430.f64[0];
      v133 = vcvtq_f64_f32(v128[3]);
      v134 = vsubq_f64(v130, v133);
      v129.i32[1] = v128[2].i32[0];
      v105[v113] = vcvt_f32_f64(vdivq_f64(v134, vcvtq_f64_f32(v129)));
      v129.f32[0] = v131;
      v135 = &v408[2 * v113];
      *v135 = v132.i32[0];
      v135[1] = v129.i32[0];
      v129.f32[0] = v429[0];
      *((_DWORD *)__p + v113++) = v129.i32[0];
      v111 = *a1;
      v136 = a1[1];
    }
    while (v113 < (v136 - *a1) >> 5);
    if (v136 == v111)
      goto LABEL_93;
    v395 = 0;
    v397 = 0;
    v137 = 0;
    while (2)
    {
      if (!v137)
        goto LABEL_147;
      v139 = *(float32x2_t *)&v106[2 * v137];
      v140 = (char *)v423 + 36 * v137;
      v141 = vadd_f32(*(float32x2_t *)(v140 + 24), vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v140, v139.f32[0]), *(float32x2_t *)(v140 + 12), v139, 1));
      if (v141.f32[0] == 0.0)
        goto LABEL_140;
      v142 = v141.f32[0];
      if (v141.f32[0] <= 0.0)
        v142 = 0.0 - v141.f32[0];
      if (v142 <= 0.00000001)
      {
LABEL_140:
        if (v141.f32[1] == 0.0)
          goto LABEL_147;
        v143 = v141.f32[1];
        if (v141.f32[1] <= 0.0)
          v143 = 0.0 - v143;
        if (v143 <= 0.00000001)
        {
LABEL_147:
          v146 = (float *)__p;
          goto LABEL_148;
        }
      }
      LODWORD(v131) = *((_DWORD *)v140 + 2);
      LODWORD(v133.f64[0]) = *((_DWORD *)v140 + 5);
      v144 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v131, v139), *(float32x2_t *)&v133.f64[0], v139, 1);
      v132.i32[0] = *((_DWORD *)v140 + 8);
      v145 = vadd_f32(v132, v144);
      v144.i32[0] = *v106;
      LODWORD(v133.f64[0]) = v106[1];
      v132 = (float32x2_t)vdup_lane_s32((int32x2_t)v141, 1);
      v145.i32[0] = vadd_f32(v145, vmla_lane_f32(vmul_f32(v144, v141), *(float32x2_t *)&v133.f64[0], v141, 1)).u32[0];
      v131 = COERCE_DOUBLE(vmla_lane_f32(vmul_f32(v141, v141), v132, v141, 1));
      v146 = (float *)__p;
      if ((float)(fabsf(v145.f32[0]) / sqrtf(*(float *)&v131)) >= a8
        || *(float *)__p <= a7
        || *((float *)__p + v137) <= a7)
      {
LABEL_148:
        if (v146[v137] <= a6)
          goto LABEL_131;
        v150 = v112;
        v151 = (char *)v112[10];
        v152 = v150[11];
        if ((unint64_t)v151 < v152)
        {
          *(_QWORD *)v151 = v137;
          v153 = (uint64_t)(v151 + 8);
          v154 = (char **)v399;
          goto LABEL_170;
        }
        v155 = (char *)*v390;
        v156 = v151 - (_BYTE *)*v390;
        v157 = v156 >> 3;
        v158 = (v156 >> 3) + 1;
        if (v158 >> 61)
          goto LABEL_405;
        v159 = v152 - (_QWORD)v155;
        if (v159 >> 2 > v158)
          v158 = v159 >> 2;
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v158;
        if (v160)
        {
          if (v160 >> 61)
            goto LABEL_404;
          v161 = operator new(8 * v160);
          v162 = &v161[8 * v157];
          *v162 = v137;
          v153 = (uint64_t)(v162 + 1);
          v163 = v151 - v155;
          if (v151 == v155)
            goto LABEL_168;
        }
        else
        {
          v161 = 0;
          v162 = (_QWORD *)(8 * v157);
          *(_QWORD *)(8 * v157) = v137;
          v153 = 8 * v157 + 8;
          v163 = v151 - v155;
          if (v151 == v155)
          {
LABEL_168:
            v154 = (char **)v399;
            v399[9] = v162;
            v399[10] = v153;
            v399[11] = &v161[8 * v160];
            if (v155)
              operator delete(v155);
LABEL_170:
            v154[10] = (char *)v153;
            v174 = v154[1];
            v173 = (unint64_t)v154[2];
            if ((unint64_t)v174 < v173)
            {
              v105 = v412;
              *(_QWORD *)v174 = v412[v137];
              v175 = v174 + 8;
              goto LABEL_191;
            }
            v176 = *v154;
            v177 = v174 - *v154;
            v178 = v177 >> 3;
            v179 = (v177 >> 3) + 1;
            if (v179 >> 61)
              sub_207CA420C();
            v180 = v173 - (_QWORD)v176;
            if (v180 >> 2 > v179)
              v179 = v180 >> 2;
            if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
              v181 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v181 = v179;
            if (v181)
            {
              if (v181 >> 61)
                goto LABEL_404;
              v182 = operator new(8 * v181);
            }
            else
            {
              v182 = 0;
            }
            v183 = &v182[8 * v178];
            *v183 = v412[v137];
            v175 = v183 + 1;
            if (v174 == v176)
            {
              *v399 = v183;
              v399[1] = v175;
              v399[2] = &v182[8 * v181];
              v105 = v412;
              if (v174)
LABEL_190:
                operator delete(v174);
            }
            else
            {
              v184 = v174 - v176 - 8;
              if (v184 < 0x58)
                goto LABEL_426;
              if ((unint64_t)(v174 - v182 - v177) < 0x20)
                goto LABEL_426;
              v185 = (v184 >> 3) + 1;
              v186 = 8 * (v185 & 0x3FFFFFFFFFFFFFFCLL);
              v187 = &v174[-v186];
              v183 = (_QWORD *)((char *)v183 - v186);
              v188 = (float64x2_t *)&v182[8 * v178 - 16];
              v189 = (float64x2_t *)(v174 - 16);
              v190 = v185 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v134 = v189[-1];
                v191 = *v189;
                v188[-1] = v134;
                *v188 = v191;
                v188 -= 2;
                v189 -= 2;
                v190 -= 4;
              }
              while (v190);
              v174 = v187;
              if (v185 != (v185 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_426:
                do
                {
                  v192 = *((_QWORD *)v174 - 1);
                  v174 -= 8;
                  *--v183 = v192;
                }
                while (v174 != v176);
              }
              v174 = (char *)*v399;
              *v399 = v183;
              v399[1] = v175;
              v399[2] = &v182[8 * v181];
              v105 = v412;
              if (v174)
                goto LABEL_190;
            }
LABEL_191:
            *v392 = v175;
            v193 = (char *)*v398;
            if ((unint64_t)*v398 < *v393)
            {
              *(_QWORD *)v193 = v410;
              v138 = (uint64_t)(v193 + 8);
              v112 = v399;
LABEL_130:
              v106 = v408;
              *v398 = v138;
              ++v397;
              v395 |= v137 == 0;
              goto LABEL_131;
            }
            v194 = (char *)*v391;
            v195 = v193 - (_BYTE *)*v391;
            v196 = v195 >> 3;
            v197 = (v195 >> 3) + 1;
            if (v197 >> 61)
LABEL_405:
              sub_207CA420C();
            v198 = *v393 - (_QWORD)v194;
            if (v198 >> 2 > v197)
              v197 = v198 >> 2;
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
              v199 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v199 = v197;
            if (v199)
            {
              if (v199 >> 61)
LABEL_404:
                sub_207CA3AB8();
              v200 = operator new(8 * v199);
              v201 = &v200[8 * v196];
              *v201 = v410;
              v138 = (uint64_t)(v201 + 1);
              v202 = v193 - v194;
              if (v193 == v194)
                goto LABEL_209;
            }
            else
            {
              v200 = 0;
              v201 = (_QWORD *)(8 * v196);
              *(_QWORD *)(8 * v196) = v410;
              v138 = 8 * v196 + 8;
              v202 = v193 - v194;
              if (v193 == v194)
              {
LABEL_209:
                *v391 = v201;
                *v398 = v138;
                *v393 = &v200[8 * v199];
                if (v194)
                  operator delete(v194);
                v112 = v399;
                v105 = v412;
                goto LABEL_130;
              }
            }
            v203 = v202 - 8;
            if (v203 < 0x58)
              goto LABEL_427;
            if ((unint64_t)(v193 - &v200[v195]) < 0x20)
              goto LABEL_427;
            v204 = (v203 >> 3) + 1;
            v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
            v206 = &v193[-v205];
            v201 = (_QWORD *)((char *)v201 - v205);
            v207 = (float64x2_t *)&v200[8 * v196 - 16];
            v208 = (float64x2_t *)(v193 - 16);
            v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v134 = v208[-1];
              v210 = *v208;
              v207[-1] = v134;
              *v207 = v210;
              v207 -= 2;
              v208 -= 2;
              v209 -= 4;
            }
            while (v209);
            v193 = v206;
            if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_427:
              do
              {
                v211 = *((_QWORD *)v193 - 1);
                v193 -= 8;
                *--v201 = v211;
              }
              while (v193 != v194);
            }
            goto LABEL_209;
          }
        }
        v164 = v163 - 8;
        if (v164 < 0x58)
          goto LABEL_428;
        if ((unint64_t)(v151 - v161 - v156) < 0x20)
          goto LABEL_428;
        v165 = (v164 >> 3) + 1;
        v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
        v167 = &v151[-v166];
        v162 = (_QWORD *)((char *)v162 - v166);
        v168 = (float64x2_t *)&v161[8 * v157 - 16];
        v169 = (float64x2_t *)(v151 - 16);
        v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v169[-1];
          v171 = *v169;
          v168[-1] = v134;
          *v168 = v171;
          v168 -= 2;
          v169 -= 2;
          v170 -= 4;
        }
        while (v170);
        v151 = v167;
        if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_428:
          do
          {
            v172 = *((_QWORD *)v151 - 1);
            v151 -= 8;
            *--v162 = v172;
          }
          while (v151 != v155);
        }
        goto LABEL_168;
      }
      v148 = (char *)v112[10];
      v147 = v112[11];
      if ((v395 & 1) != 0)
        goto LABEL_281;
      if ((unint64_t)v148 < v147)
      {
        *(_QWORD *)v148 = 0;
        v149 = (uint64_t)(v148 + 8);
        goto LABEL_234;
      }
      v212 = (char *)*v390;
      v213 = v148 - (_BYTE *)*v390;
      v214 = v213 >> 3;
      v215 = (v213 >> 3) + 1;
      if (v215 >> 61)
        sub_207CA420C();
      v216 = v147 - (_QWORD)v212;
      if (v216 >> 2 > v215)
        v215 = v216 >> 2;
      if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
        v217 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v217 = v215;
      if (!v217)
      {
        v218 = 0;
        v219 = (_QWORD *)(8 * v214);
        *(_QWORD *)(8 * v214) = 0;
        v149 = 8 * v214 + 8;
        v220 = v148 - v212;
        if (v148 != v212)
          goto LABEL_223;
        goto LABEL_226;
      }
      if (v217 >> 61)
        sub_207CA3AB8();
      v218 = operator new(8 * v217);
      v219 = &v218[8 * v214];
      *v219 = 0;
      v149 = (uint64_t)(v219 + 1);
      v220 = v148 - v212;
      if (v148 == v212)
      {
LABEL_226:
        v105 = v412;
        goto LABEL_232;
      }
LABEL_223:
      v221 = v220 - 8;
      if (v221 < 0x58)
      {
        v105 = v412;
        goto LABEL_231;
      }
      v222 = v148 - v218 - v213;
      v105 = v412;
      if (v222 < 0x20)
        goto LABEL_429;
      v223 = (v221 >> 3) + 1;
      v224 = 8 * (v223 & 0x3FFFFFFFFFFFFFFCLL);
      v225 = &v148[-v224];
      v219 = (_QWORD *)((char *)v219 - v224);
      v226 = (float64x2_t *)&v218[8 * v214 - 16];
      v227 = (float64x2_t *)(v148 - 16);
      v228 = v223 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v134 = v227[-1];
        v229 = *v227;
        v226[-1] = v134;
        *v226 = v229;
        v226 -= 2;
        v227 -= 2;
        v228 -= 4;
      }
      while (v228);
      v148 = v225;
      if (v223 != (v223 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_429:
        do
        {
LABEL_231:
          v230 = *((_QWORD *)v148 - 1);
          v148 -= 8;
          *--v219 = v230;
        }
        while (v148 != v212);
      }
LABEL_232:
      v231 = &v218[8 * v217];
      v112 = v399;
      v399[9] = v219;
      v399[10] = v149;
      v399[11] = v231;
      if (v212)
        operator delete(v212);
LABEL_234:
      v112[10] = v149;
      v233 = (char *)v112[1];
      v232 = v112[2];
      if ((unint64_t)v233 < v232)
      {
        *(_QWORD *)v233 = *v105;
        v234 = v233 + 8;
        goto LABEL_258;
      }
      v235 = (char *)*v112;
      v236 = (uint64_t)&v233[-*v112];
      v237 = v236 >> 3;
      v238 = (v236 >> 3) + 1;
      if (v238 >> 61)
        goto LABEL_412;
      v239 = v232 - (_QWORD)v235;
      if (v239 >> 2 > v238)
        v238 = v239 >> 2;
      if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
        v240 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v240 = v238;
      if (v240)
      {
        if (v240 >> 61)
          goto LABEL_411;
        v241 = operator new(8 * v240);
      }
      else
      {
        v241 = 0;
      }
      v242 = &v241[8 * v237];
      *v242 = *v412;
      v234 = v242 + 1;
      if (v233 == v235)
      {
        v105 = v412;
        *v399 = v242;
        v399[1] = v234;
        v399[2] = &v241[8 * v240];
        if (v233)
          goto LABEL_257;
      }
      else
      {
        v243 = v233 - v235 - 8;
        if (v243 < 0x58)
        {
          v105 = v412;
          goto LABEL_255;
        }
        v244 = v233 - &v241[v236];
        v105 = v412;
        if (v244 < 0x20)
          goto LABEL_430;
        v245 = (v243 >> 3) + 1;
        v246 = 8 * (v245 & 0x3FFFFFFFFFFFFFFCLL);
        v247 = &v233[-v246];
        v242 = (_QWORD *)((char *)v242 - v246);
        v248 = (float64x2_t *)&v241[8 * v237 - 16];
        v249 = (float64x2_t *)(v233 - 16);
        v250 = v245 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v249[-1];
          v251 = *v249;
          v248[-1] = v134;
          *v248 = v251;
          v248 -= 2;
          v249 -= 2;
          v250 -= 4;
        }
        while (v250);
        v233 = v247;
        if (v245 != (v245 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_430:
          do
          {
LABEL_255:
            v252 = *((_QWORD *)v233 - 1);
            v233 -= 8;
            *--v242 = v252;
          }
          while (v233 != v235);
        }
        v233 = (char *)*v399;
        *v399 = v242;
        v399[1] = v234;
        v399[2] = &v241[8 * v240];
        if (v233)
LABEL_257:
          operator delete(v233);
      }
LABEL_258:
      *v392 = v234;
      v253 = (char *)*v398;
      if ((unint64_t)*v398 < *v393)
      {
        *(_QWORD *)v253 = v410;
        v254 = (uint64_t)(v253 + 8);
        v112 = v399;
        goto LABEL_280;
      }
      v255 = (char *)*v391;
      v256 = v253 - (_BYTE *)*v391;
      v257 = v256 >> 3;
      v258 = (v256 >> 3) + 1;
      if (v258 >> 61)
        goto LABEL_413;
      v259 = *v393 - (_QWORD)v255;
      if (v259 >> 2 > v258)
        v258 = v259 >> 2;
      if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8)
        v260 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v260 = v258;
      if (v260)
      {
        if (v260 >> 61)
          goto LABEL_411;
        v261 = operator new(8 * v260);
        v262 = &v261[8 * v257];
        *v262 = v410;
        v254 = (uint64_t)(v262 + 1);
        v263 = v253 - v255;
        if (v253 == v255)
          goto LABEL_277;
LABEL_271:
        v264 = v263 - 8;
        if (v264 < 0x58)
          goto LABEL_431;
        if ((unint64_t)(v253 - &v261[v256]) < 0x20)
          goto LABEL_431;
        v265 = (v264 >> 3) + 1;
        v266 = 8 * (v265 & 0x3FFFFFFFFFFFFFFCLL);
        v267 = &v253[-v266];
        v262 = (_QWORD *)((char *)v262 - v266);
        v268 = (float64x2_t *)&v261[8 * v257 - 16];
        v269 = (float64x2_t *)(v253 - 16);
        v270 = v265 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v269[-1];
          v271 = *v269;
          v268[-1] = v134;
          *v268 = v271;
          v268 -= 2;
          v269 -= 2;
          v270 -= 4;
        }
        while (v270);
        v253 = v267;
        if (v265 != (v265 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_431:
          do
          {
            v272 = *((_QWORD *)v253 - 1);
            v253 -= 8;
            *--v262 = v272;
          }
          while (v253 != v255);
        }
      }
      else
      {
        v261 = 0;
        v262 = (_QWORD *)(8 * v257);
        *(_QWORD *)(8 * v257) = v410;
        v254 = 8 * v257 + 8;
        v263 = v253 - v255;
        if (v253 != v255)
          goto LABEL_271;
      }
LABEL_277:
      *v391 = v262;
      *v398 = v254;
      *v393 = &v261[8 * v260];
      if (v255)
        operator delete(v255);
      v112 = v399;
      v105 = v412;
LABEL_280:
      v112[7] = v254;
      ++v397;
      v148 = (char *)v112[10];
      v147 = v112[11];
LABEL_281:
      if ((unint64_t)v148 < v147)
      {
        *(_QWORD *)v148 = v137;
        v273 = (uint64_t)(v148 + 8);
        goto LABEL_298;
      }
      v274 = (char *)*v390;
      v275 = v148 - (_BYTE *)*v390;
      v276 = v275 >> 3;
      v277 = (v275 >> 3) + 1;
      if (v277 >> 61)
        goto LABEL_413;
      v278 = v147 - (_QWORD)v274;
      if (v278 >> 2 > v277)
        v277 = v278 >> 2;
      if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8)
        v279 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v279 = v277;
      if (!v279)
      {
        v280 = 0;
        v281 = (_QWORD *)(8 * v276);
        *(_QWORD *)(8 * v276) = v137;
        v273 = 8 * v276 + 8;
        v282 = v148 - v274;
        if (v148 != v274)
          goto LABEL_292;
LABEL_310:
        v105 = v412;
        v297 = &v280[8 * v279];
        v112 = v399;
        v399[9] = v281;
        v399[10] = v273;
        v399[11] = v297;
        if (v274)
          goto LABEL_297;
        goto LABEL_298;
      }
      if (v279 >> 61)
        goto LABEL_411;
      v280 = operator new(8 * v279);
      v281 = &v280[8 * v276];
      *v281 = v137;
      v273 = (uint64_t)(v281 + 1);
      v282 = v148 - v274;
      if (v148 == v274)
        goto LABEL_310;
LABEL_292:
      v283 = v282 - 8;
      if (v283 < 0x58 || (unint64_t)(v148 - v280 - v275) < 0x20)
      {
        v284 = v148;
        v105 = v412;
        goto LABEL_295;
      }
      v329 = (v283 >> 3) + 1;
      v330 = 8 * (v329 & 0x3FFFFFFFFFFFFFFCLL);
      v284 = &v148[-v330];
      v281 = (_QWORD *)((char *)v281 - v330);
      v331 = (float64x2_t *)&v280[8 * v276 - 16];
      v332 = (float64x2_t *)(v148 - 16);
      v333 = v329 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v134 = v332[-1];
        v334 = *v332;
        v331[-1] = v134;
        *v331 = v334;
        v331 -= 2;
        v332 -= 2;
        v333 -= 4;
      }
      while (v333);
      v105 = v412;
      if (v329 != (v329 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_295:
          v285 = *((_QWORD *)v284 - 1);
          v284 -= 8;
          *--v281 = v285;
        }
        while (v284 != v274);
      }
      v286 = &v280[8 * v279];
      v112 = v399;
      v399[9] = v281;
      v399[10] = v273;
      v399[11] = v286;
      if (v274)
LABEL_297:
        operator delete(v274);
LABEL_298:
      v112[10] = v273;
      v288 = (char *)v112[1];
      v287 = v112[2];
      if ((unint64_t)v288 < v287)
      {
        *(_QWORD *)v288 = v105[v137];
        v289 = v288 + 8;
        goto LABEL_325;
      }
      v290 = (char *)*v112;
      v291 = (uint64_t)&v288[-*v112];
      v292 = v291 >> 3;
      v293 = (v291 >> 3) + 1;
      if (v293 >> 61)
LABEL_412:
        sub_207CA420C();
      v294 = v287 - (_QWORD)v290;
      if (v294 >> 2 > v293)
        v293 = v294 >> 2;
      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8)
        v295 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v295 = v293;
      if (v295)
      {
        if (v295 >> 61)
          goto LABEL_411;
        v296 = operator new(8 * v295);
      }
      else
      {
        v296 = 0;
      }
      v298 = &v296[8 * v292];
      *v298 = v412[v137];
      v289 = v298 + 1;
      if (v288 == v290)
      {
        v105 = v412;
        *v399 = v298;
        v399[1] = v289;
        v399[2] = &v296[8 * v295];
        if (v288)
          goto LABEL_324;
      }
      else
      {
        v299 = v288 - v290 - 8;
        if (v299 < 0x58)
        {
          v105 = v412;
          goto LABEL_322;
        }
        v300 = v288 - v296 - v291;
        v105 = v412;
        if (v300 < 0x20)
          goto LABEL_432;
        v301 = (v299 >> 3) + 1;
        v302 = 8 * (v301 & 0x3FFFFFFFFFFFFFFCLL);
        v303 = &v288[-v302];
        v298 = (_QWORD *)((char *)v298 - v302);
        v304 = (float64x2_t *)&v296[8 * v292 - 16];
        v305 = (float64x2_t *)(v288 - 16);
        v306 = v301 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v305[-1];
          v307 = *v305;
          v304[-1] = v134;
          *v304 = v307;
          v304 -= 2;
          v305 -= 2;
          v306 -= 4;
        }
        while (v306);
        v288 = v303;
        if (v301 != (v301 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_432:
          do
          {
LABEL_322:
            v308 = *((_QWORD *)v288 - 1);
            v288 -= 8;
            *--v298 = v308;
          }
          while (v288 != v290);
        }
        v288 = (char *)*v399;
        *v399 = v298;
        v399[1] = v289;
        v399[2] = &v296[8 * v295];
        if (v288)
LABEL_324:
          operator delete(v288);
      }
LABEL_325:
      *v392 = v289;
      v309 = (char *)*v398;
      if ((unint64_t)*v398 < *v393)
      {
        *(_QWORD *)v309 = v410;
        v310 = (uint64_t)(v309 + 8);
        v112 = v399;
        goto LABEL_347;
      }
      v311 = (char *)*v391;
      v312 = v309 - (_BYTE *)*v391;
      v313 = v312 >> 3;
      v314 = (v312 >> 3) + 1;
      if (v314 >> 61)
LABEL_413:
        sub_207CA420C();
      v315 = *v393 - (_QWORD)v311;
      if (v315 >> 2 > v314)
        v314 = v315 >> 2;
      if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8)
        v316 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v316 = v314;
      if (v316)
      {
        if (v316 >> 61)
LABEL_411:
          sub_207CA3AB8();
        v317 = operator new(8 * v316);
        v318 = &v317[8 * v313];
        *v318 = v410;
        v310 = (uint64_t)(v318 + 1);
        v319 = v309 - v311;
        if (v309 == v311)
          goto LABEL_344;
LABEL_338:
        v320 = v319 - 8;
        if (v320 < 0x58)
          goto LABEL_433;
        if ((unint64_t)(v309 - &v317[v312]) < 0x20)
          goto LABEL_433;
        v321 = (v320 >> 3) + 1;
        v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
        v323 = &v309[-v322];
        v318 = (_QWORD *)((char *)v318 - v322);
        v324 = (float64x2_t *)&v317[8 * v313 - 16];
        v325 = (float64x2_t *)(v309 - 16);
        v326 = v321 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = v325[-1];
          v327 = *v325;
          v324[-1] = v134;
          *v324 = v327;
          v324 -= 2;
          v325 -= 2;
          v326 -= 4;
        }
        while (v326);
        v309 = v323;
        if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_433:
          do
          {
            v328 = *((_QWORD *)v309 - 1);
            v309 -= 8;
            *--v318 = v328;
          }
          while (v309 != v311);
        }
      }
      else
      {
        v317 = 0;
        v318 = (_QWORD *)(8 * v313);
        *(_QWORD *)(8 * v313) = v410;
        v310 = 8 * v313 + 8;
        v319 = v309 - v311;
        if (v309 != v311)
          goto LABEL_338;
      }
LABEL_344:
      *v391 = v318;
      *v398 = v310;
      *v393 = &v317[8 * v316];
      if (v311)
        operator delete(v311);
      v112 = v399;
      v105 = v412;
LABEL_347:
      v106 = v408;
      *v398 = v310;
      ++v397;
      v395 = 1;
LABEL_131:
      if (++v137 < (unint64_t)((uint64_t)(a1[1] - *a1) >> 5))
        continue;
      break;
    }
    if (v397 < 2 || (a4 & 1) == 0)
      goto LABEL_93;
    v335 = v112[9];
    v336 = *v112;
    v337 = 8 * (((unint64_t)(v112[10] - v335) >> 3) - v397);
    v432 = vcvtq_f64_f32(*(float32x2_t *)(*v112 + v337));
    v433 = 0x3FF0000000000000;
    v337 += 8;
    v430 = vcvtq_f64_f32(*(float32x2_t *)(v336 + v337));
    v431 = 0x3FF0000000000000;
    v338 = *a2 + (*(_QWORD *)(v335 + v337) << 6);
    v339 = *(float32x2_t *)v338;
    v134.f64[0] = *(float64_t *)(v338 + 16);
    v340.i32[0] = *(_DWORD *)(v338 + 24);
    v341 = *(int32x2_t *)(v338 + 32);
    v342.i32[0] = *(_DWORD *)(v338 + 52);
    v339.i32[0] = *(_DWORD *)(v338 + 48);
    v342.i32[1] = *(_DWORD *)(v338 + 8);
    v340.i32[1] = *(_DWORD *)(v338 + 40);
    v343 = *(float *)(v338 + 56);
    v413 = vcvtq_f64_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v338, *(int32x2_t *)&v134.f64[0]));
    v414 = *(float *)v341.i32;
    v415 = vcvtq_f64_f32(v339);
    v416 = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&v134.f64[0], v341));
    v417 = vcvtq_f64_f32(v342);
    v418 = (int8x16_t)vcvtq_f64_f32(v340);
    v419 = v343;
    v344 = v399;
    if (!sub_208128C74((uint64_t)v429, (uint64_t)&v432, (uint64_t)&v430, (uint64_t)&v413, v418, v134))
      goto LABEL_92;
    v346 = (char *)v399[13];
    v345 = v399[14];
    if ((unint64_t)v346 < v345)
    {
      *(_QWORD *)v346 = v410;
      v347 = (uint64_t)(v346 + 8);
      goto LABEL_377;
    }
    v348 = (char *)*v386;
    v349 = v346 - (_BYTE *)*v386;
    v350 = v349 >> 3;
    v351 = (v349 >> 3) + 1;
    if (v351 >> 61)
      sub_207CA420C();
    v352 = v345 - (_QWORD)v348;
    if (v352 >> 2 > v351)
      v351 = v352 >> 2;
    if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFF8)
      v353 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v353 = v351;
    if (!v353)
    {
      v354 = 0;
      v355 = (_QWORD *)(8 * v350);
      *(_QWORD *)(8 * v350) = v410;
      v347 = 8 * v350 + 8;
      v356 = v346 - v348;
      if (v346 != v348)
        goto LABEL_366;
      goto LABEL_369;
    }
    if (v353 >> 61)
      sub_207CA3AB8();
    v354 = operator new(8 * v353);
    v355 = &v354[8 * v350];
    *v355 = v410;
    v347 = (uint64_t)(v355 + 1);
    v356 = v346 - v348;
    if (v346 == v348)
    {
LABEL_369:
      v344 = v399;
      goto LABEL_375;
    }
LABEL_366:
    v357 = v356 - 8;
    if (v357 < 0x58)
    {
      v344 = v399;
      goto LABEL_374;
    }
    v358 = v346 - &v354[v349];
    v344 = v399;
    if (v358 < 0x20)
      goto LABEL_434;
    v359 = (v357 >> 3) + 1;
    v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
    v361 = &v346[-v360];
    v355 = (_QWORD *)((char *)v355 - v360);
    v362 = &v354[8 * v350 - 16];
    v363 = v346 - 16;
    v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v365 = *(_OWORD *)v363;
      *(v362 - 1) = *((_OWORD *)v363 - 1);
      *v362 = v365;
      v362 -= 2;
      v363 -= 32;
      v364 -= 4;
    }
    while (v364);
    v346 = v361;
    if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_434:
      do
      {
LABEL_374:
        v366 = *((_QWORD *)v346 - 1);
        v346 -= 8;
        *--v355 = v366;
      }
      while (v346 != v348);
    }
LABEL_375:
    v344[12] = v355;
    v344[13] = v347;
    v344[14] = &v354[8 * v353];
    if (v348)
      operator delete(v348);
LABEL_377:
    v344[13] = v347;
    v367 = v429[0];
    v368 = v429[1];
    v369 = v429[2];
    v370 = (float **)v344[15];
    v372 = v370[1];
    v371 = (unint64_t)v370[2];
    if ((unint64_t)v372 < v371)
    {
      *v372 = v367;
      v372[1] = v368;
      v110 = v372 + 3;
      v372[2] = v369;
    }
    else
    {
      v373 = *v370;
      v374 = 0xAAAAAAAAAAAAAAABLL * (v372 - *v370);
      v375 = v374 + 1;
      if (v374 + 1 > 0x1555555555555555)
        sub_207CA420C();
      v376 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v371 - (_QWORD)v373) >> 2);
      if (2 * v376 > v375)
        v375 = 2 * v376;
      if (v376 >= 0xAAAAAAAAAAAAAAALL)
        v377 = 0x1555555555555555;
      else
        v377 = v375;
      if (v377)
      {
        if (v377 > 0x1555555555555555)
          sub_207CA3AB8();
        v378 = (char *)operator new(12 * v377);
      }
      else
      {
        v378 = 0;
      }
      v379 = (float *)&v378[12 * v374];
      *v379 = v367;
      v379[1] = v368;
      v379[2] = v369;
      v380 = v379;
      if (v372 != v373)
      {
        do
        {
          v381 = *(_QWORD *)(v372 - 3);
          v372 -= 3;
          v382 = *((_DWORD *)v372 + 2);
          *(_QWORD *)(v380 - 3) = v381;
          v380 -= 3;
          *((_DWORD *)v380 + 2) = v382;
        }
        while (v372 != v373);
        v372 = *v370;
      }
      v383 = (float *)&v378[12 * v377];
      v110 = v379 + 3;
      *v370 = v380;
      v370[1] = v379 + 3;
      v370[2] = v383;
      if (v372)
        operator delete(v372);
    }
    v370[1] = v110;
LABEL_92:
    v105 = v412;
    v106 = v408;
LABEL_93:
    if (++v410 != v388)
      continue;
    break;
  }
LABEL_393:
  if (v106)
    operator delete(v106);
  if (v105)
    operator delete(v105);
  if (__p)
    operator delete(__p);
  if (v423)
  {
    v424 = (char *)v423;
    operator delete(v423);
  }
  return kdebug_trace();
}

void sub_207D72BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  void *v51;

  if (a25)
  {
    operator delete(a25);
    if (!a29)
    {
LABEL_3:
      v51 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!a29)
  {
    goto LABEL_3;
  }
  operator delete(a29);
  v51 = __p;
  if (!__p)
  {
LABEL_5:
    if (a46)
      operator delete(a46);
    sub_207D80E10(v49);
    sub_207CD822C((uint64_t)&a49);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v51);
  goto LABEL_5;
}

void sub_207D72D64()
{
  unsigned int **v0;
  float32x2_t **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  int64x2_t *v29;
  int64x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  int64x2_t *v37;
  int64x2_t *v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  float64_t v53;
  double v54;
  char *v55;
  float *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  char *v63;
  char *v64;
  char *v65;
  float32x2_t v66;
  float64x2_t v67;
  float32x2_t v68;
  int32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  double v72;
  float64x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float64x2_t v77;
  float32x4_t v78;
  float64x2_t v79;
  float64x2_t v80;
  double v87;
  float64x2_t v88;
  float v89;
  double v90;
  float v91;
  float v92;
  float v93;
  __int128 v94;
  float32x4_t v95;
  float32_t v96;
  float32x2_t *v97;
  int64_t v98;
  char *v99;
  size_t v100;
  char *v101;
  uint64_t v102;
  size_t v103;
  float32x4_t v104;
  float32x4_t v105;
  _BYTE *v106;
  char *v107;
  float32x4_t v108;
  float32x4_t v109;
  double *v110;
  double v111;
  double v112;
  _BOOL4 v113;
  int v114;
  char v115;
  uint64_t v116;
  unint64_t v117;
  double *v118;
  uint64_t v119;
  unint64_t v120;
  float v121;
  float32x4_t v122;
  __int32 v123;
  __int128 v124;
  void *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  void *v136;
  char *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float32x2_t **v143;
  unint64_t v144;
  _BOOL4 v145;
  _QWORD *v146;
  unsigned int **v147;
  int64x2_t *v148;
  int64x2_t *v149;
  _BOOL4 v150;
  int v151;
  void *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  __int32 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  float32x4_t v160;
  float32x4_t v161;
  void *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  float64x2_t v166;
  double v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  double v173;
  float64x2_t v174;
  uint64_t v175;
  float64x2_t v176;
  double v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  double v182;
  void *v183;
  char *v184;
  unint64_t v185;
  void *__p;
  int64x2_t *v187;
  int64x2_t *v188;
  _BYTE v189[24];
  void *v190;
  char v191;
  float v192;
  float v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  int64x2_t v206;
  __int128 v207;
  __int128 v208;
  char v209;
  void *v210;
  void *v211;
  uint64_t (**v212)();
  void *v213;
  void *v214;
  void (**v215)();
  uint64_t v216;
  void *v217;
  uint64_t v218;
  _BYTE v219[24];
  _BYTE *v220;
  _BYTE v221[24];
  _BYTE *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _BYTE v225[24];
  _BYTE *v226;
  void *v227;
  uint64_t v228;

  v0 = (unsigned int **)MEMORY[0x24BDAC7A8]();
  v146 = v2;
  v143 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v228 = *MEMORY[0x24BDAC8D0];
  v10 = *v0;
  v9 = v0[1];
  v147 = v0;
  v11 = (char *)v9 - (char *)*v0;
  if (v11 != 64 || (char *)v1[1] - (char *)*v1 != 128 || (v12 = *v0, v2[1] - *v2 != 72))
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 768, (uint64_t)"num_cams == 2 && T_p0pn_vec.size() == 2 && K_pn.size() == 2", 59, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_173;
    }
    v12 = *v147;
  }
  v141 = v6;
  v142 = v4;
  v13 = v12[2];
  v14 = v12[3];
  v15 = v12[4];
  if ((_DWORD)v15 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 771, (uint64_t)"num_channel == 3", 16, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_173:
    abort();
  }
  *(_OWORD *)(v8 + 4) = xmmword_208236580;
  *(_OWORD *)(v8 + 20) = unk_208236590;
  *(_OWORD *)(v8 + 36) = xmmword_2082365A0;
  v187 = 0;
  __p = 0;
  v188 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  *(_DWORD *)v8 = 0;
  v140 = v8;
  *(_OWORD *)(v8 + 52) = unk_2082365B0;
  if (v9 != v10)
  {
    v16 = 0;
    v17 = 0;
    v18 = v11 >> 5;
    v19 = v13 != 0;
    if (!(_DWORD)v14)
      v19 = 0;
    v145 = v19;
    if ((_DWORD)v14)
      _ZF = (_DWORD)v13 == 0;
    else
      _ZF = 1;
    if (_ZF)
      v21 = 0;
    else
      v21 = v13 | (v14 << 32);
    v22 = 0x100000000;
    if (v21 > 0x100000000)
      v22 = v21;
    v23 = ((_DWORD)v21 != 0) | (unint64_t)(v22 << 32);
    v151 = HIDWORD(v21) * v22;
    if (v18 <= 1)
      v18 = 1;
    v144 = v18;
    do
    {
      v25 = (uint64_t)&(*v147)[8 * v17];
      v26 = *(_QWORD *)v25;
      v27 = *(unsigned int *)(v25 + 28);
      v28 = (_DWORD)v27 == -1 && v145;
      if (v28
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v148 = v16;
      *(_QWORD *)v189 = v26;
      *(_QWORD *)&v189[8] = v21;
      *(_QWORD *)&v189[16] = v23;
      if (v151 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      sub_207D5D88C((uint64_t *)v189, (uint64_t)&v206, 0.5);
      if (!v209)
        goto LABEL_156;
      if (v16 >= v188)
      {
        v30 = (int64x2_t *)__p;
        v31 = ((char *)v16 - (_BYTE *)__p) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          sub_207CA420C();
        v33 = (char *)v188 - (_BYTE *)__p;
        if (((char *)v188 - (_BYTE *)__p) >> 3 > v32)
          v32 = v33 >> 3;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 60)
            sub_207CA3AB8();
          v35 = v34;
          v36 = (char *)operator new(16 * v34);
          v34 = v35;
        }
        else
        {
          v36 = 0;
        }
        v37 = (int64x2_t *)&v36[16 * v31];
        *v37 = v206;
        v38 = v148;
        if (v148 == v30)
        {
          v40 = v148;
          v29 = v37 + 1;
          __p = v37;
          v187 = v37 + 1;
          v188 = (int64x2_t *)&v36[16 * v34];
          if (!v148)
            goto LABEL_49;
        }
        else
        {
          v39 = &v36[16 * v31];
          do
          {
            *((int64x2_t *)v39 - 1) = v38[-1];
            v39 -= 16;
            --v38;
          }
          while (v38 != v30);
          v40 = __p;
          v29 = v37 + 1;
          __p = v39;
          v187 = v37 + 1;
          v188 = (int64x2_t *)&v36[16 * v34];
          if (!v40)
            goto LABEL_49;
        }
        operator delete(v40);
      }
      else
      {
        *v16 = v206;
        v29 = v16 + 1;
      }
LABEL_49:
      v149 = v29;
      v187 = v29;
      v41 = (char *)operator new(0x30uLL);
      *(_QWORD *)v41 = 0;
      *(_OWORD *)(v41 + 8) = v207;
      *((_QWORD *)v41 + 3) = 0;
      *((_OWORD *)v41 + 2) = v208;
      if (v15 >= 2)
      {
        v42 = 1;
        v150 = v28;
        do
        {
          v176.f64[0] = 0.0;
          v166.f64[0] = 0.0;
          v174.f64[0] = 0.0;
          if (v28)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
            v43 = v27;
            v44 = v26;
            v45 = v23;
            v46 = v21;
            v47 = v17;
            v48 = v15;
            v49 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v50 = qword_2545309E8;
              v51 = qword_2545309F0;
              while (v50 != v51)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v50)(*(_QWORD *)(v50 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                v50 += 16;
              }
            }
            v52 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              abort();
            v15 = v48;
            v17 = v47;
            qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            v21 = v46;
            v23 = v45;
            v26 = v44;
            v27 = v43;
            v28 = v150;
          }
          *(_QWORD *)&v157 = v26 + 4 * (v27 * v42);
          *((_QWORD *)&v157 + 1) = v21;
          *(_QWORD *)&v158 = v23;
          if (v151 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          sub_207D5D44C((uint64_t *)&v157, v176.f64, v166.f64, v174.f64);
          if (v174.f64[0] > 0.5)
          {
            v53 = v166.f64[0];
            v54 = *((double *)__p + 2 * v17) + *((double *)__p + 2 * v17 + 1) * v166.f64[0];
            v55 = &v41[24 * v42];
            *((_QWORD *)v55 - 3) = *(_QWORD *)&v174.f64[0];
            *((double *)v55 - 2) = v54;
            *((float64_t *)v55 - 1) = v53;
          }
          ++v42;
        }
        while (v42 != v15);
      }
      v56 = (float *)(*v146 + 36 * v17);
      v57 = (float)-v56[6];
      v58 = *v56;
      v59 = (float)-v56[7];
      v60 = v56[4];
      v61 = (*((double *)v41 + 2) + v59) / v60;
      *((double *)v41 + 1) = (*((double *)v41 + 1) + v57) / v58;
      *((double *)v41 + 2) = v61;
      v62 = (*((double *)v41 + 5) + v59) / v60;
      *((double *)v41 + 4) = (*((double *)v41 + 4) + v57) / v58;
      *((double *)v41 + 5) = v62;
      v63 = v184;
      if ((unint64_t)v184 >= v185)
      {
        v24 = sub_207D80EE0((char **)&v183, (uint64_t)v41, (uint64_t)(v41 + 48));
      }
      else
      {
        *(_QWORD *)v184 = 0;
        *((_QWORD *)v63 + 1) = 0;
        *((_QWORD *)v63 + 2) = 0;
        v64 = (char *)operator new(0x30uLL);
        *(_QWORD *)v63 = v64;
        *((_QWORD *)v63 + 1) = v64;
        *((_QWORD *)v63 + 2) = v64 + 48;
        *(_QWORD *)v64 = *(_QWORD *)v41;
        *(_OWORD *)(v64 + 8) = *(_OWORD *)(v41 + 8);
        *((_QWORD *)v64 + 3) = *((_QWORD *)v41 + 3);
        *((_OWORD *)v64 + 2) = *((_OWORD *)v41 + 2);
        *((_QWORD *)v63 + 1) = v64 + 48;
        v24 = v63 + 24;
      }
      v16 = v149;
      v184 = v24;
      operator delete(v41);
      ++v17;
    }
    while (v17 != v144);
  }
  v65 = (char *)operator new(0x30uLL);
  v66 = (*v143)[8];
  *(float32x2_t *)&v67.f64[0] = (*v143)[10];
  v68.i32[0] = (*v143)[11].i32[0];
  v69 = (int32x2_t)(*v143)[12];
  v70 = (float32x2_t)vzip1_s32((int32x2_t)v66, *(int32x2_t *)&v67.f64[0]);
  v66.i32[0] = (*v143)[14].i32[0];
  v71.i32[0] = (*v143)[14].i32[1];
  v71.i32[1] = (*v143)[9].i32[0];
  v68.i32[1] = (*v143)[13].i32[0];
  v72 = (*v143)[15].f32[0];
  v176 = vcvtq_f64_f32(v70);
  v178 = vcvtq_f64_f32(v66);
  v179 = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&v67.f64[0], v69));
  v180 = vcvtq_f64_f32(v71);
  v181 = vcvtq_f64_f32(v68);
  v177 = *(float *)v69.i32;
  v182 = v72;
  v206 = *(int64x2_t *)(*(_QWORD *)v183 + 8);
  *(_QWORD *)&v207 = 0x3FF0000000000000;
  *(_OWORD *)v189 = *(_OWORD *)(*((_QWORD *)v183 + 3) + 8);
  *(_QWORD *)&v189[16] = 0x3FF0000000000000;
  sub_208128C74((uint64_t)v65, (uint64_t)&v206, (uint64_t)v189, (uint64_t)&v176, *(int8x16_t *)v189, v67);
  v206 = *(int64x2_t *)(*(_QWORD *)v183 + 32);
  *(_QWORD *)&v207 = 0x3FF0000000000000;
  *(_OWORD *)v189 = *(_OWORD *)(*((_QWORD *)v183 + 3) + 32);
  *(_QWORD *)&v189[16] = 0x3FF0000000000000;
  sub_208128C74((uint64_t)(v65 + 24), (uint64_t)&v206, (uint64_t)v189, (uint64_t)&v176, *(int8x16_t *)v189, v73);
  v74.i64[0] = *(_QWORD *)v142;
  v74.i32[2] = *(_DWORD *)(v142 + 8);
  v75.i64[0] = *(_QWORD *)v141;
  v75.i32[2] = *(_DWORD *)(v141 + 8);
  v76 = (int8x16_t)vsubq_f32(v74, v75);
  v77 = (float64x2_t)vextq_s8(v76, v76, 8uLL);
  v78 = vmulq_n_f32((float32x4_t)v76, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1), *(float32x2_t *)v76.i8, 1), *(float32x2_t *)&v77.f64[0], *(float32x2_t *)&v77.f64[0]).f32[0]));
  *(double *)v75.i64 = v78.f32[2];
  v79 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
  v174 = v79;
  v175 = v75.i64[0];
  v79.f64[0] = *((float64_t *)v65 + 5);
  v77.f64[0] = *((float64_t *)v65 + 2);
  v80 = vsubq_f64(v79, v77);
  _Q1 = vsubq_f64(*(float64x2_t *)(v65 + 24), *(float64x2_t *)v65);
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  v87 = sqrt(vmlad_n_f64(_Q2.f64[0], v80.f64[0], v80.f64[0]));
  _Q2.f64[0] = 1.0 / v87;
  v172 = vmulq_n_f64(_Q1, 1.0 / v87);
  *(_QWORD *)&v173 = *(_OWORD *)&vmulq_f64(v80, _Q2);
  sub_207DFEB10((uint64_t)&v174, &v172, (uint64_t)&v166, v88);
  v89 = *((double *)v65 + 2);
  *(float32x2_t *)(v140 + 52) = vcvt_f32_f64(*(float64x2_t *)v65);
  *(float *)(v140 + 60) = v89;
  *(float32x2_t *)(v140 + 4) = vcvt_f32_f64(v166);
  v90 = v169;
  v91 = v167;
  *(float *)(v140 + 12) = v91;
  *(float32x2_t *)(v140 + 20) = vcvt_f32_f64(v168);
  v92 = v90;
  *(float *)(v140 + 28) = v92;
  *(float32x2_t *)(v140 + 36) = vcvt_f32_f64(v170);
  v93 = v171;
  *(float *)(v140 + 44) = v93;
  v94 = *(_OWORD *)(v140 + 20);
  v157 = *(_OWORD *)(v140 + 4);
  v158 = v94;
  v95 = *(float32x4_t *)(v140 + 52);
  v159 = *(_OWORD *)(v140 + 36);
  v160 = v95;
  *(float32x2_t *)v161.f32 = vcvt_f32_f64(v172);
  v96 = v173;
  v161.f32[2] = v96;
  v163 = 0;
  v164 = 0;
  v162 = 0;
  v97 = *v143;
  v98 = (char *)v143[1] - (char *)*v143;
  if (v98)
  {
    if (v98 < 0)
      sub_207CA420C();
    v99 = (char *)operator new(v98);
    v162 = v99;
    v163 = v99;
    v164 = &v99[64 * (v98 >> 6)];
    v100 = v98 & 0xFFFFFFFFFFFFFFC0;
    memcpy(v99, v97, v100);
    v101 = &v99[v100];
    v163 = &v99[v100];
  }
  else
  {
    v101 = 0;
    v99 = 0;
  }
  LODWORD(v165) = 0;
  v154 = 0;
  v155 = v161.i64[0];
  v156 = v161.i32[2];
  v152 = 0;
  v153 = 0;
  v102 = v101 - v99;
  if (v101 != v99)
  {
    if (v102 < 0)
      sub_207CA420C();
    v152 = operator new(v101 - v99);
    v154 = (char *)v152 + 64 * (v102 >> 6);
    v103 = v102 & 0xFFFFFFFFFFFFFFC0;
    memcpy(v152, v99, v103);
    v153 = (char *)v152 + v103;
  }
  sub_207D81110((__int128 *)v206.i8, &v157, (uint64_t)&v155, (char **)&v152);
  if (v152)
  {
    v153 = (char *)v152;
    operator delete(v152);
  }
  v106 = v183;
  v107 = v184;
  if (v184 != v183)
  {
    v104.i64[0] = *(_QWORD *)v142;
    v104.i32[2] = *(_DWORD *)(v142 + 8);
    v105.i64[0] = *(_QWORD *)v141;
    v105.i32[2] = *(_DWORD *)(v141 + 8);
    v108 = vsubq_f32(v104, v105);
    v109 = vmulq_f32(v108, v108);
    v110 = (double *)*((_QWORD *)v183 + 3);
    v111 = fmin(**(double **)v183, *v110);
    v112 = fmin(*(double *)(*(_QWORD *)v183 + 24), v110[3]);
    v113 = vabdd_f64(1.0, v87 / sqrtf(v109.f32[2] + vaddv_f32(*(float32x2_t *)v109.f32))) < 0.1;
    v114 = v111 > v112 || v113;
    v115 = v111 <= v112 || v113;
    if (v114 == 1)
    {
      v116 = 0;
      v117 = 0;
      do
      {
        v118 = *(double **)&v106[v116];
        if (*v118 > 0.5)
        {
          *(_QWORD *)v189 = *(_QWORD *)v141;
          *(_DWORD *)&v189[8] = *(_DWORD *)(v141 + 8);
          *(float32x2_t *)&v189[12] = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)&v106[v116] + 8));
          v190 = (void *)v117;
          sub_207D73DC4(&v206, (unint64_t *)v189);
          v106 = v183;
          v118 = *(double **)((char *)v183 + v116);
        }
        if (v118[3] > 0.5 && (v115 & 1) != 0)
        {
          *(_QWORD *)v189 = *(_QWORD *)v142;
          *(_DWORD *)&v189[8] = *(_DWORD *)(v142 + 8);
          *(float32x2_t *)&v189[12] = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)&v106[v116] + 32));
          v190 = (void *)v117;
          sub_207D73DC4(&v206, (unint64_t *)v189);
          v106 = v183;
        }
        ++v117;
        v116 += 24;
      }
      while (v117 < 0xAAAAAAAAAAAAAAABLL * ((v184 - v106) >> 3));
    }
    else if ((v115 & 1) != 0)
    {
      v119 = 0;
      v120 = 0;
      do
      {
        if (*(double *)(*(_QWORD *)&v106[v119] + 24) > 0.5)
        {
          *(_QWORD *)v189 = *(_QWORD *)v142;
          *(_DWORD *)&v189[8] = *(_DWORD *)(v142 + 8);
          *(float32x2_t *)&v189[12] = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)&v106[v119] + 32));
          v190 = (void *)v120;
          sub_207D73DC4(&v206, (unint64_t *)v189);
          v106 = v183;
          v107 = v184;
        }
        ++v120;
        v119 += 24;
      }
      while (v120 < 0xAAAAAAAAAAAAAAABLL * ((v107 - v106) >> 3));
    }
  }
  sub_207D74748((uint64_t)v189, (__int128 *)v206.i8, (uint64_t)&v157);
  v121 = 0.0;
  if (v193 < v192)
  {
    v122 = vaddq_f32(v160, vmulq_n_f32(v161, *(float *)&v165));
    if (v122.f32[2] >= 0.0)
    {
      v123 = v160.i32[3];
      v124 = v158;
      *(_OWORD *)(v140 + 4) = v157;
      *(_OWORD *)(v140 + 20) = v124;
      *(_OWORD *)(v140 + 36) = v159;
      *(_DWORD *)(v140 + 60) = v122.i32[2];
      *(_QWORD *)(v140 + 52) = v122.i64[0];
      *(_DWORD *)(v140 + 64) = v123;
      v121 = 1.0;
    }
  }
  *(float *)v140 = v121;
  v205 = 0;
  if (v204 != &v203 && v204)
    operator delete[](v204);
  v202 = 0;
  if (v201 != &v200 && v201)
    operator delete[](v201);
  v199 = 0;
  if (v198 != &v197 && v198)
    operator delete[](v198);
  v196 = 0;
  if (v195 != &v194 && v195)
    operator delete[](v195);
  if (v191 < 0)
  {
    operator delete(v190);
    if ((v189[23] & 0x80000000) == 0)
    {
LABEL_119:
      v215 = off_24C074500;
      v125 = v227;
      if (!v227)
        goto LABEL_121;
      goto LABEL_120;
    }
  }
  else if ((v189[23] & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(*(void **)v189);
  v215 = off_24C074500;
  v125 = v227;
  if (v227)
LABEL_120:
    operator delete[](v125);
LABEL_121:
  v126 = v226;
  if (v226 == v225)
  {
    v127 = 4;
    v126 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_129;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_129:
  v128 = v224;
  if (v224 == v223)
  {
    v129 = 4;
    v128 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_134;
    v129 = 5;
  }
  (*(void (**)(void))(*v128 + 8 * v129))();
LABEL_134:
  v130 = v222;
  if (v222 == v221)
  {
    v131 = 4;
    v130 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_139;
    v131 = 5;
  }
  (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_139:
  v132 = v220;
  if (v220 == v219)
  {
    v133 = 4;
    v132 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_144;
    v133 = 5;
  }
  (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_144:
  v218 = 0;
  if (v217 != &v216 && v217)
    operator delete[](v217);
  v212 = off_24C073E98;
  if (v214)
    operator delete[](v214);
  if (v213)
    operator delete[](v213);
  sub_207D82BEC((uint64_t)&v212);
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v162)
  {
    v163 = (char *)v162;
    operator delete(v162);
  }
  operator delete(v65);
LABEL_156:
  v134 = (char *)v183;
  if (v183)
  {
    v135 = v184;
    v136 = v183;
    if (v184 != v183)
    {
      v137 = v184;
      do
      {
        v139 = (void *)*((_QWORD *)v137 - 3);
        v137 -= 24;
        v138 = v139;
        if (v139)
        {
          *((_QWORD *)v135 - 2) = v138;
          operator delete(v138);
        }
        v135 = v137;
      }
      while (v137 != v134);
      v136 = v183;
    }
    v184 = v134;
    operator delete(v136);
  }
  if (__p)
    operator delete(__p);
}

void sub_207D73CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  void *v71;
  void *v73;

  sub_207D75C20(&STACK[0x8E0]);
  if (__p)
    operator delete(__p);
  operator delete(v71);
  sub_207D14AB4(&a71);
  v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

void sub_207D73DC4(int64x2_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  unint64_t *v71;
  char *v72;

  v3 = a1[119].u32[2];
  a1[119].i32[2] = v3 + 1;
  v4 = *(unint64_t *)((char *)a2 + 12);
  v5 = a2[3];
  v6 = (unint64_t *)a1[14].i64[0];
  v7 = (unint64_t *)a1[14].i64[1];
  if (v6 == v7)
  {
    v8 = (unint64_t *)a1[14].i64[0];
  }
  else
  {
    v8 = (unint64_t *)a1[14].i64[1];
    if (*(v7 - 13) >= v3)
    {
      v9 = 0x4EC4EC4EC4EC4EC5 * (v7 - v6);
      v10 = (unint64_t *)a1[14].i64[0];
      do
      {
        v11 = v9 >> 1;
        v12 = &v10[13 * (v9 >> 1)];
        v14 = *v12;
        v13 = v12 + 13;
        v9 += ~(v9 >> 1);
        if (v14 < v3)
          v10 = v13;
        else
          v9 = v11;
      }
      while (v9);
      v8 = (unint64_t *)a1[14].i64[1];
      if (v10 != v7)
      {
        v8 = v10;
        if (*v10 == v3)
          return;
      }
    }
  }
  v64 = *a2;
  v65 = *((_DWORD *)a2 + 2);
  v15 = a1[8].i64[0];
  if (a1[8].i64[1] == v15 || *(_DWORD *)v15)
  {
    v16 = 1;
  }
  else
  {
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(_DWORD *)(v17 + 8);
    *(_DWORD *)(v17 + 8) = v18 + 1;
    if (*(_BYTE *)(v17 + 20))
    {
      v66 = v5;
      v67 = v17;
      if (v7 == v8 || *v8 != v3)
      {
        v19 = a1[15].u64[0];
        if ((unint64_t)v7 >= v19)
        {
          v63 = 0x4EC4EC4EC4EC4EC5 * (v8 - v6);
          v32 = 0x4EC4EC4EC4EC4EC5 * (v7 - v6) + 1;
          if (v32 > 0x276276276276276)
            sub_207CA420C();
          v33 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v19 - (_QWORD)v6) >> 3);
          v34 = 0x9D89D89D89D89D8ALL * ((uint64_t)(v19 - (_QWORD)v6) >> 3);
          if (v34 > v32)
            v32 = v34;
          if (v33 >= 0x13B13B13B13B13BLL)
            v35 = 0x276276276276276;
          else
            v35 = v32;
          if (v35)
          {
            if (v35 > 0x276276276276276)
              sub_207CA3AB8();
            v36 = (char *)operator new(104 * v35);
          }
          else
          {
            v36 = 0;
          }
          v42 = &v36[8 * (v8 - v6)];
          v72 = &v36[104 * v35];
          if (v63 == v35)
          {
            if ((char *)v8 - (char *)v6 < 1)
            {
              if (v6 == v8)
                v44 = 1;
              else
                v44 = 0x9D89D89D89D89D8ALL * (v8 - v6);
              if (v44 > 0x276276276276276)
                sub_207CA3AB8();
              v45 = (char *)operator new(104 * v44);
              v42 = &v45[104 * (v44 >> 2)];
              v72 = &v45[104 * v44];
              if (v36)
                operator delete(v36);
            }
            else
            {
              v43 = v63 + 2;
              if (v63 >= -1)
                v43 = v63 + 1;
              v42 -= 104 * (v43 >> 1);
            }
          }
          *(_QWORD *)v42 = v3;
          *((_QWORD *)v42 + 1) = v3;
          *((_DWORD *)v42 + 6) = v65;
          *((_QWORD *)v42 + 2) = v64;
          *(_QWORD *)(v42 + 28) = v4;
          *((_QWORD *)v42 + 5) = v66;
          *((_QWORD *)v42 + 6) = v67;
          *((_QWORD *)v42 + 7) = v68;
          *((_QWORD *)v42 + 8) = v69;
          v42[76] = 0;
          *((_DWORD *)v42 + 18) = -1082130432;
          *((_OWORD *)v42 + 5) = 0uLL;
          v70 = 0uLL;
          v42[96] = 0;
          v46 = (uint64_t)(v42 + 104);
          v47 = (unint64_t *)a1[14].i64[0];
          if (v47 != v8)
          {
            v48 = 0;
            do
            {
              v49 = (char *)&v8[v48];
              v50 = &v42[v48 * 8];
              *((_QWORD *)v50 - 13) = v8[v48 - 13];
              *((_QWORD *)v50 - 12) = v8[v48 - 12];
              v51 = v8[v48 - 11];
              *((_DWORD *)v50 - 20) = v8[v48 - 10];
              *((_QWORD *)v50 - 11) = v51;
              *(_QWORD *)(v50 - 76) = *(unint64_t *)((char *)&v8[v48 - 9] - 4);
              *((_QWORD *)v50 - 8) = v8[v48 - 8];
              *((_QWORD *)v50 - 7) = v8[v48 - 7];
              *((_QWORD *)v50 - 6) = v8[v48 - 6];
              *((_QWORD *)v50 - 5) = v8[v48 - 5];
              LODWORD(v51) = v8[v48 - 4];
              *(v50 - 28) = *((_BYTE *)&v8[v48 - 3] - 4);
              *((_DWORD *)v50 - 8) = v51;
              *(_OWORD *)(v50 - 24) = *(_OWORD *)&v8[v48 - 3];
              *((_QWORD *)v49 - 3) = 0;
              *((_QWORD *)v49 - 2) = 0;
              *(v50 - 8) = v8[v48 - 1];
              v48 -= 13;
            }
            while (&v8[v48] != v47);
            v46 = (uint64_t)(v42 + 104);
            v42 += v48 * 8;
          }
          v52 = (unint64_t *)a1[14].i64[1];
          if (v52 != v8)
          {
            do
            {
              *(_QWORD *)v46 = *v8;
              *(_QWORD *)(v46 + 8) = v8[1];
              v53 = v8[2];
              *(_DWORD *)(v46 + 24) = *((_DWORD *)v8 + 6);
              *(_QWORD *)(v46 + 16) = v53;
              *(_QWORD *)(v46 + 28) = *(unint64_t *)((char *)v8 + 28);
              *(_QWORD *)(v46 + 40) = v8[5];
              *(_QWORD *)(v46 + 48) = v8[6];
              *(_QWORD *)(v46 + 56) = v8[7];
              *(_QWORD *)(v46 + 64) = v8[8];
              LODWORD(v53) = *((_DWORD *)v8 + 18);
              *(_BYTE *)(v46 + 76) = *((_BYTE *)v8 + 76);
              *(_DWORD *)(v46 + 72) = v53;
              *(_OWORD *)(v46 + 80) = *((_OWORD *)v8 + 5);
              v8[10] = 0;
              v8[11] = 0;
              *(_BYTE *)(v46 + 96) = *((_BYTE *)v8 + 96);
              v46 += 104;
              v8 += 13;
            }
            while (v8 != v52);
            v8 = (unint64_t *)a1[14].i64[1];
          }
          v54 = (unint64_t *)a1[14].i64[0];
          a1[14].i64[0] = (uint64_t)v42;
          a1[14].i64[1] = v46;
          a1[15].i64[0] = (uint64_t)v72;
          if (v8 != v54)
          {
            do
            {
              v71 = v8 - 13;
              v55 = (std::__shared_weak_count *)*(v8 - 2);
              if (v55)
              {
                p_shared_owners = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(p_shared_owners);
                while (__stlxr(v57 - 1, p_shared_owners));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v8 = v71;
            }
            while (v71 != v54);
            v8 = v54;
          }
          if (v8)
            operator delete(v8);
        }
        else if (v8 == v7)
        {
          *v7 = v3;
          v41 = &v6[v8 - v6];
          v41[1] = v3;
          *((_DWORD *)v41 + 6) = v65;
          v41[2] = v64;
          *(unint64_t *)((char *)v41 + 28) = v4;
          v41[5] = v5;
          v41[6] = v17;
          *((_BYTE *)v41 + 76) = 0;
          *((_DWORD *)v41 + 18) = -1082130432;
          v41[10] = 0;
          v41[11] = 0;
          v70 = 0uLL;
          *((_BYTE *)v41 + 96) = 0;
          a1[14].i64[1] = (uint64_t)(v7 + 13);
        }
        else
        {
          v61 = v5;
          v62 = 0x4EC4EC4EC4EC4EC5 * (v8 - v6);
          v70 = 0uLL;
          v20 = v7 - 13;
          v21 = v7;
          if ((unint64_t)v7 >= 0x68)
          {
            v22 = v7 - 13;
            v21 = v7;
            do
            {
              *v21 = *v22;
              v21[1] = v22[1];
              v23 = v22[2];
              *((_DWORD *)v21 + 6) = *((_DWORD *)v22 + 6);
              v21[2] = v23;
              *(unint64_t *)((char *)v21 + 28) = *(unint64_t *)((char *)v22 + 28);
              v21[5] = v22[5];
              v21[6] = v22[6];
              v21[7] = v22[7];
              v21[8] = v22[8];
              LODWORD(v23) = *((_DWORD *)v22 + 18);
              *((_BYTE *)v21 + 76) = *((_BYTE *)v22 + 76);
              *((_DWORD *)v21 + 18) = v23;
              *((_OWORD *)v21 + 5) = *((_OWORD *)v22 + 5);
              v22[10] = 0;
              v22[11] = 0;
              *((_BYTE *)v21 + 96) = *((_BYTE *)v22 + 96);
              v21 += 13;
              v22 += 13;
            }
            while (v22 < v7);
          }
          v60 = v17;
          a1[14].i64[1] = (uint64_t)v21;
          if (v7 != v8 + 13)
          {
            v24 = v7 - 13;
            v25 = v7;
            do
            {
              v26 = *(v24 - 13);
              v24 -= 13;
              *(v25 - 13) = v26;
              v25 -= 13;
              v25[1] = v24[1];
              v27 = v24[2];
              *((_DWORD *)v25 + 6) = *((_DWORD *)v24 + 6);
              v25[2] = v27;
              *(unint64_t *)((char *)v25 + 28) = *(unint64_t *)((char *)v24 + 28);
              v25[5] = v24[5];
              v25[6] = v24[6];
              v25[7] = v24[7];
              v25[8] = v24[8];
              LODWORD(v27) = *((_DWORD *)v24 + 18);
              *((_BYTE *)v25 + 76) = *((_BYTE *)v24 + 76);
              *((_DWORD *)v25 + 18) = v27;
              v28 = *((_OWORD *)v24 + 5);
              v24[10] = 0;
              v24[11] = 0;
              v29 = (std::__shared_weak_count *)v25[11];
              *((_OWORD *)v25 + 5) = v28;
              if (v29)
              {
                v30 = (unint64_t *)&v29->__shared_owners_;
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 - 1, v30));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
              *((_BYTE *)v7 - 8) = *((_BYTE *)v20 - 8);
              v7 = v25;
              v20 = v24;
            }
            while (v24 != v8);
          }
          *(int64x2_t *)v8 = vdupq_n_s64(v3);
          v37 = &v6[v8 - v6];
          v37[2] = v64;
          *((_DWORD *)v37 + 6) = v65;
          *(unint64_t *)((char *)v37 + 28) = v4;
          v37[5] = v61;
          v37[6] = v60;
          *((_DWORD *)v37 + 18) = -1082130432;
          *((_BYTE *)v37 + 76) = 0;
          v38 = (std::__shared_weak_count *)v37[11];
          v37[10] = 0;
          v37[11] = 0;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          LOBYTE(v6[13 * v62 + 12]) = 0;
        }
        if (*((_QWORD *)&v70 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
          }
        }
      }
      a1[17].i8[2] = 0;
      a1[17].i8[0] = 0;
      a1[16] = vaddq_s64(a1[16], (int64x2_t)xmmword_2082352E0);
      v16 = 0;
    }
    else
    {
      *(_DWORD *)(v17 + 8) = v18;
      v16 = 1;
    }
  }
  if ((v16 & 1) == 0)
  {
    a1[23].i8[12] = 0;
    a1[23].i32[2] = 0;
  }
}

void sub_207D7470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_207D93AF0(v29 - 136);
  sub_207D86F18((uint64_t)&a29);
  sub_207D86F80((uint64_t)&a17);
  sub_207C99D78((uint64_t)&a15);
  sub_207C99D78((uint64_t)&a13);
  _Unwind_Resume(a1);
}

float sub_207D74748(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v6;
  __int128 *v7;
  _BYTE *v8;
  char v9;
  float v15;
  char v16;
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  double v22;
  float32x2_t v23;
  double v24;
  float32x2_t v25;
  uint64_t v26;
  int v27;
  int v28;
  float v29;
  float v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  size_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  float v71;
  __int128 *v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  _OWORD *v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int *v84;
  unint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  float **v91;
  uint64_t v92;
  float v93;
  char v94;
  float *v95;
  uint64_t v96;
  float v97;
  float v98;
  _QWORD *v99;
  const std::locale::facet *v100;
  _QWORD *v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  float v107;
  unsigned int v108;
  uint64_t v109;
  float *v110;
  float v111;
  float *v112;
  unint64_t v113;
  unint64_t v114;
  float32x4_t *v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float *v119;
  float v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float *v125;
  uint64_t v126;
  float v127;
  float v128;
  int v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  double v133;
  float32x2_t v134;
  double v135;
  float32x2_t v136;
  uint64_t v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  char *v145;
  char *v146;
  _QWORD *v147;
  float *v148;
  float *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  float v154;
  float v155;
  _QWORD *v156;
  _QWORD *v157;
  const std::locale::facet *v158;
  _QWORD *v159;
  const std::locale::facet *v160;
  _QWORD *v161;
  _QWORD *v162;
  const std::locale::facet *v163;
  _QWORD *v164;
  const std::locale::facet *v165;
  int v166;
  _QWORD *v167;
  const std::locale::facet *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  float result;
  char v184;
  uint64_t *v185;
  _QWORD *v186;
  void *__p[2];
  uint64_t v188;
  std::locale v189[2];
  uint64_t v190;
  float __dst[3];

  kdebug_trace();
  kdebug_trace();
  v6 = (uint64_t *)(a2 + 87);
  (*(void (**)(std::locale *__return_ptr, __int128 *))(*((_QWORD *)a2 + 174) + 16))(v189, a2 + 87);
  v7 = a2 + 7;
  (**((void (***)(void **__return_ptr, uint64_t))a2 + 14))(__p, (uint64_t)(a2 + 7));
  if (SHIBYTE(v190) < 0)
  {
    sub_207CA40D8((_BYTE *)a1, v189[0].__locale_, (unint64_t)v189[1].__locale_);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)&v189[0].__locale_;
    *(_QWORD *)(a1 + 16) = v190;
  }
  v8 = (_BYTE *)(a1 + 24);
  v9 = HIBYTE(v188);
  if (SHIBYTE(v188) < 0)
  {
    sub_207CA40D8(v8, __p[0], (unint64_t)__p[1]);
    v9 = HIBYTE(v188);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 40) = v188;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 60) = _D0;
  *(_QWORD *)(a1 + 328) = a1 + 72;
  *(_OWORD *)(a1 + 336) = xmmword_2082352F0;
  v186 = (_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 608) = a1 + 352;
  *(_QWORD *)(a1 + 616) = 64;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 1152) = a1 + 640;
  *(_QWORD *)(a1 + 1160) = 64;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1704) = a1 + 1192;
  *(_OWORD *)(a1 + 1712) = xmmword_2082352F0;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v190) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((SHIBYTE(v190) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v189[0].__locale_);
LABEL_9:
  sub_207D93B7C((_QWORD *)a1, 1uLL);
  __p[0] = a2 + 7;
  __p[1] = (void *)a1;
  v15 = (*(float (**)(__int128 *))(*(_QWORD *)v7 + 40))(a2 + 7);
  v16 = *((_BYTE *)a2 + 392);
  if ((*(unsigned int (**)(__int128 *))(*((_QWORD *)a2 + 174) + 24))(a2 + 87))
  {
    *((_BYTE *)a2 + 392) = 1;
    v17 = (*(uint64_t (**)(__int128 *))(*((_QWORD *)a2 + 174) + 40))(a2 + 87);
    v18 = *v6;
    if (v17)
      (*(void (**)(__int128 *, float))(v18 + 48))(a2 + 87, 0.0);
    else
      (*(void (**)(__int128 *))(v18 + 56))(a2 + 87);
    (*(void (**)(__int128 *))(*v6 + 32))(a2 + 87);
    (*(void (**)(__int128 *))(*(_QWORD *)v7 + 104))(a2 + 7);
  }
  kdebug_trace();
  if (*((_BYTE *)a2 + 1424))
  {
    v26 = *((_QWORD *)a2 + 213);
    if (*((_BYTE *)a2 + 1713))
    {
      v27 = *((unsigned __int8 *)a2 + 1712);
      if (v26)
        sub_207D94330((uint64_t)(a2 + 7), (float *)v189, **((_DWORD **)a2 + 211), v19, v20, v21, v22, v23, v24, v25);
      else
        sub_207D94330((uint64_t)(a2 + 7), (float *)v189, *((_DWORD *)a2 + 357), v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      if (v26)
      {
        v189[0] = *(std::locale *)((char *)a2 + 1688);
        LODWORD(v189[1].__locale_) = 0;
        v28 = *((unsigned __int8 *)a2 + 1712);
        sub_207D94D48((uint64_t)(a2 + 7), __dst, (float **)v189, v19, v20, v21, v22, v23, v24, v25);
        v29 = 1.0;
        v30 = 1.0;
        if (v28)
        {
LABEL_29:
          *((float *)a2 + 30) = v29;
          *((float *)a2 + 31) = v30;
          *((_BYTE *)a2 + 381) = 0;
          *((_DWORD *)a2 + 94) = 0;
          goto LABEL_30;
        }
        v29 = __dst[0];
        if (__dst[0] > 0.0)
        {
LABEL_28:
          v30 = 1.0 / (float)(v29 * v29);
          goto LABEL_29;
        }
LABEL_23:
        v30 = 1.0e20;
        v29 = 1.0e-10;
        goto LABEL_29;
      }
      v27 = *((unsigned __int8 *)a2 + 1712);
      sub_207D94330((uint64_t)(a2 + 7), (float *)v189, *((_DWORD *)a2 + 357), v19, v20, v21, v22, v23, v24, v25);
    }
    v29 = 1.0;
    v30 = 1.0;
    if (v27)
      goto LABEL_29;
    v29 = *(float *)&v189[0].__locale_;
    if (*(float *)&v189[0].__locale_ > 0.0)
      goto LABEL_28;
    goto LABEL_23;
  }
LABEL_30:
  if (!(*(unsigned int (**)(__int128 *))(*(_QWORD *)v7 + 8))(a2 + 7))
  {
    v184 = v16;
    sub_207D94EE4((uint64_t)(a2 + 7), (char *)(a1 + 640), (_QWORD *)(a1 + 632));
    v52 = sub_207D95090((uint64_t *)a2 + 16);
    *(int64x2_t *)(a1 + 1176) = vaddq_s64(*(int64x2_t *)(a1 + 1176), vdupq_n_s64(v52));
    v53 = *(_QWORD *)(a1 + 1720);
    v54 = v53 + 1;
    v55 = *(_QWORD *)(a1 + 1712);
    if (v53 + 1 <= v55)
    {
      v60 = *(char **)(a1 + 1704);
    }
    else
    {
      v56 = 2 * v55;
      if (v56 > v54)
        v54 = v56;
      *(_QWORD *)(a1 + 1712) = v54;
      v57 = *(char **)(a1 + 1704);
      if (v54 >> 61)
        v58 = -1;
      else
        v58 = 8 * v54;
      v59 = (char *)operator new[](v58);
      v60 = v59;
      if (v53)
      {
        v61 = 0;
        if (v53 < 4)
          goto LABEL_63;
        if ((unint64_t)(v59 - v57) < 0x20)
          goto LABEL_63;
        v61 = v53 & 0xFFFFFFFFFFFFFFFCLL;
        v62 = v59 + 16;
        v63 = (__int128 *)(v57 + 16);
        v64 = v53 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *v63;
          *(v62 - 1) = *(v63 - 1);
          *v62 = v65;
          v62 += 2;
          v63 += 2;
          v64 -= 4;
        }
        while (v64);
        if (v53 != v61)
        {
LABEL_63:
          v66 = v53 - v61;
          v67 = 8 * v61;
          v68 = &v57[8 * v61];
          v69 = &v59[v67];
          do
          {
            v70 = *(_QWORD *)v68;
            v68 += 8;
            *(_QWORD *)v69 = v70;
            v69 += 8;
            --v66;
          }
          while (v66);
        }
      }
      if (v57 != (char *)(a1 + 1192) && v57)
      {
        operator delete[](v57);
        v53 = *(_QWORD *)(a1 + 1720);
      }
      *(_QWORD *)(a1 + 1704) = v60;
    }
    *(_QWORD *)&v60[8 * v53] = v52;
    ++*(_QWORD *)(a1 + 1720);
    v71 = sub_207D93F34((uint64_t)(a2 + 7), (_QWORD *)(a1 + 72));
    v185 = (uint64_t *)(a1 + 624);
    *(float *)(a1 + 60) = v71;
    *(float *)(a1 + 64) = v71;
    *((float *)a2 + 462) = v71;
    v72 = *(__int128 **)(a1 + 328);
    v73 = *(_QWORD *)(a1 + 344);
    *(_QWORD *)(a1 + 624) = 0;
    v74 = *(_QWORD **)(a1 + 608);
    v75 = v73 & 0x3FFFFFFFFFFFFFFFLL;
    v76 = *(_QWORD *)(a1 + 616);
    if ((v73 & 0x3FFFFFFFFFFFFFFFuLL) <= v76)
    {
      v80 = *(_OWORD **)(a1 + 608);
      if (!v73)
        goto LABEL_93;
    }
    else
    {
      v77 = 2 * v76;
      if (v77 > v75)
        v75 = v77;
      *(_QWORD *)(a1 + 616) = v75;
      if (v75 >> 62)
        v78 = -1;
      else
        v78 = 4 * v75;
      v79 = operator new[](v78);
      v80 = v79;
      if (v74 == v186 || !v74)
      {
        *(_QWORD *)(a1 + 608) = v79;
        v82 = 0;
        v83 = (v73 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v83 >= 7)
          goto LABEL_84;
        goto LABEL_90;
      }
      operator delete[](v74);
      v81 = *(_QWORD *)(a1 + 624);
      *(_QWORD *)(a1 + 608) = v80;
      if (v81)
      {
        *v185 = v81 + v73;
        memmove((char *)v80 + 4 * v73, v80, 4 * v81);
        memcpy(v80, v72, 4 * v73);
LABEL_93:
        kdebug_trace();
        if ((*(unsigned int (**)(__int128 *))(*v6 + 24))(a2 + 87))
        {
          if ((*(unsigned int (**)(__int128 *))(*v6 + 40))(a2 + 87))
          {
            (*(void (**)(__int128 *))(*(_QWORD *)v7 + 96))(a2 + 7);
            (*(void (**)(__int128 *))(*v6 + 48))(a2 + 87);
          }
          else
          {
            (*(void (**)(__int128 *))(*v6 + 56))(a2 + 87);
          }
          (*(void (**)(__int128 *))(*v6 + 32))(a2 + 87);
          (*(void (**)(__int128 *))(*(_QWORD *)v7 + 104))(a2 + 7);
        }
        v91 = (float **)a2 + 51;
        v92 = *((unsigned int *)a2 + 106);
        if ((_DWORD)v92)
        {
          v93 = fabsf(**v91);
          if ((_DWORD)v92 == 1)
          {
            v94 = v184;
          }
          else
          {
            v95 = *v91 + 1;
            v96 = 4 * v92 - 4;
            v94 = v184;
            do
            {
              v97 = *v95++;
              v98 = fabsf(v97);
              if (v93 < v98)
                v93 = v98;
              v96 -= 4;
            }
            while (v96);
          }
        }
        else
        {
          v93 = 1.0;
          v94 = v184;
        }
        if (v93 < (float)(v93 * *((float *)a2 + 353)))
        {
          if (*((_BYTE *)a2 + 1408))
          {
            v99 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
            std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(_QWORD *)(*v99 - 24)));
            v100 = std::locale::use_facet(v189, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
            std::locale::~locale(v189);
            std::ostream::put();
            std::ostream::flush();
            sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
            v101 = (_QWORD *)std::ostream::operator<<();
            sub_207CBAB98(v101, (uint64_t)"][", 2);
            if (v93 == 0.0)
              sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
            else
              std::ostream::operator<<();
            sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
            v156 = (_QWORD *)std::ostream::operator<<();
            v157 = sub_207CBAB98(v156, (uint64_t)"]", 1);
            std::ios_base::getloc((const std::ios_base *)((char *)v157 + *(_QWORD *)(*v157 - 24)));
            v158 = std::locale::use_facet(v189, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v158->__vftable[2].~facet_0)(v158, 10);
            std::locale::~locale(v189);
            std::ostream::put();
            std::ostream::flush();
          }
          *(_DWORD *)(a1 + 56) = 1;
LABEL_212:
          *((_BYTE *)a2 + 392) = v94;
          goto LABEL_213;
        }
        v102 = *((float *)a2 + 462);
        kdebug_trace();
        v103 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v7 + 24))(a2 + 7);
        v104 = *((_QWORD *)a2 + 222);
        if (v104)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 48))(v104);
        v105 = *(unsigned int *)(a1 + 48);
        if (v105 >= *((_DWORD *)a2 + 351))
        {
LABEL_210:
          *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 462);
          v170 = *((_QWORD *)a2 + 218);
          v94 = v184;
          if (v170)
            (*(void (**)(uint64_t))(*(_QWORD *)v170 + 48))(v170);
          goto LABEL_212;
        }
        v106 = a2 + 116;
        v107 = v93;
        while (1)
        {
          v108 = v105 + 1;
          *(_DWORD *)(a1 + 48) = v105 + 1;
          if ((*(unsigned int (**)(__int128 *, uint64_t))(*(_QWORD *)v7 + 16))(a2 + 7, v103))
          {
            if (*((_BYTE *)a2 + 1408))
            {
              v159 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v159 + *(_QWORD *)(*v159 - 24)));
              v160 = std::locale::use_facet(v189, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v160->__vftable[2].~facet_0)(v160, 10);
              std::locale::~locale(v189);
              std::ostream::put();
              std::ostream::flush();
            }
            *(_DWORD *)(a1 + 56) = 0;
            goto LABEL_210;
          }
          ++*(_DWORD *)(a1 + 52);
          v109 = *(unsigned int *)(v103 + 16);
          if ((_DWORD)v109)
          {
            v110 = *(float **)v103;
            v111 = **(float **)v103 * **(float **)v103;
            if ((_DWORD)v109 != 1)
            {
              v112 = v110 + 1;
              v113 = (v109 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
              if (v113 < 7)
                goto LABEL_121;
              v114 = v113 + 1;
              v112 += v114 & 0x7FFFFFFFFFFFFFF8;
              v115 = (float32x4_t *)(v110 + 5);
              v116 = v114 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v117 = vmulq_f32(v115[-1], v115[-1]);
                v118 = vmulq_f32(*v115, *v115);
                v111 = (float)((float)((float)((float)((float)((float)((float)(v111 + v117.f32[0]) + v117.f32[1])
                                                             + v117.f32[2])
                                                     + v117.f32[3])
                                             + v118.f32[0])
                                     + v118.f32[1])
                             + v118.f32[2])
                     + v118.f32[3];
                v115 += 2;
                v116 -= 8;
              }
              while (v116);
              if (v114 != (v114 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_121:
                v119 = &v110[v109];
                do
                {
                  v120 = *v112++;
                  v111 = v111 + (float)(v120 * v120);
                }
                while (v112 != v119);
              }
            }
            v121 = sqrtf(v111);
            if (v105 < *((_DWORD *)a2 + 350))
              goto LABEL_131;
          }
          else
          {
            v121 = sqrtf(0.0);
            if (v105 < *((_DWORD *)a2 + 350))
              goto LABEL_131;
          }
          v122 = *((_QWORD *)a2 + 230);
          if (v122)
          {
            LODWORD(v189[0].__locale_) = *(_DWORD *)(v103 + 16);
            v189[1] = *(std::locale *)v103;
            LODWORD(v190) = 0;
            __dst[0] = v121;
            if (((*(uint64_t (**)(uint64_t, float *, std::locale *))(*(_QWORD *)v122 + 48))(v122, __dst, v189) & 1) != 0)goto LABEL_203;
          }
          else if ((_DWORD)v109 && v121 < (float)(*((float *)a2 + 354) * (float)(v15 + *((float *)a2 + 354))))
          {
LABEL_203:
            if (*((_BYTE *)a2 + 1408))
            {
              v167 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v167 + *(_QWORD *)(*v167 - 24)));
              v168 = std::locale::use_facet(v189, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v168->__vftable[2].~facet_0)(v168, 10);
              std::locale::~locale(v189);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(__int128 *, uint64_t, float, float, float, float, float))(*v6 + 64))(a2 + 87, v105, v102, v121, v107, v93, v15);
            }
            v166 = 2;
            goto LABEL_209;
          }
LABEL_131:
          (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v7 + 48))(a2 + 7, v103);
          v123 = *((_QWORD *)a2 + 226);
          if (v123)
            (*(void (**)(uint64_t))(*(_QWORD *)v123 + 48))(v123);
          if (*v185)
            memcpy(__dst, *(const void **)(a1 + 608), 4 * *v185);
          v102 = sub_207D93F34((uint64_t)(a2 + 7), v186);
          v124 = *((unsigned int *)a2 + 106);
          if (!(_DWORD)v124)
          {
            v107 = 1.0;
            if (!*((_BYTE *)a2 + 1408))
              goto LABEL_145;
LABEL_144:
            (*(void (**)(__int128 *, uint64_t, float, float, float, float, float))(*v6 + 64))(a2 + 87, v105, v102, v121, v107, v93, v15);
            goto LABEL_145;
          }
          v107 = fabsf(**v91);
          if ((_DWORD)v124 != 1)
          {
            v125 = *v91 + 1;
            v126 = 4 * v124 - 4;
            do
            {
              v127 = *v125++;
              v128 = fabsf(v127);
              if (v107 < v128)
                v107 = v128;
              v126 -= 4;
            }
            while (v126);
          }
          if (*((_BYTE *)a2 + 1408))
            goto LABEL_144;
LABEL_145:
          if (v102 == 0.0)
          {
            if (*((_BYTE *)a2 + 1408))
            {
              v161 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v162 = sub_207CBAB98(v161, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v162 + *(_QWORD *)(*v162 - 24)));
              v163 = std::locale::use_facet(v189, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v163->__vftable[2].~facet_0)(v163, 10);
              std::locale::~locale(v189);
              std::ostream::put();
              goto LABEL_201;
            }
LABEL_202:
            *((float *)a2 + 462) = v102;
            v166 = 3;
LABEL_209:
            *(_DWORD *)(a1 + 56) = v166;
            goto LABEL_210;
          }
          if (vabds_f32(v102, *((float *)a2 + 462)) < (float)(v102 * *((float *)a2 + 355))
            && v105 >= *((_DWORD *)a2 + 350))
          {
            if (*((_BYTE *)a2 + 1408))
            {
              sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v164 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(_QWORD *)(*v164 - 24)));
              v165 = std::locale::use_facet(v189, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v165->__vftable[2].~facet_0)(v165, 10);
              std::locale::~locale(v189);
              std::ostream::put();
LABEL_201:
              std::ostream::flush();
            }
            goto LABEL_202;
          }
          if (*((_DWORD *)a2 + 100))
          {
            (*(void (**)(__int128 *, __int128 *))(*(_QWORD *)v7 + 160))(a2 + 7, v106);
            v129 = (*(uint64_t (**)(__int128 *, uint64_t, float **, __int128 *, float))(*v6 + 80))(a2 + 87, v103, v91, v106, v102);
          }
          else
          {
            v129 = (*(uint64_t (**)(__int128 *, uint64_t, float **, float))(*v6 + 72))(a2 + 87, v103, v91, v102);
          }
          if (!v129)
          {
            --*(_DWORD *)(a1 + 52);
            v139 = *((_QWORD *)a2 + 16);
            v140 = *((_QWORD *)a2 + 17);
            while (v139 != v140)
            {
              v141 = *(_QWORD *)(v139 + 8);
              if (*(_BYTE *)(v141 + 20))
              {
                v142 = *(_OWORD *)(v141 + 160);
                *(_OWORD *)(v141 + 32) = *(_OWORD *)(v141 + 144);
                *(_OWORD *)(v141 + 48) = v142;
                v143 = *(_OWORD *)(v141 + 176);
                v144 = *(_OWORD *)(v141 + 192);
                *(_QWORD *)(v141 + 96) = *(_QWORD *)(v141 + 208);
                *(_DWORD *)(v141 + 104) = *(_DWORD *)(v141 + 216);
                v145 = *(char **)(v141 + 224);
                v146 = *(char **)(v141 + 232);
                *(_OWORD *)(v141 + 64) = v143;
                *(_OWORD *)(v141 + 80) = v144;
                sub_207D43AA8((_QWORD *)(v141 + 112), v145, v146, (v146 - v145) >> 6);
                *(_DWORD *)(v141 + 136) = *(_DWORD *)(v141 + 248);
              }
              v139 += 16;
            }
            *((_BYTE *)a2 + 381) = 0;
            *((_BYTE *)a2 + 376) = 0;
            *(_WORD *)((char *)a2 + 379) = 0;
            *((_BYTE *)a2 + 377) = *((_BYTE *)a2 + 378);
            *(_QWORD *)(a1 + 624) = 0;
            v147 = *(_QWORD **)(a1 + 608);
            if (*(_QWORD *)(a1 + 616))
            {
              v148 = *(float **)(a1 + 608);
              goto LABEL_173;
            }
            *(_QWORD *)(a1 + 616) = 1;
            v149 = (float *)operator new[](4uLL);
            v148 = v149;
            if (v147 == v186 || !v147)
            {
              *(_QWORD *)(a1 + 608) = v149;
            }
            else
            {
              operator delete[](v147);
              v150 = *(_QWORD *)(a1 + 624);
              *(_QWORD *)(a1 + 608) = v148;
              if (v150)
              {
                *v185 = v150 + 1;
                *v148 = __dst[0];
                goto LABEL_174;
              }
            }
LABEL_173:
            *v148 = __dst[0];
            *v185 = 1;
LABEL_174:
            if ((*(unsigned int (**)(__int128 *))(*v6 + 24))(a2 + 87))
            {
              (*(void (**)(__int128 *))(*v6 + 32))(a2 + 87);
              (*(void (**)(__int128 *))(*(_QWORD *)v7 + 104))(a2 + 7);
            }
LABEL_176:
            v151 = *((_DWORD *)a2 + 351);
            if (v108 >= v151)
              goto LABEL_179;
            goto LABEL_177;
          }
          if ((*(unsigned int (**)(__int128 *))(*v6 + 24))(a2 + 87))
          {
            (*(void (**)(__int128 *))(*v6 + 32))(a2 + 87);
            (*(void (**)(__int128 *))(*(_QWORD *)v7 + 104))(a2 + 7);
          }
          v130.f32[0] = v93 * *((float *)a2 + 353);
          if (v107 < v130.f32[0] && v105 >= *((_DWORD *)a2 + 350))
          {
            if (*((_BYTE *)a2 + 1408))
            {
              v169 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              sub_207CC060C(v169);
              (*(void (**)(__int128 *, uint64_t, float, float, float, float, float))(*v6 + 64))(a2 + 87, v105, v102, v121, v107, v93, v15);
            }
            v166 = 1;
            goto LABEL_209;
          }
          if (v108 >= *((_DWORD *)a2 + 351) || !*((_BYTE *)a2 + 1424))
            goto LABEL_176;
          v137 = *((_QWORD *)a2 + 213);
          if (*((_BYTE *)a2 + 1713))
          {
            v138 = (int *)a2 + 357;
            if (v137)
              v138 = (int *)*((_QWORD *)a2 + 211);
          }
          else
          {
            v138 = (int *)a2 + 357;
            if (v137)
            {
              v189[0] = *(std::locale *)((char *)a2 + 1688);
              LODWORD(v189[1].__locale_) = 0;
              sub_207D93EB4((uint64_t)(a2 + 7), (float **)v189, *((_BYTE *)a2 + 1712), v130, v131, v132, v133, v134, v135, v136);
              goto LABEL_189;
            }
          }
          v153 = *((unsigned __int8 *)a2 + 1712);
          sub_207D94330((uint64_t)(a2 + 7), (float *)v189, *v138, v130, v131, v132, v133, v134, v135, v136);
          v154 = 1.0;
          v155 = 1.0;
          if (!v153)
          {
            v154 = *(float *)&v189[0].__locale_;
            if (*(float *)&v189[0].__locale_ <= 0.0)
            {
              v155 = 1.0e20;
              v154 = 1.0e-10;
            }
            else
            {
              v155 = 1.0 / (float)(*(float *)&v189[0].__locale_ * *(float *)&v189[0].__locale_);
            }
          }
          *((float *)a2 + 30) = v154;
          *((float *)a2 + 31) = v155;
          *((_BYTE *)a2 + 381) = 0;
          *((_DWORD *)a2 + 94) = 0;
LABEL_189:
          *((float *)a2 + 462) = sub_207D93F34((uint64_t)(a2 + 7), v186);
          v151 = *((_DWORD *)a2 + 351);
          if (v108 >= v151)
            goto LABEL_179;
LABEL_177:
          v152 = *((_QWORD *)a2 + 218);
          v106 = a2 + 116;
          if (v152)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v152 + 48))(v152);
            v151 = *((_DWORD *)a2 + 351);
LABEL_179:
            v106 = a2 + 116;
          }
          v105 = *(unsigned int *)(a1 + 48);
          v91 = (float **)a2 + 51;
          if (v105 >= v151)
            goto LABEL_210;
        }
      }
    }
    v82 = 0;
    v83 = (v73 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v83 >= 7)
    {
LABEL_84:
      v84 = (int *)v72;
      if ((unint64_t)((char *)v80 - (char *)v72) >= 0x20)
      {
        v85 = v83 + 1;
        v82 = v85 & 0x7FFFFFFFFFFFFFF8;
        v84 = (int *)v72 + (v85 & 0x7FFFFFFFFFFFFFF8);
        v86 = v80 + 1;
        v87 = v72 + 1;
        v88 = v85 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v89 = *v87;
          *(v86 - 1) = *(v87 - 1);
          *v86 = v89;
          v86 += 2;
          v87 += 2;
          v88 -= 8;
        }
        while (v88);
        if (v85 == v82)
          goto LABEL_92;
      }
      goto LABEL_91;
    }
LABEL_90:
    v84 = (int *)v72;
    do
    {
LABEL_91:
      v90 = *v84++;
      *((_DWORD *)v80 + v82++) = v90;
    }
    while (v84 != (int *)((char *)v72 + 4 * v73));
LABEL_92:
    *v185 = v82;
    goto LABEL_93;
  }
  if (*((_BYTE *)a2 + 1408))
  {
    v31 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
    v32 = std::locale::use_facet(v189, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(v189);
    std::ostream::put();
    std::ostream::flush();
  }
  *(_DWORD *)(a1 + 56) = 0;
  *((_BYTE *)a2 + 392) = v16;
  sub_207D94EE4((uint64_t)(a2 + 7), (char *)(a1 + 640), (_QWORD *)(a1 + 632));
  v33 = sub_207D95090((uint64_t *)a2 + 16);
  *(int64x2_t *)(a1 + 1176) = vaddq_s64(*(int64x2_t *)(a1 + 1176), vdupq_n_s64(v33));
  v34 = *(_QWORD *)(a1 + 1720);
  v35 = v34 + 1;
  v36 = *(_QWORD *)(a1 + 1712);
  if (v34 + 1 <= v36)
  {
    v41 = *(char **)(a1 + 1704);
  }
  else
  {
    v37 = 2 * v36;
    if (v37 > v35)
      v35 = v37;
    *(_QWORD *)(a1 + 1712) = v35;
    v38 = *(char **)(a1 + 1704);
    if (v35 >> 61)
      v39 = -1;
    else
      v39 = 8 * v35;
    v40 = (char *)operator new[](v39);
    v41 = v40;
    if (v34)
    {
      v42 = 0;
      if (v34 < 4)
        goto LABEL_45;
      if ((unint64_t)(v40 - v38) < 0x20)
        goto LABEL_45;
      v42 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v43 = v40 + 16;
      v44 = (__int128 *)(v38 + 16);
      v45 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v46 = *v44;
        *(v43 - 1) = *(v44 - 1);
        *v43 = v46;
        v43 += 2;
        v44 += 2;
        v45 -= 4;
      }
      while (v45);
      if (v34 != v42)
      {
LABEL_45:
        v47 = v34 - v42;
        v48 = 8 * v42;
        v49 = &v38[8 * v42];
        v50 = &v40[v48];
        do
        {
          v51 = *(_QWORD *)v49;
          v49 += 8;
          *(_QWORD *)v50 = v51;
          v50 += 8;
          --v47;
        }
        while (v47);
      }
    }
    if (v38 != (char *)(a1 + 1192) && v38)
    {
      operator delete[](v38);
      v34 = *(_QWORD *)(a1 + 1720);
    }
    *(_QWORD *)(a1 + 1704) = v41;
  }
  *(_QWORD *)&v41[8 * v34] = v33;
  ++*(_QWORD *)(a1 + 1720);
LABEL_213:
  kdebug_trace();
  v171 = *((_QWORD *)a2 + 16);
  v172 = *((_QWORD *)a2 + 17);
  while (v171 != v172)
  {
    v173 = *(_QWORD *)(v171 + 8);
    if (*(_BYTE *)(v173 + 20))
    {
      v174 = *(_QWORD *)(v173 + 24);
      v175 = *(_OWORD *)(v173 + 32);
      v176 = *(_OWORD *)(v173 + 48);
      v177 = *(_OWORD *)(v173 + 80);
      *(_OWORD *)(v174 + 32) = *(_OWORD *)(v173 + 64);
      *(_OWORD *)(v174 + 48) = v177;
      *(_OWORD *)v174 = v175;
      *(_OWORD *)(v174 + 16) = v176;
      v178 = *(_QWORD *)(v173 + 96);
      *(_DWORD *)(v174 + 72) = *(_DWORD *)(v173 + 104);
      *(_QWORD *)(v174 + 64) = v178;
      if (v174 != v173 + 32)
        sub_207D43AA8((_QWORD *)(v174 + 80), *(char **)(v173 + 112), *(char **)(v173 + 120), (uint64_t)(*(_QWORD *)(v173 + 120) - *(_QWORD *)(v173 + 112)) >> 6);
      *(_DWORD *)(v174 + 104) = *(_DWORD *)(v173 + 136);
    }
    v171 += 16;
  }
  v179 = *a2;
  v180 = a2[1];
  v181 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v181;
  *(_OWORD *)a3 = v179;
  *(_OWORD *)(a3 + 16) = v180;
  v182 = *((_QWORD *)a2 + 8);
  *(_DWORD *)(a3 + 72) = *((_DWORD *)a2 + 18);
  *(_QWORD *)(a3 + 64) = v182;
  if ((__int128 *)a3 != a2)
    sub_207D43AA8((_QWORD *)(a3 + 80), *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 6);
  result = *((float *)a2 + 26);
  *(float *)(a3 + 104) = result;
  return result;
}

void sub_207D75A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)(v28 + 392) = a12;
  sub_207D953AC(v27);
  sub_207D94300();
  _Unwind_Resume(a1);
}

void sub_207D75C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D953AC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D75C20(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  sub_207D939DC(a1 + 174);
  a1[14] = off_24C073E98;
  v2 = (void *)a1[171];
  if (v2)
    operator delete[](v2);
  v3 = (void *)a1[168];
  if (v3)
    operator delete[](v3);
  sub_207D82BEC((uint64_t)(a1 + 14));
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_207D75C88()
{
  unsigned int **v0;
  float32x2_t **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  int64x2_t *v29;
  int64x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  int64x2_t *v37;
  int64x2_t *v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  float64_t v53;
  double v54;
  char *v55;
  float *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  char *v63;
  char *v64;
  char *v65;
  float32x2_t v66;
  float64x2_t v67;
  float32x2_t v68;
  int32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  double v72;
  float64x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float64x2_t v77;
  float32x4_t v78;
  float64x2_t v79;
  float64x2_t v80;
  double v87;
  float64x2_t v88;
  float v89;
  double v90;
  float v91;
  float v92;
  float v93;
  __int128 v94;
  float32x4_t v95;
  float32_t v96;
  float32x2_t *v97;
  int64_t v98;
  char *v99;
  size_t v100;
  char *v101;
  uint64_t v102;
  size_t v103;
  float32x4_t v104;
  float32x4_t v105;
  _BYTE *v106;
  char *v107;
  float32x4_t v108;
  float32x4_t v109;
  double *v110;
  double v111;
  double v112;
  _BOOL4 v113;
  int v114;
  char v115;
  uint64_t v116;
  unint64_t v117;
  double *v118;
  uint64_t v119;
  unint64_t v120;
  float v121;
  float32x4_t v122;
  __int32 v123;
  __int128 v124;
  void *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  void *v136;
  char *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float32x2_t **v143;
  unint64_t v144;
  _BOOL4 v145;
  _QWORD *v146;
  unsigned int **v147;
  int64x2_t *v148;
  int64x2_t *v149;
  _BOOL4 v150;
  int v151;
  void *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  __int32 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  float32x4_t v160;
  float32x4_t v161;
  void *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  float64x2_t v166;
  double v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  double v173;
  float64x2_t v174;
  uint64_t v175;
  float64x2_t v176;
  double v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  double v182;
  void *v183;
  char *v184;
  unint64_t v185;
  void *__p;
  int64x2_t *v187;
  int64x2_t *v188;
  _BYTE v189[24];
  void *v190;
  char v191;
  float v192;
  float v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  int64x2_t v206;
  __int128 v207;
  __int128 v208;
  char v209;
  void *v210;
  void *v211;
  uint64_t (**v212)();
  void *v213;
  void *v214;
  void (**v215)();
  uint64_t v216;
  void *v217;
  uint64_t v218;
  _BYTE v219[24];
  _BYTE *v220;
  _BYTE v221[24];
  _BYTE *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _BYTE v225[24];
  _BYTE *v226;
  void *v227;
  uint64_t v228;

  v0 = (unsigned int **)MEMORY[0x24BDAC7A8]();
  v146 = v2;
  v143 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v228 = *MEMORY[0x24BDAC8D0];
  v10 = *v0;
  v9 = v0[1];
  v147 = v0;
  v11 = (char *)v9 - (char *)*v0;
  if (v11 != 64 || (char *)v1[1] - (char *)*v1 != 128 || (v12 = *v0, v2[1] - *v2 != 72))
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 768, (uint64_t)"num_cams == 2 && T_p0pn_vec.size() == 2 && K_pn.size() == 2", 59, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_173;
    }
    v12 = *v147;
  }
  v141 = v6;
  v142 = v4;
  v13 = v12[2];
  v14 = v12[3];
  v15 = v12[4];
  if ((_DWORD)v15 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 771, (uint64_t)"num_channel == 3", 16, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_173:
    abort();
  }
  *(_OWORD *)(v8 + 4) = xmmword_208236580;
  *(_OWORD *)(v8 + 20) = unk_208236590;
  *(_OWORD *)(v8 + 36) = xmmword_2082365A0;
  v187 = 0;
  __p = 0;
  v188 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  *(_DWORD *)v8 = 0;
  v140 = v8;
  *(_OWORD *)(v8 + 52) = *(_OWORD *)&dbl_2082365B0;
  if (v9 != v10)
  {
    v16 = 0;
    v17 = 0;
    v18 = v11 >> 5;
    v19 = v13 != 0;
    if (!(_DWORD)v14)
      v19 = 0;
    v145 = v19;
    if ((_DWORD)v14)
      _ZF = (_DWORD)v13 == 0;
    else
      _ZF = 1;
    if (_ZF)
      v21 = 0;
    else
      v21 = v13 | (v14 << 32);
    v22 = 0x100000000;
    if (v21 > 0x100000000)
      v22 = v21;
    v23 = ((_DWORD)v21 != 0) | (unint64_t)(v22 << 32);
    v151 = HIDWORD(v21) * v22;
    if (v18 <= 1)
      v18 = 1;
    v144 = v18;
    do
    {
      v25 = (uint64_t)&(*v147)[8 * v17];
      v26 = *(_QWORD *)v25;
      v27 = *(unsigned int *)(v25 + 28);
      v28 = (_DWORD)v27 == -1 && v145;
      if (v28
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v148 = v16;
      *(_QWORD *)v189 = v26;
      *(_QWORD *)&v189[8] = v21;
      *(_QWORD *)&v189[16] = v23;
      if (v151 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      sub_207D5E19C((uint64_t *)v189, (uint64_t)&v206, 0.5);
      if (!v209)
        goto LABEL_156;
      if (v16 >= v188)
      {
        v30 = (int64x2_t *)__p;
        v31 = ((char *)v16 - (_BYTE *)__p) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          sub_207CA420C();
        v33 = (char *)v188 - (_BYTE *)__p;
        if (((char *)v188 - (_BYTE *)__p) >> 3 > v32)
          v32 = v33 >> 3;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          if (v34 >> 60)
            sub_207CA3AB8();
          v35 = v34;
          v36 = (char *)operator new(16 * v34);
          v34 = v35;
        }
        else
        {
          v36 = 0;
        }
        v37 = (int64x2_t *)&v36[16 * v31];
        *v37 = v206;
        v38 = v148;
        if (v148 == v30)
        {
          v40 = v148;
          v29 = v37 + 1;
          __p = v37;
          v187 = v37 + 1;
          v188 = (int64x2_t *)&v36[16 * v34];
          if (!v148)
            goto LABEL_49;
        }
        else
        {
          v39 = &v36[16 * v31];
          do
          {
            *((int64x2_t *)v39 - 1) = v38[-1];
            v39 -= 16;
            --v38;
          }
          while (v38 != v30);
          v40 = __p;
          v29 = v37 + 1;
          __p = v39;
          v187 = v37 + 1;
          v188 = (int64x2_t *)&v36[16 * v34];
          if (!v40)
            goto LABEL_49;
        }
        operator delete(v40);
      }
      else
      {
        *v16 = v206;
        v29 = v16 + 1;
      }
LABEL_49:
      v149 = v29;
      v187 = v29;
      v41 = (char *)operator new(0x30uLL);
      *(_QWORD *)v41 = 0;
      *(_OWORD *)(v41 + 8) = v207;
      *((_QWORD *)v41 + 3) = 0;
      *((_OWORD *)v41 + 2) = v208;
      if (v15 >= 2)
      {
        v42 = 1;
        v150 = v28;
        do
        {
          v176.f64[0] = 0.0;
          v166.f64[0] = 0.0;
          v174.f64[0] = 0.0;
          if (v28)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
            v43 = v27;
            v44 = v26;
            v45 = v23;
            v46 = v21;
            v47 = v17;
            v48 = v15;
            v49 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v50 = qword_2545309E8;
              v51 = qword_2545309F0;
              while (v50 != v51)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v50)(*(_QWORD *)(v50 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                v50 += 16;
              }
            }
            v52 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              abort();
            v15 = v48;
            v17 = v47;
            qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            v21 = v46;
            v23 = v45;
            v26 = v44;
            v27 = v43;
            v28 = v150;
          }
          *(_QWORD *)&v157 = v26 + 2 * (v27 * v42);
          *((_QWORD *)&v157 + 1) = v21;
          *(_QWORD *)&v158 = v23;
          if (v151 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          sub_207D5D684((uint64_t)&v157, v176.f64, v166.f64, &v174);
          if (v174.f64[0] > 0.5)
          {
            v53 = v166.f64[0];
            v54 = *((double *)__p + 2 * v17) + *((double *)__p + 2 * v17 + 1) * v166.f64[0];
            v55 = &v41[24 * v42];
            *((_QWORD *)v55 - 3) = *(_QWORD *)&v174.f64[0];
            *((double *)v55 - 2) = v54;
            *((float64_t *)v55 - 1) = v53;
          }
          ++v42;
        }
        while (v42 != v15);
      }
      v56 = (float *)(*v146 + 36 * v17);
      v57 = (float)-v56[6];
      v58 = *v56;
      v59 = (float)-v56[7];
      v60 = v56[4];
      v61 = (*((double *)v41 + 2) + v59) / v60;
      *((double *)v41 + 1) = (*((double *)v41 + 1) + v57) / v58;
      *((double *)v41 + 2) = v61;
      v62 = (*((double *)v41 + 5) + v59) / v60;
      *((double *)v41 + 4) = (*((double *)v41 + 4) + v57) / v58;
      *((double *)v41 + 5) = v62;
      v63 = v184;
      if ((unint64_t)v184 >= v185)
      {
        v24 = sub_207D80EE0((char **)&v183, (uint64_t)v41, (uint64_t)(v41 + 48));
      }
      else
      {
        *(_QWORD *)v184 = 0;
        *((_QWORD *)v63 + 1) = 0;
        *((_QWORD *)v63 + 2) = 0;
        v64 = (char *)operator new(0x30uLL);
        *(_QWORD *)v63 = v64;
        *((_QWORD *)v63 + 1) = v64;
        *((_QWORD *)v63 + 2) = v64 + 48;
        *(_QWORD *)v64 = *(_QWORD *)v41;
        *(_OWORD *)(v64 + 8) = *(_OWORD *)(v41 + 8);
        *((_QWORD *)v64 + 3) = *((_QWORD *)v41 + 3);
        *((_OWORD *)v64 + 2) = *((_OWORD *)v41 + 2);
        *((_QWORD *)v63 + 1) = v64 + 48;
        v24 = v63 + 24;
      }
      v16 = v149;
      v184 = v24;
      operator delete(v41);
      ++v17;
    }
    while (v17 != v144);
  }
  v65 = (char *)operator new(0x30uLL);
  v66 = (*v143)[8];
  *(float32x2_t *)&v67.f64[0] = (*v143)[10];
  v68.i32[0] = (*v143)[11].i32[0];
  v69 = (int32x2_t)(*v143)[12];
  v70 = (float32x2_t)vzip1_s32((int32x2_t)v66, *(int32x2_t *)&v67.f64[0]);
  v66.i32[0] = (*v143)[14].i32[0];
  v71.i32[0] = (*v143)[14].i32[1];
  v71.i32[1] = (*v143)[9].i32[0];
  v68.i32[1] = (*v143)[13].i32[0];
  v72 = (*v143)[15].f32[0];
  v176 = vcvtq_f64_f32(v70);
  v178 = vcvtq_f64_f32(v66);
  v179 = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&v67.f64[0], v69));
  v180 = vcvtq_f64_f32(v71);
  v181 = vcvtq_f64_f32(v68);
  v177 = *(float *)v69.i32;
  v182 = v72;
  v206 = *(int64x2_t *)(*(_QWORD *)v183 + 8);
  *(_QWORD *)&v207 = 0x3FF0000000000000;
  *(_OWORD *)v189 = *(_OWORD *)(*((_QWORD *)v183 + 3) + 8);
  *(_QWORD *)&v189[16] = 0x3FF0000000000000;
  sub_208128C74((uint64_t)v65, (uint64_t)&v206, (uint64_t)v189, (uint64_t)&v176, *(int8x16_t *)v189, v67);
  v206 = *(int64x2_t *)(*(_QWORD *)v183 + 32);
  *(_QWORD *)&v207 = 0x3FF0000000000000;
  *(_OWORD *)v189 = *(_OWORD *)(*((_QWORD *)v183 + 3) + 32);
  *(_QWORD *)&v189[16] = 0x3FF0000000000000;
  sub_208128C74((uint64_t)(v65 + 24), (uint64_t)&v206, (uint64_t)v189, (uint64_t)&v176, *(int8x16_t *)v189, v73);
  v74.i64[0] = *(_QWORD *)v142;
  v74.i32[2] = *(_DWORD *)(v142 + 8);
  v75.i64[0] = *(_QWORD *)v141;
  v75.i32[2] = *(_DWORD *)(v141 + 8);
  v76 = (int8x16_t)vsubq_f32(v74, v75);
  v77 = (float64x2_t)vextq_s8(v76, v76, 8uLL);
  v78 = vmulq_n_f32((float32x4_t)v76, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1), *(float32x2_t *)v76.i8, 1), *(float32x2_t *)&v77.f64[0], *(float32x2_t *)&v77.f64[0]).f32[0]));
  *(double *)v75.i64 = v78.f32[2];
  v79 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
  v174 = v79;
  v175 = v75.i64[0];
  v79.f64[0] = *((float64_t *)v65 + 5);
  v77.f64[0] = *((float64_t *)v65 + 2);
  v80 = vsubq_f64(v79, v77);
  _Q1 = vsubq_f64(*(float64x2_t *)(v65 + 24), *(float64x2_t *)v65);
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  v87 = sqrt(vmlad_n_f64(_Q2.f64[0], v80.f64[0], v80.f64[0]));
  _Q2.f64[0] = 1.0 / v87;
  v172 = vmulq_n_f64(_Q1, 1.0 / v87);
  *(_QWORD *)&v173 = *(_OWORD *)&vmulq_f64(v80, _Q2);
  sub_207DFEB10((uint64_t)&v174, &v172, (uint64_t)&v166, v88);
  v89 = *((double *)v65 + 2);
  *(float32x2_t *)(v140 + 52) = vcvt_f32_f64(*(float64x2_t *)v65);
  *(float *)(v140 + 60) = v89;
  *(float32x2_t *)(v140 + 4) = vcvt_f32_f64(v166);
  v90 = v169;
  v91 = v167;
  *(float *)(v140 + 12) = v91;
  *(float32x2_t *)(v140 + 20) = vcvt_f32_f64(v168);
  v92 = v90;
  *(float *)(v140 + 28) = v92;
  *(float32x2_t *)(v140 + 36) = vcvt_f32_f64(v170);
  v93 = v171;
  *(float *)(v140 + 44) = v93;
  v94 = *(_OWORD *)(v140 + 20);
  v157 = *(_OWORD *)(v140 + 4);
  v158 = v94;
  v95 = *(float32x4_t *)(v140 + 52);
  v159 = *(_OWORD *)(v140 + 36);
  v160 = v95;
  *(float32x2_t *)v161.f32 = vcvt_f32_f64(v172);
  v96 = v173;
  v161.f32[2] = v96;
  v163 = 0;
  v164 = 0;
  v162 = 0;
  v97 = *v143;
  v98 = (char *)v143[1] - (char *)*v143;
  if (v98)
  {
    if (v98 < 0)
      sub_207CA420C();
    v99 = (char *)operator new(v98);
    v162 = v99;
    v163 = v99;
    v164 = &v99[64 * (v98 >> 6)];
    v100 = v98 & 0xFFFFFFFFFFFFFFC0;
    memcpy(v99, v97, v100);
    v101 = &v99[v100];
    v163 = &v99[v100];
  }
  else
  {
    v101 = 0;
    v99 = 0;
  }
  LODWORD(v165) = 0;
  v154 = 0;
  v155 = v161.i64[0];
  v156 = v161.i32[2];
  v152 = 0;
  v153 = 0;
  v102 = v101 - v99;
  if (v101 != v99)
  {
    if (v102 < 0)
      sub_207CA420C();
    v152 = operator new(v101 - v99);
    v154 = (char *)v152 + 64 * (v102 >> 6);
    v103 = v102 & 0xFFFFFFFFFFFFFFC0;
    memcpy(v152, v99, v103);
    v153 = (char *)v152 + v103;
  }
  sub_207D81110((__int128 *)v206.i8, &v157, (uint64_t)&v155, (char **)&v152);
  if (v152)
  {
    v153 = (char *)v152;
    operator delete(v152);
  }
  v106 = v183;
  v107 = v184;
  if (v184 != v183)
  {
    v104.i64[0] = *(_QWORD *)v142;
    v104.i32[2] = *(_DWORD *)(v142 + 8);
    v105.i64[0] = *(_QWORD *)v141;
    v105.i32[2] = *(_DWORD *)(v141 + 8);
    v108 = vsubq_f32(v104, v105);
    v109 = vmulq_f32(v108, v108);
    v110 = (double *)*((_QWORD *)v183 + 3);
    v111 = fmin(**(double **)v183, *v110);
    v112 = fmin(*(double *)(*(_QWORD *)v183 + 24), v110[3]);
    v113 = vabdd_f64(1.0, v87 / sqrtf(v109.f32[2] + vaddv_f32(*(float32x2_t *)v109.f32))) < 0.1;
    v114 = v111 > v112 || v113;
    v115 = v111 <= v112 || v113;
    if (v114 == 1)
    {
      v116 = 0;
      v117 = 0;
      do
      {
        v118 = *(double **)&v106[v116];
        if (*v118 > 0.5)
        {
          *(_QWORD *)v189 = *(_QWORD *)v141;
          *(_DWORD *)&v189[8] = *(_DWORD *)(v141 + 8);
          *(float32x2_t *)&v189[12] = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)&v106[v116] + 8));
          v190 = (void *)v117;
          sub_207D73DC4(&v206, (unint64_t *)v189);
          v106 = v183;
          v118 = *(double **)((char *)v183 + v116);
        }
        if (v118[3] > 0.5 && (v115 & 1) != 0)
        {
          *(_QWORD *)v189 = *(_QWORD *)v142;
          *(_DWORD *)&v189[8] = *(_DWORD *)(v142 + 8);
          *(float32x2_t *)&v189[12] = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)&v106[v116] + 32));
          v190 = (void *)v117;
          sub_207D73DC4(&v206, (unint64_t *)v189);
          v106 = v183;
        }
        ++v117;
        v116 += 24;
      }
      while (v117 < 0xAAAAAAAAAAAAAAABLL * ((v184 - v106) >> 3));
    }
    else if ((v115 & 1) != 0)
    {
      v119 = 0;
      v120 = 0;
      do
      {
        if (*(double *)(*(_QWORD *)&v106[v119] + 24) > 0.5)
        {
          *(_QWORD *)v189 = *(_QWORD *)v142;
          *(_DWORD *)&v189[8] = *(_DWORD *)(v142 + 8);
          *(float32x2_t *)&v189[12] = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)&v106[v119] + 32));
          v190 = (void *)v120;
          sub_207D73DC4(&v206, (unint64_t *)v189);
          v106 = v183;
          v107 = v184;
        }
        ++v120;
        v119 += 24;
      }
      while (v120 < 0xAAAAAAAAAAAAAAABLL * ((v107 - v106) >> 3));
    }
  }
  sub_207D74748((uint64_t)v189, (__int128 *)v206.i8, (uint64_t)&v157);
  v121 = 0.0;
  if (v193 < v192)
  {
    v122 = vaddq_f32(v160, vmulq_n_f32(v161, *(float *)&v165));
    if (v122.f32[2] >= 0.0)
    {
      v123 = v160.i32[3];
      v124 = v158;
      *(_OWORD *)(v140 + 4) = v157;
      *(_OWORD *)(v140 + 20) = v124;
      *(_OWORD *)(v140 + 36) = v159;
      *(_DWORD *)(v140 + 60) = v122.i32[2];
      *(_QWORD *)(v140 + 52) = v122.i64[0];
      *(_DWORD *)(v140 + 64) = v123;
      v121 = 1.0;
    }
  }
  *(float *)v140 = v121;
  v205 = 0;
  if (v204 != &v203 && v204)
    operator delete[](v204);
  v202 = 0;
  if (v201 != &v200 && v201)
    operator delete[](v201);
  v199 = 0;
  if (v198 != &v197 && v198)
    operator delete[](v198);
  v196 = 0;
  if (v195 != &v194 && v195)
    operator delete[](v195);
  if (v191 < 0)
  {
    operator delete(v190);
    if ((v189[23] & 0x80000000) == 0)
    {
LABEL_119:
      v215 = off_24C074500;
      v125 = v227;
      if (!v227)
        goto LABEL_121;
      goto LABEL_120;
    }
  }
  else if ((v189[23] & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(*(void **)v189);
  v215 = off_24C074500;
  v125 = v227;
  if (v227)
LABEL_120:
    operator delete[](v125);
LABEL_121:
  v126 = v226;
  if (v226 == v225)
  {
    v127 = 4;
    v126 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_129;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_129:
  v128 = v224;
  if (v224 == v223)
  {
    v129 = 4;
    v128 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_134;
    v129 = 5;
  }
  (*(void (**)(void))(*v128 + 8 * v129))();
LABEL_134:
  v130 = v222;
  if (v222 == v221)
  {
    v131 = 4;
    v130 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_139;
    v131 = 5;
  }
  (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_139:
  v132 = v220;
  if (v220 == v219)
  {
    v133 = 4;
    v132 = v219;
  }
  else
  {
    if (!v220)
      goto LABEL_144;
    v133 = 5;
  }
  (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_144:
  v218 = 0;
  if (v217 != &v216 && v217)
    operator delete[](v217);
  v212 = off_24C073E98;
  if (v214)
    operator delete[](v214);
  if (v213)
    operator delete[](v213);
  sub_207D82BEC((uint64_t)&v212);
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (v162)
  {
    v163 = (char *)v162;
    operator delete(v162);
  }
  operator delete(v65);
LABEL_156:
  v134 = (char *)v183;
  if (v183)
  {
    v135 = v184;
    v136 = v183;
    if (v184 != v183)
    {
      v137 = v184;
      do
      {
        v139 = (void *)*((_QWORD *)v137 - 3);
        v137 -= 24;
        v138 = v139;
        if (v139)
        {
          *((_QWORD *)v135 - 2) = v138;
          operator delete(v138);
        }
        v135 = v137;
      }
      while (v137 != v134);
      v136 = v183;
    }
    v184 = v134;
    operator delete(v136);
  }
  if (__p)
    operator delete(__p);
}

void sub_207D76C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  void *v71;
  void *v73;

  sub_207D75C20(&STACK[0x8E0]);
  if (__p)
    operator delete(__p);
  operator delete(v71);
  sub_207D14AB4(&a71);
  v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

void sub_207D76CE8(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  float *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  float *v41;
  float *v42;
  unsigned int v43;
  uint64_t v44;
  float *v45;
  uint64_t v46;
  float *v47;
  __int128 v48;
  double *v49;
  float v50;
  unint64_t v52;
  int v53;
  int v54;
  double v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  long double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double **v68;
  float *v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  double *v74;
  double *v75;
  uint64_t v76;
  double *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  double *v83;
  double *v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  double *v88;
  double *v89;
  double v90;
  double v91;
  double *v92;
  __int128 v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  double *v97;
  __int128 v98;
  double *v99;
  uint64_t v100;
  int64_t v101;
  __int128 *v102;
  __int128 *v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  double *v108;
  double v109;
  double v110;
  __int128 v111;
  double *v112;
  __int128 v113;
  char *v114;
  _QWORD *v115;
  _QWORD *v116;
  __int128 v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  int64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  int64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  int64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  int64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _BYTE *v167;
  _QWORD *v168;
  int64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  _OWORD *v174;
  char *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  int64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  int64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  char *v200;
  char *v201;
  int64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _BYTE *v207;
  char *v208;
  int64_t v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  _OWORD *v214;
  __int128 *v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  int64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  _BYTE *v226;
  _QWORD *v227;
  int64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  _OWORD *v233;
  char *v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int64_t v240;
  uint64_t v241;
  _QWORD *v242;
  __int128 v243;
  _QWORD *v244;
  uint64_t v245;
  int64_t v246;
  __int128 *v247;
  __int128 *v248;
  __int128 v249;
  uint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  double v253;
  double v254;
  __int128 v255;
  _QWORD *v256;
  __int128 v257;
  char *v258;
  char *v259;
  void *v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  float *v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  float *v270;
  float *v271;
  float *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v276;
  float *v277;
  unsigned int v278;
  int v279;
  int v280;
  unsigned int v281;
  int v282;
  int v283;
  double v284;
  uint64_t v285;
  uint64_t v286;
  char *__p;
  char *v288;
  void *v289;
  char *v290;
  char *v291;
  void *v292;
  char *v293;
  char *v294;
  void *v295;
  char *v296;
  char *v297;
  __int128 v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;

  v12 = *((unsigned int *)a1 + 2);
  v11 = *((unsigned int *)a1 + 3);
  if (*((_DWORD *)a1 + 4) != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 912, (uint64_t)"c == 3", 6, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v13 = *a2;
  v295 = 0;
  v296 = 0;
  v297 = 0;
  v276 = v13;
  if (v13)
  {
    v14 = v13;
    v15 = 3 * v13;
    if (v15 >> 61)
      sub_207CA420C();
    v295 = operator new(24 * v14);
    v296 = (char *)v295;
    v297 = (char *)v295 + 8 * v15;
    v292 = 0;
    v293 = 0;
    v294 = 0;
    if (2 * v14)
    {
      if ((2 * v14) >> 61)
        sub_207CA420C();
      v292 = operator new(16 * v276);
      v293 = (char *)v292;
      v294 = (char *)v292 + 16 * v14;
    }
    v289 = 0;
    v290 = 0;
    v13 = v276;
    v291 = 0;
    if (v276 >> 61)
      sub_207CA420C();
    v289 = operator new(8 * v276);
    v290 = (char *)v289;
    v291 = (char *)v289 + 8 * v276;
    if (v276 >> 59)
      sub_207CA420C();
    v16 = 32 * v276;
    v17 = (char *)operator new(32 * v276);
    v18 = &v17[32 * v276];
    __p = v17;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      v17 += 32;
      v16 -= 32;
    }
    while (v16);
    v288 = v18;
    v274 = *a1;
    if (!(_DWORD)v12)
      goto LABEL_18;
    goto LABEL_15;
  }
  v292 = 0;
  v293 = 0;
  v294 = 0;
  v289 = 0;
  v290 = 0;
  v291 = 0;
  __p = 0;
  v288 = 0;
  v274 = *a1;
  if ((_DWORD)v12)
  {
LABEL_15:
    if ((_DWORD)v11
      && *((_DWORD *)a1 + 7) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
LABEL_18:
  if ((_DWORD)v11)
    v19 = (_DWORD)v12 == 0;
  else
    v19 = 1;
  if (v19)
    v20 = 0;
  else
    v20 = (v11 << 32) | v12;
  if (v20 <= 0x100000000)
    v21 = 0;
  else
    v21 = v20;
  v269 = v21;
  if (HIDWORD(v20) * v21 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v262 = a4;
  v263 = a3;
  v22 = *((_DWORD *)a1 + 5);
  v23 = *((_DWORD *)a1 + 6);
  v24 = *a1;
  v25 = (_DWORD)v12 == 2 || (_DWORD)v11 == 2;
  v26 = !v25;
  v283 = v26;
  if (!v25
    && *((_DWORD *)a1 + 7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| ((_DWORD)v11 != 2 ? (v27 = (_DWORD)v12 == 2) : (v27 = 1), !v27 ? (v28 = (v12 - 2) | ((unint64_t)(v11 - 2) << 32)) : (v28 = 0), (v29 = v12 * HIDWORD(v28), (_DWORD)v12 * HIDWORD(v28) == -1)&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  v281 = v20;
  v271 = (float *)(v24 + 4 * (v23 + v22));
  v30 = *((_DWORD *)a1 + 5);
  v31 = *((_DWORD *)a1 + 6);
  v32 = *((_DWORD *)a1 + 7);
  v33 = *a1;
  v34 = v283;
  if (v32 != -1)
    v34 = 0;
  if (v34 == 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| v29 == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v35 = (float *)(v33 + 4 * (v31 + v30 + v32));
  v37 = *((_DWORD *)a1 + 5);
  v36 = *((_DWORD *)a1 + 6);
  v38 = *((_DWORD *)a1 + 7);
  v39 = *a1;
  v40 = v283;
  if (v38 != -1)
    v40 = 0;
  if (v40 == 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| v29 == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v285 = v39 + 4 * (v36 + v37 + 2 * v38);
  v286 = (v12 << 32) | 1;
  v41 = v271;
  if (v29)
  {
    v268 = v28;
    if ((_DWORD)v28)
    {
      v42 = v35;
      v43 = 0;
      v273 = v281;
      v267 = v12;
      v266 = &v271[v29];
      do
      {
        v44 = 0;
        v45 = &v41[v268];
        v46 = v43 + 1;
        v284 = (double)(unint64_t)v46;
        v280 = v43 * v269;
        v282 = v46 * v269;
        v278 = v43;
        v279 = v269 + v46 * v269;
        v270 = v42;
        v272 = v41;
        v47 = v41;
        v277 = v45;
        do
        {
          v50 = *v47;
          if (*v47 <= a5 || v50 != *v42)
            goto LABEL_66;
          v52 = vcvtas_u32_f32(*(float *)(v285 + 4 * ((_DWORD)v286 * (_DWORD)v44 + HIDWORD(v286) * v43)) / v50);
          if (v13 <= v52)
            goto LABEL_66;
          if (v273)
            v53 = v44 + 2;
          else
            v53 = 0;
          if (v273)
            v54 = v44 + 1;
          else
            v54 = 0;
          v55 = *(float *)(v274 + 4 * (v54 + v282));
          if (v273)
            v56 = v44;
          else
            v56 = 0;
          v57 = log(v55 + 1.0e-12);
          v58 = log(*(float *)(v274 + 4 * (v56 + v282)) + 1.0e-12);
          v59 = log(*(float *)(v274 + 4 * (v53 + v282)) + 1.0e-12);
          v60 = log(*(float *)(v274 + 4 * (v54 + v280)) + 1.0e-12);
          v61 = log(*(float *)(v274 + 4 * (v54 + v279)) + 1.0e-12);
          v62 = v60 - v61;
          v63 = v60 + v61 - (v57 + v57) + v60 + v61 - (v57 + v57);
          if (v63 == 0.0)
            v63 = 1.0;
          v64 = v62 / v63;
          v65 = v58 + v59 - (v57 + v57) + v58 + v59 - (v57 + v57);
          if (v65 == 0.0)
            v65 = 1.0;
          v66 = (v58 - v59) / v65 + (double)(unint64_t)(v44 + 1);
          v67 = v64 + v284;
          v68 = (double **)&__p[32 * v52];
          v69 = (float *)(a2[1] + 12 * v52);
          v70 = *v69;
          v71 = v69[1];
          v72 = v69[2];
          v74 = v68[1];
          v73 = (unint64_t)v68[2];
          if ((unint64_t)v74 >= v73)
          {
            v77 = *v68;
            v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)*v68) >> 4);
            v79 = v78 + 1;
            if (v78 + 1 > 0x555555555555555)
              sub_207CA420C();
            v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v77) >> 4);
            if (2 * v80 > v79)
              v79 = 2 * v80;
            if (v80 >= 0x2AAAAAAAAAAAAAALL)
              v81 = 0x555555555555555;
            else
              v81 = v79;
            if (v81 > 0x555555555555555)
              sub_207CA3AB8();
            v82 = (char *)operator new(48 * v81);
            v83 = (double *)&v82[48 * v78];
            *v83 = v55;
            v83[1] = v66;
            v83[2] = v67;
            v83[3] = v70;
            v83[4] = v71;
            v83[5] = v72;
            v84 = v83;
            if (v74 != v77)
            {
              do
              {
                v85 = *((_QWORD *)v74 - 6);
                v74 -= 6;
                *((_QWORD *)v84 - 6) = v85;
                v84 -= 6;
                *(_OWORD *)(v84 + 1) = *(_OWORD *)(v74 + 1);
                v86 = *(_OWORD *)(v74 + 3);
                v84[5] = v74[5];
                *(_OWORD *)(v84 + 3) = v86;
              }
              while (v74 != v77);
              v74 = *v68;
            }
            v49 = v83 + 6;
            *v68 = v84;
            v68[1] = v83 + 6;
            v68[2] = (double *)&v82[48 * v81];
            if (v74)
              operator delete(v74);
            v13 = v276;
            v45 = v277;
            v43 = v278;
            v68[1] = v49;
            v75 = *v68;
            v76 = (char *)v49 - (char *)*v68;
            if (v76 < 49)
              goto LABEL_107;
LABEL_102:
            v87 = (v76 / 0x30uLL - 2) >> 1;
            v88 = &v75[6 * v87];
            v89 = v49 - 6;
            v90 = *(v49 - 6);
            v91 = *v88;
            if (*v88 < v90)
            {
              v298 = *(_OWORD *)(v49 - 5);
              v301 = *(_OWORD *)(v49 - 3);
              v302 = *((_QWORD *)v49 - 1);
              do
              {
                v92 = v89;
                v89 = v88;
                *v92 = v91;
                *(_OWORD *)(v92 + 1) = *(_OWORD *)(v88 + 1);
                v93 = *(_OWORD *)(v88 + 3);
                v92[5] = v88[5];
                *(_OWORD *)(v92 + 3) = v93;
                if (!v87)
                  break;
                v87 = (v87 - 1) >> 1;
                v88 = &v75[6 * v87];
                v91 = *v88;
              }
              while (*v88 < v90);
              *v89 = v90;
              *(_OWORD *)(v89 + 1) = v298;
              *(_OWORD *)(v89 + 3) = v301;
              *((_QWORD *)v89 + 5) = v302;
              v75 = *v68;
              v49 = v68[1];
              v76 = (char *)v49 - (char *)*v68;
            }
            goto LABEL_107;
          }
          *v74 = v55;
          v74[1] = v66;
          v74[2] = v67;
          v74[3] = v70;
          v49 = v74 + 6;
          v74[4] = v71;
          v74[5] = v72;
          v13 = v276;
          v45 = v277;
          v43 = v278;
          v68[1] = v74 + 6;
          v75 = *v68;
          v76 = (char *)(v74 + 6) - (char *)*v68;
          if (v76 >= 49)
            goto LABEL_102;
LABEL_107:
          if (0xAAAAAAAAAAAAAAABLL * (v76 >> 4) >= 0x11)
          {
            if ((char *)v49 - (char *)v75 >= 49)
            {
              v94 = 0;
              v95 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v75) >> 4);
              v96 = *(_QWORD *)v75;
              v300 = *(_OWORD *)(v75 + 1);
              v298 = *(_OWORD *)(v75 + 3);
              v299 = *((_QWORD *)v75 + 5);
              v97 = v75;
              do
              {
                v99 = v97;
                v97 += 6 * v94 + 6;
                v100 = 2 * v94;
                v94 = (2 * v94) | 1;
                v101 = v100 + 2;
                if (v101 < v95 && *v97 < v97[6])
                {
                  v97 += 6;
                  v94 = v101;
                }
                *v99 = *v97;
                *(_OWORD *)(v99 + 1) = *(_OWORD *)(v97 + 1);
                v98 = *(_OWORD *)(v97 + 3);
                v99[5] = v97[5];
                *(_OWORD *)(v99 + 3) = v98;
              }
              while (v94 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
              v102 = (__int128 *)(v97 + 1);
              v103 = (__int128 *)(v97 + 3);
              if (v97 == v49 - 6)
              {
                *(_QWORD *)v97 = v96;
                *v102 = v300;
                v48 = v298;
                *((_QWORD *)v97 + 5) = v299;
                *v103 = v48;
              }
              else
              {
                *v97 = *(v49 - 6);
                *v102 = *(_OWORD *)(v49 - 5);
                v104 = *(_OWORD *)(v49 - 3);
                v97[5] = *(v49 - 1);
                *v103 = v104;
                *((_QWORD *)v49 - 6) = v96;
                *(_OWORD *)(v49 - 5) = v300;
                v105 = v298;
                *((_QWORD *)v49 - 1) = v299;
                *(_OWORD *)(v49 - 3) = v105;
                v106 = (char *)v97 - (char *)v75 + 48;
                if (v106 >= 49)
                {
                  v107 = (v106 / 0x30uLL - 2) >> 1;
                  v108 = &v75[6 * v107];
                  v109 = *v108;
                  v110 = *v97;
                  if (*v108 < *v97)
                  {
                    v303 = *v102;
                    v111 = *v103;
                    v302 = *((_QWORD *)v97 + 5);
                    v301 = v111;
                    do
                    {
                      v112 = v97;
                      v97 = v108;
                      *v112 = v109;
                      *(_OWORD *)(v112 + 1) = *(_OWORD *)(v108 + 1);
                      v113 = *(_OWORD *)(v108 + 3);
                      v112[5] = v108[5];
                      *(_OWORD *)(v112 + 3) = v113;
                      if (!v107)
                        break;
                      v107 = (v107 - 1) >> 1;
                      v108 = &v75[6 * v107];
                      v109 = *v108;
                    }
                    while (*v108 < v110);
                    *v97 = v110;
                    *(_OWORD *)(v97 + 1) = v303;
                    *(_OWORD *)(v97 + 3) = v301;
                    *((_QWORD *)v97 + 5) = v302;
                  }
                }
              }
              v49 = v68[1];
            }
            v68[1] = v49 - 6;
          }
LABEL_66:
          ++v47;
          ++v42;
          ++v44;
        }
        while (v47 != v45);
        v41 = &v272[v267];
        v42 = &v270[v267];
        ++v43;
      }
      while (&v272[v267] != v266);
    }
  }
  v114 = __p;
  if (__p == v288)
    goto LABEL_274;
  while (2)
  {
    v116 = *(_QWORD **)v114;
    v115 = (_QWORD *)*((_QWORD *)v114 + 1);
    while (v116 != v115)
    {
      v119 = v290;
      if (v290 < v291)
      {
        *(_QWORD *)v290 = *v116;
        v120 = (uint64_t)(v119 + 8);
        goto LABEL_150;
      }
      v121 = (char *)v289;
      v122 = v290 - (_BYTE *)v289;
      v123 = (v290 - (_BYTE *)v289) >> 3;
      v124 = v123 + 1;
      if ((unint64_t)(v123 + 1) >> 61)
        goto LABEL_289;
      v125 = v291 - (_BYTE *)v289;
      if ((v291 - (_BYTE *)v289) >> 2 > v124)
        v124 = v125 >> 2;
      if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
        v126 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v126 = v124;
      if (v126)
      {
        if (v126 >> 61)
          goto LABEL_288;
        v127 = (char *)operator new(8 * v126);
        v128 = &v127[8 * v123];
        *(_QWORD *)v128 = *v116;
        v120 = (uint64_t)(v128 + 8);
        v129 = v119 - v121;
        if (v119 == v121)
          goto LABEL_148;
LABEL_142:
        v130 = v129 - 8;
        if (v130 < 0x58)
          goto LABEL_304;
        if ((unint64_t)(v119 - v127 - v122) < 0x20)
          goto LABEL_304;
        v131 = (v130 >> 3) + 1;
        v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        v133 = &v119[-v132];
        v128 -= v132;
        v134 = &v127[8 * v123 - 16];
        v135 = v119 - 16;
        v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v137 = *(_OWORD *)v135;
          *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
          *(_OWORD *)v134 = v137;
          v134 -= 32;
          v135 -= 32;
          v136 -= 4;
        }
        while (v136);
        v119 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_304:
          do
          {
            v138 = *((_QWORD *)v119 - 1);
            v119 -= 8;
            *((_QWORD *)v128 - 1) = v138;
            v128 -= 8;
          }
          while (v119 != v121);
        }
        goto LABEL_148;
      }
      v127 = 0;
      v128 = (char *)(8 * v123);
      *(_QWORD *)(8 * v123) = *v116;
      v120 = 8 * v123 + 8;
      v129 = v119 - v121;
      if (v119 != v121)
        goto LABEL_142;
LABEL_148:
      v289 = v128;
      v290 = (char *)v120;
      v291 = &v127[8 * v126];
      if (v121)
        operator delete(v121);
LABEL_150:
      v290 = (char *)v120;
      v140 = v293;
      v139 = v294;
      if (v293 < v294)
      {
        *(_QWORD *)v293 = v116[1];
        v141 = v140 + 8;
        goto LABEL_171;
      }
      v142 = (char *)v292;
      v143 = v293 - (_BYTE *)v292;
      v144 = (v293 - (_BYTE *)v292) >> 3;
      v145 = v144 + 1;
      if ((unint64_t)(v144 + 1) >> 61)
        goto LABEL_289;
      v146 = v294 - (_BYTE *)v292;
      if ((v294 - (_BYTE *)v292) >> 2 > v145)
        v145 = v146 >> 2;
      if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
        v147 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v147 = v145;
      if (v147)
      {
        if (v147 >> 61)
          goto LABEL_288;
        v148 = (char *)operator new(8 * v147);
        v149 = &v148[8 * v144];
        *(_QWORD *)v149 = v116[1];
        v141 = v149 + 8;
        v150 = v140 - v142;
        if (v140 == v142)
          goto LABEL_169;
LABEL_163:
        v151 = v150 - 8;
        if (v151 < 0x58)
          goto LABEL_305;
        if ((unint64_t)(v140 - v148 - v143) < 0x20)
          goto LABEL_305;
        v152 = (v151 >> 3) + 1;
        v153 = 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
        v154 = &v140[-v153];
        v149 -= v153;
        v155 = &v148[8 * v144 - 16];
        v156 = v140 - 16;
        v157 = v152 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v158 = *(_OWORD *)v156;
          *((_OWORD *)v155 - 1) = *((_OWORD *)v156 - 1);
          *(_OWORD *)v155 = v158;
          v155 -= 32;
          v156 -= 32;
          v157 -= 4;
        }
        while (v157);
        v140 = v154;
        if (v152 != (v152 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_305:
          do
          {
            v159 = *((_QWORD *)v140 - 1);
            v140 -= 8;
            *((_QWORD *)v149 - 1) = v159;
            v149 -= 8;
          }
          while (v140 != v142);
        }
        goto LABEL_169;
      }
      v148 = 0;
      v149 = (char *)(8 * v144);
      *(_QWORD *)(8 * v144) = v116[1];
      v141 = (char *)(8 * v144 + 8);
      v150 = v140 - v142;
      if (v140 != v142)
        goto LABEL_163;
LABEL_169:
      v139 = &v148[8 * v147];
      v292 = v149;
      v293 = v141;
      v294 = v139;
      if (v142)
      {
        operator delete(v142);
        v139 = v294;
      }
LABEL_171:
      v293 = v141;
      if (v141 < v139)
      {
        *(_QWORD *)v141 = v116[2];
        v160 = (uint64_t)(v141 + 8);
        goto LABEL_194;
      }
      v161 = (char *)v292;
      v162 = v141 - (_BYTE *)v292;
      v163 = (v141 - (_BYTE *)v292) >> 3;
      v164 = v163 + 1;
      if ((unint64_t)(v163 + 1) >> 61)
        goto LABEL_289;
      v165 = v139 - (_BYTE *)v292;
      if (v165 >> 2 > v164)
        v164 = v165 >> 2;
      if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
        v166 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v166 = v164;
      if (v166)
      {
        if (v166 >> 61)
          goto LABEL_288;
        v167 = operator new(8 * v166);
        v168 = &v167[8 * v163];
        *v168 = v116[2];
        v160 = (uint64_t)(v168 + 1);
        v169 = v141 - v161;
        if (v141 == v161)
          goto LABEL_192;
      }
      else
      {
        v167 = 0;
        v168 = (_QWORD *)(8 * v163);
        *(_QWORD *)(8 * v163) = v116[2];
        v160 = 8 * v163 + 8;
        v169 = v141 - v161;
        if (v141 == v161)
          goto LABEL_192;
      }
      v170 = v169 - 8;
      if (v170 < 0x58)
      {
        v171 = v141;
        goto LABEL_191;
      }
      if ((unint64_t)(v141 - v167 - v162) < 0x20)
      {
        v171 = v141;
        do
        {
LABEL_191:
          v178 = *((_QWORD *)v171 - 1);
          v171 -= 8;
          *--v168 = v178;
        }
        while (v171 != v161);
        goto LABEL_192;
      }
      v172 = (v170 >> 3) + 1;
      v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
      v171 = &v141[-v173];
      v168 = (_QWORD *)((char *)v168 - v173);
      v174 = &v167[8 * v163 - 16];
      v175 = v141 - 16;
      v176 = v172 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v177 = *(_OWORD *)v175;
        *(v174 - 1) = *((_OWORD *)v175 - 1);
        *v174 = v177;
        v174 -= 2;
        v175 -= 32;
        v176 -= 4;
      }
      while (v176);
      if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_191;
LABEL_192:
      v292 = v168;
      v293 = (char *)v160;
      v294 = &v167[8 * v166];
      if (v161)
        operator delete(v161);
LABEL_194:
      v293 = (char *)v160;
      v180 = v296;
      v179 = v297;
      if (v296 < v297)
      {
        *(_QWORD *)v296 = v116[3];
        v181 = v180 + 8;
        goto LABEL_215;
      }
      v182 = (char *)v295;
      v183 = v296 - (_BYTE *)v295;
      v184 = (v296 - (_BYTE *)v295) >> 3;
      v185 = v184 + 1;
      if ((unint64_t)(v184 + 1) >> 61)
        goto LABEL_289;
      v186 = v297 - (_BYTE *)v295;
      if ((v297 - (_BYTE *)v295) >> 2 > v185)
        v185 = v186 >> 2;
      if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
        v187 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v187 = v185;
      if (v187)
      {
        if (v187 >> 61)
          goto LABEL_288;
        v188 = (char *)operator new(8 * v187);
        v189 = &v188[8 * v184];
        *(_QWORD *)v189 = v116[3];
        v181 = v189 + 8;
        v190 = v180 - v182;
        if (v180 == v182)
          goto LABEL_213;
LABEL_207:
        v191 = v190 - 8;
        if (v191 < 0x58)
          goto LABEL_306;
        if ((unint64_t)(v180 - v188 - v183) < 0x20)
          goto LABEL_306;
        v192 = (v191 >> 3) + 1;
        v193 = 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
        v194 = &v180[-v193];
        v189 -= v193;
        v195 = &v188[8 * v184 - 16];
        v196 = v180 - 16;
        v197 = v192 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v198 = *(_OWORD *)v196;
          *((_OWORD *)v195 - 1) = *((_OWORD *)v196 - 1);
          *(_OWORD *)v195 = v198;
          v195 -= 32;
          v196 -= 32;
          v197 -= 4;
        }
        while (v197);
        v180 = v194;
        if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_306:
          do
          {
            v199 = *((_QWORD *)v180 - 1);
            v180 -= 8;
            *((_QWORD *)v189 - 1) = v199;
            v189 -= 8;
          }
          while (v180 != v182);
        }
        goto LABEL_213;
      }
      v188 = 0;
      v189 = (char *)(8 * v184);
      *(_QWORD *)(8 * v184) = v116[3];
      v181 = (char *)(8 * v184 + 8);
      v190 = v180 - v182;
      if (v180 != v182)
        goto LABEL_207;
LABEL_213:
      v179 = &v188[8 * v187];
      v295 = v189;
      v296 = v181;
      v297 = v179;
      if (v182)
      {
        operator delete(v182);
        v179 = v297;
      }
LABEL_215:
      v296 = v181;
      if (v181 < v179)
      {
        *(_QWORD *)v181 = v116[4];
        v200 = v181 + 8;
        goto LABEL_238;
      }
      v201 = (char *)v295;
      v202 = v181 - (_BYTE *)v295;
      v203 = (v181 - (_BYTE *)v295) >> 3;
      v204 = v203 + 1;
      if ((unint64_t)(v203 + 1) >> 61)
        goto LABEL_289;
      v205 = v179 - (_BYTE *)v295;
      if (v205 >> 2 > v204)
        v204 = v205 >> 2;
      if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
        v206 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v206 = v204;
      if (v206)
      {
        if (v206 >> 61)
          goto LABEL_288;
        v207 = operator new(8 * v206);
        v208 = &v207[8 * v203];
        *(_QWORD *)v208 = v116[4];
        v200 = v208 + 8;
        v209 = v181 - v201;
        if (v181 == v201)
          goto LABEL_236;
      }
      else
      {
        v207 = 0;
        v208 = (char *)(8 * v203);
        *(_QWORD *)(8 * v203) = v116[4];
        v200 = (char *)(8 * v203 + 8);
        v209 = v181 - v201;
        if (v181 == v201)
          goto LABEL_236;
      }
      v210 = v209 - 8;
      if (v210 < 0x58)
      {
        v211 = v181;
        goto LABEL_235;
      }
      if ((unint64_t)(v181 - v207 - v202) < 0x20)
      {
        v211 = v181;
        do
        {
LABEL_235:
          v218 = *((_QWORD *)v211 - 1);
          v211 -= 8;
          *((_QWORD *)v208 - 1) = v218;
          v208 -= 8;
        }
        while (v211 != v201);
        goto LABEL_236;
      }
      v212 = (v210 >> 3) + 1;
      v213 = 8 * (v212 & 0x3FFFFFFFFFFFFFFCLL);
      v211 = &v181[-v213];
      v208 -= v213;
      v214 = &v207[8 * v203 - 16];
      v215 = (__int128 *)(v181 - 16);
      v216 = v212 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v217 = *v215;
        *(v214 - 1) = *(v215 - 1);
        *v214 = v217;
        v214 -= 2;
        v215 -= 2;
        v216 -= 4;
      }
      while (v216);
      if (v212 != (v212 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_235;
LABEL_236:
      v179 = &v207[8 * v206];
      v295 = v208;
      v296 = v200;
      v297 = v179;
      if (v201)
      {
        operator delete(v201);
        v179 = v297;
      }
LABEL_238:
      v296 = v200;
      if (v200 < v179)
      {
        *(_QWORD *)v200 = v116[5];
        v219 = (uint64_t)(v200 + 8);
        goto LABEL_261;
      }
      v220 = (char *)v295;
      v221 = v200 - (_BYTE *)v295;
      v222 = (v200 - (_BYTE *)v295) >> 3;
      v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 61)
LABEL_289:
        sub_207CA420C();
      v224 = v179 - (_BYTE *)v295;
      if (v224 >> 2 > v223)
        v223 = v224 >> 2;
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8)
        v225 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v225 = v223;
      if (v225)
      {
        if (v225 >> 61)
LABEL_288:
          sub_207CA3AB8();
        v226 = operator new(8 * v225);
        v227 = &v226[8 * v222];
        *v227 = v116[5];
        v219 = (uint64_t)(v227 + 1);
        v228 = v200 - v220;
        if (v200 == v220)
          goto LABEL_259;
      }
      else
      {
        v226 = 0;
        v227 = (_QWORD *)(8 * v222);
        *(_QWORD *)(8 * v222) = v116[5];
        v219 = 8 * v222 + 8;
        v228 = v200 - v220;
        if (v200 == v220)
          goto LABEL_259;
      }
      v229 = v228 - 8;
      if (v229 < 0x58)
      {
        v230 = v200;
        goto LABEL_258;
      }
      if ((unint64_t)(v200 - v226 - v221) < 0x20)
      {
        v230 = v200;
        do
        {
LABEL_258:
          v237 = *((_QWORD *)v230 - 1);
          v230 -= 8;
          *--v227 = v237;
        }
        while (v230 != v220);
        goto LABEL_259;
      }
      v231 = (v229 >> 3) + 1;
      v232 = 8 * (v231 & 0x3FFFFFFFFFFFFFFCLL);
      v230 = &v200[-v232];
      v227 = (_QWORD *)((char *)v227 - v232);
      v233 = &v226[8 * v222 - 16];
      v234 = v200 - 16;
      v235 = v231 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v236 = *(_OWORD *)v234;
        *(v233 - 1) = *((_OWORD *)v234 - 1);
        *v233 = v236;
        v233 -= 2;
        v234 -= 32;
        v235 -= 4;
      }
      while (v235);
      if (v231 != (v231 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_258;
LABEL_259:
      v295 = v227;
      v296 = (char *)v219;
      v297 = &v226[8 * v225];
      if (v220)
        operator delete(v220);
LABEL_261:
      v296 = (char *)v219;
      v116 = *(_QWORD **)v114;
      v118 = *((_QWORD *)v114 + 1);
      v238 = v118 - *(_QWORD *)v114;
      if (v238 >= 49)
      {
        v239 = 0;
        v240 = 0xAAAAAAAAAAAAAAABLL * (v238 >> 4);
        v241 = *v116;
        v300 = *(_OWORD *)(v116 + 1);
        v298 = *(_OWORD *)(v116 + 3);
        v299 = v116[5];
        v242 = v116;
        do
        {
          v244 = v242;
          v242 += 6 * v239 + 6;
          v245 = 2 * v239;
          v239 = (2 * v239) | 1;
          v246 = v245 + 2;
          if (v246 < v240 && *(double *)v242 < *((double *)v242 + 6))
          {
            v242 += 6;
            v239 = v246;
          }
          *v244 = *v242;
          *(_OWORD *)(v244 + 1) = *(_OWORD *)(v242 + 1);
          v243 = *(_OWORD *)(v242 + 3);
          v244[5] = v242[5];
          *(_OWORD *)(v244 + 3) = v243;
        }
        while (v239 <= (uint64_t)((unint64_t)(v240 - 2) >> 1));
        v247 = (__int128 *)(v242 + 1);
        v248 = (__int128 *)(v242 + 3);
        if (v242 == (_QWORD *)(v118 - 48))
        {
          *v242 = v241;
          *v247 = v300;
          v117 = v298;
          v242[5] = v299;
          *v248 = v117;
        }
        else
        {
          *v242 = *(_QWORD *)(v118 - 48);
          *v247 = *(_OWORD *)(v118 - 40);
          v249 = *(_OWORD *)(v118 - 24);
          v242[5] = *(_QWORD *)(v118 - 8);
          *v248 = v249;
          *(_QWORD *)(v118 - 48) = v241;
          *(_OWORD *)(v118 - 40) = v300;
          *(_OWORD *)(v118 - 24) = v298;
          *(_QWORD *)(v118 - 8) = v299;
          v250 = (char *)v242 - (char *)v116 + 48;
          if (v250 >= 49)
          {
            v251 = (v250 / 0x30uLL - 2) >> 1;
            v252 = &v116[6 * v251];
            v253 = *(double *)v252;
            v254 = *(double *)v242;
            if (*(double *)v252 < *(double *)v242)
            {
              v303 = *v247;
              v255 = *v248;
              v302 = v242[5];
              v301 = v255;
              do
              {
                v256 = v242;
                v242 = v252;
                *(double *)v256 = v253;
                *(_OWORD *)(v256 + 1) = *(_OWORD *)(v252 + 1);
                v257 = *(_OWORD *)(v252 + 3);
                v256[5] = v252[5];
                *(_OWORD *)(v256 + 3) = v257;
                if (!v251)
                  break;
                v251 = (v251 - 1) >> 1;
                v252 = &v116[6 * v251];
                v253 = *(double *)v252;
              }
              while (*(double *)v252 < v254);
              *(double *)v242 = v254;
              *(_OWORD *)(v242 + 1) = v303;
              *(_OWORD *)(v242 + 3) = v301;
              v242[5] = v302;
            }
          }
        }
        v116 = *(_QWORD **)v114;
        v118 = *((_QWORD *)v114 + 1);
      }
      v115 = (_QWORD *)(v118 - 48);
      *((_QWORD *)v114 + 1) = v118 - 48;
    }
    v114 += 32;
    if (v114 != v288)
      continue;
    break;
  }
LABEL_274:
  sub_207D6D15C(v262, (uint64_t *)&v295, &v292, &v289, v263, a5, a6, a7);
  if (__p)
  {
    v258 = v288;
    if (v288 != __p)
    {
      v259 = v288;
      do
      {
        v261 = (void *)*((_QWORD *)v259 - 4);
        v259 -= 32;
        v260 = v261;
        if (v261)
        {
          *((_QWORD *)v258 - 3) = v260;
          operator delete(v260);
        }
        v258 = v259;
      }
      while (v259 != __p);
    }
    operator delete(__p);
  }
  if (v289)
  {
    v290 = (char *)v289;
    operator delete(v289);
  }
  if (v292)
  {
    v293 = (char *)v292;
    operator delete(v292);
  }
  if (v295)
  {
    v296 = (char *)v295;
    operator delete(v295);
  }
}

void sub_207D78324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  void *v60;
  void *v61;

  sub_207D783FC(&a49);
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
    v60 = a55;
    if (!a55)
    {
LABEL_3:
      v61 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v60 = a55;
    if (!a55)
      goto LABEL_3;
  }
  a56 = (uint64_t)v60;
  operator delete(v60);
  v61 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_4:
  a59 = (uint64_t)v61;
  operator delete(v61);
  goto LABEL_5;
}

void **sub_207D783FC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_207D78470(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  _WORD *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  _WORD *v42;
  unsigned int v43;
  uint64_t v44;
  __int16 *v45;
  uint64_t v46;
  __int16 *v47;
  __int128 v48;
  double *v49;
  BOOL v57;
  unint64_t v64;
  int v65;
  int v66;
  int v69;
  double v70;
  double v73;
  double v76;
  double v79;
  long double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double **v89;
  float *v90;
  double v91;
  double v92;
  double v93;
  unint64_t v94;
  double *v95;
  double *v96;
  uint64_t v97;
  double *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  double *v104;
  double *v105;
  uint64_t v106;
  __int128 v107;
  unint64_t v108;
  double *v109;
  double *v110;
  double v111;
  double v112;
  double *v113;
  __int128 v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  double *v118;
  __int128 v119;
  double *v120;
  uint64_t v121;
  int64_t v122;
  __int128 *v123;
  __int128 *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  double *v129;
  double v130;
  double v131;
  __int128 v132;
  double *v133;
  __int128 v134;
  char *v135;
  _QWORD *v136;
  _QWORD *v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  int64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  int64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  int64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  int64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _BYTE *v188;
  _QWORD *v189;
  int64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  int64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char *v209;
  char *v210;
  int64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  char *v221;
  char *v222;
  int64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _BYTE *v228;
  char *v229;
  int64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  _OWORD *v235;
  __int128 *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  int64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  int64_t v249;
  unint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  _OWORD *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int64_t v261;
  uint64_t v262;
  _QWORD *v263;
  __int128 v264;
  _QWORD *v265;
  uint64_t v266;
  int64_t v267;
  __int128 *v268;
  __int128 *v269;
  __int128 v270;
  uint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  double v274;
  double v275;
  __int128 v276;
  _QWORD *v277;
  __int128 v278;
  char *v279;
  char *v280;
  void *v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  _WORD *v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  _WORD *v291;
  _WORD *v292;
  _WORD *v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v297;
  __int16 *v298;
  unsigned int v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  int v304;
  double v305;
  uint64_t v306;
  uint64_t v307;
  char *__p;
  char *v309;
  void *v310;
  char *v311;
  char *v312;
  void *v313;
  char *v314;
  char *v315;
  void *v316;
  char *v317;
  char *v318;
  __int128 v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  __int128 v324;

  v12 = *((unsigned int *)a1 + 2);
  v11 = *((unsigned int *)a1 + 3);
  if (*((_DWORD *)a1 + 4) != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 912, (uint64_t)"c == 3", 6, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v13 = *a2;
  v316 = 0;
  v317 = 0;
  v318 = 0;
  v297 = v13;
  if (v13)
  {
    v14 = v13;
    v15 = 3 * v13;
    if (v15 >> 61)
      sub_207CA420C();
    v316 = operator new(24 * v14);
    v317 = (char *)v316;
    v318 = (char *)v316 + 8 * v15;
    v313 = 0;
    v314 = 0;
    v315 = 0;
    if (2 * v14)
    {
      if ((2 * v14) >> 61)
        sub_207CA420C();
      v313 = operator new(16 * v297);
      v314 = (char *)v313;
      v315 = (char *)v313 + 16 * v14;
    }
    v310 = 0;
    v311 = 0;
    v13 = v297;
    v312 = 0;
    if (v297 >> 61)
      sub_207CA420C();
    v310 = operator new(8 * v297);
    v311 = (char *)v310;
    v312 = (char *)v310 + 8 * v297;
    if (v297 >> 59)
      sub_207CA420C();
    v16 = 32 * v297;
    v17 = (char *)operator new(32 * v297);
    v18 = &v17[32 * v297];
    __p = v17;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      v17 += 32;
      v16 -= 32;
    }
    while (v16);
    v309 = v18;
    v295 = *a1;
    if (!(_DWORD)v12)
      goto LABEL_18;
    goto LABEL_15;
  }
  v313 = 0;
  v314 = 0;
  v315 = 0;
  v310 = 0;
  v311 = 0;
  v312 = 0;
  __p = 0;
  v309 = 0;
  v295 = *a1;
  if ((_DWORD)v12)
  {
LABEL_15:
    if ((_DWORD)v11
      && *((_DWORD *)a1 + 7) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
LABEL_18:
  if ((_DWORD)v11)
    _ZF = (_DWORD)v12 == 0;
  else
    _ZF = 1;
  if (_ZF)
    v20 = 0;
  else
    v20 = (v11 << 32) | v12;
  if (v20 <= 0x100000000)
    v21 = 0;
  else
    v21 = v20;
  v290 = v21;
  if (HIDWORD(v20) * v21 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v283 = a4;
  v284 = a3;
  v22 = *((_DWORD *)a1 + 5);
  v23 = *((_DWORD *)a1 + 6);
  v24 = *a1;
  v25 = (_DWORD)v12 == 2 || (_DWORD)v11 == 2;
  v26 = !v25;
  v304 = v26;
  if (!v25
    && *((_DWORD *)a1 + 7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| ((_DWORD)v11 != 2 ? (v27 = (_DWORD)v12 == 2) : (v27 = 1), !v27 ? (v28 = (v12 - 2) | ((unint64_t)(v11 - 2) << 32)) : (v28 = 0), (v29 = v12 * HIDWORD(v28), (_DWORD)v12 * HIDWORD(v28) == -1)&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  v302 = v20;
  v292 = (_WORD *)(v24 + 2 * (v23 + v22));
  v30 = *((_DWORD *)a1 + 5);
  v31 = *((_DWORD *)a1 + 6);
  v32 = *((_DWORD *)a1 + 7);
  v33 = *a1;
  v34 = v304;
  if (v32 != -1)
    v34 = 0;
  if (v34 == 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| v29 == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v35 = (_WORD *)(v33 + 2 * (v31 + v30 + v32));
  v37 = *((_DWORD *)a1 + 5);
  v36 = *((_DWORD *)a1 + 6);
  v38 = *((_DWORD *)a1 + 7);
  v39 = *a1;
  v40 = v304;
  if (v38 != -1)
    v40 = 0;
  if (v40 == 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| v29 == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v306 = v39 + 2 * (v36 + v37 + 2 * v38);
  v307 = (v12 << 32) | 1;
  v41 = v292;
  if (v29)
  {
    v289 = v28;
    if ((_DWORD)v28)
    {
      v42 = v35;
      v43 = 0;
      v294 = v302;
      v288 = v12;
      v287 = &v292[v29];
      do
      {
        v44 = 0;
        v45 = &v41[v289];
        v46 = v43 + 1;
        v305 = (double)(unint64_t)v46;
        v301 = v43 * v290;
        v303 = v46 * v290;
        v299 = v43;
        v300 = v290 + v46 * v290;
        v291 = v42;
        v293 = v41;
        v47 = v41;
        v298 = v45;
        do
        {
          _H0 = *v47;
          _H1 = *v42;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (!_ZF & _CF)
            v57 = _S0 == _S1;
          else
            v57 = 0;
          if (!v57)
            goto LABEL_66;
          _H1 = *(_WORD *)(v306 + 2 * ((_DWORD)v307 * (_DWORD)v44 + HIDWORD(v307) * v43));
          __asm { FCVT            S1, H1 }
          _S0 = _S1 / _S0;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          _S0 = roundf(_S0);
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          v64 = (unint64_t)_S0;
          if (v13 <= (unint64_t)_S0)
            goto LABEL_66;
          if (v294)
            v65 = v44 + 2;
          else
            v65 = 0;
          if (v294)
            v66 = v44 + 1;
          else
            v66 = 0;
          _H0 = *(_WORD *)(v295 + 2 * (v66 + v303));
          __asm { FCVT            D8, H0 }
          if (_ZF)
            v69 = 0;
          else
            v69 = v44;
          v70 = log(_D8 + 1.0e-12);
          _H0 = *(_WORD *)(v295 + 2 * (v69 + v303));
          __asm { FCVT            D0, H0 }
          v73 = log(_D0 + 1.0e-12);
          _H0 = *(_WORD *)(v295 + 2 * (v65 + v303));
          __asm { FCVT            D0, H0 }
          v76 = log(_D0 + 1.0e-12);
          _H0 = *(_WORD *)(v295 + 2 * (v66 + v301));
          __asm { FCVT            D0, H0 }
          v79 = log(_D0 + 1.0e-12);
          _H0 = *(_WORD *)(v295 + 2 * (v66 + v300));
          __asm { FCVT            D0, H0 }
          v82 = log(_D0 + 1.0e-12);
          v83 = v79 - v82;
          v84 = v79 + v82 - (v70 + v70) + v79 + v82 - (v70 + v70);
          if (v84 == 0.0)
            v84 = 1.0;
          v85 = v83 / v84;
          v86 = v73 + v76 - (v70 + v70) + v73 + v76 - (v70 + v70);
          if (v86 == 0.0)
            v86 = 1.0;
          v87 = (v73 - v76) / v86 + (double)(unint64_t)(v44 + 1);
          v88 = v85 + v305;
          v89 = (double **)&__p[32 * v64];
          v90 = (float *)(a2[1] + 12 * v64);
          v91 = *v90;
          v92 = v90[1];
          v93 = v90[2];
          v95 = v89[1];
          v94 = (unint64_t)v89[2];
          if ((unint64_t)v95 >= v94)
          {
            v98 = *v89;
            v99 = 0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)*v89) >> 4);
            v100 = v99 + 1;
            if (v99 + 1 > 0x555555555555555)
              sub_207CA420C();
            v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (_QWORD)v98) >> 4);
            if (2 * v101 > v100)
              v100 = 2 * v101;
            if (v101 >= 0x2AAAAAAAAAAAAAALL)
              v102 = 0x555555555555555;
            else
              v102 = v100;
            if (v102 > 0x555555555555555)
              sub_207CA3AB8();
            v103 = (char *)operator new(48 * v102);
            v104 = (double *)&v103[48 * v99];
            *v104 = _D8;
            v104[1] = v87;
            v104[2] = v88;
            v104[3] = v91;
            v104[4] = v92;
            v104[5] = v93;
            v105 = v104;
            if (v95 != v98)
            {
              do
              {
                v106 = *((_QWORD *)v95 - 6);
                v95 -= 6;
                *((_QWORD *)v105 - 6) = v106;
                v105 -= 6;
                *(_OWORD *)(v105 + 1) = *(_OWORD *)(v95 + 1);
                v107 = *(_OWORD *)(v95 + 3);
                v105[5] = v95[5];
                *(_OWORD *)(v105 + 3) = v107;
              }
              while (v95 != v98);
              v95 = *v89;
            }
            v49 = v104 + 6;
            *v89 = v105;
            v89[1] = v104 + 6;
            v89[2] = (double *)&v103[48 * v102];
            if (v95)
              operator delete(v95);
            v13 = v297;
            v45 = v298;
            v43 = v299;
            v89[1] = v49;
            v96 = *v89;
            v97 = (char *)v49 - (char *)*v89;
            if (v97 < 49)
              goto LABEL_107;
LABEL_102:
            v108 = (v97 / 0x30uLL - 2) >> 1;
            v109 = &v96[6 * v108];
            v110 = v49 - 6;
            v111 = *(v49 - 6);
            v112 = *v109;
            if (*v109 < v111)
            {
              v319 = *(_OWORD *)(v49 - 5);
              v322 = *(_OWORD *)(v49 - 3);
              v323 = *((_QWORD *)v49 - 1);
              do
              {
                v113 = v110;
                v110 = v109;
                *v113 = v112;
                *(_OWORD *)(v113 + 1) = *(_OWORD *)(v109 + 1);
                v114 = *(_OWORD *)(v109 + 3);
                v113[5] = v109[5];
                *(_OWORD *)(v113 + 3) = v114;
                if (!v108)
                  break;
                v108 = (v108 - 1) >> 1;
                v109 = &v96[6 * v108];
                v112 = *v109;
              }
              while (*v109 < v111);
              *v110 = v111;
              *(_OWORD *)(v110 + 1) = v319;
              *(_OWORD *)(v110 + 3) = v322;
              *((_QWORD *)v110 + 5) = v323;
              v96 = *v89;
              v49 = v89[1];
              v97 = (char *)v49 - (char *)*v89;
            }
            goto LABEL_107;
          }
          *v95 = _D8;
          v95[1] = v87;
          v95[2] = v88;
          v95[3] = v91;
          v49 = v95 + 6;
          v95[4] = v92;
          v95[5] = v93;
          v13 = v297;
          v45 = v298;
          v43 = v299;
          v89[1] = v95 + 6;
          v96 = *v89;
          v97 = (char *)(v95 + 6) - (char *)*v89;
          if (v97 >= 49)
            goto LABEL_102;
LABEL_107:
          if (0xAAAAAAAAAAAAAAABLL * (v97 >> 4) >= 0x11)
          {
            if ((char *)v49 - (char *)v96 >= 49)
            {
              v115 = 0;
              v116 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v96) >> 4);
              v117 = *(_QWORD *)v96;
              v321 = *(_OWORD *)(v96 + 1);
              v319 = *(_OWORD *)(v96 + 3);
              v320 = *((_QWORD *)v96 + 5);
              v118 = v96;
              do
              {
                v120 = v118;
                v118 += 6 * v115 + 6;
                v121 = 2 * v115;
                v115 = (2 * v115) | 1;
                v122 = v121 + 2;
                if (v122 < v116 && *v118 < v118[6])
                {
                  v118 += 6;
                  v115 = v122;
                }
                *v120 = *v118;
                *(_OWORD *)(v120 + 1) = *(_OWORD *)(v118 + 1);
                v119 = *(_OWORD *)(v118 + 3);
                v120[5] = v118[5];
                *(_OWORD *)(v120 + 3) = v119;
              }
              while (v115 <= (uint64_t)((unint64_t)(v116 - 2) >> 1));
              v123 = (__int128 *)(v118 + 1);
              v124 = (__int128 *)(v118 + 3);
              if (v118 == v49 - 6)
              {
                *(_QWORD *)v118 = v117;
                *v123 = v321;
                v48 = v319;
                *((_QWORD *)v118 + 5) = v320;
                *v124 = v48;
              }
              else
              {
                *v118 = *(v49 - 6);
                *v123 = *(_OWORD *)(v49 - 5);
                v125 = *(_OWORD *)(v49 - 3);
                v118[5] = *(v49 - 1);
                *v124 = v125;
                *((_QWORD *)v49 - 6) = v117;
                *(_OWORD *)(v49 - 5) = v321;
                v126 = v319;
                *((_QWORD *)v49 - 1) = v320;
                *(_OWORD *)(v49 - 3) = v126;
                v127 = (char *)v118 - (char *)v96 + 48;
                if (v127 >= 49)
                {
                  v128 = (v127 / 0x30uLL - 2) >> 1;
                  v129 = &v96[6 * v128];
                  v130 = *v129;
                  v131 = *v118;
                  if (*v129 < *v118)
                  {
                    v324 = *v123;
                    v132 = *v124;
                    v323 = *((_QWORD *)v118 + 5);
                    v322 = v132;
                    do
                    {
                      v133 = v118;
                      v118 = v129;
                      *v133 = v130;
                      *(_OWORD *)(v133 + 1) = *(_OWORD *)(v129 + 1);
                      v134 = *(_OWORD *)(v129 + 3);
                      v133[5] = v129[5];
                      *(_OWORD *)(v133 + 3) = v134;
                      if (!v128)
                        break;
                      v128 = (v128 - 1) >> 1;
                      v129 = &v96[6 * v128];
                      v130 = *v129;
                    }
                    while (*v129 < v131);
                    *v118 = v131;
                    *(_OWORD *)(v118 + 1) = v324;
                    *(_OWORD *)(v118 + 3) = v322;
                    *((_QWORD *)v118 + 5) = v323;
                  }
                }
              }
              v49 = v89[1];
            }
            v89[1] = v49 - 6;
          }
LABEL_66:
          ++v47;
          ++v42;
          ++v44;
        }
        while (v47 != v45);
        v41 = &v293[v288];
        v42 = &v291[v288];
        ++v43;
      }
      while (&v293[v288] != v287);
    }
  }
  v135 = __p;
  if (__p == v309)
    goto LABEL_274;
  while (2)
  {
    v137 = *(_QWORD **)v135;
    v136 = (_QWORD *)*((_QWORD *)v135 + 1);
    while (v137 != v136)
    {
      v140 = v311;
      if (v311 < v312)
      {
        *(_QWORD *)v311 = *v137;
        v141 = (uint64_t)(v140 + 8);
        goto LABEL_150;
      }
      v142 = (char *)v310;
      v143 = v311 - (_BYTE *)v310;
      v144 = (v311 - (_BYTE *)v310) >> 3;
      v145 = v144 + 1;
      if ((unint64_t)(v144 + 1) >> 61)
        goto LABEL_289;
      v146 = v312 - (_BYTE *)v310;
      if ((v312 - (_BYTE *)v310) >> 2 > v145)
        v145 = v146 >> 2;
      if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
        v147 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v147 = v145;
      if (v147)
      {
        if (v147 >> 61)
          goto LABEL_288;
        v148 = (char *)operator new(8 * v147);
        v149 = &v148[8 * v144];
        *(_QWORD *)v149 = *v137;
        v141 = (uint64_t)(v149 + 8);
        v150 = v140 - v142;
        if (v140 == v142)
          goto LABEL_148;
LABEL_142:
        v151 = v150 - 8;
        if (v151 < 0x58)
          goto LABEL_304;
        if ((unint64_t)(v140 - v148 - v143) < 0x20)
          goto LABEL_304;
        v152 = (v151 >> 3) + 1;
        v153 = 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
        v154 = &v140[-v153];
        v149 -= v153;
        v155 = &v148[8 * v144 - 16];
        v156 = v140 - 16;
        v157 = v152 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v158 = *(_OWORD *)v156;
          *((_OWORD *)v155 - 1) = *((_OWORD *)v156 - 1);
          *(_OWORD *)v155 = v158;
          v155 -= 32;
          v156 -= 32;
          v157 -= 4;
        }
        while (v157);
        v140 = v154;
        if (v152 != (v152 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_304:
          do
          {
            v159 = *((_QWORD *)v140 - 1);
            v140 -= 8;
            *((_QWORD *)v149 - 1) = v159;
            v149 -= 8;
          }
          while (v140 != v142);
        }
        goto LABEL_148;
      }
      v148 = 0;
      v149 = (char *)(8 * v144);
      *(_QWORD *)(8 * v144) = *v137;
      v141 = 8 * v144 + 8;
      v150 = v140 - v142;
      if (v140 != v142)
        goto LABEL_142;
LABEL_148:
      v310 = v149;
      v311 = (char *)v141;
      v312 = &v148[8 * v147];
      if (v142)
        operator delete(v142);
LABEL_150:
      v311 = (char *)v141;
      v161 = v314;
      v160 = v315;
      if (v314 < v315)
      {
        *(_QWORD *)v314 = v137[1];
        v162 = v161 + 8;
        goto LABEL_171;
      }
      v163 = (char *)v313;
      v164 = v314 - (_BYTE *)v313;
      v165 = (v314 - (_BYTE *)v313) >> 3;
      v166 = v165 + 1;
      if ((unint64_t)(v165 + 1) >> 61)
        goto LABEL_289;
      v167 = v315 - (_BYTE *)v313;
      if ((v315 - (_BYTE *)v313) >> 2 > v166)
        v166 = v167 >> 2;
      if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
        v168 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v168 = v166;
      if (v168)
      {
        if (v168 >> 61)
          goto LABEL_288;
        v169 = (char *)operator new(8 * v168);
        v170 = &v169[8 * v165];
        *(_QWORD *)v170 = v137[1];
        v162 = v170 + 8;
        v171 = v161 - v163;
        if (v161 == v163)
          goto LABEL_169;
LABEL_163:
        v172 = v171 - 8;
        if (v172 < 0x58)
          goto LABEL_305;
        if ((unint64_t)(v161 - v169 - v164) < 0x20)
          goto LABEL_305;
        v173 = (v172 >> 3) + 1;
        v174 = 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
        v175 = &v161[-v174];
        v170 -= v174;
        v176 = &v169[8 * v165 - 16];
        v177 = v161 - 16;
        v178 = v173 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v179 = *(_OWORD *)v177;
          *((_OWORD *)v176 - 1) = *((_OWORD *)v177 - 1);
          *(_OWORD *)v176 = v179;
          v176 -= 32;
          v177 -= 32;
          v178 -= 4;
        }
        while (v178);
        v161 = v175;
        if (v173 != (v173 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_305:
          do
          {
            v180 = *((_QWORD *)v161 - 1);
            v161 -= 8;
            *((_QWORD *)v170 - 1) = v180;
            v170 -= 8;
          }
          while (v161 != v163);
        }
        goto LABEL_169;
      }
      v169 = 0;
      v170 = (char *)(8 * v165);
      *(_QWORD *)(8 * v165) = v137[1];
      v162 = (char *)(8 * v165 + 8);
      v171 = v161 - v163;
      if (v161 != v163)
        goto LABEL_163;
LABEL_169:
      v160 = &v169[8 * v168];
      v313 = v170;
      v314 = v162;
      v315 = v160;
      if (v163)
      {
        operator delete(v163);
        v160 = v315;
      }
LABEL_171:
      v314 = v162;
      if (v162 < v160)
      {
        *(_QWORD *)v162 = v137[2];
        v181 = (uint64_t)(v162 + 8);
        goto LABEL_194;
      }
      v182 = (char *)v313;
      v183 = v162 - (_BYTE *)v313;
      v184 = (v162 - (_BYTE *)v313) >> 3;
      v185 = v184 + 1;
      if ((unint64_t)(v184 + 1) >> 61)
        goto LABEL_289;
      v186 = v160 - (_BYTE *)v313;
      if (v186 >> 2 > v185)
        v185 = v186 >> 2;
      if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
        v187 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v187 = v185;
      if (v187)
      {
        if (v187 >> 61)
          goto LABEL_288;
        v188 = operator new(8 * v187);
        v189 = &v188[8 * v184];
        *v189 = v137[2];
        v181 = (uint64_t)(v189 + 1);
        v190 = v162 - v182;
        if (v162 == v182)
          goto LABEL_192;
      }
      else
      {
        v188 = 0;
        v189 = (_QWORD *)(8 * v184);
        *(_QWORD *)(8 * v184) = v137[2];
        v181 = 8 * v184 + 8;
        v190 = v162 - v182;
        if (v162 == v182)
          goto LABEL_192;
      }
      v191 = v190 - 8;
      if (v191 < 0x58)
      {
        v192 = v162;
        goto LABEL_191;
      }
      if ((unint64_t)(v162 - v188 - v183) < 0x20)
      {
        v192 = v162;
        do
        {
LABEL_191:
          v199 = *((_QWORD *)v192 - 1);
          v192 -= 8;
          *--v189 = v199;
        }
        while (v192 != v182);
        goto LABEL_192;
      }
      v193 = (v191 >> 3) + 1;
      v194 = 8 * (v193 & 0x3FFFFFFFFFFFFFFCLL);
      v192 = &v162[-v194];
      v189 = (_QWORD *)((char *)v189 - v194);
      v195 = &v188[8 * v184 - 16];
      v196 = v162 - 16;
      v197 = v193 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v198 = *(_OWORD *)v196;
        *(v195 - 1) = *((_OWORD *)v196 - 1);
        *v195 = v198;
        v195 -= 2;
        v196 -= 32;
        v197 -= 4;
      }
      while (v197);
      if (v193 != (v193 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_191;
LABEL_192:
      v313 = v189;
      v314 = (char *)v181;
      v315 = &v188[8 * v187];
      if (v182)
        operator delete(v182);
LABEL_194:
      v314 = (char *)v181;
      v201 = v317;
      v200 = v318;
      if (v317 < v318)
      {
        *(_QWORD *)v317 = v137[3];
        v202 = v201 + 8;
        goto LABEL_215;
      }
      v203 = (char *)v316;
      v204 = v317 - (_BYTE *)v316;
      v205 = (v317 - (_BYTE *)v316) >> 3;
      v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 61)
        goto LABEL_289;
      v207 = v318 - (_BYTE *)v316;
      if ((v318 - (_BYTE *)v316) >> 2 > v206)
        v206 = v207 >> 2;
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFF8)
        v208 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v208 = v206;
      if (v208)
      {
        if (v208 >> 61)
          goto LABEL_288;
        v209 = (char *)operator new(8 * v208);
        v210 = &v209[8 * v205];
        *(_QWORD *)v210 = v137[3];
        v202 = v210 + 8;
        v211 = v201 - v203;
        if (v201 == v203)
          goto LABEL_213;
LABEL_207:
        v212 = v211 - 8;
        if (v212 < 0x58)
          goto LABEL_306;
        if ((unint64_t)(v201 - v209 - v204) < 0x20)
          goto LABEL_306;
        v213 = (v212 >> 3) + 1;
        v214 = 8 * (v213 & 0x3FFFFFFFFFFFFFFCLL);
        v215 = &v201[-v214];
        v210 -= v214;
        v216 = &v209[8 * v205 - 16];
        v217 = v201 - 16;
        v218 = v213 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v219 = *(_OWORD *)v217;
          *((_OWORD *)v216 - 1) = *((_OWORD *)v217 - 1);
          *(_OWORD *)v216 = v219;
          v216 -= 32;
          v217 -= 32;
          v218 -= 4;
        }
        while (v218);
        v201 = v215;
        if (v213 != (v213 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_306:
          do
          {
            v220 = *((_QWORD *)v201 - 1);
            v201 -= 8;
            *((_QWORD *)v210 - 1) = v220;
            v210 -= 8;
          }
          while (v201 != v203);
        }
        goto LABEL_213;
      }
      v209 = 0;
      v210 = (char *)(8 * v205);
      *(_QWORD *)(8 * v205) = v137[3];
      v202 = (char *)(8 * v205 + 8);
      v211 = v201 - v203;
      if (v201 != v203)
        goto LABEL_207;
LABEL_213:
      v200 = &v209[8 * v208];
      v316 = v210;
      v317 = v202;
      v318 = v200;
      if (v203)
      {
        operator delete(v203);
        v200 = v318;
      }
LABEL_215:
      v317 = v202;
      if (v202 < v200)
      {
        *(_QWORD *)v202 = v137[4];
        v221 = v202 + 8;
        goto LABEL_238;
      }
      v222 = (char *)v316;
      v223 = v202 - (_BYTE *)v316;
      v224 = (v202 - (_BYTE *)v316) >> 3;
      v225 = v224 + 1;
      if ((unint64_t)(v224 + 1) >> 61)
        goto LABEL_289;
      v226 = v200 - (_BYTE *)v316;
      if (v226 >> 2 > v225)
        v225 = v226 >> 2;
      if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF8)
        v227 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v227 = v225;
      if (v227)
      {
        if (v227 >> 61)
          goto LABEL_288;
        v228 = operator new(8 * v227);
        v229 = &v228[8 * v224];
        *(_QWORD *)v229 = v137[4];
        v221 = v229 + 8;
        v230 = v202 - v222;
        if (v202 == v222)
          goto LABEL_236;
      }
      else
      {
        v228 = 0;
        v229 = (char *)(8 * v224);
        *(_QWORD *)(8 * v224) = v137[4];
        v221 = (char *)(8 * v224 + 8);
        v230 = v202 - v222;
        if (v202 == v222)
          goto LABEL_236;
      }
      v231 = v230 - 8;
      if (v231 < 0x58)
      {
        v232 = v202;
        goto LABEL_235;
      }
      if ((unint64_t)(v202 - v228 - v223) < 0x20)
      {
        v232 = v202;
        do
        {
LABEL_235:
          v239 = *((_QWORD *)v232 - 1);
          v232 -= 8;
          *((_QWORD *)v229 - 1) = v239;
          v229 -= 8;
        }
        while (v232 != v222);
        goto LABEL_236;
      }
      v233 = (v231 >> 3) + 1;
      v234 = 8 * (v233 & 0x3FFFFFFFFFFFFFFCLL);
      v232 = &v202[-v234];
      v229 -= v234;
      v235 = &v228[8 * v224 - 16];
      v236 = (__int128 *)(v202 - 16);
      v237 = v233 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v238 = *v236;
        *(v235 - 1) = *(v236 - 1);
        *v235 = v238;
        v235 -= 2;
        v236 -= 2;
        v237 -= 4;
      }
      while (v237);
      if (v233 != (v233 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_235;
LABEL_236:
      v200 = &v228[8 * v227];
      v316 = v229;
      v317 = v221;
      v318 = v200;
      if (v222)
      {
        operator delete(v222);
        v200 = v318;
      }
LABEL_238:
      v317 = v221;
      if (v221 < v200)
      {
        *(_QWORD *)v221 = v137[5];
        v240 = (uint64_t)(v221 + 8);
        goto LABEL_261;
      }
      v241 = (char *)v316;
      v242 = v221 - (_BYTE *)v316;
      v243 = (v221 - (_BYTE *)v316) >> 3;
      v244 = v243 + 1;
      if ((unint64_t)(v243 + 1) >> 61)
LABEL_289:
        sub_207CA420C();
      v245 = v200 - (_BYTE *)v316;
      if (v245 >> 2 > v244)
        v244 = v245 >> 2;
      if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
        v246 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v246 = v244;
      if (v246)
      {
        if (v246 >> 61)
LABEL_288:
          sub_207CA3AB8();
        v247 = operator new(8 * v246);
        v248 = &v247[8 * v243];
        *v248 = v137[5];
        v240 = (uint64_t)(v248 + 1);
        v249 = v221 - v241;
        if (v221 == v241)
          goto LABEL_259;
      }
      else
      {
        v247 = 0;
        v248 = (_QWORD *)(8 * v243);
        *(_QWORD *)(8 * v243) = v137[5];
        v240 = 8 * v243 + 8;
        v249 = v221 - v241;
        if (v221 == v241)
          goto LABEL_259;
      }
      v250 = v249 - 8;
      if (v250 < 0x58)
      {
        v251 = v221;
        goto LABEL_258;
      }
      if ((unint64_t)(v221 - v247 - v242) < 0x20)
      {
        v251 = v221;
        do
        {
LABEL_258:
          v258 = *((_QWORD *)v251 - 1);
          v251 -= 8;
          *--v248 = v258;
        }
        while (v251 != v241);
        goto LABEL_259;
      }
      v252 = (v250 >> 3) + 1;
      v253 = 8 * (v252 & 0x3FFFFFFFFFFFFFFCLL);
      v251 = &v221[-v253];
      v248 = (_QWORD *)((char *)v248 - v253);
      v254 = &v247[8 * v243 - 16];
      v255 = v221 - 16;
      v256 = v252 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v257 = *(_OWORD *)v255;
        *(v254 - 1) = *((_OWORD *)v255 - 1);
        *v254 = v257;
        v254 -= 2;
        v255 -= 32;
        v256 -= 4;
      }
      while (v256);
      if (v252 != (v252 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_258;
LABEL_259:
      v316 = v248;
      v317 = (char *)v240;
      v318 = &v247[8 * v246];
      if (v241)
        operator delete(v241);
LABEL_261:
      v317 = (char *)v240;
      v137 = *(_QWORD **)v135;
      v139 = *((_QWORD *)v135 + 1);
      v259 = v139 - *(_QWORD *)v135;
      if (v259 >= 49)
      {
        v260 = 0;
        v261 = 0xAAAAAAAAAAAAAAABLL * (v259 >> 4);
        v262 = *v137;
        v321 = *(_OWORD *)(v137 + 1);
        v319 = *(_OWORD *)(v137 + 3);
        v320 = v137[5];
        v263 = v137;
        do
        {
          v265 = v263;
          v263 += 6 * v260 + 6;
          v266 = 2 * v260;
          v260 = (2 * v260) | 1;
          v267 = v266 + 2;
          if (v267 < v261 && *(double *)v263 < *((double *)v263 + 6))
          {
            v263 += 6;
            v260 = v267;
          }
          *v265 = *v263;
          *(_OWORD *)(v265 + 1) = *(_OWORD *)(v263 + 1);
          v264 = *(_OWORD *)(v263 + 3);
          v265[5] = v263[5];
          *(_OWORD *)(v265 + 3) = v264;
        }
        while (v260 <= (uint64_t)((unint64_t)(v261 - 2) >> 1));
        v268 = (__int128 *)(v263 + 1);
        v269 = (__int128 *)(v263 + 3);
        if (v263 == (_QWORD *)(v139 - 48))
        {
          *v263 = v262;
          *v268 = v321;
          v138 = v319;
          v263[5] = v320;
          *v269 = v138;
        }
        else
        {
          *v263 = *(_QWORD *)(v139 - 48);
          *v268 = *(_OWORD *)(v139 - 40);
          v270 = *(_OWORD *)(v139 - 24);
          v263[5] = *(_QWORD *)(v139 - 8);
          *v269 = v270;
          *(_QWORD *)(v139 - 48) = v262;
          *(_OWORD *)(v139 - 40) = v321;
          *(_OWORD *)(v139 - 24) = v319;
          *(_QWORD *)(v139 - 8) = v320;
          v271 = (char *)v263 - (char *)v137 + 48;
          if (v271 >= 49)
          {
            v272 = (v271 / 0x30uLL - 2) >> 1;
            v273 = &v137[6 * v272];
            v274 = *(double *)v273;
            v275 = *(double *)v263;
            if (*(double *)v273 < *(double *)v263)
            {
              v324 = *v268;
              v276 = *v269;
              v323 = v263[5];
              v322 = v276;
              do
              {
                v277 = v263;
                v263 = v273;
                *(double *)v277 = v274;
                *(_OWORD *)(v277 + 1) = *(_OWORD *)(v273 + 1);
                v278 = *(_OWORD *)(v273 + 3);
                v277[5] = v273[5];
                *(_OWORD *)(v277 + 3) = v278;
                if (!v272)
                  break;
                v272 = (v272 - 1) >> 1;
                v273 = &v137[6 * v272];
                v274 = *(double *)v273;
              }
              while (*(double *)v273 < v275);
              *(double *)v263 = v275;
              *(_OWORD *)(v263 + 1) = v324;
              *(_OWORD *)(v263 + 3) = v322;
              v263[5] = v323;
            }
          }
        }
        v137 = *(_QWORD **)v135;
        v139 = *((_QWORD *)v135 + 1);
      }
      v136 = (_QWORD *)(v139 - 48);
      *((_QWORD *)v135 + 1) = v139 - 48;
    }
    v135 += 32;
    if (v135 != v309)
      continue;
    break;
  }
LABEL_274:
  sub_207D6D15C(v283, (uint64_t *)&v316, &v313, &v310, v284, a5, a6, a7);
  if (__p)
  {
    v279 = v309;
    if (v309 != __p)
    {
      v280 = v309;
      do
      {
        v282 = (void *)*((_QWORD *)v280 - 4);
        v280 -= 32;
        v281 = v282;
        if (v282)
        {
          *((_QWORD *)v279 - 3) = v281;
          operator delete(v281);
        }
        v279 = v280;
      }
      while (v280 != __p);
    }
    operator delete(__p);
  }
  if (v310)
  {
    v311 = (char *)v310;
    operator delete(v310);
  }
  if (v313)
  {
    v314 = (char *)v313;
    operator delete(v313);
  }
  if (v316)
  {
    v317 = (char *)v316;
    operator delete(v316);
  }
}

void sub_207D79ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  void *v60;
  void *v61;

  sub_207D783FC(&a49);
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
    v60 = a55;
    if (!a55)
    {
LABEL_3:
      v61 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v60 = a55;
    if (!a55)
      goto LABEL_3;
  }
  a56 = (uint64_t)v60;
  operator delete(v60);
  v61 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_4:
  a59 = (uint64_t)v61;
  operator delete(v61);
  goto LABEL_5;
}

uint64_t sub_207D79BA4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

float sub_207D79C0C(float a1, float a2, float a3)
{
  float v6;
  uint8_t v8[16];
  uint8_t buf[16];

  sub_207CF7E1C();
  sub_207CF7B20();
  if (os_variant_has_internal_content())
  {
    if (a2 <= 0.0
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 72, (uint64_t)"patch_diameter > 0.0f", 21, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| a3 <= 0.0&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 73, (uint64_t)"patch_distance > 0.0f", 21, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    if (a2 <= 0.0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ComputePatchCameraFocalLength: Patch diameter should be non-zero and non-negative.", buf, 2u);
      if (a3 > 0.0)
        goto LABEL_12;
    }
    else if (a3 > 0.0)
    {
      goto LABEL_12;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ComputePatchCameraFocalLength: Patch distance should be non-zero and non-negative.", v8, 2u);
    }
  }
LABEL_12:
  v6 = 1.0;
  if (a2 != 0.0)
    v6 = a2;
  return (float)(a1 / v6) * a3;
}

float sub_207D79D94@<S0>(int32x2_t *a1@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>, float32x2_t a4@<D0>, float32x4_t a5@<Q1>)
{
  int v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v11;
  __int128 v12;
  void *v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  __int32 v26;
  __int32 v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  __int32 v33;
  float v34;
  int8x16_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float result;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;

  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 20) = 0;
  *(_QWORD *)(a3 + 28) = 0x3F80000000000000;
  *(_DWORD *)a3 = 1065353216;
  *(_DWORD *)(a3 + 16) = 1065353216;
  v6 = a2[1].u8[4];
  if (a2[1].i8[4])
  {
    a4.i32[0] = a2[1].i32[0];
    *(int32x2_t *)a5.f32 = *a2;
    v7 = a5;
    v7.i32[2] = a4.i32[0];
    v8 = vmulq_n_f32(v7, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32), (float32x2_t)vdup_lane_s32(*a2, 1), (float32x2_t)*a2, 1), a4, a4).f32[0]));
  }
  else
  {
    v8 = (float32x4_t)xmmword_208235300;
  }
  v41 = (int8x16_t)v8;
  a5.i32[0] = a1[1].i32[0];
  *(int32x2_t *)v8.f32 = *a1;
  v9 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32), (float32x2_t)vdup_lane_s32(*a1, 1), (float32x2_t)*a1, 1), *(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32).f32[0]);
  if (v9 != 0.0 && v9 > 0.000001)
  {
    v8.i32[2] = a1[1].i32[0];
    v11 = vmulq_n_f32(v8, 1.0 / v9);
    v8.i32[0] = v11.i32[2];
    v42 = v8;
    v43 = v11;
    v12 = *(_OWORD *)(a3 + 16);
    *((_QWORD *)&v12 + 1) = v11.i64[0];
    *(_DWORD *)(a3 + 32) = v11.i32[2];
    *(_OWORD *)(a3 + 16) = v12;
  }
  else
  {
    v8.i64[0] = 0;
    v43 = v8;
    v8.i32[0] = 1.0;
    v42 = v8;
  }
  v13 = (void *)MEMORY[0x20BD028B4](32, 32);
  v15 = (int8x16_t)v42;
  v16 = (int32x4_t)v43;
  v17 = (int32x4_t)v43;
  v17.i32[2] = v42.i32[0];
  v18 = (int32x4_t)v41;
  v19 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), v41, 8uLL);
  v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), v41, 0xCuLL);
  v21 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL);
  v22 = vsubq_f32(vmulq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL)), vmulq_f32(v20, (float32x4_t)vextq_s8(v21, (int8x16_t)v17, 8uLL)));
  v23 = vnegq_f32(v22);
  v24 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v22, v22)) + vmuls_lane_f32(v23.f32[2], v23, 2));
  if (v24 != 0.0 && v24 > 0.000001)
  {
    v34 = 1.0 / v24;
    *(float32x2_t *)v21.i8 = vmul_n_f32(*(float32x2_t *)v23.f32, v34);
    v32 = v23.f32[2] * v34;
    v26 = *(_DWORD *)(a3 + 32);
    v28 = *(int32x4_t *)(a3 + 16);
    v27 = v28.i32[3];
    v33 = *(_QWORD *)(a3 + 24);
    v15.i32[0] = v21.i32[1];
    v28.i32[0] = v33;
  }
  else
  {
    v26 = *(_DWORD *)(a3 + 32);
    v28 = *(int32x4_t *)(a3 + 16);
    v27 = v28.i32[3];
    v28.i32[0] = *(_QWORD *)(a3 + 24);
    if (!v6)
    {
      v35 = *(int8x16_t *)a3;
      LODWORD(v32) = *(_QWORD *)(a3 + 8);
      v15.i32[0] = HIDWORD(*(_QWORD *)a3);
      *(int8x8_t *)v14.i8 = vext_s8(*(int8x8_t *)a3, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL);
      v21.i32[0] = *(_OWORD *)a3;
      goto LABEL_19;
    }
    v29 = v42;
    *(uint64_t *)((char *)v29.i64 + 4) = v43.i64[0];
    v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1);
    v30.i32[1] = v42.i32[0];
    v30.i32[2] = v43.i32[0];
    v31 = vmlaq_f32(vmulq_f32(v29, (float32x4_t)xmmword_208235310), v30, (float32x4_t)xmmword_208235320);
    v15 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL);
    v21 = (int8x16_t)vmulq_n_f32(v31, -1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1), *(float32x2_t *)v31.f32, 1), *(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).f32[0]));
    v32 = *(float *)&v21.i32[2];
    v15.i32[0] = v21.i32[1];
    v33 = *(_QWORD *)(a3 + 24);
  }
  v35 = v21;
  v35.i32[1] = v15.i32[0];
  *(float *)&v35.i32[2] = v32;
  v28.i32[1] = v27;
  v28.i32[2] = v26;
  v14 = v15;
  *(float *)&v14.i32[1] = v32;
  v16 = v28;
  v28.i32[0] = v33;
LABEL_19:
  v16.i32[2] = v26;
  v36 = (int32x4_t)vextq_s8(vextq_s8(v35, v35, 4uLL), v14, 0xCuLL);
  v37 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL), (int8x16_t)v16, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL), (int8x16_t)v36, 8uLL));
  v38 = (float32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  v39 = vmulq_n_f32(v37, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 1), *(float32x2_t *)v37.f32, 1), v38, v38).f32[0]));
  v37.i32[0] = vdupq_lane_s32(*(int32x2_t *)v39.f32, 1).u32[0];
  v37.i32[1] = v39.i32[2];
  v37.i64[1] = __PAIR64__(v27, v28.u32[0]);
  v21.i32[1] = v15.i32[0];
  v21.i64[1] = __PAIR64__(v39.u32[0], LODWORD(v32));
  *(_DWORD *)(a3 + 32) = v26;
  *(int8x16_t *)a3 = v21;
  *(float32x4_t *)(a3 + 16) = v37;
  operator delete[](v13);
  return result;
}

float32x4_t sub_207D7A06C(float32x2_t *a1, uint64_t *a2, uint64_t *a3, float32x2_t **a4, double a5, double a6, double a7, double a8, float32x4_t a9, double a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v22;
  unint64_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int8x16_t v47;
  int32x4_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t result;
  void *v65;
  float32x4_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  float32x4_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  _BYTE v80[20];
  float v81;
  float32x2_t v82;
  float v83;
  float32x2_t v84;
  float v85;
  _BYTE v86[20];
  float v87;
  float v88;
  float v89;
  float v90;

  if (a2 == a3)
  {
    v23 = 0;
    v26 = 0uLL;
    v66 = 0u;
    v24 = 0.0;
  }
  else
  {
    v22 = a2;
    v23 = 0;
    v24 = 0.0;
    v25.i32[3] = 0;
    v66 = 0u;
    v26 = 0uLL;
    v10.i32[0] = 0;
    LODWORD(v18) = 0;
    LODWORD(v17) = 0;
    v11.i32[0] = 0;
    LODWORD(v16) = 0;
    LODWORD(v14) = 0;
    v12.i32[0] = 0;
    LODWORD(v15) = 0;
    LODWORD(v13) = 0;
    v27 = 0uLL;
    do
    {
      v28 = *v22;
      v29 = v22[1];
      if (v29 - *v22 != (char *)a4[1] - (char *)*a4)
      {
        v67 = v18;
        v68 = v17;
        v69 = v16;
        v70 = v27;
        v71 = v15;
        v72 = v14;
        v73 = v13;
        v74 = v12;
        v75 = v11;
        v76 = v10;
        v78 = v26;
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 204, (uint64_t)"prediction_set_p.size() == model_keypoints3D_m.size()", 53, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v28 = *v22;
        v29 = v22[1];
        v10 = v76;
        v26 = v78;
        v12 = v74;
        v11 = v75;
        v14 = v72;
        v13 = v73;
        v27 = v70;
        v15 = v71;
        v17 = v68;
        v16 = v69;
        v18 = v67;
      }
      v30 = v29 - v28;
      if (v29 != v28)
      {
        v31 = *a4;
        v32 = 0xAAAAAAAAAAAAAAABLL * (v30 >> 2);
        if (v32 <= 1)
          v32 = 1;
        v33 = v32;
        do
        {
          LODWORD(a8) = *(_DWORD *)(v28 + 8);
          v34 = *(_QWORD *)v28;
          v28 += 12;
          v25.i64[0] = v34;
          v25.i32[2] = LODWORD(a8);
          LODWORD(a7) = v31[1].i32[0];
          v35 = *v31;
          v31 = (float32x2_t *)((char *)v31 + 12);
          *(float32x2_t *)a9.f32 = v35;
          v36 = a9;
          v36.i32[2] = LODWORD(a7);
          a10 = COERCE_DOUBLE(vdup_lane_s32((int32x2_t)v35, 1));
          *(float32x2_t *)v37.f32 = vmul_n_f32(*(float32x2_t *)v25.f32, v35.f32[0]);
          *(float32x2_t *)&v37.u32[2] = vmul_f32(*(float32x2_t *)&a8, v35);
          *(float32x2_t *)v38.f32 = vmul_lane_f32(*(float32x2_t *)v25.f32, v35, 1);
          *(float32x2_t *)&v38.u32[2] = vmul_lane_f32(*(float32x2_t *)&a8, v35, 1);
          *(float32x2_t *)v39.f32 = vmul_n_f32(*(float32x2_t *)v25.f32, *(float *)&a7);
          *(float32x2_t *)&v39.u32[2] = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a7);
          v10.i32[1] = v18;
          v10.i32[2] = v17;
          v11.i32[1] = v16;
          v11.i32[2] = v14;
          v12.i32[1] = v15;
          v12.i32[2] = v13;
          v10 = vaddq_f32(v10, v37);
          v11 = vaddq_f32(v11, v38);
          v12 = vaddq_f32(v12, v39);
          LODWORD(v14) = v11.i32[2];
          LODWORD(v16) = v11.i32[1];
          LODWORD(v17) = v10.i32[2];
          LODWORD(v18) = v10.i32[1];
          LODWORD(v13) = v12.i32[2];
          LODWORD(v15) = v12.i32[1];
          a8 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32), *(float32x2_t *)&a10, v35, 1), *(float32x2_t *)&a7, *(float32x2_t *)&a7));
          v40 = sqrtf(*(float *)&a8);
          v24 = v24 + (float)(v40 * v40);
          v26 = vaddq_f32(v26, v25);
          v27 = vaddq_f32(v27, v36);
          --v33;
        }
        while (v33);
        v23 += v32;
        v66 = v27;
      }
      v22 += 3;
    }
    while (v22 != a3);
  }
  v79 = v26;
  *(float *)&a10 = (float)v23;
  v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a10, 0);
  sub_207CC4C54();
  v65 = (void *)MEMORY[0x20BD028B4]((4 * 0.0 + 31) & 0x7FFFFFFE0, 32);
  sub_207CC4C54();
  operator delete[](v65);
  v41.f32[0] = v85;
  v43.f32[0] = v81;
  v44.f32[0] = v83;
  v45 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v84, *(float *)v80), *(float32x2_t *)v86, *(float32x2_t *)v80, 1), *(float32x2_t *)&v86[12], *(float32x4_t *)v80, 2);
  v46 = (float32x2_t)vextq_s8(*(int8x16_t *)v86, *(int8x16_t *)v86, 8uLL).u64[0];
  *(float32x2_t *)v47.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v84, *(float *)&v80[12]), *(float32x2_t *)v86, *(float32x2_t *)&v80[12], 1), *(float32x2_t *)&v86[12], v81);
  v42.f32[0] = v87;
  v47.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v41, *(float32x2_t *)&v80[12]), v46, *(float32x2_t *)&v80[12], 1), v43, v42);
  *(float32x2_t *)v48.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v84, v82.f32[0]), *(float32x2_t *)v86, v82, 1), *(float32x2_t *)&v86[12], v83);
  v48.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(v41, v82), v46, v82, 1), v44, v42);
  v49 = (float32x2_t)vextq_s8(*(int8x16_t *)v80, *(int8x16_t *)v80, 8uLL).u64[0];
  v50 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v47, v47, 0xCuLL), v47, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v48, v48), (int8x16_t)v48, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), v47, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v48, (int8x16_t)v48, 0xCuLL), (int8x16_t)v48, 8uLL));
  *(float32x2_t *)v47.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v45, *(float32x2_t *)v50.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 1), v45, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), vmla_f32(vmla_lane_f32(vmul_f32(v41, *(float32x2_t *)v80), v46, *(float32x2_t *)v80, 1), v49, v42));
  v51 = vmul_f32(*(float32x2_t *)v80, 0);
  v52 = vmla_f32(vmla_f32(*(float32x2_t *)v80, 0, *(float32x2_t *)&v80[12]), 0, v82);
  *(float32x2_t *)v48.i8 = vmul_f32(v49, 0);
  v53 = vmla_f32(vmla_f32(v49, 0, v43), 0, v44);
  v54 = vmla_f32(vadd_f32(*(float32x2_t *)&v80[12], v51), 0, v82);
  *(float32x2_t *)v50.i8 = vmla_f32(vadd_f32(v43, *(float32x2_t *)v48.i8), 0, v44);
  v55 = vmla_n_f32(vmla_f32(v51, 0, *(float32x2_t *)&v80[12]), v82, *(float *)v47.i32);
  *(float32x2_t *)v48.i8 = vmla_f32(vmla_f32(*(float32x2_t *)v48.i8, 0, v43), *(float32x2_t *)v47.i8, v44);
  v56 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v52, v84.f32[0]), v54, v84, 1), v55, v85);
  v57 = vmla_f32(vmla_lane_f32(vmul_f32(v53, v84), *(float32x2_t *)v50.i8, v84, 1), v41, *(float32x2_t *)v48.i8);
  v58 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v52, *(float *)v86), v54, *(float32x2_t *)v86, 1), v55, *(float32x4_t *)v86, 2);
  v59 = vmla_f32(vmla_lane_f32(vmul_f32(v53, *(float32x2_t *)v86), *(float32x2_t *)v50.i8, *(float32x2_t *)v86, 1), v46, *(float32x2_t *)v48.i8);
  v60 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v52, *(float *)&v86[12]), v54, *(float32x2_t *)&v86[12], 1), v55, v87);
  v61 = vmla_f32(vmla_lane_f32(vmul_f32(v53, *(float32x2_t *)&v86[12]), *(float32x2_t *)v50.i8, *(float32x2_t *)&v86[12], 1), v42, *(float32x2_t *)v48.i8);
  v62 = (int8x16_t)vdivq_f32(v66, v77);
  *(float32x2_t *)v63.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v56, *(float *)v62.i32), v58, *(float32x2_t *)v62.i8, 1), v60, (float32x4_t)v62, 2);
  *(float32x2_t *)&v63.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v57, *(float32x2_t *)v62.i8), v59, *(float32x2_t *)v62.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), v61);
  a1[1].i32[0] = v57.i32[0];
  *a1 = v56;
  a1[1].i32[1] = 0;
  a1[3].i32[0] = v59.i32[0];
  a1[2] = v58;
  a1[3].i32[1] = 0;
  a1[5].i32[0] = v61.i32[0];
  a1[4] = v60;
  a1[5].i32[1] = 0;
  result = vsubq_f32(vdivq_f32(v79, v77), v63);
  a1[7].i32[0] = result.i32[2];
  a1[6] = *(float32x2_t *)result.f32;
  a1[7].i32[1] = 1065353216;
  a1[8].f32[0] = (float)(v24 / (float)v23) / (float)((float)(v88 + v89) + (float)(v90 * *(float *)v47.i32));
  return result;
}

void sub_207D7A618(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

float sub_207D7A62C@<S0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, float32x4_t a8@<Q4>, double a9@<D5>)
{
  float32x4_t v12;
  __int32 v13;
  int8x16_t v14;
  __int32 v15;
  __int32 v16;
  uint64_t *v17;
  uint64_t *v18;
  float v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int8x16_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x2_t *v28;
  float32x2_t *v29;
  uint64_t v30;
  unint64_t v31;
  float32x2_t *v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x2_t v38;
  float v39;
  float result;
  float v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;

  sub_207D7A06C((float32x2_t *)&v51, *a1, a1[1], (float32x2_t **)a2, a4, a5, a6, a7, a8, a9);
  v12.i64[1] = v51.i64[1];
  v13 = v51.i32[3];
  v14 = v53;
  v42 = v51;
  v43 = v52;
  v15 = v52.i32[3];
  v16 = v53.i32[3];
  v44 = v54;
  v41 = v54.f32[3];
  v17 = *a1;
  v18 = a1[1];
  v19 = 0.0;
  v20 = 0.0;
  if (*a1 != v18)
  {
    v21 = (float32x2_t)vzip1q_s32(v51, v52).u64[0];
    v22 = (float32x2_t)vtrn2q_s32(v51, v52).u64[0];
    v23 = (float32x2_t)vzip2q_s32(v51, v52).u64[0];
    v24 = (int8x16_t)vnegq_f32(v54);
    *(float32x2_t *)v27.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v51.i8, *(int32x2_t *)v52.i8), *(float *)v24.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)v51.i8, *(int32x2_t *)v52.i8), *(float32x2_t *)v54.f32, 1), v23, v54, 2);
    v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1);
    v26 = (float32x2_t)vextq_s8(v53, v53, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v24.i8), v25, *(float32x2_t *)v54.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), v26);
    v27.i64[1] = v12.i64[0];
    v49 = v21;
    v50 = v53;
    v47 = v23;
    v48 = v22;
    v45 = v26;
    v46 = v27;
    do
    {
      v28 = (float32x2_t *)*v17;
      v29 = (float32x2_t *)v17[1];
      v30 = (uint64_t)v29 - *v17;
      if (v30 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/PatchTrackingUtils.cpp", 178, (uint64_t)"prediction_set_in_patch.size() == model_keypoints3D.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v28 = (float32x2_t *)*v17;
        v29 = (float32x2_t *)v17[1];
        v30 = (uint64_t)v29 - *v17;
        v21 = v49;
        v14 = v50;
        v23 = v47;
        v22 = v48;
        v26 = v45;
        v27 = v46;
      }
      if (v29 != v28)
      {
        v31 = v30 / 12;
        v32 = *(float32x2_t **)a2;
        if (v31 <= 1)
          v31 = 1;
        do
        {
          v33 = *v28;
          v12.i32[0] = v28[1].i32[0];
          *(float32x2_t *)v34.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v21, COERCE_FLOAT(*v28)), v22, *v28, 1), v23, v12.f32[0]);
          *(float32x2_t *)&v34.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *v28), v25, *v28, 1), *(float32x2_t *)v12.f32, v26);
          v33.i32[0] = v32[1].i32[0];
          v35 = *v32;
          v32 = (float32x2_t *)((char *)v32 + 12);
          *(float32x2_t *)v12.f32 = v35;
          v36 = v12;
          v36.i32[2] = v33.i32[0];
          v37 = (int8x16_t)vsubq_f32(vaddq_f32(v27, v34), v36);
          v38 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
          *(double *)v12.i64 = v20;
          v20 = fmin((float)(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1), *(float32x2_t *)v37.i8, 1), v38, v38).f32[0])/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32), (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1), v35, 1), v33, v33).f32[0])), 1.0)+ v20;
          v19 = v19 + 1.0;
          v28 = (float32x2_t *)((char *)v28 + 12);
          --v31;
        }
        while (v31);
      }
      v17 += 3;
    }
    while (v17 != v18);
  }
  if (v19 == 0.0)
    v39 = 1.0;
  else
    v39 = v19;
  *(_DWORD *)(a3 + 12) = v42.i32[2];
  *(float *)a3 = fmaxf(1.0 - (float)(v20 / v39), 0.0);
  *(_QWORD *)(a3 + 4) = v42.i64[0];
  *(_DWORD *)(a3 + 16) = v13;
  *(_DWORD *)(a3 + 28) = v43.i32[2];
  *(_QWORD *)(a3 + 20) = v43.i64[0];
  *(_DWORD *)(a3 + 32) = v15;
  *(_DWORD *)(a3 + 44) = v14.i32[2];
  *(_QWORD *)(a3 + 36) = v14.i64[0];
  *(_DWORD *)(a3 + 48) = v16;
  *(_DWORD *)(a3 + 60) = v44.i32[2];
  *(_QWORD *)(a3 + 52) = v44.i64[0];
  result = v41;
  *(float *)(a3 + 64) = v41;
  return result;
}

uint64_t sub_207D7A8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t **a9, unint64_t a10, unint64_t a11, char a12, uint64_t a13)
{
  int8x16_t v13;
  float32x4_t v14;
  uint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  void **v24;
  void **v25;
  _QWORD *v26;
  _QWORD *v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  _BYTE *v37;
  _BYTE *v38;
  int64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  float *v60;
  uint64_t v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  double *v72;
  double *v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  double *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double *v87;
  char *v88;
  double *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  double *v93;
  double *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  double *v101;
  unint64_t v102;
  double *v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  double *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  float *v111;
  unint64_t v112;
  char *v113;
  double *v114;
  _BYTE *v115;
  int64_t v116;
  int64_t v117;
  unint64_t v118;
  int64_t v119;
  unint64_t v120;
  _BYTE *v121;
  double *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  double *v132;
  double *v133;
  int64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  double *v140;
  unint64_t v141;
  double *v142;
  uint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  double *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  void *v150;
  char *v151;
  double *v152;
  int64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  double *v159;
  unint64_t v160;
  double *v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  double *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  int64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  char *v174;
  int64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  char *v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  float v188;
  _QWORD *v189;
  unint64_t v190;
  void *v191;
  unint64_t v192;
  float64x2_t v193;
  unsigned int *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _BYTE *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  void *v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  int64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  __int128 *v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  char *v226;
  int64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _BYTE *v232;
  _QWORD *v233;
  int64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  _OWORD *v239;
  char *v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _BYTE *v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  int64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  __int128 *v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  float32x4_t *v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float64x2_t v270;
  float v271;
  float64x2_t v272;
  float v273;
  float64x2_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  __int128 v285;
  double v286;
  uint64_t v287;
  const void *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  float *v297;
  char *v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  _BYTE *v302;
  int v303;
  char *v304;
  char *v305;
  unint64_t v306;
  unint64_t v307;
  char *v308;
  char *v309;
  unsigned int v310;
  uint64_t v311;
  void *v312;
  _OWORD *v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  size_t v319;
  _QWORD *v320;
  void *v321;
  void *v322;
  char *v323;
  uint64_t (*v324)(_QWORD);
  void *v325;
  char *v326;
  int64_t v327;
  int64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  uint64_t (*v333)(_QWORD);
  char *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  char *v339;
  double *v340;
  const double *v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  void *v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  char *v353;
  size_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  _OWORD *v359;
  __int128 v360;
  __int128 v361;
  char *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  _OWORD *v369;
  __int128 v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  char *v377;
  char *v378;
  char *v379;
  unint64_t v380;
  _OWORD *v381;
  char *v382;
  char *v383;
  char *v384;
  __int128 v385;
  void *v386;
  _BYTE *v387;
  uint64_t v388;
  _BYTE *v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  char *v395;
  char *v396;
  char *v397;
  int64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  char *v404;
  __int128 *v405;
  uint64_t v406;
  __int128 v407;
  int v408;
  uint64_t v409;
  size_t v410;
  void *v411;
  unsigned int v412;
  _QWORD *v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  _QWORD *v417;
  uint64_t v418;
  void **v419;
  uint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  _QWORD *v437;
  unint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t *v444;
  unint64_t *v445;
  unint64_t *v446;
  unint64_t v447;
  unint64_t *v448;
  unint64_t v449;
  unint64_t *v450;
  unint64_t *v451;
  unint64_t v452;
  char v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *p_shared_owners;
  unint64_t v458;
  unint64_t v459;
  int v460;
  unint64_t *v461;
  unint64_t *v462;
  unint64_t *v463;
  unint64_t v464;
  unint64_t *v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t v468;
  __int128 v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t v474;
  _QWORD *v475;
  unint64_t v476;
  char *v477;
  unint64_t *v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  unint64_t *v482;
  double v483;
  uint64_t v484;
  char *v485;
  uint64_t v486;
  unint64_t v487;
  char *v488;
  int v489;
  char *v490;
  unint64_t *v491;
  uint64_t v492;
  char *v493;
  char *v494;
  unint64_t v495;
  unint64_t *v496;
  unint64_t v497;
  unint64_t *v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  void *v509;
  char v510;
  float v512;
  char v513;
  float v514;
  float32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  float32x2_t v518;
  double v519;
  float32x2_t v520;
  double v521;
  float32x2_t v522;
  int v523;
  int v524;
  int v525;
  float v526;
  float v527;
  float v528;
  int v529;
  _QWORD *v531;
  const std::locale::facet *v532;
  __int128 *v533;
  uint64_t v534;
  size_t v535;
  void ***v536;
  unint64_t v537;
  size_t v538;
  _OWORD *v539;
  _OWORD *v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  int *v544;
  unint64_t v545;
  _OWORD *v546;
  __int128 *v547;
  uint64_t v548;
  __int128 v549;
  int v550;
  double v551;
  double v552;
  float32x4_t v553;
  float v554;
  float v555;
  float v556;
  float *v557;
  uint64_t v558;
  float v559;
  float v560;
  _QWORD *v561;
  const std::locale::facet *v562;
  _QWORD *v563;
  float v564;
  uint64_t v565;
  unsigned int v566;
  float v567;
  unsigned int v568;
  uint64_t v569;
  float *v570;
  float v571;
  float *v572;
  unint64_t v573;
  unint64_t v574;
  float32x4_t *v575;
  uint64_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float *v579;
  float v580;
  float v581;
  double v582;
  double v583;
  float *v584;
  uint64_t v585;
  float v586;
  float v587;
  _BOOL4 v589;
  float32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  float32x2_t v593;
  double v594;
  float32x2_t v595;
  double v596;
  float32x2_t v597;
  float v598;
  int *v600;
  int v601;
  float v602;
  float v603;
  _QWORD *v604;
  _QWORD *v605;
  uint64_t v606;
  __int128 v607;
  __int128 v608;
  void ***v609;
  _QWORD *v610;
  _QWORD *v611;
  float v612;
  unsigned int v613;
  _QWORD *v614;
  _QWORD *v615;
  const std::locale::facet *v616;
  unint64_t v617;
  int v618;
  float v619;
  _QWORD *v620;
  const std::locale::facet *v621;
  _QWORD *v622;
  _QWORD *v623;
  const std::locale::facet *v624;
  _QWORD *v625;
  const std::locale::facet *v626;
  int v627;
  _QWORD *v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  float32x2_t v635;
  int8x16_t v636;
  int8x16_t v637;
  int8x16_t v638;
  float32x4_t v639;
  unint64_t v640;
  uint64_t v641;
  unint64_t *v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x2_t *v654;
  float32x4_t v655;
  int8x16_t v656;
  int8x16_t v657;
  int32x4_t v658;
  int8x16_t v659;
  float32x4_t v660;
  int8x16_t v661;
  int8x16_t v662;
  uint64_t v663;
  float32x2_t v664;
  float32x2_t v665;
  float32x2_t v666;
  unint64_t *v667;
  float32x2_t *v668;
  uint64_t v669;
  unint64_t v670;
  float32x4_t v671;
  int8x16_t v672;
  BOOL v673;
  BOOL v674;
  void *v675;
  unint64_t v676;
  float v677;
  float *v678;
  uint64_t v679;
  unint64_t v680;
  float32x4_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  uint64_t v693;
  float32x2_t v694;
  float32x4_t v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  float32x4_t v699;
  int8x16_t v700;
  float32x4_t v701;
  float v702;
  float v703;
  float32x2_t v704;
  float32x2_t v705;
  float32x2_t v706;
  uint64_t *v707;
  float32x2_t *v708;
  _QWORD *v709;
  unint64_t v710;
  uint64_t v711;
  float32x2_t *v712;
  float32x4_t v713;
  int32x4_t v714;
  int32x4_t v715;
  _QWORD *v716;
  uint64_t v717;
  _QWORD *v718;
  uint64_t v719;
  _QWORD *v720;
  uint64_t v721;
  _QWORD *v722;
  uint64_t v723;
  _QWORD *v725;
  double v726;
  double v727;
  _QWORD *v728;
  const std::locale::facet *v729;
  double v730;
  double v731;
  _QWORD *v732;
  unint64_t v733;
  char v734;
  uint64_t v735;
  uint64_t v736;
  _QWORD *v737;
  uint64_t v738;
  float32x4_t v739;
  float32x4_t v740;
  uint64_t v741;
  float32x4_t v742;
  unint64_t v743;
  float32x4_t v744;
  _QWORD *v745;
  float v746;
  uint64_t v747;
  uint64_t __sz;
  char v749;
  int64_t v750;
  float32x4_t *v751;
  unint64_t v752;
  _BYTE *v753;
  _BYTE *v754;
  unint64_t v755;
  _QWORD *v756;
  uint64_t *v757;
  uint64_t v758;
  const void *v759;
  float *v760;
  char *v761;
  int v762;
  char *v763;
  char *v764;
  unsigned int *v765;
  __int128 v766;
  uint64_t v767;
  void **v768;
  void *v769;
  void *v770;
  uint64_t v771;
  int v772;
  void *v773[2];
  int32x4_t v774;
  int32x4_t v775;
  int32x4_t v776;
  void *v777;
  char *v778;
  char *v779;
  void *v780;
  std::__shared_weak_count *v781;
  uint64_t v782;
  void *v783[2];
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  uint64_t v793;
  __int128 v794;
  __int128 v795;
  int v796;
  uint64_t v797;
  std::__shared_weak_count *v798;
  int v799;
  char v800;
  void *__p[2];
  double v802;
  __int128 v803;
  _BYTE v804[32];
  _BYTE v805[32];
  void *v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  _OWORD *v812;
  _OWORD *v813;
  _OWORD *v814;
  void *v815;
  uint64_t v816;
  void *v817;
  __int128 v818;
  void **v819;
  _BYTE v820[24];
  _BYTE *v821;
  _BYTE v822[24];
  _BYTE *v823;
  _BYTE v824[24];
  _BYTE *v825;
  int v826;
  void *__src;
  uint64_t v828;
  unsigned int v829;
  __int128 v830;
  __int128 v831;
  void *v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  char v836[512];
  void *v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  char v842[512];
  void *v843;
  __int128 v844;
  _BYTE v845[64];
  void *v846;
  int v847[2];
  char *v848;
  uint64_t (**v849)();
  __int128 v850;
  void *v851[2];
  __int128 v852;
  void *v853[2];
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  _OWORD v858[2];
  int64x2_t v859;
  int v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  unint64_t v865;
  uint64_t v866;
  uint64_t v867;
  _QWORD v868[3];
  char v869;
  _DWORD v870[9];
  uint64_t v871;
  uint64_t (**v872)();
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  uint64_t v879;
  uint64_t (***v880)();
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  _QWORD v884[6];
  __int128 v885;
  __int128 v886;
  __int128 v887;
  _QWORD *(**v888)(_QWORD *);
  uint64_t v889;
  uint64_t v890;
  int v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  uint64_t v895;
  uint64_t (**v896)();
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  uint64_t v903;
  uint64_t (***v904)();
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  __int16 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  _BYTE v918[144];
  int v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  _QWORD *v923;
  __int128 v924;
  _BYTE v925[64];
  uint64_t v926;
  uint64_t v927;
  __int128 v928;
  void *v929[4];
  void (**v930)();
  uint64_t v931;
  char v932;
  uint64_t v933;
  float v934;
  char v935;
  int v936;
  _BYTE v937[256];
  void *v938;
  __int128 v939;
  __int16 v940;
  _BYTE v941[24];
  _BYTE *v942;
  _BYTE v943[24];
  _BYTE *v944;
  _BYTE v945[24];
  _BYTE *v946;
  _BYTE v947[24];
  _BYTE *v948;
  float v949;
  void *__dst;
  unint64_t v951;
  unsigned int v952;
  _BYTE v953[36];
  _BYTE v954[32];
  _OWORD v955[2];
  __int128 v956;
  __int128 v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  _BYTE v961[64];
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  void *v965;
  __int128 v966;
  __int16 v967;
  _BYTE v968[24];
  _BYTE *v969;
  _BYTE v970[24];
  _BYTE *v971;
  _BYTE v972[24];
  _BYTE *v973;
  _BYTE v974[24];
  _BYTE *v975;
  __int128 v976;
  uint64_t v977;
  _BYTE v978[32];
  __int128 v979;
  __int128 v980;
  __int128 v981;
  void *v982;
  __int128 v983;
  void *v984;
  __int128 v985;
  __int16 v986;
  _BYTE v987[24];
  _BYTE *v988;
  _BYTE v989[24];
  _BYTE *v990;
  _BYTE v991[24];
  _BYTE *v992;
  _BYTE v993[24];
  _BYTE *v994;
  uint64_t v995;
  float64x2x2_t v996;

  v15 = MEMORY[0x24BDAC7A8]();
  v17 = v16;
  v19 = v18;
  v732 = v20;
  v733 = v21;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v757 = (uint64_t *)v15;
  v31 = v30;
  v995 = *MEMORY[0x24BDAC8D0];
  v794 = 0u;
  v795 = 0u;
  v796 = 733237096;
  kdebug_trace();
  *(_DWORD *)v31 = 0;
  v742 = (float32x4_t)unk_208236590;
  v744 = (float32x4_t)xmmword_208236580;
  *(_OWORD *)(v31 + 4) = xmmword_208236580;
  *(_OWORD *)(v31 + 20) = unk_208236590;
  v36 = dbl_2082365B0;
  v739 = *(float32x4_t *)&dbl_2082365B0;
  v740 = (float32x4_t)xmmword_2082365A0;
  *(_OWORD *)(v31 + 36) = xmmword_2082365A0;
  *(_OWORD *)(v31 + 52) = *(_OWORD *)&dbl_2082365B0;
  v38 = v25[9];
  v37 = v25[10];
  v735 = *v27;
  v736 = v27[1];
  v793 = 0;
  v791 = 0u;
  v792 = 0u;
  v789 = 0u;
  v790 = 0u;
  v787 = 0u;
  v788 = 0u;
  v785 = 0u;
  v786 = 0u;
  *(_OWORD *)v783 = 0u;
  v784 = 0u;
  memset(v845, 0, 24);
  v754 = v37;
  v753 = v38;
  v39 = v37 - v38;
  v758 = (v37 - v38) >> 3;
  v760 = (float *)v31;
  if (v37 == v38)
  {
    v787 = 0uLL;
    v786 = 0uLL;
    v783[1] = 0;
    *(_QWORD *)&v784 = 0;
    v783[0] = 0;
    v788 = 0uLL;
    if (v783 != v25)
    {
LABEL_4:
      sub_207D95628((uint64_t)&v790 + 8, (char **)v25[15], (uint64_t)v25[16], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v25[16] - (_BYTE *)v25[15]) >> 3));
      v40 = &v789;
      sub_207CDADA0(&v789, (char *)v25[12], (char *)v25[13], ((_BYTE *)v25[13] - (_BYTE *)v25[12]) >> 3);
      goto LABEL_7;
    }
  }
  else
  {
    if (v39 < 0)
      sub_207CA420C();
    *(_QWORD *)&v786 = operator new(v37 - v38);
    *((_QWORD *)&v786 + 1) = v786;
    *(_QWORD *)&v787 = v786 + 8 * v758;
    v783[0] = operator new(v39);
    v783[1] = v783[0];
    *(_QWORD *)&v784 = (char *)v783[0] + 8 * v758;
    *((_QWORD *)&v787 + 1) = operator new(v39);
    *(_QWORD *)&v788 = *((_QWORD *)&v787 + 1);
    *((_QWORD *)&v788 + 1) = *((_QWORD *)&v787 + 1) + 8 * v758;
    if (v783 != v25)
      goto LABEL_4;
  }
  v40 = (__int128 *)(v25 + 12);
LABEL_7:
  v41 = *v757;
  if (v754 != v753)
  {
    v42 = (uint64_t *)v25[9];
    v43 = (uint64_t *)v25[6];
    v44 = v758;
    v45 = *a9;
    do
    {
      v47 = *v42++;
      v46 = v47;
      v48 = *v43++;
      ++v45[v48 + v46 * v41];
      --v44;
    }
    while (v44);
  }
  v755 = (v736 - v735) >> 6;
  v737 = v27;
  v738 = v41;
  v734 = v17;
  if ((v17 & 1) != 0)
  {
    v50 = *v25;
    v49 = v25[1];
    memset(v845, 0, 24);
    v51 = v49 - v50;
    v768 = v25;
    if (v49 == v50)
    {
      v53 = 0;
      v52 = 0;
      v55 = 0;
      v59 = v25 + 3;
      v58 = v25[3];
      if (!v58)
        goto LABEL_22;
    }
    else
    {
      if (v51 < 0)
        sub_207D159B0();
      v52 = v51 >> 3;
      v53 = ((unint64_t)((v51 >> 3) - 1) >> 6) + 1;
      v54 = operator new(8 * v53);
      v55 = v54;
      if ((unint64_t)v51 >= 0x208)
        v56 = (unint64_t)((v51 >> 3) - 1) >> 6;
      else
        v56 = 0;
      v54[v56] = 0;
      if ((unint64_t)v51 >= 0x200)
        bzero(v54, 8 * (v52 >> 6));
      v57 = ((unint64_t)v51 >> 3) & 0x3F;
      if (v57)
        v55[v52 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v57);
      v59 = v25 + 3;
      v58 = v25[3];
      if (!v58)
        goto LABEL_22;
    }
    operator delete(v58);
    *v59 = 0;
    v59[1] = 0;
    v59[2] = 0;
LABEL_22:
    v756 = v59;
    v25[3] = v55;
    v25[4] = (void *)v52;
    v25[5] = (void *)v53;
    v60 = v760;
    if (v736 == v735)
      goto LABEL_281;
    v749 = 0;
    v767 = 0;
    v747 = v39 >> 2;
    __sz = 2 * v39;
    v61 = v758;
    v751 = v23;
    v750 = v39;
    do
    {
      memset(v954, 0, 24);
      memset(v978, 0, 24);
      if (v754 != v753)
      {
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFDLL)
          sub_207CA420C();
        *(_QWORD *)v978 = operator new(__sz);
        *(_QWORD *)&v978[8] = *(_QWORD *)v978;
        *(_QWORD *)&v978[16] = *(_QWORD *)v978 + 8 * v747;
        v773[0] = 0;
        v773[1] = 0;
        v774.i64[0] = 0;
        if ((unint64_t)(3 * v758) >> 61)
          sub_207CA420C();
        v62 = operator new(24 * v758);
        v63 = 0;
        v761 = 0;
        v64 = 0;
        v65 = 0;
        v773[0] = v62;
        v773[1] = v62;
        v774.i64[0] = (uint64_t)v62 + 24 * v758;
        while (1)
        {
          if (*((_QWORD *)v25[9] + v65) != v767)
            goto LABEL_31;
          v763 = v63;
          v764 = (char *)v64;
          v67 = v25;
          v68 = (float *)((char *)*v25 + 8 * v65);
          v69 = *((_QWORD *)v67[6] + v65);
          v70 = v757[1];
          v71 = *(double **)&v978[8];
          v72 = *(double **)&v978[16];
          if (*(_QWORD *)&v978[8] < *(_QWORD *)&v978[16])
          {
            **(double **)&v978[8] = *v68;
            v73 = v71 + 1;
            goto LABEL_56;
          }
          v74 = *((_QWORD *)v67[6] + v65);
          v75 = *(double **)v978;
          v76 = *(_QWORD *)&v978[8] - *(_QWORD *)v978;
          v77 = (uint64_t)(*(_QWORD *)&v978[8] - *(_QWORD *)v978) >> 3;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61)
            goto LABEL_896;
          v79 = *(_QWORD *)&v978[16] - *(_QWORD *)v978;
          if ((uint64_t)(*(_QWORD *)&v978[16] - *(_QWORD *)v978) >> 2 > v78)
            v78 = v79 >> 2;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          if (v80)
          {
            if (v80 >> 61)
              goto LABEL_895;
            v81 = (char *)operator new(8 * v80);
          }
          else
          {
            v81 = 0;
          }
          v82 = (double *)&v81[8 * v77];
          *v82 = *v68;
          v73 = v82 + 1;
          if (v71 == v75)
          {
            v69 = v74;
            goto LABEL_54;
          }
          v83 = (char *)v71 - (char *)v75 - 8;
          if (v83 < 0x58)
            break;
          v84 = (char *)v71 - &v81[v76];
          v69 = v74;
          if (v84 < 0x20)
            goto LABEL_53;
          v85 = (v83 >> 3) + 1;
          v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          v87 = &v71[v86 / 0xFFFFFFFFFFFFFFF8];
          v82 = (double *)((char *)v82 - v86);
          v88 = &v81[8 * v77 - 16];
          v89 = v71 - 2;
          v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v91 = *(_OWORD *)v89;
            *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
            *(_OWORD *)v88 = v91;
            v88 -= 32;
            v89 -= 4;
            v90 -= 4;
          }
          while (v90);
          v71 = v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_53;
LABEL_54:
          v72 = (double *)&v81[8 * v80];
          *(_QWORD *)v978 = v82;
          *(_QWORD *)&v978[8] = v73;
          *(_QWORD *)&v978[16] = v72;
          if (v75)
          {
            operator delete(v75);
            v72 = *(double **)&v978[16];
          }
LABEL_56:
          *(_QWORD *)&v978[8] = v73;
          if (v73 < v72)
          {
            *v73 = v68[1];
            v93 = v73 + 1;
            goto LABEL_79;
          }
          v94 = *(double **)v978;
          v95 = (char *)v73 - *(_QWORD *)v978;
          v96 = ((uint64_t)v73 - *(_QWORD *)v978) >> 3;
          v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 61)
            goto LABEL_896;
          v98 = (uint64_t)v72 - *(_QWORD *)v978;
          if (v98 >> 2 > v97)
            v97 = v98 >> 2;
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v97;
          if (v99)
          {
            if (v99 >> 61)
              goto LABEL_895;
            v100 = operator new(8 * v99);
          }
          else
          {
            v100 = 0;
          }
          v101 = (double *)&v100[8 * v96];
          *v101 = v68[1];
          v93 = v101 + 1;
          if (v73 != v94)
          {
            v102 = (char *)v73 - (char *)v94 - 8;
            if (v102 < 0x58)
            {
              v103 = v73;
              goto LABEL_76;
            }
            if ((unint64_t)((char *)v73 - v100 - (_QWORD)v95) < 0x20)
            {
              v103 = v73;
              do
              {
LABEL_76:
                v110 = *((_QWORD *)v103-- - 1);
                *((_QWORD *)v101-- - 1) = v110;
              }
              while (v103 != v94);
              goto LABEL_77;
            }
            v104 = (v102 >> 3) + 1;
            v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
            v103 = &v73[v105 / 0xFFFFFFFFFFFFFFF8];
            v101 = (double *)((char *)v101 - v105);
            v106 = &v100[8 * v96 - 16];
            v107 = v73 - 2;
            v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v109 = *(_OWORD *)v107;
              *(v106 - 1) = *((_OWORD *)v107 - 1);
              *v106 = v109;
              v106 -= 2;
              v107 -= 4;
              v108 -= 4;
            }
            while (v108);
            if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_76;
          }
LABEL_77:
          *(_QWORD *)v978 = v101;
          *(_QWORD *)&v978[8] = v93;
          *(_QWORD *)&v978[16] = &v100[8 * v99];
          if (v94)
            operator delete(v94);
LABEL_79:
          v111 = (float *)(v70 + 12 * v69);
          *(_QWORD *)&v978[8] = v93;
          v113 = (char *)v773[1];
          v112 = v774.i64[0];
          if (v773[1] >= (void *)v774.i64[0])
          {
            v115 = v773[0];
            v116 = (char *)v773[1] - (char *)v773[0];
            v117 = ((char *)v773[1] - (char *)v773[0]) >> 3;
            v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 61)
              goto LABEL_896;
            v119 = v774.i64[0] - (unint64_t)v773[0];
            if ((uint64_t)(v774.i64[0] - (unint64_t)v773[0]) >> 2 > v118)
              v118 = v119 >> 2;
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
              v120 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v120 = v118;
            if (v120)
            {
              if (v120 >> 61)
                goto LABEL_895;
              v121 = operator new(8 * v120);
            }
            else
            {
              v121 = 0;
            }
            v122 = (double *)&v121[8 * v117];
            *v122 = *v111;
            v114 = v122 + 1;
            if (v113 != v115)
            {
              v123 = v113 - v115 - 8;
              if (v123 < 0x58)
                goto LABEL_919;
              if ((unint64_t)(v113 - v121 - v116) < 0x20)
                goto LABEL_919;
              v124 = (v123 >> 3) + 1;
              v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
              v126 = &v113[-v125];
              v122 = (double *)((char *)v122 - v125);
              v127 = &v121[8 * v117 - 16];
              v128 = v113 - 16;
              v129 = v124 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v130 = *(_OWORD *)v128;
                *(v127 - 1) = *((_OWORD *)v128 - 1);
                *v127 = v130;
                v127 -= 2;
                v128 -= 32;
                v129 -= 4;
              }
              while (v129);
              v113 = v126;
              if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_919:
                do
                {
                  v131 = *((_QWORD *)v113 - 1);
                  v113 -= 8;
                  *((_QWORD *)v122-- - 1) = v131;
                }
                while (v113 != v115);
              }
            }
            v112 = (unint64_t)&v121[8 * v120];
            v773[0] = v122;
            v773[1] = v114;
            v774.i64[0] = v112;
            if (v115)
            {
              operator delete(v115);
              v112 = v774.i64[0];
            }
          }
          else
          {
            *(double *)v773[1] = *v111;
            v114 = (double *)(v113 + 8);
          }
          v773[1] = v114;
          if ((unint64_t)v114 < v112)
          {
            *v114 = v111[1];
            v132 = v114 + 1;
            goto LABEL_123;
          }
          v133 = (double *)v773[0];
          v134 = (char *)v114 - (char *)v773[0];
          v135 = ((char *)v114 - (char *)v773[0]) >> 3;
          v136 = v135 + 1;
          if ((unint64_t)(v135 + 1) >> 61)
            goto LABEL_896;
          v137 = v112 - (unint64_t)v773[0];
          if (v137 >> 2 > v136)
            v136 = v137 >> 2;
          if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
            v138 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v138 = v136;
          if (v138)
          {
            if (v138 >> 61)
              goto LABEL_895;
            v139 = operator new(8 * v138);
          }
          else
          {
            v139 = 0;
          }
          v140 = (double *)&v139[8 * v135];
          *v140 = v111[1];
          v132 = v140 + 1;
          if (v114 != v133)
          {
            v141 = (char *)v114 - (char *)v133 - 8;
            if (v141 < 0x58)
            {
              v142 = v114;
              goto LABEL_120;
            }
            if ((unint64_t)((char *)v114 - v139 - v134) < 0x20)
            {
              v142 = v114;
              do
              {
LABEL_120:
                v149 = *((_QWORD *)v142-- - 1);
                *((_QWORD *)v140-- - 1) = v149;
              }
              while (v142 != v133);
              goto LABEL_121;
            }
            v143 = (v141 >> 3) + 1;
            v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
            v142 = &v114[v144 / 0xFFFFFFFFFFFFFFF8];
            v140 = (double *)((char *)v140 - v144);
            v145 = &v139[8 * v135 - 16];
            v146 = v114 - 2;
            v147 = v143 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v148 = *(_OWORD *)v146;
              *(v145 - 1) = *((_OWORD *)v146 - 1);
              *v145 = v148;
              v145 -= 2;
              v146 -= 4;
              v147 -= 4;
            }
            while (v147);
            if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_120;
          }
LABEL_121:
          v112 = (unint64_t)&v139[8 * v138];
          v773[0] = v140;
          v773[1] = v132;
          v774.i64[0] = v112;
          if (v133)
          {
            operator delete(v133);
            v112 = v774.i64[0];
          }
LABEL_123:
          v773[1] = v132;
          if ((unint64_t)v132 < v112)
          {
            *v132 = v111[2];
            v150 = v132 + 1;
            v63 = v763;
            v151 = v764;
            goto LABEL_147;
          }
          v152 = (double *)v773[0];
          v153 = (char *)v132 - (char *)v773[0];
          v154 = ((char *)v132 - (char *)v773[0]) >> 3;
          v155 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 61)
LABEL_896:
            sub_207CA420C();
          v156 = v112 - (unint64_t)v773[0];
          if (v156 >> 2 > v155)
            v155 = v156 >> 2;
          if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
            v157 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v157 = v155;
          if (v157)
          {
            if (v157 >> 61)
              goto LABEL_895;
            v158 = operator new(8 * v157);
          }
          else
          {
            v158 = 0;
          }
          v159 = (double *)&v158[8 * v154];
          *v159 = v111[2];
          v150 = v159 + 1;
          if (v132 == v152)
          {
            v63 = v763;
            v151 = v764;
            goto LABEL_145;
          }
          v160 = (char *)v132 - (char *)v152 - 8;
          v63 = v763;
          v151 = v764;
          if (v160 < 0x58)
          {
            v161 = v132;
            goto LABEL_144;
          }
          if ((unint64_t)((char *)v132 - v158 - v153) < 0x20)
          {
            v161 = v132;
            do
            {
LABEL_144:
              v168 = *((_QWORD *)v161-- - 1);
              *((_QWORD *)v159-- - 1) = v168;
            }
            while (v161 != v152);
            goto LABEL_145;
          }
          v162 = (v160 >> 3) + 1;
          v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
          v161 = &v132[v163 / 0xFFFFFFFFFFFFFFF8];
          v159 = (double *)((char *)v159 - v163);
          v164 = &v158[8 * v154 - 16];
          v165 = v132 - 2;
          v166 = v162 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v167 = *(_OWORD *)v165;
            *(v164 - 1) = *((_OWORD *)v165 - 1);
            *v164 = v167;
            v164 -= 2;
            v165 -= 4;
            v166 -= 4;
          }
          while (v166);
          if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_144;
LABEL_145:
          v773[0] = v159;
          v773[1] = v150;
          v774.i64[0] = (uint64_t)&v158[8 * v157];
          if (v152)
            operator delete(v152);
LABEL_147:
          v773[1] = v150;
          if (v151 >= v761)
          {
            v169 = v151 - v63;
            v170 = (v151 - v63) >> 3;
            v171 = v170 + 1;
            if ((unint64_t)(v170 + 1) >> 61)
              sub_207CA420C();
            if ((v761 - v63) >> 2 > v171)
              v171 = (v761 - v63) >> 2;
            if ((unint64_t)(v761 - v63) >= 0x7FFFFFFFFFFFFFF8)
              v172 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v172 = v171;
            if (v172)
            {
              if (v172 >> 61)
LABEL_895:
                sub_207CA3AB8();
              v173 = operator new(8 * v172);
              v63 = v763;
              v151 = v764;
              v174 = &v173[8 * v170];
              *(_QWORD *)v174 = v65;
              v66 = (uint64_t)(v174 + 8);
              v175 = v764 - v763;
              if (v764 != v763)
              {
LABEL_157:
                v176 = v175 - 8;
                if (v176 < 0x168
                  || (v179 = (v151 - 8 - v63) & 0xFFFFFFFFFFFFFFF8, &v173[v169 - 8 - v179] > &v173[v169 - 8])
                  || &v151[-v179 - 8] > v151 - 8
                  || (unint64_t)(v151 - v173 - v169) < 0x20)
                {
                  v177 = v151;
                  v61 = v758;
                }
                else
                {
                  v180 = (v176 >> 3) + 1;
                  v181 = 8 * (v180 & 0x3FFFFFFFFFFFFFFCLL);
                  v177 = &v151[-v181];
                  v174 -= v181;
                  v182 = &v173[8 * v170 - 16];
                  v183 = v151 - 16;
                  v184 = v180 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v185 = *(_OWORD *)v183;
                    *(v182 - 1) = *((_OWORD *)v183 - 1);
                    *v182 = v185;
                    v182 -= 2;
                    v183 -= 32;
                    v184 -= 4;
                  }
                  while (v184);
                  v61 = v758;
                  if (v180 == (v180 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_160:
                    *(_QWORD *)v954 = v174;
                    *(_QWORD *)&v954[8] = v66;
                    v761 = &v173[8 * v172];
                    *(_QWORD *)&v954[16] = v761;
                    if (v63)
                      goto LABEL_161;
                    goto LABEL_162;
                  }
                }
                do
                {
                  v178 = *((_QWORD *)v177 - 1);
                  v177 -= 8;
                  *((_QWORD *)v174 - 1) = v178;
                  v174 -= 8;
                }
                while (v177 != v63);
                goto LABEL_160;
              }
            }
            else
            {
              v173 = 0;
              v174 = (char *)(8 * v170);
              *(_QWORD *)(8 * v170) = v65;
              v66 = 8 * v170 + 8;
              v175 = v151 - v63;
              if (v151 != v63)
                goto LABEL_157;
            }
            v61 = v758;
            *(_QWORD *)v954 = v174;
            *(_QWORD *)&v954[8] = v66;
            v761 = &v173[8 * v172];
            *(_QWORD *)&v954[16] = v761;
            if (v63)
LABEL_161:
              operator delete(v63);
LABEL_162:
            v63 = v174;
            goto LABEL_30;
          }
          *(_QWORD *)v151 = v65;
          v66 = (uint64_t)(v151 + 8);
          v61 = v758;
LABEL_30:
          *(_QWORD *)&v954[8] = v66;
          v64 = v66;
          v25 = v768;
LABEL_31:
          if (++v65 == v61)
          {
            v186 = *(_QWORD *)&v978[8];
            v187 = *(_QWORD *)v978;
            v60 = v760;
            v23 = v751;
            v39 = v750;
            goto LABEL_175;
          }
        }
        v69 = v74;
        do
        {
LABEL_53:
          v92 = *((_QWORD *)v71-- - 1);
          *((_QWORD *)v82-- - 1) = v92;
        }
        while (v71 != v75);
        goto LABEL_54;
      }
      v187 = 0;
      v186 = 0;
      v773[0] = 0;
      v773[1] = 0;
      v774.i64[0] = 0;
LABEL_175:
      v188 = *((float *)v25[18] + v767);
      v189 = operator new(8uLL);
      if ((unint64_t)(v186 - v187) < 0x10)
        v190 = 1;
      else
        v190 = (unint64_t)((v186 - v187) >> 3) >> 1;
      __p[0] = v189;
      *v189 = a13;
      v191 = v189 + 1;
      if ((((unint64_t)((v186 - v187) >> 3) >> 1) - 1)
         * ((unint64_t)((v186 - v187) >> 3) >> 1)
         * (((unint64_t)((v186 - v187) >> 3) >> 1) - 2)
         / 0xC <= 0xF)
        v192 = 15;
      else
        v192 = (((unint64_t)((v186 - v187) >> 3) >> 1) - 1)
             * ((unint64_t)((v186 - v187) >> 3) >> 1)
             * (((unint64_t)((v186 - v187) >> 3) >> 1) - 2)
             / 0xC;
      v802 = *(double *)&v191;
      __p[1] = v191;
      sub_207D954BC((uint64_t)v845, v192, 2 * v192, v190, (uint64_t)__p, 0, 1.0, v188);
      v61 = v758;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v780 = 0;
      v781 = 0;
      v782 = 0;
      if (sub_20811B8AC((uint64_t)v845, v978, (uint64_t *)v773, (uint64_t)__p, &v780, 0, 0, v193))
      {
        v194 = (unsigned int *)v780;
        v765 = (unsigned int *)v781;
        if (v780 != v781)
        {
          while (1)
          {
            v197 = *v194;
            v198 = *(_QWORD *)v954;
            v199 = *(_QWORD *)(*(_QWORD *)v954 + 8 * v197);
            v200 = v25[9];
            v201 = (_BYTE *)v788;
            if ((unint64_t)v788 < *((_QWORD *)&v788 + 1))
            {
              *(_QWORD *)v788 = v200[v199];
              *(_QWORD *)&v788 = v201 + 8;
              v202 = *(_QWORD *)(v198 + 8 * v197);
              v203 = *v25;
              v205 = (char *)v783[1];
              v204 = v784;
              if (v783[1] < (void *)v784)
                goto LABEL_190;
              goto LABEL_211;
            }
            v207 = (_BYTE *)*((_QWORD *)&v787 + 1);
            v208 = v788 - *((_QWORD *)&v787 + 1);
            v209 = (uint64_t)(v788 - *((_QWORD *)&v787 + 1)) >> 3;
            v210 = v209 + 1;
            if ((unint64_t)(v209 + 1) >> 61)
              goto LABEL_899;
            v211 = *((_QWORD *)&v788 + 1) - *((_QWORD *)&v787 + 1);
            if ((uint64_t)(*((_QWORD *)&v788 + 1) - *((_QWORD *)&v787 + 1)) >> 2 > v210)
              v210 = v211 >> 2;
            v212 = (unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v210;
            if (!v212)
              break;
            if (v212 >> 61)
              goto LABEL_897;
            v213 = (char *)operator new(8 * v212);
            v214 = &v213[8 * v209];
            *(_QWORD *)v214 = v200[v199];
            v215 = (uint64_t)(v214 + 8);
            v216 = v201 - v207;
            if (v201 != v207)
              goto LABEL_202;
LABEL_208:
            *((_QWORD *)&v787 + 1) = v214;
            *(_QWORD *)&v788 = v215;
            *((_QWORD *)&v788 + 1) = &v213[8 * v212];
            if (v207)
              operator delete(v207);
            v25 = v768;
            *(_QWORD *)&v788 = v215;
            v202 = *(_QWORD *)(v198 + 8 * v197);
            v203 = *v768;
            v205 = (char *)v783[1];
            v204 = v784;
            if (v783[1] < (void *)v784)
            {
LABEL_190:
              *(_QWORD *)v205 = v203[v202];
              v206 = v205 + 8;
              goto LABEL_232;
            }
LABEL_211:
            v226 = (char *)v783[0];
            v227 = v205 - (char *)v783[0];
            v228 = (v205 - (char *)v783[0]) >> 3;
            v229 = v228 + 1;
            if ((unint64_t)(v228 + 1) >> 61)
              sub_207CA420C();
            v230 = v204 - (unint64_t)v783[0];
            if (v230 >> 2 > v229)
              v229 = v230 >> 2;
            if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8)
              v231 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v231 = v229;
            if (v231)
            {
              if (v231 >> 61)
                goto LABEL_897;
              v232 = operator new(8 * v231);
              v233 = &v232[8 * v228];
              *v233 = v203[v202];
              v206 = v233 + 1;
              v234 = v205 - v226;
              if (v205 != v226)
              {
LABEL_220:
                v235 = v234 - 8;
                if (v235 < 0x58)
                  goto LABEL_920;
                if ((unint64_t)(v205 - v232 - v227) < 0x20)
                  goto LABEL_920;
                v236 = (v235 >> 3) + 1;
                v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
                v238 = &v205[-v237];
                v233 = (_QWORD *)((char *)v233 - v237);
                v239 = &v232[8 * v228 - 16];
                v240 = v205 - 16;
                v241 = v236 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v242 = *(_OWORD *)v240;
                  *(v239 - 1) = *((_OWORD *)v240 - 1);
                  *v239 = v242;
                  v239 -= 2;
                  v240 -= 32;
                  v241 -= 4;
                }
                while (v241);
                v205 = v238;
                if (v236 != (v236 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_920:
                  do
                  {
                    v243 = *((_QWORD *)v205 - 1);
                    v205 -= 8;
                    *--v233 = v243;
                  }
                  while (v205 != v226);
                }
                v205 = (char *)v783[0];
                v783[0] = v233;
                v783[1] = v206;
                *(_QWORD *)&v784 = &v232[8 * v231];
                if (!v205)
                  goto LABEL_231;
LABEL_230:
                operator delete(v205);
                goto LABEL_231;
              }
            }
            else
            {
              v232 = 0;
              v233 = (_QWORD *)(8 * v228);
              *(_QWORD *)(8 * v228) = v203[v202];
              v206 = (void *)(8 * v228 + 8);
              v234 = v205 - v226;
              if (v205 != v226)
                goto LABEL_220;
            }
            v783[0] = v233;
            v783[1] = v206;
            *(_QWORD *)&v784 = &v232[8 * v231];
            if (v205)
              goto LABEL_230;
LABEL_231:
            v25 = v768;
LABEL_232:
            v783[1] = v206;
            v244 = *(_QWORD *)(v198 + 8 * v197);
            v245 = v25[6];
            v246 = (_BYTE *)*((_QWORD *)&v786 + 1);
            if (*((_QWORD *)&v786 + 1) >= (unint64_t)v787)
            {
              v247 = (_BYTE *)v786;
              v248 = *((_QWORD *)&v786 + 1) - v786;
              v249 = (uint64_t)(*((_QWORD *)&v786 + 1) - v786) >> 3;
              v250 = v249 + 1;
              if ((unint64_t)(v249 + 1) >> 61)
LABEL_899:
                sub_207CA420C();
              v251 = v787 - v786;
              if ((uint64_t)(v787 - v786) >> 2 > v250)
                v250 = v251 >> 2;
              if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v250;
              if (v252)
              {
                if (v252 >> 61)
LABEL_897:
                  sub_207CA3AB8();
                v253 = (char *)operator new(8 * v252);
                v254 = &v253[8 * v249];
                *(_QWORD *)v254 = v245[v244];
                v195 = (uint64_t)(v254 + 8);
                v255 = v246 - v247;
                if (v246 == v247)
                  goto LABEL_250;
LABEL_244:
                v256 = v255 - 8;
                if (v256 < 0x58)
                  goto LABEL_921;
                if ((unint64_t)(v246 - v253 - v248) < 0x20)
                  goto LABEL_921;
                v257 = (v256 >> 3) + 1;
                v258 = 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
                v259 = &v246[-v258];
                v254 -= v258;
                v260 = &v253[8 * v249 - 16];
                v261 = (__int128 *)(v246 - 16);
                v262 = v257 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v263 = *v261;
                  *((_OWORD *)v260 - 1) = *(v261 - 1);
                  *(_OWORD *)v260 = v263;
                  v260 -= 32;
                  v261 -= 2;
                  v262 -= 4;
                }
                while (v262);
                v246 = v259;
                if (v257 != (v257 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_921:
                  do
                  {
                    v264 = *((_QWORD *)v246 - 1);
                    v246 -= 8;
                    *((_QWORD *)v254 - 1) = v264;
                    v254 -= 8;
                  }
                  while (v246 != v247);
                }
              }
              else
              {
                v253 = 0;
                v254 = (char *)(8 * v249);
                *(_QWORD *)(8 * v249) = v245[v244];
                v195 = 8 * v249 + 8;
                v255 = v246 - v247;
                if (v246 != v247)
                  goto LABEL_244;
              }
LABEL_250:
              *(_QWORD *)&v786 = v254;
              *((_QWORD *)&v786 + 1) = v195;
              *(_QWORD *)&v787 = &v253[8 * v252];
              if (v247)
              {
                operator delete(v247);
                v245 = v768[6];
              }
              goto LABEL_187;
            }
            **((_QWORD **)&v786 + 1) = v245[v244];
            v195 = (uint64_t)(v246 + 8);
LABEL_187:
            v60 = v760;
            *((_QWORD *)&v786 + 1) = v195;
            v196 = v245[*(_QWORD *)(v198 + 8 * v197)] + v767 * v738;
            ++(*a9)[v196];
            *(_QWORD *)(*v756 + ((*(_QWORD *)(v198 + 8 * v197) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_QWORD *)(v198 + 8 * v197);
            ++v194;
            v25 = v768;
            if (v194 == v765)
              goto LABEL_252;
          }
          v213 = 0;
          v214 = (char *)(8 * v209);
          *(_QWORD *)(8 * v209) = v200[v199];
          v215 = 8 * v209 + 8;
          v216 = v201 - v207;
          if (v201 == v207)
            goto LABEL_208;
LABEL_202:
          v217 = v216 - 8;
          if (v217 < 0x58)
            goto LABEL_922;
          if ((unint64_t)(v201 - v213 - v208) < 0x20)
            goto LABEL_922;
          v218 = (v217 >> 3) + 1;
          v219 = 8 * (v218 & 0x3FFFFFFFFFFFFFFCLL);
          v220 = &v201[-v219];
          v214 -= v219;
          v221 = &v213[8 * v209 - 16];
          v222 = (__int128 *)(v201 - 16);
          v223 = v218 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v224 = *v222;
            *((_OWORD *)v221 - 1) = *(v222 - 1);
            *(_OWORD *)v221 = v224;
            v221 -= 32;
            v222 -= 2;
            v223 -= 4;
          }
          while (v223);
          v201 = v220;
          if (v218 != (v218 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_922:
            do
            {
              v225 = *((_QWORD *)v201 - 1);
              v201 -= 8;
              *((_QWORD *)v214 - 1) = v225;
              v214 -= 8;
            }
            while (v201 != v207);
          }
          goto LABEL_208;
        }
LABEL_252:
        if ((v749 & 1) == 0)
        {
          v265 = (float32x4_t *)(*v737 + (v767 << 6));
          v266 = *(double *)__p;
          v267 = *((double *)&v803 + 1);
          v268 = *(double *)&v804[24];
          v269 = *(double *)&__p[1];
          v270.f64[0] = *(float64_t *)v804;
          v270.f64[1] = *(float64_t *)v805;
          *(float32x2_t *)&v270.f64[0] = vcvt_f32_f64(v270);
          v271 = v802;
          v272.f64[0] = *(float64_t *)&v804[8];
          v272.f64[1] = *(float64_t *)&v805[8];
          *(float32x2_t *)&v272.f64[0] = vcvt_f32_f64(v272);
          v273 = *(double *)&v803;
          v274.f64[0] = *(float64_t *)&v804[16];
          v274.f64[1] = *(float64_t *)&v805[16];
          *(float32x2_t *)&v274.f64[0] = vcvt_f32_f64(v274);
          v275 = v265[1];
          v276 = v265[2];
          v277 = v265[3];
          v744 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v265, v266), v275, v267), v276, v268), (float32x4_t)0, v277);
          v742 = vmlaq_f32(vmlaq_lane_f32(vmlaq_n_f32(vmulq_n_f32(*v265, v269), v275, *(float *)v270.f64), v276, *(float32x2_t *)&v270.f64[0], 1), (float32x4_t)0, v277);
          v740 = vmlaq_f32(vmlaq_lane_f32(vmlaq_n_f32(vmulq_n_f32(*v265, v271), v275, *(float *)v272.f64), v276, *(float32x2_t *)&v272.f64[0], 1), (float32x4_t)0, v277);
          v739 = vaddq_f32(v277, vmlaq_lane_f32(vmlaq_n_f32(vmulq_n_f32(*v265, v273), v275, *(float *)v274.f64), v276, *(float32x2_t *)&v274.f64[0], 1));
        }
        v749 = 1;
        v23 = v751;
        v39 = v750;
        v61 = v758;
      }
      if (v780)
      {
        v781 = (std::__shared_weak_count *)v780;
        operator delete(v780);
      }
      if (*(_QWORD *)&v845[32])
      {
        *(_QWORD *)&v845[40] = *(_QWORD *)&v845[32];
        operator delete(*(void **)&v845[32]);
      }
      if (v773[0])
      {
        v773[1] = v773[0];
        operator delete(v773[0]);
      }
      if (*(_QWORD *)v978)
      {
        *(_QWORD *)&v978[8] = *(_QWORD *)v978;
        operator delete(*(void **)v978);
      }
      if (*(_QWORD *)v954)
        operator delete(*(void **)v954);
      ++v767;
    }
    while (v767 != v755);
    if ((v749 & 1) == 0)
    {
LABEL_281:
      *v60 = 0.0;
      goto LABEL_880;
    }
    v27 = v737;
    if (v23[4].i8[0])
      goto LABEL_276;
    goto LABEL_277;
  }
  if (v23[4].i8[0])
  {
LABEL_276:
    v739 = v23[3];
    v740 = v23[2];
    v742 = v23[1];
    v744 = *v23;
    goto LABEL_277;
  }
  if (v783 != v25)
  {
    sub_207CDADA0(&v786, (char *)v25[6], (char *)v25[7], ((_BYTE *)v25[7] - (_BYTE *)v25[6]) >> 3);
    sub_207D5F308(v783, (char *)*v25, (char *)v25[1], ((_BYTE *)v25[1] - (_BYTE *)*v25) >> 3);
    sub_207CDADA0((_QWORD *)&v787 + 1, (char *)v25[9], (char *)v25[10], ((_BYTE *)v25[10] - (_BYTE *)v25[9]) >> 3);
  }
  v278 = (_QWORD *)*((_QWORD *)&v789 + 1);
  v279 = *(_QWORD **)v40;
  v280 = *((_QWORD *)&v789 + 1) - *(_QWORD *)v40;
  v281 = v280 >> 3;
  if (v280 >> 3 > v19)
  {
    v282 = v757[1];
    memset(v845, 0, 24);
    if (*((_QWORD **)&v789 + 1) == v279)
    {
      v286 = 0.0;
      v285 = 0uLL;
    }
    else
    {
      if (v280 < 0)
        sub_207CA420C();
      *(_QWORD *)v845 = operator new(12 * v281);
      *(_QWORD *)&v845[8] = *(_QWORD *)v845;
      *(_QWORD *)&v845[16] = *(_QWORD *)v845 + 12 * v281;
      *(_QWORD *)v978 = v845;
      do
      {
        v283 = (uint64_t *)(v282 + 12 * *v279);
        v284 = *v283;
        *(_DWORD *)&v954[8] = *((_DWORD *)v283 + 2);
        *(_QWORD *)v954 = v284;
        sub_207D95A00((char ***)v978, (uint64_t *)v954);
        ++v279;
      }
      while (v279 != v278);
      v285 = *(_OWORD *)v845;
      v286 = *(double *)&v845[16];
    }
    v770 = (void *)v285;
    *(_OWORD *)__p = v285;
    v802 = v286;
    sub_207D7A06C((float32x2_t *)v845, *((uint64_t **)&v790 + 1), (uint64_t *)v791, (float32x2_t **)__p, *(double *)&v285, v36, v32, v33, v34, v35);
    v27 = v737;
    v739 = *(float32x4_t *)&v845[48];
    v740 = *(float32x4_t *)&v845[32];
    v742 = *(float32x4_t *)&v845[16];
    v744 = *(float32x4_t *)v845;
    if (v770)
      operator delete(v770);
  }
LABEL_277:
  *(float32x4_t *)v773 = v744;
  v774 = (int32x4_t)v742;
  v775 = (int32x4_t)v740;
  v776 = (int32x4_t)v739;
  v778 = 0;
  v779 = 0;
  v777 = 0;
  v288 = (const void *)*v27;
  v287 = v27[1];
  v289 = v287 - *v27;
  if (v287 == *v27)
  {
LABEL_285:
    v291 = 0;
    goto LABEL_286;
  }
  if (v289 < 0)
    sub_207CA420C();
  v290 = (char *)operator new(v287 - *v27);
  v777 = v290;
  v778 = v290;
  v779 = &v290[64 * (v289 >> 6)];
  memcpy(v290, v288, v289 & 0xFFFFFFFFFFFFFFC0);
  v778 = &v290[v289 & 0xFFFFFFFFFFFFFFC0];
  if ((v289 & 0xFFFFFFFFFFFFFFC0) == 0)
  {
    v289 = 0;
    goto LABEL_285;
  }
  v291 = (char *)operator new(v289 & 0xFFFFFFFFFFFFFFC0);
  memcpy(v291, v290, v289 & 0xFFFFFFFFFFFFFFC0);
  v289 = (uint64_t)&v291[64 * ((unint64_t)v289 >> 6)];
LABEL_286:
  memset(&v845[20], 0, 40);
  *(_OWORD *)&v845[4] = 0u;
  *(_DWORD *)v845 = 1065353216;
  *(_DWORD *)&v845[20] = 1065353216;
  *(_DWORD *)&v845[40] = 1065353216;
  *(_DWORD *)&v845[60] = 1065353216;
  v848 = 0;
  v846 = 0;
  *(_QWORD *)v847 = 0;
  v769 = v291;
  v292 = (char *)operator new(0x40uLL);
  *(_DWORD *)v292 = 1065353216;
  *(_QWORD *)(v292 + 12) = 0;
  *(_QWORD *)(v292 + 4) = 0;
  *((_DWORD *)v292 + 5) = 1065353216;
  *((_QWORD *)v292 + 3) = 0;
  *((_QWORD *)v292 + 4) = 0;
  *((_DWORD *)v292 + 10) = 1065353216;
  *(_QWORD *)(v292 + 52) = 0;
  *(_QWORD *)(v292 + 44) = 0;
  *((_DWORD *)v292 + 15) = 1065353216;
  v846 = v292;
  *(_QWORD *)v847 = v292 + 64;
  v848 = v292 + 64;
  v849 = (uint64_t (**)())&unk_24C0748C8;
  __asm { FMOV            V0.4S, #1.0 }
  v850 = _Q0;
  *(_OWORD *)v851 = 0u;
  v852 = 0u;
  *(_OWORD *)v853 = 0u;
  v854 = 0u;
  v855 = 0u;
  v856 = 0u;
  v857 = 0u;
  memset(v858, 0, sizeof(v858));
  v859 = 0uLL;
  v860 = 16842753;
  v861 = 0u;
  v862 = 0u;
  v863 = 0u;
  v864 = 0u;
  v865 = 0;
  *(_QWORD *)&v861 = operator new(0x100uLL);
  *((_QWORD *)&v861 + 1) = v861;
  *(_QWORD *)&v862 = v861 + 256;
  v746 = v29;
  *((_QWORD *)&v862 + 1) = operator new(0x100uLL);
  *(_QWORD *)&v863 = *((_QWORD *)&v862 + 1);
  *((_QWORD *)&v863 + 1) = *((_QWORD *)&v862 + 1) + 256;
  *((_QWORD *)&v864 + 1) = operator new(0x100uLL);
  v865 = *((_QWORD *)&v864 + 1) + 256;
  v866 = 0;
  v867 = 0;
  v871 = 0;
  memset(v870, 0, 32);
  v873 = 0u;
  v874 = 0u;
  v875 = 0u;
  v876 = 0u;
  v877 = 0u;
  v878 = 0u;
  v869 = 0;
  memset(v868, 0, 14);
  v868[2] = 0;
  v879 = 0;
  v872 = off_24C074938;
  v880 = &v872;
  v883 = 0;
  v881 = 0;
  v882 = 0;
  v884[0] = v851;
  v884[1] = &v870[3];
  memset(&v884[2], 0, 24);
  v885 = 0u;
  v886 = 0u;
  v887 = 0u;
  v895 = 0;
  v894 = 0;
  v892 = 0;
  v893 = 0;
  v891 = 0;
  v889 = 0;
  v890 = 0;
  v901 = 0u;
  v902 = 0u;
  v899 = 0u;
  v900 = 0u;
  v897 = 0u;
  v898 = 0u;
  v903 = 0;
  v896 = off_24C074938;
  v904 = &v896;
  v922 = 0;
  v920 = 0;
  v921 = 0;
  v919 = 0;
  memset(&v918[32], 0, 112);
  v906 = 0;
  v905 = 0;
  v908 = 0;
  v907 = 0;
  memset(v918, 0, 28);
  v917 = 0u;
  v916 = 0u;
  v915 = 0u;
  v914 = 0u;
  v913 = 0u;
  v912 = 0u;
  v911 = 0u;
  v910 = 0u;
  v909 = 0u;
  v888 = &off_24C0749B0;
  v923 = v884;
  memset(&v925[32], 0, 32);
  v926 = 0;
  memset(v925, 0, 28);
  v924 = 0u;
  *(_QWORD *)&v864 = *((_QWORD *)&v864 + 1);
  v849 = off_24C074568;
  v927 = 2;
  memset(v929, 0, 28);
  v928 = 0u;
  v931 = 0xA00000001;
  v932 = 0;
  v933 = 0x358637BD3A83126FLL;
  v934 = 0.000001;
  v935 = 0;
  v936 = 1069401558;
  v938 = v937;
  v939 = xmmword_2082352F0;
  v940 = 0;
  v942 = 0;
  v944 = 0;
  v946 = 0;
  v948 = 0;
  v949 = -1.0;
  v951 = 0;
  __dst = 0;
  v952 = 0;
  v930 = (void (**)())off_24C074470;
  *(_QWORD *)v953 = 0x3A83126F358637BDLL;
  v953[8] = 1;
  *(_OWORD *)&v953[12] = xmmword_208235330;
  *(_QWORD *)&v953[28] = 0x40000000;
  *(int32x4_t *)&v845[48] = v776;
  *(int32x4_t *)&v845[32] = v775;
  *(int32x4_t *)&v845[16] = v774;
  *(_OWORD *)v845 = *(_OWORD *)v773;
  sub_207D43AA8(&v846, v291, (char *)v289, (v289 - (uint64_t)v291) >> 6);
  v297 = v760;
  *(_DWORD *)v978 = 0;
  v978[4] = 1;
  *(_QWORD *)&v978[8] = v845;
  v298 = (char *)operator new(0x40uLL);
  *((_QWORD *)&v983 + 1) = v298 + 64;
  *(_DWORD *)v298 = 1065353216;
  *(_QWORD *)(v298 + 12) = 0;
  *(_QWORD *)(v298 + 4) = 0;
  *((_DWORD *)v298 + 5) = 1065353216;
  *((_QWORD *)v298 + 3) = 0;
  *((_QWORD *)v298 + 4) = 0;
  *((_DWORD *)v298 + 10) = 1065353216;
  *(_QWORD *)(v298 + 52) = 0;
  *(_QWORD *)(v298 + 44) = 0;
  *((_DWORD *)v298 + 15) = 1065353216;
  v982 = v298;
  *(_QWORD *)&v983 = v298 + 64;
  *(_OWORD *)&v978[16] = *(_OWORD *)v845;
  v979 = *(_OWORD *)&v845[16];
  v980 = *(_OWORD *)&v845[32];
  v981 = *(_OWORD *)&v845[48];
  sub_207D43AA8(&v982, (char *)v846, *(char **)v847, (uint64_t)(*(_QWORD *)v847 - (_QWORD)v846) >> 6);
  if (*(_QWORD *)&v978[8])
  {
    v299 = **(_OWORD **)&v978[8];
    v300 = *(_OWORD *)(*(_QWORD *)&v978[8] + 16);
    v301 = *(_OWORD *)(*(_QWORD *)&v978[8] + 48);
    v980 = *(_OWORD *)(*(_QWORD *)&v978[8] + 32);
    v981 = v301;
    *(_OWORD *)&v978[16] = v299;
    v979 = v300;
    v302 = &v978[16];
    if (&v978[16] == *(_BYTE **)&v978[8]
      || (sub_207D43AA8(&v982, *(char **)(*(_QWORD *)&v978[8] + 64), *(char **)(*(_QWORD *)&v978[8] + 72), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v978[8] + 72) - *(_QWORD *)(*(_QWORD *)&v978[8] + 64)) >> 6), v302 = *(_BYTE **)&v978[8], v297 = v760, *(_QWORD *)&v978[8]))
    {
      v303 = *(_DWORD *)v978;
      v304 = (char *)v851[0];
      v305 = (char *)v851[1];
      if (v851[1] == v851[0])
      {
        v304 = (char *)v851[1];
        goto LABEL_299;
      }
      v306 = ((char *)v851[1] - (char *)v851[0]) >> 4;
      do
      {
        v307 = v306 >> 1;
        v308 = &v304[16 * (v306 >> 1)];
        v310 = *(_DWORD *)v308;
        v309 = v308 + 16;
        v306 += ~(v306 >> 1);
        if (v310 < *(_DWORD *)v978)
          v304 = v309;
        else
          v306 = v307;
      }
      while (v306);
      if (v851[1] == v304 || *(_DWORD *)v978 != *(_DWORD *)v304)
      {
LABEL_299:
        v762 = v978[4];
        v954[4] = 1;
        *(_DWORD *)v954 = -1;
        *(_DWORD *)&v954[8] = 0;
        v311 = *(_QWORD *)v978;
        v312 = v982;
        *(_QWORD *)&v954[16] = *(_QWORD *)v978;
        *(_QWORD *)&v954[24] = v302;
        v955[0] = *(_OWORD *)&v978[16];
        v955[1] = v979;
        v956 = v980;
        v957 = v981;
        v766 = v983;
        v983 = 0uLL;
        v982 = 0;
        memset(&v961[20], 0, 40);
        *(_OWORD *)&v961[4] = 0u;
        *(_DWORD *)v961 = 1065353216;
        *(_DWORD *)&v961[20] = 1065353216;
        *(_DWORD *)&v961[40] = 1065353216;
        *(_DWORD *)&v961[60] = 1065353216;
        v313 = operator new(0x40uLL);
        *(_DWORD *)v313 = 1065353216;
        *(_QWORD *)((char *)v313 + 12) = 0;
        *(_QWORD *)((char *)v313 + 4) = 0;
        *((_DWORD *)v313 + 5) = 1065353216;
        *((_QWORD *)v313 + 3) = 0;
        *((_QWORD *)v313 + 4) = 0;
        *((_DWORD *)v313 + 10) = 1065353216;
        *(_QWORD *)((char *)v313 + 52) = 0;
        *(_QWORD *)((char *)v313 + 44) = 0;
        *((_DWORD *)v313 + 15) = 1065353216;
        LODWORD(__p[0]) = v303;
        __p[1] = *(void **)v954;
        LODWORD(v802) = *(_DWORD *)&v954[8];
        *(_QWORD *)&v803 = v311;
        *((_QWORD *)&v803 + 1) = v302;
        *(_OWORD *)&v805[16] = v981;
        *(_OWORD *)v805 = v980;
        *(_OWORD *)&v804[16] = v979;
        *(_OWORD *)v804 = *(_OWORD *)&v978[16];
        v759 = v312;
        v806 = v312;
        v959 = 0;
        v958 = 0;
        v810 = *(_OWORD *)&v961[32];
        v811 = *(_OWORD *)&v961[48];
        v807 = v766;
        v808 = *(_OWORD *)v961;
        v809 = *(_OWORD *)&v961[16];
        v812 = v313;
        v813 = v313 + 4;
        v814 = v313 + 4;
        v960 = 0;
        v962 = 0;
        v963 = 0;
        v964 = 0;
        if (v305 != v304 && v303 == *(_DWORD *)v304)
        {
          v297 = v760;
          v314 = v762;
LABEL_378:
          operator delete(v313);
LABEL_379:
          if (v806)
            operator delete(v806);
          if (!v314)
            goto LABEL_405;
          v387 = (_BYTE *)*((_QWORD *)&v864 + 1);
          if (*((_QWORD *)&v864 + 1) < v865)
          {
            **((_DWORD **)&v864 + 1) = v303;
            v388 = (uint64_t)(v387 + 4);
LABEL_404:
            *((_QWORD *)&v864 + 1) = v388;
LABEL_405:
            BYTE2(v860) = 0;
            LOBYTE(v860) = 0;
            LODWORD(v868[1]) = 0;
            BYTE4(v868[1]) = 0;
            goto LABEL_406;
          }
          v389 = (_BYTE *)v864;
          v390 = *((_QWORD *)&v864 + 1) - v864;
          v391 = (uint64_t)(*((_QWORD *)&v864 + 1) - v864) >> 2;
          v392 = v391 + 1;
          if ((unint64_t)(v391 + 1) >> 62)
            sub_207CA420C();
          v393 = v865 - v864;
          if ((uint64_t)(v865 - v864) >> 1 > v392)
            v392 = v393 >> 1;
          if ((unint64_t)v393 >= 0x7FFFFFFFFFFFFFFCLL)
            v394 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v394 = v392;
          if (v394)
          {
            if (v394 >> 62)
              sub_207CA3AB8();
            v395 = (char *)operator new(4 * v394);
            v396 = &v395[4 * v391];
            v397 = &v395[4 * v394];
            *(_DWORD *)v396 = v303;
            v388 = (uint64_t)(v396 + 4);
            v398 = v387 - v389;
            if (v387 != v389)
            {
LABEL_393:
              v399 = v398 - 4;
              if (v399 >= 0x2C)
              {
                v400 = v387 - v395 - v390;
                v297 = v760;
                if (v400 >= 0x20)
                {
                  v401 = (v399 >> 2) + 1;
                  v402 = 4 * (v401 & 0x7FFFFFFFFFFFFFF8);
                  v403 = &v387[-v402];
                  v396 -= v402;
                  v404 = &v395[4 * v391 - 16];
                  v405 = (__int128 *)(v387 - 16);
                  v406 = v401 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v407 = *v405;
                    *((_OWORD *)v404 - 1) = *(v405 - 1);
                    *(_OWORD *)v404 = v407;
                    v404 -= 32;
                    v405 -= 2;
                    v406 -= 8;
                  }
                  while (v406);
                  v387 = v403;
                  if (v401 == (v401 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_402:
                    *(_QWORD *)&v864 = v396;
                    *((_QWORD *)&v864 + 1) = v388;
                    v865 = (unint64_t)v397;
                    if (v389)
                      operator delete(v389);
                    goto LABEL_404;
                  }
                }
              }
              else
              {
                v297 = v760;
              }
              do
              {
                v408 = *((_DWORD *)v387 - 1);
                v387 -= 4;
                *((_DWORD *)v396 - 1) = v408;
                v396 -= 4;
              }
              while (v387 != v389);
              goto LABEL_402;
            }
          }
          else
          {
            v395 = 0;
            v396 = (char *)(4 * v391);
            v397 = 0;
            *(_DWORD *)(4 * v391) = v303;
            v388 = 4 * v391 + 4;
            v398 = v387 - v389;
            if (v387 != v389)
              goto LABEL_393;
          }
          v297 = v760;
          goto LABEL_402;
        }
        if (*((_QWORD *)&v855 + 1) != (_QWORD)v856)
        {
          v315 = *(_QWORD *)(v856 - 8);
          *(_QWORD *)&v856 = v856 - 8;
LABEL_344:
          v347 = __p[1];
          *(_DWORD *)(v315 + 8) = LODWORD(v802);
          *(_QWORD *)v315 = v347;
          *(_QWORD *)(v315 + 16) = v311;
          *(_QWORD *)(v315 + 24) = v302;
          v348 = *(_OWORD *)v804;
          v349 = *(_OWORD *)&v804[16];
          v350 = *(_OWORD *)v805;
          v351 = *(_OWORD *)&v805[16];
          *(_QWORD *)(v315 + 96) = 0;
          *(_OWORD *)(v315 + 64) = v350;
          *(_OWORD *)(v315 + 80) = v351;
          *(_OWORD *)(v315 + 32) = v348;
          *(_OWORD *)(v315 + 48) = v349;
          *(_QWORD *)(v315 + 104) = 0;
          *(_QWORD *)(v315 + 112) = 0;
          v352 = v766 - (_QWORD)v759;
          if ((const void *)v766 != v759)
          {
            if (v352 < 0)
              sub_207CA420C();
            v353 = (char *)operator new(v766 - (_QWORD)v759);
            *(_QWORD *)(v315 + 96) = v353;
            *(_QWORD *)(v315 + 104) = v353;
            *(_QWORD *)(v315 + 112) = &v353[64 * (v352 >> 6)];
            v354 = v352 & 0xFFFFFFFFFFFFFFC0;
            memcpy(v353, v759, v354);
            *(_QWORD *)(v315 + 104) = &v353[v354];
          }
          v355 = v808;
          v356 = v809;
          v357 = v810;
          v358 = v811;
          *(_QWORD *)(v315 + 184) = 0;
          *(_OWORD *)(v315 + 152) = v357;
          *(_OWORD *)(v315 + 168) = v358;
          *(_OWORD *)(v315 + 120) = v355;
          *(_OWORD *)(v315 + 136) = v356;
          *(_QWORD *)(v315 + 192) = 0;
          *(_QWORD *)(v315 + 200) = 0;
          v359 = operator new(0x40uLL);
          *(_QWORD *)(v315 + 184) = v359;
          *(_QWORD *)(v315 + 192) = v359;
          *(_QWORD *)(v315 + 200) = v359 + 4;
          v360 = v313[1];
          *v359 = *v313;
          v359[1] = v360;
          v361 = v313[3];
          v359[2] = v313[2];
          v359[3] = v361;
          *(_QWORD *)(v315 + 192) = v359 + 4;
          v362 = (char *)v851[0];
          v363 = (char *)v851[1];
          v364 = v304 - (char *)v851[0];
          v365 = (v304 - (char *)v851[0]) >> 4;
          v366 = (char *)v851[0] + ((v304 - (char *)v851[0]) & 0xFFFFFFFFFFFFFFF0);
          if (v851[1] < (void *)v852)
          {
            if (v366 == v851[1])
            {
              *(_DWORD *)v366 = v303;
              *((_QWORD *)v366 + 1) = v315;
              v851[1] = v366 + 16;
              v314 = v762;
            }
            else
            {
              v367 = v366 + 16;
              v368 = (char *)v851[1] - 16;
              v314 = v762;
              v369 = v851[1];
              if (v851[1] >= (void *)0x10)
              {
                do
                {
                  v370 = *(_OWORD *)v368;
                  v368 += 16;
                  *v369++ = v370;
                }
                while (v368 < v363);
              }
              v851[1] = v369;
              if (v363 != v367)
              {
                v371 = (v363 - v367) >> 4;
                v372 = v363 - 8;
                v373 = 16 * v371;
                do
                {
                  *((_DWORD *)v372 - 2) = *(_DWORD *)&v366[v373 - 16];
                  *(_QWORD *)v372 = *(_QWORD *)&v366[v373 - 8];
                  v372 -= 16;
                  v373 -= 16;
                }
                while (v373);
              }
              *(_DWORD *)v366 = v303;
              *(_QWORD *)&v362[16 * v365 + 8] = v315;
            }
            goto LABEL_377;
          }
          v374 = (((char *)v851[1] - (char *)v851[0]) >> 4) + 1;
          if (v374 >> 60)
            sub_207CA420C();
          v375 = v852 - (unint64_t)v851[0];
          if ((uint64_t)(v852 - (unint64_t)v851[0]) >> 3 > v374)
            v374 = v375 >> 3;
          if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF0)
            v376 = 0xFFFFFFFFFFFFFFFLL;
          else
            v376 = v374;
          if (!v376)
          {
            v377 = 0;
            v378 = (char *)(16 * v365);
            v379 = 0;
            if (v365)
              goto LABEL_370;
            goto LABEL_364;
          }
          if (!(v376 >> 60))
          {
            v377 = (char *)operator new(16 * v376);
            v378 = &v377[16 * v365];
            v379 = &v377[16 * v376];
            if (v365 != v376)
              goto LABEL_370;
LABEL_364:
            if (v364 < 1)
            {
              if (v304 == v362)
                v617 = 1;
              else
                v617 = v364 >> 3;
              if (v617 >> 60)
                sub_207CA3AB8();
              v378 = (char *)operator new(16 * v617);
              v379 = &v378[16 * v617];
              v314 = v762;
              if (v377)
              {
                operator delete(v377);
                v379 = &v378[16 * v617];
                v362 = (char *)v851[0];
              }
              *(_DWORD *)v378 = v303;
              *((_QWORD *)v378 + 1) = v315;
              v381 = v378 + 16;
              if (v362 != v366)
              {
LABEL_371:
                v382 = v366;
                do
                {
                  v383 = v378 - 16;
                  *((_OWORD *)v378 - 1) = *((_OWORD *)v382 - 1);
                  v382 -= 16;
                  v378 -= 16;
                }
                while (v382 != v362);
                v384 = (char *)v851[1];
                if (v851[1] == v366)
                {
LABEL_375:
                  v386 = v851[0];
                  v851[0] = v383;
                  v851[1] = v381;
                  *(_QWORD *)&v852 = v379;
                  if (v386)
                    operator delete(v386);
LABEL_377:
                  v313 = v812;
                  v297 = v760;
                  if (!v812)
                    goto LABEL_379;
                  goto LABEL_378;
                }
                do
                {
LABEL_374:
                  v385 = *(_OWORD *)v366;
                  v366 += 16;
                  *v381++ = v385;
                }
                while (v366 != v384);
                goto LABEL_375;
              }
LABEL_765:
              v383 = v378;
              v384 = (char *)v851[1];
              if (v851[1] == v366)
                goto LABEL_375;
              goto LABEL_374;
            }
            v380 = v365 + 2;
            if (v365 >= -1)
              v380 = v365 + 1;
            v378 -= 16 * (v380 >> 1);
LABEL_370:
            v314 = v762;
            *(_DWORD *)v378 = v303;
            *((_QWORD *)v378 + 1) = v315;
            v381 = v378 + 16;
            if (v362 != v366)
              goto LABEL_371;
            goto LABEL_765;
          }
LABEL_913:
          sub_207CA3AB8();
        }
        v316 = DWORD2(v854);
        if (DWORD2(v854))
        {
          v317 = v855;
          if ((unint64_t)v855 < 8 << (BYTE8(v854) - 1))
          {
            v318 = *((_QWORD *)v853[0] + 2 * (DWORD2(v854) - 1));
            *(_QWORD *)&v855 = v855 + 1;
            v315 = v318 + 208 * v317;
            goto LABEL_344;
          }
          v319 = 208 * (16 << (BYTE8(v854) - 1));
          v320 = v853[0];
          if (DWORD2(v854) == ((char *)v853[1] - (char *)v853[0]) >> 4)
            goto LABEL_313;
        }
        else
        {
          v319 = 1664;
          v320 = v853[0];
          if (!(((char *)v853[1] - (char *)v853[0]) >> 4))
          {
LABEL_313:
            v321 = malloc_type_aligned_alloc(8uLL, v319, 0x8BB35E2BuLL);
            v322 = v321;
            v323 = (char *)v853[1];
            if (v853[1] >= (void *)v854)
            {
              v326 = (char *)v853[0];
              v327 = (char *)v853[1] - (char *)v853[0];
              v328 = ((char *)v853[1] - (char *)v853[0]) >> 4;
              v329 = v328 + 1;
              if ((unint64_t)(v328 + 1) >> 60)
                sub_207CA420C();
              v330 = v854 - (unint64_t)v853[0];
              if ((uint64_t)(v854 - (unint64_t)v853[0]) >> 3 > v329)
                v329 = v330 >> 3;
              if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF0)
                v331 = 0xFFFFFFFFFFFFFFFLL;
              else
                v331 = v329;
              if (v331)
              {
                if (v331 >> 60)
                  goto LABEL_913;
                v332 = (char *)operator new(16 * v331);
              }
              else
              {
                v332 = 0;
              }
              v333 = MEMORY[0x24BDAE450];
              v334 = &v332[16 * v328];
              *(_QWORD *)v334 = v322;
              *((_QWORD *)v334 + 1) = v333;
              v325 = v334 + 16;
              if (v323 == v326)
              {
                v853[0] = v334;
                v853[1] = v334 + 16;
                *(_QWORD *)&v854 = &v332[16 * v331];
              }
              else
              {
                v335 = v323 - v326 - 16;
                if (v335 < 0x90
                  || &v323[-(v335 & 0xFFFFFFFFFFFFFFF0) - 16] < v334
                  && &v332[v327 - (v335 & 0xFFFFFFFFFFFFFFF0) - 16] < v323)
                {
                  goto LABEL_332;
                }
                v336 = (v335 >> 4) + 1;
                v337 = 16 * (v336 & 0x1FFFFFFFFFFFFFFELL);
                v338 = &v334[-v337];
                v339 = &v323[-v337];
                v340 = (double *)(v334 - 32);
                v341 = (const double *)(v323 - 32);
                v342 = v336 & 0x1FFFFFFFFFFFFFFELL;
                do
                {
                  v996 = vld2q_f64(v341);
                  v341[2] = 0.0;
                  *v341 = 0.0;
                  v341 -= 4;
                  vst2q_f64(v340, v996);
                  v340 -= 4;
                  v342 -= 2;
                }
                while (v342);
                v334 = v338;
                v323 = v339;
                if (v336 != (v336 & 0x1FFFFFFFFFFFFFFELL))
                {
LABEL_332:
                  v338 = v334;
                  do
                  {
                    v343 = *((_QWORD *)v323 - 2);
                    v323 -= 16;
                    *(_QWORD *)v323 = 0;
                    *((_QWORD *)v338 - 2) = v343;
                    v338 -= 16;
                    *((_QWORD *)v338 + 1) = *((_QWORD *)v323 + 1);
                  }
                  while (v323 != v326);
                }
                v323 = (char *)v853[0];
                v344 = (char *)v853[1];
                v853[0] = v338;
                v853[1] = v325;
                *(_QWORD *)&v854 = &v332[16 * v331];
                if (v344 != v323)
                {
                  v345 = v344;
                  do
                  {
                    v346 = *((_QWORD *)v345 - 2);
                    v345 -= 16;
                    *(_QWORD *)v345 = 0;
                    if (v346)
                      (*((void (**)(void))v344 - 1))();
                    v344 = v345;
                  }
                  while (v345 != v323);
                }
              }
              if (v323)
                operator delete(v323);
            }
            else
            {
              v324 = MEMORY[0x24BDAE450];
              *(_QWORD *)v853[1] = v321;
              *((_QWORD *)v323 + 1) = v324;
              v325 = v323 + 16;
            }
            v853[1] = v325;
            v316 = DWORD2(v854);
            v320 = v853[0];
            v311 = v803;
          }
        }
        DWORD2(v854) = v316 + 1;
        *(_QWORD *)&v855 = 1;
        v315 = v320[2 * v316];
        goto LABEL_344;
      }
    }
  }
LABEL_406:
  if (v982)
  {
    *(_QWORD *)&v983 = v982;
    operator delete(v982);
  }
  BYTE5(v868[1]) = 0;
  LODWORD(v868[1]) = 0;
  v978[24] = 0;
  v984 = &v979;
  v985 = xmmword_2082352F0;
  v986 = 0;
  v988 = 0;
  v990 = 0;
  v992 = 0;
  v994 = 0;
  *(_QWORD *)v978 = 0x6400000005;
  v978[8] = 0;
  *(int32x2_t *)&v978[12] = vdup_n_s32(0x358637BDu);
  *(_DWORD *)&v978[28] = 1069401558;
  *(_DWORD *)&v978[20] = 897988541;
  *(_QWORD *)v954 = 0xA00000001;
  v954[8] = 0;
  *(_QWORD *)&v954[12] = 0x358637BD3A83126FLL;
  v954[24] = 0;
  *(_DWORD *)&v954[20] = 897988541;
  *(_DWORD *)&v954[28] = 1069401558;
  v965 = v955;
  v966 = xmmword_2082352F0;
  v967 = 0;
  v969 = 0;
  v971 = 0;
  v973 = 0;
  v975 = 0;
  *(_QWORD *)&v976 = 0x3A83126F358637BDLL;
  BYTE8(v976) = 1;
  HIDWORD(v976) = 1065353216;
  v977 = 0x4000000040000000;
  sub_207D82584((uint64_t)v954, (uint64_t)v978);
  LODWORD(v976) = 1036831949;
  BYTE8(v976) = 1;
  __p[0] = off_24C074500;
  sub_207D936D8((uint64_t)&__p[1], (uint64_t)v954);
  *(float *)&v826 = -1.0;
  v828 = 0;
  __src = 0;
  v829 = 0;
  __p[0] = off_24C074470;
  v830 = v976;
  *(_QWORD *)&v831 = v977;
  *((_QWORD *)&v831 + 1) = __PAIR64__(v977, DWORD1(v976));
  sub_207D82584((uint64_t)&v931, (uint64_t)&__p[1]);
  v949 = *(float *)&v826;
  v409 = v829;
  if (v951 < v829)
  {
    if (__dst)
      operator delete[](__dst);
    __dst = 0;
    v410 = 4 * v409;
    v951 = ((4 * v409 + 31) & 0x7FFFFFFE0uLL) >> 2;
    v411 = (void *)MEMORY[0x20BD028B4]();
    __dst = v411;
    goto LABEL_414;
  }
  if (v829)
  {
    v411 = __dst;
    v410 = 4 * v829;
LABEL_414:
    memcpy(v411, __src, v410);
    v412 = v829;
    goto LABEL_415;
  }
  v412 = 0;
LABEL_415:
  v952 = v412;
  *(_OWORD *)v953 = v830;
  *(_OWORD *)&v953[16] = v831;
  __p[0] = off_24C074500;
  if (__src)
    operator delete[](__src);
  v413 = v825;
  if (v825 == v824)
  {
    v414 = 4;
    v413 = v824;
  }
  else
  {
    if (!v825)
      goto LABEL_422;
    v414 = 5;
  }
  (*(void (**)(void))(*v413 + 8 * v414))();
LABEL_422:
  v415 = v823;
  if (v823 == v822)
  {
    v416 = 4;
    v415 = v822;
  }
  else
  {
    if (!v823)
      goto LABEL_427;
    v416 = 5;
  }
  (*(void (**)(void))(*v415 + 8 * v416))();
LABEL_427:
  v417 = v821;
  if (v821 == v820)
  {
    v418 = 4;
    v417 = v820;
  }
  else
  {
    if (!v821)
      goto LABEL_432;
    v418 = 5;
  }
  (*(void (**)(void))(*v417 + 8 * v418))();
LABEL_432:
  v419 = v819;
  if (v819 == &v817)
  {
    v420 = 4;
    v419 = &v817;
    goto LABEL_436;
  }
  if (v819)
  {
    v420 = 5;
LABEL_436:
    (*((void (**)(void))*v419 + v420))();
  }
  v816 = 0;
  if (v815 != v804 && v815)
    operator delete[](v815);
  v421 = v975;
  if (v975 == v974)
  {
    v422 = 4;
    v421 = v974;
  }
  else
  {
    if (!v975)
      goto LABEL_445;
    v422 = 5;
  }
  (*(void (**)(void))(*v421 + 8 * v422))();
LABEL_445:
  v423 = v973;
  if (v973 == v972)
  {
    v424 = 4;
    v423 = v972;
  }
  else
  {
    if (!v973)
      goto LABEL_450;
    v424 = 5;
  }
  (*(void (**)(void))(*v423 + 8 * v424))();
LABEL_450:
  v425 = v971;
  if (v971 == v970)
  {
    v426 = 4;
    v425 = v970;
  }
  else
  {
    if (!v971)
      goto LABEL_455;
    v426 = 5;
  }
  (*(void (**)(void))(*v425 + 8 * v426))();
LABEL_455:
  v427 = v969;
  if (v969 == v968)
  {
    v428 = 4;
    v427 = v968;
    goto LABEL_459;
  }
  if (v969)
  {
    v428 = 5;
LABEL_459:
    (*(void (**)(void))(*v427 + 8 * v428))();
  }
  *((_QWORD *)&v966 + 1) = 0;
  if (v965 != v955 && v965)
    operator delete[](v965);
  v429 = v994;
  if (v994 == v993)
  {
    v430 = 4;
    v429 = v993;
  }
  else
  {
    if (!v994)
      goto LABEL_468;
    v430 = 5;
  }
  (*(void (**)(void))(*v429 + 8 * v430))();
LABEL_468:
  v431 = v992;
  if (v992 == v991)
  {
    v432 = 4;
    v431 = v991;
  }
  else
  {
    if (!v992)
      goto LABEL_473;
    v432 = 5;
  }
  (*(void (**)(void))(*v431 + 8 * v432))();
LABEL_473:
  v433 = v990;
  if (v990 == v989)
  {
    v434 = 4;
    v433 = v989;
  }
  else
  {
    if (!v990)
      goto LABEL_478;
    v434 = 5;
  }
  (*(void (**)(void))(*v433 + 8 * v434))();
LABEL_478:
  v435 = v988;
  if (v988 == v987)
  {
    v436 = 4;
    v435 = v987;
    goto LABEL_482;
  }
  if (v988)
  {
    v436 = 5;
LABEL_482:
    (*(void (**)(void))(*v435 + 8 * v436))();
  }
  *((_QWORD *)&v985 + 1) = 0;
  if (v984 != &v979 && v984)
    operator delete[](v984);
  if (v769)
    operator delete(v769);
  v437 = v783[0];
  if (v783[1] != v783[0])
  {
    v438 = 0;
    v439 = &v868[1];
    while (1)
    {
      v440 = v757[1] + 12 * *(_QWORD *)(v786 + 8 * v438);
      v771 = *(_QWORD *)v440;
      v772 = *(_DWORD *)(v440 + 8);
      v441 = v437[v438];
      v442 = *(_QWORD *)(*((_QWORD *)&v787 + 1) + 8 * v438);
      v443 = *(unsigned int *)&v953[32];
      ++*(_DWORD *)&v953[32];
      v798 = 0;
      v797 = 0;
      v780 = 0;
      v781 = 0;
      v444 = (unint64_t *)*((_QWORD *)&v857 + 1);
      v445 = (unint64_t *)v857;
      if ((_QWORD)v857 == *((_QWORD *)&v857 + 1))
        break;
      v446 = (unint64_t *)*((_QWORD *)&v857 + 1);
      if (*(_QWORD *)(*((_QWORD *)&v857 + 1) - 104) < v443)
        goto LABEL_502;
      v447 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v857 + 1) - v857) >> 3);
      v448 = (unint64_t *)v857;
      do
      {
        v449 = v447 >> 1;
        v450 = &v448[13 * (v447 >> 1)];
        v452 = *v450;
        v451 = v450 + 13;
        v447 += ~(v447 >> 1);
        if (v452 < v443)
          v448 = v451;
        else
          v447 = v449;
      }
      while (v447);
      v446 = (unint64_t *)*((_QWORD *)&v857 + 1);
      if (v448 == *((unint64_t **)&v857 + 1))
        goto LABEL_502;
      v446 = v448;
      if (*v448 != v443)
        goto LABEL_502;
LABEL_511:
      v456 = v798;
      v297 = v760;
      if (v798)
      {
        p_shared_owners = (unint64_t *)&v798->__shared_owners_;
        do
          v458 = __ldaxr(p_shared_owners);
        while (__stlxr(v458 - 1, p_shared_owners));
        if (!v458)
        {
          ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
          std::__shared_weak_count::__release_weak(v456);
        }
      }
      ++v438;
      v437 = v783[0];
      if (v438 >= ((char *)v783[1] - (char *)v783[0]) >> 3)
        goto LABEL_594;
    }
    v446 = (unint64_t *)v857;
LABEL_502:
    *(_QWORD *)&v954[8] = v771;
    *(_DWORD *)&v954[16] = v772;
    *(_QWORD *)&v954[20] = v441;
    *(_QWORD *)v954 = v443;
    *(_QWORD *)&v955[0] = v442;
    LODWORD(v956) = -1082130432;
    BYTE4(v956) = 0;
    BYTE8(v957) = 0;
    if (v851[1] == v851[0] || *(_DWORD *)v851[0])
    {
      v453 = 1;
      goto LABEL_509;
    }
    v459 = *((_QWORD *)v851[0] + 1);
    *((_QWORD *)&v955[0] + 1) = v459;
    v460 = *(_DWORD *)(v459 + 8);
    *(_DWORD *)(v459 + 8) = v460 + 1;
    if (!*(_BYTE *)(v459 + 20))
    {
      *(_DWORD *)(v459 + 8) = v460;
      v453 = 1;
      v473 = v781;
      if (!v781)
        goto LABEL_509;
      goto LABEL_505;
    }
    __p[0] = (void *)v443;
    __p[1] = (void *)v443;
    v802 = *(double *)&v954[8];
    LODWORD(v803) = *(_DWORD *)&v954[16];
    *(_QWORD *)((char *)&v803 + 4) = v441;
    *(_QWORD *)v804 = v442;
    *(_QWORD *)&v804[8] = v459;
    *(_DWORD *)v805 = v956;
    v805[4] = BYTE4(v956);
    memset(&v805[8], 0, 17);
    *((_QWORD *)&v956 + 1) = 0;
    *(_QWORD *)&v957 = 0;
    if (v444 != v446 && *v446 == v443)
    {
LABEL_578:
      BYTE2(v860) = 0;
      LOBYTE(v860) = 0;
      v859 = vaddq_s64(v859, (int64x2_t)xmmword_2082352E0);
      v503 = (std::__shared_weak_count *)v957;
      if (!(_QWORD)v957)
        goto LABEL_582;
      v504 = (unint64_t *)(v957 + 8);
      do
        v505 = __ldaxr(v504);
      while (__stlxr(v505 - 1, v504));
      if (!v505)
      {
        ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
        std::__shared_weak_count::__release_weak(v503);
        v453 = 0;
        v473 = v781;
        if (!v781)
        {
LABEL_509:
          if ((v453 & 1) == 0)
          {
            *((_BYTE *)v439 + 4) = 0;
            *(_DWORD *)v439 = 0;
          }
          goto LABEL_511;
        }
      }
      else
      {
LABEL_582:
        v453 = 0;
        v473 = v781;
        if (!v781)
          goto LABEL_509;
      }
LABEL_505:
      v454 = (unint64_t *)&v473->__shared_owners_;
      do
        v455 = __ldaxr(v454);
      while (__stlxr(v455 - 1, v454));
      if (!v455)
      {
        ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
        std::__shared_weak_count::__release_weak(v473);
      }
      goto LABEL_509;
    }
    v752 = v459;
    if ((unint64_t)v444 < *(_QWORD *)&v858[0])
    {
      if (v446 == v444)
      {
        *v444 = v443;
        v482 = &v445[v446 - v445];
        v482[1] = v443;
        v483 = v802;
        *((_DWORD *)v482 + 6) = v803;
        *((double *)v482 + 2) = v483;
        *(unint64_t *)((char *)v482 + 28) = v441;
        v482[5] = v442;
        v482[6] = v459;
        LODWORD(v483) = *(_DWORD *)v805;
        *((_BYTE *)v482 + 76) = v805[4];
        *((_DWORD *)v482 + 18) = LODWORD(v483);
        v482[10] = 0;
        v482[11] = 0;
        *(_OWORD *)&v805[8] = 0uLL;
        *((_BYTE *)v482 + 96) = 0;
        *((_QWORD *)&v857 + 1) = v444 + 13;
      }
      else
      {
        v741 = 0x4EC4EC4EC4EC4EC5 * (v446 - v445);
        v743 = v442;
        v745 = v439;
        *(_QWORD *)v978 = *(_QWORD *)&v954[8];
        *(_DWORD *)&v978[8] = *(_DWORD *)&v954[16];
        v799 = v956;
        v800 = BYTE4(v956);
        *(_OWORD *)&v805[8] = 0uLL;
        v461 = v444 - 13;
        v462 = v444;
        v463 = v444 - 13;
        if ((unint64_t)v444 >= 0x68)
        {
          do
          {
            *v462 = *v463;
            v462[1] = v463[1];
            v464 = v463[2];
            *((_DWORD *)v462 + 6) = *((_DWORD *)v463 + 6);
            v462[2] = v464;
            *(unint64_t *)((char *)v462 + 28) = *(unint64_t *)((char *)v463 + 28);
            v462[5] = v463[5];
            v462[6] = v463[6];
            v462[7] = v463[7];
            v462[8] = v463[8];
            LODWORD(v464) = *((_DWORD *)v463 + 18);
            *((_BYTE *)v462 + 76) = *((_BYTE *)v463 + 76);
            *((_DWORD *)v462 + 18) = v464;
            *((_OWORD *)v462 + 5) = *((_OWORD *)v463 + 5);
            v463[10] = 0;
            v463[11] = 0;
            *((_BYTE *)v462 + 96) = *((_BYTE *)v463 + 96);
            v462 += 13;
            v463 += 13;
          }
          while (v463 < v444);
        }
        *((_QWORD *)&v857 + 1) = v462;
        if (v444 != v446 + 13)
        {
          v465 = v444 - 13;
          v466 = v444;
          do
          {
            v467 = *(v465 - 13);
            v465 -= 13;
            *(v466 - 13) = v467;
            v466 -= 13;
            v466[1] = v465[1];
            v468 = v465[2];
            *((_DWORD *)v466 + 6) = *((_DWORD *)v465 + 6);
            v466[2] = v468;
            *(unint64_t *)((char *)v466 + 28) = *(unint64_t *)((char *)v465 + 28);
            v466[5] = v465[5];
            v466[6] = v465[6];
            v466[7] = v465[7];
            v466[8] = v465[8];
            LODWORD(v468) = *((_DWORD *)v465 + 18);
            *((_BYTE *)v466 + 76) = *((_BYTE *)v465 + 76);
            *((_DWORD *)v466 + 18) = v468;
            v469 = *((_OWORD *)v465 + 5);
            v465[10] = 0;
            v465[11] = 0;
            v470 = (std::__shared_weak_count *)v466[11];
            *((_OWORD *)v466 + 5) = v469;
            if (v470)
            {
              v471 = (unint64_t *)&v470->__shared_owners_;
              do
                v472 = __ldaxr(v471);
              while (__stlxr(v472 - 1, v471));
              if (!v472)
              {
                ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
                std::__shared_weak_count::__release_weak(v470);
              }
            }
            *((_BYTE *)v444 - 8) = *((_BYTE *)v461 - 8);
            v444 = v466;
            v461 = v465;
          }
          while (v465 != v446);
        }
        *(int64x2_t *)v446 = vdupq_n_s64(v443);
        v478 = &v445[v446 - v445];
        v478[2] = *(_QWORD *)v978;
        *((_DWORD *)v478 + 6) = *(_DWORD *)&v978[8];
        *(unint64_t *)((char *)v478 + 28) = v441;
        v478[5] = v743;
        v478[6] = v752;
        *((_DWORD *)v478 + 18) = v799;
        *((_BYTE *)v478 + 76) = v800;
        v479 = (std::__shared_weak_count *)v478[11];
        v478[10] = 0;
        v478[11] = 0;
        v439 = v745;
        if (v479)
        {
          v480 = (unint64_t *)&v479->__shared_owners_;
          do
            v481 = __ldaxr(v480);
          while (__stlxr(v481 - 1, v480));
          if (!v481)
          {
            ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
            std::__shared_weak_count::__release_weak(v479);
          }
        }
        LOBYTE(v445[13 * v741 + 12]) = 0;
      }
      goto LABEL_573;
    }
    v474 = 0x4EC4EC4EC4EC4EC5 * (v444 - v445) + 1;
    if (v474 > 0x276276276276276)
      sub_207CA420C();
    v475 = v439;
    if (0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)&v858[0] - (_QWORD)v445) >> 3) > v474)
      v474 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)&v858[0] - (_QWORD)v445) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)&v858[0] - (_QWORD)v445) >> 3)) >= 0x13B13B13B13B13BLL)
      v476 = 0x276276276276276;
    else
      v476 = v474;
    *(_QWORD *)&v979 = v858;
    if (v476)
    {
      if (v476 > 0x276276276276276)
        sub_207CA3AB8();
      v477 = (char *)operator new(104 * v476);
    }
    else
    {
      v477 = 0;
    }
    v484 = 0x4EC4EC4EC4EC4EC5 * (v446 - v445);
    v485 = &v477[8 * (v446 - v445)];
    *(_QWORD *)v978 = v477;
    *(_QWORD *)&v978[8] = v485;
    *(_QWORD *)&v978[16] = v485;
    *(_QWORD *)&v978[24] = &v477[104 * v476];
    _ZF = v484 == v476;
    v439 = v475;
    if (_ZF)
    {
      if ((char *)v446 - (char *)v445 < 1)
      {
        if (v445 == v446)
          v487 = 1;
        else
          v487 = 0x9D89D89D89D89D8ALL * (v446 - v445);
        if (v487 > 0x276276276276276)
          sub_207CA3AB8();
        v488 = (char *)operator new(104 * v487);
        v485 = &v488[104 * (v487 >> 2)];
        *(_QWORD *)v978 = v488;
        *(_QWORD *)&v978[8] = v485;
        *(_QWORD *)&v978[24] = &v488[104 * v487];
        if (v477)
          operator delete(v477);
      }
      else
      {
        v486 = v484 + 2;
        if (v484 >= -1)
          v486 = v484 + 1;
        v485 -= 104 * (v486 >> 1);
        *(_QWORD *)&v978[8] = v485;
      }
    }
    *(_QWORD *)v485 = v443;
    *((_QWORD *)v485 + 1) = v443;
    *((_DWORD *)v485 + 6) = v803;
    *((double *)v485 + 2) = v802;
    *(_QWORD *)(v485 + 28) = *(_QWORD *)((char *)&v803 + 4);
    *((_QWORD *)v485 + 5) = *(_QWORD *)v804;
    *((_OWORD *)v485 + 3) = *(_OWORD *)&v804[8];
    *((_QWORD *)v485 + 8) = *(_QWORD *)&v804[24];
    v489 = *(_DWORD *)v805;
    v485[76] = v805[4];
    *((_DWORD *)v485 + 18) = v489;
    *((_OWORD *)v485 + 5) = *(_OWORD *)&v805[8];
    *(_OWORD *)&v805[8] = 0uLL;
    v485[96] = v805[24];
    v490 = v485 + 104;
    *(_QWORD *)&v978[16] = v485 + 104;
    v491 = (unint64_t *)v857;
    if ((unint64_t *)v857 == v446)
    {
      v496 = (unint64_t *)*((_QWORD *)&v857 + 1);
      if (*((unint64_t **)&v857 + 1) == v446)
        goto LABEL_570;
    }
    else
    {
      v492 = 0;
      do
      {
        v493 = (char *)&v446[v492];
        v494 = &v485[v492 * 8];
        *((_QWORD *)v494 - 13) = v446[v492 - 13];
        *((_QWORD *)v494 - 12) = v446[v492 - 12];
        v495 = v446[v492 - 11];
        *((_DWORD *)v494 - 20) = v446[v492 - 10];
        *((_QWORD *)v494 - 11) = v495;
        *(_QWORD *)(v494 - 76) = *(unint64_t *)((char *)&v446[v492 - 9] - 4);
        *((_QWORD *)v494 - 8) = v446[v492 - 8];
        *((_QWORD *)v494 - 7) = v446[v492 - 7];
        *((_QWORD *)v494 - 6) = v446[v492 - 6];
        *((_QWORD *)v494 - 5) = v446[v492 - 5];
        LODWORD(v495) = v446[v492 - 4];
        *(v494 - 28) = *((_BYTE *)&v446[v492 - 3] - 4);
        *((_DWORD *)v494 - 8) = v495;
        *(_OWORD *)(v494 - 24) = *(_OWORD *)&v446[v492 - 3];
        *((_QWORD *)v493 - 3) = 0;
        *((_QWORD *)v493 - 2) = 0;
        *(v494 - 8) = v446[v492 - 1];
        v492 -= 13;
      }
      while (&v446[v492] != v491);
      v490 = *(char **)&v978[16];
      v485 += v492 * 8;
      v496 = (unint64_t *)*((_QWORD *)&v857 + 1);
      if (*((unint64_t **)&v857 + 1) == v446)
        goto LABEL_570;
    }
    do
    {
      *(_QWORD *)v490 = *v446;
      *((_QWORD *)v490 + 1) = v446[1];
      v497 = v446[2];
      *((_DWORD *)v490 + 6) = *((_DWORD *)v446 + 6);
      *((_QWORD *)v490 + 2) = v497;
      *(_QWORD *)(v490 + 28) = *(unint64_t *)((char *)v446 + 28);
      *((_QWORD *)v490 + 5) = v446[5];
      *((_QWORD *)v490 + 6) = v446[6];
      *((_QWORD *)v490 + 7) = v446[7];
      *((_QWORD *)v490 + 8) = v446[8];
      LODWORD(v497) = *((_DWORD *)v446 + 18);
      v490[76] = *((_BYTE *)v446 + 76);
      *((_DWORD *)v490 + 18) = v497;
      *((_OWORD *)v490 + 5) = *((_OWORD *)v446 + 5);
      v446[10] = 0;
      v446[11] = 0;
      v490[96] = *((_BYTE *)v446 + 96);
      v490 += 104;
      v446 += 13;
    }
    while (v446 != v496);
    v446 = (unint64_t *)*((_QWORD *)&v857 + 1);
LABEL_570:
    v498 = (unint64_t *)v857;
    v499 = *(_QWORD *)&v858[0];
    *(_QWORD *)&v857 = v485;
    *((_QWORD *)&v857 + 1) = v490;
    *(_QWORD *)&v858[0] = *(_QWORD *)&v978[24];
    *(_QWORD *)&v978[24] = v499;
    *(_QWORD *)&v978[8] = v498;
    *(_QWORD *)v978 = v498;
    if (v446 == v498)
    {
      if (!v446)
      {
LABEL_573:
        v500 = *(std::__shared_weak_count **)&v805[16];
        if (*(_QWORD *)&v805[16])
        {
          v501 = (unint64_t *)(*(_QWORD *)&v805[16] + 8);
          do
            v502 = __ldaxr(v501);
          while (__stlxr(v502 - 1, v501));
          if (!v502)
          {
            ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
            std::__shared_weak_count::__release_weak(v500);
          }
        }
        goto LABEL_578;
      }
    }
    else
    {
      do
      {
        *(_QWORD *)&v978[16] = v446 - 13;
        v506 = (std::__shared_weak_count *)*(v446 - 2);
        if (v506)
        {
          v507 = (unint64_t *)&v506->__shared_owners_;
          do
            v508 = __ldaxr(v507);
          while (__stlxr(v508 - 1, v507));
          if (!v508)
          {
            ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
            std::__shared_weak_count::__release_weak(v506);
          }
        }
        v446 = *(unint64_t **)&v978[16];
      }
      while (*(unint64_t **)&v978[16] != v498);
      v446 = *(unint64_t **)v978;
      if (!*(_QWORD *)v978)
        goto LABEL_573;
    }
    operator delete(v446);
    goto LABEL_573;
  }
LABEL_594:
  if (*(unsigned int *)&v953[32] / v755 < 3)
  {
    *v297 = 0.0;
    v930 = off_24C074500;
    v509 = __dst;
    if (!__dst)
      goto LABEL_849;
LABEL_848:
    operator delete[](v509);
    goto LABEL_849;
  }
  kdebug_trace();
  kdebug_trace();
  ((void (*)(char *@<X8>))v930[2])(v954);
  ((void (*)(std::string *@<X8>))*v849)((std::string *)v978);
  if ((v954[23] & 0x80000000) != 0)
  {
    sub_207CA40D8(__p, *(void **)v954, *(unint64_t *)&v954[8]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v954;
    v802 = *(double *)&v954[16];
  }
  v510 = v978[23];
  if ((v978[23] & 0x80000000) != 0)
  {
    sub_207CA40D8(&v803, *(void **)v978, *(unint64_t *)&v978[8]);
    v510 = v978[23];
  }
  else
  {
    v803 = *(_OWORD *)v978;
    *(_QWORD *)v804 = *(_QWORD *)&v978[16];
  }
  *(_QWORD *)&v804[8] = 0;
  *(_DWORD *)&v804[16] = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)&v804[20] = _D0;
  v817 = v805;
  v818 = xmmword_2082352F0;
  v832 = &v819;
  v833 = 64;
  v835 = 0;
  v834 = 0;
  v837 = v836;
  v838 = 64;
  v839 = 0;
  v841 = 0;
  v840 = 0;
  v843 = v842;
  v844 = xmmword_2082352F0;
  if (v510 < 0)
  {
    operator delete(*(void **)v978);
    if ((v954[23] & 0x80000000) == 0)
      goto LABEL_606;
  }
  else if ((v954[23] & 0x80000000) == 0)
  {
    goto LABEL_606;
  }
  operator delete(*(void **)v954);
LABEL_606:
  sub_207D93B7C(__p, 2uLL);
  *(_QWORD *)v978 = &v849;
  *(_QWORD *)&v978[8] = __p;
  v512 = ((float (*)(uint64_t))v849[5])((uint64_t)&v849);
  v513 = v869;
  if (((unsigned int (__cdecl *)())v930[3])())
  {
    v869 = 1;
    if (((unsigned int (*)(uint64_t))v930[5])((uint64_t)&v930))
      ((void (*)(float *, float))v930[6])((float *)&v930, 0.0);
    else
      ((void (*)(uint64_t))v930[7])((uint64_t)&v930);
    v514 = ((float (*)(uint64_t))v930[4])((uint64_t)&v930);
    ((void (*)(uint64_t, float))v849[13])((uint64_t)&v849, v514);
  }
  kdebug_trace();
  if (v935)
  {
    if (HIBYTE(v940))
    {
      v523 = v940;
      if (*((_QWORD *)&v939 + 1))
        sub_207DA46E8((uint64_t)&v849, (float *)v954, *(_DWORD *)v938, v515, v516, v517, v518, v519, v520, v521, v522);
      else
        sub_207DA46E8((uint64_t)&v849, (float *)v954, v936, v515, v516, v517, v518, v519, v520, v521, v522);
      v527 = 1.0;
      v528 = 1.0;
      if (!v523)
      {
        v527 = *(float *)v954;
        if (*(float *)v954 <= 0.0)
        {
          v528 = 1.0e20;
          v527 = 1.0e-10;
        }
        else
        {
          v528 = 1.0 / (float)(*(float *)v954 * *(float *)v954);
        }
      }
      *(_QWORD *)&v850 = __PAIR64__(LODWORD(v528), LODWORD(v527));
      goto LABEL_629;
    }
    if (*((_QWORD *)&v939 + 1))
    {
      *(_QWORD *)v954 = v938;
      *(_DWORD *)&v954[8] = 0;
      v524 = v940;
      sub_207DA5394((uint64_t)&v849, (uint64_t)&v780, (_DWORD **)v954, v515, v516, v517, v518, v519, v520, v521, v522);
      if (!v524)
      {
        v525 = (int)v780;
        if (*(float *)&v780 <= 0.0)
        {
          v526 = 1.0e20;
          v525 = 786163455;
        }
        else
        {
          v526 = 1.0 / (float)(*(float *)&v780 * *(float *)&v780);
        }
        *(_QWORD *)&v850 = __PAIR64__(LODWORD(v526), v525);
        v527 = *((float *)&v780 + 1);
LABEL_886:
        if (v527 <= 0.0)
        {
          v528 = 1.0e20;
          v527 = 1.0e-10;
        }
        else
        {
          v528 = 1.0 / (float)(v527 * v527);
        }
        goto LABEL_629;
      }
    }
    else
    {
      v529 = v940;
      sub_207DA5124((uint64_t)&v849, (uint64_t)v954, v936, v515, v516, v517, v518, v519, v520, v521, v522);
      if (!v529)
      {
        v618 = *(_DWORD *)v954;
        if (*(float *)v954 <= 0.0)
        {
          v619 = 1.0e20;
          v618 = 786163455;
        }
        else
        {
          v619 = 1.0 / (float)(*(float *)v954 * *(float *)v954);
        }
        *(_QWORD *)&v850 = __PAIR64__(LODWORD(v619), v618);
        v527 = *(float *)&v954[4];
        goto LABEL_886;
      }
    }
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v850 = _D0;
    v527 = 1.0;
    v528 = 1.0;
LABEL_629:
    *((_QWORD *)&v850 + 1) = __PAIR64__(LODWORD(v528), LODWORD(v527));
    BYTE5(v868[1]) = 0;
    LODWORD(v868[1]) = 0;
  }
  if (!((unsigned int (*)(uint64_t))v849[1])((uint64_t)&v849))
  {
    sub_207DA57BC((uint64_t)&v849, v836, &v835);
    sub_207DA5610((uint64_t)&v849, v836, &v835);
    sub_207DA5968((uint64_t)&v849, v842, &v840, &v841);
    *(_DWORD *)&v804[20] = sub_207DA3FBC((uint64_t)&v849, v805);
    *(_DWORD *)&v804[24] = *(_DWORD *)&v804[20];
    v949 = *(float *)&v804[20];
    v533 = (__int128 *)v817;
    v534 = *((_QWORD *)&v818 + 1);
    v535 = 4 * *((_QWORD *)&v818 + 1);
    v834 = 0;
    v536 = (void ***)v832;
    v537 = *((_QWORD *)&v818 + 1) & 0x3FFFFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v818 + 1) & 0x3FFFFFFFFFFFFFFFuLL) <= v833)
    {
      v540 = v832;
      if (!*((_QWORD *)&v818 + 1))
        goto LABEL_655;
    }
    else
    {
      if (2 * v833 > v537)
        v537 = 2 * v833;
      v833 = v537;
      if (v537 >> 62)
        v538 = -1;
      else
        v538 = 4 * v537;
      v539 = operator new[](v538);
      v540 = v539;
      if (v536 == &v819 || !v536)
      {
        v832 = v539;
        v542 = 0;
        v543 = (v534 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v543 >= 7)
          goto LABEL_646;
        goto LABEL_652;
      }
      operator delete[](v536);
      v541 = v834;
      v832 = v540;
      if (v834)
      {
        v834 += v534;
        memmove((char *)v540 + 4 * v534, v540, 4 * v541);
        memcpy(v540, v533, v535);
LABEL_655:
        kdebug_trace();
        if (((unsigned int (__cdecl *)())v930[3])())
        {
          if (((unsigned int (*)(uint64_t))v930[5])((uint64_t)&v930))
          {
            v554 = ((float (*)(uint64_t, double, double, float32x4_t))v849[12])((uint64_t)&v849, v551, v552, v553);
            ((void (*)(float *, float))v930[6])((float *)&v930, v554);
          }
          else
          {
            ((void (*)(uint64_t))v930[7])((uint64_t)&v930);
          }
          v555 = ((float (*)(uint64_t))v930[4])((uint64_t)&v930);
          ((void (*)(uint64_t, float))v849[13])((uint64_t)&v849, v555);
        }
        if (v870[7])
        {
          v556 = fabsf(**(float **)&v870[3]);
          if (v870[7] != 1)
          {
            v557 = (float *)(*(_QWORD *)&v870[3] + 4);
            v558 = 4 * v870[7] - 4;
            do
            {
              v559 = *v557++;
              v560 = fabsf(v559);
              if (v556 < v560)
                v556 = v560;
              v558 -= 4;
            }
            while (v558);
          }
          if (v556 < (float)(v556 * *(float *)&v933))
            goto LABEL_667;
        }
        else
        {
          v556 = 1.0;
          if ((float)(1.0 * *(float *)&v933) > 1.0)
          {
LABEL_667:
            if (v932)
            {
              v561 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              std::ios_base::getloc((const std::ios_base *)((char *)v561 + *(_QWORD *)(*v561 - 24)));
              v562 = std::locale::use_facet((const std::locale *)v954, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v562->__vftable[2].~facet_0)(v562, 10);
              std::locale::~locale((std::locale *)v954);
              std::ostream::put();
              std::ostream::flush();
              sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
              v563 = (_QWORD *)std::ostream::operator<<();
              sub_207CBAB98(v563, (uint64_t)"][", 2);
              if (v556 == 0.0)
                sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
              else
                std::ostream::operator<<();
              sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
              v614 = (_QWORD *)std::ostream::operator<<();
              v615 = sub_207CBAB98(v614, (uint64_t)"]", 1);
              std::ios_base::getloc((const std::ios_base *)((char *)v615 + *(_QWORD *)(*v615 - 24)));
              v616 = std::locale::use_facet((const std::locale *)v954, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v616->__vftable[2].~facet_0)(v616, 10);
              std::locale::~locale((std::locale *)v954);
              std::ostream::put();
              std::ostream::flush();
            }
            *(_DWORD *)&v804[16] = 1;
LABEL_783:
            v869 = v513;
            goto LABEL_784;
          }
        }
        v564 = v949;
        kdebug_trace();
        v565 = ((uint64_t (*)(uint64_t))v849[3])((uint64_t)&v849);
        if (v944)
          (*(void (**)(_BYTE *))(*(_QWORD *)v944 + 48))(v944);
        v566 = *(_DWORD *)&v804[8];
        if (*(_DWORD *)&v804[8] >= HIDWORD(v931))
        {
LABEL_781:
          *(float *)&v804[24] = v949;
          if (v942)
            (*(void (**)(_BYTE *))(*(_QWORD *)v942 + 48))(v942);
          goto LABEL_783;
        }
        v567 = v556;
        while (1)
        {
          v568 = v566 + 1;
          *(_DWORD *)&v804[8] = v566 + 1;
          if (((unsigned int (*)(uint64_t, uint64_t))v849[2])((uint64_t)&v849, v565))
          {
            if (v932)
            {
              v620 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v620 + *(_QWORD *)(*v620 - 24)));
              v621 = std::locale::use_facet((const std::locale *)v954, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v621->__vftable[2].~facet_0)(v621, 10);
              std::locale::~locale((std::locale *)v954);
              std::ostream::put();
              std::ostream::flush();
            }
            *(_DWORD *)&v804[16] = 0;
            goto LABEL_781;
          }
          ++*(_DWORD *)&v804[12];
          v569 = *(unsigned int *)(v565 + 16);
          if ((_DWORD)v569)
          {
            v570 = *(float **)v565;
            v571 = **(float **)v565 * **(float **)v565;
            if ((_DWORD)v569 != 1)
            {
              v572 = v570 + 1;
              v573 = (v569 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
              if (v573 < 7)
                goto LABEL_682;
              v574 = v573 + 1;
              v572 += v574 & 0x7FFFFFFFFFFFFFF8;
              v575 = (float32x4_t *)(v570 + 5);
              v576 = v574 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v577 = vmulq_f32(v575[-1], v575[-1]);
                v578 = vmulq_f32(*v575, *v575);
                v571 = (float)((float)((float)((float)((float)((float)((float)(v571 + v577.f32[0]) + v577.f32[1])
                                                             + v577.f32[2])
                                                     + v577.f32[3])
                                             + v578.f32[0])
                                     + v578.f32[1])
                             + v578.f32[2])
                     + v578.f32[3];
                v575 += 2;
                v576 -= 8;
              }
              while (v576);
              if (v574 != (v574 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_682:
                v579 = &v570[v569];
                do
                {
                  v580 = *v572++;
                  v571 = v571 + (float)(v580 * v580);
                }
                while (v572 != v579);
              }
            }
            v581 = sqrtf(v571);
            if (v566 < v931)
              goto LABEL_692;
          }
          else
          {
            v581 = sqrtf(0.0);
            if (v566 < v931)
              goto LABEL_692;
          }
          if (v948)
          {
            *(_DWORD *)v954 = *(_DWORD *)(v565 + 16);
            *(_QWORD *)&v954[8] = *(_QWORD *)v565;
            *(_DWORD *)&v954[16] = 0;
            *(float *)&v780 = v581;
            if (((*(uint64_t (**)(_BYTE *, void **, _BYTE *))(*(_QWORD *)v948 + 48))(v948, &v780, v954) & 1) != 0)
              goto LABEL_892;
          }
          else if ((_DWORD)v569 && v581 < (float)(*((float *)&v933 + 1) * (float)(v512 + *((float *)&v933 + 1))))
          {
LABEL_892:
            if (v932)
            {
              v728 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v728 + *(_QWORD *)(*v728 - 24)));
              v729 = std::locale::use_facet((const std::locale *)v954, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v729->__vftable[2].~facet_0)(v729, 10);
              std::locale::~locale((std::locale *)v954);
              std::ostream::put();
              std::ostream::flush();
              *(float *)&v730 = v581;
              *(float *)&v731 = v567;
              ((void (*)(uint64_t, float, double, double, float))v930[8])((uint64_t)&v930, v564, v730, v731, v556);
            }
            v627 = 2;
            goto LABEL_780;
          }
LABEL_692:
          ((void (*)(uint64_t, _QWORD *))v849[6])((uint64_t)&v849, (_QWORD *)v565);
          if (v946)
            (*(void (**)(_BYTE *))(*(_QWORD *)v946 + 48))(v946);
          if (v834)
            memcpy(&v780, v832, 4 * v834);
          v564 = sub_207DA3FBC((uint64_t)&v849, &v819);
          if (!v870[7])
          {
            v567 = 1.0;
            if (!v932)
              goto LABEL_706;
LABEL_705:
            *(float *)&v582 = v581;
            *(float *)&v583 = v567;
            ((void (*)(uint64_t, float, double, double, float))v930[8])((uint64_t)&v930, v564, v582, v583, v556);
            goto LABEL_706;
          }
          v567 = fabsf(**(float **)&v870[3]);
          if (v870[7] != 1)
          {
            v584 = (float *)(*(_QWORD *)&v870[3] + 4);
            v585 = 4 * v870[7] - 4;
            do
            {
              v586 = *v584++;
              v587 = fabsf(v586);
              if (v567 < v587)
                v567 = v587;
              v585 -= 4;
            }
            while (v585);
          }
          if (v932)
            goto LABEL_705;
LABEL_706:
          if (v564 == 0.0)
          {
            if (v932)
            {
              v622 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v623 = sub_207CBAB98(v622, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v623 + *(_QWORD *)(*v623 - 24)));
              v624 = std::locale::use_facet((const std::locale *)v954, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v624->__vftable[2].~facet_0)(v624, 10);
              std::locale::~locale((std::locale *)v954);
              std::ostream::put();
              goto LABEL_778;
            }
LABEL_779:
            v949 = v564;
            v627 = 3;
LABEL_780:
            *(_DWORD *)&v804[16] = v627;
            goto LABEL_781;
          }
          if (vabds_f32(v564, v949) < (float)(v564 * v934) && v566 >= v931)
          {
            if (v932)
            {
              sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v625 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v625 + *(_QWORD *)(*v625 - 24)));
              v626 = std::locale::use_facet((const std::locale *)v954, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v626->__vftable[2].~facet_0)(v626, 10);
              std::locale::~locale((std::locale *)v954);
              std::ostream::put();
LABEL_778:
              std::ostream::flush();
            }
            goto LABEL_779;
          }
          if (v870[1])
          {
            ((void (*)(uint64_t, uint64_t))v849[20])((uint64_t)&v849, (uint64_t)&__dst);
            v589 = ((BOOL (*)(uint64_t, uint64_t, float **, float **, float))v930[10])((uint64_t)&v930, v565, (float **)&v870[3], (float **)&__dst, v564);
          }
          else
          {
            v589 = ((BOOL (*)(uint64_t, uint64_t, float **, float))v930[9])((uint64_t)&v930, v565, (float **)&v870[3], v564);
          }
          if (!v589)
          {
            --*(_DWORD *)&v804[12];
            v604 = v851[0];
            v605 = v851[1];
            while (v604 != v605)
            {
              v606 = v604[1];
              if (*(_BYTE *)(v606 + 20))
              {
                v607 = *(_OWORD *)(v606 + 136);
                *(_OWORD *)(v606 + 32) = *(_OWORD *)(v606 + 120);
                *(_OWORD *)(v606 + 48) = v607;
                v608 = *(_OWORD *)(v606 + 168);
                *(_OWORD *)(v606 + 64) = *(_OWORD *)(v606 + 152);
                *(_OWORD *)(v606 + 80) = v608;
                sub_207D43AA8((_QWORD *)(v606 + 96), *(char **)(v606 + 184), *(char **)(v606 + 192), (uint64_t)(*(_QWORD *)(v606 + 192) - *(_QWORD *)(v606 + 184)) >> 6);
              }
              v604 += 2;
            }
            BYTE5(v868[1]) = 0;
            LOBYTE(v868[1]) = 0;
            *(_WORD *)((char *)&v868[1] + 3) = 0;
            BYTE1(v868[1]) = BYTE2(v868[1]);
            v834 = 0;
            v609 = (void ***)v832;
            if (v833 > 1)
            {
              v611 = v832;
            }
            else
            {
              v833 = 2;
              v610 = operator new[](8uLL);
              v611 = v610;
              if (v609 == &v819 || !v609)
              {
                v832 = v610;
              }
              else
              {
                operator delete[](v609);
                v832 = v611;
                if (v834)
                {
                  v834 += 2;
                  *v611 = v780;
                  goto LABEL_742;
                }
              }
            }
            *v611 = v780;
            v834 = 2;
LABEL_742:
            if (((unsigned int (__cdecl *)())v930[3])())
            {
              v612 = ((float (*)(uint64_t))v930[4])((uint64_t)&v930);
              ((void (*)(uint64_t, float))v849[13])((uint64_t)&v849, v612);
            }
            goto LABEL_744;
          }
          if (((unsigned int (__cdecl *)())v930[3])())
          {
            v598 = ((float (*)(uint64_t))v930[4])((uint64_t)&v930);
            ((void (*)(uint64_t, float))v849[13])((uint64_t)&v849, v598);
          }
          v590.f32[0] = v556 * *(float *)&v933;
          if (v567 < (float)(v556 * *(float *)&v933) && v566 >= v931)
          {
            if (v932)
            {
              v725 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              sub_207CC060C(v725);
              *(float *)&v726 = v581;
              *(float *)&v727 = v567;
              ((void (*)(uint64_t, float, double, double, float))v930[8])((uint64_t)&v930, v564, v726, v727, v556);
            }
            v627 = 1;
            goto LABEL_780;
          }
          if (v568 < HIDWORD(v931) && v935)
          {
            if (HIBYTE(v940))
            {
              v600 = &v936;
              if (*((_QWORD *)&v939 + 1))
                v600 = (int *)v938;
              v601 = v940;
              sub_207DA46E8((uint64_t)&v849, (float *)v954, *v600, v590, v591, v592, v593, v594, v595, v596, v597);
              v602 = 1.0;
              v603 = 1.0;
              if (!v601)
              {
                v602 = *(float *)v954;
                if (*(float *)v954 <= 0.0)
                {
                  v603 = 1.0e20;
                  v602 = 1.0e-10;
                }
                else
                {
                  v603 = 1.0 / (float)(*(float *)v954 * *(float *)v954);
                }
              }
              *(_QWORD *)&v850 = __PAIR64__(LODWORD(v603), LODWORD(v602));
              *((_QWORD *)&v850 + 1) = __PAIR64__(LODWORD(v603), LODWORD(v602));
              BYTE5(v868[1]) = 0;
              LODWORD(v868[1]) = 0;
            }
            else if (*((_QWORD *)&v939 + 1))
            {
              *(_QWORD *)v954 = v938;
              *(_DWORD *)&v954[8] = 0;
              sub_207DA3EEC((uint64_t)&v849, (_DWORD **)v954, v940, v590, v591, v592, v593, v594, v595, v596, v597);
            }
            else
            {
              sub_207DA3E1C((uint64_t)&v849, v936, v940, v590, v591, v592, v593, v594, v595, v596, v597);
            }
            v949 = sub_207DA3FBC((uint64_t)&v849, &v819);
            v613 = HIDWORD(v931);
            if (v568 >= HIDWORD(v931))
              goto LABEL_753;
LABEL_745:
            if (v942)
            {
              (*(void (**)(_BYTE *))(*(_QWORD *)v942 + 48))(v942);
              v613 = HIDWORD(v931);
            }
            goto LABEL_753;
          }
LABEL_744:
          v613 = HIDWORD(v931);
          if (v568 < HIDWORD(v931))
            goto LABEL_745;
LABEL_753:
          v566 = *(_DWORD *)&v804[8];
          if (*(_DWORD *)&v804[8] >= v613)
            goto LABEL_781;
        }
      }
    }
    v542 = 0;
    v543 = (v534 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v543 >= 7)
    {
LABEL_646:
      v544 = (int *)v533;
      if ((unint64_t)((char *)v540 - (char *)v533) >= 0x20)
      {
        v545 = v543 + 1;
        v542 = v545 & 0x7FFFFFFFFFFFFFF8;
        v544 = (int *)v533 + (v545 & 0x7FFFFFFFFFFFFFF8);
        v546 = v540 + 1;
        v547 = v533 + 1;
        v548 = v545 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v549 = *v547;
          *(v546 - 1) = *(v547 - 1);
          *v546 = v549;
          v546 += 2;
          v547 += 2;
          v548 -= 8;
        }
        while (v548);
        if (v545 == v542)
          goto LABEL_654;
      }
      goto LABEL_653;
    }
LABEL_652:
    v544 = (int *)v533;
    do
    {
LABEL_653:
      v550 = *v544++;
      *((_DWORD *)v540 + v542++) = v550;
    }
    while (v544 != (int *)((char *)v533 + v535));
LABEL_654:
    v834 = v542;
    goto LABEL_655;
  }
  if (v932)
  {
    v531 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v531 + *(_QWORD *)(*v531 - 24)));
    v532 = std::locale::use_facet((const std::locale *)v954, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v532->__vftable[2].~facet_0)(v532, 10);
    std::locale::~locale((std::locale *)v954);
    std::ostream::put();
    std::ostream::flush();
  }
  *(_DWORD *)&v804[16] = 0;
  v869 = v513;
  sub_207DA57BC((uint64_t)&v849, v836, &v835);
  sub_207DA5610((uint64_t)&v849, v836, &v835);
  sub_207DA5968((uint64_t)&v849, v842, &v840, &v841);
LABEL_784:
  kdebug_trace();
  v628 = v851[0];
  v629 = v851[1];
  while (v628 != v629)
  {
    v630 = v628[1];
    if (*(_BYTE *)(v630 + 20))
    {
      v631 = *(_QWORD *)(v630 + 24);
      v632 = *(_OWORD *)(v630 + 32);
      v633 = *(_OWORD *)(v630 + 48);
      v634 = *(_OWORD *)(v630 + 80);
      *(_OWORD *)(v631 + 32) = *(_OWORD *)(v630 + 64);
      *(_OWORD *)(v631 + 48) = v634;
      *(_OWORD *)v631 = v632;
      *(_OWORD *)(v631 + 16) = v633;
      if (v631 != v630 + 32)
        sub_207D43AA8((_QWORD *)(v631 + 64), *(char **)(v630 + 96), *(char **)(v630 + 104), (uint64_t)(*(_QWORD *)(v630 + 104) - *(_QWORD *)(v630 + 96)) >> 6);
    }
    v628 += 2;
  }
  *(_OWORD *)v773 = *(_OWORD *)v845;
  v774 = *(int32x4_t *)&v845[16];
  v775 = *(int32x4_t *)&v845[32];
  v776 = *(int32x4_t *)&v845[48];
  sub_207D43AA8(&v777, (char *)v846, *(char **)v847, (uint64_t)(*(_QWORD *)v847 - (_QWORD)v846) >> 6);
  if (*(float *)&v804[24] < *(float *)&v804[20] && *(float *)&v776.i32[2] >= 0.0)
  {
    v640 = *(unsigned int *)&v953[32];
    if (a12 && v736 != v735)
    {
      v641 = 0;
      v642 = *a9;
      v643 = (float32x4_t)vdupq_lane_s32((int32x2_t)v773[0], 1);
      v644 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v773, 2);
      v645 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v773, 3);
      v646 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v774.i8, 1);
      v647 = (float32x4_t)vdupq_laneq_s32(v774, 2);
      v648 = (float32x4_t)vdupq_laneq_s32(v774, 3);
      v649 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v775.i8, 1);
      v650 = (float32x4_t)vdupq_laneq_s32(v775, 2);
      v651 = (float32x4_t)vdupq_laneq_s32(v775, 3);
      v652 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v776.i8, 1);
      v653 = (float32x4_t)vdupq_laneq_s32(v776, 2);
      v636 = (int8x16_t)vdupq_laneq_s32(v776, 3);
      do
      {
        if (v738)
        {
          v654 = (float32x2_t *)(*v737 + (v641 << 6));
          *(float32x2_t *)v637.i8 = *v654;
          v637.i32[2] = v654[1].i32[0];
          *(float32x2_t *)v638.i8 = v654[2];
          v638.i32[2] = v654[3].i32[0];
          *(float32x2_t *)v639.f32 = v654[6];
          v639.i32[2] = v654[7].i32[0];
          v655.i64[0] = vzip1q_s32((int32x4_t)v637, (int32x4_t)v638).u64[0];
          v656 = (int8x16_t)vnegq_f32(v639);
          v14.i32[0] = v654[5].i32[0];
          v657 = (int8x16_t)vtrn2q_s32((int32x4_t)v637, (int32x4_t)v638);
          v657.i32[2] = HIDWORD(*(_QWORD *)&v654[4]);
          v658 = vzip2q_s32((int32x4_t)v637, (int32x4_t)v638);
          v659 = (int8x16_t)v658;
          v659.i32[2] = v14.i32[0];
          *(float32x2_t *)v660.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v655.f32, *(float *)v656.i32), *(float32x2_t *)v657.i8, *(float32x2_t *)v639.f32, 1), *(float32x2_t *)v658.i8, v639, 2);
          v660.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v654[4], *(float32x2_t *)v656.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v654[4], 1), *(float32x2_t *)v639.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v656, v656, 8uLL), *(float32x2_t *)v14.f32).u32[0]);
          v661 = vextq_s8(vextq_s8(v657, v657, 0xCuLL), v659, 8uLL);
          v656.i64[0] = __PAIR64__(v661.u32[0], v657.u32[0]);
          v656.i64[1] = v661.u32[1];
          v14.i8[12] = 0;
          v14.i8[13] = 0;
          v14.i8[14] = 0;
          v14.i8[15] = 0;
          v14.i64[0] = v661.i64[1];
          v14.i32[2] = vdupq_laneq_s32((int32x4_t)v659, 2).u32[0];
          v655.i64[1] = *(_QWORD *)&v654[4];
          v637 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v655, *(float *)v773), v643, (float32x4_t)v656), v644, v14), v645, v660);
          v638 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v655, *(float *)v774.i32), v646, (float32x4_t)v656), v647, v14), v648, v660);
          v662 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v655, *(float *)v775.i32), v649, (float32x4_t)v656), v650, v14), v651, v660);
          v639 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v655, *(float *)v776.i32), v652, (float32x4_t)v656), v653, v14), (float32x4_t)v636, v660);
          v663 = *v732 + 36 * v641;
          v664 = (float32x2_t)vextq_s8(v637, v637, 8uLL).u64[0];
          v665 = (float32x2_t)vextq_s8(v638, v638, 8uLL).u64[0];
          v666 = (float32x2_t)vextq_s8(v662, v662, 8uLL).u64[0];
          v667 = v642;
          v668 = (float32x2_t *)v757[1];
          v669 = v738;
          do
          {
            v670 = *v667++;
            if (v670 <= 1)
            {
              v657.i32[0] = v668[1].i32[0];
              *(float32x2_t *)v671.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v637.i8, COERCE_FLOAT(*v668)), *(float32x2_t *)v638.i8, *v668, 1), *(float32x2_t *)v662.i8, *(float *)v657.i32);
              *(float32x2_t *)&v671.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v664, *v668), v665, *v668, 1), *(float32x2_t *)v657.i8, v666);
              v672 = (int8x16_t)vaddq_f32(v671, v639);
              v657.i32[0] = *(_DWORD *)(v663 + 8);
              v13.i32[0] = *(_DWORD *)(v663 + 20);
              v635.i32[0] = *(_DWORD *)(v663 + 32);
              *(float32x2_t *)v14.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v663, *(float *)v672.i32), *(float32x2_t *)(v663 + 12), *(float32x2_t *)v672.i8, 1), *(float32x2_t *)(v663 + 24), (float32x4_t)v672, 2);
              *(float32x2_t *)v657.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v657.i8, *(float32x2_t *)v672.i8), *(float32x2_t *)v13.i8, *(float32x2_t *)v672.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v672, v672, 8uLL), v635);
              v673 = (float)(v14.f32[0] / *(float *)v657.i32) >= 0.0
                  && (float)(v14.f32[0] / *(float *)v657.i32) < (float)a11;
              if (!v673
                || ((float)(v14.f32[1] / *(float *)v657.i32) >= 0.0
                  ? (v674 = (float)(v14.f32[1] / *(float *)v657.i32) < (float)a10)
                  : (v674 = 0),
                    !v674))
              {
                ++v640;
              }
            }
            v668 = (float32x2_t *)((char *)v668 + 12);
            --v669;
          }
          while (v669);
        }
        ++v641;
        v642 += v738;
      }
      while (v641 != v755);
    }
    if (v733 && (v676 = v640 / v755, v676 < v733))
    {
      v677 = (double)v676 * 0.01 + 0.4;
      v678 = v760 + 1;
      *v760 = v677;
      if ((v734 & 1) != 0)
        goto LABEL_833;
    }
    else
    {
      v678 = v760 + 1;
      *v760 = 1.0 - (float)(*(float *)&v804[24] / (float)(unint64_t)(((char *)v783[1] - (char *)v783[0]) >> 3));
      if ((v734 & 1) != 0)
        goto LABEL_833;
    }
    if (v736 != v735)
    {
      v679 = 0;
      v680 = ((char *)v783[1] - (char *)v783[0]) >> 3;
      if (v680 <= 1)
        v680 = 1;
      v681 = (float32x4_t)vdupq_lane_s32((int32x2_t)v773[0], 1);
      v682 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v773, 2);
      v683 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v773, 3);
      v684 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v774.i8, 1);
      v685 = (float32x4_t)vdupq_laneq_s32(v774, 2);
      v686 = (float32x4_t)vdupq_laneq_s32(v774, 3);
      v687 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v775.i8, 1);
      v688 = (float32x4_t)vdupq_laneq_s32(v775, 2);
      v689 = (float32x4_t)vdupq_laneq_s32(v775, 3);
      v690 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v776.i8, 1);
      v691 = (float32x4_t)vdupq_laneq_s32(v776, 2);
      v692 = (float32x4_t)vdupq_laneq_s32(v776, 3);
      while (v783[1] == v783[0])
      {
LABEL_823:
        if (++v679 == v755)
          goto LABEL_833;
      }
      v693 = *v737 + (v679 << 6);
      v636.i64[0] = *(_QWORD *)v693;
      v636.i32[2] = *(_DWORD *)(v693 + 8);
      v637.i64[0] = *(_QWORD *)(v693 + 16);
      v637.i32[2] = *(_DWORD *)(v693 + 24);
      v638.i32[0] = *(_DWORD *)(v693 + 40);
      v694 = *(float32x2_t *)(v693 + 32);
      v695.i64[0] = vzip1q_s32((int32x4_t)v636, (int32x4_t)v637).u64[0];
      v13.i64[0] = *(_QWORD *)(v693 + 48);
      v13.i32[2] = *(_DWORD *)(v693 + 56);
      v696 = (int8x16_t)vnegq_f32((float32x4_t)v13);
      v695.i64[1] = v694.u32[0];
      v697 = (int8x16_t)vtrn2q_s32((int32x4_t)v636, (int32x4_t)v637);
      v697.i32[2] = v694.i32[1];
      v698 = (int8x16_t)vzip2q_s32((int32x4_t)v636, (int32x4_t)v637);
      *(float32x2_t *)v699.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v695.f32, *(float *)v696.i32), *(float32x2_t *)v697.i8, *(float32x2_t *)v13.i8, 1), *(float32x2_t *)v698.i8, (float32x4_t)v13, 2);
      v698.i32[2] = v638.i32[0];
      v699.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v694, *(float32x2_t *)v696.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v694, 1), *(float32x2_t *)v13.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v696, v696, 8uLL), *(float32x2_t *)v638.i8).u32[0]);
      v13.i8[12] = 0;
      v13.i8[13] = 0;
      v13.i8[14] = 0;
      v13.i8[15] = 0;
      v13.i32[0] = v697.i32[0];
      v700 = vextq_s8(vextq_s8(v697, v697, 0xCuLL), v698, 8uLL);
      v696.i64[0] = v700.i64[1];
      *(uint64_t *)((char *)v13.i64 + 4) = v700.i64[0];
      v696.i64[1] = vdupq_laneq_s32((int32x4_t)v698, 2).u32[0];
      v636 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v695, *(float *)v773), v681, (float32x4_t)v13), v682, (float32x4_t)v696), v683, v699);
      v637 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v695, *(float *)v774.i32), v684, (float32x4_t)v13), v685, (float32x4_t)v696), v686, v699);
      v638 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v695, *(float *)v775.i32), v687, (float32x4_t)v13), v688, (float32x4_t)v696), v689, v699);
      v701 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v695, *(float *)v776.i32), v690, (float32x4_t)v13), v691, (float32x4_t)v696), v692, v699);
      if (v701.f32[2] <= 1.0)
        v702 = 1.0;
      else
        v702 = 2.0;
      v703 = v746 / v702;
      v704 = (float32x2_t)vextq_s8(v636, v636, 8uLL).u64[0];
      v705 = (float32x2_t)vextq_s8(v637, v637, 8uLL).u64[0];
      v706 = (float32x2_t)vextq_s8(v638, v638, 8uLL).u64[0];
      v707 = (uint64_t *)*((_QWORD *)&v787 + 1);
      v708 = (float32x2_t *)v783[0];
      v709 = (_QWORD *)v786;
      v710 = v680;
      while (1)
      {
        v711 = *v707++;
        if (v711 == v679)
        {
          v712 = (float32x2_t *)(v757[1] + 12 * *v709);
          v13.i32[0] = v712[1].i32[0];
          *(float32x2_t *)v713.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v636.i8, COERCE_FLOAT(*v712)), *(float32x2_t *)v637.i8, *v712, 1), *(float32x2_t *)v638.i8, *(float *)v13.i32);
          *(float32x2_t *)&v713.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v704, *v712), v705, *v712, 1), *(float32x2_t *)v13.i8, v706);
          v13 = (int8x16_t)vaddq_f32(v713, v701);
          *(float32x2_t *)v13.i8 = vsub_f32(*v708, vdiv_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, *(float *)v13.i32), (float32x2_t)0x3F80000000000000, *(float32x2_t *)v13.i8, 1), 0, (float32x4_t)v13, 2), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, 0), 0, *(float32x2_t *)v13.i8, 1)),
                                                      0)));
          if ((float)(*(float *)(*v732 + 36 * v679)
                     * sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)v13.i8, 1).f32[0])) > v703)break;
        }
        ++v709;
        ++v708;
        if (!--v710)
          goto LABEL_823;
      }
      *v760 = 0.0;
    }
LABEL_833:
    v714 = v774;
    *(_OWORD *)v678 = *(_OWORD *)v773;
    *((int32x4_t *)v678 + 1) = v714;
    v715 = v776;
    *((int32x4_t *)v678 + 2) = v775;
    *((int32x4_t *)v678 + 3) = v715;
    *((_QWORD *)&v844 + 1) = 0;
    v675 = v843;
    if (v843 == v842)
      goto LABEL_836;
    goto LABEL_834;
  }
  *v760 = 0.0;
  *((_QWORD *)&v844 + 1) = 0;
  v675 = v843;
  if (v843 == v842)
    goto LABEL_836;
LABEL_834:
  if (v675)
    operator delete[](v675);
LABEL_836:
  v839 = 0;
  if (v837 != v836 && v837)
    operator delete[](v837);
  v834 = 0;
  if (v832 != &v819 && v832)
    operator delete[](v832);
  *((_QWORD *)&v818 + 1) = 0;
  if (v817 != v805 && v817)
    operator delete[](v817);
  if ((v804[7] & 0x80000000) != 0)
  {
    operator delete((void *)v803);
    if ((SHIBYTE(v802) & 0x80000000) == 0)
    {
LABEL_847:
      v930 = off_24C074500;
      v509 = __dst;
      if (!__dst)
        goto LABEL_849;
      goto LABEL_848;
    }
  }
  else if ((SHIBYTE(v802) & 0x80000000) == 0)
  {
    goto LABEL_847;
  }
  operator delete(__p[0]);
  v930 = off_24C074500;
  v509 = __dst;
  if (__dst)
    goto LABEL_848;
LABEL_849:
  v716 = v948;
  if (v948 == v947)
  {
    v717 = 4;
    v716 = v947;
  }
  else
  {
    if (!v948)
      goto LABEL_854;
    v717 = 5;
  }
  (*(void (**)(void))(*v716 + 8 * v717))();
LABEL_854:
  v718 = v946;
  if (v946 == v945)
  {
    v719 = 4;
    v718 = v945;
  }
  else
  {
    if (!v946)
      goto LABEL_859;
    v719 = 5;
  }
  (*(void (**)(void))(*v718 + 8 * v719))();
LABEL_859:
  v720 = v944;
  if (v944 == v943)
  {
    v721 = 4;
    v720 = v943;
  }
  else
  {
    if (!v944)
      goto LABEL_864;
    v721 = 5;
  }
  (*(void (**)(void))(*v720 + 8 * v721))();
LABEL_864:
  v722 = v942;
  if (v942 == v941)
  {
    v723 = 4;
    v722 = v941;
  }
  else
  {
    if (!v942)
      goto LABEL_869;
    v723 = 5;
  }
  (*(void (**)(void))(*v722 + 8 * v723))();
LABEL_869:
  *((_QWORD *)&v939 + 1) = 0;
  if (v938 != v937 && v938)
    operator delete[](v938);
  v849 = off_24C074568;
  if (v929[1])
    operator delete[](v929[1]);
  if ((_QWORD)v928)
    operator delete[]((void *)v928);
  sub_207D95B84((uint64_t)&v849);
  if (v846)
  {
    *(_QWORD *)v847 = v846;
    operator delete(v846);
  }
  if (v777)
  {
    v778 = (char *)v777;
    operator delete(v777);
  }
LABEL_880:
  sub_207D80E10((uint64_t)v783);
  return kdebug_trace();
}

void sub_207D7F6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;
  char v71;

  std::locale::~locale((std::locale *)&STACK[0x1130]);
  LOBYTE(STACK[0xB30]) = v71;
  sub_207D953AC((uint64_t)&STACK[0x2E0]);
  sub_207D94300();
  sub_207D7FB84(&STACK[0x9A0]);
  if (__p)
    operator delete(__p);
  sub_207D80E10((uint64_t)&a71);
  sub_207CD822C((uint64_t)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D7FB84(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  sub_207D939DC(a1 + 175);
  a1[11] = off_24C074568;
  v2 = (void *)a1[172];
  if (v2)
    operator delete[](v2);
  v3 = (void *)a1[169];
  if (v3)
    operator delete[](v3);
  sub_207D95B84((uint64_t)(a1 + 11));
  v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207D7FBEC@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, float32x2_t *a5@<X8>, int8x16_t a6@<Q2>, int32x4_t a7@<Q3>, float64x2_t a8@<Q6>)
{
  float64x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float64x2_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int32x4_t v28;
  int32x4_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  float32x2_t v33;
  int32x2_t v34;
  int32x4_t v35;
  float64x2_t v36;
  int32x2_t v37;
  float32x2_t v38;
  int32x4_t v39;
  int32x2_t v40;
  float32x2_t v41;
  int32x2_t v42;
  float64x2_t v43;
  uint64_t result;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float64x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x2_t v55;

  *(float *)a6.i32 = (float)a3;
  *(float *)&a6.i32[1] = (float)a4;
  v11 = (float64x2_t)a6;
  v51 = (float64x2_t)a6;
  v12 = a1[1];
  *(float32x2_t *)v13.f32 = vmul_f32(vadd_f32(*a1, v12), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v14.f32 = vsub_f32(*(float32x2_t *)v13.f32, v12);
  *(float32x2_t *)a6.i8 = vadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.f32);
  *(float32x2_t *)a7.i8 = vsub_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.f32);
  v13.i64[1] = v13.i64[0];
  v14.i64[1] = v14.i64[0];
  v15 = (int32x4_t)vsubq_f32(v13, v14);
  v16 = vaddq_f32(v13, v14);
  v16.i32[0] = v15.i32[0];
  v16.i32[3] = v15.i32[3];
  v54 = v16;
  v55 = *(float32x2_t *)a7.i8;
  v53 = vmul_f32(*(float32x2_t *)&v11.f64[0], *(float32x2_t *)a6.i8);
  sub_207DA5D14((uint64_t)&v53, (float *)&v53 + 1, a2, *(double *)&v53, (float64x2_t)v14, a6, a7, v15, v11, a8);
  *(float32x2_t *)&v17.f64[0] = vmul_f32(*(float32x2_t *)&v51.f64[0], *(float32x2_t *)v54.f32);
  v53 = vdiv_f32(v53, *(float32x2_t *)&v51.f64[0]);
  v54.i64[0] = *(_QWORD *)&v17.f64[0];
  sub_207DA5D14((uint64_t)&v54, &v54.f32[1], a2, *(double *)&v53, v17, (int8x16_t)v51, v18, v19, v20, v21);
  *(float32x2_t *)&v22.f64[0] = vmul_f32(*(float32x2_t *)&v51.f64[0], *(float32x2_t *)&v54.u32[2]);
  *(float32x2_t *)v54.f32 = vdiv_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)&v51.f64[0]);
  v54.i64[1] = *(_QWORD *)&v22.f64[0];
  sub_207DA5D14((uint64_t)&v54.i64[1], &v54.f32[3], a2, *(double *)v54.i64, v22, (int8x16_t)v51, v23, v24, v25, v26);
  *(float32x2_t *)&v27.f64[0] = vmul_f32(*(float32x2_t *)&v51.f64[0], v55);
  *(float32x2_t *)&v54.u32[2] = vdiv_f32(*(float32x2_t *)&v54.u32[2], *(float32x2_t *)&v51.f64[0]);
  v55 = *(float32x2_t *)&v27.f64[0];
  sub_207DA5D14((uint64_t)&v55, (float *)&v55 + 1, a2, *(double *)&v54.i64[1], v27, (int8x16_t)v51, v28, v29, v30, v31);
  v55 = vdiv_f32(v55, *(float32x2_t *)&v51.f64[0]);
  v32.i64[0] = v54.i64[0];
  v33 = vsub_f32(*(float32x2_t *)v54.f32, v53);
  v34 = (int32x2_t)vmla_lane_f32(vmul_f32(v33, v33), (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1), v33, 1);
  *(float32x2_t *)v35.i8 = vsub_f32(v55, *(float32x2_t *)&v54.u32[2]);
  *(int32x2_t *)&v36.f64[0] = vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
  v37 = (int32x2_t)vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), *(float32x2_t *)&v36.f64[0], *(float32x2_t *)v35.i8, 1);
  v38 = vsub_f32(*(float32x2_t *)&v54.u32[2], v53);
  *(int32x2_t *)v39.i8 = vdup_lane_s32((int32x2_t)v38, 1);
  v40 = (int32x2_t)vmla_lane_f32(vmul_f32(v38, v38), *(float32x2_t *)v39.i8, v38, 1);
  v41 = vsub_f32(v55, *(float32x2_t *)v54.f32);
  v42 = (int32x2_t)vmla_lane_f32(vmul_f32(v41, v41), (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1), v41, 1);
  *(float32x2_t *)&v43.f64[0] = a1[1];
  v52 = vmul_f32(*(float32x2_t *)&v51.f64[0], vmul_f32(vadd_f32(*a1, *(float32x2_t *)&v43.f64[0]), (float32x2_t)0x3F0000003F000000));
  result = sub_207DA5D14((uint64_t)&v52, (float *)&v52 + 1, a2, *(double *)&v52, v43, v32, v39, v35, v36, v51);
  v45 = vdiv_f32(v52, *(float32x2_t *)&v51.f64[0]);
  v46 = vsqrt_f32((float32x2_t)vzip1_s32(v34, v40));
  v47 = vsqrt_f32((float32x2_t)vzip1_s32(v37, v42));
  v48 = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v46, v47), (int8x8_t)v47, (int8x8_t)v46), (float32x2_t)0x3F0000003F000000);
  v49 = vsub_f32(v45, v48);
  v50 = vadd_f32(v45, v48);
  *a5 = v49;
  a5[1] = v50;
  if (v49.f32[0] > v50.f32[0])
  {
    a5->i32[0] = v50.i32[0];
    a5[1].i32[0] = v49.i32[0];
  }
  if (v49.f32[1] > v50.f32[1])
  {
    a5->i32[1] = v50.i32[1];
    a5[1].i32[1] = v49.i32[1];
  }
  return result;
}

void sub_207D7FE28(float *a1, float *a2, uint64_t a3, double a4, float64x2_t _Q1)
{
  float v8;
  float v9;
  unsigned int v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  unsigned int v17;
  char v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v26;
  double v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v45;
  float64x2_t v46;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  int v56;
  double v59;
  double v60;
  double v61;
  int v62;
  int v63;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  int v72;
  int v73;
  float64x2_t v76;
  const double *v78;
  float64x2_t v81;
  double v82;
  float64x2_t v83;
  double v84;
  double v85;
  double v86;
  float64x2_t v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v91;
  double v92;
  double v93;
  float64x2_t v94;
  double v95;
  double v96;
  float64x2_t v97;
  double v98;
  double v99;
  float64x2_t v100;
  float v102;
  float v103;
  float64x2_t v104;
  double v105;
  float64x2_t v106;
  double v107;
  float64x2_t v108;
  unint64_t v109;
  float64x2_t v110;
  double v111;
  char v112;
  float64x2_t v113;
  double v114;
  float64x2_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v106 = (float64x2_t)xmmword_208236530;
  v107 = 1.0;
  v8 = *a1;
  v9 = *a2;
  v10 = *(_DWORD *)(a3 + 992);
  if (v10 == -1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_135;
    }
    v10 = *(_DWORD *)(a3 + 992);
    v11 = a3 + 680;
    v12 = v8;
    v13 = v9;
    if (v10 <= 7)
    {
LABEL_3:
      if (!v10)
      {
LABEL_136:
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
        abort();
      }
      goto LABEL_8;
    }
  }
  else
  {
    v11 = a3 + 680;
    v12 = v8;
    v13 = v9;
    if (v10 <= 7)
      goto LABEL_3;
  }
  if (v10 <= 0xD)
  {
LABEL_8:
    v14 = *(double *)(a3 + 88) + *(double *)(a3 + 72) * v12 + *(double *)(a3 + 80) * v13;
    _Q1.f64[0] = *(float64_t *)(a3 + 104);
    v15.f64[0] = _Q1.f64[0] * v13;
    v16 = v15.f64[0] + *(double *)(a3 + 112);
    v106.f64[0] = v14;
    v106.f64[1] = v16;
    goto LABEL_9;
  }
  _Q1.f64[0] = *(double *)(a3 + 88) + *(double *)(a3 + 72) * v12 + *(double *)(a3 + 80) * v13;
  v15.f64[0] = *(double *)(a3 + 104) * v13;
  v16 = v15.f64[0] + *(double *)(a3 + 112);
  v106.f64[0] = _Q1.f64[0];
  v106.f64[1] = v16;
  if (v10 != 14)
  {
    if (v10 != -1)
      goto LABEL_46;
    v105 = v16;
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      v10 = *(_DWORD *)(a3 + 992);
      v16 = v105;
      goto LABEL_9;
    }
LABEL_135:
    abort();
  }
LABEL_9:
  if (v10 <= 7)
  {
    if (v10 <= 3)
    {
      if (v10 > 1)
      {
        if (v10 == 2)
        {
          _D2 = v106.f64[1];
          if (*(_DWORD *)(a3 + 212))
          {
            __asm { FMLA            D1, D2, V0.D[1] }
            v35 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(v106, vaddq_f64(v106, v106))), (float64x2_t)vextq_s8(*(int8x16_t *)(a3 + 192), *(int8x16_t *)(a3 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a3 + 192), *(float64x2_t *)(a3 + 192)), v106.f64[0]), v106, 1)), vmulq_n_f64(v106, *(double *)(a3 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a3 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a3 + 184) * *(double *)&_D1))));
          }
          else
          {
            __asm { FMLA            D1, D2, V0.D[1] }
            v35 = vmulq_n_f64(v106, *(double *)(a3 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(a3 + 176) + *(double *)(a3 + 184) * _D1));
          }
        }
        else
        {
          _V0.D[1] = v106.f64[1];
          _D1 = v106.f64[1];
          __asm { FMLA            D5, D1, V0.D[1] }
          v67 = sqrt(_D5);
          v68 = fabs(v67);
          v69 = 1.0;
          if (v68 <= 1.0)
            v70 = v68;
          else
            v70 = 1.0 / v68;
          if (v70 <= 0.414213562)
          {
            v72 = 1;
            v73 = 2;
            v71 = v70;
          }
          else
          {
            v71 = (v68 + -1.0) / (v68 + 1.0);
            if (v68 <= 1.0)
              v71 = -v71;
            v72 = -1;
            v73 = 1;
          }
          if (_D5 >= 0.00000001)
          {
            if (v68 > 1.0)
              v72 = -v72;
            else
              v73 = v70 > 0.414213562;
            if (v67 < 0.0)
              v73 = -v73;
            v97 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v71 * v71), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v71 * v71), (float64x2_t)xmmword_208233A20), v71 * v71 * (v71 * v71))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v71 * v71), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v71 * v71), (float64x2_t)xmmword_208233A30), v71 * v71 * (v71 * v71))), v71 * v71 * (v71 * v71) * (v71 * v71 * (v71 * v71))));
            v98 = v71 + v71 * vdivq_f64(v97, (float64x2_t)vdupq_laneq_s64((int64x2_t)v97, 1)).f64[0];
            if (v67 < 0.0)
              v72 = -v72;
            v99 = (double)v73 * 3.061617e-17 + (double)v73 * 0.785398163 + v98 * (double)v72;
            v100 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), v99 * v99)), v99 * v99);
            v69 = 1.0 / v67 * (v99 + v99 * (v100.f64[0] + vmuld_lane_f64(v99 * v99 * (v99 * v99), v100, 1)));
          }
          v35 = vmulq_n_f64(v106, v69);
        }
        goto LABEL_128;
      }
      if (!v10)
        goto LABEL_136;
      v115 = v106;
      v17 = *(_DWORD *)(a3 + 992);
      if (v17 == -1)
        goto LABEL_14;
LABEL_81:
      if (v17 > 7)
        goto LABEL_16;
LABEL_82:
      if (v17 > 3)
      {
        _ZF = v17 == 5;
        if (v17 <= 5)
        {
LABEL_87:
          v82 = *(double *)a3;
          v83.f64[0] = v115.f64[0];
          if (_ZF)
          {
            v84 = v82 * v115.f64[0];
            v85 = v115.f64[1];
LABEL_115:
            v15.f64[0] = *(double *)(a3 + 16) + v84 + *(double *)(a3 + 8) * v85;
            v95 = *(double *)(a3 + 40);
            v96 = v85 * *(double *)(a3 + 32);
LABEL_129:
            _Q1.f64[0] = v96 + v95;
            goto LABEL_130;
          }
          v85 = v115.f64[1];
LABEL_114:
          v84 = v82 * v83.f64[0];
          goto LABEL_115;
        }
        goto LABEL_90;
      }
      if (v17 <= 1)
      {
        if (!v17)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
          abort();
        }
LABEL_90:
        v15.f64[0] = *(double *)(a3 + 16) + *(double *)a3 * v115.f64[0] + *(double *)(a3 + 8) * v115.f64[1];
        _Q1.f64[0] = v115.f64[1] * *(double *)(a3 + 32) + *(double *)(a3 + 40);
        goto LABEL_130;
      }
      v35 = v115;
LABEL_128:
      v15.f64[0] = *(double *)(a3 + 16) + vaddvq_f64(vmulq_f64(*(float64x2_t *)a3, v35));
      v95 = *(double *)(a3 + 40);
      v96 = vmuld_lane_f64(*(double *)(a3 + 32), v35, 1);
      goto LABEL_129;
    }
    if (v10 <= 5)
    {
      if (v10 == 5)
      {
        v20 = v106.f64[0] * v106.f64[0] + v16 * v16;
        v21 = 1.0;
        if (v20 >= 0.00000001)
        {
          v22 = sqrt(v20);
          if (v22 <= 1.0)
          {
            v24 = v22 * 0.785398163 - v22 * (v22 + -1.0) * (v22 * 0.0663008339 + 0.244711287);
          }
          else
          {
            v23 = fabs(1.0 / v22);
            v24 = 1.0 / v22 * (v23 + -1.0) * (v23 * 0.0663008339 + 0.244711287) + 1.0 / v22 * -0.785398163 + 1.57079633;
          }
          v104 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), v24 * v24)), v24 * v24);
          v21 = (v24 + v24 * (v104.f64[0] + vmuld_lane_f64(v24 * v24 * (v24 * v24), v104, 1))) / v22;
        }
        v115.f64[0] = v106.f64[0] * v21;
        v115.f64[1] = v16 * v21;
        v17 = *(_DWORD *)(a3 + 992);
        if (v17 != -1)
          goto LABEL_81;
LABEL_14:
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v17 = *(_DWORD *)(a3 + 992);
        if (v17 > 7)
        {
LABEL_16:
          if (v17 <= 0xB)
          {
            _ZF = v17 == 9;
            if (v17 <= 9)
              goto LABEL_87;
          }
          goto LABEL_90;
        }
        goto LABEL_82;
      }
      _Q0 = v106;
      _D1 = v106.f64[1];
      __asm { FMLA            D5, D1, V0.D[1] }
      v50 = sqrt(_D5);
      v59 = fabs(v50);
      v52 = 1.0;
      if (v59 <= 1.0)
        v60 = v59;
      else
        v60 = 1.0 / v59;
      if (v60 <= 0.414213562)
      {
        v62 = 1;
        v63 = 2;
        v61 = v60;
      }
      else
      {
        v61 = (v59 + -1.0) / (v59 + 1.0);
        if (v59 <= 1.0)
          v61 = -v61;
        v62 = -1;
        v63 = 1;
      }
      if (_D5 < 0.00000001)
      {
LABEL_113:
        v83 = vmulq_n_f64(_Q0, v52);
        v82 = *(double *)a3;
        v85 = v83.f64[1];
        goto LABEL_114;
      }
      v86 = 1.0;
      if (v59 > 1.0)
        v62 = -v62;
      else
        v63 = v60 > 0.414213562;
      if (v50 < 0.0)
        v63 = -v63;
      v91 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v61 * v61), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v61 * v61), (float64x2_t)xmmword_208233A20), v61 * v61 * (v61 * v61))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v61 * v61), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v61 * v61), (float64x2_t)xmmword_208233A30), v61 * v61 * (v61 * v61))), v61 * v61 * (v61 * v61) * (v61 * v61 * (v61 * v61))));
      v92 = v61 + v61 * vdivq_f64(v91, (float64x2_t)vdupq_laneq_s64((int64x2_t)v91, 1)).f64[0];
      if (v50 < 0.0)
        v62 = -v62;
      v93 = (double)v63 * 3.061617e-17 + (double)v63 * 0.785398163 + v92 * (double)v62;
      v94 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a3 + 168), *(int64x2_t *)(a3 + 184)), v93 * v93)), v93 * v93);
      v90 = v93 + v93 * (v94.f64[0] + vmuld_lane_f64(v93 * v93 * (v93 * v93), v94, 1));
LABEL_112:
      v52 = v86 / v50 * v90;
      goto LABEL_113;
    }
    if (v10 == 6)
    {
      v36.f64[0] = v106.f64[0];
      v36.f64[1] = v16;
      v37 = vaddq_f64(v36, *(float64x2_t *)(a3 + 192));
      v38 = sqrt(vaddvq_f64(vmulq_f64(v37, v37)));
      v115 = vaddq_f64(*(float64x2_t *)(a3 + 208), vmulq_n_f64(v37, v38 * (v38 * (*(double *)(a3 + 168) + v38 * (*(double *)(a3 + 176) + *(double *)(a3 + 184) * v38)))+ 1.0));
      v17 = *(_DWORD *)(a3 + 992);
      if (v17 != -1)
        goto LABEL_81;
      goto LABEL_14;
    }
    v19 = sub_2081155AC(a3, &v115, &v106);
    goto LABEL_79;
  }
  if (v10 <= 0xB)
  {
    if (v10 <= 9)
    {
      if (v10 != 9)
      {
        _Q0 = v106;
        _D1 = v106.f64[1];
        __asm { FMLA            D5, D1, V0.D[1] }
        v50 = sqrt(_D5);
        v51 = fabs(v50);
        v52 = 1.0;
        if (v51 <= 1.0)
          v53 = v51;
        else
          v53 = 1.0 / v51;
        if (v53 <= 0.414213562)
        {
          v55 = 1;
          v56 = 2;
          v54 = v53;
        }
        else
        {
          v54 = (v51 + -1.0) / (v51 + 1.0);
          if (v51 <= 1.0)
            v54 = -v54;
          v55 = -1;
          v56 = 1;
        }
        if (_D5 < 0.00000001)
          goto LABEL_113;
        v86 = 1.0;
        if (v51 > 1.0)
          v55 = -v55;
        else
          v56 = v53 > 0.414213562;
        if (v50 < 0.0)
          v56 = -v56;
        v87 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339C0, v54 * v54), (float64x2_t)xmmword_2082339F0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A10, v54 * v54), (float64x2_t)xmmword_208233A20), v54 * v54 * (v54 * v54))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2082339D0, v54 * v54), (float64x2_t)xmmword_2082339E0), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_208233A00, v54 * v54), (float64x2_t)xmmword_208233A30), v54 * v54 * (v54 * v54))), v54 * v54 * (v54 * v54) * (v54 * v54 * (v54 * v54))));
        v88 = v54 + v54 * vdivq_f64(v87, (float64x2_t)vdupq_laneq_s64((int64x2_t)v87, 1)).f64[0];
        if (v50 < 0.0)
          v55 = -v55;
        v89 = (double)v56 * 3.061617e-17 + (double)v56 * 0.785398163 + v88 * (double)v55;
        v90 = v89
            * (v89
             * v89
             * (*(double *)(a3 + 168)
              + v89
              * v89
              * (*(double *)(a3 + 176)
               + v89
               * v89
               * (*(double *)(a3 + 184)
                + v89
                * v89
                * (*(double *)(a3 + 192)
                 + v89
                 * v89
                 * (*(double *)(a3 + 200) + v89 * v89 * (*(double *)(a3 + 208) + v89 * v89 * *(double *)(a3 + 216)))))))
             + 1.0);
        goto LABEL_112;
      }
      v19 = sub_208116140(a3, &v115, &v106);
      goto LABEL_79;
    }
    if (v10 == 10)
    {
      v19 = sub_208111528(&v115, (uint64_t)&v106, (double *)(a3 + 168), (*(double *)a3 + *(double *)(a3 + 32)) * 0.5);
      goto LABEL_79;
    }
    _D2 = *(_QWORD *)(v11 + 40);
    _V7.D[1] = v106.f64[1];
    v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v11, v106.f64[0]), *(float64x2_t *)(v11 + 24), v106, 1), *(float64x2_t *)(v11 + 48), v107);
    __asm { FMLA            D0, D2, V7.D[1] }
    v114 = _D0 + *(double *)(v11 + 64) * v107;
    v113 = v76;
    sub_20810F6CC(*(_QWORD *)(a3 + 664), (uint64_t)&v113, 30, 0, 0, (uint64_t)&v110, 0.00000001, v76);
    if (!v112)
      goto LABEL_130;
    v78 = (const double *)v11;
    *(float64x2x3_t *)_Q1.f64 = vld3q_f64(v78);
    v78 += 6;
    _Q5 = *(_OWORD *)v78;
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, v110.f64[0]), _Q2, v110, 1), v81, v111);
    _Q2.f64[0] = v110.f64[1];
    __asm { FMLA            D1, D2, V5.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + *(double *)(v11 + 64) * v111;
    v108 = v15;
    v109 = *(_QWORD *)&_Q1.f64[0];
    if (_Q1.f64[0] < 0.0)
      goto LABEL_130;
    v108 = vsubq_f64(v15, vmulq_n_f64(*(float64x2_t *)(a3 + 752), _Q1.f64[0]));
    if ((sub_208111528(&v115, (uint64_t)&v108, (double *)(a3 + 168), (*(double *)a3 + *(double *)(a3 + 32)) * 0.5) & 1) == 0)
      goto LABEL_130;
    v46 = *(float64x2_t *)(a3 + 752);
LABEL_75:
    v115 = vaddq_f64(v46, v115);
    v17 = *(_DWORD *)(a3 + 992);
    if (v17 != -1)
      goto LABEL_81;
    goto LABEL_14;
  }
  if (v10 <= 0xD)
  {
    if (v10 == 13)
    {
      _V0.D[1] = v106.f64[1];
      v26 = (*(double *)a3 + *(double *)(a3 + 32)) * 0.5;
      _D3 = v106.f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      v32 = v26 * (_D2 * v26);
      v115 = vdivq_f64(v106, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v32* (*(double *)(a3 + 168)+ v26 * *(double *)(a3 + 224)+ v32* (*(double *)(a3 + 176)+ v26 * *(double *)(a3 + 232)+ v32* (*(double *)(a3 + 184)+ v26 * *(double *)(a3 + 240)+ v32* (*(double *)(a3 + 192)+ v26 * *(double *)(a3 + 248)+ v32* (*(double *)(a3 + 200)+ v26 * *(double *)(a3 + 256)+ v32
                                   * (*(double *)(a3 + 208)
                                    + v26 * *(double *)(a3 + 264)
                                    + v32 * (*(double *)(a3 + 216) + *(double *)(a3 + 272) * v26 + v32 * 0.0)))))))
                              / 100.0
                              + 1.0),
                              0));
      v17 = *(_DWORD *)(a3 + 992);
      if (v17 != -1)
        goto LABEL_81;
      goto LABEL_14;
    }
    goto LABEL_130;
  }
  if (v10 != 14)
  {
LABEL_46:
    v40 = *(float64x2_t *)(v11 + 224);
    v39 = v11 + 224;
    _D2 = *(_QWORD *)(v39 + 40);
    _V7.D[1] = v106.f64[1];
    __asm { FMLA            D1, D2, V7.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + *(double *)(v39 + 64) * v107;
    v113 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v106.f64[0]), *(float64x2_t *)(v39 + 24), v106, 1), *(float64x2_t *)(v39 + 48), v107);
    v114 = _Q1.f64[0];
    sub_20810F6CC(*(_QWORD *)(a3 + 888), (uint64_t)&v113, 30, 0, 0, (uint64_t)&v110, 0.00000001, _Q1);
    if (!v112)
      goto LABEL_130;
    *(float64x2x3_t *)_Q1.f64 = vld3q_f64((const double *)v39);
    _Q5 = *(_OWORD *)(v39 + 48);
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q1, v110.f64[0]), _Q2, v110, 1), v45, v111);
    _Q2.f64[0] = v110.f64[1];
    __asm { FMLA            D1, D2, V5.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + *(double *)(v39 + 64) * v111;
    v109 = *(_QWORD *)&_Q1.f64[0];
    v108 = v15;
    if (_Q1.f64[0] < 0.0)
      goto LABEL_130;
    v108 = vsubq_f64(v15, vmulq_n_f64(*(float64x2_t *)(a3 + 976), _Q1.f64[0]));
    if ((sub_208111A60(&v115, (uint64_t)&v108, (double *)(a3 + 168), (*(double *)a3 + *(double *)(a3 + 32)) * 0.5) & 1) == 0)
      goto LABEL_130;
    v46 = *(float64x2_t *)(a3 + 976);
    goto LABEL_75;
  }
  v19 = sub_208111A60(&v115, (uint64_t)&v106, (double *)(a3 + 168), (*(double *)a3 + *(double *)(a3 + 32)) * 0.5);
LABEL_79:
  if ((v19 & 1) != 0)
  {
    v17 = *(_DWORD *)(a3 + 992);
    if (v17 != -1)
      goto LABEL_81;
    goto LABEL_14;
  }
LABEL_130:
  v102 = v15.f64[0];
  *a1 = v102;
  v103 = _Q1.f64[0];
  *a2 = v103;
}

void sub_207D80CAC(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;

  v2 = a1[1];
  v3 = a1[2];
  if (v3 == v2)
  {
    v4 = *a1;
    v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA420C();
    if (0x5555555555555556 * ((v3 - *a1) >> 3) > v6)
      v6 = 0x5555555555555556 * ((v3 - *a1) >> 3);
    if (v5 >= 0x555555555555555)
      v7 = 0xAAAAAAAAAAAAAAALL;
    else
      v7 = v6;
    if (v7)
    {
      if (v7 > 0xAAAAAAAAAAAAAAALL)
        sub_207CA3AB8();
      v8 = (char *)operator new(24 * v7);
    }
    else
    {
      v8 = 0;
    }
    v9 = &v8[24 * v5];
    v10 = &v8[24 * v7];
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    v11 = v9 + 24;
    if (v3 == v4)
    {
      *a1 = v9;
      a1[1] = v11;
      a1[2] = v10;
    }
    else
    {
      do
      {
        v12 = v9;
        *((_QWORD *)v9 - 2) = 0;
        *((_QWORD *)v9 - 1) = 0;
        v13 = *(_OWORD *)(v3 - 24);
        v3 -= 24;
        *(_OWORD *)(v9 - 24) = v13;
        v9 -= 24;
        *((_QWORD *)v12 - 1) = *((_QWORD *)v3 + 2);
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v3 + 1) = 0;
        *((_QWORD *)v3 + 2) = 0;
      }
      while (v3 != v4);
      v3 = *a1;
      v14 = a1[1];
      *a1 = v9;
      a1[1] = v11;
      a1[2] = v10;
      if (v14 != v3)
      {
        v15 = v14;
        do
        {
          v17 = (void *)*((_QWORD *)v15 - 3);
          v15 -= 24;
          v16 = v17;
          if (v17)
          {
            *((_QWORD *)v14 - 2) = v16;
            operator delete(v16);
          }
          v14 = v15;
        }
        while (v15 != v3);
      }
    }
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    a1[1] = v2 + 24;
  }
}

uint64_t sub_207D80E10(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 120);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 128);
    v5 = *(void **)(a1 + 120);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 128);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v5);
  }
  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 72);
  if (v10)
  {
    *(_QWORD *)(a1 + 80) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 48);
  if (v11)
  {
    *(_QWORD *)(a1 + 56) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 24);
  if (v12)
    operator delete(v12);
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v13;
    operator delete(v13);
  }
  return a1;
}

char *sub_207D80EE0(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  __int128 v29;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v5];
  v13 = &v11[24 * v10];
  *((_QWORD *)v12 + 1) = 0;
  v14 = v12 + 8;
  *((_QWORD *)&v29 + 1) = v13;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  v15 = a3 - a2;
  if (a3 != a2)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA420C();
    v17 = (char *)operator new(v15);
    v18 = 0;
    *(_QWORD *)v12 = v17;
    *v14 = v17;
    *((_QWORD *)v12 + 2) = &v17[24 * v16];
    do
    {
      v19 = a2 + v18;
      v20 = &v17[v18];
      *(_QWORD *)v20 = *(_QWORD *)(a2 + v18);
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(a2 + v18 + 8);
      v18 += 24;
    }
    while (v19 + 24 != a3);
    *v14 = &v17[v18];
  }
  v21 = v12 + 24;
  *(_QWORD *)&v29 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v21;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v22 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v23 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - 24) = v23;
      v12 -= 24;
      *((_QWORD *)v22 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v24 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v29;
    v21 = (char *)v29;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v24 - 2) = v26;
          operator delete(v26);
        }
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v21;
}

void sub_207D810EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_207D22788((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *sub_207D81110(__int128 *a1, __int128 *a2, uint64_t a3, char **a4)
{
  char **v8;
  char *v9;
  char *v15;
  char *v16;
  char *v17;
  void (***v18)();
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  unsigned int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  _OWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  unint64_t v55;
  char *v56;
  uint64_t (*v57)(_QWORD);
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t (*v65)(_QWORD);
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  double *v73;
  const double *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  size_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  __int128 *v103;
  _OWORD *v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  _OWORD *v117;
  char *v118;
  char *v119;
  char *v120;
  __int128 v121;
  void *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  unsigned int *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  _OWORD *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  unsigned int v143;
  void **v144;
  uint64_t v145;
  size_t v146;
  void *v147;
  unsigned int v148;
  __int128 v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  int v175;
  __int128 v176;
  _BYTE *v177;
  void *__src;
  void *__srca;
  void (**v180)();
  uint64_t v181;
  int v182;
  uint64_t v183;
  _BYTE *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  int v190;
  void *__p;
  __int128 v192;
  int v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  int v199;
  _OWORD *v200;
  _OWORD *v201;
  _OWORD *v202;
  void *v203;
  uint64_t v204;
  _BYTE v205[24];
  _BYTE *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _BYTE v211[24];
  _BYTE *v212;
  int v213;
  void *v214;
  uint64_t v215;
  unsigned int v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  int v220;
  _BYTE v221[12];
  _BYTE *v222;
  _OWORD v223[4];
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  _BYTE v230[64];
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  __int128 v235;
  __int16 v236;
  _BYTE v237[24];
  _BYTE *v238;
  _BYTE v239[24];
  _BYTE *v240;
  _BYTE v241[24];
  _BYTE *v242;
  _BYTE v243[24];
  _BYTE *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[24];
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  int v253;
  void *v254;
  __int128 v255;
  int v256;
  void *v257;
  __int128 v258;
  __int16 v259;
  _BYTE v260[24];
  _BYTE *v261;
  _BYTE v262[24];
  _BYTE *v263;
  _BYTE v264[24];
  _BYTE *v265;
  _BYTE v266[24];
  _BYTE *v267;
  uint64_t v268;
  float64x2x2_t v269;

  v268 = *MEMORY[0x24BDAC8D0];
  *(__int128 *)((char *)a1 + 20) = 0u;
  *(__int128 *)((char *)a1 + 36) = 0u;
  *(_QWORD *)((char *)a1 + 52) = 0;
  *(__int128 *)((char *)a1 + 4) = 0u;
  *(_DWORD *)a1 = 1065353216;
  *((_DWORD *)a1 + 5) = 1065353216;
  *((_DWORD *)a1 + 10) = 1065353216;
  *((_DWORD *)a1 + 15) = 1065353216;
  *((_QWORD *)a1 + 10) = 0;
  v8 = (char **)(a1 + 5);
  *((_QWORD *)a1 + 11) = 0;
  *((_QWORD *)a1 + 12) = 0;
  v9 = (char *)operator new(0x40uLL);
  *v8 = v9;
  *(_DWORD *)v9 = 1065353216;
  *(_QWORD *)(v9 + 12) = 0;
  *(_QWORD *)(v9 + 4) = 0;
  *((_DWORD *)v9 + 5) = 1065353216;
  *((_QWORD *)v9 + 3) = 0;
  *((_QWORD *)v9 + 4) = 0;
  *((_DWORD *)v9 + 10) = 1065353216;
  *(_QWORD *)(v9 + 52) = 0;
  *(_QWORD *)(v9 + 44) = 0;
  *((_DWORD *)v9 + 15) = 1065353216;
  *((_QWORD *)a1 + 11) = v9 + 64;
  *((_QWORD *)a1 + 12) = v9 + 64;
  *((_QWORD *)a1 + 14) = &unk_24C0741F8;
  __asm { FMOV            V0.2S, #1.0 }
  a1[8] = 0u;
  *((_QWORD *)a1 + 15) = _D0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  *((_QWORD *)a1 + 30) = 0;
  *((_QWORD *)a1 + 32) = 0;
  *((_QWORD *)a1 + 33) = 0;
  *((_DWORD *)a1 + 68) = 16842753;
  *(__int128 *)((char *)a1 + 280) = 0u;
  *(__int128 *)((char *)a1 + 296) = 0u;
  *(__int128 *)((char *)a1 + 312) = 0u;
  *(__int128 *)((char *)a1 + 328) = 0u;
  *((_QWORD *)a1 + 43) = 0;
  v15 = (char *)operator new(0x100uLL);
  *((_QWORD *)a1 + 35) = v15;
  *((_QWORD *)a1 + 36) = v15;
  *((_QWORD *)a1 + 37) = v15 + 256;
  v16 = (char *)operator new(0x100uLL);
  *((_QWORD *)a1 + 38) = v16;
  *((_QWORD *)a1 + 39) = v16;
  *((_QWORD *)a1 + 40) = v16 + 256;
  v17 = (char *)operator new(0x100uLL);
  *((_QWORD *)a1 + 41) = v17;
  *((_QWORD *)a1 + 42) = v17;
  *((_QWORD *)a1 + 43) = v17 + 256;
  *((_QWORD *)a1 + 44) = 0;
  *((_QWORD *)a1 + 45) = 0;
  *((_QWORD *)a1 + 46) = 0;
  *(_QWORD *)((char *)a1 + 374) = 0;
  *((_QWORD *)a1 + 54) = 0;
  *(__int128 *)((char *)a1 + 396) = 0u;
  *(__int128 *)((char *)a1 + 412) = 0u;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[30] = 0u;
  a1[31] = 0u;
  a1[32] = 0u;
  a1[33] = 0u;
  *((_QWORD *)a1 + 68) = 0;
  *((_BYTE *)a1 + 392) = 0;
  *((_QWORD *)a1 + 48) = 0;
  *((_QWORD *)a1 + 55) = off_24C074268;
  *((_QWORD *)a1 + 69) = (char *)a1 + 440;
  *((_QWORD *)a1 + 72) = 0;
  *((_QWORD *)a1 + 70) = 0;
  *((_QWORD *)a1 + 71) = 0;
  *((_QWORD *)a1 + 73) = a1 + 8;
  *((_QWORD *)a1 + 74) = (char *)a1 + 408;
  *((_QWORD *)a1 + 77) = 0;
  *((_QWORD *)a1 + 75) = 0;
  *((_QWORD *)a1 + 76) = 0;
  *(__int128 *)((char *)a1 + 632) = 0u;
  *(__int128 *)((char *)a1 + 648) = 0u;
  *(__int128 *)((char *)a1 + 664) = 0u;
  *((_QWORD *)a1 + 92) = 0;
  *((_DWORD *)a1 + 182) = 0;
  *((_QWORD *)a1 + 89) = 0;
  *((_QWORD *)a1 + 90) = 0;
  *((_DWORD *)a1 + 176) = 0;
  *((_QWORD *)a1 + 86) = 0;
  *((_QWORD *)a1 + 87) = 0;
  *((_QWORD *)a1 + 106) = 0;
  a1[51] = 0u;
  a1[52] = 0u;
  a1[49] = 0u;
  a1[50] = 0u;
  a1[47] = 0u;
  a1[48] = 0u;
  *((_QWORD *)a1 + 93) = off_24C074268;
  *((_QWORD *)a1 + 107) = (char *)a1 + 744;
  *((_QWORD *)a1 + 154) = 0;
  *((_QWORD *)a1 + 152) = 0;
  *((_QWORD *)a1 + 153) = 0;
  *((_DWORD *)a1 + 302) = 0;
  *(__int128 *)((char *)a1 + 1176) = 0u;
  *(__int128 *)((char *)a1 + 1192) = 0u;
  *(__int128 *)((char *)a1 + 1144) = 0u;
  *(__int128 *)((char *)a1 + 1160) = 0u;
  *(__int128 *)((char *)a1 + 1112) = 0u;
  *(__int128 *)((char *)a1 + 1128) = 0u;
  *(__int128 *)((char *)a1 + 1096) = 0u;
  *((_QWORD *)a1 + 109) = 0;
  *((_QWORD *)a1 + 108) = 0;
  *((_WORD *)a1 + 444) = 0;
  *((_QWORD *)a1 + 110) = 0;
  *(__int128 *)((char *)a1 + 1076) = 0u;
  *(__int128 *)((char *)a1 + 1048) = 0u;
  *(__int128 *)((char *)a1 + 1064) = 0u;
  *(__int128 *)((char *)a1 + 1016) = 0u;
  *(__int128 *)((char *)a1 + 1032) = 0u;
  *(__int128 *)((char *)a1 + 984) = 0u;
  *(__int128 *)((char *)a1 + 1000) = 0u;
  *(__int128 *)((char *)a1 + 952) = 0u;
  *(__int128 *)((char *)a1 + 968) = 0u;
  *(__int128 *)((char *)a1 + 920) = 0u;
  *(__int128 *)((char *)a1 + 936) = 0u;
  *((_QWORD *)a1 + 85) = off_24C0743C8;
  *((_QWORD *)a1 + 155) = (char *)a1 + 584;
  *((_QWORD *)a1 + 166) = 0;
  a1[82] = 0u;
  a1[81] = 0u;
  *(__int128 *)((char *)a1 + 1276) = 0u;
  a1[79] = 0u;
  a1[78] = 0u;
  *((_QWORD *)a1 + 14) = off_24C073E98;
  *((_QWORD *)a1 + 167) = 2;
  *(__int128 *)((char *)a1 + 1372) = 0u;
  a1[85] = 0u;
  a1[84] = 0u;
  v18 = (void (***)())(a1 + 87);
  *((_QWORD *)a1 + 175) = 0xA00000001;
  *((_BYTE *)a1 + 1408) = 0;
  *((_DWORD *)a1 + 353) = 981668463;
  *((int32x2_t *)a1 + 177) = vdup_n_s32(0x358637BDu);
  *((_BYTE *)a1 + 1424) = 0;
  *((_DWORD *)a1 + 357) = 1069401558;
  *((_QWORD *)a1 + 211) = (char *)a1 + 1432;
  a1[106] = xmmword_2082352F0;
  *((_WORD *)a1 + 856) = 0;
  *((_QWORD *)a1 + 218) = 0;
  *((_QWORD *)a1 + 222) = 0;
  *((_QWORD *)a1 + 226) = 0;
  *((_QWORD *)a1 + 230) = 0;
  *((_DWORD *)a1 + 462) = -1082130432;
  *((_QWORD *)a1 + 233) = 0;
  *((_QWORD *)a1 + 232) = 0;
  *((_DWORD *)a1 + 468) = 0;
  *((_QWORD *)a1 + 174) = off_24C074470;
  *((_QWORD *)a1 + 235) = 0x3A83126F358637BDLL;
  *((_BYTE *)a1 + 1888) = 1;
  *(__int128 *)((char *)a1 + 1892) = xmmword_208235330;
  *(_QWORD *)((char *)a1 + 1908) = 0x40000000;
  v19 = *a2;
  v20 = a2[1];
  v21 = a2[3];
  a1[2] = a2[2];
  a1[3] = v21;
  *a1 = v19;
  a1[1] = v20;
  *((_DWORD *)a1 + 26) = 0;
  v22 = *(_DWORD *)(a3 + 8);
  *((_QWORD *)a1 + 8) = *(_QWORD *)a3;
  *((_DWORD *)a1 + 18) = v22;
  if (v8 != a4)
    sub_207D43AA8(v8, *a4, a4[1], (a4[1] - *a4) >> 6);
  LODWORD(v247) = 0;
  BYTE4(v247) = 1;
  *(_QWORD *)v248 = a1;
  v23 = (char *)operator new(0x40uLL);
  *((_QWORD *)&v255 + 1) = v23 + 64;
  *(_DWORD *)v23 = 1065353216;
  *(_QWORD *)(v23 + 12) = 0;
  *(_QWORD *)(v23 + 4) = 0;
  *((_DWORD *)v23 + 5) = 1065353216;
  *((_QWORD *)v23 + 3) = 0;
  *((_QWORD *)v23 + 4) = 0;
  *((_DWORD *)v23 + 10) = 1065353216;
  *(_QWORD *)(v23 + 52) = 0;
  *(_QWORD *)(v23 + 44) = 0;
  *((_DWORD *)v23 + 15) = 1065353216;
  v254 = v23;
  *(_QWORD *)&v255 = v23 + 64;
  v24 = a1[1];
  *(_OWORD *)&v248[8] = *a1;
  v249 = v24;
  v25 = a1[3];
  v250 = a1[2];
  v251 = v25;
  v253 = *((_DWORD *)a1 + 18);
  v252 = *((_QWORD *)a1 + 8);
  if (&v248[8] == (_BYTE *)a1)
  {
    v27 = *((_DWORD *)a1 + 26);
    v256 = v27;
    v26 = a1;
  }
  else
  {
    sub_207D43AA8(&v254, *((char **)a1 + 10), *((char **)a1 + 11), (uint64_t)(*((_QWORD *)a1 + 11) - *((_QWORD *)a1 + 10)) >> 6);
    v26 = *(__int128 **)v248;
    v27 = *((_DWORD *)a1 + 26);
    v256 = v27;
    if (!*(_QWORD *)v248)
      goto LABEL_133;
  }
  v28 = *v26;
  v29 = v26[1];
  v30 = v26[3];
  v250 = v26[2];
  v251 = v30;
  *(_OWORD *)&v248[8] = v28;
  v249 = v29;
  v31 = *((_DWORD *)v26 + 18);
  v252 = *((_QWORD *)v26 + 8);
  v253 = v31;
  if (&v248[8] == (_BYTE *)v26)
  {
    v256 = v27;
    v177 = &v248[8];
    v32 = v247;
    v33 = (char *)*((_QWORD *)a1 + 16);
    v34 = (char *)*((_QWORD *)a1 + 17);
    v35 = v34 - v33;
    if (v34 != v33)
      goto LABEL_10;
LABEL_18:
    v33 = v34;
    goto LABEL_20;
  }
  sub_207D43AA8(&v254, *((char **)v26 + 10), *((char **)v26 + 11), (uint64_t)(*((_QWORD *)v26 + 11) - *((_QWORD *)v26 + 10)) >> 6);
  v27 = *((_DWORD *)v26 + 26);
  v256 = v27;
  v177 = *(_BYTE **)v248;
  if (!*(_QWORD *)v248)
    goto LABEL_133;
  v32 = v247;
  v33 = (char *)*((_QWORD *)a1 + 16);
  v34 = (char *)*((_QWORD *)a1 + 17);
  v35 = v34 - v33;
  if (v34 == v33)
    goto LABEL_18;
LABEL_10:
  v36 = v35 >> 4;
  do
  {
    v37 = v36 >> 1;
    v38 = &v33[16 * (v36 >> 1)];
    v40 = *(_DWORD *)v38;
    v39 = v38 + 16;
    v36 += ~(v36 >> 1);
    if (v40 < v32)
      v33 = v39;
    else
      v36 = v37;
  }
  while (v36);
  if (v34 == v33 || v32 != *(_DWORD *)v33)
  {
LABEL_20:
    v175 = BYTE4(v247);
    LODWORD(v219) = -1;
    BYTE4(v219) = 1;
    v220 = 0;
    v41 = v247;
    *(_QWORD *)&v221[4] = v247;
    v42 = v177;
    v222 = v177;
    v223[0] = *(_OWORD *)&v248[8];
    v223[1] = v249;
    v223[2] = v250;
    v223[3] = v251;
    v224 = v252;
    v225 = v253;
    __src = v254;
    v176 = v255;
    v254 = 0;
    v255 = 0uLL;
    v229 = v27;
    memset(&v230[20], 0, 40);
    *(_OWORD *)&v230[4] = 0u;
    *(_DWORD *)v230 = 1065353216;
    *(_DWORD *)&v230[20] = 1065353216;
    *(_DWORD *)&v230[40] = 1065353216;
    *(_DWORD *)&v230[60] = 1065353216;
    v43 = operator new(0x40uLL);
    *(_DWORD *)v43 = 1065353216;
    *(_QWORD *)((char *)v43 + 12) = 0;
    *(_QWORD *)((char *)v43 + 4) = 0;
    *((_DWORD *)v43 + 5) = 1065353216;
    *((_QWORD *)v43 + 3) = 0;
    *((_QWORD *)v43 + 4) = 0;
    *((_DWORD *)v43 + 10) = 1065353216;
    *(_QWORD *)((char *)v43 + 52) = 0;
    *(_QWORD *)((char *)v43 + 44) = 0;
    *((_DWORD *)v43 + 15) = 1065353216;
    LODWORD(v180) = v32;
    v181 = v219;
    v182 = v220;
    v183 = v41;
    v184 = v177;
    v188 = v251;
    v187 = v250;
    v186 = v249;
    v185 = *(_OWORD *)&v248[8];
    v190 = v253;
    v189 = v252;
    __p = __src;
    v192 = v176;
    v227 = 0;
    v226 = 0;
    v193 = v27;
    v197 = *(_OWORD *)&v230[48];
    v196 = *(_OWORD *)&v230[32];
    v195 = *(_OWORD *)&v230[16];
    v194 = *(_OWORD *)v230;
    v200 = v43;
    v201 = v43 + 4;
    v202 = v43 + 4;
    v232 = 0;
    v233 = 0;
    v228 = 0;
    v231 = 0;
    v44 = v41;
    if (v34 != v33 && v32 == *(_DWORD *)v33)
    {
      v18 = (void (***)())(a1 + 87);
      v45 = v175;
LABEL_103:
      operator delete(v43);
LABEL_104:
      if (__p)
        operator delete(__p);
      if (!v45)
        goto LABEL_132;
      v124 = (char *)*((_QWORD *)a1 + 42);
      v123 = *((_QWORD *)a1 + 43);
      if ((unint64_t)v124 < v123)
      {
        *(_DWORD *)v124 = v32;
        v125 = (uint64_t)(v124 + 4);
LABEL_131:
        *((_QWORD *)a1 + 42) = v125;
LABEL_132:
        *((_BYTE *)a1 + 274) = 0;
        *((_BYTE *)a1 + 272) = 0;
        *((_DWORD *)a1 + 94) = 0;
        *((_BYTE *)a1 + 380) = 0;
        goto LABEL_133;
      }
      v126 = (char *)*((_QWORD *)a1 + 41);
      v127 = (v124 - v126) >> 2;
      v128 = v127 + 1;
      if ((unint64_t)(v127 + 1) >> 62)
        sub_207CA420C();
      v129 = v123 - (_QWORD)v126;
      if (v129 >> 1 > v128)
        v128 = v129 >> 1;
      if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
        v130 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v130 = v128;
      if (v130)
      {
        if (v130 >> 62)
          sub_207CA3AB8();
        v131 = operator new(4 * v130);
        v132 = (unsigned int *)&v131[4 * v127];
        v133 = &v131[4 * v130];
        *v132 = v32;
        v125 = (uint64_t)(v132 + 1);
        v134 = v124 - v126;
        if (v124 == v126)
          goto LABEL_129;
      }
      else
      {
        v131 = 0;
        v132 = (unsigned int *)(4 * v127);
        v133 = 0;
        *(_DWORD *)(4 * v127) = v32;
        v125 = 4 * v127 + 4;
        v134 = v124 - v126;
        if (v124 == v126)
        {
LABEL_129:
          *((_QWORD *)a1 + 41) = v132;
          *((_QWORD *)a1 + 42) = v125;
          *((_QWORD *)a1 + 43) = v133;
          if (v126)
            operator delete(v126);
          goto LABEL_131;
        }
      }
      v135 = v134 - 4;
      if (v135 < 0x2C)
        goto LABEL_226;
      if ((unint64_t)(v126 - v131) < 0x20)
        goto LABEL_226;
      v136 = (v135 >> 2) + 1;
      v137 = 4 * (v136 & 0x7FFFFFFFFFFFFFF8);
      v138 = &v124[-v137];
      v132 = (unsigned int *)((char *)v132 - v137);
      v139 = &v131[4 * v127 - 16];
      v140 = v124 - 16;
      v141 = v136 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v142 = *(_OWORD *)v140;
        *(v139 - 1) = *((_OWORD *)v140 - 1);
        *v139 = v142;
        v139 -= 2;
        v140 -= 32;
        v141 -= 8;
      }
      while (v141);
      v124 = v138;
      if (v136 != (v136 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_226:
        do
        {
          v143 = *((_DWORD *)v124 - 1);
          v124 -= 4;
          *--v132 = v143;
        }
        while (v124 != v126);
      }
      goto LABEL_129;
    }
    v46 = *((_QWORD *)a1 + 26);
    if (*((_QWORD *)a1 + 25) != v46)
    {
      v47 = *(_QWORD *)(v46 - 8);
      *((_QWORD *)a1 + 26) = v46 - 8;
LABEL_62:
      v80 = v181;
      *(_DWORD *)(v47 + 8) = v182;
      *(_QWORD *)v47 = v80;
      *(_QWORD *)(v47 + 16) = v44;
      *(_QWORD *)(v47 + 24) = v42;
      v81 = v185;
      v82 = v186;
      v83 = v188;
      *(_OWORD *)(v47 + 64) = v187;
      *(_OWORD *)(v47 + 80) = v83;
      *(_OWORD *)(v47 + 32) = v81;
      *(_OWORD *)(v47 + 48) = v82;
      v84 = v189;
      *(_DWORD *)(v47 + 104) = v190;
      *(_QWORD *)(v47 + 96) = v84;
      *(_QWORD *)(v47 + 112) = 0;
      *(_QWORD *)(v47 + 120) = 0;
      *(_QWORD *)(v47 + 128) = 0;
      v85 = v176 - (_QWORD)__src;
      if ((void *)v176 != __src)
      {
        if (v85 < 0)
          sub_207CA420C();
        v86 = (char *)operator new(v176 - (_QWORD)__src);
        *(_QWORD *)(v47 + 112) = v86;
        *(_QWORD *)(v47 + 120) = v86;
        *(_QWORD *)(v47 + 128) = &v86[64 * (v85 >> 6)];
        v87 = v85 & 0xFFFFFFFFFFFFFFC0;
        memcpy(v86, __src, v87);
        *(_QWORD *)(v47 + 120) = &v86[v87];
      }
      *(_DWORD *)(v47 + 136) = v27;
      v88 = v194;
      v89 = v195;
      v90 = v197;
      *(_OWORD *)(v47 + 176) = v196;
      *(_OWORD *)(v47 + 192) = v90;
      *(_OWORD *)(v47 + 144) = v88;
      *(_OWORD *)(v47 + 160) = v89;
      v91 = v199;
      v92 = v198;
      *(_QWORD *)(v47 + 224) = 0;
      *(_QWORD *)(v47 + 208) = v92;
      *(_DWORD *)(v47 + 216) = v91;
      *(_QWORD *)(v47 + 232) = 0;
      *(_QWORD *)(v47 + 240) = 0;
      v93 = operator new(0x40uLL);
      *(_QWORD *)(v47 + 224) = v93;
      *(_QWORD *)(v47 + 232) = v93;
      *(_QWORD *)(v47 + 240) = v93 + 4;
      v94 = v43[1];
      *v93 = *v43;
      v93[1] = v94;
      v95 = v43[3];
      v93[2] = v43[2];
      v93[3] = v95;
      *(_QWORD *)(v47 + 232) = v93 + 4;
      v97 = (char *)*((_QWORD *)a1 + 16);
      v96 = *((_QWORD *)a1 + 17);
      v98 = v33 - v97;
      v99 = (v33 - v97) >> 4;
      v100 = &v97[(v33 - v97) & 0xFFFFFFFFFFFFFFF0];
      v101 = *((_QWORD *)a1 + 18);
      if (v96 < v101)
      {
        if (v100 == (char *)v96)
        {
          *(_DWORD *)v100 = v32;
          *((_QWORD *)v100 + 1) = v47;
          *((_QWORD *)a1 + 17) = v100 + 16;
          v45 = v175;
        }
        else
        {
          v102 = v100 + 16;
          v103 = (__int128 *)(v96 - 16);
          v45 = v175;
          v104 = (_OWORD *)*((_QWORD *)a1 + 17);
          if (v96 >= 0x10)
          {
            do
            {
              v105 = *v103++;
              *v104++ = v105;
            }
            while ((unint64_t)v103 < v96);
          }
          *((_QWORD *)a1 + 17) = v104;
          if ((char *)v96 != v102)
          {
            v106 = (uint64_t)(v96 - (_QWORD)v102) >> 4;
            v107 = (_QWORD *)(v96 - 8);
            v108 = 16 * v106;
            do
            {
              *((_DWORD *)v107 - 2) = *(_DWORD *)&v100[v108 - 16];
              *v107 = *(_QWORD *)&v100[v108 - 8];
              v107 -= 2;
              v108 -= 16;
            }
            while (v108);
          }
          *(_DWORD *)v100 = v32;
          *(_QWORD *)&v97[16 * v99 + 8] = v47;
        }
LABEL_102:
        v43 = v200;
        v18 = (void (***)())(a1 + 87);
        if (!v200)
          goto LABEL_104;
        goto LABEL_103;
      }
      v109 = ((uint64_t)(v96 - (_QWORD)v97) >> 4) + 1;
      if (v109 >> 60)
        sub_207CA420C();
      v110 = v101 - (_QWORD)v97;
      if (v110 >> 3 > v109)
        v109 = v110 >> 3;
      if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0)
        v111 = 0xFFFFFFFFFFFFFFFLL;
      else
        v111 = v109;
      if (!v111)
      {
        v113 = (char *)(16 * v99);
        __srca = 0;
        v114 = 0;
        if (v99)
          goto LABEL_95;
LABEL_85:
        if (v98 < 1)
        {
          if (v33 == v97)
            v116 = 1;
          else
            v116 = v98 >> 3;
          if (v116 >> 60)
            sub_207CA3AB8();
          v113 = (char *)operator new(16 * v116);
          v114 = &v113[16 * v116];
          if (__srca)
          {
            operator delete(__srca);
            v114 = &v113[16 * v116];
            v97 = (char *)*((_QWORD *)a1 + 16);
          }
        }
        else
        {
          v115 = v99 + 2;
          if (v99 >= -1)
            v115 = v99 + 1;
          v113 -= 16 * (v115 >> 1);
        }
LABEL_95:
        v45 = v175;
        *(_DWORD *)v113 = v32;
        *((_QWORD *)v113 + 1) = v47;
        v117 = v113 + 16;
        if (v97 == v100)
        {
          v119 = v113;
          v120 = (char *)*((_QWORD *)a1 + 17);
          if (v120 != v100)
          {
            do
            {
LABEL_99:
              v121 = *(_OWORD *)v100;
              v100 += 16;
              *v117++ = v121;
            }
            while (v100 != v120);
            v122 = (void *)*((_QWORD *)a1 + 16);
            *((_QWORD *)a1 + 16) = v119;
            *((_QWORD *)a1 + 17) = v117;
            *((_QWORD *)a1 + 18) = v114;
            if (!v122)
              goto LABEL_102;
LABEL_101:
            operator delete(v122);
            goto LABEL_102;
          }
        }
        else
        {
          v118 = v100;
          do
          {
            v119 = v113 - 16;
            *((_OWORD *)v113 - 1) = *((_OWORD *)v118 - 1);
            v118 -= 16;
            v113 -= 16;
          }
          while (v118 != v97);
          v120 = (char *)*((_QWORD *)a1 + 17);
          if (v120 != v100)
            goto LABEL_99;
        }
        v122 = (void *)*((_QWORD *)a1 + 16);
        *((_QWORD *)a1 + 16) = v119;
        *((_QWORD *)a1 + 17) = v117;
        *((_QWORD *)a1 + 18) = v114;
        if (!v122)
          goto LABEL_102;
        goto LABEL_101;
      }
      if (!(v111 >> 60))
      {
        v112 = (char *)operator new(16 * v111);
        v99 = (v33 - v97) >> 4;
        v113 = &v112[16 * v99];
        __srca = v112;
        v114 = &v112[16 * v111];
        if (v99 != v111)
          goto LABEL_95;
        goto LABEL_85;
      }
LABEL_220:
      sub_207CA3AB8();
    }
    v48 = *((unsigned int *)a1 + 46);
    if ((_DWORD)v48)
    {
      v49 = *((_QWORD *)a1 + 24);
      if (v49 < 8 << (v48 - 1))
      {
        v50 = *(_QWORD *)(*((_QWORD *)a1 + 20) + 16 * (v48 - 1));
        *((_QWORD *)a1 + 24) = v49 + 1;
        v47 = v50 + (v49 << 8);
        goto LABEL_62;
      }
      v51 = 4096 << (v48 - 1);
      v52 = *((_QWORD *)a1 + 20);
      if (v48 == (*((_QWORD *)a1 + 21) - v52) >> 4)
        goto LABEL_31;
    }
    else
    {
      v51 = 2048;
      v52 = *((_QWORD *)a1 + 20);
      if (v48 == (*((_QWORD *)a1 + 21) - v52) >> 4)
      {
LABEL_31:
        v53 = malloc_type_aligned_alloc(8uLL, v51, 0x8BB35E2BuLL);
        v54 = v53;
        v56 = (char *)*((_QWORD *)a1 + 21);
        v55 = *((_QWORD *)a1 + 22);
        if ((unint64_t)v56 >= v55)
        {
          v59 = (char *)*((_QWORD *)a1 + 20);
          v60 = (v56 - v59) >> 4;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60)
            sub_207CA420C();
          v62 = v55 - (_QWORD)v59;
          if (v62 >> 3 > v61)
            v61 = v62 >> 3;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
            v63 = 0xFFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            if (v63 >> 60)
              goto LABEL_220;
            v64 = (char *)operator new(16 * v63);
          }
          else
          {
            v64 = 0;
          }
          v65 = MEMORY[0x24BDAE450];
          v66 = &v64[16 * v60];
          v67 = &v64[16 * v63];
          *(_QWORD *)v66 = v54;
          *((_QWORD *)v66 + 1) = v65;
          v58 = v66 + 16;
          if (v56 == v59)
          {
            *((_QWORD *)a1 + 20) = v66;
            *((_QWORD *)a1 + 21) = v58;
            *((_QWORD *)a1 + 22) = v67;
            v42 = v177;
          }
          else
          {
            v68 = v56 - v59 - 16;
            v42 = v177;
            if (v68 < 0x90
              || &v56[-(v68 & 0xFFFFFFFFFFFFFFF0) - 16] < v66
              && &v64[v56 - v59 - (v68 & 0xFFFFFFFFFFFFFFF0) - 16] < v56)
            {
              goto LABEL_50;
            }
            v69 = (v68 >> 4) + 1;
            v70 = 16 * (v69 & 0x1FFFFFFFFFFFFFFELL);
            v71 = &v66[-v70];
            v72 = &v56[-v70];
            v73 = (double *)(v66 - 32);
            v74 = (const double *)(v56 - 32);
            v75 = v69 & 0x1FFFFFFFFFFFFFFELL;
            do
            {
              v269 = vld2q_f64(v74);
              v74[2] = 0.0;
              *v74 = 0.0;
              v74 -= 4;
              vst2q_f64(v73, v269);
              v73 -= 4;
              v75 -= 2;
            }
            while (v75);
            v66 = v71;
            v56 = v72;
            if (v69 != (v69 & 0x1FFFFFFFFFFFFFFELL))
            {
LABEL_50:
              v71 = v66;
              do
              {
                v76 = *((_QWORD *)v56 - 2);
                v56 -= 16;
                *(_QWORD *)v56 = 0;
                *((_QWORD *)v71 - 2) = v76;
                v71 -= 16;
                *((_QWORD *)v71 + 1) = *((_QWORD *)v56 + 1);
              }
              while (v56 != v59);
            }
            v56 = (char *)*((_QWORD *)a1 + 20);
            v77 = (char *)*((_QWORD *)a1 + 21);
            *((_QWORD *)a1 + 20) = v71;
            *((_QWORD *)a1 + 21) = v58;
            *((_QWORD *)a1 + 22) = v67;
            if (v77 != v56)
            {
              v78 = v77;
              do
              {
                v79 = *((_QWORD *)v78 - 2);
                v78 -= 16;
                *(_QWORD *)v78 = 0;
                if (v79)
                  (*((void (**)(void))v77 - 1))();
                v77 = v78;
              }
              while (v78 != v56);
            }
          }
          if (v56)
            operator delete(v56);
        }
        else
        {
          v57 = MEMORY[0x24BDAE450];
          *(_QWORD *)v56 = v53;
          *((_QWORD *)v56 + 1) = v57;
          v58 = v56 + 16;
          v42 = v177;
        }
        *((_QWORD *)a1 + 21) = v58;
        v48 = *((unsigned int *)a1 + 46);
        v52 = *((_QWORD *)a1 + 20);
        v44 = v183;
      }
    }
    *((_DWORD *)a1 + 46) = v48 + 1;
    *((_QWORD *)a1 + 24) = 1;
    v47 = *(_QWORD *)(v52 + 16 * v48);
    goto LABEL_62;
  }
LABEL_133:
  if (v254)
  {
    *(_QWORD *)&v255 = v254;
    operator delete(v254);
  }
  *((_BYTE *)a1 + 381) = 0;
  *((_DWORD *)a1 + 94) = 0;
  v248[16] = 0;
  *(_DWORD *)&v248[20] = 1069401558;
  v257 = &v249;
  v258 = xmmword_2082352F0;
  v259 = 0;
  v261 = 0;
  v263 = 0;
  v265 = 0;
  v267 = 0;
  v247 = 0x6400000005;
  v248[0] = 0;
  *(int32x2_t *)&v248[4] = vdup_n_s32(0x358637BDu);
  *(_DWORD *)&v248[12] = 897988541;
  v219 = 0xA00000001;
  LOBYTE(v220) = 0;
  *(_QWORD *)v221 = 0x358637BD3A83126FLL;
  *(_DWORD *)&v221[8] = 897988541;
  LOBYTE(v222) = 0;
  HIDWORD(v222) = 1069401558;
  v234 = v223;
  v235 = xmmword_2082352F0;
  v236 = 0;
  v238 = 0;
  v240 = 0;
  v242 = 0;
  v244 = 0;
  *(_QWORD *)&v245 = 0x3A83126F358637BDLL;
  BYTE8(v245) = 1;
  HIDWORD(v245) = 1065353216;
  v246 = 0x4000000040000000;
  sub_207D82584((uint64_t)&v219, (uint64_t)&v247);
  LODWORD(v245) = 1036831949;
  BYTE8(v245) = 1;
  sub_207D936D8((uint64_t)&v181, (uint64_t)&v219);
  v213 = -1082130432;
  v215 = 0;
  v214 = 0;
  v216 = 0;
  v180 = (void (**)())off_24C074470;
  v217 = v245;
  *(_QWORD *)&v218 = v246;
  *((_QWORD *)&v218 + 1) = __PAIR64__(v246, DWORD1(v245));
  sub_207D82584((uint64_t)a1 + 1400, (uint64_t)&v181);
  *((_DWORD *)a1 + 462) = v213;
  if (v18 != &v180)
  {
    v144 = (void **)(a1 + 116);
    v145 = v216;
    if (*((_QWORD *)a1 + 233) >= (unint64_t)v216)
    {
      if (!v216)
      {
        v148 = 0;
        goto LABEL_143;
      }
      v147 = *v144;
      v146 = 4 * v216;
    }
    else
    {
      if (*v144)
        operator delete[](*v144);
      *((_QWORD *)a1 + 232) = 0;
      v146 = 4 * v145;
      *((_QWORD *)a1 + 233) = ((v146 + 31) & 0x7FFFFFFE0) >> 2;
      v147 = (void *)MEMORY[0x20BD028B4]();
      *v144 = v147;
    }
    memcpy(v147, v214, v146);
    v148 = v216;
LABEL_143:
    *((_DWORD *)a1 + 468) = v148;
  }
  v149 = v218;
  *(__int128 *)((char *)a1 + 1880) = v217;
  *(__int128 *)((char *)a1 + 1896) = v149;
  v180 = off_24C074500;
  if (v214)
    operator delete[](v214);
  v150 = v212;
  if (v212 == v211)
  {
    v151 = 4;
    v150 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_151;
    v151 = 5;
  }
  (*(void (**)(void))(*v150 + 8 * v151))();
LABEL_151:
  v152 = v210;
  if (v210 == v209)
  {
    v153 = 4;
    v152 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_156;
    v153 = 5;
  }
  (*(void (**)(void))(*v152 + 8 * v153))();
LABEL_156:
  v154 = v208;
  if (v208 == v207)
  {
    v155 = 4;
    v154 = v207;
  }
  else
  {
    if (!v208)
      goto LABEL_161;
    v155 = 5;
  }
  (*(void (**)(void))(*v154 + 8 * v155))();
LABEL_161:
  v156 = v206;
  if (v206 == v205)
  {
    v157 = 4;
    v156 = v205;
    goto LABEL_165;
  }
  if (v206)
  {
    v157 = 5;
LABEL_165:
    (*(void (**)(void))(*v156 + 8 * v157))();
  }
  v204 = 0;
  if (v203 != &v185 && v203)
    operator delete[](v203);
  v158 = v244;
  if (v244 == v243)
  {
    v159 = 4;
    v158 = v243;
  }
  else
  {
    if (!v244)
      goto LABEL_174;
    v159 = 5;
  }
  (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_174:
  v160 = v242;
  if (v242 == v241)
  {
    v161 = 4;
    v160 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_179;
    v161 = 5;
  }
  (*(void (**)(void))(*v160 + 8 * v161))();
LABEL_179:
  v162 = v240;
  if (v240 == v239)
  {
    v163 = 4;
    v162 = v239;
  }
  else
  {
    if (!v240)
      goto LABEL_184;
    v163 = 5;
  }
  (*(void (**)(void))(*v162 + 8 * v163))();
LABEL_184:
  v164 = v238;
  if (v238 == v237)
  {
    v165 = 4;
    v164 = v237;
    goto LABEL_188;
  }
  if (v238)
  {
    v165 = 5;
LABEL_188:
    (*(void (**)(void))(*v164 + 8 * v165))();
  }
  *((_QWORD *)&v235 + 1) = 0;
  if (v234 != v223 && v234)
    operator delete[](v234);
  v166 = v267;
  if (v267 == v266)
  {
    v167 = 4;
    v166 = v266;
  }
  else
  {
    if (!v267)
      goto LABEL_197;
    v167 = 5;
  }
  (*(void (**)(void))(*v166 + 8 * v167))();
LABEL_197:
  v168 = v265;
  if (v265 == v264)
  {
    v169 = 4;
    v168 = v264;
  }
  else
  {
    if (!v265)
      goto LABEL_202;
    v169 = 5;
  }
  (*(void (**)(void))(*v168 + 8 * v169))();
LABEL_202:
  v170 = v263;
  if (v263 == v262)
  {
    v171 = 4;
    v170 = v262;
  }
  else
  {
    if (!v263)
      goto LABEL_207;
    v171 = 5;
  }
  (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_207:
  v172 = v261;
  if (v261 == v260)
  {
    v173 = 4;
    v172 = v260;
    goto LABEL_211;
  }
  if (v261)
  {
    v173 = 5;
LABEL_211:
    (*(void (**)(void))(*v172 + 8 * v173))();
  }
  *((_QWORD *)&v258 + 1) = 0;
  if (v257 != &v249 && v257)
    operator delete[](v257);
  return a1;
}

void sub_207D82418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a15);
  if (__p)
    operator delete(__p);
  sub_207D93698(va);
  sub_207D874A4(&STACK[0x278]);
  v17 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v17;
    operator delete(v17);
  }
  sub_207D939DC(a4);
  sub_207D82BA8(a5);
  v18 = *a6;
  if (*a6)
  {
    *(_QWORD *)(v15 + 88) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207D82584(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  size_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[4];

  v44[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  if (a1 == a2)
    goto LABEL_23;
  v5 = *(__int128 **)(a2 + 288);
  v6 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  v7 = v6 & 0x3FFFFFFFFFFFFFFFLL;
  v9 = *(void **)(a1 + 288);
  v8 = *(_QWORD *)(a1 + 296);
  if ((v6 & 0x3FFFFFFFFFFFFFFFuLL) <= v8)
  {
    v14 = *(_OWORD **)(a1 + 288);
    if (!v6)
      goto LABEL_23;
  }
  else
  {
    v10 = (void *)(a1 + 32);
    v11 = 2 * v8;
    if (v11 > v7)
      v7 = v11;
    *(_QWORD *)(a1 + 296) = v7;
    if (v7 >> 62)
      v12 = -1;
    else
      v12 = 4 * v7;
    v13 = operator new[](v12);
    v14 = v13;
    if (v9 == v10 || !v9)
    {
      *(_QWORD *)(a1 + 288) = v13;
      v16 = 0;
      v17 = (v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v17 >= 7)
        goto LABEL_14;
      goto LABEL_20;
    }
    operator delete[](v9);
    v15 = *(_QWORD *)(a1 + 304);
    *(_QWORD *)(a1 + 288) = v14;
    if (v15)
    {
      *(_QWORD *)(a1 + 304) = v15 + v6;
      memmove((char *)v14 + 4 * v6, v14, 4 * v15);
      memcpy(v14, v5, 4 * v6);
      goto LABEL_23;
    }
  }
  v16 = 0;
  v17 = (v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v17 >= 7)
  {
LABEL_14:
    v18 = (int *)v5;
    if ((unint64_t)((char *)v14 - (char *)v5) >= 0x20)
    {
      v19 = v17 + 1;
      v16 = v19 & 0x7FFFFFFFFFFFFFF8;
      v18 = (int *)v5 + (v19 & 0x7FFFFFFFFFFFFFF8);
      v20 = v14 + 1;
      v21 = v5 + 1;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 += 2;
        v21 += 2;
        v22 -= 8;
      }
      while (v22);
      if (v19 == v16)
        goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_20:
  v18 = (int *)v5;
  do
  {
LABEL_21:
    v24 = *v18++;
    *((_DWORD *)v14 + v16++) = v24;
  }
  while (v18 != (int *)((char *)v5 + 4 * v6));
LABEL_22:
  *(_QWORD *)(a1 + 304) = v16;
LABEL_23:
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  v25 = *(_QWORD *)(a2 + 344);
  if (v25)
  {
    if (v25 == a2 + 320)
    {
      v43 = v42;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a2 + 320) + 24))(a2 + 320, v42);
    }
    else
    {
      v43 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 16))(*(_QWORD *)(a2 + 344));
    }
  }
  else
  {
    v43 = 0;
  }
  sub_207CA48D0(v42, (_QWORD *)(a1 + 320));
  v26 = v43;
  if (v43 == v42)
  {
    v27 = 4;
    v26 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_33;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_33:
  v28 = *(_QWORD *)(a2 + 376);
  if (v28)
  {
    if (v28 == a2 + 352)
    {
      v43 = v42;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a2 + 352) + 24))(a2 + 352, v42);
    }
    else
    {
      v43 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    }
  }
  else
  {
    v43 = 0;
  }
  sub_207CA48D0(v42, (_QWORD *)(a1 + 352));
  v29 = v43;
  if (v43 == v42)
  {
    v30 = 4;
    v29 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_43;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_43:
  v31 = *(_QWORD *)(a2 + 408);
  if (v31)
  {
    if (v31 == a2 + 384)
    {
      v43 = v42;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a2 + 384) + 24))(a2 + 384, v42);
    }
    else
    {
      v43 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
    }
  }
  else
  {
    v43 = 0;
  }
  sub_207CA48D0(v42, (_QWORD *)(a1 + 384));
  v32 = v43;
  if (v43 == v42)
  {
    v33 = 4;
    v32 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_53;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_53:
  v34 = *(_QWORD *)(a2 + 440);
  if (v34)
  {
    if (v34 == a2 + 416)
    {
      v43 = v42;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a2 + 416) + 24))(a2 + 416, v42);
    }
    else
    {
      v43 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
    }
  }
  else
  {
    v43 = 0;
  }
  v35 = (_QWORD *)(a1 + 416);
  if ((_QWORD *)(a1 + 416) == v42)
  {
LABEL_67:
    v38 = v43;
    if (v43 != v42)
      goto LABEL_68;
    goto LABEL_71;
  }
  v36 = v43;
  v37 = *(_QWORD **)(a1 + 440);
  if (v43 == v42)
  {
    if (v37 != v35)
    {
      (*(void (**)(_QWORD *, uint64_t))(v42[0] + 24))(v42, a1 + 416);
      (*(void (**)(_QWORD *))(*v43 + 32))(v43);
      v43 = *(_QWORD **)(a1 + 440);
      v39 = v43;
      *(_QWORD *)(a1 + 440) = v35;
      v38 = v39;
      if (v39 == v42)
        goto LABEL_71;
      goto LABEL_68;
    }
    (*(void (**)(_QWORD *, _QWORD *))(v42[0] + 24))(v42, v44);
    (*(void (**)(_QWORD *))(*v43 + 32))(v43);
    v43 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 440) + 24))(*(_QWORD *)(a1 + 440), v42);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 440) + 32))(*(_QWORD *)(a1 + 440));
    *(_QWORD *)(a1 + 440) = 0;
    v43 = v42;
    (*(void (**)(_QWORD *, uint64_t))(v44[0] + 24))(v44, a1 + 416);
    (*(void (**)(_QWORD *))(v44[0] + 32))(v44);
    *(_QWORD *)(a1 + 440) = v35;
    v38 = v43;
    if (v43 != v42)
      goto LABEL_68;
LABEL_71:
    v40 = 4;
    v38 = v42;
    goto LABEL_72;
  }
  if (v37 == v35)
  {
    (*(void (**)(uint64_t, _QWORD *))(*v35 + 24))(a1 + 416, v42);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 440) + 32))(*(_QWORD *)(a1 + 440));
    *(_QWORD *)(a1 + 440) = v43;
    v43 = v42;
    goto LABEL_67;
  }
  v43 = *(_QWORD **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v36;
  v38 = v37;
  if (v37 == v42)
    goto LABEL_71;
LABEL_68:
  if (v38)
  {
    v40 = 5;
LABEL_72:
    (*(void (**)(void))(*v38 + 8 * v40))();
  }
  return a1;
}

void sub_207D82A9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D82AAC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = a1 + 52;
  v3 = (_QWORD *)a1[55];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[51];
  if (v5 == a1 + 48)
  {
    v6 = 4;
    v5 = a1 + 48;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[47];
  if (v7 == a1 + 44)
  {
    v8 = 4;
    v7 = a1 + 44;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[43];
  if (v9 == a1 + 40)
  {
    v10 = 4;
    v9 = a1 + 40;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  a1[38] = 0;
  v11 = (_QWORD *)a1[36];
  if (v11 != a1 + 4 && v11)
    operator delete[](v11);
  return a1;
}

uint64_t sub_207D82BA8(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_24C073E98;
  v2 = (void *)a1[157];
  if (v2)
    operator delete[](v2);
  v3 = (void *)a1[154];
  if (v3)
    operator delete[](v3);
  return sub_207D82BEC((uint64_t)a1);
}

uint64_t sub_207D82BEC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;

  *(_QWORD *)a1 = off_24C073FC8;
  v2 = *(void **)(a1 + 1184);
  if (v2)
    operator delete[](v2);
  v3 = *(void **)(a1 + 1160);
  if (v3)
    operator delete[](v3);
  v4 = *(void **)(a1 + 1136);
  if (v4)
    operator delete[](v4);
  *(_QWORD *)a1 = &unk_24C074088;
  sub_207D88A58((_QWORD *)(a1 + 568));
  v5 = *(void **)(a1 + 544);
  if (v5)
  {
    *(_QWORD *)(a1 + 552) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 520);
  if (v6)
  {
    *(_QWORD *)(a1 + 528) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 488);
  if (v7)
  {
    *(_QWORD *)(a1 + 496) = v7;
    operator delete(v7);
  }
  *(_QWORD *)a1 = &unk_24C074140;
  v8 = *(void **)(a1 + 448);
  if (v8)
  {
    *(_QWORD *)(a1 + 456) = v8;
    operator delete(v8);
  }
  *(_QWORD *)(a1 + 328) = off_24C074308;
  v9 = *(_QWORD *)(a1 + 416);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 424);
    v11 = *(void **)(a1 + 416);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(a1 + 424);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 416);
    }
    *(_QWORD *)(a1 + 424) = v9;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 328) = off_24C074368;
  sub_207CC46C8(a1 + 368);
  v15 = *(void **)(a1 + 344);
  if (v15)
  {
    *(_QWORD *)(a1 + 352) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 296);
  if (v16)
    operator delete[](v16);
  *(_QWORD *)a1 = &unk_24C0741F8;
  v17 = *(void **)(a1 + 240);
  if (v17)
  {
    *(_QWORD *)(a1 + 248) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 216);
  if (v18)
  {
    *(_QWORD *)(a1 + 224) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 192);
  if (v19)
  {
    *(_QWORD *)(a1 + 200) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 168);
  if (v20)
  {
    *(_QWORD *)(a1 + 176) = v20;
    operator delete(v20);
  }
  v21 = *(_QWORD *)(a1 + 112);
  if (v21)
  {
    v22 = *(_QWORD *)(a1 + 120);
    v23 = *(void **)(a1 + 112);
    if (v22 != v21)
    {
      do
      {
        v24 = *(std::__shared_weak_count **)(v22 - 16);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 104;
      }
      while (v22 != v21);
      v23 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v21;
    operator delete(v23);
  }
  sub_207D87094(a1 + 40);
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v27 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = v27;
  if (v27)
    operator delete(v27);
  v28 = *(_QWORD **)(a1 + 48);
  if (v28)
  {
    v29 = *(_QWORD **)(a1 + 56);
    v30 = *(void **)(a1 + 48);
    if (v29 != v28)
    {
      v31 = *(_QWORD **)(a1 + 56);
      do
      {
        v32 = *(v31 - 2);
        v31 -= 2;
        *v31 = 0;
        if (v32)
          ((void (*)(void))*(v29 - 1))();
        v29 = v31;
      }
      while (v31 != v28);
      v30 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v28;
    operator delete(v30);
  }
  v33 = *(void **)(a1 + 16);
  if (v33)
  {
    *(_QWORD *)(a1 + 24) = v33;
    operator delete(v33);
  }
  return a1;
}

void sub_207D82E6C(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v5, "DenseHessian");
  v4 = 4;
  strcpy((char *)__p, "LDLt");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 4uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_207D82F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D82F6C(_QWORD *a1)
{
  double v2;
  int32x4_t v3;
  int32x4_t v4;
  float32x2_t v5;
  double v6;
  float32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unsigned int v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  _DWORD *v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t i;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  void *v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int *j;
  unsigned int *v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t k;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  unsigned int v124;
  _QWORD *v125;
  unsigned int v126;
  char **v127;
  unsigned int v128;
  _DWORD *v129;
  uint64_t v130;
  int v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  __int128 v159;
  int v160;
  size_t v161;
  char *v162;
  int v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  size_t v172;
  unint64_t v173;
  char *v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  char *v180;
  char *v181;
  unint64_t v182;
  int64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  void *v188;
  int64_t v189;
  unsigned int v190;
  char *v191;
  void **v192;
  void **v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  _OWORD *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  char *v202;
  int v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  _BYTE *v216;
  _DWORD *v217;
  int64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  _OWORD *v223;
  char *v224;
  uint64_t v225;
  __int128 v226;
  int v227;
  unsigned int *v228;
  unsigned int *v229;
  uint64_t v230;
  char *v231;
  void *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  int64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  _OWORD *v248;
  __int128 *v249;
  uint64_t v250;
  __int128 v251;
  _DWORD *v252;
  unint64_t v253;
  _DWORD *v254;
  int v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  char *v261;
  int v262;
  char *v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  int64x2_t v276;
  _QWORD *v277;
  _QWORD *v278;
  uint64_t v279;
  __int128 v280;
  std::__shared_weak_count *v281;
  unint64_t *p_shared_owners;
  unint64_t v283;
  _QWORD *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  void *v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  char *v302;
  char *v303;
  char *v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  void *v313;
  _QWORD *v314;
  char *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  _OWORD *v321;
  char *v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  int v337;
  int **v338;
  _QWORD *v339;
  uint64_t v340;
  void *v341;
  char *v342;
  void *v343;
  unint64_t v344;
  char *v345;
  int *v346;
  int *v347;
  uint64_t v348;
  int v349;
  unint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  _BYTE *v358;
  _DWORD *v359;
  int64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  _OWORD *v365;
  char *v366;
  uint64_t v367;
  __int128 v368;
  int v369;
  unsigned int *v370;
  unsigned int *v371;
  unsigned int *v372;
  unsigned int *v373;
  unsigned int v374;
  unint64_t v375;
  _DWORD *v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  unsigned int v384;
  int v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unsigned int *v389;
  unsigned int *v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unint64_t v397;
  int32x4_t *v398;
  int32x4_t *v399;
  unint64_t v400;
  uint64_t v401;
  int32x4_t *v402;
  uint64_t v403;
  int32x4_t v404;
  int32x4_t *v405;
  int32x4_t v406;
  int32x4_t v407;
  uint64_t v408;
  unint64_t v409;
  _DWORD *v410;
  unint64_t v411;
  _DWORD *v412;
  _DWORD *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  uint64_t *v425;
  _DWORD *v426;
  _DWORD *v427;
  unsigned int v428;
  uint64_t v429;
  int v430;
  char v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  void **v440;
  uint64_t v441;
  unsigned int v442;
  unsigned int v443;
  unint64_t v444;
  unsigned int v445;
  uint64_t *v446;
  void **v447;
  unint64_t v448;
  int v449;
  void *v450;
  unint64_t v451;
  _DWORD *v452;
  _DWORD *v453;
  unsigned int v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  unsigned int *v458;
  unsigned int *v459;
  int v460;
  int v461;
  unsigned int *v462;
  unsigned int v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  float32x2_t v468;
  float32x2_t v469;
  uint64_t v470;
  float32x4_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v475;
  BOOL v476;
  unsigned int v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  char v493;
  char **v494;
  char **v495;
  uint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unsigned int v501;
  _QWORD *v502;
  void **v503;
  _QWORD *v504;
  unsigned int **v505;
  unint64_t v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  int v510;
  char *v511;
  int *v512;
  void **v513;
  unsigned int v514;
  void **v515;
  uint64_t v516;
  char **v517;
  _QWORD *v518;
  void **v519;
  void **v520;
  _QWORD *v521;
  void **p_dst;
  uint64_t *v523;
  uint64_t *m;
  char v525;
  uint64_t v526;
  uint64_t v527;
  void *__dst;
  __int32 v529;
  void *__p[2];
  char *v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  std::mutex v535;
  uint64_t v536;

  v536 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v504 = a1 + 71;
  v9 = a1[95];
  v10 = a1[94];
  if (*((_BYTE *)a1 + 160))
    goto LABEL_546;
  v498 = a1[94];
  v499 = a1[95];
  kdebug_trace();
  v518 = a1;
  if (!*((_BYTE *)a1 + 161))
    goto LABEL_358;
  if (*((_DWORD *)a1 + 73) == 1)
    v11 = 3;
  else
    v11 = 1;
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[71] + 24))(v504) + 144))
    goto LABEL_7;
  v12 = (*(uint64_t (**)(_QWORD *))(a1[71] + 24))(v504);
  v496 = sub_207D89838(v12);
  v494 = (char **)(a1 + 102);
  if (a1 + 102 != (_QWORD *)v496)
    sub_207CB9D2C(v494, *(char **)v496, *(char **)(v496 + 8), (uint64_t)(*(_QWORD *)(v496 + 8) - *(_QWORD *)v496) >> 2);
  v13 = (char **)(v496 + 24);
  v14 = (char *)a1[102];
  v15 = (char *)a1[103];
  if (v14 != v15)
  {
    v495 = (char **)(a1 + 108);
    sub_207CB9D2C(a1 + 108, v14, v15, (v15 - v14) >> 2);
    sub_207D89D94((char **)a1 + 108, v13);
    v16 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
    if (a1 + 105 != (_QWORD *)(v16 + 152))
      sub_207CB9D2C(a1 + 105, *(char **)(v16 + 152), *(char **)(v16 + 160), (uint64_t)(*(_QWORD *)(v16 + 160) - *(_QWORD *)(v16 + 152)) >> 2);
    v17 = (char *)a1[105];
    v18 = (char *)a1[106];
    if (v17 == v18)
    {
      v18 = (char *)a1[105];
    }
    else
    {
      v19 = (char *)a1[109];
      v20 = *v495;
      v21 = (char *)a1[105];
      v22 = v21;
      while (v20 != v19)
      {
        v23 = *(_DWORD *)v22;
        if (*(_DWORD *)v22 >= *(_DWORD *)v20)
        {
          v22 += 4 * (*(_DWORD *)v20 >= v23);
          v20 += 4;
          if (v22 == v18)
            goto LABEL_32;
        }
        else
        {
          *(_DWORD *)v21 = v23;
          v21 += 4;
          v22 += 4;
          if (v22 == v18)
            goto LABEL_32;
        }
      }
      if (v22 == v21)
        goto LABEL_34;
      v31 = v18 - v22;
      memmove(v21, v22, v18 - v22);
      v21 += v31;
      v18 = (char *)a1[106];
      v17 = (char *)a1[105];
LABEL_32:
      if (v21 != v18)
      {
        v18 = v21;
        a1[106] = v21;
      }
    }
LABEL_34:
    sub_207CB9D2C(v495, v17, v18, (v18 - v17) >> 2);
    sub_207D89D94(v495, v494);
    v32 = (a1[106] - a1[105]) >> 2;
    *((_DWORD *)a1 + 148) = v32;
    v33 = v32;
    if (a1[73] < (unint64_t)v32)
    {
      v34 = (void *)a1[72];
      if (v34)
        operator delete[](v34);
      a1[72] = 0;
      a1[73] = ((4 * v33 + 31) & 0x7FFFFFFE0uLL) >> 2;
      a1[72] = MEMORY[0x20BD028B4]();
    }
    v35 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v504 + 24))(v504);
    v36 = (_DWORD *)a1[105];
    v37 = (_DWORD *)a1[106];
    if (v36 != v37)
    {
      v38 = 0;
      v39 = *v35;
      do
      {
        v39 -= 16;
        do
        {
          v40 = *(_DWORD *)(v39 + 16);
          v39 += 16;
        }
        while (*v36 != v40);
        *(_DWORD *)(a1[72] + 4 * v38++) = *(_DWORD *)(*(_QWORD *)(v39 + 8) + 136);
        ++v36;
      }
      while (v36 != v37);
    }
    v41 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v504 + 24))(v504);
    v43 = *v41;
    v42 = v41[1];
    v44 = (_DWORD *)a1[108];
    v45 = (_DWORD *)a1[109];
    v46 = *v41 == v42 || v44 == v45;
    if (!v46)
    {
      v47 = 0;
      do
      {
        v48 = *(_QWORD *)(v43 + 8);
        if (*v44 == *(_DWORD *)v43)
        {
          if (*(_BYTE *)(v48 + 20))
            v49 = v47;
          else
            v49 = -1;
          v47 += *(unsigned __int8 *)(v48 + 20);
          ++v44;
        }
        else
        {
          v49 = -1;
        }
        *(_DWORD *)v48 = v49;
        v43 += 16;
      }
      while (v43 != v42 && v44 != v45);
    }
    if (v43 != v42)
    {
      v50 = v42 - v43 - 16;
      if (v50 < 0x10)
      {
        v51 = v43;
        do
        {
LABEL_62:
          **(_DWORD **)(v51 + 8) = -1;
          v51 += 16;
        }
        while (v51 != v42);
        goto LABEL_63;
      }
      v52 = (v50 >> 4) + 1;
      v51 = v43 + 16 * (v52 & 0x1FFFFFFFFFFFFFFELL);
      v53 = (_DWORD **)(v43 + 24);
      v54 = v52 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v55 = *(v53 - 2);
        v56 = *v53;
        v53 += 4;
        *v55 = -1;
        *v56 = -1;
        v54 -= 2;
      }
      while (v54);
      if (v52 != (v52 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_62;
    }
LABEL_63:
    v57 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
    sub_207D89F58(v57, v495);
    v58 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
    v59 = *(unsigned int *)(v58 + 44);
    if ((_DWORD)v59)
    {
      for (i = 0; i < v59; ++i)
      {
        v62 = (uint64_t *)(*(_QWORD *)(v58 + 120) + 24 * i);
        v61 = *v62;
        v63 = v62[1];
        if (*v62 != v63)
        {
          v64 = *(_QWORD *)(v58 + 80);
          v65 = *(_QWORD *)(v58 + 88);
          v66 = *(_QWORD *)(v58 + 112);
          do
          {
            v67 = ((v65 - v64) << 6) - 1;
            if (v65 == v64)
              v67 = 0;
            v68 = *(_QWORD *)(v58 + 104) + v66;
            if (v67 == v68)
            {
              sub_207D8BD2C((_QWORD *)(v58 + 72));
              v64 = *(_QWORD *)(v58 + 80);
              v65 = *(_QWORD *)(v58 + 88);
              v68 = *(_QWORD *)(v58 + 112) + *(_QWORD *)(v58 + 104);
            }
            *(_QWORD *)(*(_QWORD *)(v64 + ((v68 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v68 & 0x1FF)) = *(_QWORD *)(v61 + 8);
            v66 = *(_QWORD *)(v58 + 112) + 1;
            *(_QWORD *)(v58 + 112) = v66;
            v61 += 16;
          }
          while (v61 != v63);
          v61 = *v62;
          v59 = *(unsigned int *)(v58 + 44);
        }
        v62[1] = v61;
      }
    }
    v69 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
    v70 = *(unsigned int *)(v69 + 16);
    if ((_DWORD)v70)
      bzero(*(void **)v69, 4 * v70);
    if (((a1[95] - a1[94]) & 0x3FFFFFFFCLL) != 0)
    {
      v71 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
      sub_207D8A108(v71, (uint64_t)(a1 + 75), (char **)a1 + 111, a1 + 114);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v504 + 16))(v504, v11);
    v72 = *((unsigned __int8 *)a1 + 776);
    v73 = (*(uint64_t (**)(_QWORD *))(a1[71] + 40))(v504);
    if (v72)
      sub_207D8A92C(v73, v494, (uint64_t)(a1 + 123), (unsigned int **)a1 + 114);
    else
      v74.n128_f32[0] = sub_207D8A71C(v73, v494, (uint64_t)(a1 + 123), (uint64_t)(a1 + 120), (unsigned int **)a1 + 114);
    v75 = (*(uint64_t (**)(_QWORD *, __n128))(a1[71] + 40))(v504, v74);
    LODWORD(__p[0]) = 1;
    sub_207D8C3F4(v494, v75 + 152, __p, (uint64_t)(a1 + 114));
    sub_207D8C3F4(a1 + 105, v75 + 152, __p, (uint64_t)(a1 + 117));
    v513 = (void **)(a1 + 126);
    v76 = (a1[115] - a1[114]) >> 3;
    v77 = (a1[118] - a1[117]) >> 3;
    *((_DWORD *)a1 + 256) = v76;
    *((_DWORD *)a1 + 257) = v77;
    v78 = v77 * (unint64_t)v76;
    v79 = v77;
    v80 = v76;
    if (a1[127] < v78)
    {
      if (*v513)
        operator delete[](*v513);
      a1[126] = 0;
      a1[127] = ((4 * v78 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
      a1[126] = MEMORY[0x20BD028B4]();
      v80 = *((_DWORD *)a1 + 256);
      v79 = *((_DWORD *)a1 + 257);
    }
    v81 = v80 * v79;
    if (v81)
      bzero(*v513, 4 * v81);
    if (*((_DWORD *)a1 + 262) == (_DWORD)v77 && *((_DWORD *)a1 + 263) == (_DWORD)v76)
    {
      v82 = (void *)a1[129];
    }
    else
    {
      *((_DWORD *)a1 + 262) = v77;
      *((_DWORD *)a1 + 263) = v76;
      v82 = (void *)a1[129];
      if (a1[130] < v78)
      {
        if (v82)
          operator delete[](v82);
        a1[129] = 0;
        a1[130] = ((4 * v78 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
        v82 = (void *)MEMORY[0x20BD028B4]();
        a1[129] = v82;
        LODWORD(v77) = *((_DWORD *)a1 + 262);
        LODWORD(v76) = *((_DWORD *)a1 + 263);
      }
    }
    if ((_DWORD)v77 * (_DWORD)v76)
      bzero(v82, 4 * (v77 * v76));
    v83 = (unsigned int *)a1[114];
    v84 = (unsigned int *)a1[115];
    if (a1[117] != a1[118])
    {
      if (v83 == v84)
        goto LABEL_129;
      do
      {
        v85 = (unsigned int *)a1[117];
        v86 = (unsigned int *)a1[118];
        if (v85 != v86)
        {
          v88 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v83);
          v87 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v83 + 8);
          do
          {
            if (v88 == v87)
              break;
            v89 = *v85;
            while (*(_DWORD *)v88 < v89)
            {
              v88 += 16;
              if (v88 == v87)
                goto LABEL_99;
            }
            if (*(_DWORD *)v88 == v89)
              *(_DWORD *)(a1[129] + 4 * (v85[1] + *((_DWORD *)a1 + 262) * v83[1])) = *(_DWORD *)(*(_QWORD *)(v75 + 48)
                                                                                                 + 4
                                                                                                 * *(_QWORD *)(v88 + 8));
            if (v88 == v87)
              break;
            v85 += 2;
          }
          while (v85 != v86);
        }
LABEL_99:
        v83 += 2;
      }
      while (v83 != v84);
      v83 = (unsigned int *)a1[114];
      v84 = (unsigned int *)a1[115];
    }
    if (v83 != v84)
    {
      v90 = (unsigned int *)a1[117];
      for (j = (unsigned int *)a1[118]; v90 != j; v90 += 2)
      {
        v92 = (unsigned int *)a1[114];
        v93 = (unsigned int *)a1[115];
        if (v92 != v93)
        {
          v95 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v90);
          v94 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v90 + 8);
          do
          {
            if (v95 == v94)
              break;
            v96 = *v92;
            while (*(_DWORD *)v95 < v96)
            {
              v95 += 16;
              if (v95 == v94)
                goto LABEL_116;
            }
            if (*(_DWORD *)v95 == v96)
              *(_DWORD *)(a1[126] + 4 * (v92[1] + *((_DWORD *)a1 + 256) * v90[1])) = *(_DWORD *)(*(_QWORD *)(v75 + 48)
                                                                                                 + 4
                                                                                                 * *(_QWORD *)(v95 + 8));
            if (v95 == v94)
              break;
            v92 += 2;
          }
          while (v92 != v93);
        }
LABEL_116:
        ;
      }
    }
LABEL_129:
    sub_207D8C65C((uint64_t)v513, a1 + 129);
    sub_207D89F58((uint64_t)(a1 + 75), (char **)a1 + 105);
    v505 = (unsigned int **)(a1 + 114);
    v509 = (uint64_t)(a1 + 123);
    v97 = *((unsigned int *)a1 + 161);
    if ((_DWORD)v97)
    {
      for (k = 0; k < v97; ++k)
      {
        v100 = (uint64_t *)(a1[90] + 24 * k);
        v99 = *v100;
        v101 = v100[1];
        if (*v100 != v101)
        {
          v102 = a1[86];
          v103 = a1[85];
          v104 = a1[89];
          do
          {
            v105 = ((v102 - v103) << 6) - 1;
            if (v102 == v103)
              v105 = 0;
            v106 = a1[88] + v104;
            if (v105 == v106)
            {
              sub_207D8BD2C(a1 + 84);
              v103 = a1[85];
              v102 = a1[86];
              v106 = a1[89] + a1[88];
            }
            *(_QWORD *)(*(_QWORD *)(v103 + ((v106 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v106 & 0x1FF)) = *(_QWORD *)(v99 + 8);
            v104 = a1[89] + 1;
            a1[89] = v104;
            v99 += 16;
          }
          while (v99 != v101);
          v99 = *v100;
          v97 = *((unsigned int *)a1 + 161);
        }
        v100[1] = v99;
      }
    }
    v107 = *((unsigned int *)a1 + 154);
    if ((_DWORD)v107)
      bzero((void *)a1[75], 4 * v107);
    v108 = *((unsigned __int8 *)a1 + 776);
    v109 = (*(uint64_t (**)(_QWORD *))(a1[71] + 40))(v504);
    if (v108)
      sub_207D8A92C(v109, a1 + 105, (uint64_t)(a1 + 132), v505);
    else
      v110.n128_f32[0] = sub_207D8A71C(v109, a1 + 105, (uint64_t)(a1 + 132), (uint64_t)(a1 + 75), v505);
    if (*((_BYTE *)a1 + 777))
    {
      LOBYTE(__p[0]) = *((_BYTE *)a1 + 776);
      v111 = a1[101];
      if (!v111)
        sub_207CA408C();
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, void **, void **, _QWORD *, _QWORD *, __n128))(*(_QWORD *)v111 + 48))(v111, v509, a1 + 120, v513, __p, a1 + 132, a1 + 75, v110) & 1) == 0)goto LABEL_7;
    }
    else if (!sub_207D8AA88(v509, (uint64_t)(a1 + 120), (uint64_t)v513, *((_BYTE *)a1 + 776) != 0, (uint64_t)(a1 + 132), (uint64_t)(a1 + 75)))
    {
LABEL_7:
      kdebug_trace();
LABEL_588:
      v414 = 1;
      goto LABEL_623;
    }
    if (*((_DWORD *)a1 + 161))
    {
      v112 = 0;
      v113 = a1 + 84;
      v501 = 1;
      v497 = a1 + 84;
      v502 = a1 + 81;
      while (1)
      {
        v114 = a1[90];
        v115 = (uint64_t *)(v114 + 24 * v112);
        v116 = *v115;
        v117 = v115[1];
        if (*v115 != v117)
        {
          v118 = a1[86];
          v119 = a1[85];
          v120 = a1[89];
          do
          {
            v121 = ((v118 - v119) << 6) - 1;
            if (v118 == v119)
              v121 = 0;
            v122 = a1[88] + v120;
            if (v121 == v122)
            {
              sub_207D8BD2C(v113);
              v119 = a1[85];
              v118 = a1[86];
              v122 = a1[89] + a1[88];
            }
            *(_QWORD *)(*(_QWORD *)(v119 + ((v122 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v122 & 0x1FF)) = *(_QWORD *)(v116 + 8);
            v120 = a1[89] + 1;
            a1[89] = v120;
            v116 += 16;
          }
          while (v116 != v117);
          v116 = *v115;
          v114 = a1[90];
        }
        v115[1] = v116;
        v123 = v112 + 1;
        v124 = *((_DWORD *)a1 + 160);
        v500 = v112 + 1;
        if (v124 < (int)v112 + 1)
          v123 = *((_DWORD *)a1 + 160);
        v125 = v502;
        if (v123)
          break;
LABEL_152:
        ++v501;
        v112 = v500;
        v113 = v497;
        if (v500 >= *((unsigned int *)a1 + 161))
          goto LABEL_216;
      }
      v126 = 0;
      v127 = (char **)(v114 + 24 * v112);
      v128 = v501;
      if (v124 < v501)
        v128 = *((_DWORD *)a1 + 160);
      v514 = v128;
      v510 = v112;
      while (1)
      {
        v130 = a1[132];
        v131 = *((_DWORD *)a1 + 268);
        v132 = *v127;
        v133 = v127[1];
        if (*v127 != v133)
        {
          while (*(_DWORD *)v132 < v126)
          {
            v132 += 16;
            if (v132 == v133)
              goto LABEL_176;
          }
        }
        if (v132 == v133)
          goto LABEL_176;
        if (*(_DWORD *)v132 != v126)
          break;
        v129 = (_DWORD *)(*v125 + 4 * *((_QWORD *)v132 + 1));
LABEL_168:
        *v129 = *(_DWORD *)(v130 + 4 * (v126 + v131 * (_DWORD)v112));
        ++v126;
        a1 = v518;
        if (v126 == v514)
          goto LABEL_152;
      }
      v133 = v132;
LABEL_176:
      v134 = v518[89];
      if (v134)
      {
        v135 = v518[85];
        v136 = v518[86];
        v137 = ((v136 - v135) << 6) - 1;
        v138 = v518[88];
        if (v136 == v135)
          v137 = 0;
        v129 = (_DWORD *)(v518[81]
                        + 4
                        * *(_QWORD *)(*(_QWORD *)(v135
                                                + (((unint64_t)(v138 + v134 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * ((v138 + v134 - 1) & 0x1FF)));
        v518[89] = v134 - 1;
        if ((unint64_t)(v137 - (v134 + v138) + 1) >= 0x400)
        {
          operator delete(*(void **)(v136 - 8));
          v518[86] -= 8;
        }
        goto LABEL_215;
      }
      v139 = (char *)v518[82];
      LODWORD(__p[0]) = 0;
      v140 = (char *)v518[81];
      v141 = v139 - v140;
      v142 = (v139 - v140) >> 2;
      v143 = &v140[(v139 - v140) & 0xFFFFFFFFFFFFFFFCLL];
      v144 = (char *)v518[83];
      if (v144 != v139)
      {
        if (v139 == v143)
        {
          *(_DWORD *)v139 = 0;
          v518[82] = v139 + 4;
        }
        else
        {
          v145 = v139 - 4;
          if ((unint64_t)v139 < 4)
          {
            v146 = v139;
          }
          else
          {
            v146 = v139;
            do
            {
              v163 = *(_DWORD *)v145;
              v145 += 4;
              *(_DWORD *)v146 = v163;
              v146 += 4;
            }
            while (v145 < v139);
          }
          v518[82] = v146;
          if (v139 != v143 + 4)
          {
            memmove(&v139[-4 * ((v139 - (v143 + 4)) >> 2)], v143, v139 - (v143 + 4));
            v143 = &v140[(v139 - v140) & 0xFFFFFFFFFFFFFFFCLL];
          }
          v164 = __p;
          if (v143 <= (char *)__p)
            v164 = (void **)((char *)__p + 4 * (v518[82] > (unint64_t)__p));
          *(_DWORD *)v143 = *(_DWORD *)v164;
        }
LABEL_214:
        v129 = (_DWORD *)(v518[82] - 4);
LABEL_215:
        v165 = ((uint64_t)v129 - *v125) >> 2;
        LODWORD(__p[0]) = v126;
        __p[1] = (void *)v165;
        sub_207D89100(v127, v133, __p);
        LODWORD(v112) = v510;
        goto LABEL_168;
      }
      v147 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 62)
        sub_207D0CD58();
      v148 = v144 - v140;
      if (v148 >> 1 > v147)
        v147 = v148 >> 1;
      if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
        v147 = 0x3FFFFFFFFFFFFFFFLL;
      v506 = v147;
      if (v147)
      {
        if (v147 >> 62)
LABEL_651:
          sub_207CA3AB8();
        v149 = (char *)operator new(4 * v147);
        v143 = &v140[(v139 - v140) & 0xFFFFFFFFFFFFFFFCLL];
        v142 = (v139 - v140) >> 2;
        v150 = v149;
        v151 = &v149[4 * v142];
        *(_DWORD *)v151 = 0;
        v152 = v151 + 4;
        if (v140 == v139)
          goto LABEL_204;
      }
      else
      {
        v150 = 0;
        v151 = (char *)(4 * v142);
        *(_DWORD *)(4 * v142) = 0;
        v152 = (char *)(4 * v142 + 4);
        if (v140 == v139)
          goto LABEL_204;
      }
      if ((unint64_t)(v141 - 4) >= 0x3C)
      {
        v153 = v143;
        if ((unint64_t)(&v140[v141 & 0xFFFFFFFFFFFFFFFCLL] - &v150[v141 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
        {
          v154 = ((unint64_t)(v141 - 4) >> 2) + 1;
          v155 = 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
          v153 = &v143[-v155];
          v151 -= v155;
          v156 = &v150[4 * v142 - 16];
          v157 = &v140[4 * v142 - 16];
          v158 = v154 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v159 = *(_OWORD *)v157;
            *((_OWORD *)v156 - 1) = *((_OWORD *)v157 - 1);
            *(_OWORD *)v156 = v159;
            v156 -= 32;
            v157 -= 32;
            v158 -= 8;
          }
          while (v158);
          if (v154 == (v154 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_204;
        }
      }
      else
      {
        v153 = v143;
      }
      do
      {
        v160 = *((_DWORD *)v153 - 1);
        v153 -= 4;
        *((_DWORD *)v151 - 1) = v160;
        v151 -= 4;
      }
      while (v153 != v140);
LABEL_204:
      v161 = v139 - v143;
      if (v161)
      {
        v162 = v152;
        memmove(v152, v143, v161);
        v152 = v162;
      }
      v518[81] = v151;
      v518[82] = &v152[v161];
      v518[83] = &v150[4 * v506];
      v125 = v502;
      if (v140)
        operator delete(v140);
      goto LABEL_214;
    }
LABEL_216:
    v166 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
    v515 = (void **)(a1 + 138);
    sub_207D8B07C(v166, v494, (uint64_t)(a1 + 138));
    if (v495 != (char **)(v496 + 48))
      sub_207CB9D2C(v495, *(char **)(v496 + 48), *(char **)(v496 + 56), (uint64_t)(*(_QWORD *)(v496 + 56) - *(_QWORD *)(v496 + 48)) >> 2);
    v167 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
    v168 = (void *)a1[138];
    a1[139] = v168;
    v169 = a1[108];
    v170 = a1[109];
    if (v169 == v170)
      goto LABEL_358;
    v171 = v167;
    v172 = v170 - v169;
    v173 = (v170 - v169) >> 2;
    if (v173 > (uint64_t)(a1[140] - (_QWORD)v168) >> 2)
    {
      if ((v172 & 0x8000000000000000) != 0)
        goto LABEL_658;
      v174 = (char *)operator new(v172);
      a1[138] = v174;
      a1[139] = v174;
      a1[140] = &v174[4 * v173];
      if (v168)
      {
        operator delete(v168);
        v173 = (uint64_t)(a1[109] - a1[108]) >> 2;
      }
    }
    v503 = (void **)(v171 + 152);
    v176 = *(_BYTE **)(v171 + 152);
    v175 = *(_BYTE **)(v171 + 160);
    v177 = (v175 - v176) >> 2;
    v178 = v177 + v173;
    if (v177 + v173 <= (uint64_t)(*(_QWORD *)(v171 + 168) - (_QWORD)v176) >> 2)
    {
      v180 = *(char **)(v171 + 160);
      v181 = *(char **)(v171 + 152);
      goto LABEL_257;
    }
    if (!(v178 >> 62))
    {
      v179 = operator new(4 * v178);
      v180 = &v179[4 * v177];
      v181 = v180;
      if (v175 == v176)
        goto LABEL_255;
      v182 = v175 - v176 - 4;
      if (v182 >= 0x2C)
      {
        v181 = &v179[4 * v177];
        if ((unint64_t)(v176 - v179) >= 0x20)
        {
          v194 = (v182 >> 2) + 1;
          v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
          v196 = &v175[-v195];
          v181 = &v180[-v195];
          v197 = &v179[4 * v177 - 16];
          v198 = (__int128 *)(v175 - 16);
          v199 = v194 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v200 = *v198;
            *(v197 - 1) = *(v198 - 1);
            *v197 = v200;
            v197 -= 2;
            v198 -= 2;
            v199 -= 8;
          }
          while (v199);
          v175 = v196;
          if (v194 == (v194 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_255:
            *(_QWORD *)(v171 + 152) = v181;
            *(_QWORD *)(v171 + 160) = v180;
            *(_QWORD *)(v171 + 168) = &v179[4 * v178];
            if (v176)
            {
              operator delete(v176);
              v181 = *(char **)(v171 + 152);
              v180 = *(char **)(v171 + 160);
            }
LABEL_257:
            v202 = (char *)a1[108];
            v511 = (char *)a1[109];
            if (v181 == v180)
            {
              v203 = 0;
            }
            else
            {
              v203 = 0;
              while (*(_DWORD *)v181 <= *(_DWORD *)v202)
              {
                v181 += 4;
                ++v203;
                if (v181 == v180)
                  goto LABEL_264;
              }
              v180 = v181;
            }
LABEL_264:
            v507 = v171;
            if (v202 == v511)
            {
LABEL_265:
              v204 = (char *)a1[138];
              v205 = (char *)a1[139];
              if (v204 != v205)
              {
                v206 = v205 - v204;
                if (*(_QWORD *)(v171 + 40))
                {
                  sub_207D8DB64(v171 + 32, v204, v205, v206 >> 2);
                  sub_207D8DF94(v171 + 32, (char *)a1[138], (char *)a1[139]);
                }
                else
                {
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)(v171 + 32) + 24))(v171 + 32, (unint64_t)v206 >> 2, (unint64_t)v206 >> 2);
                }
                __p[0] = 0;
                __p[1] = 0;
                v531 = 0;
                v228 = (unsigned int *)a1[139];
                v229 = (unsigned int *)a1[138];
                v230 = (char *)v228 - (char *)v229;
                if (v228 != v229)
                {
                  if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_655:
                    sub_207CA420C();
                  v231 = (char *)operator new(2 * v230);
                  __p[0] = v231;
                  __p[1] = v231;
                  v531 = &v231[8 * (v230 >> 2)];
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v233 = *v229;
                        v234 = (char *)__p[0];
                        if (__p[0] == v231 || *((_DWORD *)v231 - 1) != (_DWORD)v233)
                          break;
                        *((_DWORD *)v231 - 1) = v233 + 1;
                        if (++v229 == v228)
                          goto LABEL_332;
                      }
                      v235 = (v233 + 1);
                      if (v231 >= v531)
                        break;
                      *(_QWORD *)v231 = v233 | (v235 << 32);
                      v232 = v231 + 8;
LABEL_298:
                      __p[1] = v232;
                      v231 = (char *)v232;
                      if (++v229 == v228)
                        goto LABEL_332;
                    }
                    v236 = v231 - (char *)__p[0];
                    v237 = (v231 - (char *)__p[0]) >> 3;
                    v238 = v237 + 1;
                    if ((unint64_t)(v237 + 1) >> 61)
                      goto LABEL_655;
                    v239 = v531 - (char *)__p[0];
                    if ((v531 - (char *)__p[0]) >> 2 > v238)
                      v238 = v239 >> 2;
                    v240 = (unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v238;
                    if (!v240)
                      break;
                    if (v240 >> 61)
                      sub_207CA3AB8();
                    v241 = operator new(8 * v240);
                    v242 = (uint64_t *)&v241[8 * v237];
                    *v242 = v233 | (v235 << 32);
                    v232 = v242 + 1;
                    if (v234 != v231)
                      goto LABEL_315;
LABEL_319:
                    __p[0] = v242;
                    v531 = &v241[8 * v240];
                    if (!v231)
                      goto LABEL_298;
                    operator delete(v231);
                    __p[1] = v232;
                    v231 = (char *)v232;
                    if (++v229 == v228)
                    {
LABEL_332:
                      v252 = __p[0];
                      v171 = v507;
                      goto LABEL_334;
                    }
                  }
                  v241 = 0;
                  v242 = (uint64_t *)(8 * v237);
                  *(_QWORD *)(8 * v237) = v233 | (v235 << 32);
                  v232 = (void *)(8 * v237 + 8);
                  if (v234 == v231)
                    goto LABEL_319;
LABEL_315:
                  if ((unint64_t)(v236 - 8) >= 0x168)
                  {
                    v245 = (v231 - 8 - v234) & 0xFFFFFFFFFFFFFFF8;
                    if (&v241[v236 - 8 - v245] > &v241[v236 - 8])
                    {
                      v243 = v231;
                    }
                    else if (&v231[-v245 - 8] > v231 - 8)
                    {
                      v243 = v231;
                    }
                    else if ((unint64_t)(v234 - v241) >= 0x20)
                    {
                      v246 = ((unint64_t)(v236 - 8) >> 3) + 1;
                      v247 = 8 * (v246 & 0x3FFFFFFFFFFFFFFCLL);
                      v243 = &v231[-v247];
                      v242 = (uint64_t *)((char *)v242 - v247);
                      v248 = &v241[8 * v237 - 16];
                      v249 = (__int128 *)(v231 - 16);
                      v250 = v246 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v251 = *v249;
                        *(v248 - 1) = *(v249 - 1);
                        *v248 = v251;
                        v248 -= 2;
                        v249 -= 2;
                        v250 -= 4;
                      }
                      while (v250);
                      if (v246 == (v246 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_318;
                    }
                    else
                    {
                      v243 = v231;
                    }
                  }
                  else
                  {
                    v243 = v231;
                  }
                  do
                  {
                    v244 = *((_QWORD *)v243 - 1);
                    v243 -= 8;
                    *--v242 = v244;
                  }
                  while (v243 != v234);
LABEL_318:
                  v231 = (char *)__p[0];
                  goto LABEL_319;
                }
                v252 = 0;
                v231 = 0;
LABEL_334:
                v253 = v231 - (char *)v252;
                if (((v231 - (char *)v252) & 0x7FFFFFFF0) != 0)
                {
                  v254 = v252 + 2;
                  v255 = *v252;
                  v256 = (v253 >> 3) - 1;
                  do
                  {
                    v255 += *v254 - *(v254 - 1);
                    *v254 = v255;
                    v254 += 2;
                    --v256;
                  }
                  while (v256);
                }
                v257 = *(_DWORD *)(v171 + 24);
                v258 = v257 + ((a1[139] - a1[138]) >> 2);
                v259 = *(_QWORD *)(v171 + 8);
                if (v258 <= v259)
                {
                  if ((v253 & 0x7FFFFFFF8) != 0)
                  {
                    v268 = *(char **)v171;
                    v269 = (v253 >> 3) - 1;
                    do
                    {
                      v270 = v269;
                      v271 = v252[2 * v269];
                      if (4 * v257 != 4 * v271)
                        memmove(&v268[4 * v252[2 * v269 + 1]], (const void *)(*(_QWORD *)v171 + 4 * *(unsigned int *)(v171 + 28) + 4 * v271), 4 * v257 - 4 * v271);
                      --v269;
                      v257 = v271;
                    }
                    while (v270);
                    v259 = *(_QWORD *)(v171 + 8);
                  }
                  *(_DWORD *)(v171 + 16) = v258;
                  if (v259 < v258)
                  {
                    if (*(_QWORD *)v171)
                      operator delete[](*(void **)v171);
                    *(_QWORD *)v171 = 0;
                    *(_QWORD *)(v171 + 8) = ((4 * v258 + 31) & 0x7FFFFFFE0) >> 2;
                    *(_QWORD *)v171 = MEMORY[0x20BD028B4]();
                  }
                }
                else
                {
                  v260 = MEMORY[0x20BD028B4]((4 * (v257 + ((a1[139] - a1[138]) >> 2)) + 31) & 0x7FFFFFFE0, 32);
                  v261 = *(char **)v171;
                  if ((v253 & 0x7FFFFFFF8) != 0)
                  {
                    v262 = v253 >> 3;
                    v263 = &v261[4 * *(unsigned int *)(v507 + 28)];
                    v264 = v262 - 1;
                    do
                    {
                      v265 = v264;
                      v266 = v252[2 * v264];
                      v267 = &v263[4 * v266];
                      if (&v267[4 * v257 + -4 * v266] != v267)
                        memmove((void *)(v260 + 4 * v252[2 * v264 + 1]), v267, 4 * v257 - 4 * v266);
                      --v264;
                      v257 = v266;
                    }
                    while (v265);
                  }
                  v171 = v507;
                  *(_QWORD *)v507 = v260;
                  *(_QWORD *)(v507 + 8) = ((4 * v258 + 31) & 0x7FFFFFFE0uLL) >> 2;
                  *(_DWORD *)(v507 + 16) = v258;
                  if (v261)
                    operator delete[](v261);
                }
                *(_DWORD *)(v171 + 24) += (a1[139] - a1[138]) >> 2;
                if (v252)
                {
                  v193 = (void **)v252;
                  goto LABEL_357;
                }
              }
              goto LABEL_358;
            }
            while (1)
            {
              if (v180 != *(char **)(v171 + 160) && *(_DWORD *)v202 == *(_DWORD *)v180)
                goto LABEL_268;
              v207 = (char *)a1[139];
              v208 = a1[140];
              if ((unint64_t)v207 >= v208)
                break;
              *(_DWORD *)v207 = v203;
              v209 = (uint64_t)(v207 + 4);
LABEL_292:
              a1[139] = v209;
              v180 = sub_207D8D7DC(v503, v180, v202);
              v202 += 4;
              v171 = v507;
LABEL_268:
              v180 += 4;
              ++v203;
              if (v202 == v511)
                goto LABEL_265;
            }
            v210 = (char *)*v515;
            v211 = v207 - (_BYTE *)*v515;
            v212 = v211 >> 2;
            v213 = (v211 >> 2) + 1;
            if (v213 >> 62)
              goto LABEL_658;
            v214 = v208 - (_QWORD)v210;
            if (v214 >> 1 > v213)
              v213 = v214 >> 1;
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL)
              v215 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v215 = v213;
            if (v215)
            {
              if (v215 >> 62)
                goto LABEL_651;
              v216 = operator new(4 * v215);
              a1 = v518;
              v217 = &v216[4 * v212];
              *v217 = v203;
              v209 = (uint64_t)(v217 + 1);
              v218 = v207 - v210;
              if (v207 == v210)
                goto LABEL_290;
            }
            else
            {
              v216 = 0;
              v217 = (_DWORD *)(4 * v212);
              *(_DWORD *)(4 * v212) = v203;
              v209 = 4 * v212 + 4;
              v218 = v207 - v210;
              if (v207 == v210)
              {
LABEL_290:
                a1[138] = v217;
                a1[139] = v209;
                a1[140] = &v216[4 * v215];
                if (v210)
                  operator delete(v210);
                goto LABEL_292;
              }
            }
            v219 = v218 - 4;
            if (v219 < 0x2C)
              goto LABEL_661;
            if ((unint64_t)(v207 - &v216[v211]) < 0x20)
              goto LABEL_661;
            v220 = (v219 >> 2) + 1;
            v221 = 4 * (v220 & 0x7FFFFFFFFFFFFFF8);
            v222 = &v207[-v221];
            v217 = (_DWORD *)((char *)v217 - v221);
            v223 = &v216[4 * v212 - 16];
            v224 = v207 - 16;
            v225 = v220 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v226 = *(_OWORD *)v224;
              *(v223 - 1) = *((_OWORD *)v224 - 1);
              *v223 = v226;
              v223 -= 2;
              v224 -= 32;
              v225 -= 8;
            }
            while (v225);
            v207 = v222;
            if (v220 != (v220 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_661:
              do
              {
                v227 = *((_DWORD *)v207 - 1);
                v207 -= 4;
                *--v217 = v227;
              }
              while (v207 != v210);
            }
            goto LABEL_290;
          }
        }
      }
      else
      {
        v181 = &v179[4 * v177];
      }
      do
      {
        v201 = *((_DWORD *)v175 - 1);
        v175 -= 4;
        *((_DWORD *)v181 - 1) = v201;
        v181 -= 4;
      }
      while (v175 != v176);
      goto LABEL_255;
    }
LABEL_658:
    sub_207CA420C();
  }
  v24 = (*(uint64_t (**)(_QWORD *))(*v504 + 40))(v504);
  if (a1 + 105 != (_QWORD *)(v24 + 152))
    sub_207CB9D2C(a1 + 105, *(char **)(v24 + 152), *(char **)(v24 + 160), (uint64_t)(*(_QWORD *)(v24 + 160) - *(_QWORD *)(v24 + 152)) >> 2);
  v25 = (char *)a1[105];
  v26 = (char *)a1[106];
  if (v25 != v26)
  {
    v27 = *(char **)(v496 + 32);
    v28 = *v13;
    v29 = (char *)a1[105];
    while (v28 != v27)
    {
      v30 = *(_DWORD *)v29;
      if (*(_DWORD *)v29 >= *(_DWORD *)v28)
      {
        v29 += 4 * (*(_DWORD *)v28 >= v30);
        v28 += 4;
        if (v29 == v26)
          goto LABEL_230;
      }
      else
      {
        *(_DWORD *)v25 = v30;
        v25 += 4;
        v29 += 4;
        if (v29 == v26)
          goto LABEL_230;
      }
    }
    if (v29 == v25)
      goto LABEL_232;
    v183 = v26 - v29;
    memmove(v25, v29, v26 - v29);
    v25 += v183;
    v26 = (char *)a1[106];
LABEL_230:
    if (v25 != v26)
      a1[106] = v25;
  }
LABEL_232:
  v519 = 0;
  v520 = 0;
  v521 = 0;
  v184 = a1[95] - a1[94];
  if (v184)
  {
    sub_207CB9B90((uint64_t)&v519, v184 >> 2);
    v185 = (char *)a1[94];
    v186 = (char *)a1[95];
    v187 = (char *)v519;
    v188 = (void *)a1[106];
    __p[0] = *((void **)a1 + 105);
    __dst = v519;
    if (v185 == v186)
    {
      v189 = 0;
    }
    else
    {
      while (__p[0] != v188)
      {
        v190 = *(_DWORD *)v185;
        if (*(_DWORD *)v185 >= *(_DWORD *)__p[0])
        {
          v185 += 4 * (*(_DWORD *)__p[0] >= v190);
          __p[0] = (char *)__p[0] + 4;
          if (v185 == v186)
            goto LABEL_239;
        }
        else
        {
          v191 = (char *)__dst;
          *(_DWORD *)__dst = v190;
          v185 += 4;
          __dst = v191 + 4;
          if (v185 == v186)
          {
LABEL_239:
            v189 = 0;
            v187 = (char *)__dst;
            goto LABEL_244;
          }
        }
      }
      v187 = (char *)__dst;
      v189 = v186 - v185;
      if (v186 != v185)
        memmove(__dst, v185, v186 - v185);
    }
  }
  else
  {
    v189 = 0;
    v187 = 0;
  }
LABEL_244:
  v192 = (void **)&v187[v189];
  if (v192 != v520)
    v520 = v192;
  __p[0] = 0;
  __p[1] = 0;
  v531 = 0;
  sub_207D8B07C((uint64_t)(a1 + 75), &v519, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v193 = v519;
  if (v519)
  {
    v520 = v519;
LABEL_357:
    operator delete(v193);
  }
LABEL_358:
  sub_207D89838((uint64_t)(a1 + 2));
  if (*((_BYTE *)a1 + 161))
  {
    v272 = (_QWORD *)a1[14];
    v273 = (_QWORD *)a1[15];
    if (v272 == v273)
    {
      v274 = (_QWORD *)a1[14];
    }
    else
    {
      v274 = (_QWORD *)a1[15];
      v275 = v272 + 13;
      while (!*((_BYTE *)v275 - 8))
      {
        v46 = v275 == v273;
        v275 += 13;
        if (v46)
          goto LABEL_379;
      }
      --*(_DWORD *)(*(v275 - 7) + 8);
      *(v275 - 7) = 0;
      v276 = (int64x2_t)xmmword_208235340;
      *((int64x2_t *)a1 + 9) = vaddq_s64(*((int64x2_t *)a1 + 9), (int64x2_t)xmmword_208235340);
      v277 = v275 - 13;
      if (v275 - 13 != v273)
      {
        if (v275 == v273)
        {
          v274 = v275 - 13;
        }
        else
        {
          v274 = v275 - 13;
          do
          {
            while (1)
            {
              v278 = v275;
              if (!*((_BYTE *)v277 + 200))
                break;
              --*(_DWORD *)(v277[19] + 8);
              v277[19] = 0;
              *((int64x2_t *)a1 + 9) = vaddq_s64(*((int64x2_t *)a1 + 9), v276);
              v275 += 13;
              v277 = v278;
              if (v278 + 13 == v273)
                goto LABEL_379;
            }
            *v274 = *v275;
            v274[1] = v277[14];
            v279 = v277[15];
            *((_DWORD *)v274 + 6) = *((_DWORD *)v277 + 32);
            v274[2] = v279;
            *(_QWORD *)((char *)v274 + 28) = *(_QWORD *)((char *)v277 + 132);
            v274[5] = v277[18];
            v274[6] = v277[19];
            v274[7] = v277[20];
            v274[8] = v277[21];
            LODWORD(v279) = *((_DWORD *)v277 + 44);
            *((_BYTE *)v274 + 76) = *((_BYTE *)v277 + 180);
            *((_DWORD *)v274 + 18) = v279;
            v280 = *(_OWORD *)(v277 + 23);
            v277[23] = 0;
            v277[24] = 0;
            v281 = (std::__shared_weak_count *)v274[11];
            *((_OWORD *)v274 + 5) = v280;
            if (v281)
            {
              p_shared_owners = (unint64_t *)&v281->__shared_owners_;
              do
                v283 = __ldaxr(p_shared_owners);
              while (__stlxr(v283 - 1, p_shared_owners));
              if (!v283)
              {
                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                std::__shared_weak_count::__release_weak(v281);
                v276 = (int64x2_t)xmmword_208235340;
              }
            }
            *((_BYTE *)v274 + 96) = *((_BYTE *)v277 + 200);
            v274 += 13;
            v275 = v278 + 13;
            v277 = v278;
          }
          while (v278 + 13 != v273);
        }
      }
    }
LABEL_379:
    v284 = (_QWORD *)a1[15];
    if (v274 != v284)
    {
      while (v284 != v274)
      {
        v285 = (std::__shared_weak_count *)*(v284 - 2);
        if (v285)
        {
          v286 = (unint64_t *)&v285->__shared_owners_;
          do
            v287 = __ldaxr(v286);
          while (__stlxr(v287 - 1, v286));
          if (!v287)
          {
            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
            std::__shared_weak_count::__release_weak(v285);
          }
        }
        v284 -= 13;
      }
      a1[15] = v274;
    }
  }
  v289 = a1[2];
  v288 = a1[3];
  if (v288 != v289)
  {
    v516 = (uint64_t)(a1 + 5);
    v290 = -16 - v288;
    v291 = a1[3];
    while (1)
    {
      while (1)
      {
        v292 = *(_QWORD *)(v291 - 8);
        v291 -= 16;
        if ((*(_BYTE *)(v292 + 4) & 6) != 0)
          break;
        *(_BYTE *)(v292 + 4) = 0;
        v290 += 16;
        if (v291 == v289)
          goto LABEL_450;
      }
      v293 = *(void **)(v292 + 224);
      if (v293)
      {
        *(_QWORD *)(v292 + 232) = v293;
        operator delete(v293);
      }
      v294 = *(void **)(v292 + 112);
      if (v294)
      {
        *(_QWORD *)(v292 + 120) = v294;
        operator delete(v294);
      }
      v295 = *((_DWORD *)a1 + 18);
      if (!v295)
      {
        v303 = (char *)a1[11];
        v302 = (char *)a1[12];
        v304 = (char *)(v302 - v303);
        v305 = (v302 - v303) >> 3;
        if (-v305 != 1)
          goto LABEL_405;
LABEL_403:
        a1[12] = v303;
        a1[10] = 0;
        *((_DWORD *)a1 + 18) = 0;
        goto LABEL_437;
      }
      v296 = v295 - 1;
      v297 = a1[10];
      v298 = v297 - 1;
      if (*(_QWORD *)(a1[6] + 16 * (v295 - 1)) + ((v297 - 1) << 8) != v292)
      {
        v299 = 0;
        v300 = v295 - 1;
        if (v300)
        {
          v301 = 8;
          do
          {
            v299 += v301;
            v301 *= 2;
            --v300;
          }
          while (v300);
        }
        v303 = (char *)a1[11];
        v302 = (char *)a1[12];
        v304 = (char *)(v302 - v303);
        v305 = (v302 - v303) >> 3;
        if (v299 + v297 - v305 != 1)
        {
LABEL_405:
          v306 = a1[13];
          if ((unint64_t)v302 < v306)
          {
            *(_QWORD *)v302 = v292;
            v307 = (uint64_t)(v302 + 8);
LABEL_436:
            a1[12] = v307;
            goto LABEL_437;
          }
          v310 = v305 + 1;
          if ((unint64_t)(v305 + 1) >> 61)
            sub_207CA420C();
          v311 = v306 - (_QWORD)v303;
          if (v311 >> 2 > v310)
            v310 = v311 >> 2;
          if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8)
            v312 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v312 = v310;
          if (v312)
          {
            if (v312 >> 61)
              goto LABEL_651;
            v313 = operator new(8 * v312);
            a1 = v518;
            v314 = (char *)v313 + 8 * v305;
            *v314 = v292;
            v307 = (uint64_t)(v314 + 1);
            v315 = (char *)(v302 - v303);
            if (v302 == v303)
              goto LABEL_434;
LABEL_427:
            v317 = (unint64_t)(v315 - 8);
            if (v317 < 0x58)
              goto LABEL_662;
            if ((unint64_t)(v302 - &v304[(_QWORD)v313]) < 0x20)
              goto LABEL_662;
            v318 = (v317 >> 3) + 1;
            v319 = 8 * (v318 & 0x3FFFFFFFFFFFFFFCLL);
            v320 = &v302[-v319];
            v314 = (_QWORD *)((char *)v314 - v319);
            v321 = (char *)v313 + 8 * v305 - 16;
            v322 = v302 - 16;
            v323 = v318 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v324 = *(_OWORD *)v322;
              *(v321 - 1) = *((_OWORD *)v322 - 1);
              *v321 = v324;
              v321 -= 2;
              v322 -= 32;
              v323 -= 4;
            }
            while (v323);
            v302 = v320;
            if (v318 != (v318 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_662:
              do
              {
                v325 = *((_QWORD *)v302 - 1);
                v302 -= 8;
                *--v314 = v325;
              }
              while (v302 != v303);
            }
            v302 = (char *)a1[11];
          }
          else
          {
            v313 = 0;
            v314 = (_QWORD *)(8 * v305);
            *(_QWORD *)(8 * v305) = v292;
            v307 = 8 * v305 + 8;
            v315 = (char *)(v302 - v303);
            if (v302 != v303)
              goto LABEL_427;
          }
LABEL_434:
          a1[11] = v314;
          a1[12] = v307;
          a1[13] = (char *)v313 + 8 * v312;
          if (v302)
            operator delete(v302);
          goto LABEL_436;
        }
        goto LABEL_403;
      }
      a1[10] = v298;
      if (v297 == 1)
      {
        *((_DWORD *)a1 + 18) = v296;
        if (v295 == 1)
        {
          if ((uint64_t)(a1[12] - a1[11]) >> 3)
            goto LABEL_437;
LABEL_425:
          sub_207D87094(v516);
          *((_DWORD *)a1 + 18) = 0;
          a1[10] = 0;
          a1[12] = a1[11];
          goto LABEL_437;
        }
        v298 = 8 << (v295 - 2);
        a1[10] = v298;
        v308 = 0;
        v309 = v295 - 2;
        if (v296 == 1)
          goto LABEL_424;
      }
      else
      {
        v308 = 0;
        v309 = v295 - 1;
        if (!v309)
          goto LABEL_424;
      }
      v316 = 8;
      do
      {
        v308 += v316;
        v316 *= 2;
        --v309;
      }
      while (v309);
LABEL_424:
      if (v308 + v298 == (uint64_t)(a1[12] - a1[11]) >> 3)
        goto LABEL_425;
LABEL_437:
      v326 = v291 + 16;
      v289 = a1[2];
      v327 = a1[3];
      if (v291 + 16 == v327)
      {
        v288 = v291;
        a1[3] = v291;
        v290 += 16;
        if (v291 == v289)
          goto LABEL_450;
      }
      else
      {
        v328 = v327 - v291 - 32;
        v288 = v291;
        if (v328 < 0x10)
          goto LABEL_663;
        v329 = (v328 >> 4) + 1;
        v330 = 16 * (v329 & 0x1FFFFFFFFFFFFFFELL);
        v288 = v291 + v330;
        v326 += v330;
        v331 = (((unint64_t)(v327 + v290) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
        v332 = v289 + 16 * ((v291 - v289) >> 4) + 24;
        do
        {
          v333 = *(_DWORD *)(v332 + 8);
          *(_DWORD *)(v332 - 24) = *(_DWORD *)(v332 - 8);
          *(_DWORD *)(v332 - 8) = v333;
          v334 = *(_QWORD *)(v332 + 16);
          *(_QWORD *)(v332 - 16) = *(_QWORD *)v332;
          *(_QWORD *)v332 = v334;
          v332 += 32;
          v331 -= 2;
        }
        while (v331);
        if (v329 != (v329 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_663:
          do
          {
            *(_DWORD *)v288 = *(_DWORD *)v326;
            *(_QWORD *)(v288 + 8) = *(_QWORD *)(v326 + 8);
            v288 += 16;
            v326 += 16;
          }
          while (v326 != v327);
        }
        a1[3] = v288;
        v290 += 16;
        if (v291 == v289)
          goto LABEL_450;
      }
    }
  }
  v291 = a1[3];
LABEL_450:
  *((_WORD *)a1 + 80) = 1;
  a1[22] = a1[21];
  a1[25] = a1[24];
  a1[28] = a1[27];
  if (v291 != v288)
  {
    v335 = 0;
    do
    {
      v336 = *(_QWORD *)(v291 + 8);
      if (*(_BYTE *)(v336 + 20))
        v337 = v335;
      else
        v337 = -1;
      v335 += *(unsigned __int8 *)(v336 + 20);
      *(_DWORD *)v336 = v337;
      v291 += 16;
    }
    while (v291 != v288);
  }
  v508 = *((_DWORD *)a1 + 69);
  v338 = (int **)a1[59];
  v339 = (_QWORD *)a1[60];
  v517 = (char **)(v339 + 19);
  v340 = (uint64_t)v339;
  if (*((_BYTE *)v338 + 144))
  {
    v341 = (void *)v339[19];
    v339[20] = v341;
    if (v339[21] - (_QWORD)v341 <= 0xFFuLL)
    {
      v342 = (char *)operator new(0x100uLL);
      v339[19] = v342;
      v339[20] = v342;
      v339[21] = v342 + 256;
      if (v341)
        operator delete(v341);
    }
    if (*((_BYTE *)v338 + 144))
    {
      v343 = (void *)v339[19];
      v339[20] = v343;
      v344 = ((unint64_t)((char *)v338[1] - (char *)*v338) >> 4);
      if (v344 > (uint64_t)(v339[21] - (_QWORD)v343) >> 2)
      {
        v345 = (char *)operator new(4 * v344);
        v339[19] = v345;
        v339[20] = v345;
        v339[21] = &v345[4 * v344];
        if (v343)
          operator delete(v343);
      }
      v347 = *v338;
      v346 = v338[1];
      if (*v338 != v346)
      {
        v512 = v338[1];
        while (1)
        {
          if (!*(_BYTE *)(*((_QWORD *)v347 + 1) + 20))
            goto LABEL_468;
          v349 = *v347;
          v351 = (char *)v339[20];
          v350 = v339[21];
          if ((unint64_t)v351 >= v350)
            break;
          *(_DWORD *)v351 = v349;
          v348 = (uint64_t)(v351 + 4);
LABEL_467:
          v339[20] = v348;
LABEL_468:
          v347 += 4;
          if (v347 == v346)
            goto LABEL_492;
        }
        v352 = *v517;
        v353 = v351 - *v517;
        v354 = v353 >> 2;
        v355 = (v353 >> 2) + 1;
        if (v355 >> 62)
          goto LABEL_658;
        v356 = v350 - (_QWORD)v352;
        if (v356 >> 1 > v355)
          v355 = v356 >> 1;
        if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFFCLL)
          v357 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v357 = v355;
        if (v357)
        {
          if (v357 >> 62)
            goto LABEL_651;
          v358 = operator new(4 * v357);
          v359 = &v358[4 * v354];
          *v359 = v349;
          v348 = (uint64_t)(v359 + 1);
          v360 = v351 - v352;
          if (v351 != v352)
          {
LABEL_480:
            v361 = v360 - 4;
            a1 = v518;
            if (v361 < 0x2C)
              goto LABEL_664;
            if ((unint64_t)(v351 - v358 - v353) < 0x20)
              goto LABEL_664;
            v362 = (v361 >> 2) + 1;
            v363 = 4 * (v362 & 0x7FFFFFFFFFFFFFF8);
            v364 = &v351[-v363];
            v359 = (_DWORD *)((char *)v359 - v363);
            v365 = &v358[4 * v354 - 16];
            v366 = v351 - 16;
            v367 = v362 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v368 = *(_OWORD *)v366;
              *(v365 - 1) = *((_OWORD *)v366 - 1);
              *v365 = v368;
              v365 -= 2;
              v366 -= 32;
              v367 -= 8;
            }
            while (v367);
            v351 = v364;
            if (v362 != (v362 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_664:
              do
              {
                v369 = *((_DWORD *)v351 - 1);
                v351 -= 4;
                *--v359 = v369;
              }
              while (v351 != v352);
            }
            v339[19] = v359;
            v339[20] = v348;
            v339[21] = &v358[4 * v357];
            if (!v352)
              goto LABEL_488;
LABEL_487:
            operator delete(v352);
LABEL_488:
            v346 = v512;
            goto LABEL_467;
          }
        }
        else
        {
          v358 = 0;
          v359 = (_DWORD *)(4 * v354);
          *(_DWORD *)(4 * v354) = v349;
          v348 = 4 * v354 + 4;
          v360 = v351 - v352;
          if (v351 != v352)
            goto LABEL_480;
        }
        a1 = v518;
        v339[19] = v359;
        v339[20] = v348;
        v339[21] = &v358[4 * v357];
        if (!v352)
          goto LABEL_488;
        goto LABEL_487;
      }
    }
LABEL_492:
    v340 = a1[60];
  }
  sub_207D89F58(v340, v517);
  v370 = (unsigned int *)a1[61];
  a1[62] = v370;
  a1[64] = 0;
  v371 = (unsigned int *)v339[19];
  v372 = (unsigned int *)v339[20];
  if (v371 == v372)
  {
    v373 = v370;
    v385 = v508;
    if (v508 != 1)
      goto LABEL_514;
LABEL_522:
    v391 = a1[61];
    v392 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v373 - v391) >> 2));
    if (v373 == (unsigned int *)v391)
      v393 = 0;
    else
      v393 = v392;
    sub_207D8FC08(v391, v373, v393, 1);
    v389 = (unsigned int *)a1[61];
    v390 = (unsigned int *)a1[62];
    if (v389 == v390)
      goto LABEL_528;
LABEL_526:
    v394 = 0;
    do
    {
      v395 = v389[2];
      v389[2] = v394;
      v396 = *v389;
      v389 += 3;
      v394 += v395;
      ++a1[v396 + 64];
    }
    while (v389 != v390);
    goto LABEL_528;
  }
  do
  {
    while (1)
    {
      v374 = *v371;
      v375 = a1[63];
      if ((unint64_t)v370 >= v375)
        break;
      *v370 = 0;
      v370[1] = v374;
      v373 = v370 + 3;
      v370[2] = 1;
      a1[62] = v370 + 3;
      ++v371;
      v370 += 3;
      if (v371 == v372)
        goto LABEL_513;
    }
    v376 = (_DWORD *)a1[61];
    v377 = 0xAAAAAAAAAAAAAAABLL * (v370 - v376) + 1;
    if (v377 > 0x1555555555555555)
      sub_207CA420C();
    v378 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v375 - (_QWORD)v376) >> 2);
    if (2 * v378 > v377)
      v377 = 2 * v378;
    if (v378 >= 0xAAAAAAAAAAAAAAALL)
      v379 = 0x1555555555555555;
    else
      v379 = v377;
    if (v379)
    {
      if (v379 > 0x1555555555555555)
        goto LABEL_651;
      v380 = (char *)operator new(12 * v379);
      a1 = v518;
    }
    else
    {
      v380 = 0;
    }
    v381 = &v380[4 * (v370 - v376)];
    *(_DWORD *)v381 = 0;
    *((_DWORD *)v381 + 1) = v374;
    *((_DWORD *)v381 + 2) = 1;
    v382 = v381;
    if (v370 != v376)
    {
      do
      {
        v383 = *(_QWORD *)(v370 - 3);
        v370 -= 3;
        v384 = v370[2];
        *(_QWORD *)(v382 - 12) = v383;
        v382 -= 12;
        *((_DWORD *)v382 + 2) = v384;
      }
      while (v370 != v376);
      v370 = (unsigned int *)a1[61];
    }
    v373 = (unsigned int *)(v381 + 12);
    a1[61] = v382;
    a1[62] = v381 + 12;
    a1[63] = &v380[12 * v379];
    if (v370)
      operator delete(v370);
    a1[62] = v373;
    ++v371;
    v370 = v373;
  }
  while (v371 != v372);
LABEL_513:
  v385 = v508;
  if (v508 == 1)
    goto LABEL_522;
LABEL_514:
  if (!v385)
  {
    v386 = a1[61];
    v387 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v373 - v386) >> 2));
    if (v373 == (unsigned int *)v386)
      v388 = 0;
    else
      v388 = v387;
    sub_207D8E1E8(v386, v373, v388, 1);
  }
  v389 = (unsigned int *)a1[61];
  v390 = (unsigned int *)a1[62];
  if (v389 != v390)
    goto LABEL_526;
LABEL_528:
  a1[66] = a1[65];
  a1[69] = a1[68];
  v397 = a1[64];
  if (!v397)
    goto LABEL_536;
  sub_207CB9B90((uint64_t)(a1 + 65), v397);
  v398 = (int32x4_t *)a1[65];
  v399 = (int32x4_t *)a1[66];
  if (v398 == v399)
    goto LABEL_536;
  v400 = (char *)v399 - (char *)v398 - 4;
  if (v400 >= 0x1C)
  {
    v403 = (v400 >> 2) + 1;
    v401 = v403 & 0x7FFFFFFFFFFFFFF8;
    v402 = (int32x4_t *)((char *)v398 + 4 * (v403 & 0x7FFFFFFFFFFFFFF8));
    v404 = (int32x4_t)xmmword_208235350;
    v405 = v398 + 1;
    v406.i64[0] = 0x400000004;
    v406.i64[1] = 0x400000004;
    v407.i64[0] = 0x800000008;
    v407.i64[1] = 0x800000008;
    v408 = v403 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v405[-1] = v404;
      *v405 = vaddq_s32(v404, v406);
      v404 = vaddq_s32(v404, v407);
      v405 += 2;
      v408 -= 8;
    }
    while (v408);
    if (v403 == v401)
      goto LABEL_536;
  }
  else
  {
    LODWORD(v401) = 0;
    v402 = (int32x4_t *)a1[65];
  }
  do
  {
    v402->i32[0] = v401;
    v402 = (int32x4_t *)((char *)v402 + 4);
    LODWORD(v401) = v401 + 1;
  }
  while (v402 != v399);
LABEL_536:
  v409 = a1[64];
  v410 = (_DWORD *)a1[68];
  v411 = (uint64_t)(a1[69] - (_QWORD)v410) >> 2;
  if (v409 <= v411)
  {
    v10 = v498;
    v9 = v499;
    if (v409 < v411)
      a1[69] = &v410[v409];
  }
  else
  {
    sub_207CB9B90((uint64_t)(a1 + 68), v409 - v411);
    v410 = (_DWORD *)a1[68];
    v10 = v498;
    v9 = v499;
  }
  v412 = (_DWORD *)a1[61];
  v413 = (_DWORD *)a1[62];
  while (v412 != v413)
  {
    if (!*v412)
      *v410++ = v412[2];
    v412 += 3;
  }
  kdebug_trace();
LABEL_546:
  if (((v9 - v10) & 0x3FFFFFFFCLL) != 0)
    goto LABEL_547;
  v415 = a1[2];
  v416 = a1[3];
  if (*((_BYTE *)a1 + 160))
  {
    if (v415 == v416)
      goto LABEL_588;
    v417 = 0;
    do
    {
      v418 = *(_QWORD *)(v415 + 8);
      if ((*(_BYTE *)(v418 + 4) & 6) == 0)
        v417 += *(unsigned __int8 *)(v418 + 20);
      v415 += 16;
    }
    while (v415 != v416);
  }
  else
  {
    if (v415 == v416)
      goto LABEL_588;
    v431 = 0;
    v432 = 0;
    v417 = 0;
    do
    {
      v433 = *(_QWORD *)(v415 + 8);
      if ((*(_BYTE *)(v433 + 4) & 6) != 0)
      {
        v431 = 1;
        ++v432;
      }
      v417 += *(unsigned __int8 *)(v433 + 20);
      v415 += 16;
    }
    while (v415 != v416);
    if (v431)
    {
      a1[31] = a1[30];
      v434 = a1[14];
      v435 = a1[15];
      if (v434 == v435)
      {
        if (v417 >= v432)
          v417 -= v432;
        else
          v417 = 0;
      }
      else
      {
        do
        {
          v439 = *(_QWORD *)(v434 + 48);
          if (*(_BYTE *)(v434 + 96) || (*(_BYTE *)(v439 + 4) & 6) != 0)
            sub_207D8B464((uint64_t)(a1 + 30), v439);
          v434 += 104;
        }
        while (v434 != v435);
        v475 = (a1[31] - a1[30]) >> 2;
        if (v432 > v475)
          LODWORD(v475) = v432;
        v476 = v417 >= v475;
        v477 = v417 - v475;
        if (v476)
          v417 = v477;
        else
          v417 = 0;
        v478 = a1[14];
        v479 = a1[15];
        while (v478 != v479)
        {
          v480 = *(_QWORD *)(v478 + 48);
          if (*(_BYTE *)(v478 + 96) || (*(_BYTE *)(v480 + 4) & 6) != 0)
            ++*(_DWORD *)(v480 + 8);
          v478 += 104;
        }
      }
    }
  }
  if (!v417)
    goto LABEL_588;
  if (*((_BYTE *)a1 + 160) || (v436 = a1[2], v437 = a1[3], v436 == v437))
  {
LABEL_586:
    v438 = a1[19];
    goto LABEL_587;
  }
  while ((*(_BYTE *)(*(_QWORD *)(v436 + 8) + 4) & 6) == 0)
  {
    v436 += 16;
    if (v436 == v437)
      goto LABEL_586;
  }
  v482 = a1[14];
  v481 = a1[15];
  if (v482 == v481)
  {
    v438 = 0;
    goto LABEL_587;
  }
  v483 = v481 - v482 - 104;
  if (v483 >= 0x68)
  {
    v486 = 0;
    v487 = 0;
    v488 = v483 / 0x68 + 1;
    v485 = v482 + 104 * (v488 & 0x7FFFFFFFFFFFFFELL);
    v489 = (uint64_t *)(v482 + 152);
    v490 = v488 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      v491 = *(v489 - 13);
      v492 = *v489;
      v489 += 26;
      v493 = *(_BYTE *)(v492 + 4);
      if ((*(_BYTE *)(v491 + 4) & 6) == 0)
        ++v486;
      if ((v493 & 6) == 0)
        ++v487;
      v490 -= 2;
    }
    while (v490);
    v484 = v487 + v486;
    if (v488 == (v488 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_650;
  }
  else
  {
    v484 = 0;
    v485 = a1[14];
  }
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v485 + 48) + 4) & 6) == 0)
      ++v484;
    v485 += 104;
  }
  while (v485 != v481);
LABEL_650:
  v438 = 2 * v484;
LABEL_587:
  if (v438 < v417)
    goto LABEL_588;
LABEL_547:
  if (*((_BYTE *)a1 + 265))
  {
    v414 = 0;
  }
  else
  {
    v419 = (void *)a1[43];
    v420 = a1[44] - (_QWORD)v419;
    if (v420 >= 1)
      bzero(v419, 4 * (((unint64_t)v420 >> 2) - ((unint64_t)v420 > 3)) + 4);
    v421 = *((unsigned int *)a1 + 78);
    if ((_DWORD)v421)
      bzero((void *)a1[37], 4 * v421);
    if (((a1[95] - a1[94]) & 0x3FFFFFFFCLL) != 0)
    {
      kdebug_trace();
      sub_207D8A108((uint64_t)(a1 + 37), (uint64_t)(a1 + 75), (char **)a1 + 111, a1 + 114);
      v422 = (a1[95] - a1[94]) >> 2;
      *((_DWORD *)a1 + 244) = v422;
      v423 = v422;
      if (a1[121] < (unint64_t)v422)
      {
        v424 = (void *)a1[120];
        if (v424)
          operator delete[](v424);
        a1[120] = 0;
        a1[121] = ((4 * v423 + 31) & 0x7FFFFFFE0uLL) >> 2;
        a1[120] = MEMORY[0x20BD028B4]();
      }
      v425 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v504 + 24))(v504);
      v426 = (_DWORD *)a1[94];
      v427 = (_DWORD *)a1[95];
      if (v426 != v427)
      {
        v428 = 0;
        v429 = *v425;
        do
        {
          v429 -= 16;
          do
          {
            v430 = *(_DWORD *)(v429 + 16);
            v429 += 16;
          }
          while (*v426 != v430);
          *(_DWORD *)(a1[120] + 4 * v428++) = *(_DWORD *)(*(_QWORD *)(v429 + 8) + 136);
          ++v426;
        }
        while (v426 != v427);
        if (((a1[95] - a1[94]) & 0x3FFFFFFFCLL) != 0)
        {
          v440 = (void **)(a1 + 123);
          v441 = a1[93];
          v442 = *(_DWORD *)(v441 + 8);
          v443 = *(_DWORD *)(v441 + 12);
          *((_DWORD *)a1 + 250) = v442;
          *((_DWORD *)a1 + 251) = v443;
          v444 = v443 * (unint64_t)v442;
          if (a1[124] < v444)
          {
            if (*v440)
              operator delete[](*v440);
            a1[123] = 0;
            a1[124] = ((4 * v444 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
            a1[123] = MEMORY[0x20BD028B4]();
            v442 = *((_DWORD *)a1 + 250);
            v443 = *((_DWORD *)a1 + 251);
          }
          v445 = v442 * v443;
          if (v445)
            bzero(*v440, 4 * v445);
          (*(void (**)(_QWORD *, _QWORD *, _QWORD))(a1[79] + 64))(a1 + 79, a1 + 123, 0);
          sub_207D91628((uint64_t)(a1 + 123));
          v446 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(a1[71] + 32))(v504);
          v447 = (void **)(a1 + 135);
          v448 = *((unsigned int *)a1 + 148);
          v449 = v448;
          if ((_DWORD)v448 == *((_DWORD *)a1 + 274))
          {
            v450 = *v447;
          }
          else
          {
            *((_DWORD *)a1 + 274) = v448;
            v450 = (void *)a1[135];
            if (a1[136] < v448)
            {
              v451 = v448;
              if (v450)
              {
                operator delete[](v450);
                v451 = *((unsigned int *)a1 + 274);
                v449 = *((_DWORD *)a1 + 274);
              }
              a1[135] = 0;
              a1[136] = ((4 * v448 + 31) & 0x7FFFFFFE0) >> 2;
              v450 = (void *)MEMORY[0x20BD028B4]();
              *v447 = v450;
              v448 = v451;
            }
          }
          if (v449)
            bzero(v450, 4 * v448);
          v452 = (_DWORD *)a1[94];
          v453 = (_DWORD *)a1[95];
          if (v452 != v453)
          {
            v454 = 0;
            v455 = a1[72];
            v456 = *v446;
            do
            {
              v456 -= 16;
              do
              {
                v457 = *(_DWORD *)(v456 + 16);
                v456 += 16;
              }
              while (*v452 != v457);
              *((float *)*v447 + v454) = *(float *)(*(_QWORD *)(v456 + 8) + 136) - *(float *)(v455 + 4 * v454);
              ++v454;
              ++v452;
            }
            while (v452 != v453);
            v458 = (unsigned int *)a1[94];
            v459 = (unsigned int *)a1[95];
            if (v458 != v459)
            {
              v460 = 0;
              v461 = 0;
              v462 = (unsigned int *)a1[56];
              do
              {
                if (*v462 < *v458)
                {
                  do
                  {
                    v463 = v462[1];
                    ++v462;
                    ++v460;
                  }
                  while (v463 < *v458);
                }
                v464 = *((_DWORD *)a1 + 157) + v461;
                v465 = a1[123];
                v519 = (void **)vrev64_s32((int32x2_t)a1[125]);
                v520 = (void **)(v465 + 4 * v464);
                LODWORD(v521) = v464;
                v466 = (*((_DWORD *)a1 + 81) + v460);
                v467 = a1[37];
                LODWORD(v527) = *(_DWORD *)(v467 + 4 * v466);
                __dst = &v527;
                __p[1] = &v519;
                v531 = (char *)(a1 + 135);
                LODWORD(v532) = 1065353216;
                sub_207D927E8(&v529, (uint64_t)__p);
                v468.i32[0] = *(_DWORD *)__dst;
                v469.i32[0] = v529;
                *(_DWORD *)(v467 + 4 * v466) = vsub_f32(v468, v469).u32[0];
                ++v458;
                ++v461;
              }
              while (v458 != v459);
            }
          }
        }
      }
      kdebug_trace();
    }
    v470 = a1[60];
    __p[0] = *((void **)a1 + 59);
    __p[1] = a1 + 65;
    v531 = (char *)(a1 + 1);
    v532 = v470;
    v533 = 0;
    v534 = 2;
    v471 = 0uLL;
    memset(v535.__m_.__opaque, 0, sizeof(v535.__m_.__opaque));
    v535.__m_.__sig = 850045863;
    v526 = v470;
    v527 = v470;
    v472 = *((_QWORD *)__p[0] + 12);
    v473 = *((_QWORD *)__p[0] + 13);
    v519 = __p;
    v520 = (void **)&v525;
    v521 = a1 + 1;
    p_dst = &__dst;
    v523 = &v527;
    for (m = &v526; v472 != v473; v472 += 104)
      *(double *)v471.i64 = sub_207D88C18((uint64_t)&v519, v472, v471, v2, v3, v4, v5, v6, v7, v8);
    std::mutex::~mutex(&v535);
    v414 = 0;
    *(_WORD *)((char *)a1 + 265) = 1;
  }
LABEL_623:
  kdebug_trace();
  return v414;
}

void sub_207D85C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  void *v36;

  if (v36)
    operator delete(v36);
  sub_207D89808();
  sub_207D897D8();
  _Unwind_Resume(a1);
}

uint64_t sub_207D85D78(uint64_t a1, uint64_t a2)
{
  char v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  void *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  float v44;
  float *v45;
  unsigned int v46;
  uint64_t v47;
  float v48;
  unint64_t v49;
  uint64_t v50;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_DWORD *)(v6 + 8);
  if ((v5 & 1) != 0)
  {
    v8 = *(_DWORD *)(v6 + 12);
    *(_DWORD *)(a1 + 1152) = v7;
    *(_DWORD *)(a1 + 1156) = v8;
    v9 = v8 * (unint64_t)v7;
    if (*(_QWORD *)(a1 + 1144) < v9)
    {
      v10 = *(void **)(a1 + 1136);
      if (v10)
        operator delete[](v10);
      *(_QWORD *)(a1 + 1136) = 0;
      *(_QWORD *)(a1 + 1144) = ((4 * v9 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
      *(_QWORD *)(a1 + 1136) = MEMORY[0x20BD028B4]();
      v7 = *(_DWORD *)(a1 + 1152);
      v8 = *(_DWORD *)(a1 + 1156);
    }
    v11 = v7 * v8;
    if (v11)
      bzero(*(void **)(a1 + 1136), 4 * v11);
    v12 = *(unsigned int *)(a1 + 340);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *(unsigned int **)(a1 + 544);
      do
      {
        v15 = *(_QWORD *)(a1 + 416) + 24 * v13;
        v16 = *(unsigned int **)v15;
        v17 = *(unsigned int **)(v15 + 8);
        if (v16 != v17)
        {
          do
          {
            v18 = *v14;
            v19 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * *v16);
            if (*v14 <= v19)
              v20 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * *v16);
            else
              v20 = *v14;
            if (v18 >= v19)
              v18 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * *v16);
            *(_DWORD *)(*(_QWORD *)(a1 + 1136) + 4 * (v18 + *(_DWORD *)(a1 + 1152) * v20)) = *(_DWORD *)(*(_QWORD *)(a1 + 344) + 4 * *((_QWORD *)v16 + 1));
            v16 += 4;
          }
          while (v16 != v17);
          v12 = *(unsigned int *)(a1 + 340);
        }
        ++v13;
        ++v14;
      }
      while (v13 < v12);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1152) = v7;
    *(_DWORD *)(a1 + 1156) = v7;
    v21 = v7 * (unint64_t)v7;
    v22 = v7;
    if (*(_QWORD *)(a1 + 1144) < v21)
    {
      v23 = *(void **)(a1 + 1136);
      if (v23)
        operator delete[](v23);
      *(_QWORD *)(a1 + 1136) = 0;
      *(_QWORD *)(a1 + 1144) = ((4 * v21 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
      *(_QWORD *)(a1 + 1136) = MEMORY[0x20BD028B4]();
      v22 = *(_DWORD *)(a1 + 1152);
      v7 = *(_DWORD *)(a1 + 1156);
    }
    v24 = v22 * v7;
    if (v24)
      bzero(*(void **)(a1 + 1136), 4 * v24);
    v25 = *(unsigned int *)(a1 + 340);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v27 = *(unsigned int **)(a1 + 544);
      do
      {
        v28 = *(_QWORD *)(a1 + 416) + 24 * v26;
        v29 = *(unsigned int **)v28;
        v30 = *(unsigned int **)(v28 + 8);
        if (v29 != v30)
        {
          do
          {
            v31 = *v27;
            v32 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * *v29);
            if (*v27 >= v32)
              v33 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * *v29);
            else
              v33 = *v27;
            if (v31 <= v32)
              v31 = *(_DWORD *)(*(_QWORD *)(a1 + 544) + 4 * *v29);
            *(_DWORD *)(*(_QWORD *)(a1 + 1136) + 4 * (v31 + *(_DWORD *)(a1 + 1152) * v33)) = *(_DWORD *)(*(_QWORD *)(a1 + 344) + 4 * *((_QWORD *)v29 + 1));
            v29 += 4;
          }
          while (v29 != v30);
          v25 = *(unsigned int *)(a1 + 340);
        }
        ++v26;
        ++v27;
      }
      while (v26 < v25);
    }
  }
  if (*(_BYTE *)(a1 + 280))
  {
    v34 = *(_DWORD *)(a1 + 288);
    if (v34 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2);
      v41 = *(_DWORD *)(a1 + 1152);
      LODWORD(v42) = *(_DWORD *)(a1 + 1156);
      if (v42 >= v41)
        v42 = v41;
      else
        v42 = v42;
      if ((_DWORD)v42)
      {
        v43 = 0;
        v44 = *(float *)(a1 + 284);
        v45 = *(float **)a2;
        v46 = v41 + 1;
        v47 = *(_QWORD *)(a1 + 1136);
        do
        {
          v48 = *v45++;
          *(float *)(v47 + 4 * v43) = (float)(v44 * v48) + *(float *)(v47 + 4 * v43);
          v43 += v46;
          --v42;
        }
        while (v42);
      }
    }
    else if (!v34)
    {
      v35 = *(_DWORD *)(a1 + 1152);
      LODWORD(v36) = *(_DWORD *)(a1 + 1156);
      v36 = v36 >= v35 ? v35 : v36;
      if ((_DWORD)v36)
      {
        v37 = 0;
        v38 = *(float *)(a1 + 284);
        v39 = v35 + 1;
        v40 = *(_QWORD *)(a1 + 1136);
        do
        {
          *(float *)(v40 + 4 * v37) = v38 + *(float *)(v40 + 4 * v37);
          v37 += v39;
          --v36;
        }
        while (v36);
      }
    }
  }
  v49 = *(unsigned int *)(a1 + 1152);
  *(_DWORD *)(a2 + 16) = v49;
  if (*(_QWORD *)(a2 + 8) < v49)
  {
    if (*(_QWORD *)a2)
      operator delete[](*(void **)a2);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = ((4 * v49 + 31) & 0x7FFFFFFE0) >> 2;
    *(_QWORD *)a2 = MEMORY[0x20BD028B4]();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, a2);
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v50 = 1;
  }
  else
  {
    v50 = 0;
    *(_BYTE *)(a1 + 269) = 0;
  }
  kdebug_trace();
  return v50;
}

void sub_207D86188(_Unwind_Exception *a1)
{
  sub_207D928D0();
  _Unwind_Resume(a1);
}

void sub_207D8619C(_Unwind_Exception *a1)
{
  sub_207D928A0();
  _Unwind_Resume(a1);
}

uint64_t sub_207D861AC(uint64_t a1)
{
  return a1 + 1160;
}

double sub_207D861B4(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  int v4;
  void *v5;
  double result;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float *v25;
  unint64_t v26;
  float *v27;
  unint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  float32x4_t *v40;
  uint64_t i;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float *v51;
  uint64_t v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  float *v73;
  float v74;

  if (((*(_QWORD *)(a1 + 760) - *(_QWORD *)(a1 + 752)) & 0x3FFFFFFFCLL) == 0)
  {
    LODWORD(result) = 0;
    return result;
  }
  v2 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 568) + 32))(a1 + 568);
  v3 = *(unsigned int *)(a1 + 592);
  v4 = v3;
  if ((_DWORD)v3 == *(_DWORD *)(a1 + 1096))
  {
    v5 = *(void **)(a1 + 1080);
  }
  else
  {
    *(_DWORD *)(a1 + 1096) = v3;
    v5 = *(void **)(a1 + 1080);
    if (*(_QWORD *)(a1 + 1088) < v3)
    {
      v7 = v3;
      if (v5)
      {
        operator delete[](v5);
        v7 = *(unsigned int *)(a1 + 1096);
        v4 = *(_DWORD *)(a1 + 1096);
      }
      *(_QWORD *)(a1 + 1080) = 0;
      *(_QWORD *)(a1 + 1088) = ((4 * v3 + 31) & 0x7FFFFFFE0) >> 2;
      v5 = (void *)MEMORY[0x20BD028B4]();
      *(_QWORD *)(a1 + 1080) = v5;
      v3 = v7;
    }
  }
  if (v4)
    bzero(v5, 4 * v3);
  v8 = *(_DWORD **)(a1 + 752);
  v9 = *(_DWORD **)(a1 + 760);
  if (v8 != v9)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 576);
    v12 = *v2;
    do
    {
      v12 -= 16;
      do
      {
        v13 = *(_DWORD *)(v12 + 16);
        v12 += 16;
      }
      while (*v8 != v13);
      *(float *)(*(_QWORD *)(a1 + 1080) + 4 * v10) = *(float *)(*(_QWORD *)(v12 + 8) + 136)
                                                     - *(float *)(v11 + 4 * v10);
      ++v10;
      ++v8;
    }
    while (v8 != v9);
  }
  v14 = (void **)(a1 + 984);
  v15 = *(_QWORD *)(a1 + 744);
  v16 = *(_DWORD *)(v15 + 8);
  v17 = *(_DWORD *)(v15 + 12);
  *(_DWORD *)(a1 + 1000) = v16;
  *(_DWORD *)(a1 + 1004) = v17;
  v18 = v17 * (unint64_t)v16;
  if (*(_QWORD *)(a1 + 992) < v18)
  {
    if (*v14)
      operator delete[](*v14);
    *(_QWORD *)(a1 + 984) = 0;
    *(_QWORD *)(a1 + 992) = ((4 * v18 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
    *(_QWORD *)(a1 + 984) = MEMORY[0x20BD028B4]();
    v16 = *(_DWORD *)(a1 + 1000);
    v17 = *(_DWORD *)(a1 + 1004);
  }
  v19 = v16 * v17;
  if (v19)
    bzero(*v14, 4 * v19);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 632) + 64))(a1 + 632, a1 + 984, 0);
  sub_207D91628(a1 + 984);
  v20 = *(unsigned int *)(a1 + 1096);
  if (!(_DWORD)v20)
  {
    *(_QWORD *)&result = 0x8000000080000000;
    return result;
  }
  v21 = *(float **)(a1 + 1080);
  v22 = *(float **)(a1 + 600);
  v23 = *v21;
  v24 = *v21 * *v22;
  if ((_DWORD)v20 != 1)
  {
    v25 = v21 + 1;
    v26 = (v20 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
    if (v26 < 7)
    {
      v27 = *(float **)(a1 + 600);
LABEL_31:
      v35 = v27 + 1;
      do
      {
        v36 = *v25++;
        v37 = v36;
        v38 = *v35++;
        v24 = v24 + (float)(v37 * v38);
      }
      while (v25 != &v21[v20]);
      goto LABEL_33;
    }
    v28 = v26 + 1;
    v29 = (v26 + 1) & 0x7FFFFFFFFFFFFFF8;
    v25 += v29;
    v27 = &v22[v29];
    v30 = (float32x4_t *)(v22 + 5);
    v31 = (float32x4_t *)(v21 + 5);
    v32 = v29;
    do
    {
      v33 = vmulq_f32(v31[-1], v30[-1]);
      v34 = vmulq_f32(*v31, *v30);
      v24 = (float)((float)((float)((float)((float)((float)((float)(v24 + v33.f32[0]) + v33.f32[1]) + v33.f32[2])
                                          + v33.f32[3])
                                  + v34.f32[0])
                          + v34.f32[1])
                  + v34.f32[2])
          + v34.f32[3];
      v30 += 2;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v28 != v29)
      goto LABEL_31;
  }
LABEL_33:
  *(float *)&result = -v24;
  v39 = *(unsigned int *)(a1 + 1000);
  if (!(_DWORD)v39)
  {
    if (v20 >= 8)
    {
      v42 = v20 & 0xFFFFFFF8;
      v67 = (float32x4_t *)(v21 + 4);
      v68.i64[0] = 0x3F0000003F000000;
      v68.i64[1] = 0x3F0000003F000000;
      v69 = v42;
      do
      {
        v70 = vmulq_f32(vmulq_f32(v67[-1], v68), (float32x4_t)0);
        v71 = vmulq_f32(vmulq_f32(*v67, v68), (float32x4_t)0);
        *(float *)&result = (float)((float)((float)((float)((float)((float)((float)(*(float *)&result + v70.f32[0])
                                                                          + v70.f32[1])
                                                                  + v70.f32[2])
                                                          + v70.f32[3])
                                                  + v71.f32[0])
                                          + v71.f32[1])
                                  + v71.f32[2])
                          + v71.f32[3];
        v67 += 2;
        v69 -= 8;
      }
      while (v69);
      if (v42 == v20)
        return result;
    }
    else
    {
      v42 = 0;
    }
    v72 = v20 - v42;
    v73 = &v21[v42];
    do
    {
      v74 = *v73++;
      *(float *)&result = *(float *)&result + (float)((float)(v74 * 0.5) * 0.0);
      --v72;
    }
    while (v72);
    return result;
  }
  v40 = *(float32x4_t **)(a1 + 984);
  if ((_DWORD)v39 != 1)
  {
    v43 = 0;
    v44 = 0;
    v45 = (v39 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
    v46 = (v45 + 1) & 0x7FFFFFFFFFFFFFF8;
    while (1)
    {
      v47 = &v40->f32[(v39 * v44)];
      v49 = *v47;
      v48 = v47 + 1;
      v50 = v23 * v49;
      if (v45 >= 7)
      {
        v48 += v46;
        v52 = (v45 + 1) & 0x7FFFFFFFFFFFFFF8;
        v53 = (float32x4_t *)(v21 + 5);
        v54 = (float32x4_t *)((char *)v40 + 4 * v43 + 20);
        do
        {
          v55 = vmulq_f32(v54[-1], v53[-1]);
          v56 = vmulq_f32(*v54, *v53);
          v50 = (float)((float)((float)((float)((float)((float)((float)(v50 + v55.f32[0]) + v55.f32[1]) + v55.f32[2])
                                              + v55.f32[3])
                                      + v56.f32[0])
                              + v56.f32[1])
                      + v56.f32[2])
              + v56.f32[3];
          v53 += 2;
          v54 += 2;
          v52 -= 8;
        }
        while (v52);
        v51 = &v21[v46];
        if (v45 + 1 == v46)
          goto LABEL_40;
      }
      else
      {
        v51 = *(float **)(a1 + 1080);
      }
      v57 = v51 + 1;
      do
      {
        v58 = *v48++;
        v59 = v58;
        v60 = *v57++;
        v50 = v50 + (float)(v59 * v60);
      }
      while (v48 != &v40->f32[(v39 * v44) + v39]);
LABEL_40:
      *(float *)&result = *(float *)&result + (float)((float)(v21[v44++] * 0.5) * v50);
      v43 += v39;
      if (v44 == v20)
        return result;
    }
  }
  if (v20 < 8)
  {
    for (i = 0; i != v20; ++i)
LABEL_52:
      *(float *)&result = *(float *)&result + (float)((float)(v21[i] * 0.5) * (float)(v23 * v40->f32[i]));
    return result;
  }
  i = v20 & 0xFFFFFFF8;
  v61 = (float32x4_t *)(v21 + 4);
  v62 = v40 + 1;
  v63.i64[0] = 0x3F0000003F000000;
  v63.i64[1] = 0x3F0000003F000000;
  v64 = i;
  do
  {
    v65 = vmulq_f32(vmulq_f32(v61[-1], v63), vmulq_n_f32(v62[-1], v23));
    v66 = vmulq_f32(vmulq_f32(*v61, v63), vmulq_n_f32(*v62, v23));
    *(float *)&result = (float)((float)((float)((float)((float)((float)((float)(*(float *)&result + v65.f32[0])
                                                                      + v65.f32[1])
                                                              + v65.f32[2])
                                                      + v65.f32[3])
                                              + v66.f32[0])
                                      + v66.f32[1])
                              + v66.f32[2])
                      + v66.f32[3];
    v61 += 2;
    v62 += 2;
    v64 -= 8;
  }
  while (v64);
  if (i != v20)
    goto LABEL_52;
  return result;
}

uint64_t sub_207D86708(uint64_t result)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 16);
  v2 = 0.0;
  while (v1 != *(_QWORD *)(result + 24))
  {
    v3 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v3 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v3 + 20))
        v2 = v2 + (float)(*(float *)(v3 + 136) * *(float *)(v3 + 136));
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_207D86748(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  float v13;
  uint64_t result;

  kdebug_trace();
  v4 = *(uint64_t **)(a1 + 472);
  v5 = *v4;
  v6 = v4[1];
  while (v5 != v6)
  {
    v7 = *(unsigned int **)(v5 + 8);
    if (*v7 != -1)
    {
      v8 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v7 + 9) = *((_OWORD *)v7 + 2);
      *((_OWORD *)v7 + 10) = v8;
      v9 = *((_OWORD *)v7 + 4);
      v10 = *((_OWORD *)v7 + 5);
      *((_QWORD *)v7 + 26) = *((_QWORD *)v7 + 12);
      v7[54] = v7[26];
      v11 = (char *)*((_QWORD *)v7 + 14);
      v12 = (char *)*((_QWORD *)v7 + 15);
      *((_OWORD *)v7 + 11) = v9;
      *((_OWORD *)v7 + 12) = v10;
      sub_207D43AA8((_QWORD *)v7 + 28, v11, v12, (v12 - v11) >> 6);
      v13 = *((float *)v7 + 34);
      *((float *)v7 + 62) = v13;
      *((float *)v7 + 34) = v13 + *(float *)(*a2 + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 544) + 4 * *v7));
    }
    v5 += 16;
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 266) = *(_BYTE *)(a1 + 265);
  *(_BYTE *)(a1 + 269) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 267) = 0;
  return result;
}

void sub_207D86850(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

BOOL sub_207D8687C(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  int32x2_t v10;
  __int32 v11;

  v4 = (uint64_t)&a1[153];
  v5 = a1[144].u32[0];
  if (v5 != a1[144].i32[1])
    goto LABEL_11;
  v6 = v5 * v5;
  if (*(_QWORD *)&a1[155] >= v6)
  {
    if (!(_DWORD)v6)
    {
      v10 = vdup_n_s32(v5);
      goto LABEL_10;
    }
    v9 = (void *)a1[154];
    v8 = 4 * v6;
  }
  else
  {
    v7 = (void *)a1[154];
    if (v7)
      operator delete[](v7);
    a1[154] = 0;
    v8 = 4 * v6;
    a1[155] = (int32x2_t)(((v8 + 31) & 0x7FFFFFFE0) >> 2);
    v9 = (void *)MEMORY[0x20BD028B4]();
    a1[154] = (int32x2_t)v9;
  }
  memcpy(v9, *(const void **)&a1[142], v8);
  v10 = a1[144];
LABEL_10:
  a1[156] = v10;
  sub_207D92B24();
LABEL_11:
  v11 = a1[153].i32[0];
  a1[33].i8[0] = v11 == 0;
  if (v11)
    return 1;
  sub_207D92900(v4, a2, a2);
  return a1[33].i8[0] == 0;
}

uint64_t sub_207D86970()
{
  return 1;
}

uint64_t sub_207D86978()
{
  return 0;
}

void sub_207D86980(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24C073E98;
  v2 = (void *)a1[157];
  if (v2)
    operator delete[](v2);
  v3 = (void *)a1[154];
  if (v3)
    operator delete[](v3);
  v4 = (void *)sub_207D82BEC((uint64_t)a1);
  operator delete(v4);
}

float sub_207D869C8(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float result;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 336);
  if (!(_DWORD)v3)
    return 0.0;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 416);
  result = 0.0;
  do
  {
    v7 = *(unsigned int **)(v5 + 24 * v4);
    v8 = *(unsigned int **)(v5 + 24 * v4 + 8);
    if (v8 != v7)
    {
      while (1)
      {
        v9 = *v7;
        if (v4 <= v9)
          break;
        v7 += 4;
        if (v7 == v8)
          goto LABEL_3;
      }
      if (v7 != v8 && v4 == v9)
      {
        v10 = *(_QWORD *)(a1 + 344);
        if (v10)
        {
          LODWORD(a3) = *(_DWORD *)(v10 + 4 * *((_QWORD *)v7 + 1));
          a3 = COERCE_DOUBLE(vabs_f32(*(float32x2_t *)&a3));
          if (result < *(float *)&a3)
            result = *(float *)&a3;
        }
      }
    }
LABEL_3:
    ++v4;
  }
  while (v4 != v3);
  return result;
}

uint64_t sub_207D86A58(uint64_t result, float a2)
{
  *(float *)(result + 284) = a2;
  return result;
}

uint64_t sub_207D86A60(uint64_t result, char a2)
{
  *(_BYTE *)(result + 776) = a2;
  return result;
}

uint64_t sub_207D86A68(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 776);
}

BOOL sub_207D86A70(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 760) - *(_QWORD *)(a1 + 752)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_207D86A88(uint64_t a1)
{
  return a1 + 600;
}

uint64_t sub_207D86A90(uint64_t a1)
{
  return a1 + 600;
}

float sub_207D86A98(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = *(unsigned int *)(a1 + 312);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a2 + 16) = v4;
    if (*(_QWORD *)(a2 + 8) < v4)
    {
      if (*(_QWORD *)a2)
        operator delete[](*(void **)a2);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = ((4 * v4 + 31) & 0x7FFFFFFE0) >> 2;
      *(_QWORD *)a2 = MEMORY[0x20BD028B4]();
    }
  }
  v6 = *(unsigned int *)(a1 + 320);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 324);
    do
    {
      result = *(float *)(*(_QWORD *)(a1 + 296) + 4 * (v8 + v7));
      *(float *)(*(_QWORD *)a2 + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 544) + 4 * v7++)) = result;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_207D86B44(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 440) + 8);
  v5 = v4;
  *(_DWORD *)(a2 + 16) = v4;
  if (*(_QWORD *)(a2 + 8) < v4)
  {
    if (*(_QWORD *)a2)
    {
      operator delete[](*(void **)a2);
      v5 = *(_DWORD *)(a2 + 16);
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = ((4 * v4 + 31) & 0x7FFFFFFE0) >> 2;
    *(_QWORD *)a2 = MEMORY[0x20BD028B4]();
  }
  if (v5)
    bzero(*(void **)a2, 4 * v5);
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 552))
  {
    v6 = *(unsigned int *)(a1 + 340);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(uint64_t **)(a1 + 416);
      v9 = *v8;
      v10 = v8[1];
      if (v9 != v10)
        goto LABEL_14;
LABEL_12:
      while (++v7 < v6)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a1 + 416) + 24 * v7);
        v9 = *v11;
        v10 = v11[1];
        if (v9 != v10)
        {
LABEL_14:
          while (v7 != *(_DWORD *)v9)
          {
            v9 += 16;
            if (v9 == v10)
              goto LABEL_12;
          }
          v12 = *(_QWORD *)(a1 + 544);
          if (v7 >= (*(_QWORD *)(a1 + 552) - v12) >> 2)
            sub_207CBA8AC();
          v13 = *(unsigned int *)(v12 + 4 * v7);
          v14 = (_DWORD *)(*(_QWORD *)(a1 + 344) + 4 * *(_QWORD *)(v9 + 8));
          v15 = *(_DWORD **)a2;
          if (v14 == *(_DWORD **)a2)
          {
            v15[v13] = *v14;
            v6 = *(unsigned int *)(a1 + 340);
          }
          else
          {
            v15[v13] = *v14;
          }
        }
      }
    }
  }
}

BOOL sub_207D86C88(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;

  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a1 + 480) + 152;
  *(_QWORD *)(a1 + 1216) = a1 + 520;
  v2 = *(_DWORD *)(a1 + 1224);
  if (v2)
  {
    *(_QWORD *)(a1 + 1208) = 0;
    *(_QWORD *)(a1 + 1216) = 0;
    return v2 == 0;
  }
  v3 = *(unsigned int *)(a1 + 1248);
  v4 = (_DWORD *)MEMORY[0x20BD028B4]((4 * (v3 * v3) + 31) & 0x7FFFFFFE0, 32);
  v5 = v4;
  if ((_DWORD)v3 * (_DWORD)v3)
    bzero(v4, 4 * (v3 * v3));
  if ((_DWORD)v3)
  {
    v6 = v3 + 1;
    if ((_DWORD)v3 == 1)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      if (v6 < 0)
        v8 = ~(_DWORD)v3;
      else
        v8 = v3 + 1;
      v9 = (v3 - 1) * (unint64_t)v8;
      v10 = (_DWORD)v3 != -1 && (unint64_t)(v3 - 1) >> 32 != 0;
      if ((_DWORD)v9)
        v11 = v6 < 0;
      else
        v11 = 0;
      if (!v11 && (v9 & 0xFFFFFFFF00000000) == 0 && !v10)
      {
        v12 = 0;
        v7 = v3 & 0xFFFFFFFE;
        v13 = v7;
        do
        {
          v5[v12] = 1065353216;
          v5[v6 + v12] = 1065353216;
          v12 += 2 * v3 + 2;
          v13 -= 2;
        }
        while (v13);
        if (v7 == v3)
          goto LABEL_25;
      }
    }
    v14 = v3 - v7;
    v15 = v6 * v7;
    do
    {
      v5[v15] = 1065353216;
      v15 += v6;
      --v14;
    }
    while (v14);
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 1252))
    sub_207CC4B9C();
  v16 = *(void **)(a1 + 1184);
  *(_QWORD *)(a1 + 1184) = v5;
  *(_QWORD *)(a1 + 1192) = ((4 * (v3 * v3) + 31) & 0x7FFFFFFE0uLL) >> 2;
  *(_DWORD *)(a1 + 1200) = v3;
  *(_DWORD *)(a1 + 1204) = v3;
  if (v16)
    operator delete[](v16);
  return v2 == 0;
}

void sub_207D86E18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_207D86E2C(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "DenseHessian");
}

float sub_207D86E68()
{
  return 0.0;
}

void **sub_207D86E80(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 104;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207D86F18(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D86F80(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D86FE8(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  sub_207D87094(a1 + 24);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v2;
  if (v2)
    operator delete(v2);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 40);
    v5 = *(void **)(a1 + 32);
    if (v4 != v3)
    {
      v6 = *(_QWORD **)(a1 + 40);
      do
      {
        v7 = *(v6 - 2);
        v6 -= 2;
        *v6 = 0;
        if (v7)
          ((void (*)(void))*(v4 - 1))();
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v5);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_207D87094(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t i;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  unint64_t k;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  unint64_t j;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  void *v62;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unint64_t **)(a1 + 56);
  if ((unint64_t *)v2 == v3)
  {
    v12 = *(_DWORD *)(a1 + 32);
    if (v12)
    {
      if (v12 != 1)
      {
        v33 = 8;
        for (i = 1; i < v12; ++i)
        {
          if (v33)
          {
            v35 = v33 << 8;
            v36 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * i - 16) + 120);
            do
            {
              v37 = (void *)v36[13];
              if (v37)
              {
                v36[14] = v37;
                operator delete(v37);
              }
              v38 = (void *)*(v36 - 1);
              if (v38)
              {
                *v36 = v38;
                operator delete(v38);
              }
              v36 += 32;
              v35 -= 256;
            }
            while (v35);
            v12 = *(_DWORD *)(a1 + 32);
          }
          v33 *= 2;
        }
      }
      v13 = *(_QWORD *)(a1 + 40);
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v12 - 1));
        v15 = v13 << 8;
        v16 = (_QWORD *)(v14 + 120);
        do
        {
          v17 = (void *)v16[13];
          if (v17)
          {
            v16[14] = v17;
            operator delete(v17);
          }
          v18 = (void *)*(v16 - 1);
          if (v18)
          {
            *v16 = v18;
            operator delete(v18);
          }
          v16 += 32;
          v15 -= 256;
        }
        while (v15);
      }
    }
  }
  else if ((unint64_t)v3 - v2 > 0xEF)
  {
    sub_207D874E4(v2, v3, 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3), 1);
    v19 = *(_DWORD *)(a1 + 32);
    if (v19)
    {
      v20 = *(_QWORD **)(a1 + 48);
      v21 = *(_QWORD **)(a1 + 56);
      if (v19 != 1)
      {
        v47 = 8;
        for (j = 1; j < v19; ++j)
        {
          if (v47)
          {
            v49 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * j - 16);
            v50 = &v49[32 * v47];
            do
            {
              v51 = v20;
              if (v21 != v20)
              {
                v51 = v20;
                v52 = v21 - v20;
                do
                {
                  v53 = v52 >> 1;
                  v54 = &v51[v52 >> 1];
                  v56 = *v54;
                  v55 = v54 + 1;
                  v52 += ~(v52 >> 1);
                  if (v56 < (unint64_t)v49)
                    v51 = v55;
                  else
                    v52 = v53;
                }
                while (v52);
              }
              if (v51 == v21 || (_QWORD *)*v51 != v49)
              {
                v57 = (void *)v49[28];
                if (v57)
                {
                  v49[29] = v57;
                  operator delete(v57);
                }
                v58 = (void *)v49[14];
                if (v58)
                {
                  v49[15] = v58;
                  operator delete(v58);
                }
              }
              v49 += 32;
            }
            while (v49 != v50);
            v19 = *(_DWORD *)(a1 + 32);
          }
          v47 *= 2;
        }
      }
      v22 = *(_QWORD *)(a1 + 40);
      if (v22)
      {
        v23 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v19 - 1));
        if (v21 == v20)
        {
          v59 = v22 << 8;
          v60 = v23 + 15;
          do
          {
            v61 = (void *)v60[13];
            if (v61)
            {
              v60[14] = v61;
              operator delete(v61);
            }
            v62 = (void *)*(v60 - 1);
            if (v62)
            {
              *v60 = v62;
              operator delete(v62);
            }
            v60 += 32;
            v59 -= 256;
          }
          while (v59);
        }
        else
        {
          v24 = &v23[32 * v22];
          do
          {
            v25 = v20;
            v26 = v21 - v20;
            do
            {
              v27 = v26 >> 1;
              v28 = &v25[v26 >> 1];
              v30 = *v28;
              v29 = v28 + 1;
              v26 += ~(v26 >> 1);
              if (v30 < (unint64_t)v23)
                v25 = v29;
              else
                v26 = v27;
            }
            while (v26);
            if (v25 == v21 || (_QWORD *)*v25 != v23)
            {
              v31 = (void *)v23[28];
              if (v31)
              {
                v23[29] = v31;
                operator delete(v31);
              }
              v32 = (void *)v23[14];
              if (v32)
              {
                v23[15] = v32;
                operator delete(v32);
              }
            }
            v23 += 32;
          }
          while (v23 != v24);
        }
      }
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    if (v4)
    {
      if (v4 != 1)
      {
        v39 = 8;
        for (k = 1; k < v4; ++k)
        {
          if (v39)
          {
            v41 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * k - 16);
            v42 = &v41[32 * v39];
            do
            {
              v44 = *(_QWORD **)(a1 + 48);
              v43 = *(_QWORD **)(a1 + 56);
              if (v44 != v43)
              {
                while ((_QWORD *)*v44 != v41)
                {
                  if (++v44 == v43)
                  {
                    v44 = *(_QWORD **)(a1 + 56);
                    break;
                  }
                }
              }
              if (v44 == v43)
              {
                v45 = (void *)v41[28];
                if (v45)
                {
                  v41[29] = v45;
                  operator delete(v45);
                }
                v46 = (void *)v41[14];
                if (v46)
                {
                  v41[15] = v46;
                  operator delete(v46);
                }
              }
              v41 += 32;
            }
            while (v41 != v42);
            v4 = *(_DWORD *)(a1 + 32);
          }
          v39 *= 2;
        }
      }
      v5 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
        v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
        v7 = &v6[32 * v5];
        do
        {
          v9 = *(_QWORD **)(a1 + 48);
          v8 = *(_QWORD **)(a1 + 56);
          if (v9 != v8)
          {
            while ((_QWORD *)*v9 != v6)
            {
              if (++v9 == v8)
              {
                v9 = *(_QWORD **)(a1 + 56);
                break;
              }
            }
          }
          if (v9 == v8)
          {
            v10 = (void *)v6[28];
            if (v10)
            {
              v6[29] = v10;
              operator delete(v10);
            }
            v11 = (void *)v6[14];
            if (v11)
            {
              v6[15] = v11;
              operator delete(v11);
            }
          }
          v6 += 32;
        }
        while (v6 != v7);
      }
    }
  }
}

