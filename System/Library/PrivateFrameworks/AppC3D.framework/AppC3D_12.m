void sub_208135F40(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_208135778(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208136020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208136034(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208135D60(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813559C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208136298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_2081362AC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_208135778(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_20813638C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2081363A0(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  BOOL v4;
  double result;
  void *__p;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;

  v3 = (unsigned int *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
    v4 = *(_DWORD *)(a2 + 28) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_24C08A5D8;
    *(_DWORD *)(a1 + 24) = 0;
  }
  else
  {
    __p = operator new(0x58uLL);
    v7 = xmmword_20827D700;
    strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468((uint64_t)v8, v3, 0x52476641u, (uint64_t *)&__p, 0);
    if (SHIBYTE(v7) < 0)
      operator delete(__p);
    *(_QWORD *)a1 = &off_24C08A5D8;
    result = *(double *)&v9;
    *(_OWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_208136484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081364A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  std::__shared_weak_count *v23;
  char v24[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (*(_DWORD *)(a2 + 24))
    sub_207CA9F48();
  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v22 = v3;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v21 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_11;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_11:
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_12:
      sub_20815FC78((uint64_t)v22);
  }
LABEL_13:
  sub_2081366A4((uint64_t)v24, (uint64_t)&v21);
  v12 = v26;
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 32) = v27;
  if (!v22)
    goto LABEL_21;
  v14 = *v22;
  v13 = (std::__shared_weak_count *)v22[1];
  if (!v13)
    goto LABEL_19;
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_19:
    if (!v14)
      goto LABEL_21;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (v14)
LABEL_20:
    sub_20815FE54((uint64_t)v22);
LABEL_21:
  v21 = &off_24C08A5D8;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_208136690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_2081366A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  size_t result;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_20;
  }
LABEL_9:
  v10 = sub_20815A89C(a2, 0);
  v11 = sub_20815C130(a2);
  v12 = sub_20815C3B0(a2);
  result = sub_20815C630(a2);
  v14 = result >> 2;
  v15 = v11;
  v16 = v11 | ((unint64_t)v12 << 32);
  if (v12)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 0;
  else
    v18 = v16;
  HIDWORD(v19) = v18;
  LODWORD(v19) = 4;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 16) = HIDWORD(v18);
  *(_QWORD *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v14;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 4;
  if (HIDWORD(v18) * (_DWORD)v14 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_20:
      abort();
  }
  return result;
}

void sub_208136880(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    v6 = v5;
    v7 = *a2;
    *a1 = &off_24C08A5D8;
    if (v7)
    {
      a1[1] = v7;
      a1[2] = v5;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    else
    {
      a1[1] = 0;
      a1[2] = 0;
    }
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08A5D8;
  }
  v12 = (uint64_t *)a1[1];
  if (!v12)
    goto LABEL_21;
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v14)
  {
LABEL_21:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_208216974);
    abort();
  }
}

void sub_2081369C4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20815B3F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2081369D8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088B48;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_208136A3C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[20];
  int v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30[2];
  char v31;
  char *v32;

  *(_QWORD *)a1 = off_24C088B48;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = a1 + 16;
  sub_2081363A0(a1 + 16, a2);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24))
    v8 = *(_DWORD *)(a2 + 28) == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = *(_OWORD *)a2;
    v10 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 32);
    *v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    sub_2081364A0((uint64_t)v7, v6);
  }
  v11 = a3[1];
  v22 = *a3;
  v23 = v11;
  v24 = a3[2];
  if ((sub_208136EB8(a1) & 1) != 0)
    return a1;
  sub_208137098(&v27, a1);
  sub_20813718C((uint64_t)v25, a1);
  v30[0] = (uint64_t)&v22;
  v30[1] = (uint64_t)v25;
  if (DWORD1(v23) == 1 && v26 == 1)
  {
    sub_2080F8148(v30);
  }
  else
  {
    v31 = 0;
    if (DWORD2(v22) && HIDWORD(v22) && (_DWORD)v23)
    {
      v32 = &v31;
      v12.n128_f32[0] = sub_2080F88E8((uint64_t)&v32, (uint64_t)&v22, (uint64_t)v25);
    }
  }
  if (!v28)
    goto LABEL_23;
  v14 = *v28;
  v13 = (std::__shared_weak_count *)v28[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
      if (!v14)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  if (v14)
LABEL_22:
    sub_20815FF44((uint64_t)v28);
LABEL_23:
  v27 = &off_24C08A5D8;
  v18 = v29;
  if (!v29)
    return a1;
  v19 = (unint64_t *)&v29->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v12);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_208136C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208129554(v1);
  _Unwind_Resume(a1);
}

void sub_208136C30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20815AF50((_QWORD *)(v2 - 88));
  sub_2081369D8(v1);
  _Unwind_Resume(a1);
}

void sub_208136C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081369D8(v1);
  _Unwind_Resume(a1);
}

void sub_208136C68(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t (**v37)();
  __int128 v38;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v4 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v5;
      v36 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      break;
    case 1:
      v13 = *(_QWORD *)(a1 + 24);
      v12 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v13;
      v36 = v12;
      if (v12)
      {
        v14 = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      break;
    case 2:
      v9 = *(_QWORD *)(a1 + 24);
      v8 = *(std::__shared_weak_count **)(a1 + 32);
      v34 = &off_24C08A5D8;
      v35 = v9;
      v36 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      break;
    case 3:
      v16 = *(std::__shared_weak_count **)(a1 + 24);
      if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
      {
        v18 = v17;
        v19 = *(_QWORD *)(a1 + 16);
        v34 = &off_24C08A5D8;
        if (v19)
        {
          v35 = v19;
          v36 = v17;
          v20 = (unint64_t *)&v17->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v34 = &off_24C08A5D8;
      }
      break;
    default:
      sub_207CA9F48();
  }
  sub_20815C8B0((uint64_t)&v34, &v37);
  v24 = v38;
  v38 = 0uLL;
  v25 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v37 = &off_24C08D790;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v34 = &off_24C08A5D8;
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_208136EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208136EB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      goto LABEL_28;
    case 1:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v8 = (unint64_t *)&v2->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      goto LABEL_28;
    case 2:
      v3 = *(uint64_t **)(a1 + 24);
      v2 = *(std::__shared_weak_count **)(a1 + 32);
      if (v2)
      {
        v6 = (unint64_t *)&v2->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      goto LABEL_28;
    case 3:
      v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10)
      {
        v15 = 0;
        return v15 == 0;
      }
      v11 = std::__shared_weak_count::lock(v10);
      if (!v11)
        return 1;
      v12 = v11;
      v3 = *(uint64_t **)(a1 + 16);
      if (v3)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v2 = v11;
      }
      else
      {
        v2 = 0;
      }
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
LABEL_28:
      if (v3)
      {
        v15 = *v3;
        v19 = (std::__shared_weak_count *)v3[1];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 - 1, v20));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        v15 = 0;
      }
      if (!v2)
        return v15 == 0;
      v23 = (unint64_t *)&v2->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
        return v15 == 0;
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v15 == 0;
    default:
      sub_207CA9F48();
  }
}

void sub_208137098(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_20815AE44(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3)
      sub_207CA9F48();
    sub_208136880(v9, v4);
    sub_20815AD38(a1, (uint64_t)v9);
    v9[0] = &off_24C08A5D8;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    sub_20815AD38(a1, (uint64_t)v4);
  }
}

void sub_208137178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813718C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208136EB8(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_2081366A4(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2081373F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_208137404(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[2];
  std::__shared_weak_count *v10;

  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
      goto LABEL_4;
    case 1:
      sub_20815AB2C(a1, (uint64_t)v4);
      break;
    case 0:
LABEL_4:
      sub_20815AA20(a1, (uint64_t)v4);
      return;
    case 3:
      sub_208136880(v9, v4);
      sub_20815AA20(a1, (uint64_t)v9);
      v9[0] = &off_24C08A5D8;
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      break;
    default:
      sub_207CA9F48();
  }
}

void sub_2081374E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081374F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  __int128 v33;

  *(_QWORD *)a1 = &off_24C08A428;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_QWORD *)&v28 = *(_QWORD *)a2;
  *((_QWORD *)&v28 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C088488;
  *(_DWORD *)(a1 + 8) = 0;
  v5.n128_f64[0] = sub_208128F54(a1 + 16, (unsigned int *)&v28);
  if (!(_DWORD)v28 || !DWORD1(v28))
  {
    v15 = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v6;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v29 = off_24C08A598;
  if (v6)
  {
    v11 = *v6;
    v10 = (std::__shared_weak_count *)v6[1];
    if (!v10)
      goto LABEL_16;
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (v14)
    {
LABEL_16:
      if (!v11)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v5);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
LABEL_17:
      sub_20815FC78((uint64_t)v30);
  }
LABEL_18:
  sub_20812923C(&v32, (uint64_t)&v29);
  v15 = v33;
  if (v30)
  {
    v17 = *v30;
    v16 = (std::__shared_weak_count *)v30[1];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        v27 = v15;
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        v15 = v27;
        if (!v17)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v17)
    {
LABEL_25:
      v25 = v15;
      sub_20815FE54((uint64_t)v30);
      v15 = v25;
    }
  }
LABEL_26:
  v29 = &off_24C08A5D8;
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      v26 = v15;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v15 = v26;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v15;
  *(_QWORD *)a1 = &off_24C08A428;
  return a1;
}

void sub_20813770C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C08A5D8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081377A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088488;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_208137808(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_208129B58(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812923C(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_208137A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208137A58(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_208129B58(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C08A5D8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812923C(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C08A5D8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_208137CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208137CB8()
{
  return 1;
}

_UNKNOWN **sub_208137CC0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_208137D14(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_20812A07C(&v20, a1);
  sub_208137A58(v17, a1);
  sub_208137A58(&v15, a1);
  v4 = operator new(0x40uLL);
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = &off_24C08A428;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_2081295AC((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = &off_24C08A428;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_208137E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_20815AC38(&a16);
  _Unwind_Resume(a1);
}

void sub_208137E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208137EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208137EC4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812A07C(a2, a1);
}

double sub_208137ED0(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[3];
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 *v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089448, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v30, lpsrc, 1);
    v17 = (void *)v30;
    v18 = *(_QWORD *)(v30 + 16);
    v21 = *(_OWORD *)v30;
    v22[0] = v18;
    *(_QWORD *)&v30 = 0;
    operator delete(v17);
    sub_208137808((uint64_t *)&v30, a1);
    v27 = (uint64_t (**)())&v21;
    v28 = &v30;
    sub_2080F2F3C((size_t *)&v27);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20812A07C(&v27, (uint64_t)v4);
  sub_208137A58(&v25, v5);
  v30 = v25;
  v31 = v26;
  if (HIDWORD(v26) <= 0x20)
    v6 = 32;
  else
    v6 = HIDWORD(v26);
  *(_QWORD *)&v21 = &off_24C08A428;
  v32[0] = *((_QWORD *)&v25 + 1);
  v32[1] = v26 | (unint64_t)(v6 << 32);
  sub_2081295AC((uint64_t)&v21, (unsigned int *)v32, &v30);
  *(_QWORD *)&v21 = &off_24C08A428;
  if (v28)
  {
    v8 = *(_QWORD *)v28;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v28 + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v28);
  }
LABEL_13:
  v27 = &off_24C08A5D8;
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v24;
      *(_OWORD *)(a1 + 48) = v24;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v30 = a1 + 16;
  ((void (*)(__int128 *))off_24C0895D8[v15])(&v30);
LABEL_25:
  v20 = v23;
  result = *(double *)&v24;
  *(_OWORD *)(a1 + 48) = v24;
  *(_QWORD *)&v21 = off_24C088488;
  if ((_DWORD)v20 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C089598[v20])(&v30, v22);
  return result;
}

void sub_208138154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C089598[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208138240(uint64_t a1)
{
  uint64_t v2[3];

  sub_208137808(v2, a1);
  return v2[0];
}

double sub_208138268@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208137808((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_2081382F8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208137A58(&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_208138388()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52148);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52148))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52150);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52150))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52158);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52158))
    {
LABEL_13:
      if (byte_253E5242F < 0)
      {
        sub_207CA40D8(&xmmword_253E52400, (void *)qword_253E52418, unk_253E52420);
      }
      else
      {
        xmmword_253E52400 = *(_OWORD *)&qword_253E52418;
        unk_253E52410 = unk_253E52428;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52400, &dword_207C77000);
      __cxa_guard_release(&qword_253E52150);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52160);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52160))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray8u>]", &qword_253E52430);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52430, &dword_207C77000);
      __cxa_guard_release(&qword_253E52160);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52168);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52168))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52170);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52170))
      {
        if (byte_253E52448[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52448, *(unint64_t *)&byte_253E52448[8]);
        else
          __p = *(std::string *)byte_253E52448;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52460);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52460, &dword_207C77000);
        __cxa_guard_release(&qword_253E52170);
      }
      if (byte_253E52477 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52460, *((unint64_t *)&xmmword_253E52460 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52460;
        v18 = unk_253E52470;
      }
      sub_207DDBAFC((char *)v17, (std::string *)&qword_253E52418);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52418, &dword_207C77000);
      __cxa_guard_release(&qword_253E52158);
      goto LABEL_13;
    }
    if (byte_253E52447 >= 0)
      v6 = byte_253E52447;
    else
      v6 = unk_253E52438;
    if (byte_253E52447 >= 0)
      v7 = &qword_253E52430;
    else
      v7 = (uint64_t *)qword_253E52430;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52448[8] = v6;
      *(_QWORD *)&byte_253E52448[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52448 = v13;
    }
    else
    {
      v13 = byte_253E52448;
      byte_253E52448[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52448, &dword_207C77000);
    __cxa_guard_release(&qword_253E52168);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52417 < 0)
  {
    sub_207CA40D8(&xmmword_253E523E8, (void *)xmmword_253E52400, *((unint64_t *)&xmmword_253E52400 + 1));
  }
  else
  {
    xmmword_253E523E8 = xmmword_253E52400;
    unk_253E523F8 = unk_253E52410;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E523E8, &dword_207C77000);
  __cxa_guard_release(&qword_253E52148);
LABEL_2:
  if (byte_253E523FF >= 0)
    return &xmmword_253E523E8;
  else
    return (__int128 *)xmmword_253E523E8;
}

void sub_2081387DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52158);
  __cxa_guard_abort(&qword_253E52150);
  __cxa_guard_abort(&qword_253E52148);
  _Unwind_Resume(a1);
}

void sub_208138878(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52148);
  _Unwind_Resume(a1);
}

void sub_208138890()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2081388CC(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208129D38(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20812A07C(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_208138C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208138C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208138C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_208138CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208138CB8()
{
  return 65792;
}

void sub_208138CC4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208129D38(a2, a1);
}

uint64_t sub_208138CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  __int128 v33;

  *(_QWORD *)a1 = &off_24C088BD8;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_QWORD *)&v28 = *(_QWORD *)a2;
  *((_QWORD *)&v28 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C0886C8;
  *(_DWORD *)(a1 + 8) = 0;
  v5.n128_f64[0] = sub_20812DE4C(a1 + 16, (unsigned int *)&v28);
  if (!(_DWORD)v28 || !DWORD1(v28))
  {
    v15 = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v6;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v29 = off_24C08A598;
  if (v6)
  {
    v11 = *v6;
    v10 = (std::__shared_weak_count *)v6[1];
    if (!v10)
      goto LABEL_16;
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (v14)
    {
LABEL_16:
      if (!v11)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v5);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
LABEL_17:
      sub_20815FC78((uint64_t)v30);
  }
LABEL_18:
  sub_20812E134(&v32, (uint64_t)&v29);
  v15 = v33;
  if (v30)
  {
    v17 = *v30;
    v16 = (std::__shared_weak_count *)v30[1];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        v27 = v15;
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        v15 = v27;
        if (!v17)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v17)
    {
LABEL_25:
      v25 = v15;
      sub_20815FE54((uint64_t)v30);
      v15 = v25;
    }
  }
LABEL_26:
  v29 = &off_24C08A5D8;
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      v26 = v15;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v15 = v26;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v15;
  *(_QWORD *)a1 = &off_24C088BD8;
  return a1;
}

void sub_208138EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C08A5D8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_208138F7C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0886C8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_208138FE0(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_20812E870(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812E134(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20813921C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208139230(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_20812E870(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C08A5D8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812E134(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C08A5D8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20813947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208139490()
{
  return 2;
}

_UNKNOWN **sub_208139498()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_2081394EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_20812ED94(&v20, a1);
  sub_208139230(v17, a1);
  sub_208139230(&v15, a1);
  v4 = operator new(0x40uLL);
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = &off_24C088BD8;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_20812E450((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = &off_24C088BD8;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_208139658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_20815AC38(&a16);
  _Unwind_Resume(a1);
}

void sub_208139674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208139688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813969C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812ED94(a2, a1);
}

double sub_2081396A8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[3];
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089460, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v30, lpsrc, 2);
    v17 = (void *)v30;
    v18 = *(_QWORD *)(v30 + 16);
    v21 = *(_OWORD *)v30;
    v22[0] = v18;
    *(_QWORD *)&v30 = 0;
    operator delete(v17);
    sub_208138FE0((uint64_t *)&v30, a1);
    sub_2080F44E4((uint64_t *)&v21, (uint64_t)&v30);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20812ED94(&v27, (uint64_t)v4);
  sub_208139230(&v25, v5);
  v30 = v25;
  v31 = v26;
  if (HIDWORD(v26) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v26);
  *(_QWORD *)&v21 = &off_24C088BD8;
  v32[0] = *((_QWORD *)&v25 + 1);
  v32[1] = v26 | (unint64_t)(v6 << 32);
  sub_20812E450((uint64_t)&v21, (unsigned int *)v32, &v30);
  *(_QWORD *)&v21 = &off_24C088BD8;
  if (v28)
  {
    v8 = *v28;
    v7 = (std::__shared_weak_count *)v28[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v28);
  }
LABEL_13:
  v27 = &off_24C08A5D8;
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v24;
      *(_OWORD *)(a1 + 48) = v24;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v30 = a1 + 16;
  ((void (*)(__int128 *))off_24C0895D8[v15])(&v30);
LABEL_25:
  v20 = v23;
  result = *(double *)&v24;
  *(_OWORD *)(a1 + 48) = v24;
  *(_QWORD *)&v21 = off_24C0886C8;
  if ((_DWORD)v20 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C089598[v20])(&v30, v22);
  return result;
}

void sub_208139924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C089598[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208139A10(uint64_t a1)
{
  uint64_t v2[3];

  sub_208138FE0(v2, a1);
  return v2[0];
}

double sub_208139A38@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208138FE0((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_208139AC8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208139230(&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_208139B58()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52178);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52178))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52180);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52180))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52188);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52188))
    {
LABEL_13:
      if (byte_253E524BF < 0)
      {
        sub_207CA40D8(&xmmword_253E52490, (void *)qword_253E524A8, unk_253E524B0);
      }
      else
      {
        xmmword_253E52490 = *(_OWORD *)&qword_253E524A8;
        unk_253E524A0 = unk_253E524B8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52490, &dword_207C77000);
      __cxa_guard_release(&qword_253E52180);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52190);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52190))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16u>]", &qword_253E524C0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E524C0, &dword_207C77000);
      __cxa_guard_release(&qword_253E52190);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52198);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52198))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E521A0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E521A0))
      {
        if (byte_253E524D8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E524D8, *(unint64_t *)&byte_253E524D8[8]);
        else
          __p = *(std::string *)byte_253E524D8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E524F0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E524F0, &dword_207C77000);
        __cxa_guard_release(&qword_253E521A0);
      }
      if (byte_253E52507 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E524F0, *((unint64_t *)&xmmword_253E524F0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E524F0;
        v18 = unk_253E52500;
      }
      sub_207F1EA4C((char *)v17, (std::string *)&qword_253E524A8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E524A8, &dword_207C77000);
      __cxa_guard_release(&qword_253E52188);
      goto LABEL_13;
    }
    if (byte_253E524D7 >= 0)
      v6 = byte_253E524D7;
    else
      v6 = unk_253E524C8;
    if (byte_253E524D7 >= 0)
      v7 = &qword_253E524C0;
    else
      v7 = (uint64_t *)qword_253E524C0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E524D8[8] = v6;
      *(_QWORD *)&byte_253E524D8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E524D8 = v13;
    }
    else
    {
      v13 = byte_253E524D8;
      byte_253E524D8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E524D8, &dword_207C77000);
    __cxa_guard_release(&qword_253E52198);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E524A7 < 0)
  {
    sub_207CA40D8(&xmmword_253E52478, (void *)xmmword_253E52490, *((unint64_t *)&xmmword_253E52490 + 1));
  }
  else
  {
    xmmword_253E52478 = xmmword_253E52490;
    unk_253E52488 = unk_253E524A0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52478, &dword_207C77000);
  __cxa_guard_release(&qword_253E52178);
LABEL_2:
  if (byte_253E5248F >= 0)
    return &xmmword_253E52478;
  else
    return (__int128 *)xmmword_253E52478;
}

void sub_208139FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52188);
  __cxa_guard_abort(&qword_253E52180);
  __cxa_guard_abort(&qword_253E52178);
  _Unwind_Resume(a1);
}

void sub_20813A048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52178);
  _Unwind_Resume(a1);
}

void sub_20813A060()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_20813A09C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20812EA50(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20812ED94(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20813A418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813A43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813A450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20813A474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20813A488()
{
  return 65792;
}

void sub_20813A494(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812EA50(a2, a1);
}

uint64_t sub_20813A4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  __int128 v33;

  *(_QWORD *)a1 = &off_24C088C68;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_QWORD *)&v28 = *(_QWORD *)a2;
  *((_QWORD *)&v28 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C088878;
  *(_DWORD *)(a1 + 8) = 0;
  v5.n128_f64[0] = sub_2081311C0(a1 + 16, (unsigned int *)&v28);
  if (!(_DWORD)v28 || !DWORD1(v28))
  {
    v15 = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v6;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v29 = off_24C08A598;
  if (v6)
  {
    v11 = *v6;
    v10 = (std::__shared_weak_count *)v6[1];
    if (!v10)
      goto LABEL_16;
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (v14)
    {
LABEL_16:
      if (!v11)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v5);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
LABEL_17:
      sub_20815FC78((uint64_t)v30);
  }
LABEL_18:
  sub_20812E134(&v32, (uint64_t)&v29);
  v15 = v33;
  if (v30)
  {
    v17 = *v30;
    v16 = (std::__shared_weak_count *)v30[1];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        v27 = v15;
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        v15 = v27;
        if (!v17)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v17)
    {
LABEL_25:
      v25 = v15;
      sub_20815FE54((uint64_t)v30);
      v15 = v25;
    }
  }
LABEL_26:
  v29 = &off_24C08A5D8;
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      v26 = v15;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v15 = v26;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v15;
  *(_QWORD *)a1 = &off_24C088C68;
  return a1;
}

void sub_20813A6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C08A5D8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813A74C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088878;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20813A7B0(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_208131C10(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812E134(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20813A9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813AA00(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_208131C10(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C08A5D8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812E134(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C08A5D8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20813AC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20813AC60()
{
  return 3;
}

_UNKNOWN **sub_20813AC68()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_20813ACBC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_208132134(&v20, a1);
  sub_20813AA00(v17, a1);
  sub_20813AA00(&v15, a1);
  v4 = operator new(0x40uLL);
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = &off_24C088C68;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_208131664((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = &off_24C088C68;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20813AE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_20815AC38(&a16);
  _Unwind_Resume(a1);
}

void sub_20813AE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813AE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813AE6C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208132134(a2, a1);
}

double sub_20813AE78(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[3];
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  __int128 *v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089478, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v30, lpsrc, 3);
    v17 = (void *)v30;
    v18 = *(_QWORD *)(v30 + 16);
    v21 = *(_OWORD *)v30;
    v22[0] = v18;
    *(_QWORD *)&v30 = 0;
    operator delete(v17);
    sub_20813A7B0((uint64_t *)&v30, a1);
    v27 = (uint64_t (**)())&v21;
    v28 = &v30;
    *(_QWORD *)&result = sub_2080F5DDC((uint64_t *)&v27);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_208132134(&v27, (uint64_t)v4);
  sub_20813AA00(&v25, v5);
  v30 = v25;
  v31 = v26;
  if (HIDWORD(v26) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v26);
  *(_QWORD *)&v21 = &off_24C088C68;
  v32[0] = *((_QWORD *)&v25 + 1);
  v32[1] = v26 | (unint64_t)(v6 << 32);
  sub_208131664((uint64_t)&v21, (unsigned int *)v32, &v30);
  *(_QWORD *)&v21 = &off_24C088C68;
  if (v28)
  {
    v8 = *(_QWORD *)v28;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v28 + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v28);
  }
LABEL_13:
  v27 = &off_24C08A5D8;
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v24;
      *(_OWORD *)(a1 + 48) = v24;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v30 = a1 + 16;
  ((void (*)(__int128 *))off_24C0895D8[v15])(&v30);
LABEL_25:
  v20 = v23;
  result = *(double *)&v24;
  *(_OWORD *)(a1 + 48) = v24;
  *(_QWORD *)&v21 = off_24C088878;
  if ((_DWORD)v20 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C089598[v20])(&v30, v22);
  return result;
}

void sub_20813B0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C089598[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813B1E8(uint64_t a1)
{
  uint64_t v2[3];

  sub_20813A7B0(v2, a1);
  return v2[0];
}

double sub_20813B210@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813A7B0((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_20813B2A0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813AA00(&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_20813B330()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E521A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E521A8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E521B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E521B0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E521B8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E521B8))
    {
LABEL_13:
      if (byte_253E5254F < 0)
      {
        sub_207CA40D8(&xmmword_253E52520, (void *)qword_253E52538, unk_253E52540);
      }
      else
      {
        xmmword_253E52520 = *(_OWORD *)&qword_253E52538;
        unk_253E52530 = unk_253E52548;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52520, &dword_207C77000);
      __cxa_guard_release(&qword_253E521B0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E521C0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E521C0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16f>]", &qword_253E52550);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52550, &dword_207C77000);
      __cxa_guard_release(&qword_253E521C0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E521C8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E521C8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E521D0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E521D0))
      {
        if (byte_253E52568[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52568, *(unint64_t *)&byte_253E52568[8]);
        else
          __p = *(std::string *)byte_253E52568;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52580);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52580, &dword_207C77000);
        __cxa_guard_release(&qword_253E521D0);
      }
      if (byte_253E52597 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52580, *((unint64_t *)&xmmword_253E52580 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52580;
        v18 = unk_253E52590;
      }
      sub_208062F8C((char *)v17, (std::string *)&qword_253E52538);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52538, &dword_207C77000);
      __cxa_guard_release(&qword_253E521B8);
      goto LABEL_13;
    }
    if (byte_253E52567 >= 0)
      v6 = byte_253E52567;
    else
      v6 = unk_253E52558;
    if (byte_253E52567 >= 0)
      v7 = &qword_253E52550;
    else
      v7 = (uint64_t *)qword_253E52550;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52568[8] = v6;
      *(_QWORD *)&byte_253E52568[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52568 = v13;
    }
    else
    {
      v13 = byte_253E52568;
      byte_253E52568[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52568, &dword_207C77000);
    __cxa_guard_release(&qword_253E521C8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52537 < 0)
  {
    sub_207CA40D8(&xmmword_253E52508, (void *)xmmword_253E52520, *((unint64_t *)&xmmword_253E52520 + 1));
  }
  else
  {
    xmmword_253E52508 = xmmword_253E52520;
    unk_253E52518 = unk_253E52530;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52508, &dword_207C77000);
  __cxa_guard_release(&qword_253E521A8);
LABEL_2:
  if (byte_253E5251F >= 0)
    return &xmmword_253E52508;
  else
    return (__int128 *)xmmword_253E52508;
}

void sub_20813B784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E521B8);
  __cxa_guard_abort(&qword_253E521B0);
  __cxa_guard_abort(&qword_253E521A8);
  _Unwind_Resume(a1);
}

void sub_20813B820(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E521A8);
  _Unwind_Resume(a1);
}

void sub_20813B838()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_20813B874(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208131DF0(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_208132134(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20813BBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813BC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813BC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20813BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20813BC60()
{
  return 65792;
}

void sub_20813BC6C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208131DF0(a2, a1);
}

uint64_t sub_20813BC78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t (**v29)();
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  __int128 v33;

  *(_QWORD *)a1 = &off_24C088CF8;
  v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 8)
    v4 = 8;
  else
    v4 = v4;
  *(_QWORD *)&v28 = *(_QWORD *)a2;
  *((_QWORD *)&v28 + 1) = v3 | (v4 << 32);
  *(_QWORD *)a1 = off_24C088A28;
  *(_DWORD *)(a1 + 8) = 0;
  v5.n128_f64[0] = sub_20813425C(a1 + 16, (unsigned int *)&v28);
  if (!(_DWORD)v28 || !DWORD1(v28))
  {
    v15 = v28;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v30 = v6;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v29 = off_24C08A598;
  if (v6)
  {
    v11 = *v6;
    v10 = (std::__shared_weak_count *)v6[1];
    if (!v10)
      goto LABEL_16;
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (v14)
    {
LABEL_16:
      if (!v11)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v5);
    std::__shared_weak_count::__release_weak(v10);
    if (v11)
LABEL_17:
      sub_20815FC78((uint64_t)v30);
  }
LABEL_18:
  sub_208134544(&v32, (uint64_t)&v29);
  v15 = v33;
  if (v30)
  {
    v17 = *v30;
    v16 = (std::__shared_weak_count *)v30[1];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        v27 = v15;
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        v15 = v27;
        if (!v17)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v17)
    {
LABEL_25:
      v25 = v15;
      sub_20815FE54((uint64_t)v30);
      v15 = v25;
    }
  }
LABEL_26:
  v29 = &off_24C08A5D8;
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      v26 = v15;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v15 = v26;
    }
  }
LABEL_32:
  *(_OWORD *)(a1 + 48) = v15;
  *(_QWORD *)a1 = &off_24C088CF8;
  return a1;
}

void sub_20813BE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t (**a18)(), uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  a18 = &off_24C08A5D8;
  v23 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(unsigned int *)(v20 + 40);
  if ((_DWORD)v26 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v26])(&a17, v21);
  *(_DWORD *)(v20 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813BF24(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088A28;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20813BF88(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (sub_208134C80(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v8;
        v32 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v16;
        v32 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v30 = &off_24C08A5D8;
        v31 = v12;
        v32 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v30 = &off_24C08A5D8;
          if (v22)
          {
            v31 = v22;
            v32 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v31 = 0;
            v32 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          v30 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_208134544(a1, (uint64_t)&v30);
    v30 = &off_24C08A5D8;
    v27 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20813C1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813C1D8(_QWORD *a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  if (sub_208134C80(a2))
  {
    if (*(_DWORD *)(a2 + 52))
      v4 = *(_DWORD *)(a2 + 48) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 48);
    if (v4)
      v5 = 0;
    v6 = 0x100000000;
    if (v5 > 0x100000000)
      v6 = v5;
    *a1 = 0;
    a1[1] = v5;
    a1[2] = ((_DWORD)v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * (_DWORD)v6 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v8 = *(_QWORD *)(a2 + 24);
        v7 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v8;
        v34 = v7;
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        break;
      case 1:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v16;
        v34 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 2:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v32 = &off_24C08A5D8;
        v33 = v12;
        v34 = v11;
        if (v11)
        {
          v13 = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        break;
      case 3:
        v19 = *(std::__shared_weak_count **)(a2 + 24);
        if (v19 && (v20 = std::__shared_weak_count::lock(v19)) != 0)
        {
          v21 = v20;
          v22 = *(_QWORD *)(a2 + 16);
          v32 = &off_24C08A5D8;
          if (v22)
          {
            v33 = v22;
            v34 = v20;
            v23 = (unint64_t *)&v20->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          else
          {
            v33 = 0;
            v34 = 0;
          }
          v25 = (unint64_t *)&v20->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v32 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_208134544(&v30, (uint64_t)&v32);
    *a1 = v30;
    *(_OWORD *)(a1 + 1) = v31;
    v32 = &off_24C08A5D8;
    v27 = v34;
    if (v34)
    {
      v28 = (unint64_t *)&v34->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_20813C424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20813C438()
{
  return 4;
}

_UNKNOWN **sub_20813C440()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_20813C494(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];

  sub_2081351A4(&v20, a1);
  sub_20813C1D8(v17, a1);
  sub_20813C1D8(&v15, a1);
  v4 = operator new(0x40uLL);
  v5 = v4;
  v23 = v15;
  v24 = v16;
  *v4 = &off_24C088CF8;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  v25[0] = v17[1];
  v25[1] = v18 | (unint64_t)(v6 << 32);
  sub_208134860((uint64_t)v4, (unsigned int *)v25, &v23);
  *v5 = &off_24C088CF8;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20813C600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_20815AC38(&a16);
  _Unwind_Resume(a1);
}

void sub_20813C61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813C630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813C644(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2081351A4(a2, a1);
}

double sub_20813C650(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[3];
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t *v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[2];

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089490, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v30, lpsrc, 4);
    v17 = (void *)v30;
    v18 = *(_QWORD *)(v30 + 16);
    v21 = *(_OWORD *)v30;
    v22[0] = v18;
    *(_QWORD *)&v30 = 0;
    operator delete(v17);
    sub_20813BF88((uint64_t *)&v30, a1);
    *(float *)&result = sub_207D5A1F4((uint64_t)&v21, (uint64_t)&v30);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2081351A4(&v27, (uint64_t)v4);
  sub_20813C1D8(&v25, v5);
  v30 = v25;
  v31 = v26;
  if (HIDWORD(v26) <= 8)
    v6 = 8;
  else
    v6 = HIDWORD(v26);
  *(_QWORD *)&v21 = &off_24C088CF8;
  v32[0] = *((_QWORD *)&v25 + 1);
  v32[1] = v26 | (unint64_t)(v6 << 32);
  sub_208134860((uint64_t)&v21, (unsigned int *)v32, &v30);
  *(_QWORD *)&v21 = &off_24C088CF8;
  if (v28)
  {
    v8 = *v28;
    v7 = (std::__shared_weak_count *)v28[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v28);
  }
LABEL_13:
  v27 = &off_24C08A5D8;
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v24;
      *(_OWORD *)(a1 + 48) = v24;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_25;
  }
  *(_QWORD *)&v30 = a1 + 16;
  ((void (*)(__int128 *))off_24C0895D8[v15])(&v30);
LABEL_25:
  v20 = v23;
  result = *(double *)&v24;
  *(_OWORD *)(a1 + 48) = v24;
  *(_QWORD *)&v21 = off_24C088A28;
  if ((_DWORD)v20 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C089598[v20])(&v30, v22);
  return result;
}

void sub_20813C8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 != -1)
    ((void (*)(uint64_t *, uint64_t))off_24C089598[a14])(&a20, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813C9B8(uint64_t a1)
{
  uint64_t v2[3];

  sub_20813BF88(v2, a1);
  return v2[0];
}

double sub_20813C9E0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813BF88((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_20813CA70@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813C1D8(&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_20813CB00()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E521D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E521D8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E521E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E521E0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E521E8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E521E8))
    {
LABEL_13:
      if (byte_253E525DF < 0)
      {
        sub_207CA40D8(&xmmword_253E525B0, (void *)qword_253E525C8, unk_253E525D0);
      }
      else
      {
        xmmword_253E525B0 = *(_OWORD *)&qword_253E525C8;
        unk_253E525C0 = unk_253E525D8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E525B0, &dword_207C77000);
      __cxa_guard_release(&qword_253E521E0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E521F0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E521F0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray32f>]", &qword_253E525E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E525E0, &dword_207C77000);
      __cxa_guard_release(&qword_253E521F0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E521F8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E521F8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52200);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52200))
      {
        if (byte_253E525F8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E525F8, *(unint64_t *)&byte_253E525F8[8]);
        else
          __p = *(std::string *)byte_253E525F8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52610);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52610, &dword_207C77000);
        __cxa_guard_release(&qword_253E52200);
      }
      if (byte_253E52627 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52610, *((unint64_t *)&xmmword_253E52610 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52610;
        v18 = unk_253E52620;
      }
      sub_207D59D2C((char *)v17, (std::string *)&qword_253E525C8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E525C8, &dword_207C77000);
      __cxa_guard_release(&qword_253E521E8);
      goto LABEL_13;
    }
    if (byte_253E525F7 >= 0)
      v6 = byte_253E525F7;
    else
      v6 = unk_253E525E8;
    if (byte_253E525F7 >= 0)
      v7 = &qword_253E525E0;
    else
      v7 = (uint64_t *)qword_253E525E0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E525F8[8] = v6;
      *(_QWORD *)&byte_253E525F8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E525F8 = v13;
    }
    else
    {
      v13 = byte_253E525F8;
      byte_253E525F8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E525F8, &dword_207C77000);
    __cxa_guard_release(&qword_253E521F8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E525C7 < 0)
  {
    sub_207CA40D8(&xmmword_253E52598, (void *)xmmword_253E525B0, *((unint64_t *)&xmmword_253E525B0 + 1));
  }
  else
  {
    xmmword_253E52598 = xmmword_253E525B0;
    unk_253E525A8 = unk_253E525C0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52598, &dword_207C77000);
  __cxa_guard_release(&qword_253E521D8);
LABEL_2:
  if (byte_253E525AF >= 0)
    return &xmmword_253E52598;
  else
    return (__int128 *)xmmword_253E52598;
}

void sub_20813CF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E521E8);
  __cxa_guard_abort(&qword_253E521E0);
  __cxa_guard_abort(&qword_253E521D8);
  _Unwind_Resume(a1);
}

void sub_20813CFF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E521D8);
  _Unwind_Resume(a1);
}

void sub_20813D008()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_20813D044(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208134E60(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2081351A4(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20813D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813D3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20813D41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20813D430()
{
  return 65792;
}

void sub_20813D43C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208134E60(a2, a1);
}

uint64_t sub_20813D448(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C08A4B8;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v33 = 2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088518;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_20812A170(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20812A474((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C08A4B8;
  return a1;
}

void sub_20813D6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813D770(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088518;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20813D7D4(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20812ADB4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812A474(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20813DA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20813DA4C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20812ADB4(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812A474((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20813DCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20813DCE4()
{
  return 5;
}

_UNKNOWN **sub_20813DCEC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_20813DD40(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20812B300(&v20, a1);
  sub_20813DA4C((uint64_t)v16, a1);
  sub_20813DA4C((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C08A4B8;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20812A804((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C08A4B8;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20813DEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20813DF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813DF5C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812B300(a2, a1);
}

double sub_20813DF68(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  _OWORD v35[3];
  _DWORD v36[3];
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0894A8, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v35, lpsrc, 5);
    v17 = *(void **)&v35[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v35[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v35[0] + 32);
    v24 = **(_OWORD **)&v35[0];
    v25 = v19;
    v26 = v18;
    *(_QWORD *)&v35[0] = 0;
    operator delete(v17);
    sub_20813D7D4((uint64_t)v35, a1);
    *(_QWORD *)&v30[0] = &v24;
    *((_QWORD *)&v30[0] + 1) = v35;
    sub_2080F33F8((size_t *)v30);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20812B300(&v32, (uint64_t)v4);
  sub_20813DA4C((uint64_t)v30, v5);
  v35[0] = v30[0];
  v35[1] = v30[1];
  v35[2] = v31;
  *(_QWORD *)&v24 = &off_24C08A4B8;
  if (HIDWORD(v31) <= 0x20)
    v6 = 32;
  else
    v6 = HIDWORD(v31);
  *(_QWORD *)&v36[1] = v31;
  v36[0] = 2;
  LODWORD(v41[0]) = 1;
  *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
  v37 = v41[0];
  v38 = v6;
  v39 = v31;
  v40 = *(_QWORD *)((char *)v41 + 4);
  sub_20812A804((uint64_t)&v24, (uint64_t)v36, v35);
  *(_QWORD *)&v24 = &off_24C08A4B8;
  if (v33)
  {
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v33);
  }
LABEL_13:
  v32 = &off_24C08A5D8;
  v12 = v34;
  if (v34)
  {
    v13 = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v26);
  *(_DWORD *)(a1 + 8) = DWORD2(v24);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v27;
      v23 = v28;
      *(_OWORD *)(a1 + 48) = v27;
      *(_OWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 80) = v29;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C089598[v16])(v35, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v35[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0895D8[v15])(v35);
LABEL_24:
  v21 = DWORD2(v26);
  result = *(double *)&v27;
  v22 = v28;
  *(_OWORD *)(a1 + 48) = v27;
  *(_OWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)&v24 = off_24C088518;
  if ((_DWORD)v21 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C089598[v21])(v35, &v25);
  return result;
}

void sub_20813E260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813E370(uint64_t a1)
{
  _QWORD v2[6];

  sub_20813D7D4((uint64_t)v2, a1);
  return v2[0];
}

double sub_20813E398@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813D7D4((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20813E428@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813DA4C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20813E4B8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52208);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52208))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52210);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52210))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52218);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52218))
    {
LABEL_13:
      if (byte_253E5266F < 0)
      {
        sub_207CA40D8(&xmmword_253E52640, (void *)qword_253E52658, unk_253E52660);
      }
      else
      {
        xmmword_253E52640 = *(_OWORD *)&qword_253E52658;
        unk_253E52650 = unk_253E52668;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52640, &dword_207C77000);
      __cxa_guard_release(&qword_253E52210);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52220);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52220))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two8u>]", &qword_253E52670);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52670, &dword_207C77000);
      __cxa_guard_release(&qword_253E52220);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52228);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52228))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52230);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52230))
      {
        if (byte_253E52688[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52688, *(unint64_t *)&byte_253E52688[8]);
        else
          __p = *(std::string *)byte_253E52688;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E526A0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E526A0, &dword_207C77000);
        __cxa_guard_release(&qword_253E52230);
      }
      if (byte_253E526B7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E526A0, *((unint64_t *)&xmmword_253E526A0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E526A0;
        v18 = unk_253E526B0;
      }
      sub_2080FE9C4((char *)v17, (std::string *)&qword_253E52658);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52658, &dword_207C77000);
      __cxa_guard_release(&qword_253E52218);
      goto LABEL_13;
    }
    if (byte_253E52687 >= 0)
      v6 = byte_253E52687;
    else
      v6 = unk_253E52678;
    if (byte_253E52687 >= 0)
      v7 = &qword_253E52670;
    else
      v7 = (uint64_t *)qword_253E52670;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52688[8] = v6;
      *(_QWORD *)&byte_253E52688[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52688 = v13;
    }
    else
    {
      v13 = byte_253E52688;
      byte_253E52688[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52688, &dword_207C77000);
    __cxa_guard_release(&qword_253E52228);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52657 < 0)
  {
    sub_207CA40D8(&xmmword_253E52628, (void *)xmmword_253E52640, *((unint64_t *)&xmmword_253E52640 + 1));
  }
  else
  {
    xmmword_253E52628 = xmmword_253E52640;
    unk_253E52638 = unk_253E52650;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52628, &dword_207C77000);
  __cxa_guard_release(&qword_253E52208);
LABEL_2:
  if (byte_253E5263F >= 0)
    return &xmmword_253E52628;
  else
    return (__int128 *)xmmword_253E52628;
}

void sub_20813E90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52218);
  __cxa_guard_abort(&qword_253E52210);
  __cxa_guard_abort(&qword_253E52208);
  _Unwind_Resume(a1);
}

void sub_20813E9A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52208);
  _Unwind_Resume(a1);
}

void sub_20813E9C0()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_20813E9FC(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20812AF94(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20812B300(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20813ED78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813ED9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20813EDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20813EDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20813EDE8()
{
  return 65792;
}

void sub_20813EDF4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812AF94(a2, a1);
}

uint64_t sub_20813EE00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C088D88;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v33 = 2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088908;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_208132228(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20813252C((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C088D88;
  return a1;
}

void sub_20813F074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813F128(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088908;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20813F18C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208132CF0(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813252C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20813F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20813F404(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_208132CF0(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813252C((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20813F688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20813F69C()
{
  return 7;
}

_UNKNOWN **sub_20813F6A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_20813F6F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20813323C(&v20, a1);
  sub_20813F404((uint64_t)v16, a1);
  sub_20813F404((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C088D88;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2081328C4((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C088D88;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20813F8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20813F900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20813F914(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20813323C(a2, a1);
}

double sub_20813F920(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  _OWORD v35[3];
  _DWORD v36[3];
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0894C0, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v35, lpsrc, 7);
    v17 = *(void **)&v35[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v35[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v35[0] + 32);
    v24 = **(_OWORD **)&v35[0];
    v25 = v19;
    v26 = v18;
    *(_QWORD *)&v35[0] = 0;
    operator delete(v17);
    sub_20813F18C((uint64_t)v35, a1);
    *(_QWORD *)&v30[0] = &v24;
    *((_QWORD *)&v30[0] + 1) = v35;
    *(_QWORD *)&result = sub_2080F680C((uint64_t *)v30);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_20813323C(&v32, (uint64_t)v4);
  sub_20813F404((uint64_t)v30, v5);
  v35[0] = v30[0];
  v35[1] = v30[1];
  v35[2] = v31;
  *(_QWORD *)&v24 = &off_24C088D88;
  if (HIDWORD(v31) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v31);
  *(_QWORD *)&v36[1] = v31;
  v36[0] = 2;
  LODWORD(v41[0]) = 1;
  *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
  v37 = v41[0];
  v38 = v6;
  v39 = v31;
  v40 = *(_QWORD *)((char *)v41 + 4);
  sub_2081328C4((uint64_t)&v24, (uint64_t)v36, v35);
  *(_QWORD *)&v24 = &off_24C088D88;
  if (v33)
  {
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v33);
  }
LABEL_13:
  v32 = &off_24C08A5D8;
  v12 = v34;
  if (v34)
  {
    v13 = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v26);
  *(_DWORD *)(a1 + 8) = DWORD2(v24);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v27;
      v23 = v28;
      *(_OWORD *)(a1 + 48) = v27;
      *(_OWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 80) = v29;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C089598[v16])(v35, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v35[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0895D8[v15])(v35);
LABEL_24:
  v21 = DWORD2(v26);
  result = *(double *)&v27;
  v22 = v28;
  *(_OWORD *)(a1 + 48) = v27;
  *(_OWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)&v24 = off_24C088908;
  if ((_DWORD)v21 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C089598[v21])(v35, &v25);
  return result;
}

void sub_20813FC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20813FD28(uint64_t a1)
{
  _QWORD v2[6];

  sub_20813F18C((uint64_t)v2, a1);
  return v2[0];
}

double sub_20813FD50@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813F18C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20813FDE0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20813F404((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20813FE70()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52238);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52238))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52240);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52240))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52248);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52248))
    {
LABEL_13:
      if (byte_253E526FF < 0)
      {
        sub_207CA40D8(&xmmword_253E526D0, (void *)qword_253E526E8, unk_253E526F0);
      }
      else
      {
        xmmword_253E526D0 = *(_OWORD *)&qword_253E526E8;
        unk_253E526E0 = unk_253E526F8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E526D0, &dword_207C77000);
      __cxa_guard_release(&qword_253E52240);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52250);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52250))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two16f>]", &qword_253E52700);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52700, &dword_207C77000);
      __cxa_guard_release(&qword_253E52250);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52258);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52258))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52260);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52260))
      {
        if (byte_253E52718[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52718, *(unint64_t *)&byte_253E52718[8]);
        else
          __p = *(std::string *)byte_253E52718;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52730);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52730, &dword_207C77000);
        __cxa_guard_release(&qword_253E52260);
      }
      if (byte_253E52747 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52730, *((unint64_t *)&xmmword_253E52730 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52730;
        v18 = unk_253E52740;
      }
      sub_2080FEAEC((char *)v17, (std::string *)&qword_253E526E8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E526E8, &dword_207C77000);
      __cxa_guard_release(&qword_253E52248);
      goto LABEL_13;
    }
    if (byte_253E52717 >= 0)
      v6 = byte_253E52717;
    else
      v6 = unk_253E52708;
    if (byte_253E52717 >= 0)
      v7 = &qword_253E52700;
    else
      v7 = (uint64_t *)qword_253E52700;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52718[8] = v6;
      *(_QWORD *)&byte_253E52718[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52718 = v13;
    }
    else
    {
      v13 = byte_253E52718;
      byte_253E52718[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52718, &dword_207C77000);
    __cxa_guard_release(&qword_253E52258);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E526E7 < 0)
  {
    sub_207CA40D8(&xmmword_253E526B8, (void *)xmmword_253E526D0, *((unint64_t *)&xmmword_253E526D0 + 1));
  }
  else
  {
    xmmword_253E526B8 = xmmword_253E526D0;
    unk_253E526C8 = unk_253E526E0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E526B8, &dword_207C77000);
  __cxa_guard_release(&qword_253E52238);
LABEL_2:
  if (byte_253E526CF >= 0)
    return &xmmword_253E526B8;
  else
    return (__int128 *)xmmword_253E526B8;
}

void sub_2081402C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52248);
  __cxa_guard_abort(&qword_253E52240);
  __cxa_guard_abort(&qword_253E52238);
  _Unwind_Resume(a1);
}

void sub_208140360(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52238);
  _Unwind_Resume(a1);
}

void sub_208140378()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2081403B4(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208132ED0(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20813323C(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_208140730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208140754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208140768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20814078C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2081407A0()
{
  return 65792;
}

void sub_2081407AC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208132ED0(a2, a1);
}

uint64_t sub_2081407B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C088E18;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 8)
    v4 = 8;
  else
    v4 = v4;
  *(_DWORD *)v33 = 2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088AB8;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_208135298(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20813559C((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C088E18;
  return a1;
}

void sub_208140A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208140AE0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088AB8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_208140B44(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208135D60(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 2;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(DWORD1(v34), 2);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813559C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208140DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_208140DBC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_208135D60(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)&v37[4] = v5;
    v6 = 2 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 2);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813559C((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208141040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208141054()
{
  return 8;
}

_UNKNOWN **sub_20814105C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_2081410B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2081362AC(&v20, a1);
  sub_208140DBC((uint64_t)v16, a1);
  sub_208140DBC((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C088E18;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 2;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_208135934((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C088E18;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20814126C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2081412B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2081412CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2081362AC(a2, a1);
}

double sub_2081412D8(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  _OWORD v35[3];
  _DWORD v36[3];
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0894D8, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v35, lpsrc, 8);
    v17 = *(void **)&v35[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v35[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v35[0] + 32);
    v24 = **(_OWORD **)&v35[0];
    v25 = v19;
    v26 = v18;
    *(_QWORD *)&v35[0] = 0;
    operator delete(v17);
    sub_208140B44((uint64_t)v35, a1);
    *(_QWORD *)&v30[0] = &v24;
    *((_QWORD *)&v30[0] + 1) = v35;
    *(float *)&result = sub_2080F800C((uint64_t *)v30);
    return result;
  }
  v5 = (uint64_t)v4;
  sub_2081362AC(&v32, (uint64_t)v4);
  sub_208140DBC((uint64_t)v30, v5);
  v35[0] = v30[0];
  v35[1] = v30[1];
  v35[2] = v31;
  *(_QWORD *)&v24 = &off_24C088E18;
  if (HIDWORD(v31) <= 8)
    v6 = 8;
  else
    v6 = HIDWORD(v31);
  *(_QWORD *)&v36[1] = v31;
  v36[0] = 2;
  LODWORD(v41[0]) = 1;
  *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
  v37 = v41[0];
  v38 = v6;
  v39 = v31;
  v40 = *(_QWORD *)((char *)v41 + 4);
  sub_208135934((uint64_t)&v24, (uint64_t)v36, v35);
  *(_QWORD *)&v24 = &off_24C088E18;
  if (v33)
  {
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v33);
  }
LABEL_13:
  v32 = &off_24C08A5D8;
  v12 = v34;
  if (v34)
  {
    v13 = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v26);
  *(_DWORD *)(a1 + 8) = DWORD2(v24);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v27;
      v23 = v28;
      *(_OWORD *)(a1 + 48) = v27;
      *(_OWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 80) = v29;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C089598[v16])(v35, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v35[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0895D8[v15])(v35);
LABEL_24:
  v21 = DWORD2(v26);
  result = *(double *)&v27;
  v22 = v28;
  *(_OWORD *)(a1 + 48) = v27;
  *(_OWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)&v24 = off_24C088AB8;
  if ((_DWORD)v21 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C089598[v21])(v35, &v25);
  return result;
}

void sub_2081415D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081416E0(uint64_t a1)
{
  _QWORD v2[6];

  sub_208140B44((uint64_t)v2, a1);
  return v2[0];
}

double sub_208141708@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208140B44((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_208141798@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208140DBC((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_208141828()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52268);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52268))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52270);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52270))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52278);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52278))
    {
LABEL_13:
      if (byte_253E5278F < 0)
      {
        sub_207CA40D8(&xmmword_253E52760, (void *)qword_253E52778, unk_253E52780);
      }
      else
      {
        xmmword_253E52760 = *(_OWORD *)&qword_253E52778;
        unk_253E52770 = unk_253E52788;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52760, &dword_207C77000);
      __cxa_guard_release(&qword_253E52270);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52280);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52280))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two32f>]", &qword_253E52790);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52790, &dword_207C77000);
      __cxa_guard_release(&qword_253E52280);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52288);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52288))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52290);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52290))
      {
        if (byte_253E527A8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E527A8, *(unint64_t *)&byte_253E527A8[8]);
        else
          __p = *(std::string *)byte_253E527A8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E527C0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E527C0, &dword_207C77000);
        __cxa_guard_release(&qword_253E52290);
      }
      if (byte_253E527D7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E527C0, *((unint64_t *)&xmmword_253E527C0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E527C0;
        v18 = unk_253E527D0;
      }
      sub_2080FEC14((char *)v17, (std::string *)&qword_253E52778);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52778, &dword_207C77000);
      __cxa_guard_release(&qword_253E52278);
      goto LABEL_13;
    }
    if (byte_253E527A7 >= 0)
      v6 = byte_253E527A7;
    else
      v6 = unk_253E52798;
    if (byte_253E527A7 >= 0)
      v7 = &qword_253E52790;
    else
      v7 = (uint64_t *)qword_253E52790;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E527A8[8] = v6;
      *(_QWORD *)&byte_253E527A8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E527A8 = v13;
    }
    else
    {
      v13 = byte_253E527A8;
      byte_253E527A8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E527A8, &dword_207C77000);
    __cxa_guard_release(&qword_253E52288);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52777 < 0)
  {
    sub_207CA40D8(&xmmword_253E52748, (void *)xmmword_253E52760, *((unint64_t *)&xmmword_253E52760 + 1));
  }
  else
  {
    xmmword_253E52748 = xmmword_253E52760;
    unk_253E52758 = unk_253E52770;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52748, &dword_207C77000);
  __cxa_guard_release(&qword_253E52268);
LABEL_2:
  if (byte_253E5275F >= 0)
    return &xmmword_253E52748;
  else
    return (__int128 *)xmmword_253E52748;
}

void sub_208141C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52278);
  __cxa_guard_abort(&qword_253E52270);
  __cxa_guard_abort(&qword_253E52268);
  _Unwind_Resume(a1);
}

void sub_208141D18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52268);
  _Unwind_Resume(a1);
}

void sub_208141D30()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208141D6C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208135F40(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2081362AC(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2081420E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814210C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208142120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_208142144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208142158()
{
  return 65792;
}

void sub_208142164(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208135F40(a2, a1);
}

uint64_t sub_208142170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C088EA8;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v33 = 3;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C0885A8;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_20812B3F4(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20812B6F4((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C088EA8;
  return a1;
}

void sub_2081423E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208142498(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0885A8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2081424FC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20812BFF0(a2))
  {
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24C08A5D8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812B6F4(a1, (uint64_t)&v27);
    v27 = &off_24C08A5D8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2081426D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2081426EC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (sub_20812BFF0(a2))
  {
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C08A5D8;
        v32 = v5;
        v33 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C08A5D8;
        v32 = v13;
        v33 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C08A5D8;
        v32 = v9;
        v33 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v31 = &off_24C08A5D8;
          if (v19)
          {
            v32 = v19;
            v33 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v32 = 0;
            v33 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v31 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812B6F4((uint64_t)&v27, (uint64_t)&v31);
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 40) = v30;
    v31 = &off_24C08A5D8;
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2081428E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081428FC()
{
  return 21;
}

_UNKNOWN **sub_208142904()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_208142958(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20812C4B4(&v20, a1);
  sub_2081426EC((uint64_t)v16, a1);
  sub_2081426EC((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C088EA8;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 3;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20812BA84((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C088EA8;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_208142B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208142B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208142B74(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812C4B4(a2, a1);
}

double sub_208142B80(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  uint64_t (**v46)();
  uint64_t *v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _DWORD v52[3];
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];

  v57[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0894F0, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20812C4B4(&v46, (uint64_t)v4);
    sub_2081426EC((uint64_t)v44, v5);
    v49 = v44[0];
    v50 = v44[1];
    v51 = v45;
    *(_QWORD *)&v38 = &off_24C088EA8;
    if (HIDWORD(v45) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v45);
    *(_QWORD *)&v52[1] = v45;
    v52[0] = 3;
    LODWORD(v57[0]) = 1;
    *(_QWORD *)((char *)v57 + 4) = DWORD2(v45) | (unint64_t)(v6 << 32);
    v53 = v57[0];
    v54 = v6;
    v55 = v45;
    v56 = *(_QWORD *)((char *)v57 + 4);
    sub_20812BA84((uint64_t)&v38, (uint64_t)v52, &v49);
    *(_QWORD *)&v38 = &off_24C088EA8;
    if (!v47)
      goto LABEL_13;
    v8 = *v47;
    v7 = (std::__shared_weak_count *)v47[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v46 = &off_24C08A5D8;
        v12 = v48;
        if (v48)
        {
          v13 = (unint64_t *)&v48->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v40);
        *(_DWORD *)(a1 + 8) = DWORD2(v38);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v41;
            v37 = v42;
            *(_OWORD *)(a1 + 48) = v41;
            *(_OWORD *)(a1 + 64) = v37;
            *(_QWORD *)(a1 + 80) = v43;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v49, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v49 = a1 + 16;
        ((void (*)(__int128 *))off_24C0895D8[v15])(&v49);
LABEL_26:
        v21 = DWORD2(v40);
        result = *(double *)&v41;
        v22 = v42;
        *(_OWORD *)(a1 + 48) = v41;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v43;
        *(_QWORD *)&v38 = off_24C0885A8;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C089598[v21])(&v49, &v39);
        return result;
      }
    }
    sub_20815FE54((uint64_t)v47);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v49, lpsrc, 21);
  v17 = (void *)v49;
  v19 = *(_OWORD *)(v49 + 16);
  v18 = *(_OWORD *)(v49 + 32);
  v38 = *(_OWORD *)v49;
  v39 = v19;
  v40 = v18;
  *(_QWORD *)&v49 = 0;
  operator delete(v17);
  sub_2081424FC((uint64_t)&v49, a1);
  *(_QWORD *)&v44[0] = &v38;
  *((_QWORD *)&v44[0] + 1) = &v49;
  if (DWORD1(v39) == 1 && DWORD1(v50) == 1)
  {
    sub_2080F3514((size_t *)v44);
  }
  else if (DWORD2(v38) && HIDWORD(v38) && (_DWORD)v39)
  {
    v23 = HIDWORD(v38) - 1;
    v24 = DWORD2(v39);
    v25 = DWORD2(v50);
    v26 = (_BYTE *)v38;
    v27 = (_BYTE *)v49;
    v28 = v39 - 1;
    if ((_DWORD)v39 != 1)
    {
      v29 = HIDWORD(v50);
      v30 = HIDWORD(v39);
      if (HIDWORD(v38) == 1)
      {
        do
        {
          *v27 = *v26;
          v27[1] = v26[1];
          v27[2] = v26[2];
          v26 += v30;
          v27 += v29;
          --v28;
        }
        while (v28);
      }
      else
      {
        v31 = 0;
        v32 = (_BYTE *)(v49 + 2);
        v33 = (_BYTE *)(v38 + 2);
        do
        {
          v34 = v33;
          v35 = v32;
          v36 = v23;
          do
          {
            *(v35 - 2) = *(v34 - 2);
            *(v35 - 1) = *(v34 - 1);
            *v35 = *v34;
            v35 += v25;
            v34 += v24;
            --v36;
          }
          while (v36);
          *(v35 - 2) = *(v34 - 2);
          *(v35 - 1) = *(v34 - 1);
          *v35 = *v34;
          v26 += v30;
          v27 += v29;
          ++v31;
          v32 += v29;
          v33 += v30;
        }
        while (v31 != v28);
      }
    }
    for (; v23; --v23)
    {
      *v27 = *v26;
      v27[1] = v26[1];
      v27[2] = v26[2];
      v26 += v24;
      v27 += v25;
    }
    *v27 = *v26;
    v27[1] = v26[1];
    v27[2] = v26[2];
  }
  return result;
}

void sub_208142FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081430B4(uint64_t a1)
{
  _QWORD v2[6];

  sub_2081424FC((uint64_t)v2, a1);
  return v2[0];
}

double sub_2081430DC@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2081424FC((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20814316C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2081426EC((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2081431FC()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52298);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52298))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E522A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E522A0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E522A8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E522A8))
    {
LABEL_13:
      if (byte_253E5281F < 0)
      {
        sub_207CA40D8(&xmmword_253E527F0, (void *)qword_253E52808, unk_253E52810);
      }
      else
      {
        xmmword_253E527F0 = *(_OWORD *)&qword_253E52808;
        unk_253E52800 = unk_253E52818;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E527F0, &dword_207C77000);
      __cxa_guard_release(&qword_253E522A0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E522B0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E522B0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb8u>]", &qword_253E52820);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52820, &dword_207C77000);
      __cxa_guard_release(&qword_253E522B0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E522B8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E522B8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E522C0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E522C0))
      {
        if (byte_253E52838[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52838, *(unint64_t *)&byte_253E52838[8]);
        else
          __p = *(std::string *)byte_253E52838;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52850);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52850, &dword_207C77000);
        __cxa_guard_release(&qword_253E522C0);
      }
      if (byte_253E52867 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52850, *((unint64_t *)&xmmword_253E52850 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52850;
        v18 = unk_253E52860;
      }
      sub_207F17334((char *)v17, (std::string *)&qword_253E52808);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52808, &dword_207C77000);
      __cxa_guard_release(&qword_253E522A8);
      goto LABEL_13;
    }
    if (byte_253E52837 >= 0)
      v6 = byte_253E52837;
    else
      v6 = unk_253E52828;
    if (byte_253E52837 >= 0)
      v7 = &qword_253E52820;
    else
      v7 = (uint64_t *)qword_253E52820;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52838[8] = v6;
      *(_QWORD *)&byte_253E52838[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52838 = v13;
    }
    else
    {
      v13 = byte_253E52838;
      byte_253E52838[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52838, &dword_207C77000);
    __cxa_guard_release(&qword_253E522B8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52807 < 0)
  {
    sub_207CA40D8(&xmmword_253E527D8, (void *)xmmword_253E527F0, *((unint64_t *)&xmmword_253E527F0 + 1));
  }
  else
  {
    xmmword_253E527D8 = xmmword_253E527F0;
    unk_253E527E8 = unk_253E52800;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E527D8, &dword_207C77000);
  __cxa_guard_release(&qword_253E52298);
LABEL_2:
  if (byte_253E527EF >= 0)
    return &xmmword_253E527D8;
  else
    return (__int128 *)xmmword_253E527D8;
}

void sub_208143650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E522A8);
  __cxa_guard_abort(&qword_253E522A0);
  __cxa_guard_abort(&qword_253E52298);
  _Unwind_Resume(a1);
}

void sub_2081436EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52298);
  _Unwind_Resume(a1);
}

void sub_208143704()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208143740(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20812C1D0(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20812C4B4(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_208143ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208143AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208143AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_208143B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208143B2C()
{
  return 65792;
}

void sub_208143B38(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812C1D0(a2, a1);
}

uint64_t sub_208143B44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C088F38;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v33 = 3;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088758;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_20812EE88(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20812F18C((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C088F38;
  return a1;
}

void sub_208143DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208143E6C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088758;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_208143ED0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (sub_20812FAB0(a2))
  {
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v5;
        v29 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v13;
        v29 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v27 = &off_24C08A5D8;
        v28 = v9;
        v29 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v27 = &off_24C08A5D8;
          if (v19)
          {
            v28 = v19;
            v29 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v28 = 0;
            v29 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v27 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812F18C(a1, (uint64_t)&v27);
    v27 = &off_24C08A5D8;
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2081440AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2081440C0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (sub_20812FAB0(a2))
  {
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v5 = *(_QWORD *)(a2 + 24);
        v4 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C08A5D8;
        v32 = v5;
        v33 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        break;
      case 1:
        v13 = *(_QWORD *)(a2 + 24);
        v12 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C08A5D8;
        v32 = v13;
        v33 = v12;
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        break;
      case 2:
        v9 = *(_QWORD *)(a2 + 24);
        v8 = *(std::__shared_weak_count **)(a2 + 32);
        v31 = &off_24C08A5D8;
        v32 = v9;
        v33 = v8;
        if (v8)
        {
          v10 = (unint64_t *)&v8->__shared_owners_;
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        break;
      case 3:
        v16 = *(std::__shared_weak_count **)(a2 + 24);
        if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
        {
          v18 = v17;
          v19 = *(_QWORD *)(a2 + 16);
          v31 = &off_24C08A5D8;
          if (v19)
          {
            v32 = v19;
            v33 = v17;
            v20 = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          else
          {
            v32 = 0;
            v33 = 0;
          }
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v31 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812F18C((uint64_t)&v27, (uint64_t)&v31);
    *(_QWORD *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 40) = v30;
    v31 = &off_24C08A5D8;
    v24 = v33;
    if (v33)
    {
      v25 = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_2081442BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081442D0()
{
  return 22;
}

_UNKNOWN **sub_2081442D8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_20814432C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20812FF74(&v20, a1);
  sub_2081440C0((uint64_t)v16, a1);
  sub_2081440C0((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C088F38;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 3;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20812F524((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C088F38;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2081444E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208144534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208144548(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812FF74(a2, a1);
}

void sub_208144554(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  _WORD *v34;
  _WORD *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  uint64_t (**v46)();
  uint64_t *v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _DWORD v52[3];
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];

  v57[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089508, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20812FF74(&v46, (uint64_t)v4);
    sub_2081440C0((uint64_t)v44, v5);
    v49 = v44[0];
    v50 = v44[1];
    v51 = v45;
    *(_QWORD *)&v38 = &off_24C088F38;
    if (HIDWORD(v45) <= 0x10)
      v6 = 16;
    else
      v6 = HIDWORD(v45);
    *(_QWORD *)&v52[1] = v45;
    v52[0] = 3;
    LODWORD(v57[0]) = 1;
    *(_QWORD *)((char *)v57 + 4) = DWORD2(v45) | (unint64_t)(v6 << 32);
    v53 = v57[0];
    v54 = v6;
    v55 = v45;
    v56 = *(_QWORD *)((char *)v57 + 4);
    sub_20812F524((uint64_t)&v38, (uint64_t)v52, &v49);
    *(_QWORD *)&v38 = &off_24C088F38;
    if (!v47)
      goto LABEL_13;
    v8 = *v47;
    v7 = (std::__shared_weak_count *)v47[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v46 = &off_24C08A5D8;
        v12 = v48;
        if (v48)
        {
          v13 = (unint64_t *)&v48->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v40);
        *(_DWORD *)(a1 + 8) = DWORD2(v38);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            v37 = v42;
            *(_OWORD *)(a1 + 48) = v41;
            *(_OWORD *)(a1 + 64) = v37;
            *(_QWORD *)(a1 + 80) = v43;
            return;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v49, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v49 = a1 + 16;
        ((void (*)(__int128 *))off_24C0895D8[v15])(&v49);
LABEL_26:
        v20 = DWORD2(v40);
        v21 = v42;
        *(_OWORD *)(a1 + 48) = v41;
        *(_OWORD *)(a1 + 64) = v21;
        *(_QWORD *)(a1 + 80) = v43;
        *(_QWORD *)&v38 = off_24C088758;
        if ((_DWORD)v20 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C089598[v20])(&v49, &v39);
        return;
      }
    }
    sub_20815FE54((uint64_t)v47);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v49, lpsrc, 22);
  v17 = (void *)v49;
  v19 = *(_OWORD *)(v49 + 16);
  v18 = *(_OWORD *)(v49 + 32);
  v38 = *(_OWORD *)v49;
  v39 = v19;
  v40 = v18;
  *(_QWORD *)&v49 = 0;
  operator delete(v17);
  sub_208143ED0((uint64_t)&v49, a1);
  *(_QWORD *)&v44[0] = &v38;
  *((_QWORD *)&v44[0] + 1) = &v49;
  if (DWORD1(v39) == 1 && DWORD1(v50) == 1)
  {
    sub_2080F4F10((uint64_t *)v44);
    return;
  }
  if (DWORD2(v38) && HIDWORD(v38) && (_DWORD)v39)
  {
    v22 = HIDWORD(v38) - 1;
    v23 = DWORD2(v39);
    v24 = DWORD2(v50);
    v25 = (_WORD *)v38;
    v26 = (_WORD *)v49;
    v27 = v39 - 1;
    if ((_DWORD)v39 != 1)
    {
      v28 = HIDWORD(v50);
      v29 = HIDWORD(v39);
      if (HIDWORD(v38) == 1)
      {
        do
        {
          *v26 = *v25;
          v26[1] = v25[1];
          v26[2] = v25[2];
          v25 += v29;
          v26 += v28;
          --v27;
        }
        while (v27);
LABEL_44:
        *v26 = *v25;
        v26[1] = v25[1];
        v26[2] = v25[2];
        return;
      }
      v30 = 0;
      v31 = 2 * DWORD2(v50);
      v32 = (_WORD *)(v49 + 4);
      v33 = (_WORD *)(v38 + 4);
      do
      {
        v34 = v33;
        v35 = v32;
        v36 = v22;
        do
        {
          *(v35 - 2) = *(v34 - 2);
          *(v35 - 1) = *(v34 - 1);
          *v35 = *v34;
          v35 = (_WORD *)((char *)v35 + v31);
          v34 += v23;
          --v36;
        }
        while (v36);
        *(v35 - 2) = *(v34 - 2);
        *(v35 - 1) = *(v34 - 1);
        *v35 = *v34;
        v25 += v29;
        v26 += v28;
        ++v30;
        v32 += v28;
        v33 += v29;
      }
      while (v30 != v27);
    }
    for (; v22; --v22)
    {
      *v26 = *v25;
      v26[1] = v25[1];
      v26[2] = v25[2];
      v25 += v23;
      v26 += v24;
    }
    goto LABEL_44;
  }
}

void sub_208144998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208144AA8(uint64_t a1)
{
  _QWORD v2[6];

  sub_208143ED0((uint64_t)v2, a1);
  return v2[0];
}

double sub_208144AD0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208143ED0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_208144B60@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2081440C0((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_208144BF0()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E522C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E522C8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E522D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E522D0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E522D8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E522D8))
    {
LABEL_13:
      if (byte_253E528AF < 0)
      {
        sub_207CA40D8(&xmmword_253E52880, (void *)qword_253E52898, unk_253E528A0);
      }
      else
      {
        xmmword_253E52880 = *(_OWORD *)&qword_253E52898;
        unk_253E52890 = unk_253E528A8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52880, &dword_207C77000);
      __cxa_guard_release(&qword_253E522D0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E522E0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E522E0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb16u>]", &qword_253E528B0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E528B0, &dword_207C77000);
      __cxa_guard_release(&qword_253E522E0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E522E8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E522E8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E522F0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E522F0))
      {
        if (byte_253E528C8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E528C8, *(unint64_t *)&byte_253E528C8[8]);
        else
          __p = *(std::string *)byte_253E528C8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E528E0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E528E0, &dword_207C77000);
        __cxa_guard_release(&qword_253E522F0);
      }
      if (byte_253E528F7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E528E0, *((unint64_t *)&xmmword_253E528E0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E528E0;
        v18 = unk_253E528F0;
      }
      sub_208063A18((char *)v17, (std::string *)&qword_253E52898);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52898, &dword_207C77000);
      __cxa_guard_release(&qword_253E522D8);
      goto LABEL_13;
    }
    if (byte_253E528C7 >= 0)
      v6 = byte_253E528C7;
    else
      v6 = unk_253E528B8;
    if (byte_253E528C7 >= 0)
      v7 = &qword_253E528B0;
    else
      v7 = (uint64_t *)qword_253E528B0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E528C8[8] = v6;
      *(_QWORD *)&byte_253E528C8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E528C8 = v13;
    }
    else
    {
      v13 = byte_253E528C8;
      byte_253E528C8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E528C8, &dword_207C77000);
    __cxa_guard_release(&qword_253E522E8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52897 < 0)
  {
    sub_207CA40D8(&xmmword_253E52868, (void *)xmmword_253E52880, *((unint64_t *)&xmmword_253E52880 + 1));
  }
  else
  {
    xmmword_253E52868 = xmmword_253E52880;
    unk_253E52878 = unk_253E52890;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52868, &dword_207C77000);
  __cxa_guard_release(&qword_253E522C8);
LABEL_2:
  if (byte_253E5287F >= 0)
    return &xmmword_253E52868;
  else
    return (__int128 *)xmmword_253E52868;
}

void sub_208145044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E522D8);
  __cxa_guard_abort(&qword_253E522D0);
  __cxa_guard_abort(&qword_253E522C8);
  _Unwind_Resume(a1);
}

void sub_2081450E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E522C8);
  _Unwind_Resume(a1);
}

void sub_2081450F8()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208145134(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20812FC90(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20812FF74(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_2081454B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_2081454D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_2081454E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20814550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208145520()
{
  return 65792;
}

void sub_20814552C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812FC90(a2, a1);
}

uint64_t sub_208145538(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C088FC8;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v33 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088638;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_20812C5A8(a1 + 16, 25, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20812C8E8((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C088FC8;
  return a1;
}

void sub_2081457B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208145864(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088638;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2081458C8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20812D80C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812C8E8(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208145B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_208145B40(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20812D80C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812C8E8((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208145DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208145DD8()
{
  return 25;
}

_UNKNOWN **sub_208145DE0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_208145E34(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20812DD58(&v20, a1);
  sub_208145B40((uint64_t)v16, a1);
  sub_208145B40((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C088FC8;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20812CEB4((uint64_t)v4, 25, (uint64_t)v24, v23);
  *v5 = &off_24C088FC8;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_208145FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208146040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208146054(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812DD58(a2, a1);
}

double sub_208146060(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089520, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20812DD58(&v32, (uint64_t)v4);
    sub_208145B40((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = &off_24C088FC8;
    if (HIDWORD(v31) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_20812CEB4((uint64_t)&v24, 25, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = &off_24C088FC8;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C08A5D8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C0895D8[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C088638;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C089598[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20815FE54((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 25);
  v17 = (void *)v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  operator delete(v17);
  sub_2081458C8((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_2080F3514((size_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_2080F3FF4((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_208146398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081464A8(uint64_t a1)
{
  _QWORD v2[6];

  sub_2081458C8((uint64_t)v2, a1);
  return v2[0];
}

double sub_2081464D0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2081458C8((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_208146560@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208145B40((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_2081465F0()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E522F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E522F8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52300);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52300))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52308);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52308))
    {
LABEL_13:
      if (byte_253E5293F < 0)
      {
        sub_207CA40D8(&xmmword_253E52910, (void *)qword_253E52928, unk_253E52930);
      }
      else
      {
        xmmword_253E52910 = *(_OWORD *)&qword_253E52928;
        unk_253E52920 = unk_253E52938;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52910, &dword_207C77000);
      __cxa_guard_release(&qword_253E52300);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52310);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52310))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Bgra8u>]", &qword_253E52940);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52940, &dword_207C77000);
      __cxa_guard_release(&qword_253E52310);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52318);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52318))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52320);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52320))
      {
        if (byte_253E52958[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52958, *(unint64_t *)&byte_253E52958[8]);
        else
          __p = *(std::string *)byte_253E52958;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52970);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52970, &dword_207C77000);
        __cxa_guard_release(&qword_253E52320);
      }
      if (byte_253E52987 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52970, *((unint64_t *)&xmmword_253E52970 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52970;
        v18 = unk_253E52980;
      }
      sub_208065A00((char *)v17, (std::string *)&qword_253E52928);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52928, &dword_207C77000);
      __cxa_guard_release(&qword_253E52308);
      goto LABEL_13;
    }
    if (byte_253E52957 >= 0)
      v6 = byte_253E52957;
    else
      v6 = unk_253E52948;
    if (byte_253E52957 >= 0)
      v7 = &qword_253E52940;
    else
      v7 = (uint64_t *)qword_253E52940;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52958[8] = v6;
      *(_QWORD *)&byte_253E52958[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52958 = v13;
    }
    else
    {
      v13 = byte_253E52958;
      byte_253E52958[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52958, &dword_207C77000);
    __cxa_guard_release(&qword_253E52318);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52927 < 0)
  {
    sub_207CA40D8(&xmmword_253E528F8, (void *)xmmword_253E52910, *((unint64_t *)&xmmword_253E52910 + 1));
  }
  else
  {
    xmmword_253E528F8 = xmmword_253E52910;
    unk_253E52908 = unk_253E52920;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E528F8, &dword_207C77000);
  __cxa_guard_release(&qword_253E522F8);
LABEL_2:
  if (byte_253E5290F >= 0)
    return &xmmword_253E528F8;
  else
    return (__int128 *)xmmword_253E528F8;
}

void sub_208146A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52308);
  __cxa_guard_abort(&qword_253E52300);
  __cxa_guard_abort(&qword_253E522F8);
  _Unwind_Resume(a1);
}

void sub_208146AE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E522F8);
  _Unwind_Resume(a1);
}

void sub_208146AF8()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208146B34(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20812D9EC(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20812DD58(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_208146EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208146ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_208146EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_208146F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208146F20()
{
  return 65792;
}

void sub_208146F2C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812D9EC(a2, a1);
}

uint64_t sub_208146F38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C089058;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v33 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088998;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_208133330(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20813036C((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C089058;
  return a1;
}

void sub_2081471AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208147260(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088998;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2081472C4(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208133C1C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813036C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208147528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20814753C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_208133C1C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813036C((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_2081477C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2081477D4()
{
  return 31;
}

_UNKNOWN **sub_2081477DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_208147830(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  _OWORD v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_208134168(&v20, a1);
  sub_20814753C((uint64_t)v16, a1);
  sub_20814753C((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C089058;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_2081337F0((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C089058;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2081479EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208147A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208147A4C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208134168(a2, a1);
}

double sub_208147A58(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  _OWORD v35[3];
  _DWORD v36[3];
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089538, 0);
  if (!v4)
  {
    (*(void (**)(_OWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v35, lpsrc, 31);
    v17 = *(void **)&v35[0];
    v19 = *(_OWORD *)(*(_QWORD *)&v35[0] + 16);
    v18 = *(_OWORD *)(*(_QWORD *)&v35[0] + 32);
    v24 = **(_OWORD **)&v35[0];
    v25 = v19;
    v26 = v18;
    *(_QWORD *)&v35[0] = 0;
    operator delete(v17);
    sub_2081472C4((uint64_t)v35, a1);
    *(_QWORD *)&v30[0] = &v24;
    *((_QWORD *)&v30[0] + 1) = v35;
    return sub_2080F7420(v30);
  }
  v5 = (uint64_t)v4;
  sub_208134168(&v32, (uint64_t)v4);
  sub_20814753C((uint64_t)v30, v5);
  v35[0] = v30[0];
  v35[1] = v30[1];
  v35[2] = v31;
  *(_QWORD *)&v24 = &off_24C089058;
  if (HIDWORD(v31) <= 0x10)
    v6 = 16;
  else
    v6 = HIDWORD(v31);
  *(_QWORD *)&v36[1] = v31;
  v36[0] = 4;
  LODWORD(v41[0]) = 1;
  *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
  v37 = v41[0];
  v38 = v6;
  v39 = v31;
  v40 = *(_QWORD *)((char *)v41 + 4);
  sub_2081337F0((uint64_t)&v24, (uint64_t)v36, v35);
  *(_QWORD *)&v24 = &off_24C089058;
  if (v33)
  {
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FE54((uint64_t)v33);
  }
LABEL_13:
  v32 = &off_24C08A5D8;
  v12 = v34;
  if (v34)
  {
    v13 = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = DWORD2(v26);
  *(_DWORD *)(a1 + 8) = DWORD2(v24);
  v16 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 == -1)
  {
    if ((_DWORD)v15 == -1)
    {
      result = *(double *)&v27;
      v23 = v28;
      *(_OWORD *)(a1 + 48) = v27;
      *(_OWORD *)(a1 + 64) = v23;
      *(_QWORD *)(a1 + 80) = v29;
      return result;
    }
  }
  else if ((_DWORD)v15 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C089598[v16])(v35, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_24;
  }
  *(_QWORD *)&v35[0] = a1 + 16;
  ((void (*)(_OWORD *))off_24C0895D8[v15])(v35);
LABEL_24:
  v21 = DWORD2(v26);
  result = *(double *)&v27;
  v22 = v28;
  *(_OWORD *)(a1 + 48) = v27;
  *(_OWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 80) = v29;
  *(_QWORD *)&v24 = off_24C088998;
  if ((_DWORD)v21 != -1)
    ((void (*)(_OWORD *, __int128 *))off_24C089598[v21])(v35, &v25);
  return result;
}

void sub_208147D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208147E60(uint64_t a1)
{
  _QWORD v2[6];

  sub_2081472C4((uint64_t)v2, a1);
  return v2[0];
}

double sub_208147E88@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2081472C4((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_208147F18@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20814753C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_208147FA8()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52328);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52328))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52330);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52330))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52338);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52338))
    {
LABEL_13:
      if (byte_253E529CF < 0)
      {
        sub_207CA40D8(&xmmword_253E529A0, (void *)qword_253E529B8, unk_253E529C0);
      }
      else
      {
        xmmword_253E529A0 = *(_OWORD *)&qword_253E529B8;
        unk_253E529B0 = unk_253E529C8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E529A0, &dword_207C77000);
      __cxa_guard_release(&qword_253E52330);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52340);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52340))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba16f>]", &qword_253E529D0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E529D0, &dword_207C77000);
      __cxa_guard_release(&qword_253E52340);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52348);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52348))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52350);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52350))
      {
        if (byte_253E529E8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E529E8, *(unint64_t *)&byte_253E529E8[8]);
        else
          __p = *(std::string *)byte_253E529E8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52A00);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52A00, &dword_207C77000);
        __cxa_guard_release(&qword_253E52350);
      }
      if (byte_253E52A17 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52A00, *((unint64_t *)&xmmword_253E52A00 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52A00;
        v18 = unk_253E52A10;
      }
      sub_208067974((char *)v17, (std::string *)&qword_253E529B8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E529B8, &dword_207C77000);
      __cxa_guard_release(&qword_253E52338);
      goto LABEL_13;
    }
    if (byte_253E529E7 >= 0)
      v6 = byte_253E529E7;
    else
      v6 = unk_253E529D8;
    if (byte_253E529E7 >= 0)
      v7 = &qword_253E529D0;
    else
      v7 = (uint64_t *)qword_253E529D0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E529E8[8] = v6;
      *(_QWORD *)&byte_253E529E8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E529E8 = v13;
    }
    else
    {
      v13 = byte_253E529E8;
      byte_253E529E8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E529E8, &dword_207C77000);
    __cxa_guard_release(&qword_253E52348);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E529B7 < 0)
  {
    sub_207CA40D8(&xmmword_253E52988, (void *)xmmword_253E529A0, *((unint64_t *)&xmmword_253E529A0 + 1));
  }
  else
  {
    xmmword_253E52988 = xmmword_253E529A0;
    unk_253E52998 = unk_253E529B0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52988, &dword_207C77000);
  __cxa_guard_release(&qword_253E52328);
LABEL_2:
  if (byte_253E5299F >= 0)
    return &xmmword_253E52988;
  else
    return (__int128 *)xmmword_253E52988;
}

void sub_2081483FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52338);
  __cxa_guard_abort(&qword_253E52330);
  __cxa_guard_abort(&qword_253E52328);
  _Unwind_Resume(a1);
}

void sub_208148498(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52328);
  _Unwind_Resume(a1);
}

void sub_2081484B0()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2081484EC(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208133DFC(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_208134168(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_208148868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814888C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_2081488A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_2081488C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2081488D8()
{
  return 65792;
}

void sub_2081488E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208133DFC(a2, a1);
}

uint64_t sub_2081488F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0890E8;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 8)
    v4 = 8;
  else
    v4 = v4;
  *(_DWORD *)v33 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088B48;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_2081363A0(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_2081366A4((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C0890E8;
  return a1;
}

void sub_208148B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208148C18(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088B48;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_208148C7C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208136EB8(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_2081366A4(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208148EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_208148EF4(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_208136EB8(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_2081366A4((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_208149178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20814918C()
{
  return 32;
}

_UNKNOWN **sub_208149194()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_2081491E8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_208137404(&v20, a1);
  sub_208148EF4((uint64_t)v16, a1);
  sub_208148EF4((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C0890E8;
  if (v19 <= 8)
    v6 = 8;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_208136A3C((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C0890E8;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2081493A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2081493F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208149404(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208137404(a2, a1);
}

double sub_208149410(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089550, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_208137404(&v32, (uint64_t)v4);
    sub_208148EF4((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = &off_24C0890E8;
    if (HIDWORD(v31) <= 8)
      v6 = 8;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_208136A3C((uint64_t)&v24, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = &off_24C0890E8;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C08A5D8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C0895D8[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C088B48;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C089598[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20815FE54((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 32);
  v17 = (void *)v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  operator delete(v17);
  sub_208148C7C((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_2080F8148((uint64_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      *(float *)&result = sub_2080F88E8((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_208149744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208149854(uint64_t a1)
{
  _QWORD v2[6];

  sub_208148C7C((uint64_t)v2, a1);
  return v2[0];
}

double sub_20814987C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208148C7C((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20814990C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_208148EF4((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20814999C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52358);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52358))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52360);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52360))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52368);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52368))
    {
LABEL_13:
      if (byte_253E52A5F < 0)
      {
        sub_207CA40D8(&xmmword_253E52A30, (void *)qword_253E52A48, unk_253E52A50);
      }
      else
      {
        xmmword_253E52A30 = *(_OWORD *)&qword_253E52A48;
        unk_253E52A40 = unk_253E52A58;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52A30, &dword_207C77000);
      __cxa_guard_release(&qword_253E52360);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E52370);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52370))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba32f>]", &qword_253E52A60);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52A60, &dword_207C77000);
      __cxa_guard_release(&qword_253E52370);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E52378);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52378))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E52380);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52380))
      {
        if (byte_253E52A78[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52A78, *(unint64_t *)&byte_253E52A78[8]);
        else
          __p = *(std::string *)byte_253E52A78;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52A90);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52A90, &dword_207C77000);
        __cxa_guard_release(&qword_253E52380);
      }
      if (byte_253E52AA7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52A90, *((unint64_t *)&xmmword_253E52A90 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52A90;
        v18 = unk_253E52AA0;
      }
      sub_208068408((char *)v17, (std::string *)&qword_253E52A48);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52A48, &dword_207C77000);
      __cxa_guard_release(&qword_253E52368);
      goto LABEL_13;
    }
    if (byte_253E52A77 >= 0)
      v6 = byte_253E52A77;
    else
      v6 = unk_253E52A68;
    if (byte_253E52A77 >= 0)
      v7 = &qword_253E52A60;
    else
      v7 = (uint64_t *)qword_253E52A60;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52A78[8] = v6;
      *(_QWORD *)&byte_253E52A78[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52A78 = v13;
    }
    else
    {
      v13 = byte_253E52A78;
      byte_253E52A78[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52A78, &dword_207C77000);
    __cxa_guard_release(&qword_253E52378);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52A47 < 0)
  {
    sub_207CA40D8(&xmmword_253E52A18, (void *)xmmword_253E52A30, *((unint64_t *)&xmmword_253E52A30 + 1));
  }
  else
  {
    xmmword_253E52A18 = xmmword_253E52A30;
    unk_253E52A28 = unk_253E52A40;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52A18, &dword_207C77000);
  __cxa_guard_release(&qword_253E52358);
LABEL_2:
  if (byte_253E52A2F >= 0)
    return &xmmword_253E52A18;
  else
    return (__int128 *)xmmword_253E52A18;
}

void sub_208149DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52368);
  __cxa_guard_abort(&qword_253E52360);
  __cxa_guard_abort(&qword_253E52358);
  _Unwind_Resume(a1);
}

void sub_208149E8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52358);
  _Unwind_Resume(a1);
}

void sub_208149EA4()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208149EE0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208137098(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_208137404(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20814A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814A280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814A294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20814A2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20814A2CC()
{
  return 65792;
}

void sub_20814A2D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208137098(a2, a1);
}

uint64_t sub_20814A2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C089178;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20)
    v4 = 32;
  else
    v4 = v4;
  *(_DWORD *)v33 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C088638;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_20812C5A8(a1 + 16, 37, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20812C8E8((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C089178;
  return a1;
}

void sub_20814A55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20814A610(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C088638;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20814A674(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_20812D80C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812C8E8(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20814A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20814A8EC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_20812D80C(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20812C8E8((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20814AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20814AB84()
{
  return 37;
}

_UNKNOWN **sub_20814AB8C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_20814ABE0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_20812DD58(&v20, a1);
  sub_20814A8EC((uint64_t)v16, a1);
  sub_20814A8EC((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C089178;
  if (v19 <= 0x20)
    v6 = 32;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_20812CEB4((uint64_t)v4, 37, (uint64_t)v24, v23);
  *v5 = &off_24C089178;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20814ADA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20814ADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20814AE00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812DD58(a2, a1);
}

double sub_20814AE0C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089568, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_20812DD58(&v32, (uint64_t)v4);
    sub_20814A8EC((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = &off_24C089178;
    if (HIDWORD(v31) <= 0x20)
      v6 = 32;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_20812CEB4((uint64_t)&v24, 37, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = &off_24C089178;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C08A5D8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C0895D8[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C088638;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C089598[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20815FE54((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 37);
  v17 = (void *)v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  operator delete(v17);
  sub_20814A674((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_2080F3514((size_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_2080F3FF4((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_20814B144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20814B254(uint64_t a1)
{
  _QWORD v2[6];

  sub_20814A674((uint64_t)v2, a1);
  return v2[0];
}

double sub_20814B27C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20814A674((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20814B30C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20814A8EC((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20814B39C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E52388);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52388))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E52390);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52390))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E52398);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52398))
    {
LABEL_13:
      if (byte_253E52AEF < 0)
      {
        sub_207CA40D8(&xmmword_253E52AC0, (void *)qword_253E52AD8, unk_253E52AE0);
      }
      else
      {
        xmmword_253E52AC0 = *(_OWORD *)&qword_253E52AD8;
        unk_253E52AD0 = unk_253E52AE8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52AC0, &dword_207C77000);
      __cxa_guard_release(&qword_253E52390);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E523A0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E523A0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb8u>]", &qword_253E52AF0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52AF0, &dword_207C77000);
      __cxa_guard_release(&qword_253E523A0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E523A8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E523A8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E523B0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E523B0))
      {
        if (byte_253E52B08[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52B08, *(unint64_t *)&byte_253E52B08[8]);
        else
          __p = *(std::string *)byte_253E52B08;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52B20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52B20, &dword_207C77000);
        __cxa_guard_release(&qword_253E523B0);
      }
      if (byte_253E52B37 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52B20, *((unint64_t *)&xmmword_253E52B20 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52B20;
        v18 = unk_253E52B30;
      }
      sub_208069810((char *)v17, (std::string *)&qword_253E52AD8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52AD8, &dword_207C77000);
      __cxa_guard_release(&qword_253E52398);
      goto LABEL_13;
    }
    if (byte_253E52B07 >= 0)
      v6 = byte_253E52B07;
    else
      v6 = unk_253E52AF8;
    if (byte_253E52B07 >= 0)
      v7 = &qword_253E52AF0;
    else
      v7 = (uint64_t *)qword_253E52AF0;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52B08[8] = v6;
      *(_QWORD *)&byte_253E52B08[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52B08 = v13;
    }
    else
    {
      v13 = byte_253E52B08;
      byte_253E52B08[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52B08, &dword_207C77000);
    __cxa_guard_release(&qword_253E523A8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52AD7 < 0)
  {
    sub_207CA40D8(&xmmword_253E52AA8, (void *)xmmword_253E52AC0, *((unint64_t *)&xmmword_253E52AC0 + 1));
  }
  else
  {
    xmmword_253E52AA8 = xmmword_253E52AC0;
    unk_253E52AB8 = unk_253E52AD0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52AA8, &dword_207C77000);
  __cxa_guard_release(&qword_253E52388);
LABEL_2:
  if (byte_253E52ABF >= 0)
    return &xmmword_253E52AA8;
  else
    return (__int128 *)xmmword_253E52AA8;
}

void sub_20814B7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E52398);
  __cxa_guard_abort(&qword_253E52390);
  __cxa_guard_abort(&qword_253E52388);
  _Unwind_Resume(a1);
}

void sub_20814B88C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52388);
  _Unwind_Resume(a1);
}

void sub_20814B8A4()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_20814B8E0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_20812D9EC(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_20812DD58(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20814BC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814BC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814BC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20814BCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20814BCCC()
{
  return 65792;
}

void sub_20814BCD8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20812D9EC(a2, a1);
}

uint64_t sub_20814BCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _OWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v28[32];
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C089208;
  v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10)
    v4 = 16;
  else
    v4 = v4;
  *(_DWORD *)v33 = 4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v33[4] = v5;
  *(_QWORD *)v28 = *(_QWORD *)v33;
  *(_DWORD *)&v28[8] = HIDWORD(v5);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)&v33[4] = v3 | (v4 << 32);
  *(_QWORD *)&v28[12] = *(_QWORD *)v33;
  *(_DWORD *)&v28[20] = v4;
  *(_QWORD *)&v28[24] = v5;
  v29 = *(_QWORD *)&v33[4];
  *(_QWORD *)a1 = off_24C0887E8;
  *(_DWORD *)(a1 + 8) = 0;
  v6.n128_f64[0] = sub_208130068(a1 + 16, (uint64_t)v28);
  v7 = (_OWORD *)(a1 + 48);
  if (!*(_DWORD *)&v28[24] || !*(_DWORD *)&v28[28])
  {
    v26 = *(_OWORD *)&v28[16];
    *v7 = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 64) = v26;
    *(_QWORD *)(a1 + 80) = v29;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 40))
    sub_207CA9F48();
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(std::__shared_weak_count **)(a1 + 32);
  v31 = v8;
  v32 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v30 = off_24C08A598;
  if (v8)
  {
    v13 = *v8;
    v12 = (std::__shared_weak_count *)v8[1];
    if (!v12)
      goto LABEL_16;
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_16:
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v6);
    std::__shared_weak_count::__release_weak(v12);
    if (v13)
LABEL_17:
      sub_20815FC78((uint64_t)v31);
  }
LABEL_18:
  sub_20813036C((uint64_t)v33, (uint64_t)&v30);
  v17 = v34;
  *v7 = *(_OWORD *)&v33[8];
  *(_OWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 80) = v35;
  if (v31)
  {
    v19 = *v31;
    v18 = (std::__shared_weak_count *)v31[1];
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v19)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    if (v19)
LABEL_25:
      sub_20815FE54((uint64_t)v31);
  }
LABEL_26:
  v30 = &off_24C08A5D8;
  v23 = v32;
  if (v32)
  {
    v24 = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_32:
  *(_QWORD *)a1 = &off_24C089208;
  return a1;
}

void sub_20814BF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20814C00C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0887E8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C089598[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20814C070(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (sub_208130B80(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    LODWORD(v34) = 4;
    *(_QWORD *)((char *)&v34 + 4) = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(DWORD1(v34), 4);
    LODWORD(v34) = 1;
    *(_QWORD *)((char *)&v34 + 4) = v8;
    v10 = v34;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v12;
        v35 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v20;
        v35 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        *(_QWORD *)&v34 = &off_24C08A5D8;
        *((_QWORD *)&v34 + 1) = v16;
        v35 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)&v34 = &off_24C08A5D8;
          if (v26)
          {
            *((_QWORD *)&v34 + 1) = v26;
            v35 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            *((_QWORD *)&v34 + 1) = 0;
            v35 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          *((_QWORD *)&v34 + 1) = 0;
          v35 = 0;
          *(_QWORD *)&v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813036C(a1, (uint64_t)&v34);
    *(_QWORD *)&v34 = &off_24C08A5D8;
    v31 = v35;
    if (v35)
    {
      v32 = (unint64_t *)&v35->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20814C2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_20814C2E8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  _BYTE v37[24];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (sub_208130B80(a2))
  {
    if (*(_DWORD *)(a2 + 76))
      v4 = *(_DWORD *)(a2 + 72) == 0;
    else
      v4 = 1;
    v5 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = 0;
    *(_DWORD *)v37 = 4;
    *(_QWORD *)&v37[4] = v5;
    v6 = 4 * ((_DWORD)v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5))
      v7 = v7;
    else
      v7 = 0;
    v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    v9 = __PAIR64__(*(unsigned int *)&v37[4], 4);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)&v37[4] = v8;
    v10 = *(_QWORD *)v37;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(_QWORD *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
        v12 = *(_QWORD *)(a2 + 24);
        v11 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v12;
        v36 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        break;
      case 1:
        v20 = *(_QWORD *)(a2 + 24);
        v19 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v20;
        v36 = v19;
        if (v19)
        {
          v21 = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        break;
      case 2:
        v16 = *(_QWORD *)(a2 + 24);
        v15 = *(std::__shared_weak_count **)(a2 + 32);
        v34 = &off_24C08A5D8;
        v35 = v16;
        v36 = v15;
        if (v15)
        {
          v17 = (unint64_t *)&v15->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        break;
      case 3:
        v23 = *(std::__shared_weak_count **)(a2 + 24);
        if (v23 && (v24 = std::__shared_weak_count::lock(v23)) != 0)
        {
          v25 = v24;
          v26 = *(_QWORD *)(a2 + 16);
          v34 = &off_24C08A5D8;
          if (v26)
          {
            v35 = v26;
            v36 = v24;
            v27 = (unint64_t *)&v24->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v29 = (unint64_t *)&v24->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v34 = &off_24C08A5D8;
        }
        break;
      default:
        sub_207CA9F48();
    }
    sub_20813036C((uint64_t)v37, (uint64_t)&v34);
    *(_QWORD *)a1 = *(_QWORD *)v37;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v37[8];
    *(_OWORD *)(a1 + 24) = v38;
    *(_QWORD *)(a1 + 40) = v39;
    v34 = &off_24C08A5D8;
    v31 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20814C56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20814C580()
{
  return 38;
}

_UNKNOWN **sub_20814C588()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530838);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530838))
    return &off_253E50C78;
  __cxa_guard_release(&qword_254530838);
  return &off_253E50C78;
}

void sub_20814C5DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD v15[3];
  _BYTE v16[32];
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t (**v20)();
  uint64_t *v21;
  std::__shared_weak_count *v22;
  __int128 v23[3];
  _DWORD v24[3];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  sub_2081310CC(&v20, a1);
  sub_20814C2E8((uint64_t)v16, a1);
  sub_20814C2E8((uint64_t)v15, a1);
  v4 = operator new(0x58uLL);
  v5 = v4;
  v23[0] = v15[0];
  v23[1] = v15[1];
  v23[2] = v15[2];
  *v4 = &off_24C089208;
  if (v19 <= 0x10)
    v6 = 16;
  else
    v6 = v19;
  *(_QWORD *)&v24[1] = v17;
  v24[0] = 4;
  LODWORD(v29[0]) = 1;
  *(_QWORD *)((char *)v29 + 4) = v18 | (unint64_t)(v6 << 32);
  v25 = v29[0];
  v26 = v6;
  v27 = v17;
  v28 = *(_QWORD *)((char *)v29 + 4);
  sub_208130704((uint64_t)v4, (uint64_t)v24, v23);
  *v5 = &off_24C089208;
  *a2 = v5;
  if (v21)
  {
    v8 = *v21;
    v7 = (std::__shared_weak_count *)v21[1];
    if (!v7)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FE54((uint64_t)v21);
  }
LABEL_12:
  v20 = &off_24C08A5D8;
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20814C798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20814C7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20814C7F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_2081310CC(a2, a1);
}

double sub_20814C804(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  double result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t (**v32)();
  uint64_t *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[6];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C089580, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    sub_2081310CC(&v32, (uint64_t)v4);
    sub_20814C2E8((uint64_t)v30, v5);
    v35 = v30[0];
    v36 = v30[1];
    v37 = v31;
    *(_QWORD *)&v24 = &off_24C089208;
    if (HIDWORD(v31) <= 0x10)
      v6 = 16;
    else
      v6 = HIDWORD(v31);
    *(_QWORD *)&v38[1] = v31;
    v38[0] = 4;
    LODWORD(v41[0]) = 1;
    *(_QWORD *)((char *)v41 + 4) = DWORD2(v31) | (unint64_t)(v6 << 32);
    *(_QWORD *)&v38[3] = v41[0];
    v38[5] = v6;
    v39 = v31;
    v40 = *(_QWORD *)((char *)v41 + 4);
    sub_208130704((uint64_t)&v24, (uint64_t)v38, &v35);
    *(_QWORD *)&v24 = &off_24C089208;
    if (!v33)
      goto LABEL_13;
    v8 = *v33;
    v7 = (std::__shared_weak_count *)v33[1];
    if (!v7)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_13;
    }
    else
    {
LABEL_11:
      if (!v8)
      {
LABEL_13:
        v32 = &off_24C08A5D8;
        v12 = v34;
        if (v34)
        {
          v13 = (unint64_t *)&v34->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = DWORD2(v26);
        *(_DWORD *)(a1 + 8) = DWORD2(v24);
        v16 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v16 == -1)
        {
          if ((_DWORD)v15 == -1)
          {
            result = *(double *)&v27;
            v23 = v28;
            *(_OWORD *)(a1 + 48) = v27;
            *(_OWORD *)(a1 + 64) = v23;
            *(_QWORD *)(a1 + 80) = v29;
            return result;
          }
        }
        else if ((_DWORD)v15 == -1)
        {
          ((void (*)(__int128 *, uint64_t))off_24C089598[v16])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_26;
        }
        *(_QWORD *)&v35 = a1 + 16;
        ((void (*)(__int128 *))off_24C0895D8[v15])(&v35);
LABEL_26:
        v21 = DWORD2(v26);
        result = *(double *)&v27;
        v22 = v28;
        *(_OWORD *)(a1 + 48) = v27;
        *(_OWORD *)(a1 + 64) = v22;
        *(_QWORD *)(a1 + 80) = v29;
        *(_QWORD *)&v24 = off_24C0887E8;
        if ((_DWORD)v21 != -1)
          ((void (*)(__int128 *, __int128 *))off_24C089598[v21])(&v35, &v25);
        return result;
      }
    }
    sub_20815FE54((uint64_t)v33);
    goto LABEL_13;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v35, lpsrc, 38);
  v17 = (void *)v35;
  v19 = *(_OWORD *)(v35 + 16);
  v18 = *(_OWORD *)(v35 + 32);
  v24 = *(_OWORD *)v35;
  v25 = v19;
  v26 = v18;
  *(_QWORD *)&v35 = 0;
  operator delete(v17);
  sub_20814C070((uint64_t)&v35, a1);
  *(_QWORD *)&v30[0] = &v24;
  *((_QWORD *)&v30[0] + 1) = &v35;
  if (DWORD1(v25) == 1 && DWORD1(v36) == 1)
  {
    sub_2080F4F10((uint64_t *)v30);
  }
  else
  {
    LOBYTE(v32) = 0;
    if (DWORD2(v24) && HIDWORD(v24) && (_DWORD)v25)
    {
      *(_QWORD *)v38 = &v32;
      sub_2080F58C4((uint64_t)v38, (uint64_t)&v24, (uint64_t)&v35);
    }
  }
  return result;
}

void sub_20814CB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20814CC48(uint64_t a1)
{
  _QWORD v2[6];

  sub_20814C070((uint64_t)v2, a1);
  return v2[0];
}

double sub_20814CC70@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20814C070((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

double sub_20814CD00@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_20814C2E8((uint64_t)v8, a1);
  v5 = operator new(0x30uLL);
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

__int128 *sub_20814CD90()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E523B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E523B8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E523C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E523C0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E523C8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E523C8))
    {
LABEL_13:
      if (byte_253E52B7F < 0)
      {
        sub_207CA40D8(&xmmword_253E52B50, (void *)qword_253E52B68, unk_253E52B70);
      }
      else
      {
        xmmword_253E52B50 = *(_OWORD *)&qword_253E52B68;
        unk_253E52B60 = unk_253E52B78;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52B50, &dword_207C77000);
      __cxa_guard_release(&qword_253E523C0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E523D0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E523D0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb16u>]", &qword_253E52B80);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52B80, &dword_207C77000);
      __cxa_guard_release(&qword_253E523D0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E523D8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E523D8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E523E0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E523E0))
      {
        if (byte_253E52B98[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E52B98, *(unint64_t *)&byte_253E52B98[8]);
        else
          __p = *(std::string *)byte_253E52B98;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E52BB0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52BB0, &dword_207C77000);
        __cxa_guard_release(&qword_253E523E0);
      }
      if (byte_253E52BC7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E52BB0, *((unint64_t *)&xmmword_253E52BB0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E52BB0;
        v18 = unk_253E52BC0;
      }
      sub_20806A230((char *)v17, (std::string *)&qword_253E52B68);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E52B68, &dword_207C77000);
      __cxa_guard_release(&qword_253E523C8);
      goto LABEL_13;
    }
    if (byte_253E52B97 >= 0)
      v6 = byte_253E52B97;
    else
      v6 = unk_253E52B88;
    if (byte_253E52B97 >= 0)
      v7 = &qword_253E52B80;
    else
      v7 = (uint64_t *)qword_253E52B80;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E52B98[8] = v6;
      *(_QWORD *)&byte_253E52B98[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E52B98 = v13;
    }
    else
    {
      v13 = byte_253E52B98;
      byte_253E52B98[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52B98, &dword_207C77000);
    __cxa_guard_release(&qword_253E523D8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E52B67 < 0)
  {
    sub_207CA40D8(&xmmword_253E52B38, (void *)xmmword_253E52B50, *((unint64_t *)&xmmword_253E52B50 + 1));
  }
  else
  {
    xmmword_253E52B38 = xmmword_253E52B50;
    unk_253E52B48 = unk_253E52B60;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E52B38, &dword_207C77000);
  __cxa_guard_release(&qword_253E523B8);
LABEL_2:
  if (byte_253E52B4F >= 0)
    return &xmmword_253E52B38;
  else
    return (__int128 *)xmmword_253E52B38;
}

void sub_20814D1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E523C8);
  __cxa_guard_abort(&qword_253E523C0);
  __cxa_guard_abort(&qword_253E523B8);
  _Unwind_Resume(a1);
}

void sub_20814D280(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E523B8);
  _Unwind_Resume(a1);
}

void sub_20814D298()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 343, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_20814D2D4(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  __int128 v42;

  if (a2)
  {
    sub_208130D60(&v39, a1);
    v4 = operator new(0x20uLL);
    v42 = v40;
    v40 = 0uLL;
    v41 = off_24C08A5B8;
    *v4 = off_24C0892B8;
    sub_20815AE44(v4 + 1, (uint64_t)&v41);
    if ((_QWORD)v42)
    {
      v6 = *(_QWORD *)v42;
      v5 = *(std::__shared_weak_count **)(v42 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          if (!v6)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      if (v6)
LABEL_9:
        sub_20815FF44(v42);
    }
LABEL_10:
    v41 = &off_24C08A5D8;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_14;
    v11 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    else
    {
LABEL_14:
      *a3 = v4;
      v13 = (uint64_t *)v40;
      if (!(_QWORD)v40)
        goto LABEL_22;
    }
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (!v15)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v15)
LABEL_21:
      sub_20815FF44(v40);
LABEL_22:
    v39 = &off_24C08A5D8;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (!*((_QWORD *)&v40 + 1))
      return;
    v20 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (v21)
      return;
LABEL_51:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    return;
  }
  sub_2081310CC(&v39, a1);
  v22 = operator new(0x20uLL);
  v42 = v40;
  v40 = 0uLL;
  v41 = off_24C08A598;
  *v22 = off_24C089298;
  sub_20815AB2C(v22 + 1, (uint64_t)&v41);
  if ((_QWORD)v42)
  {
    v24 = *(_QWORD *)v42;
    v23 = *(std::__shared_weak_count **)(v42 + 8);
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        if (!v24)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
    if (v24)
LABEL_34:
      sub_20815FE54(v42);
  }
LABEL_35:
  v41 = &off_24C08A5D8;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_39;
  v29 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  else
  {
LABEL_39:
    *a3 = v22;
    v31 = (uint64_t *)v40;
    if (!(_QWORD)v40)
      goto LABEL_47;
  }
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  if (v33)
LABEL_46:
    sub_20815FE54(v40);
LABEL_47:
  v39 = &off_24C08A5D8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
      goto LABEL_51;
  }
}

void sub_20814D650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AC38(&a12);
  operator delete(v12);
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AC38(&a9);
  _Unwind_Resume(a1);
}

void sub_20814D688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_20815AF50(&a12);
  operator delete(v12);
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

void sub_20814D6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815AF50(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20814D6C0()
{
  return 65792;
}

void sub_20814D6CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_208130D60(a2, a1);
}

_QWORD *sub_20814D6D8(_QWORD *a1)
{
  *a1 = off_24C089298;
  sub_20815AC38(a1 + 1);
  return a1;
}

void sub_20814D708(_QWORD *a1)
{
  *a1 = off_24C089298;
  sub_20815AC38(a1 + 1);
  operator delete(a1);
}

_QWORD *sub_20814D738(_QWORD *a1)
{
  *a1 = off_24C0892B8;
  sub_20815AF50(a1 + 1);
  return a1;
}

void sub_20814D768(_QWORD *a1)
{
  *a1 = off_24C0892B8;
  sub_20815AF50(a1 + 1);
  operator delete(a1);
}

void sub_20814D798(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  std::logic_error *exception;
  unsigned int v7;
  std::string v8;

  v4 = sub_20815A764(a1);
  v5 = sub_207DB2844(v4);
  if ((v5 & 0xFF00000000) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v7 = sub_20815A764(a1);
    sub_20814D890("Attempting to map pixel buffer of format ", &v7, (uint64_t)" into a SharedCVImage. The format is not (yet) supported by Kit_Image.");
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  sub_20814E38C(a2, v5);
}

void sub_20814D858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_20814D890(char *__s, unsigned int *a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD v9[5];
  _QWORD *v10;

  v8 = 0;
  sub_207CAAE08(v7, __s);
  sub_207DDDF2C((uint64_t)&v6, (uint64_t)v7, a2);
  v9[0] = v7;
  v9[1] = a3;
  v9[2] = v7;
  v9[3] = a3;
  v9[4] = a3;
  if (v8 == -1)
    sub_207CA9F48();
  v10 = v9;
  ((void (*)(_QWORD **, _DWORD *))off_24C08A3A0[v8])(&v10, v7);
  if (v8 == -1)
    sub_207CA9F48();
  v9[0] = &v10;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C08A3B8[v8])(v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C08A388[v8])(v9, v7);
  return result;
}

void sub_20814D988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20814D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20814D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20814D9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20814D9D8(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088488;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DA38(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0886C8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DA98(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088878;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DAF8(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088A28;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DB58(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088518;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DBB8(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088908;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DC18(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088AB8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DC78(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0885A8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DCD8(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088758;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DD38(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088638;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DD98(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088998;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DDF8(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088B48;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DE58(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C088638;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DEB8(unsigned int *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = off_24C0887E8;
  v2 = __p[10];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, __p + 4);
  operator delete(__p);
}

void sub_20814DF18(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a2 = &off_24C08A5D8;
  v2 = (std::__shared_weak_count *)a2[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

_QWORD *sub_20814DF7C(uint64_t a1, _QWORD *a2)
{
  return sub_20815AC38(a2);
}

_QWORD *sub_20814DF84(uint64_t a1, _QWORD *a2)
{
  return sub_20815AF50(a2);
}

void sub_20814DF8C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_20814DF9C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24C089598[v5])(&v10, v4);
LABEL_9:
    *(_QWORD *)v4 = &off_24C08A5D8;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20814E06C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24C089598[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = off_24C08A598;
    *(_DWORD *)(v4 + 24) = 1;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_20815FE54(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20814E1B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_24C089598[v5])(&v17, v4);
LABEL_18:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)v4 = off_24C08A5B8;
    *(_DWORD *)(v4 + 24) = 2;
    return;
  }
  v7 = *(uint64_t **)(a2 + 8);
  if (v7)
  {
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      sub_20815FF44(*(_QWORD *)(a2 + 8));
  }
  v13 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

__n128 sub_20814E2FC(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  char v8;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_24C089598[v5])(&v8, v4);
LABEL_6:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u32[2] = 3;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return result;
}

void sub_20814E38C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_20814E3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count_vtbl *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  int v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  size_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t (**v76)();
  uint64_t *v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t (**v81)();
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;

  v5 = *(std::__shared_weak_count **)(a3 + 8);
  v6 = *(std::__shared_weak_count **)(a3 + 16);
  v7 = operator new(0x40uLL);
  v8 = v7;
  v81 = &off_24C08A5D8;
  v82 = v5;
  v83 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v76 = &off_24C08A5D8;
  v77 = (uint64_t *)v5;
  v78 = v6;
  *v7 = off_24C088488;
  if (!v5)
  {
    v17 = 0;
LABEL_17:
    v19 = 0;
    goto LABEL_18;
  }
  v13 = v5->__vftable;
  shared_owners = (std::__shared_weak_count *)v5->__shared_owners_;
  if (shared_owners)
  {
    v14 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  v17 = v77;
  if (!v13)
    goto LABEL_17;
  v18 = *((_DWORD *)v77 + 4);
  if (v18 == 2)
    v19 = 2;
  else
    v19 = v18 == 1;
LABEL_18:
  v8[2] = &off_24C08A5D8;
  *((_DWORD *)v8 + 2) = v19;
  v20 = v78;
  v8[3] = v17;
  v8[4] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_DWORD *)v8 + 10) = 0;
  if (!v17)
    goto LABEL_105;
  v24 = *v17;
  v23 = (std::__shared_weak_count *)v17[1];
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (!v24)
  {
LABEL_105:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_102;
    }
  }
  v28 = sub_20815C130((uint64_t)&v76);
  v29 = sub_20815C3B0((uint64_t)&v76);
  v30 = sub_20815C630((uint64_t)&v76);
  v8[6] = v28 | ((unint64_t)v29 << 32);
  v8[7] = (v30 << 32) | 1;
  if (!v77)
  {
    v36 = 0;
    goto LABEL_46;
  }
  v31 = (std::__shared_weak_count *)v77[1];
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (!v77)
  {
    v36 = 0;
    if (!*((_DWORD *)v8 + 12))
      goto LABEL_50;
LABEL_47:
    if ((v36 == 0) == (*((_DWORD *)v8 + 13) == 0))
      goto LABEL_52;
LABEL_51:
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_208216974))goto LABEL_52;
LABEL_102:
    abort();
  }
  v36 = *v77;
  v35 = (std::__shared_weak_count *)v77[1];
  if (!v35)
    goto LABEL_46;
  v37 = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (v39)
  {
LABEL_46:
    if (!*((_DWORD *)v8 + 12))
      goto LABEL_50;
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (*((_DWORD *)v8 + 12))
    goto LABEL_47;
LABEL_50:
  if (v36)
    goto LABEL_51;
LABEL_52:
  v76 = &off_24C08A5D8;
  v40 = v78;
  if (v78)
  {
    v41 = (unint64_t *)&v78->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  *v8 = &off_24C08A428;
  v81 = &off_24C08A5D8;
  v43 = v83;
  if (v83)
  {
    v44 = (unint64_t *)&v83->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v76 = &off_24C089608;
  v81 = (uint64_t (**)())v8;
  v46 = (std::__shared_weak_count *)operator new(0x20uLL);
  v47 = v46;
  v46->__shared_owners_ = 0;
  v48 = (unint64_t *)&v46->__shared_owners_;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_24C076010;
  v46->__shared_weak_owners_ = 0;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  v82 = v46;
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v77 = v8;
  v78 = v46;
  do
    v50 = __ldxr(v48);
  while (__stxr(v50 + 1, v48));
  do
    v51 = __ldaxr(v48);
  while (__stlxr(v51 - 1, v48));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v47);
  }
  (*(void (**)(_QWORD *, uint64_t))(*v8 + 64))(v8, 1);
  v52 = *(_QWORD **)(v4 - 88);
  v53 = v52[2];
  v79 = *(_OWORD *)v52;
  v80 = v53;
  *(_QWORD *)(v4 - 88) = 0;
  operator delete(v52);
  v54 = v78;
  if (v78)
  {
    v55 = (unint64_t *)&v78->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v58 = v82;
  if (v82)
  {
    v59 = (unint64_t *)&v82->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  *(_QWORD *)v3 = &off_24C074C28;
  v61 = v77;
  v62 = v78;
  if (v78)
  {
    v63 = (unint64_t *)&v78->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
    v65 = HIDWORD(v80);
    v66 = *((_QWORD *)&v79 + 1);
    v67 = v79;
    do
      v68 = __ldxr(v63);
    while (__stxr(v68 + 1, v63));
    do
      v69 = __ldxr(v63);
    while (__stxr(v69 + 1, v63));
  }
  else
  {
    v65 = HIDWORD(v80);
    v66 = *((_QWORD *)&v79 + 1);
    v67 = v79;
  }
  *(_QWORD *)(v3 + 8) = v61;
  *(_QWORD *)(v3 + 16) = v62;
  *(_QWORD *)(v3 + 24) = v66;
  *(_DWORD *)(v3 + 32) = v65;
  *(_QWORD *)(v3 + 40) = v67;
  *(_DWORD *)(v3 + 48) = 1;
  *(_WORD *)(v3 + 52) = 256;
  if (v62)
  {
    v70 = (unint64_t *)&v62->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
    do
      v72 = __ldaxr(v70);
    while (__stlxr(v72 - 1, v70));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v76 = &off_24C089608;
  v73 = v78;
  if (v78)
  {
    v74 = (unint64_t *)&v78->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_208153054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208153070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20815308C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081530A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081530C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081530E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081530FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208153118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208153134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208153150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20815316C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208153188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_207C99D78(v11);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081531A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  *(_QWORD *)v19 = v21;
  v24 = v19[10];
  if ((_DWORD)v24 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C089598[v24])(v22 - 88, v20);
  operator delete(v19);
  _Unwind_Resume(a1);
}

_QWORD *sub_208153534(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089608;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081535A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089608;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20815361C()
{
  return 1;
}

uint64_t sub_208153624(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20815362C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_208153640(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_2081536BC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089700;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208153730(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089700;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2081537A4()
{
  return 2;
}

uint64_t sub_2081537AC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2081537B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2081537CC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208153848(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C0897F8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081538BC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C0897F8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208153930()
{
  return 3;
}

uint64_t sub_208153938(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_208153940@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_208153958(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_2081539D4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C0898F0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208153A48(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C0898F0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208153ABC()
{
  return 4;
}

uint64_t sub_208153AC4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_208153ACC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_208153AE4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208153B60(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C0899E8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208153BD4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C0899E8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208153C48()
{
  return 5;
}

uint64_t sub_208153C50(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_208153C58@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_208153C6C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208153CE8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089AE0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208153D5C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089AE0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208153DD0()
{
  return 7;
}

uint64_t sub_208153DD8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_208153DE0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_208153DF8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208153E74(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089BD8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208153EE8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089BD8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208153F5C()
{
  return 8;
}

uint64_t sub_208153F64(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_208153F6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_208153F84(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208154000(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089CD0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208154074(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089CD0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2081540E8()
{
  return 21;
}

uint64_t sub_2081540F0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2081540F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20815410C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208154188(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089DC8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081541FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089DC8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208154270()
{
  return 22;
}

uint64_t sub_208154278(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_208154280@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_208154298(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208154314(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089EC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208154388(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089EC0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2081543FC()
{
  return 25;
}

uint64_t sub_208154404(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20815440C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_208154420(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_20815449C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C089FB8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208154510(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C089FB8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208154584()
{
  return 31;
}

uint64_t sub_20815458C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_208154594@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2081545AC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_208154628(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C08A0B0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20815469C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C08A0B0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208154710()
{
  return 32;
}

uint64_t sub_208154718(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_208154720@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_208154738(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_2081547B4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C08A1A8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208154828(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C08A1A8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20815489C()
{
  return 37;
}

uint64_t sub_2081548A4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2081548AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2081548C0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_20815493C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C08A2A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081549B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C08A2A0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208154A24()
{
  return 38;
}

uint64_t sub_208154A2C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_208154A34@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_208154A4C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

size_t sub_208154AC8(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C08A388[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_208154BB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C08A388[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_207CAA110((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_208154D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208154DB0(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_208155040(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_208155058(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_208155068(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_2081564A0(a2, a1);
}

void sub_208155090(uint64_t a1, int a2)
{
  __asm { BR              X12 }
}

_DWORD *sub_2081550E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD *result;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)();
  int v11;
  _BYTE v12[24];
  unsigned int v13;
  __int128 v14;
  _QWORD v15[16];

  if (v3)
    v5 = a3 << 32;
  else
    v5 = 0;
  v15[0] = a3;
  v15[1] = v5 | ((_DWORD)a3 != 0);
  sub_2081374F8((uint64_t)&v10, (uint64_t)v15);
  result = operator new(0x40uLL);
  v7 = result;
  *(_QWORD *)result = off_24C088488;
  v8 = v13;
  result[2] = v11;
  *((_BYTE *)result + 16) = 0;
  result[10] = -1;
  if ((_DWORD)v8 == -1)
  {
    *((_OWORD *)result + 3) = v14;
    *(_QWORD *)result = &off_24C08A428;
  }
  else
  {
    result = (_DWORD *)((uint64_t (*)(_QWORD *, _DWORD *, _BYTE *))off_24C0895B8[v8])(v15, result + 4, v12);
    v7[10] = v8;
    v9 = v13;
    *((_OWORD *)v7 + 3) = v14;
    *(_QWORD *)v7 = &off_24C08A428;
    v10 = off_24C088488;
    if ((_DWORD)v9 != -1)
      result = (_DWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_24C089598[v9])(v15, v12);
  }
  *v4 = v7;
  return result;
}

void sub_208156064()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208156098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2081564A0(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

char *sub_2081564F4(int a1, int a2, unsigned int *a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,__int128 a22,uint64_t a23,void *__p,__int128 a25,int a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char *result;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  void **v88[6];
  _BYTE v89[16];
  _BYTE v90[32];
  __int128 v91;

  v66 = *a3 != 0;
  if (*a3 <= 0x20)
    v67 = 32;
  else
    v67 = *a3;
  v68 = *(_QWORD *)a3;
  if (a3[1])
    v69 = v67;
  else
    v69 = 32;
  *(_QWORD *)&v87 = *(_QWORD *)a3;
  *((_QWORD *)&v87 + 1) = v66 | (v69 << 32);
  v86 = 0;
  *(_QWORD *)v64 = off_24C088488;
  *(_DWORD *)(v64 + 8) = 0;
  v70 = HIDWORD(v68);
  if ((_DWORD)v68 && HIDWORD(v68))
  {
    v71 = (char *)operator new(0x58uLL);
    *(_QWORD *)(v64 + 88) = v71;
    *(_OWORD *)(v64 + 96) = xmmword_20827D700;
    strcpy(v71, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_20815B468(v65 - 136, (unsigned int *)&v87, 0x4C303038u, (uint64_t *)(v65 - 176), 0);
    if (*(char *)(v65 - 153) < 0)
      operator delete(*(void **)(v64 + 88));
    *(_QWORD *)(v64 + 16) = &off_24C08A5D8;
    *(_OWORD *)(v64 + 24) = *(_OWORD *)(v64 + 136);
    *(_DWORD *)(v64 + 40) = 0;
    LODWORD(v68) = v87;
    LODWORD(v70) = DWORD1(v87);
  }
  else
  {
    *(_QWORD *)(v64 + 24) = 0;
    *(_QWORD *)(v64 + 32) = 0;
    *(_QWORD *)(v64 + 16) = &off_24C08A5D8;
    *(_DWORD *)(v64 + 40) = 0;
  }
  if ((_DWORD)v68 && (_DWORD)v70)
  {
    *(_QWORD *)(v64 + 48) = sub_208129054((uint64_t)v90);
    *(_QWORD *)(v64 + 56) = v72;
  }
  else
  {
    v91 = v87;
  }
  if ((sub_208129B58((uint64_t)v89) & 1) == 0)
  {
    sub_208129D38((_QWORD *)(v65 - 136), (uint64_t)v89);
    sub_208129E2C((uint64_t *)(v65 - 176), (uint64_t)v89);
    v88[0] = (void **)(v65 - 176);
    v88[1] = (void **)&v86;
    sub_2080F2DC4(v88);
    v73 = *(uint64_t **)(v64 + 136);
    if (v73)
    {
      v75 = *v73;
      v74 = (std::__shared_weak_count *)v73[1];
      if (v74)
      {
        p_shared_owners = (unint64_t *)&v74->__shared_owners_;
        do
          v77 = __ldxr(p_shared_owners);
        while (__stxr(v77 + 1, p_shared_owners));
        do
          v78 = __ldaxr(p_shared_owners);
        while (__stlxr(v78 - 1, p_shared_owners));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      if (v75)
        sub_20815FF44(*(_QWORD *)(v64 + 136));
    }
    *(_QWORD *)(v64 + 128) = &off_24C08A5D8;
    v79 = *(std::__shared_weak_count **)(v64 + 144);
    if (v79)
    {
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  *(_QWORD *)v64 = &off_24C08A428;
  result = (char *)operator new(0x40uLL);
  v83 = result;
  *(_QWORD *)result = off_24C088488;
  *((_DWORD *)result + 2) = *(_DWORD *)(v64 + 8);
  result[16] = 0;
  *((_DWORD *)result + 10) = -1;
  v84 = *(unsigned int *)(v64 + 40);
  if ((_DWORD)v84 == -1)
  {
    *((_OWORD *)result + 3) = v91;
    *(_QWORD *)result = &off_24C08A428;
  }
  else
  {
    result = (char *)((uint64_t (*)(uint64_t, char *, _BYTE *))off_24C0895B8[v84])(v65 - 136, result + 16, v90);
    v83[10] = v84;
    v85 = *(unsigned int *)(v64 + 40);
    *((_OWORD *)v83 + 3) = v91;
    *(_QWORD *)v83 = &off_24C08A428;
    *(_QWORD *)v64 = off_24C088488;
    if ((_DWORD)v85 != -1)
      result = (char *)((uint64_t (*)(uint64_t, _BYTE *))off_24C089598[v85])(v65 - 136, v90);
  }
  *v63 = v83;
  return result;
}

void sub_208158FB8()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208158FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

void sub_2081591F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20815AF50(&a10);
  sub_208132860((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_208159460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2081306A0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_208159474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2081369D8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_208159488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20813378C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20815949C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20812F4C0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2081594B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20812BA20((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2081594C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2081358D0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2081594D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_208132860((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_2081594EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20812A7A0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_208159500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2081347FC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_208159514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_208131600((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_208159528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20812E3EC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20815953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_2081294F0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_208159554(unsigned int *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v11;
  CFMutableDictionaryRef v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void *value[2];

  v37 = a2;
  v39 = 0;
  v40 = 0;
  v38 = (unint64_t)&v39;
  sub_207D006CC(&v38, (std::__shared_weak_count_vtbl **)value);
  *(_OWORD *)a6 = *(_OWORD *)value;
  sub_207CFF9E4((uint64_t)&v38, v39);
  sub_208159CF4(a6, (const void *)*MEMORY[0x24BDC56B8], &v37);
  v38 = *a1;
  sub_208159E60(a6, (const void *)*MEMORY[0x24BDC5708], (uint64_t *)&v38);
  value[0] = (void *)a1[1];
  sub_208159E60(a6, (const void *)*MEMORY[0x24BDC5650], (uint64_t *)value);
  if (a4 > 1)
    goto LABEL_43;
  v39 = 0;
  v40 = 0;
  v38 = (unint64_t)&v39;
  sub_207D006CC(&v38, (std::__shared_weak_count_vtbl **)value);
  v36 = *(_OWORD *)value;
  sub_207CFF9E4((uint64_t)&v38, v39);
  sub_2081E1F98((uint64_t)&v36, a3);
  v12 = *(CFMutableDictionaryRef *)a6;
  v11 = *(std::__shared_weak_count **)(a6 + 8);
  if (!v11)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v12)
      goto LABEL_36;
  }
  else
  {
LABEL_7:
    if (!v12)
      goto LABEL_36;
  }
  sub_207D0178C((std::__shared_weak_count_vtbl **)&v38, (uint64_t)&v36);
  v16 = (std::__shared_weak_count_vtbl *)v38;
  v17 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v18 = (unint64_t *)(v39 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    value[0] = v16;
    value[1] = v17;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
    do
      v21 = __ldaxr(v18);
    while (__stlxr(v21 - 1, v18));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    value[0] = (void *)v38;
    value[1] = 0;
  }
  v22 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v23 = (unint64_t *)(v39 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v26 = value[0];
  v25 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v27 = (unint64_t *)((char *)value[1] + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (!v26)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  if (v26)
LABEL_30:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a6, (const void *)*MEMORY[0x24BDC5668], value[0]);
LABEL_31:
  v30 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v31 = (unint64_t *)((char *)value[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
LABEL_36:
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_40;
  v34 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_40:
    if (a4)
      goto LABEL_43;
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (!a4)
  {
LABEL_41:
    v38 = 0x4000;
    sub_208159E60(a6, (const void *)*MEMORY[0x24BDC56C8], (uint64_t *)&v38);
  }
LABEL_43:
  if (*(_BYTE *)(a5 + 8))
    sub_208159E60(a6, (const void *)*MEMORY[0x24BDC55D0], (uint64_t *)a5);
}

void sub_20815988C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081598A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_207C99D78((uint64_t)&a15);
  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v15);
  _Unwind_Resume(a1);
}

void sub_2081598D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  uint64_t v13;

  sub_207CFF9E4((uint64_t)&a12, a13);
  sub_207C99D78(v13);
  _Unwind_Resume(a1);
}

void sub_2081598F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_208159904(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_208159918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_208159930(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_208159944(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  _BYTE v14[8];
  std::__shared_weak_count *v15;
  char v16;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_18:
      *a2 = 0;
      a2[16] = 0;
      return;
    }
  }
  if (!v5)
    goto LABEL_18;
LABEL_7:
  v9 = (const void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)&v13 = 0;
  if (!v9)
    goto LABEL_18;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v9, (const void **)&v13))
    goto LABEL_18;
  sub_208159A88((_QWORD *)v13, (uint64_t)v14);
  if (!v16)
    goto LABEL_18;
  sub_207D01634((std::__shared_weak_count_vtbl **)&v13, (uint64_t)v14);
  *(_OWORD *)a2 = v13;
  a2[16] = 1;
  if (v16)
  {
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_208159A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207D2E2BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208159A88(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  char v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;

  sub_208159C40(a1, (uint64_t)&v21);
  if (v23)
  {
    v3 = v21;
    v4 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    sub_207CF95E0(&v24, v3, 1);
    v7 = v24;
    v8 = v25;
    if (v25)
    {
      v9 = (unint64_t *)&v25->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      *(_QWORD *)a2 = v7;
      *(_QWORD *)(a2 + 8) = v8;
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      do
        v12 = __ldaxr(v9);
      while (__stlxr(v12 - 1, v9));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    else
    {
      *(_QWORD *)a2 = v24;
      *(_QWORD *)(a2 + 8) = 0;
    }
    v13 = v25;
    if (v25)
    {
      v14 = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *(_BYTE *)(a2 + 16) = 1;
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v23)
    {
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_208159C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va);
  sub_207D2E2BC((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_208159C40@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  CFTypeID TypeID;

  if (result
    && (v3 = result, TypeID = CFDictionaryGetTypeID(), result = (_QWORD *)CFGetTypeID(v3), result == (_QWORD *)TypeID))
  {
    CFRetain(v3);
    result = operator new(0x20uLL);
    *result = &off_24C0727F0;
    result[1] = 0;
    result[2] = 0;
    result[3] = v3;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = result;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_208159CCC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_208159CE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_208159CF4(uint64_t a1, const void *a2, unsigned int *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;
  unsigned int v23;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  v23 = *a3;
  sub_207CF8B74(&v23, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_208159E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_208159E60(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_207CF8C68(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_208159FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_208159FC4(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A548;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_20815A084(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20815A098()
{
  __break(1u);
}

void sub_20815A0C4()
{
  __cxa_end_catch();
  JUMPOUT(0x20815A0CCLL);
}

std::__shared_weak_count_vtbl **sub_20815A0D8(std::__shared_weak_count_vtbl **a1, unsigned int *a2, unsigned int a3, uint64_t *a4, unsigned int a5, unsigned int *a6)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  v17 = 0;
  v18 = 0;
  LOBYTE(v14) = 0;
  v15 = 0;
  if (*((_BYTE *)a6 + 4))
  {
    v14 = *a6;
    v15 = 1;
  }
  sub_208159554(a2, a3, a4, a5, (uint64_t)&v14, (uint64_t)&v19);
  v16 = v19;
  sub_20815A210(a1, (uint64_t)&v17, (uint64_t)&v16);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v18;
  if (!v18)
    return a1;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_20815A1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20815A1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20815A210(std::__shared_weak_count_vtbl **a1, uint64_t a2, uint64_t a3)
{
  const __CFDictionary *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  CFDictionaryRef pixelBufferAttributes;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  CVPixelBufferPoolRef poolOut;

  sub_207D0178C(&v15, a2);
  v5 = (const __CFDictionary *)v15;
  sub_207D0178C((std::__shared_weak_count_vtbl **)&pixelBufferAttributes, a3);
  poolOut = 0;
  CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, pixelBufferAttributes, &poolOut);
  sub_208159FC4(a1, (std::__shared_weak_count_vtbl *)poolOut, 0);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (!v16)
    return a1;
  v10 = (unint64_t *)&v16->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20815A31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_20815A338(std::__shared_weak_count_vtbl **a1, unsigned int *a2, unsigned int a3, uint64_t *a4, unsigned int a5, unsigned int *a6)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  v17 = 0;
  v18 = 0;
  LOBYTE(v14) = 0;
  v15 = 0;
  if (*((_BYTE *)a6 + 4))
  {
    v14 = *a6;
    v15 = 1;
  }
  sub_208159554(a2, a3, a4, a5, (uint64_t)&v14, (uint64_t)&v19);
  v16 = v19;
  sub_20815A210(a1, (uint64_t)&v17, (uint64_t)&v16);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v18;
  if (!v18)
    return a1;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
    return a1;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return a1;
}

void sub_20815A440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20815A45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20815A470(CVPixelBufferPoolRef *a1@<X0>, uint64_t a2@<X8>)
{
  CVReturn v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  CVPixelBufferRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  CVPixelBufferRef v18;
  std::__shared_weak_count *v19;
  _BYTE v20[15];
  char v21;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v3 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], *a1, &pixelBufferOut);
  if (v3)
  {
    sub_20815CA10(&v18, v3, (uint64_t)"PixelBuffer creation from pool failed", 37);
    v4 = (int)v18;
    v5 = *(_QWORD *)v20;
    v6 = *(_QWORD *)&v20[7];
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 23) = v6;
    LOBYTE(v5) = v21;
    *(_DWORD *)a2 = v4;
    *(_WORD *)(a2 + 31) = v5;
  }
  else
  {
    v7 = pixelBufferOut;
    if (!pixelBufferOut)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferPoolRef.cpp", 75, (uint64_t)"cv_pixel_buffer", 15, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = pixelBufferOut;
    }
    v18 = v7;
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0709D8;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v19 = v8;
    v10 = (char *)operator new(0xA0uLL);
    v11 = v10;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = off_24C08A688;
    v12 = v10 + 24;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    *((_QWORD *)v10 + 3) = v7;
    *((_QWORD *)v10 + 4) = v8;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *((_DWORD *)v10 + 10) = 0;
    *((_QWORD *)v10 + 6) = 0;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 8) = 850045863;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_QWORD *)v10 + 15) = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 9) = 0u;
    *(_QWORD *)a2 = &off_24C08A5D8;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 32) = 1;
    if (v19)
    {
      v16 = &v19->__shared_owners_;
      do
        v17 = __ldaxr((unint64_t *)v16);
      while (__stlxr(v17 - 1, (unint64_t *)v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_20815A67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20815A690(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20815A6A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20815A6C0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20815A6D4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20815A6F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP19__CVPixelBufferPoolEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP19__CVPixelBufferPoolEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP19__CVPixelBufferPoolEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP19__CVPixelBufferPoolEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20815A764(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 233, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return CVPixelBufferGetPixelFormatType(0);
  v9 = *(__CVBuffer **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return CVPixelBufferGetPixelFormatType(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return CVPixelBufferGetPixelFormatType(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return CVPixelBufferGetPixelFormatType(v9);
}

uint64_t sub_20815A89C(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 250, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_18;
  }
LABEL_9:
  v15 = *(_QWORD *)(a1 + 8);
  v10 = v15;
  v11 = atomic_load((unint64_t *)(v15 + 104));
  if (v11 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once((std::once_flag::_State_type *)(v15 + 104), &v16, (void (__cdecl *)(void *))sub_20815EB88);
  }
  if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(v10 + 120) - *(_QWORD *)(v10 + 112)) >> 3)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 251, (uint64_t)"idx < p_->GetCachedBaseAddress().size()", 39, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
LABEL_18:
    abort();
  }
  v12 = *(_QWORD *)(a1 + 8);
  v15 = v12;
  v13 = atomic_load((unint64_t *)(v12 + 104));
  if (v13 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once((std::once_flag::_State_type *)(v12 + 104), &v16, (void (__cdecl *)(void *))sub_20815EB88);
  }
  return *(_QWORD *)(*(_QWORD *)(v12 + 112) + 8 * a2);
}

_QWORD *sub_20815AA20(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08A5D8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FC78(a1[1]);
  }
  return a1;
}

void sub_20815AAE4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20815AB2C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08A5D8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FC78(a1[1]);
  }
  return a1;
}

void sub_20815ABF0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20815AC38(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_20815FE54(a1[1]);
  }
LABEL_9:
  *a1 = &off_24C08A5D8;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20815AD24(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20815AC38(a1);
  operator delete(v1);
}

_QWORD *sub_20815AD38(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08A5D8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08A5B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FD68(a1[1]);
  }
  return a1;
}

void sub_20815ADFC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20815AE44(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08A5D8;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08A5B8;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_20815FD68(a1[1]);
  }
  return a1;
}

void sub_20815AF08(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20815AF50(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_20815FF44(a1[1]);
  }
LABEL_9:
  *a1 = &off_24C08A5D8;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20815B03C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20815AF50(a1);
  operator delete(v1);
}

_QWORD *sub_20815B050(_QWORD *a1, std::__shared_weak_count_vtbl *cf, int a3, int a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;

  if (a3 && cf)
    CFRetain(cf);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0709D8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = cf;
  v28 = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *a1 = &off_24C08A5D8;
  v14 = (char *)operator new(0xA0uLL);
  v15 = v14;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C08A688;
  v16 = v14 + 24;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v14 + 3) = cf;
    *((_QWORD *)v14 + 4) = v28;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
  }
  else
  {
    *((_QWORD *)v14 + 3) = cf;
    *((_QWORD *)v14 + 4) = 0;
  }
  *((_DWORD *)v14 + 10) = a4;
  *((_QWORD *)v14 + 6) = a4 == 1;
  *((_QWORD *)v14 + 7) = a4 == 2;
  *((_QWORD *)v14 + 8) = 850045863;
  v20 = 0uLL;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *((_QWORD *)v14 + 15) = 0;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      v20 = 0uLL;
    }
  }
  *((_OWORD *)v15 + 8) = v20;
  *((_OWORD *)v15 + 9) = v20;
  a1[1] = v16;
  a1[2] = v15;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_20815B278(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20815B28C()
{
  __break(1u);
}

void sub_20815B2B8()
{
  __cxa_end_catch();
  JUMPOUT(0x20815B2C0);
}

void sub_20815B2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_207C99D78((uint64_t)&a11);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20815B2E8(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  std::runtime_error *exception;
  uint64_t v8;
  std::string v9;
  uint64_t (**v10)(_QWORD);
  __int128 v11;
  char v12;

  sub_20815CDF8(a2, a3, a4, a5, (uint64_t)&v10);
  if (!v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v8 = sub_207DFF0FC((uint64_t)&v10);
    sub_20815D738("Failed to create CVPixelBuffer: ", v8);
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)a1 = &off_24C08A5D8;
  *(_OWORD *)(a1 + 8) = v11;
  v11 = 0uLL;
  return (*v10)(&v10);
}

void sub_20815B3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_207DE69C4((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *sub_20815B3F4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C08A5D8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20815B468(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t *a4, unsigned int a5)
{
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v13[16];
  __int128 v14;
  _BYTE v15[24];

  v13[0] = 0;
  v13[8] = 0;
  sub_208159554(a2, a3, a4, a5, (uint64_t)v13, (uint64_t)v15);
  v14 = *(_OWORD *)v15;
  sub_20815B2E8((uint64_t)v15, a2, a3, a4, (uint64_t)&v14);
  *(_QWORD *)a1 = &off_24C08A5D8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v15[8];
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (!*((_QWORD *)&v14 + 1))
    return a1;
  v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20815B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20815B564@<X0>(unsigned int *a1@<X0>, OSType a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  void *p_p;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  CVReturn v19;
  int v20;
  void *v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  std::string::size_type v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *size;
  unint64_t *v37;
  unint64_t v38;
  std::runtime_error *exception;
  uint64_t v40;
  uint64_t (**v41)();
  _BYTE v42[23];
  char v43;
  char v44;
  std::string::size_type v45;
  void *__p;
  uint64_t v47;
  unsigned __int8 v48;
  _DWORD v49[8];
  OSType pixelFormatType;
  char v51;
  _DWORD v52[6];
  int v53;
  std::string v54;
  const char *v55;
  const char *v56;
  std::string *v57;
  _QWORD v58[3];
  _QWORD *v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v58[0]) = 0;
  v60 = 0;
  if (*(_BYTE *)(a5 + 32))
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11)
    {
      if (v11 == a5)
      {
        v59 = v58;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a5 + 24))(a5, v58);
        goto LABEL_7;
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
    v59 = (_QWORD *)v11;
LABEL_7:
    v60 = 1;
  }
  pixelFormatType = a2;
  if (sub_2080F29D8(a2) >= 2)
  {
    v53 = 0;
    sub_207F0A064(v52, "MakeViewPixelBuffer");
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    v54.__r_.__value_.__l.__size_ = (std::string::size_type)" cannot be used to create a planar view CVPixelBufferRef, bu"
                                                            "t given format is planar ";
    v54.__r_.__value_.__r.__words[2] = (std::string::size_type)v52;
    v55 = " cannot be used to create a planar view CVPixelBufferRef, but given format is planar ";
    v56 = " cannot be used to create a planar view CVPixelBufferRef, but given format is planar ";
    if (v53 == -1)
      sub_207CA9F48();
    v57 = &v54;
    ((void (*)(std::string **, _DWORD *))off_24C08A740[v53])(&v57, v52);
    sub_207DDDF2C((uint64_t)&v54, (uint64_t)v52, &pixelFormatType);
    if (v53 == -1)
      sub_207CA9F48();
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    ((void (*)(void **__return_ptr, std::string *, _DWORD *))off_24C08A660[v53])(&__p, &v54, v52);
    if (v53 != -1)
      ((void (*)(std::string *, _DWORD *))off_24C08A630[v53])(&v54, v52);
    if ((v48 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v48 & 0x80u) == 0)
      v13 = v48;
    else
      v13 = v47;
    sub_20815CA10(v49, -6661, (uint64_t)p_p, v13);
LABEL_46:
    *(_OWORD *)v42 = *(_OWORD *)&v49[2];
    *(_QWORD *)&v42[15] = *(_QWORD *)((char *)&v49[5] + 3);
    v23 = HIBYTE(v49[7]);
    memset(&v49[2], 0, 24);
    LODWORD(v41) = v49[0];
    v43 = v23;
    v44 = 0;
    if ((char)v48 < 0)
      operator delete(__p);
    goto LABEL_48;
  }
  v45 = 0;
  if ((a4 & 0xFF00000000) != 0)
  {
    if (v60)
      goto LABEL_22;
LABEL_30:
    v19 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *a1, a1[1], a2, a3, a4, 0, 0, 0, (CVPixelBufferRef *)&v45);
    goto LABEL_33;
  }
  v16 = *a1;
  v17 = sub_20815D4C8(a2);
  v18 = sub_20815E7F8(a2);
  if ((v18 - 1) > 2)
  {
    LODWORD(a4) = v17 * v16;
    if (!v60)
      goto LABEL_30;
  }
  else
  {
    LODWORD(a4) = v17 * v16 * dword_2082808F0[(char)(v18 - 1)];
    if (!v60)
      goto LABEL_30;
  }
LABEL_22:
  v14 = operator new(0x20uLL);
  v15 = (uint64_t)v59;
  if (v59)
  {
    if (v59 == v58)
    {
      v14[3] = v14;
      (*(void (**)(_QWORD *, _QWORD *))(v58[0] + 24))(v58, v14);
      goto LABEL_32;
    }
    v15 = (*(uint64_t (**)(_QWORD *))(*v59 + 16))(v59);
  }
  v14[3] = v15;
LABEL_32:
  v19 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], *a1, a1[1], pixelFormatType, a3, a4, (CVPixelBufferReleaseBytesCallback)sub_20815EA68, v14, 0, (CVPixelBufferRef *)&v45);
LABEL_33:
  v20 = v19;
  if (v19)
  {
    v53 = 0;
    sub_207F0A064(v52, "MakeViewPixelBuffer");
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    v54.__r_.__value_.__l.__size_ = (std::string::size_type)" for format ";
    v54.__r_.__value_.__r.__words[2] = (std::string::size_type)v52;
    v55 = " for format ";
    v56 = " for format ";
    if (v53 == -1)
      sub_207CA9F48();
    v57 = &v54;
    ((void (*)(std::string **, _DWORD *))off_24C08A6F8[v53])(&v57, v52);
    sub_207DDDF2C((uint64_t)&v51, (uint64_t)v52, &pixelFormatType);
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    v54.__r_.__value_.__l.__size_ = (std::string::size_type)" and size ";
    v54.__r_.__value_.__r.__words[2] = (std::string::size_type)v52;
    v55 = " and size ";
    v56 = " and size ";
    if (v53 == -1)
      sub_207CA9F48();
    v57 = &v54;
    ((void (*)(std::string **, _DWORD *))off_24C08A710[v53])(&v57, v52);
    sub_2080FEE64((uint64_t)&v54, (uint64_t)v52, a1);
    if (v53 == -1)
      sub_207CA9F48();
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    ((void (*)(void **__return_ptr, std::string *, _DWORD *))off_24C08A660[v53])(&__p, &v54, v52);
    if (v53 != -1)
      ((void (*)(std::string *, _DWORD *))off_24C08A630[v53])(&v54, v52);
    if ((v48 & 0x80u) == 0)
      v21 = &__p;
    else
      v21 = __p;
    if ((v48 & 0x80u) == 0)
      v22 = v48;
    else
      v22 = v47;
    sub_20815CA10(v49, v20, (uint64_t)v21, v22);
    goto LABEL_46;
  }
  v27 = v45;
  v54.__r_.__value_.__r.__words[0] = v45;
  v28 = (std::__shared_weak_count *)operator new(0x20uLL);
  v28->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0709D8;
  v28->__shared_weak_owners_ = 0;
  v28[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
  v30 = (char *)operator new(0xA0uLL);
  v31 = v30;
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 2) = 0;
  *(_QWORD *)v30 = off_24C08A688;
  v32 = v30 + 24;
  do
    v33 = __ldxr(p_shared_owners);
  while (__stxr(v33 + 1, p_shared_owners));
  *((_QWORD *)v30 + 3) = v27;
  *((_QWORD *)v30 + 4) = v28;
  do
    v34 = __ldxr(p_shared_owners);
  while (__stxr(v34 + 1, p_shared_owners));
  *((_DWORD *)v30 + 10) = 0;
  *((_QWORD *)v30 + 6) = 0;
  *((_QWORD *)v30 + 7) = 0;
  *((_QWORD *)v30 + 8) = 850045863;
  *(_OWORD *)(v30 + 72) = 0u;
  *(_OWORD *)(v30 + 88) = 0u;
  *(_OWORD *)(v30 + 104) = 0u;
  *((_QWORD *)v30 + 15) = 0;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  *((_OWORD *)v31 + 8) = 0u;
  *((_OWORD *)v31 + 9) = 0u;
  v41 = &off_24C08A5D8;
  *(_QWORD *)v42 = v32;
  *(_QWORD *)&v42[8] = v31;
  v44 = 1;
  size = (std::__shared_weak_count *)v54.__r_.__value_.__l.__size_;
  if (v54.__r_.__value_.__l.__size_)
  {
    v37 = (unint64_t *)(v54.__r_.__value_.__l.__size_ + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_48:
  if (!v60)
    goto LABEL_54;
  v24 = v59;
  if (v59 == v58)
  {
    v25 = 4;
    v24 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_54;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_54:
  if (!v44)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v40 = sub_207DFF0FC((uint64_t)&v41);
    sub_20815BD20((uint64_t)&v54, v40);
    std::runtime_error::runtime_error(exception, &v54);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)a6 = &off_24C08A5D8;
  *(_OWORD *)(a6 + 8) = *(_OWORD *)v42;
  *(_OWORD *)v42 = 0uLL;
  return ((uint64_t (*)(uint64_t (***)()))*v41)(&v41);
}

void sub_20815BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;

  sub_207C99D78((uint64_t)&a29);
  if (*(_BYTE *)(v29 - 80))
  {
    v32 = *(_QWORD **)(v29 - 88);
    if (v32 == (_QWORD *)(v29 - 112))
    {
      v31 = 4;
      v32 = (_QWORD *)(v29 - 112);
    }
    else
    {
      if (!v32)
        goto LABEL_8;
      v31 = 5;
    }
    (*(void (**)(void))(*v32 + 8 * v31))();
  }
LABEL_8:
  _Unwind_Resume(a1);
}

void sub_20815BBD8(void *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2)
      CFRelease(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x20815BD18);
}

void sub_20815BBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  if (*(_BYTE *)(v1 - 80))
  {
    if (*(_QWORD *)(v1 - 88) != v1 - 112)
      JUMPOUT(0x20815BC80);
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 112) + 32))(v1 - 112);
  }
  _Unwind_Resume(a1);
}

void sub_20815BC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void sub_20815BC64()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 - 80))
  {
    if (*(_QWORD *)(v0 - 88) != v0 - 112)
      JUMPOUT(0x20815BC80);
    JUMPOUT(0x20815BD04);
  }
  JUMPOUT(0x20815BD18);
}

void sub_20815BCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_207CA9EF0((uint64_t)va);
  if (*(_BYTE *)(v17 - 80))
  {
    if (*(_QWORD *)(v17 - 88) != v17 - 112)
      JUMPOUT(0x20815BC80);
    (*(void (**)(uint64_t))(*(_QWORD *)(v17 - 112) + 32))(v17 - 112);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20815BD20(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  __int128 v5;
  int v6;
  void *__p[2];
  char v8;
  _QWORD v9[5];
  _QWORD *v10;

  v4 = (char *)operator new(0x30uLL);
  v5 = xmmword_208238760;
  strcpy(v4, "Failed to create CVPixelBuffer with bytes: ");
  v6 = 1;
  sub_20815D87C(__p, a2);
  v9[0] = &v4;
  v9[1] = __p;
  v9[2] = &v4;
  v9[3] = __p;
  v9[4] = __p;
  v10 = v9;
  sub_207CAB48C((uint64_t)&v10, (uint64_t)&v4);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v6 == -1)
    sub_207CA9F48();
  v9[0] = __p;
  result = ((uint64_t (*)(_QWORD *, char **))off_24C08A660[v6])(v9, &v4);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, char **))off_24C08A630[v6])(v9, &v4);
  return result;
}

void sub_20815BE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20815BE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20815BE64);
}

void sub_20815BE98(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C08A5D8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20815BF0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  v1 = *(uint64_t **)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *v1;
  v3 = (std::__shared_weak_count *)v1[1];
  if (!v3)
    return v2;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v2;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v2;
}

unint64_t sub_20815BF9C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int Width;
  uint64_t v15;
  __CVBuffer *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 187, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(__CVBuffer **)v8;
    v10 = *(std::__shared_weak_count **)(v8 + 8);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    Width = CVPixelBufferGetWidth(v9);
    v15 = *(_QWORD *)(a1 + 8);
    if (v15)
      goto LABEL_17;
LABEL_24:
    v16 = 0;
    return Width | ((unint64_t)CVPixelBufferGetHeight(v16) << 32);
  }
  Width = CVPixelBufferGetWidth(0);
  v15 = *(_QWORD *)(a1 + 8);
  if (!v15)
    goto LABEL_24;
LABEL_17:
  v16 = *(__CVBuffer **)v15;
  v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return Width | ((unint64_t)CVPixelBufferGetHeight(v16) << 32);
}

size_t sub_20815C130(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 203, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return CVPixelBufferGetWidth(0);
  v9 = *(__CVBuffer **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return CVPixelBufferGetWidth(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return CVPixelBufferGetWidth(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return CVPixelBufferGetWidth(v9);
}

size_t sub_20815C268(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __CVBuffer *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 208, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return CVPixelBufferGetWidthOfPlane(0, planeIndex);
  v11 = *(__CVBuffer **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return CVPixelBufferGetWidthOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return CVPixelBufferGetWidthOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return CVPixelBufferGetWidthOfPlane(v11, planeIndex);
}

size_t sub_20815C3B0(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 213, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return CVPixelBufferGetHeight(0);
  v9 = *(__CVBuffer **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return CVPixelBufferGetHeight(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return CVPixelBufferGetHeight(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return CVPixelBufferGetHeight(v9);
}

size_t sub_20815C4E8(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __CVBuffer *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 218, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return CVPixelBufferGetHeightOfPlane(0, planeIndex);
  v11 = *(__CVBuffer **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return CVPixelBufferGetHeightOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return CVPixelBufferGetHeightOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return CVPixelBufferGetHeightOfPlane(v11, planeIndex);
}

size_t sub_20815C630(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 223, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return CVPixelBufferGetBytesPerRow(0);
  v9 = *(__CVBuffer **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return CVPixelBufferGetBytesPerRow(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return CVPixelBufferGetBytesPerRow(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return CVPixelBufferGetBytesPerRow(v9);
}

size_t sub_20815C768(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __CVBuffer *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 228, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return CVPixelBufferGetBytesPerRowOfPlane(0, planeIndex);
  v11 = *(__CVBuffer **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return CVPixelBufferGetBytesPerRowOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return CVPixelBufferGetBytesPerRowOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return CVPixelBufferGetBytesPerRowOfPlane(v11, planeIndex);
}

_QWORD *sub_20815C8B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __CVBuffer *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *IOSurface;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 256, (uint64_t)"IsValid()", 9, (uint64_t)&unk_2082281CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(__CVBuffer **)v10;
    v12 = *(std::__shared_weak_count **)(v10 + 8);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  IOSurface = (std::__shared_weak_count_vtbl *)CVPixelBufferGetIOSurface(v11);
  return sub_2081DDA24(a2, IOSurface, 1, 0);
}

uint64_t sub_20815C9DC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(result + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = v2[1];
    *a2 = v4;
    a2[1] = v3;
    if (v3)
    {
      v5 = (unint64_t *)(v3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

_DWORD *sub_20815CA10(_DWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  std::string *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  char v18;
  _QWORD v19[2];
  __int128 v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  v6 = (std::string *)(a1 + 2);
  *(_QWORD *)&v17 = a3;
  *((_QWORD *)&v17 + 1) = a4;
  sub_20815DAC0();
  v7 = qword_253E52BD8;
  if (!qword_253E52BD8)
    goto LABEL_11;
  v8 = &qword_253E52BD8;
  do
  {
    v9 = *(_DWORD *)(v7 + 32);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (!v10)
      v8 = (uint64_t *)v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != &qword_253E52BD8 && *((_DWORD *)v8 + 8) <= a2)
  {
    sub_20815DAC0();
    v20 = v17;
    v21 = ": ";
    v22 = 2;
    v14 = v8[5];
    v13 = v8 + 5;
    v12 = v14;
    v15 = *((unsigned __int8 *)v13 + 23);
    if ((v15 & 0x80u) != 0)
      v15 = v13[1];
    else
      v12 = (uint64_t)v13;
    v23 = v12;
    v24 = v15;
    sub_207CAC8F4((uint64_t)&v20, (uint64_t)v25, 0, 0, v6);
  }
  else
  {
LABEL_11:
    sub_20815DAC0();
    LODWORD(v22) = 0;
    sub_207EFF5F4((uint64_t)v19, (uint64_t)&v20, (uint64_t)&v17);
    if ((_DWORD)v22 == -1)
      sub_207CA9F48();
    v19[0] = &v18;
    ((void (*)(_QWORD *, __int128 *))off_24C08A660[v22])(v19, &v20);
    if ((_DWORD)v22 != -1)
      ((void (*)(_QWORD *, __int128 *))off_24C08A630[v22])(v19, &v20);
  }
  return a1;
}

void sub_20815CB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

uint64_t sub_20815CBE8(uint64_t a1)
{
  std::string *v2;
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  std::string *v7;
  std::string *v8;
  _DWORD *v9;
  std::string *v10;
  std::string *v11;
  std::string **v12;

  v5 = 0;
  sub_207CD4504(v4, "{");
  std::to_string(&v6, **(_DWORD **)a1);
  v7 = (std::string *)v4;
  v8 = &v6;
  v9 = v4;
  v10 = &v6;
  v11 = &v6;
  if (v5 == -1)
    sub_207CA9F48();
  v12 = &v7;
  ((void (*)(std::string ***, _DWORD *))off_24C08A648[v5])(&v12, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v2 = *(std::string **)(a1 + 8);
  v7 = (std::string *)v4;
  v8 = (std::string *)",";
  v9 = v4;
  v10 = (std::string *)",";
  v11 = (std::string *)",";
  if (v5 == -1)
    goto LABEL_11;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  ((void (*)(std::string *, _DWORD *))off_24C08A6C8[v5])(&v6, v4);
  v7 = (std::string *)v4;
  v8 = v2;
  v9 = v4;
  v10 = v2;
  v11 = v2;
  if (v5 == -1
    || (v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7,
        ((void (*)(std::string *, _DWORD *))off_24C08A6E0[v5])(&v6, v4),
        v7 = (std::string *)v4,
        v8 = (std::string *)"}",
        v9 = v4,
        v10 = (std::string *)"}",
        v11 = (std::string *)"}",
        v5 == -1))
  {
LABEL_11:
    sub_207CA9F48();
  }
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  ((void (*)(std::string *, _DWORD *))off_24C08A6C8[v5])(&v6, v4);
  if (v5 == -1)
    sub_207CA9F48();
  v7 = &v6;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C08A660[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C08A630[v5])(&v7, v4);
  return result;
}

void sub_20815CDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20815CDF8(unsigned int *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  size_t v12;
  size_t v13;
  OSType v14;
  CVReturn v15;
  int v16;
  std::__shared_weak_count *size;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::__raw *v24;
  int data;
  size_t v26;
  void **v27;
  const void **v28;
  std::string::size_type v29;
  std::string::size_type v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  void **v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *__p[2];
  unsigned __int8 v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  CVPixelBufferRef pixelBufferOut;
  OSType v53;
  char v54;
  char v55;
  int v56;
  std::__shared_weak_count *v57;
  char v58;
  int v59;
  void *__dst[2];
  unint64_t v61;
  std::string v62;
  const char *v63;
  const char *v64;
  std::string *v65;

  v53 = a2;
  pixelBufferOut = 0;
  sub_207D01634(&v50, a4);
  sub_208159944((uint64_t)&v50, &v56);
  if (v58)
  {
    sub_2081E1ED4((uint64_t)&v56, &v62);
    if ((_BYTE)v63)
    {
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
    }
    else
    {
      sub_2081E1F98((uint64_t)&v56, a3);
    }
    if (v58)
    {
      v9 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  v12 = *a1;
  v13 = a1[1];
  v14 = v53;
  sub_207D0178C((std::__shared_weak_count_vtbl **)&v62, (uint64_t)&v50);
  v15 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v12, v13, v14, (CFDictionaryRef)v62.__r_.__value_.__l.__data_, &pixelBufferOut);
  v16 = v15;
  size = (std::__shared_weak_count *)v62.__r_.__value_.__l.__size_;
  if (!v62.__r_.__value_.__l.__size_)
    goto LABEL_16;
  v18 = (unint64_t *)(v62.__r_.__value_.__l.__size_ + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_16:
    if (v15)
      goto LABEL_17;
LABEL_28:
    sub_20815B050(&v62, (std::__shared_weak_count_vtbl *)pixelBufferOut, 0, 0);
    *(_QWORD *)a5 = &off_24C08A5D8;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)&v62.__r_.__value_.__r.__words[1];
    *(_BYTE *)(a5 + 32) = 1;
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (!v16)
    goto LABEL_28;
LABEL_17:
  v59 = 0;
  sub_207F160A8(&v56, "MakePixelBuffer");
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  v62.__r_.__value_.__l.__size_ = (std::string::size_type)" for format ";
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)&v56;
  v63 = " for format ";
  v64 = " for format ";
  if (v59 == -1)
    sub_207CA9F48();
  __dst[0] = &v62;
  ((void (*)(void **, int *))off_24C08A6F8[v59])(__dst, &v56);
  sub_207DDDF2C((uint64_t)&v55, (uint64_t)&v56, &v53);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  v62.__r_.__value_.__l.__size_ = (std::string::size_type)" and size ";
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)&v56;
  v63 = " and size ";
  v64 = " and size ";
  if (v59 == -1)
    sub_207CA9F48();
  __dst[0] = &v62;
  ((void (*)(void **, int *))off_24C08A710[v59])(__dst, &v56);
  sub_20815EEDC((uint64_t)&v54, (uint64_t)&v56, a1);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  v62.__r_.__value_.__l.__size_ = (std::string::size_type)", used attributes:\n";
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)&v56;
  v63 = ", used attributes:\n";
  v64 = ", used attributes:\n";
  if (v59 == -1)
    sub_207CA9F48();
  __dst[0] = &v62;
  ((void (*)(void **, int *))off_24C08A728[v59])(__dst, &v56);
  v20 = (std::string *)operator new(0x118uLL);
  v20[11].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&v20[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v20[10].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v20[8].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v20[9].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v20[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v20[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v20[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v20[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v20[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v20[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v20[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v20[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v20[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v20[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v20->__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v20[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v20->__r_.__value_.__l.__data_ = 0u;
  sub_207CA2878((uint64_t)v20);
  v65 = v20;
  sub_207D0178C((std::__shared_weak_count_vtbl **)&v62, a4);
  sub_207D02290(&v20->__r_.__value_.__r.__words[2], v62.__r_.__value_.__l.__data_);
  v21 = (std::__shared_weak_count *)v62.__r_.__value_.__l.__size_;
  if (v62.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(v62.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v24 = (std::string::__raw *)v65;
      data = (int)v65[5].__r_.__value_.__l.__data_;
      if ((data & 0x10) == 0)
        goto LABEL_25;
LABEL_31:
      v29 = v24[4].__words[2];
      v30 = v24[3].__words[0];
      if (v29 < v30)
      {
        v24[4].__words[2] = v30;
        v29 = v30;
      }
      v28 = (const void **)&v24[2].__words[2];
      goto LABEL_34;
    }
  }
  v24 = (std::string::__raw *)v65;
  data = (int)v65[5].__r_.__value_.__l.__data_;
  if ((data & 0x10) != 0)
    goto LABEL_31;
LABEL_25:
  if ((data & 8) == 0)
  {
    v26 = 0;
    HIBYTE(v61) = 0;
    v27 = __dst;
    goto LABEL_42;
  }
  v28 = (const void **)&v24[1].__words[2];
  v29 = v24[2].__words[1];
LABEL_34:
  v31 = *v28;
  v26 = v29 - (_QWORD)*v28;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v26 >= 0x17)
  {
    v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v32 = v26 | 7;
    v33 = v32 + 1;
    v27 = (void **)operator new(v32 + 1);
    __dst[1] = (void *)v26;
    v61 = v33 | 0x8000000000000000;
    __dst[0] = v27;
  }
  else
  {
    HIBYTE(v61) = v29 - *(_BYTE *)v28;
    v27 = __dst;
    if (!v26)
      goto LABEL_42;
  }
  memmove(v27, v31, v26);
LABEL_42:
  *((_BYTE *)v27 + v26) = 0;
  v34 = v65;
  if (v65)
  {
    v35 = MEMORY[0x24BEDB7F0];
    v36 = *MEMORY[0x24BEDB7F0];
    v65->__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
    v37 = *(_QWORD *)(v35 + 72);
    *(std::string::size_type *)((char *)v34->__r_.__value_.__r.__words + *(_QWORD *)(v36 - 24)) = *(_QWORD *)(v35 + 64);
    v34[1].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB848] + 16;
    v34->__r_.__value_.__r.__words[2] = v37;
    if (v34[4].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v34[3].__r_.__value_.__r.__words[2]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v34[5].__r_.__value_.__r.__words[1]);
    operator delete(v34);
  }
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  v62.__r_.__value_.__l.__size_ = (std::string::size_type)__dst;
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)&v56;
  v63 = (const char *)__dst;
  v64 = (const char *)__dst;
  if (v59 == -1)
    sub_207CA9F48();
  v65 = &v62;
  ((void (*)(std::string **, int *))off_24C08A648[v59])(&v65, &v56);
  if (SHIBYTE(v61) < 0)
    operator delete(__dst[0]);
  if (v59 == -1)
    sub_207CA9F48();
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  ((void (*)(void **__return_ptr, std::string *, int *))off_24C08A660[v59])(__p, &v62, &v56);
  if (v59 != -1)
    ((void (*)(std::string *, int *))off_24C08A630[v59])(&v62, &v56);
  if ((v46 & 0x80u) == 0)
    v38 = __p;
  else
    v38 = (void **)__p[0];
  if ((v46 & 0x80u) == 0)
    v39 = v46;
  else
    v39 = (uint64_t)__p[1];
  sub_20815CA10(&v47, v16, (uint64_t)v38, v39);
  v40 = v47;
  v41 = v49;
  *(_QWORD *)(a5 + 8) = v48;
  *(_QWORD *)(a5 + 16) = v41;
  *(_QWORD *)(a5 + 23) = *(_QWORD *)((char *)&v49 + 7);
  LOBYTE(v41) = HIBYTE(v49);
  v49 = 0uLL;
  v48 = 0;
  *(_DWORD *)a5 = v40;
  *(_WORD *)(a5 + 31) = v41;
  if ((char)v46 < 0)
    operator delete(__p[0]);
LABEL_60:
  v42 = v51;
  if (v51)
  {
    v43 = (unint64_t *)&v51->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_20815D3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_207D2E2BC((uint64_t)&a23);
  sub_207C99D78((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20815D454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_207C99D78(v8 - 112);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20815D48C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  JUMPOUT(0x20815D4B0);
}

void sub_20815D4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_207CA9EF0((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20815D4C8(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 == 875836534)
          return result;
        if (a1 != 1094862674)
        {
          v7 = 1111970369;
          goto LABEL_37;
        }
        return 4;
      }
      if (a1 == 875704422 || a1 == 875704438)
        return result;
      v4 = 875836518;
LABEL_41:
      if (a1 != v4)
        goto LABEL_43;
      return result;
    }
    if (a1 > 843264055)
    {
      v6 = a1 - 843264056;
      if (v6 <= 0x30 && ((1 << v6) & 0x1400000000001) != 0)
        return 2;
      goto LABEL_43;
    }
    if (a1 != 24)
    {
      if (a1 == 32)
        return 4;
      if (a1 != 842285639)
        goto LABEL_43;
    }
    return 3;
  }
  if (a1 > 1647392358)
  {
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032)
          return result;
        v4 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600)
          return result;
        v4 = 1717856627;
      }
      goto LABEL_41;
    }
    if (a1 == 1647392359)
      return result;
    if (a1 != 1647589490)
    {
      v7 = 1647719521;
      goto LABEL_37;
    }
    return 3;
  }
  if (a1 <= 1278226741)
  {
    v5 = a1 - 1278226488;
    if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0)
      goto LABEL_43;
    return result;
  }
  if (a1 > 1380410944)
  {
    if (a1 != 1380410945)
    {
      v3 = 26689;
      goto LABEL_36;
    }
    return 4;
  }
  if (a1 != 1278226742)
  {
    v3 = 16961;
LABEL_36:
    v7 = v3 | 0x52470000;
LABEL_37:
    if (a1 == v7)
      return 4;
LABEL_43:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 420, (uint64_t)&unk_2082281CB, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

uint64_t sub_20815D738(char *__s, uint64_t a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  void *__p[2];
  char v7;
  _QWORD v8[5];
  _QWORD *v9;

  v5 = 0;
  sub_208127788(v4, __s);
  sub_20815D87C(__p, a2);
  v8[0] = v4;
  v8[1] = __p;
  v8[2] = v4;
  v8[3] = __p;
  v8[4] = __p;
  if (v5 == -1)
    sub_207CA9F48();
  v9 = v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C08A648[v5])(&v9, v4);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v5 == -1)
    sub_207CA9F48();
  v8[0] = __p;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C08A660[v5])(v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C08A630[v5])(v8, v4);
  return result;
}

void sub_20815D83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20815D858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20815D848);
}

void sub_20815D87C(_BYTE *a1, uint64_t a2)
{
  _OWORD *v4;
  void **v5;
  uint64_t v6;
  int v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  void *__p[2];
  unsigned __int8 v21;

  v4 = operator new(0x118uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  *((_QWORD *)v4 + 34) = 0;
  sub_207CA2878((uint64_t)v4);
  v18 = (char *)v4;
  v19[0] = a2;
  v19[1] = a2 + 8;
  sub_20815CBE8((uint64_t)v19);
  if ((v21 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v6 = v21;
  else
    v6 = (uint64_t)__p[1];
  sub_207CBAB98((_QWORD *)v4 + 2, (uint64_t)v5, v6);
  if (((char)v21 & 0x80000000) == 0)
  {
    v7 = *((_DWORD *)v4 + 30);
    if ((v7 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v9 = *((_QWORD *)v4 + 14);
    v10 = *((_QWORD *)v4 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v4 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v4 + 8);
    v8 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v7 = *((_DWORD *)v4 + 30);
  if ((v7 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v7 & 8) == 0)
  {
    v8 = 0;
    a1[23] = 0;
    goto LABEL_22;
  }
  v11 = (const void *)*((_QWORD *)v4 + 5);
  v8 = *((_QWORD *)v4 + 7) - (_QWORD)v11;
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
    sub_207C95C50();
LABEL_15:
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    *((_QWORD *)a1 + 1) = v8;
    *((_QWORD *)a1 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)a1 = v14;
    a1 = v14;
    goto LABEL_21;
  }
  a1[23] = v8;
  if (v8)
LABEL_21:
    memmove(a1, v11, v8);
LABEL_22:
  a1[v8] = 0;
  if (v18)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v18 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)&v18[*(_QWORD *)(v16 - 24)] = *(_QWORD *)(v15 + 64);
    *((_QWORD *)v18 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v18 + 2) = v17;
    if (v18[111] < 0)
      operator delete(*((void **)v18 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v18 + 128);
    operator delete(v18);
  }
}

void sub_20815DA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_2082155DC((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_2082155DC((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_20815DAC0()
{
  unsigned __int8 v0;
  uint64_t v1;
  void *v2;
  __int128 v3;
  int v4;
  void *v5;
  __int128 v6;
  int v7;
  void *v8;
  __int128 v9;
  int v10;
  void *v11;
  __int128 v12;
  int v13;
  void *v14[3];
  int v15;
  void *v16;
  __int128 v17;
  int v18;
  void *v19;
  __int128 v20;
  int v21;
  void *v22;
  __int128 v23;
  int v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  char v29;
  int v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  void *v34;
  char v35;
  int v36;
  void *v37;
  __int128 v38;
  int v39;
  void *v40;
  __int128 v41;
  int v42;
  void *v43;
  __int128 v44;
  int v45;
  void *v46;
  __int128 v47;
  int v48;
  void *v49;
  __int128 v50;
  int v51;
  void *__p;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_253E52BC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E52BC8))
  {
    LODWORD(v1) = 0;
    v2 = operator new(0x48uLL);
    v3 = xmmword_20822C960;
    strcpy((char *)v2, "kCVReturnSuccess: Function executed successfully without errors.");
    v4 = -6660;
    v5 = operator new(0x38uLL);
    v6 = xmmword_20822C9D0;
    strcpy((char *)v5, "kCVReturnError: Function executed with unknown error.");
    v7 = -6661;
    v8 = operator new(0x78uLL);
    v9 = xmmword_2082806A0;
    strcpy((char *)v8, "kCVReturnInvalidArgument: At least one of the arguments passed in is not valid. Either out of range or the wrong type.");
    v10 = -6662;
    v11 = operator new(0x78uLL);
    v12 = xmmword_2082806B0;
    strcpy((char *)v11, "kCVReturnAllocationFailed: The allocation for a buffer or buffer pool failed. Most likely because of lack of resources.");
    v13 = -6663;
    HIBYTE(v14[2]) = 20;
    strcpy((char *)v14, "kCVReturnUnsupported");
    v15 = -6670;
    v16 = operator new(0x58uLL);
    v17 = xmmword_2082806C0;
    strcpy((char *)v16, "kCVReturnInvalidDisplay: A CVDisplayLink cannot be created for the given DisplayRef.");
    v18 = -6671;
    v19 = operator new(0x58uLL);
    v20 = xmmword_20827D700;
    strcpy((char *)v19, "kCVReturnDisplayLinkAlreadyRunning: The CVDisplayLink is already started and running.");
    v21 = -6672;
    v22 = operator new(0x48uLL);
    v23 = xmmword_208238770;
    strcpy((char *)v22, "kCVReturnDisplayLinkNotRunning: The CVDisplayLink has not been started.");
    v24 = -6673;
    v25 = operator new(0x48uLL);
    v26 = xmmword_2082806D0;
    strcpy((char *)v25, "kCVReturnDisplayLinkCallbacksNotSet: The output callback is not set.");
    sub_20815E4E0((uint64_t)&v27, -6680, "kCVReturnInvalidPixelFormat: The requested pixelformat is not supported for the CVBuffer type.");
    v30 = -6681;
    v31 = operator new(0x68uLL);
    v32 = xmmword_2082806E0;
    strcpy((char *)v31, "kCVReturnInvalidSize: The requested size (most likely too big) is not supported for the CVBuffer type.");
    sub_20815E4E0((uint64_t)&v33, -6682, "kCVReturnInvalidPixelBufferAttributes: A CVBuffer cannot be created with the given attributes.");
    v36 = -6683;
    v37 = operator new(0xA0uLL);
    v38 = xmmword_2082806F0;
    strcpy((char *)v37, "kCVReturnPixelBufferNotOpenGLCompatible: The Buffer cannot be used with OpenGL as either its size, pixelformat or attributes are not supported by OpenGL.");
    v39 = -6684;
    v40 = operator new(0x98uLL);
    v41 = xmmword_208280700;
    strcpy((char *)v40, "kCVReturnPixelBufferNotMetalCompatible: The Buffer cannot be used with Metal as either its size, pixelformat or attributes are not supported by Metal.");
    v42 = -6689;
    v43 = operator new(0xB8uLL);
    v44 = xmmword_208280710;
    strcpy((char *)v43, "kCVReturnWouldExceedAllocationThreshold: The allocation request failed because it would have exceeded a specified allocation threshold (see kCVPixelBufferPoolAllocationThresholdKey).");
    v45 = -6690;
    v46 = operator new(0xA0uLL);
    v47 = xmmword_208280720;
    strcpy((char *)v46, "kCVReturnPoolAllocationFailed: The allocation for the buffer pool failed. Most likely because of lack of resources. Check if your parameters are in range.");
    v48 = -6691;
    v49 = operator new(0x60uLL);
    v50 = xmmword_20822C970;
    strcpy((char *)v49, "kCVReturnInvalidPoolAttributes: A CVBufferPool cannot be created with the given attributes.");
    v51 = -6692;
    __p = operator new(0x88uLL);
    v53 = xmmword_208280730;
    strcpy((char *)__p, "kCVReturnRetry: a scan hasn't completely traversed the CVBufferPool due to a concurrent operation. The client can retry the scan.");
    sub_20815E594(&v1, 18);
    if (SHIBYTE(v53) < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v50) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v47) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v49);
    if ((SHIBYTE(v47) & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_26;
    }
LABEL_25:
    operator delete(v46);
    if ((SHIBYTE(v44) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v43);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v40);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_10:
      if ((v35 & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_29;
    }
LABEL_28:
    operator delete(v37);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_30;
    }
LABEL_29:
    operator delete(v34);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
LABEL_12:
      if ((v29 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v31);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v28);
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v25);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v22);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v19);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v14[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
LABEL_35:
    operator delete(v16);
    if ((SHIBYTE(v14[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_37;
    }
LABEL_36:
    operator delete(v14[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v9) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_38;
    }
LABEL_37:
    operator delete(v11);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
    {
LABEL_20:
      if ((SHIBYTE(v6) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_39;
    }
LABEL_38:
    operator delete(v8);
    if ((SHIBYTE(v6) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v3) & 0x80000000) == 0)
      {
LABEL_22:
        __cxa_atexit((void (*)(void *))sub_20815E778, &qword_253E52BD0, &dword_207C77000);
        __cxa_guard_release(&qword_253E52BC8);
        return;
      }
LABEL_40:
      operator delete(v2);
      goto LABEL_22;
    }
LABEL_39:
    operator delete(v5);
    if ((SHIBYTE(v3) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
}

void sub_20815E29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;

  if (SLOBYTE(STACK[0x247]) < 0)
  {
    operator delete((void *)STACK[0x230]);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a84 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a65 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a67);
  if ((a65 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a58 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a60);
  if ((a58 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a53);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a44 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a46);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a37 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a39);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a30 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a32);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a23 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a25);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a16 & 0x80000000) == 0)
    {
LABEL_38:
      __cxa_guard_abort(&qword_253E52BC8);
      _Unwind_Resume(a1);
    }
LABEL_37:
    operator delete(a11);
    __cxa_guard_abort(&qword_253E52BC8);
    _Unwind_Resume(a1);
  }
LABEL_36:
  operator delete(a18);
  if ((a16 & 0x80000000) == 0)
    goto LABEL_38;
  goto LABEL_37;
}

uint64_t sub_20815E4E0(uint64_t a1, int a2, char *__s)
{
  void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = a2;
  v5 = (void *)(a1 + 8);
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v5 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v5, __s, v7);
LABEL_9:
  *((_BYTE *)v5 + v7) = 0;
  return a1;
}

uint64_t *sub_20815E594(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  char *v13;
  _BYTE *v14;
  __int128 v15;

  qword_253E52BE0 = 0;
  qword_253E52BD8 = 0;
  qword_253E52BD0 = (uint64_t)&qword_253E52BD8;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[4 * a2];
    v5 = *(_DWORD *)result;
LABEL_6:
    v7 = &qword_253E52BD8;
LABEL_10:
    if (v3)
    {
      v10 = v7 + 1;
      if (v7[1])
        goto LABEL_27;
    }
    else
    {
LABEL_20:
      v10 = &qword_253E52BD8;
      v7 = &qword_253E52BD8;
    }
LABEL_21:
    v13 = (char *)operator new(0x40uLL);
    *((_DWORD *)v13 + 8) = v5;
    v14 = v13 + 40;
    if (*((char *)v2 + 31) < 0)
    {
      sub_207CA40D8(v14, (void *)v2[1], v2[2]);
    }
    else
    {
      v15 = *(_OWORD *)(v2 + 1);
      *((_QWORD *)v13 + 7) = v2[3];
      *(_OWORD *)v14 = v15;
    }
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v7;
    *v10 = (uint64_t)v13;
    if (*(_QWORD *)qword_253E52BD0)
    {
      qword_253E52BD0 = *(_QWORD *)qword_253E52BD0;
      v13 = (char *)*v10;
    }
    result = sub_207CC24B4((uint64_t *)qword_253E52BD8, (uint64_t *)v13);
    ++qword_253E52BE0;
LABEL_27:
    while (1)
    {
      v2 += 4;
      if (v2 == v4)
        break;
      v3 = qword_253E52BD8;
      v5 = *(_DWORD *)v2;
      if ((uint64_t *)qword_253E52BD0 == &qword_253E52BD8)
        goto LABEL_6;
      v6 = qword_253E52BD8;
      if (qword_253E52BD8)
      {
        do
        {
          v7 = (uint64_t *)v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        v8 = &qword_253E52BD8;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      if (*((_DWORD *)v7 + 8) < v5)
        goto LABEL_10;
      if (!qword_253E52BD8)
        goto LABEL_20;
      v11 = qword_253E52BD8;
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t *)v11;
          v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v5)
            break;
          v11 = *v7;
          v10 = v7;
          if (!*v7)
            goto LABEL_21;
        }
        if (v12 >= v5)
          break;
        v11 = v7[1];
        if (!v11)
        {
          v10 = v7 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_20815E740(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  sub_20815E7A0((char *)qword_253E52BD8);
  _Unwind_Resume(a1);
}

void sub_20815E764(_Unwind_Exception *a1)
{
  char *v1;

  sub_20815E7A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20815E778(uint64_t a1)
{
  sub_20815E7A0(*(char **)(a1 + 8));
  return a1;
}

void sub_20815E7A0(char *a1)
{
  if (a1)
  {
    sub_20815E7A0(*(_QWORD *)a1);
    sub_20815E7A0(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t sub_20815E7F8(int a1)
{
  int v1;
  int v2;
  int v4;

  if (a1 <= 1278226533)
  {
    if (a1 > 875704421)
    {
      if (a1 <= 875836533)
      {
        if (a1 == 875704422 || a1 == 875704438)
          return 0;
        v1 = 875836518;
      }
      else
      {
        if (a1 <= 1111970368)
        {
          if (a1 != 875836534)
          {
            v1 = 1094862674;
            goto LABEL_38;
          }
          return 0;
        }
        if (a1 == 1111970369)
          return 0;
        v1 = 1278226488;
      }
LABEL_38:
      if (a1 == v1)
        return 0;
LABEL_44:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 303, (uint64_t)&unk_2082281CB, 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_208216974);
      abort();
    }
    if (a1 <= 843264055)
    {
      if (a1 == 24 || a1 == 32)
        return 0;
      v1 = 842285639;
      goto LABEL_38;
    }
    if (a1 == 843264056)
      return 0;
    if (a1 != 843264102)
    {
      v4 = 843264104;
      goto LABEL_42;
    }
    return 3;
  }
  if (a1 > 1647392358)
  {
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032)
          return 2;
        v4 = 1751411059;
        goto LABEL_42;
      }
      if (a1 != 1717855600 && a1 != 1717856627)
        goto LABEL_44;
      return 3;
    }
    if (a1 == 1647392359 || a1 == 1647589490)
      return 1;
    v2 = 1647719521;
LABEL_27:
    if (a1 != v2)
      goto LABEL_44;
    return 1;
  }
  if (a1 <= 1380401728)
  {
    if (a1 == 1278226534)
      return 3;
    if (a1 == 1278226536)
      return 2;
    v2 = 1278226742;
    goto LABEL_27;
  }
  if (a1 == 1380401729)
    return 0;
  if (a1 == 1380410945)
    return 3;
  v4 = 1380411457;
LABEL_42:
  if (a1 != v4)
    goto LABEL_44;
  return 2;
}

void sub_20815EA68(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  v3 = a1[3];
  if (!v3)
    sub_207CA408C();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6);
  v4 = (_QWORD *)a1[3];
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
    goto LABEL_6;
  }
  if (v4)
  {
    v5 = 5;
LABEL_6:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  operator delete(a1);
}

void sub_20815EAE4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20815EAF8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_20815EB18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

double sub_20815EB88(CVPixelBufferRef ****a1)
{
  CVPixelBufferRef **v1;
  CVPixelBufferRef *v2;
  IOSurfaceRef IOSurface;
  __IOSurface *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  __CVBuffer *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  size_t PlaneCount;
  unint64_t v11;
  char *v12;
  size_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __CVBuffer *v18;
  double result;
  __int128 v20;
  __CVBuffer *v21;
  IOSurfaceRef v22;
  std::__shared_weak_count *v23;

  v1 = **a1;
  v2 = *v1;
  IOSurface = CVPixelBufferGetIOSurface(**v1);
  v4 = IOSurface;
  if (IOSurface)
    CFRetain(IOSurface);
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A778;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v23 = v5;
  if (!v4)
  {
    v7 = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (v7)
    {
      PlaneCount = CVPixelBufferGetPlaneCount(v7);
      if (PlaneCount <= 1)
        v11 = 1;
      else
        v11 = PlaneCount;
      sub_20815FC78((uint64_t)v2);
      v20 = 0uLL;
      v21 = 0;
      if (v11 >> 61)
        sub_207CA420C();
      v12 = (char *)operator new(8 * v11);
      *(_QWORD *)&v20 = v12;
      v21 = (__CVBuffer *)&v12[8 * v11];
      bzero(v12, 8 * v11);
      v13 = 0;
      *((_QWORD *)&v20 + 1) = v21;
      do
      {
        *(_QWORD *)&v12[8 * v13] = CVPixelBufferGetBaseAddressOfPlane(v7, v13);
        ++v13;
      }
      while (v11 != v13);
      sub_20815FE54((uint64_t)v2);
      if (!v6)
      {
LABEL_22:
        v5 = v23;
        if (!v23)
          goto LABEL_27;
        goto LABEL_23;
      }
    }
    else
    {
      v20 = 0uLL;
      v21 = 0;
      if (!v6)
        goto LABEL_22;
    }
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_22;
  }
  sub_2081DD934(&v22, &v20);
LABEL_23:
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_27:
  v18 = v2[14];
  if (v18)
  {
    v2[15] = v18;
    operator delete(v18);
  }
  result = *(double *)&v20;
  *((_OWORD *)v2 + 7) = v20;
  v2[16] = v21;
  return result;
}

void sub_20815ED5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __break(1u);
}

void sub_20815EDA0()
{
  __cxa_end_catch();
  JUMPOUT(0x20815EE2CLL);
}

void sub_20815EE34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08A688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20815EE44(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08A688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20815EE64(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20815EEDC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_2080797FC((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C08A648[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20815F10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_20815F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

size_t sub_20815F148(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C08A630[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20815F234(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C08A630[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_207CAA110((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20815F3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20815F430(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20815F6C0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20815F6D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

size_t sub_20815F6E0(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C08A630[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20815F7CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C08A630[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_207CAA110((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20815F984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20815F9C8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20815FC58(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20815FC70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20815FC78(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  int v4;
  CVPixelBufferLockFlags v5;
  CVPixelBufferLockFlags v6;
  int v7;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
      v5 = 1;
    }
    else
    {
      if (v4 != 2 || *(_QWORD *)(a1 + 32))
        goto LABEL_5;
      v5 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v5);
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = 0;
    v7 = 2;
LABEL_16:
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = v7;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    v7 = 1;
    goto LABEL_16;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_20815FD40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20815FD54(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20815FD68(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  int v4;
  CVPixelBufferLockFlags v6;
  CVPixelBufferLockFlags v7;
  int v8;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      v6 = 1;
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else
    {
      if (v4 != 2 || v3 != 0)
        goto LABEL_7;
      v6 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v7 = 0;
    v8 = 2;
LABEL_18:
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v7);
    *(_DWORD *)(a1 + 16) = v8;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v7 = 1;
    v8 = 1;
    goto LABEL_18;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_20815FE2C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20815FE40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20815FE54(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  int v4;
  CVPixelBufferLockFlags v5;
  CVPixelBufferLockFlags v6;
  int v7;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) - 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
      v5 = 1;
    }
    else
    {
      if (v4 != 2 || *(_QWORD *)(a1 + 32))
        goto LABEL_5;
      v5 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v5);
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = 0;
    v7 = 2;
LABEL_16:
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = v7;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    v7 = 1;
    goto LABEL_16;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_20815FF1C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20815FF30(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20815FF44(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  int v4;
  CVPixelBufferLockFlags v6;
  CVPixelBufferLockFlags v7;
  int v8;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) - 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      v6 = 1;
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else
    {
      if (v4 != 2 || v3 != 0)
        goto LABEL_7;
      v6 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v7 = 0;
    v8 = 2;
LABEL_18:
    CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v7);
    *(_DWORD *)(a1 + 16) = v8;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v7 = 1;
    v8 = 1;
    goto LABEL_18;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_208160008(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20816001C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_208160030(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
      abort();
    case 1:
      result = sub_208160278(a2, a3);
      break;
    case 2:
      result = sub_20816087C(a2, a3);
      break;
    case 3:
      result = sub_208160E3C(a2, a3);
      break;
    case 4:
      result = sub_208161474(a2, a3);
      break;
    case 5:
      result = sub_208161A34(a2, a3);
      break;
    case 6:
      result = sub_20816229C(a2, a3);
      break;
    case 7:
      result = sub_208162AB0(a2, a3);
      break;
    case 8:
      result = sub_2081633F0(a2, a3);
      break;
    case 9:
      result = sub_208163C04(a2, a3);
      break;
    case 10:
      result = sub_20816446C(a2, a3);
      break;
    case 11:
      result = sub_208164C80(a2, a3);
      break;
    case 12:
      result = sub_2081655C0(a2, a3);
      break;
    case 13:
      result = sub_208165DD4(a2, a3);
      break;
    case 14:
      result = sub_20816663C(a2, a3);
      break;
    case 15:
      result = sub_208166E50(a2, a3);
      break;
    case 16:
      result = sub_208167790(a2, a3);
      break;
    case 17:
      result = sub_208167FA4(a2, a3);
      break;
    case 18:
      result = sub_20816880C(a2, a3);
      break;
    case 19:
      result = sub_208169020(a2, a3);
      break;
    case 20:
      result = sub_208169960(a2, a3);
      break;
    case 21:
      result = sub_20816A174(a2, a3);
      break;
    case 22:
      result = sub_20816A9DC(a2, a3);
      break;
    case 23:
      result = sub_20816B1F0(a2, a3);
      break;
    case 24:
      result = sub_20816BB30(a2, a3);
      break;
    case 25:
      result = sub_20816C344(a2, a3);
      break;
    case 26:
      result = sub_20816CBAC(a2, a3);
      break;
    case 27:
      result = sub_20816D3C0(a2, a3);
      break;
    case 28:
      result = sub_20816DD00(a2, a3);
      break;
    case 29:
      result = sub_20816E514(a2, a3);
      break;
    case 30:
      result = sub_20816ED7C(a2, a3);
      break;
    case 31:
      result = sub_20816F590(a2, a3);
      break;
    case 32:
      result = sub_20816FED0(a2, a3);
      break;
    case 33:
      result = sub_2081706E4(a2, a3);
      break;
    case 34:
      result = sub_208170F4C(a2, a3);
      break;
    case 35:
      result = sub_208171760(a2, a3);
      break;
    case 36:
      result = sub_2081720A0(a2, a3);
      break;
    case 37:
      result = sub_2081728B4(a2, a3);
      break;
    case 38:
      result = sub_20817311C(a2, a3);
      break;
    case 39:
      result = sub_208173930(a2, a3);
      break;
    case 40:
      result = sub_208174270(a2, a3);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL sub_208160278(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = off_24C06EB30;
  sub_207CA98A4(a1, (uint64_t)&v15);
  v11 = off_24C06EB30;
  sub_207CA98A4(a2, (uint64_t)&v12);
  v3 = sub_208160390((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208160360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_207CA971C((uint64_t)&a9);
  sub_207CA971C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20816037C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_207CA971C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_208160390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v61 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v61, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v60 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_76;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v60, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_76;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_76;
  v24 = 1;
  if (!v22 || !v23)
  {
LABEL_77:
    v57 = v60;
    v60 = 0;
    if (!v57)
      goto LABEL_79;
    goto LABEL_78;
  }
  v25 = *(unsigned int *)(a1 + 40);
  v26 = *(unsigned int *)(a1 + 44);
  v28 = *(unsigned int *)(a2 + 40);
  v27 = *(unsigned int *)(a2 + 44);
  v29 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v29)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = *(std::__shared_weak_count **)(a1 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v29 = *(unsigned __int8 **)(a1 + 24);
  }
  v35 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v35)
  {
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *(std::__shared_weak_count **)(a2 + 16);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v35 = *(unsigned __int8 **)(a2 + 24);
  }
  v41 = v22 - 1;
  v42 = v23 - 1;
  if (v23 == 1)
  {
LABEL_66:
    if (v22 == 1)
    {
      v52 = v35;
      v51 = v29;
      goto LABEL_83;
    }
    v50 = (v22 - 2) + 1;
    v51 = &v29[v50 * v25];
    v52 = &v35[v50 * v28];
    while (*v29 == *v35)
    {
      v29 += v25;
      v35 += v28;
      if (!--v41)
        goto LABEL_83;
    }
LABEL_76:
    v24 = 0;
    goto LABEL_77;
  }
  if (v22 != 1)
  {
    v43 = 0;
    v44 = (v23 - 2) + 1;
    v45 = &v29[v44 * v26];
    v46 = &v35[v44 * v27];
LABEL_60:
    v47 = v22 - 1;
    v48 = v29;
    v49 = v35;
    while (*v48 == *v49)
    {
      v48 += v25;
      v49 += v28;
      if (!--v47)
      {
        if (*v48 != *v49)
          goto LABEL_76;
        v29 += v26;
        v35 += v27;
        if (++v43 == v42)
        {
          v29 = v45;
          v35 = v46;
          goto LABEL_66;
        }
        goto LABEL_60;
      }
    }
    goto LABEL_76;
  }
  if (*v29 != *v35)
    goto LABEL_76;
  v51 = &v29[v26 * (unint64_t)v42];
  v53 = &v35[v27];
  v54 = &v29[v26];
  v52 = &v35[v27 * (unint64_t)v42];
  while (--v42)
  {
    v24 = 0;
    v55 = *v53;
    v53 += v27;
    v56 = *v54;
    v54 += v26;
    if (v56 != v55)
      goto LABEL_77;
  }
LABEL_83:
  v24 = *v51 == *v52;
  v57 = v60;
  v60 = 0;
  if (v57)
LABEL_78:
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
LABEL_79:
  v58 = v61;
  v61 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  return v24;
}

void sub_208160818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

BOOL sub_20816087C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07A610;
  sub_207F1CB14(a1, (uint64_t)&v15);
  v11 = &off_24C07A610;
  sub_207F1CB14(a2, (uint64_t)&v12);
  v3 = sub_208160994((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208160964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_207F1B8C8((uint64_t)&a9);
  sub_207F1B8C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_208160980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_207F1B8C8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_208160994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v51 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v51, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v50 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 == *(_DWORD *)(a2 + 32))
      goto LABEL_36;
LABEL_72:
    v24 = 0;
    goto LABEL_73;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v50, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_72;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_72;
  v24 = 1;
  if (v22 && v23)
  {
    v25 = *(unsigned int *)(a1 + 40);
    v26 = *(unsigned int *)(a1 + 44);
    v27 = *(unsigned int *)(a2 + 40);
    v28 = *(unsigned int *)(a2 + 44);
    v29 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v29)
    {
      v30 = *(_QWORD *)(a1 + 8);
      v31 = *(std::__shared_weak_count **)(a1 + 16);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v29 = *(unsigned __int16 **)(a1 + 24);
    }
    v35 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v35)
    {
      v36 = *(_QWORD *)(a2 + 8);
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v35 = *(unsigned __int16 **)(a2 + 24);
    }
    v41 = v22 - 1;
    v42 = v23 - 1;
    if (v23 == 1)
    {
LABEL_65:
      if (v22 == 1)
      {
LABEL_71:
        v24 = *v29 == *v35;
        goto LABEL_73;
      }
      while (*v29 == *v35)
      {
        v29 += v25;
        v35 += v27;
        if (!--v41)
          goto LABEL_71;
      }
    }
    else if (v22 == 1)
    {
      while (*v29 == *v35)
      {
        v29 += v26;
        v35 += v28;
        if (!--v42)
          goto LABEL_71;
      }
    }
    else
    {
      v43 = 0;
LABEL_60:
      v44 = v35;
      v45 = v29;
      v46 = v22 - 1;
      while (*v45 == *v44)
      {
        v45 += v25;
        v44 += v27;
        if (!--v46)
        {
          if (*v45 != *v44)
            goto LABEL_72;
          v29 += v26;
          v35 += v28;
          if (++v43 != v42)
            goto LABEL_60;
          goto LABEL_65;
        }
      }
    }
    goto LABEL_72;
  }
LABEL_73:
  v47 = v50;
  v50 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v51;
  v51 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return v24;
}

void sub_208160DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

BOOL sub_208160E3C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C074A58;
  sub_207FBD778(a1, (uint64_t)&v15);
  v11 = &off_24C074A58;
  sub_207FBD778(a2, (uint64_t)&v12);
  v3 = sub_208160F54((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208160F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_207D79BA4((uint64_t)&a9);
  sub_207D79BA4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_208160F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_207D79BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_208160F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int16 *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  __int16 *v44;
  __int16 *v45;
  int v46;
  uint64_t v67;
  __int16 *v68;
  __int16 *v69;
  __int16 *v70;
  __int16 *v71;
  uint64_t v76;
  uint64_t v77;
  uint64_t v83;
  uint64_t v84;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v84 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v84, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v83 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_74;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v83, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_74;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_74;
  v24 = 1;
  if (!v22 || !v23)
  {
LABEL_75:
    v76 = v83;
    v83 = 0;
    if (!v76)
      goto LABEL_77;
    goto LABEL_76;
  }
  v25 = *(unsigned int *)(a1 + 40);
  v26 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 40);
  v28 = *(unsigned int *)(a2 + 44);
  v29 = *(__int16 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 48) && v29)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = *(std::__shared_weak_count **)(a1 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v29 = *(__int16 **)(a1 + 24);
  }
  v35 = *(__int16 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v35)
  {
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *(std::__shared_weak_count **)(a2 + 16);
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v35 = *(__int16 **)(a2 + 24);
  }
  v41 = v22 - 1;
  v42 = v23 - 1;
  if (v23 == 1)
  {
LABEL_65:
    if (v22 == 1)
      goto LABEL_81;
    while (1)
    {
      _H0 = *v29;
      _H1 = *v35;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
        break;
      v29 += v25;
      v35 += v27;
      if (!--v41)
        goto LABEL_81;
    }
LABEL_74:
    v24 = 0;
    goto LABEL_75;
  }
  if (v22 != 1)
  {
    v43 = 0;
LABEL_60:
    v44 = v35;
    v45 = v29;
    v46 = v22 - 1;
    while (1)
    {
      _H0 = *v45;
      _H1 = *v44;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
        goto LABEL_74;
      v45 += v25;
      v44 += v27;
      if (!--v46)
      {
        _H0 = *v45;
        _H1 = *v44;
        __asm
        {
          FCVT            S1, H1
          FCVT            S0, H0
        }
        if (_S0 != _S1)
          goto LABEL_74;
        v29 += v26;
        v35 += v28;
        if (++v43 != v42)
          goto LABEL_60;
        goto LABEL_65;
      }
    }
  }
  _H0 = *v29;
  _H1 = *v35;
  __asm
  {
    FCVT            S1, H1
    FCVT            S0, H0
  }
  if (_S0 != _S1)
    goto LABEL_74;
  v67 = 2 * (v23 - 2) + 2;
  v68 = (__int16 *)((char *)v29 + v67 * v26);
  v69 = (__int16 *)((char *)v35 + v67 * v28);
  v70 = &v35[v28];
  v71 = &v29[v26];
  v24 = 0;
  while (--v42)
  {
    _H0 = *v70;
    v70 += v28;
    _H1 = *v71;
    v71 += v26;
    __asm
    {
      FCVT            S0, H0
      FCVT            S1, H1
    }
    if (_S1 != _S0)
      goto LABEL_75;
  }
  v35 = v69;
  v29 = v68;
LABEL_81:
  _H0 = *v29;
  _H1 = *v35;
  __asm
  {
    FCVT            S1, H1
    FCVT            S0, H0
  }
  v24 = _S0 == _S1;
  v76 = v83;
  v83 = 0;
  if (v76)
LABEL_76:
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
LABEL_77:
  v77 = v84;
  v84 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v24;
}

void sub_208161410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

BOOL sub_208161474(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C073A50;
  sub_207FBDD2C(a1, (uint64_t)&v15);
  v11 = &off_24C073A50;
  sub_207FBDD2C(a2, (uint64_t)&v12);
  v3 = sub_20816158C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_207D59154((uint64_t)&a9);
  sub_207D59154((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_208161578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_207D59154((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20816158C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  float *v44;
  float *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v51 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v51, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v50 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 == *(_DWORD *)(a2 + 32))
      goto LABEL_36;
LABEL_72:
    v24 = 0;
    goto LABEL_73;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 49))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v50, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_72;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_72;
  v24 = 1;
  if (v22 && v23)
  {
    v25 = *(unsigned int *)(a1 + 40);
    v26 = *(unsigned int *)(a1 + 44);
    v27 = *(unsigned int *)(a2 + 40);
    v28 = *(unsigned int *)(a2 + 44);
    v29 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 48) && v29)
    {
      v30 = *(_QWORD *)(a1 + 8);
      v31 = *(std::__shared_weak_count **)(a1 + 16);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v30 + 88))(v30, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v29 = *(float **)(a1 + 24);
    }
    v35 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v35)
    {
      v36 = *(_QWORD *)(a2 + 8);
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v36 + 88))(v36, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v35 = *(float **)(a2 + 24);
    }
    v41 = v22 - 1;
    v42 = v23 - 1;
    if (v23 == 1)
    {
LABEL_65:
      if (v22 == 1)
      {
LABEL_71:
        v24 = *v29 == *v35;
        goto LABEL_73;
      }
      while (*v29 == *v35)
      {
        v29 += v25;
        v35 += v27;
        if (!--v41)
          goto LABEL_71;
      }
    }
    else if (v22 == 1)
    {
      while (*v29 == *v35)
      {
        v29 += v26;
        v35 += v28;
        if (!--v42)
          goto LABEL_71;
      }
    }
    else
    {
      v43 = 0;
LABEL_60:
      v44 = v35;
      v45 = v29;
      v46 = v22 - 1;
      while (*v45 == *v44)
      {
        v45 += v25;
        v44 += v27;
        if (!--v46)
        {
          if (*v45 != *v44)
            goto LABEL_72;
          v29 += v26;
          v35 += v28;
          if (++v43 != v42)
            goto LABEL_60;
          goto LABEL_65;
        }
      }
    }
    goto LABEL_72;
  }
LABEL_73:
  v47 = v50;
  v50 = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = v51;
  v51 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return v24;
}

void sub_2081619D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208161A34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = off_24C06EE50;
  sub_207CAD328(a1, (uint64_t)&v15);
  v11 = off_24C06EE50;
  sub_207CAD328(a2, (uint64_t)&v12);
  v3 = sub_208161B4C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208161B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207CAD1A0((uint64_t)&a9);
  sub_207CAD1A0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208161B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207CAD1A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208161B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_208162238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816229C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07BDB8;
  sub_207FBE45C(a1, (uint64_t)&v15);
  v11 = &off_24C07BDB8;
  sub_207FBE45C(a2, (uint64_t)&v12);
  v3 = sub_2081623B4((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208162384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FBE2E0((uint64_t)&a9);
  sub_207FBE2E0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2081623A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FBE2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081623B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208162A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208162AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07BEB0;
  sub_207FBEC10(a1, (uint64_t)&v15);
  v11 = &off_24C07BEB0;
  sub_207FBEC10(a2, (uint64_t)&v12);
  v3 = sub_208162BC8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208162B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FBEA94((uint64_t)&a9);
  sub_207FBEA94((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208162BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FBEA94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208162BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20816338C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081633F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07BFA8;
  sub_207FBF3C4(a1, (uint64_t)&v15);
  v11 = &off_24C07BFA8;
  sub_207FBF3C4(a2, (uint64_t)&v12);
  v3 = sub_208163508((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_2081634D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FBF248((uint64_t)&a9);
  sub_207FBF248((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2081634F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FBF248((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208163508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208163BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208163C04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C0A0;
  sub_207FBFB74(a1, (uint64_t)&v15);
  v11 = &off_24C07C0A0;
  sub_207FBFB74(a2, (uint64_t)&v12);
  v3 = sub_208163D1C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208163CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FBF9FC((uint64_t)&a9);
  sub_207FBF9FC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208163D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FBF9FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208163D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_208164408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816446C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C198;
  sub_207FC0324(a1, (uint64_t)&v15);
  v11 = &off_24C07C198;
  sub_207FC0324(a2, (uint64_t)&v12);
  v3 = sub_208164584((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208164554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC01A8((uint64_t)&a9);
  sub_207FC01A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208164570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC01A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208164584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208164C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208164C80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C290;
  sub_207FC0AD8(a1, (uint64_t)&v15);
  v11 = &off_24C07C290;
  sub_207FC0AD8(a2, (uint64_t)&v12);
  v3 = sub_208164D98((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208164D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC095C((uint64_t)&a9);
  sub_207FC095C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208164D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC095C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208164D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20816555C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081655C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C388;
  sub_207FC128C(a1, (uint64_t)&v15);
  v11 = &off_24C07C388;
  sub_207FC128C(a2, (uint64_t)&v12);
  v3 = sub_2081656D8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_2081656A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC1110((uint64_t)&a9);
  sub_207FC1110((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2081656C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC1110((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081656D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208165D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208165DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C480;
  sub_207FC1A3C(a1, (uint64_t)&v15);
  v11 = &off_24C07C480;
  sub_207FC1A3C(a2, (uint64_t)&v12);
  v3 = sub_208165EEC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208165EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC18C4((uint64_t)&a9);
  sub_207FC18C4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208165ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC18C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208165EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_2081665D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816663C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C578;
  sub_207FC21EC(a1, (uint64_t)&v15);
  v11 = &off_24C07C578;
  sub_207FC21EC(a2, (uint64_t)&v12);
  v3 = sub_208166754((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208166724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC2070((uint64_t)&a9);
  sub_207FC2070((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208166740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC2070((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208166754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208166DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208166E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C670;
  sub_207FC29A0(a1, (uint64_t)&v15);
  v11 = &off_24C07C670;
  sub_207FC29A0(a2, (uint64_t)&v12);
  v3 = sub_208166F68((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208166F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC2824((uint64_t)&a9);
  sub_207FC2824((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208166F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC2824((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208166F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20816772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208167790(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C768;
  sub_207FC3154(a1, (uint64_t)&v15);
  v11 = &off_24C07C768;
  sub_207FC3154(a2, (uint64_t)&v12);
  v3 = sub_2081678A8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208167878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC2FD8((uint64_t)&a9);
  sub_207FC2FD8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208167894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC2FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081678A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208167F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208167FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C860;
  sub_207FC3904(a1, (uint64_t)&v15);
  v11 = &off_24C07C860;
  sub_207FC3904(a2, (uint64_t)&v12);
  v3 = sub_2081680BC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC378C((uint64_t)&a9);
  sub_207FC378C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2081680A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC378C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081680BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_2081687A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816880C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07C958;
  sub_207FC40B4(a1, (uint64_t)&v15);
  v11 = &off_24C07C958;
  sub_207FC40B4(a2, (uint64_t)&v12);
  v3 = sub_208168924((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_2081688F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC3F38((uint64_t)&a9);
  sub_207FC3F38((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208168910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC3F38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208168924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208168FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208169020(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07CA50;
  sub_207FC4868(a1, (uint64_t)&v15);
  v11 = &off_24C07CA50;
  sub_207FC4868(a2, (uint64_t)&v12);
  v3 = sub_208169138((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208169108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC46EC((uint64_t)&a9);
  sub_207FC46EC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208169124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC46EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208169138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_2081698FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208169960(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07CB48;
  sub_207FC501C(a1, (uint64_t)&v15);
  v11 = &off_24C07CB48;
  sub_207FC501C(a2, (uint64_t)&v12);
  v3 = sub_208169A78((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208169A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC4EA0((uint64_t)&a9);
  sub_207FC4EA0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208169A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC4EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208169A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20816A110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816A174(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07A708;
  sub_207F1D2D0(a1, (uint64_t)&v15);
  v11 = &off_24C07A708;
  sub_207F1D2D0(a2, (uint64_t)&v12);
  v3 = sub_20816A28C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207F1B930((uint64_t)&a9);
  sub_207F1B930((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816A278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207F1B930((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816A28C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20816A978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816A9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07CC40;
  sub_207FC57D0(a1, (uint64_t)&v15);
  v11 = &off_24C07CC40;
  sub_207FC57D0(a2, (uint64_t)&v12);
  v3 = sub_20816AAF4((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816AAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC5654((uint64_t)&a9);
  sub_207FC5654((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816AAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC5654((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816AAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20816B18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816B1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07CD38;
  sub_207FC5F84(a1, (uint64_t)&v15);
  v11 = &off_24C07CD38;
  sub_207FC5F84(a2, (uint64_t)&v12);
  v3 = sub_20816B308((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816B2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC5E08((uint64_t)&a9);
  sub_207FC5E08((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816B2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC5E08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816B308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20816BACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816BB30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07CE30;
  sub_207FC6738(a1, (uint64_t)&v15);
  v11 = &off_24C07CE30;
  sub_207FC6738(a2, (uint64_t)&v12);
  v3 = sub_20816BC48((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC65BC((uint64_t)&a9);
  sub_207FC65BC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC65BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816BC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20816C2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816C344(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07CF28;
  sub_207FC6EE8(a1, (uint64_t)&v15);
  v11 = &off_24C07CF28;
  sub_207FC6EE8(a2, (uint64_t)&v12);
  v3 = sub_20816C45C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816C42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC6D70((uint64_t)&a9);
  sub_207FC6D70((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC6D70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816C45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20816CB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816CBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D020;
  sub_207FC7698(a1, (uint64_t)&v15);
  v11 = &off_24C07D020;
  sub_207FC7698(a2, (uint64_t)&v12);
  v3 = sub_20816CCC4((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816CC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC751C((uint64_t)&a9);
  sub_207FC751C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816CCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC751C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816CCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20816D35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816D3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D118;
  sub_207FC7E4C(a1, (uint64_t)&v15);
  v11 = &off_24C07D118;
  sub_207FC7E4C(a2, (uint64_t)&v12);
  v3 = sub_20816D4D8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816D4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC7CD0((uint64_t)&a9);
  sub_207FC7CD0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816D4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC7CD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816D4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20816DC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816DD00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D210;
  sub_207FC8600(a1, (uint64_t)&v15);
  v11 = &off_24C07D210;
  sub_207FC8600(a2, (uint64_t)&v12);
  v3 = sub_20816DE18((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816DDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC8484((uint64_t)&a9);
  sub_207FC8484((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816DE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC8484((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816DE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20816E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816E514(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D308;
  sub_207FC8DB0(a1, (uint64_t)&v15);
  v11 = &off_24C07D308;
  sub_207FC8DB0(a2, (uint64_t)&v12);
  v3 = sub_20816E62C((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC8C38((uint64_t)&a9);
  sub_207FC8C38((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816E618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC8C38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816E62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_20816ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816ED7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D400;
  sub_207FC9560(a1, (uint64_t)&v15);
  v11 = &off_24C07D400;
  sub_207FC9560(a2, (uint64_t)&v12);
  v3 = sub_20816EE94((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC93E4((uint64_t)&a9);
  sub_207FC93E4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816EE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC93E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816EE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_20816F52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816F590(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D4F8;
  sub_207FC9D14(a1, (uint64_t)&v15);
  v11 = &off_24C07D4F8;
  sub_207FC9D14(a2, (uint64_t)&v12);
  v3 = sub_20816F6A8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816F678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FC9B98((uint64_t)&a9);
  sub_207FC9B98((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816F694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC9B98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816F6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20816FE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20816FED0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D5F0;
  sub_207FCA4C8(a1, (uint64_t)&v15);
  v11 = &off_24C07D5F0;
  sub_207FCA4C8(a2, (uint64_t)&v12);
  v3 = sub_20816FFE8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20816FFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCA34C((uint64_t)&a9);
  sub_207FCA34C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20816FFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCA34C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20816FFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208170680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081706E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D6E8;
  sub_207FCAC78(a1, (uint64_t)&v15);
  v11 = &off_24C07D6E8;
  sub_207FCAC78(a2, (uint64_t)&v12);
  v3 = sub_2081707FC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_2081707CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCAB00((uint64_t)&a9);
  sub_207FCAB00((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2081707E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCAB00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081707FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_208170EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208170F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D7E0;
  sub_207FCB428(a1, (uint64_t)&v15);
  v11 = &off_24C07D7E0;
  sub_207FCB428(a2, (uint64_t)&v12);
  v3 = sub_208171064((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208171034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCB2AC((uint64_t)&a9);
  sub_207FCB2AC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208171050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCB2AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208171064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_2081716FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208171760(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D8D8;
  sub_207FCBBDC(a1, (uint64_t)&v15);
  v11 = &off_24C07D8D8;
  sub_207FCBBDC(a2, (uint64_t)&v12);
  v3 = sub_208171878((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208171848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCBA60((uint64_t)&a9);
  sub_207FCBA60((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208171864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCBA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208171878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20817203C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081720A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07D9D0;
  sub_207FCC390(a1, (uint64_t)&v15);
  v11 = &off_24C07D9D0;
  sub_207FCC390(a2, (uint64_t)&v12);
  v3 = sub_2081721B8((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208172188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCC214((uint64_t)&a9);
  sub_207FCC214((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2081721A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCC214((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081721B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208172850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081728B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07DAC8;
  sub_207FCCB40(a1, (uint64_t)&v15);
  v11 = &off_24C07DAC8;
  sub_207FCCB40(a2, (uint64_t)&v12);
  v3 = sub_2081729CC((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_20817299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCC9C8((uint64_t)&a9);
  sub_207FCC9C8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2081729B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCC9C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081729CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v95 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v95, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v94 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_124;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v94, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_124;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_124;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_124;
  if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 60))
  {
    if (!*(_DWORD *)(a2 + 56))
    {
      v62 = 1;
      goto LABEL_125;
    }
    v61 = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_85;
  }
  v25 = *(unsigned int *)(a1 + 44);
  v27 = *(unsigned int *)(a2 + 44);
  v26 = *(unsigned int *)(a2 + 48);
  v92 = *(unsigned int *)(a1 + 52);
  v93 = *(unsigned int *)(a1 + 48);
  v91 = *(unsigned int *)(a2 + 52);
  v28 = *(unsigned __int8 **)(a1 + 24);
  if (*(_BYTE *)(a1 + 72) && v28)
  {
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v28 = *(unsigned __int8 **)(a1 + 24);
  }
  v34 = *(unsigned __int8 **)(a2 + 24);
  if (*(_BYTE *)(a2 + 72) && v34)
  {
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *(std::__shared_weak_count **)(a2 + 16);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(unsigned __int8 **)(a2 + 24);
  }
  v40 = v22 - 1;
  v41 = v23 - 1;
  v42 = v24 - 1;
  if (v24 != 1)
  {
    if (v23 != 1)
    {
      v43 = 0;
      if (v22 == 1)
      {
        v68 = v93;
        v69 = (v24 - 2) + 1;
        v70 = &v28[v69 * v92];
        v71 = &v34[v69 * v91];
        while (*v28 == *v34)
        {
          v72 = v23 - 1;
          v73 = v93;
          v74 = v26;
          while (--v72)
          {
            v62 = 0;
            v75 = v34[v74];
            v74 += v26;
            v76 = v28[v73];
            v73 += v93;
            if (v76 != v75)
              goto LABEL_125;
          }
          if (v28[v93 * (unint64_t)v41] != v34[v26 * (unint64_t)v41])
            break;
          v28 += v92;
          v34 += v91;
          if (++v43 == v42)
            goto LABEL_114;
        }
      }
      else
      {
        v44 = (v24 - 2) + 1;
        v45 = &v28[v44 * v92];
        v46 = &v34[v44 * v91];
LABEL_62:
        v47 = 0;
        v48 = v34;
        v49 = v28;
LABEL_63:
        v50 = v22 - 1;
        v51 = v49;
        v52 = v48;
        while (*v51 == *v52)
        {
          v51 += v25;
          v52 += v27;
          if (!--v50)
          {
            if (*v51 != *v52)
              goto LABEL_124;
            v49 += v93;
            v48 += v26;
            if (++v47 == v41)
            {
              v53 = v22 - 1;
              while (*v49 == *v48)
              {
                v49 += v25;
                v48 += v27;
                if (!--v53)
                {
                  if (*v49 != *v48)
                    goto LABEL_124;
                  v28 += v92;
                  v34 += v91;
                  if (++v43 == v42)
                  {
                    v28 = v45;
                    v34 = v46;
                    goto LABEL_74;
                  }
                  goto LABEL_62;
                }
              }
              goto LABEL_124;
            }
            goto LABEL_63;
          }
        }
      }
      goto LABEL_124;
    }
    if (v22 != 1)
    {
      v63 = 0;
      v64 = (v24 - 2) + 1;
      v56 = &v28[v64 * v92];
      v57 = &v34[v64 * v91];
LABEL_91:
      v65 = v22 - 1;
      v66 = v28;
      v67 = v34;
      while (*v66 == *v67)
      {
        v66 += v25;
        v67 += v27;
        if (!--v65)
        {
          if (*v66 != *v67)
            goto LABEL_124;
          v28 += v92;
          v34 += v91;
          if (++v63 != v42)
            goto LABEL_91;
          goto LABEL_107;
        }
      }
      goto LABEL_124;
    }
    if (*v28 == *v34)
    {
      v56 = &v28[v92 * (unint64_t)v42];
      v84 = &v34[v91];
      v85 = &v28[v92];
      v57 = &v34[v91 * (unint64_t)v42];
      while (--v42)
      {
        v62 = 0;
        v86 = *v84;
        v84 += v91;
        v87 = *v85;
        v85 += v92;
        if (v87 != v86)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
LABEL_124:
    v62 = 0;
    goto LABEL_125;
  }
LABEL_74:
  if (v23 != 1)
  {
    if (v22 == 1)
    {
      v70 = v28;
      v71 = v34;
      v68 = v93;
LABEL_114:
      if (*v70 != *v71)
        goto LABEL_124;
      v56 = &v70[v68 * (unint64_t)v41];
      v80 = &v71[v26];
      v81 = &v70[v68];
      v57 = &v71[v26 * (unint64_t)v41];
      while (--v41)
      {
        v62 = 0;
        v82 = *v80;
        v80 += v26;
        v83 = *v81;
        v81 += v68;
        if (v83 != v82)
          goto LABEL_125;
      }
      goto LABEL_112;
    }
    v54 = 0;
    v55 = (v23 - 2) + 1;
    v56 = &v28[v55 * v93];
    v57 = &v34[v55 * v26];
LABEL_77:
    v58 = v22 - 1;
    v59 = v28;
    v60 = v34;
    while (*v59 == *v60)
    {
      v59 += v25;
      v60 += v27;
      if (!--v58)
      {
        if (*v59 != *v60)
          goto LABEL_124;
        v28 += v93;
        v34 += v26;
        if (++v54 != v41)
          goto LABEL_77;
        goto LABEL_107;
      }
    }
    goto LABEL_124;
  }
  v56 = v28;
  v57 = v34;
LABEL_107:
  if (v22 != 1)
  {
    v77 = (v22 - 2) + 1;
    v78 = &v56[v77 * v25];
    v79 = &v57[v77 * v27];
    while (*v56 == *v57)
    {
      v56 += v25;
      v57 += v27;
      if (!--v40)
      {
        v57 = v79;
        v56 = v78;
        goto LABEL_112;
      }
    }
    goto LABEL_124;
  }
LABEL_112:
  v61 = *v56 == *v57;
LABEL_85:
  v62 = v61;
LABEL_125:
  v88 = v94;
  v94 = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = v95;
  v95 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  return v62;
}

void sub_2081730B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20817311C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07DBC0;
  sub_207FCD2F0(a1, (uint64_t)&v15);
  v11 = &off_24C07DBC0;
  sub_207FCD2F0(a2, (uint64_t)&v12);
  v3 = sub_208173234((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208173204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCD174((uint64_t)&a9);
  sub_207FCD174((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208173220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCD174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208173234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  int v52;
  unsigned __int16 *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned __int16 *v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(unsigned __int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(unsigned __int16 **)(a1 + 24);
    }
    v34 = *(unsigned __int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(unsigned __int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 2 * v27;
        v44 = v25;
        v45 = 2 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (unsigned __int16 *)((char *)v75 + v44 * 2);
            v74 = (unsigned __int16 *)((char *)v74 + v46 * 2);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (unsigned __int16 *)((char *)v28 + v43);
                v34 = (unsigned __int16 *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v81;
          v49 = 2 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (unsigned __int16 *)((char *)v60 + v48);
            v59 = (unsigned __int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (unsigned __int16 *)((char *)v56 + v44 * 2);
              v55 = (unsigned __int16 *)((char *)v55 + v46 * 2);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (unsigned __int16 *)((char *)v57 + v48);
                  v58 = (unsigned __int16 *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (unsigned __int16 *)((char *)v28 + v43);
                    v34 = (unsigned __int16 *)((char *)v34 + v45);
                    ++v47;
                    v50 = (unsigned __int16 *)((char *)v50 + v43);
                    v51 = (unsigned __int16 *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_2081738CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208173930(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07DCB8;
  sub_207FCDAA4(a1, (uint64_t)&v15);
  v11 = &off_24C07DCB8;
  sub_207FCDAA4(a2, (uint64_t)&v12);
  v3 = sub_208173A48((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208173A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCD928((uint64_t)&a9);
  sub_207FCD928((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208173A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCD928((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208173A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 *v51;
  int v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  __int16 *v59;
  __int16 *v60;
  int v61;
  int v73;
  int v82;
  __int16 *v83;
  __int16 *v84;
  int v85;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int16 *v98;
  __int16 *v99;
  int v100;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v135;
  __int16 *v136;
  __int16 *v137;
  __int16 *v138;
  __int16 *v139;
  uint64_t v148;
  __int16 *v149;
  __int16 *v150;
  __int16 *v151;
  __int16 *v152;
  uint64_t v157;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v167 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v167, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
LABEL_35:
    v166 = 0;
    v22 = *(_DWORD *)(a1 + 32);
    if (v22 != *(_DWORD *)(a2 + 32))
      goto LABEL_115;
    goto LABEL_36;
  }
LABEL_19:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_31;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v13 = *(_QWORD *)(a2 + 8);
    v18 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v18)
      goto LABEL_31;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(_BYTE *)(a2 + 73))
    goto LABEL_35;
LABEL_32:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v166, v13, 0);
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_115;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_115;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_115;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v26 = *(unsigned int *)(a2 + 48);
    v164 = *(unsigned int *)(a2 + 44);
    v165 = *(unsigned int *)(a1 + 44);
    v163 = *(unsigned int *)(a1 + 52);
    v27 = *(unsigned int *)(a2 + 52);
    v28 = *(__int16 **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(__int16 **)(a1 + 24);
    }
    v34 = *(__int16 **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(__int16 **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 != 1)
      {
        v43 = 2 * v27;
        v44 = v26;
        v45 = 2 * v163;
        v46 = v25;
        if (v22 == 1)
        {
          v113 = 2 * (v23 - 2) + 2;
          v114 = v113 * v25;
          v115 = v113 * v26;
          while (1)
          {
            _H0 = *v28;
            _H1 = *v34;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v120 = v23 - 1;
            v121 = 2 * v25;
            v122 = 2 * v26;
            while (--v120)
            {
              v95 = 0;
              _H0 = *(__int16 *)((char *)v34 + v122);
              v122 += v44 * 2;
              _H1 = *(__int16 *)((char *)v28 + v121);
              v121 += v46 * 2;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              if (_S1 != _S0)
                goto LABEL_116;
            }
            _H0 = *(__int16 *)((char *)v28 + v114);
            _H1 = *(__int16 *)((char *)v34 + v115);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v28 = (__int16 *)((char *)v28 + v45);
            v34 = (__int16 *)((char *)v34 + v43);
            if (++v40 == v42)
              goto LABEL_105;
          }
        }
        else
        {
          v47 = 0;
          v48 = 2 * v165;
          v49 = 2 * v164;
          v50 = &v28[v46];
          v51 = &v34[v44];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (1)
          {
            _H0 = *v60;
            _H1 = *v59;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              break;
            v60 = (__int16 *)((char *)v60 + v48);
            v59 = (__int16 *)((char *)v59 + v49);
            if (!--v61)
            {
              _H0 = *v60;
              _H1 = *v59;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              if (_S0 != _S1)
                goto LABEL_115;
              v56 = (__int16 *)((char *)v56 + v46 * 2);
              v55 = (__int16 *)((char *)v55 + v44 * 2);
              ++v52;
              v54 = &v57[v46];
              v53 = &v58[v44];
              if (v52 == v41)
              {
                v73 = v22 - 1;
                while (1)
                {
                  _H0 = *v57;
                  _H1 = *v58;
                  __asm
                  {
                    FCVT            S1, H1
                    FCVT            S0, H0
                  }
                  if (_S0 != _S1)
                    goto LABEL_115;
                  v57 = (__int16 *)((char *)v57 + v48);
                  v58 = (__int16 *)((char *)v58 + v49);
                  if (!--v73)
                  {
                    _H0 = *v57;
                    _H1 = *v58;
                    __asm
                    {
                      FCVT            S1, H1
                      FCVT            S0, H0
                    }
                    if (_S0 != _S1)
                      goto LABEL_115;
                    v28 = (__int16 *)((char *)v28 + v45);
                    v34 = (__int16 *)((char *)v34 + v43);
                    ++v47;
                    v50 = (__int16 *)((char *)v50 + v45);
                    v51 = (__int16 *)((char *)v51 + v43);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
              }
              goto LABEL_63;
            }
          }
        }
        goto LABEL_115;
      }
      if (v22 != 1)
      {
        v97 = 0;
LABEL_88:
        v98 = v34;
        v99 = v28;
        v100 = v22 - 1;
        while (1)
        {
          _H0 = *v99;
          _H1 = *v98;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v99 += v165;
          v98 += v164;
          if (!--v100)
          {
            _H0 = *v99;
            _H1 = *v98;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v163;
            v34 += v27;
            if (++v97 != v42)
              goto LABEL_88;
            goto LABEL_93;
          }
        }
      }
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v148 = 2 * (v24 - 2) + 2;
        v149 = (__int16 *)((char *)v28 + v148 * v163);
        v150 = (__int16 *)((char *)v34 + v148 * v27);
        v151 = &v34[v27];
        v152 = &v28[v163];
        v95 = 0;
        while (--v42)
        {
          _H0 = *v151;
          v151 += v27;
          _H1 = *v152;
          v152 += v163;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S1 != _S0)
            goto LABEL_116;
        }
        v34 = v150;
        v28 = v149;
        goto LABEL_123;
      }
      goto LABEL_115;
    }
LABEL_73:
    if (v23 == 1)
    {
LABEL_93:
      if (v22 != 1)
      {
        do
        {
          _H0 = *v28;
          _H1 = *v34;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v28 += v165;
          v34 += v164;
        }
        while (--v40);
      }
    }
    else
    {
      if (v22 != 1)
      {
        v82 = 0;
LABEL_76:
        v83 = v34;
        v84 = v28;
        v85 = v22 - 1;
        while (1)
        {
          _H0 = *v84;
          _H1 = *v83;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          if (_S0 != _S1)
            goto LABEL_115;
          v84 += v165;
          v83 += v164;
          if (!--v85)
          {
            _H0 = *v84;
            _H1 = *v83;
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 != _S1)
              goto LABEL_115;
            v28 += v25;
            v34 += v26;
            if (++v82 != v41)
              goto LABEL_76;
            goto LABEL_93;
          }
        }
      }
LABEL_105:
      _H0 = *v28;
      _H1 = *v34;
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 != _S1)
      {
LABEL_115:
        v95 = 0;
LABEL_116:
        v96 = v166;
        v166 = 0;
        if (v96)
          goto LABEL_117;
        goto LABEL_118;
      }
      v135 = 2 * (v23 - 2) + 2;
      v136 = (__int16 *)((char *)v28 + v135 * v25);
      v137 = (__int16 *)((char *)v34 + v135 * v26);
      v138 = &v34[v26];
      v139 = &v28[v25];
      v95 = 0;
      while (--v41)
      {
        _H0 = *v138;
        v138 += v26;
        _H1 = *v139;
        v139 += v25;
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
        }
        if (_S1 != _S0)
          goto LABEL_116;
      }
      v34 = v137;
      v28 = v136;
    }
LABEL_123:
    _H0 = *v28;
    _H1 = *v34;
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _ZF = _S0 == _S1;
LABEL_124:
    v95 = _ZF;
    v96 = v166;
    v166 = 0;
    if (!v96)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    _ZF = *(_DWORD *)(a2 + 60) == 0;
    goto LABEL_124;
  }
  v95 = 1;
  v96 = v166;
  v166 = 0;
  if (v96)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
LABEL_118:
  v157 = v167;
  v167 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  return v95;
}

void sub_20817420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208174270(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t (**v11)();
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_24C07DDB0;
  sub_207FCE258(a1, (uint64_t)&v15);
  v11 = &off_24C07DDB0;
  sub_207FCE258(a2, (uint64_t)&v12);
  v3 = sub_208174388((uint64_t)&v14, (uint64_t)&v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (!v16)
    return v3;
  v8 = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_208174358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207FCE0DC((uint64_t)&a9);
  sub_207FCE0DC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_208174374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FCE0DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208174388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float *v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float *v60;
  int v61;
  int v62;
  int v63;
  float *v64;
  float *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float *v71;
  float *v72;
  int v73;
  float *v74;
  float *v75;
  int v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 73))
      goto LABEL_15;
LABEL_18:
    v83 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_35;
LABEL_19:
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v14)
      goto LABEL_31;
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (v17)
    {
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v13 = *(_QWORD *)(a2 + 8);
      v18 = *(std::__shared_weak_count **)(a2 + 16);
      if (!v18)
        goto LABEL_31;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!*(_BYTE *)(a2 + 73))
        goto LABEL_35;
LABEL_32:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v82, v13, 0);
      v22 = *(_DWORD *)(a1 + 32);
      if (v22 != *(_DWORD *)(a2 + 32))
        goto LABEL_102;
      goto LABEL_36;
    }
LABEL_31:
    if (!*(_BYTE *)(a2 + 73))
      goto LABEL_35;
    goto LABEL_32;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 73))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v83, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
    goto LABEL_19;
LABEL_35:
  v82 = 0;
  v22 = *(_DWORD *)(a1 + 32);
  if (v22 != *(_DWORD *)(a2 + 32))
    goto LABEL_102;
LABEL_36:
  v23 = *(_DWORD *)(a1 + 36);
  if (v23 != *(_DWORD *)(a2 + 36))
    goto LABEL_102;
  v24 = *(_DWORD *)(a1 + 40);
  if (v24 != *(_DWORD *)(a2 + 40))
    goto LABEL_102;
  if (*(_DWORD *)(a1 + 56) && *(_DWORD *)(a1 + 60))
  {
    v25 = *(unsigned int *)(a1 + 48);
    v80 = *(unsigned int *)(a2 + 44);
    v81 = *(unsigned int *)(a1 + 44);
    v26 = *(unsigned int *)(a2 + 52);
    v79 = *(unsigned int *)(a2 + 48);
    v27 = *(unsigned int *)(a1 + 52);
    v28 = *(float **)(a1 + 24);
    if (*(_BYTE *)(a1 + 72) && v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = *(std::__shared_weak_count **)(a1 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v29 + 88))(v29, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v28 = *(float **)(a1 + 24);
    }
    v34 = *(float **)(a2 + 24);
    if (*(_BYTE *)(a2 + 72) && v34)
    {
      v35 = *(_QWORD *)(a2 + 8);
      v36 = *(std::__shared_weak_count **)(a2 + 16);
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v35 + 88))(v35, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v34 = *(float **)(a2 + 24);
    }
    v40 = v22 - 1;
    v41 = v23 - 1;
    v42 = v24 - 1;
    if (v24 != 1)
    {
      if (v23 == 1)
      {
        if (v22 == 1)
        {
          while (*v28 == *v34)
          {
            v28 += v27;
            v34 += v26;
            if (!--v42)
              goto LABEL_112;
          }
        }
        else
        {
          v70 = 0;
LABEL_88:
          v71 = v34;
          v72 = v28;
          v73 = v22 - 1;
          while (*v72 == *v71)
          {
            v72 += v81;
            v71 += v80;
            if (!--v73)
            {
              if (*v72 != *v71)
                break;
              v28 += v27;
              v34 += v26;
              if (++v70 != v42)
                goto LABEL_88;
              goto LABEL_93;
            }
          }
        }
      }
      else
      {
        v43 = 4 * v27;
        v44 = v25;
        v45 = 4 * v26;
        v46 = v79;
        if (v22 == 1)
        {
LABEL_98:
          v74 = v34;
          v75 = v28;
          v76 = v23 - 1;
          while (*v75 == *v74)
          {
            v75 = (float *)((char *)v75 + v44 * 4);
            v74 = (float *)((char *)v74 + v46 * 4);
            if (!--v76)
            {
              if (*v75 == *v74)
              {
                v28 = (float *)((char *)v28 + v43);
                v34 = (float *)((char *)v34 + v45);
                if (++v40 != v42)
                  goto LABEL_98;
LABEL_107:
                while (*v28 == *v34)
                {
                  v28 += v25;
                  v34 += v79;
                  if (!--v41)
                    goto LABEL_112;
                }
              }
              break;
            }
          }
        }
        else
        {
          v47 = 0;
          v48 = 4 * v81;
          v49 = 4 * v80;
          v50 = &v28[v44];
          v51 = &v34[v46];
LABEL_62:
          v52 = 0;
          v53 = v51;
          v54 = v50;
          v55 = v34;
          v56 = v28;
LABEL_63:
          v57 = v54;
          v58 = v53;
          v59 = v55;
          v60 = v56;
          v61 = v22 - 1;
          while (*v60 == *v59)
          {
            v60 = (float *)((char *)v60 + v48);
            v59 = (float *)((char *)v59 + v49);
            if (!--v61)
            {
              if (*v60 != *v59)
                break;
              v56 = (float *)((char *)v56 + v44 * 4);
              v55 = (float *)((char *)v55 + v46 * 4);
              ++v52;
              v54 = &v57[v44];
              v53 = &v58[v46];
              if (v52 == v41)
              {
                v62 = v22 - 1;
                while (*v57 == *v58)
                {
                  v57 = (float *)((char *)v57 + v48);
                  v58 = (float *)((char *)v58 + v49);
                  if (!--v62)
                  {
                    if (*v57 != *v58)
                      goto LABEL_102;
                    v28 = (float *)((char *)v28 + v43);
                    v34 = (float *)((char *)v34 + v45);
                    ++v47;
                    v50 = (float *)((char *)v50 + v43);
                    v51 = (float *)((char *)v51 + v45);
                    if (v47 != v42)
                      goto LABEL_62;
                    goto LABEL_73;
                  }
                }
                break;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_102:
      v68 = 0;
      v69 = v82;
      v82 = 0;
      if (!v69)
        goto LABEL_104;
      goto LABEL_103;
    }
LABEL_73:
    if (v23 != 1)
    {
      if (v22 == 1)
        goto LABEL_107;
      v63 = 0;
LABEL_76:
      v64 = v34;
      v65 = v28;
      v66 = v22 - 1;
      while (*v65 == *v64)
      {
        v65 += v81;
        v64 += v80;
        if (!--v66)
        {
          if (*v65 != *v64)
            goto LABEL_102;
          v28 += v25;
          v34 += v79;
          if (++v63 != v41)
            goto LABEL_76;
          goto LABEL_93;
        }
      }
      goto LABEL_102;
    }
LABEL_93:
    if (v22 != 1)
    {
      while (*v28 == *v34)
      {
        v28 += v81;
        v34 += v80;
        if (!--v40)
          goto LABEL_112;
      }
      goto LABEL_102;
    }
LABEL_112:
    v67 = *v28 == *v34;
    goto LABEL_113;
  }
  if (*(_DWORD *)(a2 + 56))
  {
    v67 = *(_DWORD *)(a2 + 60) == 0;
LABEL_113:
    v68 = v67;
    v69 = v82;
    v82 = 0;
    if (!v69)
      goto LABEL_104;
    goto LABEL_103;
  }
  v68 = 1;
  v69 = v82;
  v82 = 0;
  if (v69)
LABEL_103:
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
LABEL_104:
  v77 = v83;
  v83 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  return v68;
}

void sub_208174A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
    v15 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_208174A84(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  char **v3;
  const char *v4;
  uint64_t v5;

  v2 = *a2;
  if (v2 >= 0x29)
  {
    sub_207CBAB98(a1, (uint64_t)"Invalid Format (", 16);
    a1 = (_QWORD *)std::ostream::operator<<();
    v4 = ")";
    v5 = 1;
  }
  else
  {
    v3 = &(&off_24C08A7B8)[2 * v2];
    v4 = *v3;
    v5 = (uint64_t)v3[1];
  }
  return sub_207CBAB98(a1, (uint64_t)v4, v5);
}

BOOL sub_208174AE8(uint64_t a1)
{
  uint64_t v1;
  char v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t (**v12)();
  uint64_t *v13;
  std::__shared_weak_count *v14;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!v2)
  {
    v4 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_11;
  }
  v13 = 0;
  v14 = 0;
  v12 = &off_24C08D790;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v1 + 56))(v1, &v12);
  if (!v13)
  {
    v4 = 0;
    v12 = &off_24C08D790;
    v8 = v14;
    if (!v14)
      return v4 != 0;
    goto LABEL_12;
  }
  v4 = *v13;
  v3 = (std::__shared_weak_count *)v13[1];
  if (!v3)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_11:
    v12 = &off_24C08D790;
    v8 = v14;
    if (!v14)
      return v4 != 0;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v12 = &off_24C08D790;
  v8 = v14;
  if (!v14)
    return v4 != 0;
LABEL_12:
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v4 != 0;
}

void sub_208174C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208174C18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = &off_24C08D790;
  if (v4)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 56))(result, a2);
  return result;
}

void sub_208174C84(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_2081DE77C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_208174C98(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208174D00(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208174D68()
{
  return 5;
}

uint64_t sub_208174D70(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208174D78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208174D8C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_208174E10()
{
  return 5;
}

__int128 *sub_208174E1C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F6D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452F6D0))
  {
    v2 = sub_208174EF4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452F6B8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452F6C8 = *((_QWORD *)v2 + 2);
      xmmword_25452F6B8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F6B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F6D0);
  }
  if (byte_25452F6CF >= 0)
    return &xmmword_25452F6B8;
  else
    return (__int128 *)xmmword_25452F6B8;
}

void sub_208174EDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F6D0);
  _Unwind_Resume(a1);
}

__int128 *sub_208174EF4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F6F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F6F0))
    return &xmmword_25452F6D8;
  v2 = sub_208174FD0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F6D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F6E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F6D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F6D8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F6F0);
  return &xmmword_25452F6D8;
}

void sub_208174FB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F6F0);
  _Unwind_Resume(a1);
}

std::string *sub_208174FD0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F710);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F710))
    return &stru_25452F6F8;
  sub_2081750C0((uint64_t)__p);
  sub_2080FE9C4((char *)__p, &stru_25452F6F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F6F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F710);
  return &stru_25452F6F8;
}

void sub_208175080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F710);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F710);
  _Unwind_Resume(a1);
}

void sub_2081750C0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F730);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F730))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two8u>]", qword_25452F718);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F718, &dword_207C77000);
    __cxa_guard_release(&qword_25452F730);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F750);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F750))
  {
    v5 = sub_207D49434(qword_25452F718, "<", 0);
    sub_207D49330(qword_25452F718, 0, v5, qword_25452F738);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F738, &dword_207C77000);
    __cxa_guard_release(&qword_25452F750);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F770);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F770))
  {
    sub_208215C6C((uint64_t)qword_25452F738, (uint64_t)&xmmword_25452F758);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F758, &dword_207C77000);
    __cxa_guard_release(&qword_25452F770);
  }
  if (byte_25452F76F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F758, *((unint64_t *)&xmmword_25452F758 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F758;
    *(_QWORD *)(a1 + 16) = unk_25452F768;
  }
}

void sub_20817525C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F770);
  _Unwind_Resume(a1);
}

void sub_208175274(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F750);
  _Unwind_Resume(a1);
}

void sub_20817528C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F730);
  _Unwind_Resume(a1);
}

void sub_2081752A8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2081752BC(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_2081752F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208175368(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081753D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208175438()
{
  return 6;
}

uint64_t sub_208175440(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208175448@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208175460(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2081754DC()
{
  return 6;
}

__int128 *sub_2081754E8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F790);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452F790))
  {
    v2 = sub_2081755C0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452F778, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452F788 = *((_QWORD *)v2 + 2);
      xmmword_25452F778 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F778, &dword_207C77000);
    __cxa_guard_release(&qword_25452F790);
  }
  if (byte_25452F78F >= 0)
    return &xmmword_25452F778;
  else
    return (__int128 *)xmmword_25452F778;
}

void sub_2081755A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F790);
  _Unwind_Resume(a1);
}

__int128 *sub_2081755C0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F7B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F7B0))
    return &xmmword_25452F798;
  v2 = sub_20817569C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F798, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F7A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F798 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F798, &dword_207C77000);
  __cxa_guard_release(&qword_25452F7B0);
  return &xmmword_25452F798;
}

void sub_208175684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F7B0);
  _Unwind_Resume(a1);
}

std::string *sub_20817569C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F7D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F7D0))
    return &stru_25452F7B8;
  sub_2081758B4((uint64_t)__p);
  sub_20817578C((char *)__p, &stru_25452F7B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F7B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F7D0);
  return &stru_25452F7B8;
}

void sub_20817574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F7D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F7D0);
  _Unwind_Resume(a1);
}

void sub_20817578C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F36794();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208175888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2081758B4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F7F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F7F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16u>]", qword_25452F7D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F7D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F7F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F810);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F810))
  {
    v5 = sub_207D49434(qword_25452F7D8, "<", 0);
    sub_207D49330(qword_25452F7D8, 0, v5, qword_25452F7F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F7F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F810);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F830);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F830))
  {
    sub_208215C6C((uint64_t)qword_25452F7F8, (uint64_t)&xmmword_25452F818);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F818, &dword_207C77000);
    __cxa_guard_release(&qword_25452F830);
  }
  if (byte_25452F82F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F818, *((unint64_t *)&xmmword_25452F818 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F818;
    *(_QWORD *)(a1 + 16) = unk_25452F828;
  }
}

void sub_208175A50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F830);
  _Unwind_Resume(a1);
}

void sub_208175A68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F810);
  _Unwind_Resume(a1);
}

void sub_208175A80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F7F0);
  _Unwind_Resume(a1);
}

void sub_208175A9C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208175AB0(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208175AEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208175B5C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208175BC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208175C2C()
{
  return 7;
}

uint64_t sub_208175C34(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208175C3C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208175C54(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_208175CD0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_208175D8C()
{
  return 7;
}

__int128 *sub_208175D98()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F850);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452F850))
  {
    v2 = sub_208175E70();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452F838, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452F848 = *((_QWORD *)v2 + 2);
      xmmword_25452F838 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F838, &dword_207C77000);
    __cxa_guard_release(&qword_25452F850);
  }
  if (byte_25452F84F >= 0)
    return &xmmword_25452F838;
  else
    return (__int128 *)xmmword_25452F838;
}

void sub_208175E58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F850);
  _Unwind_Resume(a1);
}

__int128 *sub_208175E70()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F870);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F870))
    return &xmmword_25452F858;
  v2 = sub_208175F4C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F858, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F868 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F858 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F858, &dword_207C77000);
  __cxa_guard_release(&qword_25452F870);
  return &xmmword_25452F858;
}

void sub_208175F34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F870);
  _Unwind_Resume(a1);
}

std::string *sub_208175F4C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F890);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F890))
    return &stru_25452F878;
  sub_20817603C((uint64_t)__p);
  sub_2080FEAEC((char *)__p, &stru_25452F878);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F878, &dword_207C77000);
  __cxa_guard_release(&qword_25452F890);
  return &stru_25452F878;
}

void sub_208175FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F890);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F890);
  _Unwind_Resume(a1);
}

void sub_20817603C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F8B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F8B0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16f>]", qword_25452F898);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F898, &dword_207C77000);
    __cxa_guard_release(&qword_25452F8B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F8D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F8D0))
  {
    v5 = sub_207D49434(qword_25452F898, "<", 0);
    sub_207D49330(qword_25452F898, 0, v5, qword_25452F8B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F8B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F8D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F8F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F8F0))
  {
    sub_208215C6C((uint64_t)qword_25452F8B8, (uint64_t)&xmmword_25452F8D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F8D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F8F0);
  }
  if (byte_25452F8EF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F8D8, *((unint64_t *)&xmmword_25452F8D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F8D8;
    *(_QWORD *)(a1 + 16) = unk_25452F8E8;
  }
}

void sub_2081761D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F8F0);
  _Unwind_Resume(a1);
}

void sub_2081761F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F8D0);
  _Unwind_Resume(a1);
}

void sub_208176208(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F8B0);
  _Unwind_Resume(a1);
}

void sub_208176224(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208176238(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_2081762E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208176358(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081763C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208176428()
{
  return 8;
}

uint64_t sub_208176430(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208176438@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208176450(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2081764CC()
{
  return 8;
}

__int128 *sub_2081764D8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F910);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452F910))
  {
    v2 = sub_2081765B0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452F8F8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452F908 = *((_QWORD *)v2 + 2);
      xmmword_25452F8F8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F8F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F910);
  }
  if (byte_25452F90F >= 0)
    return &xmmword_25452F8F8;
  else
    return (__int128 *)xmmword_25452F8F8;
}

void sub_208176598(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F910);
  _Unwind_Resume(a1);
}

__int128 *sub_2081765B0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F930);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F930))
    return &xmmword_25452F918;
  v2 = sub_20817668C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F918, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F928 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F918 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F918, &dword_207C77000);
  __cxa_guard_release(&qword_25452F930);
  return &xmmword_25452F918;
}

void sub_208176674(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F930);
  _Unwind_Resume(a1);
}

std::string *sub_20817668C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F950);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F950))
    return &stru_25452F938;
  sub_20817677C((uint64_t)__p);
  sub_2080FEC14((char *)__p, &stru_25452F938);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F938, &dword_207C77000);
  __cxa_guard_release(&qword_25452F950);
  return &stru_25452F938;
}

void sub_20817673C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F950);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F950);
  _Unwind_Resume(a1);
}

void sub_20817677C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F970);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F970))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two32f>]", qword_25452F958);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F958, &dword_207C77000);
    __cxa_guard_release(&qword_25452F970);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F990);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F990))
  {
    v5 = sub_207D49434(qword_25452F958, "<", 0);
    sub_207D49330(qword_25452F958, 0, v5, qword_25452F978);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F978, &dword_207C77000);
    __cxa_guard_release(&qword_25452F990);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F9B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F9B0))
  {
    sub_208215C6C((uint64_t)qword_25452F978, (uint64_t)&xmmword_25452F998);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F998, &dword_207C77000);
    __cxa_guard_release(&qword_25452F9B0);
  }
  if (byte_25452F9AF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F998, *((unint64_t *)&xmmword_25452F998 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F998;
    *(_QWORD *)(a1 + 16) = unk_25452F9A8;
  }
}

void sub_208176918(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F9B0);
  _Unwind_Resume(a1);
}

void sub_208176930(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F990);
  _Unwind_Resume(a1);
}

void sub_208176948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F970);
  _Unwind_Resume(a1);
}

void sub_208176964(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208176978(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_2081769B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208176A24(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208176A8C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208176AF4()
{
  return 9;
}

uint64_t sub_208176AFC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208176B04@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208176B18(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_208176B9C()
{
  return 9;
}

__int128 *sub_208176BA8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F9D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452F9D0))
  {
    v2 = sub_208176C80();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452F9B8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452F9C8 = *((_QWORD *)v2 + 2);
      xmmword_25452F9B8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F9B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F9D0);
  }
  if (byte_25452F9CF >= 0)
    return &xmmword_25452F9B8;
  else
    return (__int128 *)xmmword_25452F9B8;
}

void sub_208176C68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F9D0);
  _Unwind_Resume(a1);
}

__int128 *sub_208176C80()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F9F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F9F0))
    return &xmmword_25452F9D8;
  v2 = sub_208176D5C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F9D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F9E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F9D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F9D8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F9F0);
  return &xmmword_25452F9D8;
}

void sub_208176D44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F9F0);
  _Unwind_Resume(a1);
}

std::string *sub_208176D5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FA10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FA10))
    return &stru_25452F9F8;
  sub_208176F74((uint64_t)__p);
  sub_208176E4C((char *)__p, &stru_25452F9F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F9F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452FA10);
  return &stru_25452F9F8;
}

void sub_208176E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FA10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FA10);
  _Unwind_Resume(a1);
}

void sub_208176E4C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F380A4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208176F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208176F74(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FA30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FA30))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three8u>]", qword_25452FA18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FA18, &dword_207C77000);
    __cxa_guard_release(&qword_25452FA30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FA50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FA50))
  {
    v5 = sub_207D49434(qword_25452FA18, "<", 0);
    sub_207D49330(qword_25452FA18, 0, v5, qword_25452FA38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FA38, &dword_207C77000);
    __cxa_guard_release(&qword_25452FA50);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FA70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FA70))
  {
    sub_208215C6C((uint64_t)qword_25452FA38, (uint64_t)&xmmword_25452FA58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FA58, &dword_207C77000);
    __cxa_guard_release(&qword_25452FA70);
  }
  if (byte_25452FA6F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FA58, *((unint64_t *)&xmmword_25452FA58 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FA58;
    *(_QWORD *)(a1 + 16) = unk_25452FA68;
  }
}

void sub_208177110(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FA70);
  _Unwind_Resume(a1);
}

void sub_208177128(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FA50);
  _Unwind_Resume(a1);
}

void sub_208177140(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FA30);
  _Unwind_Resume(a1);
}

void sub_20817715C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208177170(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_2081771AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817721C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208177284(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2081772EC()
{
  return 10;
}

uint64_t sub_2081772F4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2081772FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208177314(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_208177390()
{
  return 10;
}

__int128 *sub_20817739C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FA90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FA90))
  {
    v2 = sub_208177474();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FA78, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FA88 = *((_QWORD *)v2 + 2);
      xmmword_25452FA78 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FA78, &dword_207C77000);
    __cxa_guard_release(&qword_25452FA90);
  }
  if (byte_25452FA8F >= 0)
    return &xmmword_25452FA78;
  else
    return (__int128 *)xmmword_25452FA78;
}

void sub_20817745C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FA90);
  _Unwind_Resume(a1);
}

__int128 *sub_208177474()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FAB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FAB0))
    return &xmmword_25452FA98;
  v2 = sub_208177550();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FA98, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FAA8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FA98 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FA98, &dword_207C77000);
  __cxa_guard_release(&qword_25452FAB0);
  return &xmmword_25452FA98;
}

void sub_208177538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FAB0);
  _Unwind_Resume(a1);
}

std::string *sub_208177550()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FAD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FAD0))
    return &stru_25452FAB8;
  sub_208177768((uint64_t)__p);
  sub_208177640((char *)__p, &stru_25452FAB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FAB8, &dword_207C77000);
  __cxa_guard_release(&qword_25452FAD0);
  return &stru_25452FAB8;
}

void sub_208177600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FAD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FAD0);
  _Unwind_Resume(a1);
}

void sub_208177640(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F38900();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817773C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208177768(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FAF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FAF0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16u>]", qword_25452FAD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FAD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FAF0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FB10);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FB10))
  {
    v5 = sub_207D49434(qword_25452FAD8, "<", 0);
    sub_207D49330(qword_25452FAD8, 0, v5, qword_25452FAF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FAF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FB10);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FB30);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FB30))
  {
    sub_208215C6C((uint64_t)qword_25452FAF8, (uint64_t)&xmmword_25452FB18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FB18, &dword_207C77000);
    __cxa_guard_release(&qword_25452FB30);
  }
  if (byte_25452FB2F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FB18, *((unint64_t *)&xmmword_25452FB18 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FB18;
    *(_QWORD *)(a1 + 16) = unk_25452FB28;
  }
}

void sub_208177904(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FB30);
  _Unwind_Resume(a1);
}

void sub_20817791C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FB10);
  _Unwind_Resume(a1);
}

void sub_208177934(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FAF0);
  _Unwind_Resume(a1);
}

void sub_208177950(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208177964(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_2081779A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208177A10(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208177A78(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208177AE0()
{
  return 11;
}

uint64_t sub_208177AE8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208177AF0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208177B08(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_208177B84(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_208177C40()
{
  return 11;
}

__int128 *sub_208177C4C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FB50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FB50))
  {
    v2 = sub_208177D24();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FB38, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FB48 = *((_QWORD *)v2 + 2);
      xmmword_25452FB38 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FB38, &dword_207C77000);
    __cxa_guard_release(&qword_25452FB50);
  }
  if (byte_25452FB4F >= 0)
    return &xmmword_25452FB38;
  else
    return (__int128 *)xmmword_25452FB38;
}

void sub_208177D0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FB50);
  _Unwind_Resume(a1);
}

__int128 *sub_208177D24()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FB70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FB70))
    return &xmmword_25452FB58;
  v2 = sub_208177E00();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FB58, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FB68 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FB58 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FB58, &dword_207C77000);
  __cxa_guard_release(&qword_25452FB70);
  return &xmmword_25452FB58;
}

void sub_208177DE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FB70);
  _Unwind_Resume(a1);
}

std::string *sub_208177E00()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FB90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FB90))
    return &stru_25452FB78;
  sub_208178018((uint64_t)__p);
  sub_208177EF0((char *)__p, &stru_25452FB78);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FB78, &dword_207C77000);
  __cxa_guard_release(&qword_25452FB90);
  return &stru_25452FB78;
}

void sub_208177EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FB90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FB90);
  _Unwind_Resume(a1);
}

void sub_208177EF0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3915C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208177FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208178018(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FBB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FBB0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16f>]", qword_25452FB98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FB98, &dword_207C77000);
    __cxa_guard_release(&qword_25452FBB0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FBD0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FBD0))
  {
    v5 = sub_207D49434(qword_25452FB98, "<", 0);
    sub_207D49330(qword_25452FB98, 0, v5, qword_25452FBB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FBB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FBD0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FBF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FBF0))
  {
    sub_208215C6C((uint64_t)qword_25452FBB8, (uint64_t)&xmmword_25452FBD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FBD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FBF0);
  }
  if (byte_25452FBEF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FBD8, *((unint64_t *)&xmmword_25452FBD8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FBD8;
    *(_QWORD *)(a1 + 16) = unk_25452FBE8;
  }
}

void sub_2081781B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FBF0);
  _Unwind_Resume(a1);
}

void sub_2081781CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FBD0);
  _Unwind_Resume(a1);
}

void sub_2081781E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FBB0);
  _Unwind_Resume(a1);
}

void sub_208178200(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208178214(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_2081782C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208178334(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817839C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208178404()
{
  return 12;
}

uint64_t sub_20817840C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208178414@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817842C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2081784A8()
{
  return 12;
}

__int128 *sub_2081784B4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FC10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FC10))
  {
    v2 = sub_20817858C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FBF8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FC08 = *((_QWORD *)v2 + 2);
      xmmword_25452FBF8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FBF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FC10);
  }
  if (byte_25452FC0F >= 0)
    return &xmmword_25452FBF8;
  else
    return (__int128 *)xmmword_25452FBF8;
}

void sub_208178574(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FC10);
  _Unwind_Resume(a1);
}

__int128 *sub_20817858C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FC30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FC30))
    return &xmmword_25452FC18;
  v2 = sub_208178668();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FC18, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FC28 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FC18 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FC18, &dword_207C77000);
  __cxa_guard_release(&qword_25452FC30);
  return &xmmword_25452FC18;
}

void sub_208178650(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FC30);
  _Unwind_Resume(a1);
}

std::string *sub_208178668()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FC50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FC50))
    return &stru_25452FC38;
  sub_208178880((uint64_t)__p);
  sub_208178758((char *)__p, &stru_25452FC38);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FC38, &dword_207C77000);
  __cxa_guard_release(&qword_25452FC50);
  return &stru_25452FC38;
}

void sub_208178718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FC50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FC50);
  _Unwind_Resume(a1);
}

void sub_208178758(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F399B8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208178854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208178880(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FC70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FC70))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three32f>]", qword_25452FC58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FC58, &dword_207C77000);
    __cxa_guard_release(&qword_25452FC70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FC90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FC90))
  {
    v5 = sub_207D49434(qword_25452FC58, "<", 0);
    sub_207D49330(qword_25452FC58, 0, v5, qword_25452FC78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FC78, &dword_207C77000);
    __cxa_guard_release(&qword_25452FC90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FCB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FCB0))
  {
    sub_208215C6C((uint64_t)qword_25452FC78, (uint64_t)&xmmword_25452FC98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FC98, &dword_207C77000);
    __cxa_guard_release(&qword_25452FCB0);
  }
  if (byte_25452FCAF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FC98, *((unint64_t *)&xmmword_25452FC98 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FC98;
    *(_QWORD *)(a1 + 16) = unk_25452FCA8;
  }
}

void sub_208178A1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FCB0);
  _Unwind_Resume(a1);
}

void sub_208178A34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FC90);
  _Unwind_Resume(a1);
}

void sub_208178A4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FC70);
  _Unwind_Resume(a1);
}

void sub_208178A68(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208178A7C(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208178AB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208178B28(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208178B90(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208178BF8()
{
  return 13;
}

uint64_t sub_208178C00(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208178C08@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208178C1C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_208178CA0()
{
  return 13;
}

__int128 *sub_208178CAC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FCD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FCD0))
  {
    v2 = sub_208178D84();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FCB8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FCC8 = *((_QWORD *)v2 + 2);
      xmmword_25452FCB8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FCB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FCD0);
  }
  if (byte_25452FCCF >= 0)
    return &xmmword_25452FCB8;
  else
    return (__int128 *)xmmword_25452FCB8;
}

void sub_208178D6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FCD0);
  _Unwind_Resume(a1);
}

__int128 *sub_208178D84()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FCF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FCF0))
    return &xmmword_25452FCD8;
  v2 = sub_208178E60();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FCD8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FCE8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FCD8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FCD8, &dword_207C77000);
  __cxa_guard_release(&qword_25452FCF0);
  return &xmmword_25452FCD8;
}

void sub_208178E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FCF0);
  _Unwind_Resume(a1);
}

std::string *sub_208178E60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FD10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FD10))
    return &stru_25452FCF8;
  sub_208179078((uint64_t)__p);
  sub_208178F50((char *)__p, &stru_25452FCF8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FCF8, &dword_207C77000);
  __cxa_guard_release(&qword_25452FD10);
  return &stru_25452FCF8;
}

void sub_208178F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FD10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FD10);
  _Unwind_Resume(a1);
}

void sub_208178F50(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3A210();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817904C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208179078(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FD30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FD30))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four8u>]", qword_25452FD18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FD18, &dword_207C77000);
    __cxa_guard_release(&qword_25452FD30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FD50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FD50))
  {
    v5 = sub_207D49434(qword_25452FD18, "<", 0);
    sub_207D49330(qword_25452FD18, 0, v5, qword_25452FD38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FD38, &dword_207C77000);
    __cxa_guard_release(&qword_25452FD50);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FD70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FD70))
  {
    sub_208215C6C((uint64_t)qword_25452FD38, (uint64_t)&xmmword_25452FD58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FD58, &dword_207C77000);
    __cxa_guard_release(&qword_25452FD70);
  }
  if (byte_25452FD6F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FD58, *((unint64_t *)&xmmword_25452FD58 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FD58;
    *(_QWORD *)(a1 + 16) = unk_25452FD68;
  }
}

void sub_208179214(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FD70);
  _Unwind_Resume(a1);
}

void sub_20817922C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FD50);
  _Unwind_Resume(a1);
}

void sub_208179244(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FD30);
  _Unwind_Resume(a1);
}

void sub_208179260(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208179274(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_2081792B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208179320(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208179388(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2081793F0()
{
  return 14;
}

uint64_t sub_2081793F8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208179400@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208179418(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_208179494()
{
  return 14;
}

__int128 *sub_2081794A0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FD90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FD90))
  {
    v2 = sub_208179578();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FD78, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FD88 = *((_QWORD *)v2 + 2);
      xmmword_25452FD78 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FD78, &dword_207C77000);
    __cxa_guard_release(&qword_25452FD90);
  }
  if (byte_25452FD8F >= 0)
    return &xmmword_25452FD78;
  else
    return (__int128 *)xmmword_25452FD78;
}

void sub_208179560(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FD90);
  _Unwind_Resume(a1);
}

__int128 *sub_208179578()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FDB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FDB0))
    return &xmmword_25452FD98;
  v2 = sub_208179654();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FD98, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FDA8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FD98 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FD98, &dword_207C77000);
  __cxa_guard_release(&qword_25452FDB0);
  return &xmmword_25452FD98;
}

void sub_20817963C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FDB0);
  _Unwind_Resume(a1);
}

std::string *sub_208179654()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FDD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FDD0))
    return &stru_25452FDB8;
  sub_20817986C((uint64_t)__p);
  sub_208179744((char *)__p, &stru_25452FDB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FDB8, &dword_207C77000);
  __cxa_guard_release(&qword_25452FDD0);
  return &stru_25452FDB8;
}

void sub_208179704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FDD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FDD0);
  _Unwind_Resume(a1);
}

void sub_208179744(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3AA6C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208179840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817986C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FDF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FDF0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16u>]", qword_25452FDD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FDD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FDF0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FE10);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FE10))
  {
    v5 = sub_207D49434(qword_25452FDD8, "<", 0);
    sub_207D49330(qword_25452FDD8, 0, v5, qword_25452FDF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FDF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FE10);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FE30);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FE30))
  {
    sub_208215C6C((uint64_t)qword_25452FDF8, (uint64_t)&xmmword_25452FE18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FE18, &dword_207C77000);
    __cxa_guard_release(&qword_25452FE30);
  }
  if (byte_25452FE2F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FE18, *((unint64_t *)&xmmword_25452FE18 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FE18;
    *(_QWORD *)(a1 + 16) = unk_25452FE28;
  }
}

void sub_208179A08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FE30);
  _Unwind_Resume(a1);
}

void sub_208179A20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FE10);
  _Unwind_Resume(a1);
}

void sub_208179A38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FDF0);
  _Unwind_Resume(a1);
}

void sub_208179A54(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208179A68(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208179AA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208179B14(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208179B7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208179BE4()
{
  return 15;
}

uint64_t sub_208179BEC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208179BF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208179C0C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_208179C88(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_208179D44()
{
  return 15;
}

__int128 *sub_208179D50()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FE50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FE50))
  {
    v2 = sub_208179E28();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FE38, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FE48 = *((_QWORD *)v2 + 2);
      xmmword_25452FE38 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FE38, &dword_207C77000);
    __cxa_guard_release(&qword_25452FE50);
  }
  if (byte_25452FE4F >= 0)
    return &xmmword_25452FE38;
  else
    return (__int128 *)xmmword_25452FE38;
}

void sub_208179E10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FE50);
  _Unwind_Resume(a1);
}

__int128 *sub_208179E28()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FE70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FE70))
    return &xmmword_25452FE58;
  v2 = sub_208179F04();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FE58, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FE68 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FE58 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FE58, &dword_207C77000);
  __cxa_guard_release(&qword_25452FE70);
  return &xmmword_25452FE58;
}

void sub_208179EEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FE70);
  _Unwind_Resume(a1);
}

std::string *sub_208179F04()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FE90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FE90))
    return &stru_25452FE78;
  sub_20817A11C((uint64_t)__p);
  sub_208179FF4((char *)__p, &stru_25452FE78);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FE78, &dword_207C77000);
  __cxa_guard_release(&qword_25452FE90);
  return &stru_25452FE78;
}

void sub_208179FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FE90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FE90);
  _Unwind_Resume(a1);
}

void sub_208179FF4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3B2C8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817A0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817A11C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FEB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FEB0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16f>]", qword_25452FE98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FE98, &dword_207C77000);
    __cxa_guard_release(&qword_25452FEB0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FED0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FED0))
  {
    v5 = sub_207D49434(qword_25452FE98, "<", 0);
    sub_207D49330(qword_25452FE98, 0, v5, qword_25452FEB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FEB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FED0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FEF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FEF0))
  {
    sub_208215C6C((uint64_t)qword_25452FEB8, (uint64_t)&xmmword_25452FED8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FED8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FEF0);
  }
  if (byte_25452FEEF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FED8, *((unint64_t *)&xmmword_25452FED8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FED8;
    *(_QWORD *)(a1 + 16) = unk_25452FEE8;
  }
}

void sub_20817A2B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FEF0);
  _Unwind_Resume(a1);
}

void sub_20817A2D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FED0);
  _Unwind_Resume(a1);
}

void sub_20817A2E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FEB0);
  _Unwind_Resume(a1);
}

void sub_20817A304(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817A318(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_20817A3C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817A438(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817A4A0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817A508()
{
  return 16;
}

uint64_t sub_20817A510(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817A518@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817A530(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817A5AC()
{
  return 16;
}

__int128 *sub_20817A5B8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FF10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FF10))
  {
    v2 = sub_20817A690();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FEF8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FF08 = *((_QWORD *)v2 + 2);
      xmmword_25452FEF8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FEF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FF10);
  }
  if (byte_25452FF0F >= 0)
    return &xmmword_25452FEF8;
  else
    return (__int128 *)xmmword_25452FEF8;
}

void sub_20817A678(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FF10);
  _Unwind_Resume(a1);
}

__int128 *sub_20817A690()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FF30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FF30))
    return &xmmword_25452FF18;
  v2 = sub_20817A76C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FF18, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FF28 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FF18 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FF18, &dword_207C77000);
  __cxa_guard_release(&qword_25452FF30);
  return &xmmword_25452FF18;
}

void sub_20817A754(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FF30);
  _Unwind_Resume(a1);
}

std::string *sub_20817A76C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FF50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FF50))
    return &stru_25452FF38;
  sub_20817A984((uint64_t)__p);
  sub_20817A85C((char *)__p, &stru_25452FF38);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FF38, &dword_207C77000);
  __cxa_guard_release(&qword_25452FF50);
  return &stru_25452FF38;
}

void sub_20817A81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452FF50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452FF50);
  _Unwind_Resume(a1);
}

void sub_20817A85C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3BB24();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817A958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817A984(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452FF70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452FF70))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four32f>]", qword_25452FF58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FF58, &dword_207C77000);
    __cxa_guard_release(&qword_25452FF70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452FF90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452FF90))
  {
    v5 = sub_207D49434(qword_25452FF58, "<", 0);
    sub_207D49330(qword_25452FF58, 0, v5, qword_25452FF78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452FF78, &dword_207C77000);
    __cxa_guard_release(&qword_25452FF90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452FFB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452FFB0))
  {
    sub_208215C6C((uint64_t)qword_25452FF78, (uint64_t)&xmmword_25452FF98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FF98, &dword_207C77000);
    __cxa_guard_release(&qword_25452FFB0);
  }
  if (byte_25452FFAF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452FF98, *((unint64_t *)&xmmword_25452FF98 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452FF98;
    *(_QWORD *)(a1 + 16) = unk_25452FFA8;
  }
}

void sub_20817AB20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FFB0);
  _Unwind_Resume(a1);
}

void sub_20817AB38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FF90);
  _Unwind_Resume(a1);
}

void sub_20817AB50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FF70);
  _Unwind_Resume(a1);
}

void sub_20817AB6C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817AB80(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817ABBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817AC2C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817AC94(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817ACFC()
{
  return 17;
}

uint64_t sub_20817AD04(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817AD0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817AD20(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817ADA4()
{
  return 17;
}

__int128 *sub_20817ADB0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FFD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452FFD0))
  {
    v2 = sub_20817AE88();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452FFB8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452FFC8 = *((_QWORD *)v2 + 2);
      xmmword_25452FFB8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FFB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452FFD0);
  }
  if (byte_25452FFCF >= 0)
    return &xmmword_25452FFB8;
  else
    return (__int128 *)xmmword_25452FFB8;
}

void sub_20817AE70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FFD0);
  _Unwind_Resume(a1);
}

__int128 *sub_20817AE88()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452FFF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452FFF0))
    return &xmmword_25452FFD8;
  v2 = sub_20817AF64();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452FFD8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452FFE8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452FFD8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452FFD8, &dword_207C77000);
  __cxa_guard_release(&qword_25452FFF0);
  return &xmmword_25452FFD8;
}

void sub_20817AF4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452FFF0);
  _Unwind_Resume(a1);
}

std::string *sub_20817AF64()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530010);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530010))
    return &stru_25452FFF8;
  sub_20817B054((uint64_t)__p);
  sub_2080FED3C((char *)__p, &stru_25452FFF8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452FFF8, &dword_207C77000);
  __cxa_guard_release(&qword_254530010);
  return &stru_25452FFF8;
}

void sub_20817B014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254530010);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254530010);
  _Unwind_Resume(a1);
}

void sub_20817B054(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254530030);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530030))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr8u>]", qword_254530018);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530018, &dword_207C77000);
    __cxa_guard_release(&qword_254530030);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530050);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530050))
  {
    v5 = sub_207D49434(qword_254530018, "<", 0);
    sub_207D49330(qword_254530018, 0, v5, qword_254530038);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530038, &dword_207C77000);
    __cxa_guard_release(&qword_254530050);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254530070);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254530070))
  {
    sub_208215C6C((uint64_t)qword_254530038, (uint64_t)&xmmword_254530058);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530058, &dword_207C77000);
    __cxa_guard_release(&qword_254530070);
  }
  if (byte_25453006F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530058, *((unint64_t *)&xmmword_254530058 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530058;
    *(_QWORD *)(a1 + 16) = unk_254530068;
  }
}

void sub_20817B1F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530070);
  _Unwind_Resume(a1);
}

void sub_20817B208(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530050);
  _Unwind_Resume(a1);
}

void sub_20817B220(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530030);
  _Unwind_Resume(a1);
}

void sub_20817B23C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817B250(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817B28C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817B2FC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817B364(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817B3CC()
{
  return 18;
}

uint64_t sub_20817B3D4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817B3DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817B3F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817B470()
{
  return 18;
}

__int128 *sub_20817B47C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530090);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254530090))
  {
    v2 = sub_20817B554();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_254530078, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254530088 = *((_QWORD *)v2 + 2);
      xmmword_254530078 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530078, &dword_207C77000);
    __cxa_guard_release(&qword_254530090);
  }
  if (byte_25453008F >= 0)
    return &xmmword_254530078;
  else
    return (__int128 *)xmmword_254530078;
}

void sub_20817B53C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530090);
  _Unwind_Resume(a1);
}

__int128 *sub_20817B554()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545300B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545300B0))
    return &xmmword_254530098;
  v2 = sub_20817B630();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_254530098, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2545300A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254530098 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530098, &dword_207C77000);
  __cxa_guard_release(&qword_2545300B0);
  return &xmmword_254530098;
}

void sub_20817B618(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545300B0);
  _Unwind_Resume(a1);
}

std::string *sub_20817B630()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545300D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545300D0))
    return &stru_2545300B8;
  sub_20817B848((uint64_t)__p);
  sub_20817B720((char *)__p, &stru_2545300B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2545300B8, &dword_207C77000);
  __cxa_guard_release(&qword_2545300D0);
  return &stru_2545300B8;
}

void sub_20817B6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2545300D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2545300D0);
  _Unwind_Resume(a1);
}

void sub_20817B720(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3CBD8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817B848(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2545300F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2545300F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16u>]", qword_2545300D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545300D8, &dword_207C77000);
    __cxa_guard_release(&qword_2545300F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530110);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530110))
  {
    v5 = sub_207D49434(qword_2545300D8, "<", 0);
    sub_207D49330(qword_2545300D8, 0, v5, qword_2545300F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545300F8, &dword_207C77000);
    __cxa_guard_release(&qword_254530110);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254530130);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254530130))
  {
    sub_208215C6C((uint64_t)qword_2545300F8, (uint64_t)&xmmword_254530118);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530118, &dword_207C77000);
    __cxa_guard_release(&qword_254530130);
  }
  if (byte_25453012F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530118, *((unint64_t *)&xmmword_254530118 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530118;
    *(_QWORD *)(a1 + 16) = unk_254530128;
  }
}

void sub_20817B9E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530130);
  _Unwind_Resume(a1);
}

void sub_20817B9FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530110);
  _Unwind_Resume(a1);
}

void sub_20817BA14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545300F0);
  _Unwind_Resume(a1);
}

void sub_20817BA30(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817BA44(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817BA80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817BAF0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817BB58(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817BBC0()
{
  return 19;
}

uint64_t sub_20817BBC8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817BBD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817BBE8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_20817BC64(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_20817BD20()
{
  return 19;
}

__int128 *sub_20817BD2C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530150);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254530150))
  {
    v2 = sub_20817BE04();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_254530138, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254530148 = *((_QWORD *)v2 + 2);
      xmmword_254530138 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530138, &dword_207C77000);
    __cxa_guard_release(&qword_254530150);
  }
  if (byte_25453014F >= 0)
    return &xmmword_254530138;
  else
    return (__int128 *)xmmword_254530138;
}

void sub_20817BDEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530150);
  _Unwind_Resume(a1);
}

__int128 *sub_20817BE04()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530170);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530170))
    return &xmmword_254530158;
  v2 = sub_20817BEE0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_254530158, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254530168 = v2->__r_.__value_.__r.__words[2];
    xmmword_254530158 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530158, &dword_207C77000);
  __cxa_guard_release(&qword_254530170);
  return &xmmword_254530158;
}

void sub_20817BEC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530170);
  _Unwind_Resume(a1);
}

std::string *sub_20817BEE0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530190);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530190))
    return &stru_254530178;
  sub_20817C0F8((uint64_t)__p);
  sub_20817BFD0((char *)__p, &stru_254530178);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254530178, &dword_207C77000);
  __cxa_guard_release(&qword_254530190);
  return &stru_254530178;
}

void sub_20817BF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254530190);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254530190);
  _Unwind_Resume(a1);
}

void sub_20817BFD0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3D434();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817C0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817C0F8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2545301B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2545301B0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16f>]", qword_254530198);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530198, &dword_207C77000);
    __cxa_guard_release(&qword_2545301B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2545301D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2545301D0))
  {
    v5 = sub_207D49434(qword_254530198, "<", 0);
    sub_207D49330(qword_254530198, 0, v5, qword_2545301B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545301B8, &dword_207C77000);
    __cxa_guard_release(&qword_2545301D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2545301F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2545301F0))
  {
    sub_208215C6C((uint64_t)qword_2545301B8, (uint64_t)&xmmword_2545301D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545301D8, &dword_207C77000);
    __cxa_guard_release(&qword_2545301F0);
  }
  if (byte_2545301EF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_2545301D8, *((unint64_t *)&xmmword_2545301D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2545301D8;
    *(_QWORD *)(a1 + 16) = unk_2545301E8;
  }
}

void sub_20817C294(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545301F0);
  _Unwind_Resume(a1);
}

void sub_20817C2AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545301D0);
  _Unwind_Resume(a1);
}

void sub_20817C2C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545301B0);
  _Unwind_Resume(a1);
}

void sub_20817C2E0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817C2F4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_20817C3A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817C414(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817C47C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817C4E4()
{
  return 20;
}

uint64_t sub_20817C4EC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817C4F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817C50C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817C588()
{
  return 20;
}

__int128 *sub_20817C594()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530210);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254530210))
  {
    v2 = sub_20817C66C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_2545301F8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254530208 = *((_QWORD *)v2 + 2);
      xmmword_2545301F8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545301F8, &dword_207C77000);
    __cxa_guard_release(&qword_254530210);
  }
  if (byte_25453020F >= 0)
    return &xmmword_2545301F8;
  else
    return (__int128 *)xmmword_2545301F8;
}

void sub_20817C654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530210);
  _Unwind_Resume(a1);
}

__int128 *sub_20817C66C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530230);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530230))
    return &xmmword_254530218;
  v2 = sub_20817C748();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_254530218, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254530228 = v2->__r_.__value_.__r.__words[2];
    xmmword_254530218 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530218, &dword_207C77000);
  __cxa_guard_release(&qword_254530230);
  return &xmmword_254530218;
}

void sub_20817C730(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530230);
  _Unwind_Resume(a1);
}

std::string *sub_20817C748()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530250);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530250))
    return &stru_254530238;
  sub_20817C960((uint64_t)__p);
  sub_20817C838((char *)__p, &stru_254530238);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254530238, &dword_207C77000);
  __cxa_guard_release(&qword_254530250);
  return &stru_254530238;
}

void sub_20817C7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254530250);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254530250);
  _Unwind_Resume(a1);
}

void sub_20817C838(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F3DC90();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817C934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817C960(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254530270);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530270))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr32f>]", qword_254530258);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530258, &dword_207C77000);
    __cxa_guard_release(&qword_254530270);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530290);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530290))
  {
    v5 = sub_207D49434(qword_254530258, "<", 0);
    sub_207D49330(qword_254530258, 0, v5, qword_254530278);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530278, &dword_207C77000);
    __cxa_guard_release(&qword_254530290);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2545302B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2545302B0))
  {
    sub_208215C6C((uint64_t)qword_254530278, (uint64_t)&xmmword_254530298);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530298, &dword_207C77000);
    __cxa_guard_release(&qword_2545302B0);
  }
  if (byte_2545302AF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530298, *((unint64_t *)&xmmword_254530298 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530298;
    *(_QWORD *)(a1 + 16) = unk_2545302A8;
  }
}

void sub_20817CAFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545302B0);
  _Unwind_Resume(a1);
}

void sub_20817CB14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530290);
  _Unwind_Resume(a1);
}

void sub_20817CB2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530270);
  _Unwind_Resume(a1);
}

void sub_20817CB48(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817CB5C(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817CB98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817CC08(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817CC70(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817CCD8()
{
  return 26;
}

uint64_t sub_20817CCE0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817CCE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817CD00(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817CD7C()
{
  return 26;
}

__int128 *sub_20817CD88()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545302D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2545302D0))
  {
    v2 = sub_20817CE60();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_2545302B8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2545302C8 = *((_QWORD *)v2 + 2);
      xmmword_2545302B8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545302B8, &dword_207C77000);
    __cxa_guard_release(&qword_2545302D0);
  }
  if (byte_2545302CF >= 0)
    return &xmmword_2545302B8;
  else
    return (__int128 *)xmmword_2545302B8;
}

void sub_20817CE48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545302D0);
  _Unwind_Resume(a1);
}

__int128 *sub_20817CE60()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545302F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545302F0))
    return &xmmword_2545302D8;
  v2 = sub_20817CF3C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_2545302D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2545302E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_2545302D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545302D8, &dword_207C77000);
  __cxa_guard_release(&qword_2545302F0);
  return &xmmword_2545302D8;
}

void sub_20817CF24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545302F0);
  _Unwind_Resume(a1);
}

std::string *sub_20817CF3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530310);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530310))
    return &stru_2545302F8;
  sub_20817D154((uint64_t)__p);
  sub_20817D02C((char *)__p, &stru_2545302F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2545302F8, &dword_207C77000);
  __cxa_guard_release(&qword_254530310);
  return &stru_2545302F8;
}

void sub_20817CFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254530310);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254530310);
  _Unwind_Resume(a1);
}

void sub_20817D02C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F40B14();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817D128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817D154(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254530330);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530330))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16u>]", qword_254530318);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530318, &dword_207C77000);
    __cxa_guard_release(&qword_254530330);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530350);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530350))
  {
    v5 = sub_207D49434(qword_254530318, "<", 0);
    sub_207D49330(qword_254530318, 0, v5, qword_254530338);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530338, &dword_207C77000);
    __cxa_guard_release(&qword_254530350);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254530370);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254530370))
  {
    sub_208215C6C((uint64_t)qword_254530338, (uint64_t)&xmmword_254530358);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530358, &dword_207C77000);
    __cxa_guard_release(&qword_254530370);
  }
  if (byte_25453036F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530358, *((unint64_t *)&xmmword_254530358 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530358;
    *(_QWORD *)(a1 + 16) = unk_254530368;
  }
}

void sub_20817D2F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530370);
  _Unwind_Resume(a1);
}

void sub_20817D308(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530350);
  _Unwind_Resume(a1);
}

void sub_20817D320(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530330);
  _Unwind_Resume(a1);
}

void sub_20817D33C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817D350(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817D38C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817D3FC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817D464(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817D4CC()
{
  return 27;
}

uint64_t sub_20817D4D4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817D4DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817D4F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_20817D570(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_20817D62C()
{
  return 27;
}

__int128 *sub_20817D638()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530390);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254530390))
  {
    v2 = sub_20817D710();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_254530378, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254530388 = *((_QWORD *)v2 + 2);
      xmmword_254530378 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530378, &dword_207C77000);
    __cxa_guard_release(&qword_254530390);
  }
  if (byte_25453038F >= 0)
    return &xmmword_254530378;
  else
    return (__int128 *)xmmword_254530378;
}

void sub_20817D6F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530390);
  _Unwind_Resume(a1);
}

__int128 *sub_20817D710()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545303B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545303B0))
    return &xmmword_254530398;
  v2 = sub_20817D7EC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_254530398, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2545303A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254530398 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530398, &dword_207C77000);
  __cxa_guard_release(&qword_2545303B0);
  return &xmmword_254530398;
}

void sub_20817D7D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545303B0);
  _Unwind_Resume(a1);
}

std::string *sub_20817D7EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545303D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545303D0))
    return &stru_2545303B8;
  sub_20817DA04((uint64_t)__p);
  sub_20817D8DC((char *)__p, &stru_2545303B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2545303B8, &dword_207C77000);
  __cxa_guard_release(&qword_2545303D0);
  return &stru_2545303B8;
}

void sub_20817D89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2545303D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2545303D0);
  _Unwind_Resume(a1);
}

void sub_20817D8DC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F41370();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817DA04(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2545303F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2545303F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16f>]", qword_2545303D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545303D8, &dword_207C77000);
    __cxa_guard_release(&qword_2545303F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530410);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530410))
  {
    v5 = sub_207D49434(qword_2545303D8, "<", 0);
    sub_207D49330(qword_2545303D8, 0, v5, qword_2545303F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545303F8, &dword_207C77000);
    __cxa_guard_release(&qword_254530410);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254530430);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254530430))
  {
    sub_208215C6C((uint64_t)qword_2545303F8, (uint64_t)&xmmword_254530418);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530418, &dword_207C77000);
    __cxa_guard_release(&qword_254530430);
  }
  if (byte_25453042F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530418, *((unint64_t *)&xmmword_254530418 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530418;
    *(_QWORD *)(a1 + 16) = unk_254530428;
  }
}

void sub_20817DBA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530430);
  _Unwind_Resume(a1);
}

void sub_20817DBB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530410);
  _Unwind_Resume(a1);
}

void sub_20817DBD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545303F0);
  _Unwind_Resume(a1);
}

void sub_20817DBEC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817DC00(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_20817DCB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817DD20(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817DD88(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817DDF0()
{
  return 28;
}

uint64_t sub_20817DDF8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817DE00@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817DE18(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817DE94()
{
  return 28;
}

__int128 *sub_20817DEA0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530450);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254530450))
  {
    v2 = sub_20817DF78();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_254530438, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254530448 = *((_QWORD *)v2 + 2);
      xmmword_254530438 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530438, &dword_207C77000);
    __cxa_guard_release(&qword_254530450);
  }
  if (byte_25453044F >= 0)
    return &xmmword_254530438;
  else
    return (__int128 *)xmmword_254530438;
}

void sub_20817DF60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530450);
  _Unwind_Resume(a1);
}

__int128 *sub_20817DF78()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530470);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530470))
    return &xmmword_254530458;
  v2 = sub_20817E054();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_254530458, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254530468 = v2->__r_.__value_.__r.__words[2];
    xmmword_254530458 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530458, &dword_207C77000);
  __cxa_guard_release(&qword_254530470);
  return &xmmword_254530458;
}

void sub_20817E03C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530470);
  _Unwind_Resume(a1);
}

std::string *sub_20817E054()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530490);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530490))
    return &stru_254530478;
  sub_20817E26C((uint64_t)__p);
  sub_20817E144((char *)__p, &stru_254530478);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254530478, &dword_207C77000);
  __cxa_guard_release(&qword_254530490);
  return &stru_254530478;
}

void sub_20817E104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254530490);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254530490);
  _Unwind_Resume(a1);
}

void sub_20817E144(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F41BCC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817E240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817E26C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2545304B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2545304B0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra32f>]", qword_254530498);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530498, &dword_207C77000);
    __cxa_guard_release(&qword_2545304B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2545304D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2545304D0))
  {
    v5 = sub_207D49434(qword_254530498, "<", 0);
    sub_207D49330(qword_254530498, 0, v5, qword_2545304B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545304B8, &dword_207C77000);
    __cxa_guard_release(&qword_2545304D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2545304F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2545304F0))
  {
    sub_208215C6C((uint64_t)qword_2545304B8, (uint64_t)&xmmword_2545304D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545304D8, &dword_207C77000);
    __cxa_guard_release(&qword_2545304F0);
  }
  if (byte_2545304EF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_2545304D8, *((unint64_t *)&xmmword_2545304D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2545304D8;
    *(_QWORD *)(a1 + 16) = unk_2545304E8;
  }
}

void sub_20817E408(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545304F0);
  _Unwind_Resume(a1);
}

void sub_20817E420(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545304D0);
  _Unwind_Resume(a1);
}

void sub_20817E438(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545304B0);
  _Unwind_Resume(a1);
}

void sub_20817E454(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817E468(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817E4A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817E514(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817E57C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817E5E4()
{
  return 34;
}

uint64_t sub_20817E5EC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817E5F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817E60C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817E688()
{
  return 34;
}

__int128 *sub_20817E694()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530510);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254530510))
  {
    v2 = sub_20817E76C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_2545304F8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254530508 = *((_QWORD *)v2 + 2);
      xmmword_2545304F8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545304F8, &dword_207C77000);
    __cxa_guard_release(&qword_254530510);
  }
  if (byte_25453050F >= 0)
    return &xmmword_2545304F8;
  else
    return (__int128 *)xmmword_2545304F8;
}

void sub_20817E754(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530510);
  _Unwind_Resume(a1);
}

__int128 *sub_20817E76C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530530);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530530))
    return &xmmword_254530518;
  v2 = sub_20817E848();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_254530518, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254530528 = v2->__r_.__value_.__r.__words[2];
    xmmword_254530518 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530518, &dword_207C77000);
  __cxa_guard_release(&qword_254530530);
  return &xmmword_254530518;
}

void sub_20817E830(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530530);
  _Unwind_Resume(a1);
}

std::string *sub_20817E848()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530550);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530550))
    return &stru_254530538;
  sub_20817EA60((uint64_t)__p);
  sub_20817E938((char *)__p, &stru_254530538);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254530538, &dword_207C77000);
  __cxa_guard_release(&qword_254530550);
  return &stru_254530538;
}

void sub_20817E8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254530550);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254530550);
  _Unwind_Resume(a1);
}

void sub_20817E938(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F44F7C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817EA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817EA60(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254530570);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530570))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16u>]", qword_254530558);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530558, &dword_207C77000);
    __cxa_guard_release(&qword_254530570);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530590);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530590))
  {
    v5 = sub_207D49434(qword_254530558, "<", 0);
    sub_207D49330(qword_254530558, 0, v5, qword_254530578);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530578, &dword_207C77000);
    __cxa_guard_release(&qword_254530590);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2545305B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2545305B0))
  {
    sub_208215C6C((uint64_t)qword_254530578, (uint64_t)&xmmword_254530598);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530598, &dword_207C77000);
    __cxa_guard_release(&qword_2545305B0);
  }
  if (byte_2545305AF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530598, *((unint64_t *)&xmmword_254530598 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530598;
    *(_QWORD *)(a1 + 16) = unk_2545305A8;
  }
}

void sub_20817EBFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545305B0);
  _Unwind_Resume(a1);
}

void sub_20817EC14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530590);
  _Unwind_Resume(a1);
}

void sub_20817EC2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530570);
  _Unwind_Resume(a1);
}

void sub_20817EC48(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817EC5C(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817EC98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817ED08(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817ED70(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817EDD8()
{
  return 35;
}

uint64_t sub_20817EDE0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817EDE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817EE00(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t *sub_20817EE7C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_20817EF38()
{
  return 35;
}

__int128 *sub_20817EF44()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545305D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2545305D0))
  {
    v2 = sub_20817F01C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_2545305B8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2545305C8 = *((_QWORD *)v2 + 2);
      xmmword_2545305B8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545305B8, &dword_207C77000);
    __cxa_guard_release(&qword_2545305D0);
  }
  if (byte_2545305CF >= 0)
    return &xmmword_2545305B8;
  else
    return (__int128 *)xmmword_2545305B8;
}

void sub_20817F004(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545305D0);
  _Unwind_Resume(a1);
}

__int128 *sub_20817F01C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545305F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545305F0))
    return &xmmword_2545305D8;
  v2 = sub_20817F0F8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_2545305D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2545305E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_2545305D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2545305D8, &dword_207C77000);
  __cxa_guard_release(&qword_2545305F0);
  return &xmmword_2545305D8;
}

void sub_20817F0E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545305F0);
  _Unwind_Resume(a1);
}

std::string *sub_20817F0F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530610);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530610))
    return &stru_2545305F8;
  sub_20817F310((uint64_t)__p);
  sub_20817F1E8((char *)__p, &stru_2545305F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2545305F8, &dword_207C77000);
  __cxa_guard_release(&qword_254530610);
  return &stru_2545305F8;
}

void sub_20817F1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254530610);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254530610);
  _Unwind_Resume(a1);
}

void sub_20817F1E8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F457D8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817F2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817F310(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254530630);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530630))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16f>]", qword_254530618);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530618, &dword_207C77000);
    __cxa_guard_release(&qword_254530630);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530650);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530650))
  {
    v5 = sub_207D49434(qword_254530618, "<", 0);
    sub_207D49330(qword_254530618, 0, v5, qword_254530638);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254530638, &dword_207C77000);
    __cxa_guard_release(&qword_254530650);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254530670);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254530670))
  {
    sub_208215C6C((uint64_t)qword_254530638, (uint64_t)&xmmword_254530658);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530658, &dword_207C77000);
    __cxa_guard_release(&qword_254530670);
  }
  if (byte_25453066F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530658, *((unint64_t *)&xmmword_254530658 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530658;
    *(_QWORD *)(a1 + 16) = unk_254530668;
  }
}

void sub_20817F4AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530670);
  _Unwind_Resume(a1);
}

void sub_20817F4C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530650);
  _Unwind_Resume(a1);
}

void sub_20817F4DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530630);
  _Unwind_Resume(a1);
}

void sub_20817F4F8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817F50C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_20817F5BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20817F62C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20817F694(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20817F6FC()
{
  return 36;
}

uint64_t sub_20817F704(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20817F70C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20817F724(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_20817F7A0()
{
  return 36;
}

__int128 *sub_20817F7AC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254530690);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254530690))
  {
    v2 = sub_20817F884();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_254530678, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254530688 = *((_QWORD *)v2 + 2);
      xmmword_254530678 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530678, &dword_207C77000);
    __cxa_guard_release(&qword_254530690);
  }
  if (byte_25453068F >= 0)
    return &xmmword_254530678;
  else
    return (__int128 *)xmmword_254530678;
}

void sub_20817F86C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530690);
  _Unwind_Resume(a1);
}

__int128 *sub_20817F884()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545306B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545306B0))
    return &xmmword_254530698;
  v2 = sub_20817F960();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_254530698, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2545306A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254530698 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530698, &dword_207C77000);
  __cxa_guard_release(&qword_2545306B0);
  return &xmmword_254530698;
}

void sub_20817F948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545306B0);
  _Unwind_Resume(a1);
}

std::string *sub_20817F960()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2545306D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545306D0))
    return &stru_2545306B8;
  sub_20817FB78((uint64_t)__p);
  sub_20817FA50((char *)__p, &stru_2545306B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2545306B8, &dword_207C77000);
  __cxa_guard_release(&qword_2545306D0);
  return &stru_2545306B8;
}

void sub_20817FA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2545306D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2545306D0);
  _Unwind_Resume(a1);
}

void sub_20817FA50(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F46034();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20817FB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20817FB78(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2545306F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2545306F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr32f>]", qword_2545306D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545306D8, &dword_207C77000);
    __cxa_guard_release(&qword_2545306F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254530710);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254530710))
  {
    v5 = sub_207D49434(qword_2545306D8, "<", 0);
    sub_207D49330(qword_2545306D8, 0, v5, qword_2545306F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2545306F8, &dword_207C77000);
    __cxa_guard_release(&qword_254530710);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254530730);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254530730))
  {
    sub_208215C6C((uint64_t)qword_2545306F8, (uint64_t)&xmmword_254530718);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254530718, &dword_207C77000);
    __cxa_guard_release(&qword_254530730);
  }
  if (byte_25453072F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530718, *((unint64_t *)&xmmword_254530718 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254530718;
    *(_QWORD *)(a1 + 16) = unk_254530728;
  }
}

void sub_20817FD14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530730);
  _Unwind_Resume(a1);
}

void sub_20817FD2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530710);
  _Unwind_Resume(a1);
}

void sub_20817FD44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545306F0);
  _Unwind_Resume(a1);
}

void sub_20817FD60(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20817FD74(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20817FDB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20817FE20(int a1)
{
  __asm { BR              X10 }
}

void sub_20817FE54(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;
  __int128 v42;
  __int16 v43;

  v4 = **a2;
  v5 = (std::__shared_weak_count *)(*a2)[1];
  v36 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a2[1];
  if (v4)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, 1, *v8);
    v10 = *(std::__shared_weak_count_vtbl **)(v3 - 64);
    *(_QWORD *)(v3 - 64) = 0;
    *(_QWORD *)(v3 - 56) = v10;
    if (v10)
    {
      v11 = (std::__shared_weak_count *)operator new(0x20uLL);
      v11->__shared_owners_ = 0;
      v12 = (unint64_t *)&v11->__shared_owners_;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073880;
      v11->__shared_weak_owners_ = 0;
      v11[1].__vftable = v10;
      *(_QWORD *)(v3 - 48) = v11;
      v37 = v10;
      v38 = v11;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    else
    {
      v11 = 0;
      *(_QWORD *)(v3 - 48) = 0;
      v37 = 0;
      v38 = 0;
    }
    v39 = 0;
    (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t))v10->~__shared_weak_count + 8))(v10, 1);
    v14 = *(_QWORD **)(v3 - 40);
    v15 = v14[2];
    *(_OWORD *)v40 = *(_OWORD *)v14;
    *(_QWORD *)&v40[16] = v15;
    *(_QWORD *)(v3 - 40) = 0;
    operator delete(v14);
    v41 = *(_QWORD *)v40;
    v42 = *(_OWORD *)&v40[8];
    v16 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v10->~__shared_weak_count + 13))(v10);
    v17 = v16;
    if ((v16 & 0xFFFFFF) <= 0x10000)
      v17 = 0;
    v18 = v16 & 0xFF00;
    if ((v16 & 0xFF0000) == 0)
      v18 = 0;
    v43 = v18 & 0xFF00 | v17;
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    v21 = *(_QWORD *)(v3 - 64);
    *(_QWORD *)(v3 - 64) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  else
  {
    sub_207DDB554(v8, &v37);
  }
  *(_QWORD *)v2 = &off_24C0736D0;
  v22 = v37;
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = v38;
  }
  else
  {
    v26 = 0;
  }
  v27 = HIDWORD(v42);
  if (BYTE4(v39))
    v28 = v39 | 0x100000000;
  else
    v28 = 0;
  v29 = v42;
  v30 = *(_QWORD *)v40;
  v31 = v43;
  *(_QWORD *)(v2 + 8) = v22;
  *(_QWORD *)(v2 + 16) = v23;
  *(_QWORD *)(v2 + 24) = v28;
  *(_QWORD *)(v2 + 32) = v29;
  *(_DWORD *)(v2 + 40) = v27;
  *(_QWORD *)(v2 + 48) = v30;
  *(_DWORD *)(v2 + 56) = 1;
  *(_WORD *)(v2 + 60) = v31;
  if (v26)
  {
    v32 = (unint64_t *)&v26->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v36)
  {
    v34 = (unint64_t *)&v36->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_2081861BC()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2081861F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = *(_QWORD *)(v3 - 64);
  *(_QWORD *)(v3 - 64) = 0;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_207C99D78((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081866AC(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08B910;
  sub_20819EEAC(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08AA68;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08B948;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_20818DDB0((uint64_t)v3, 5, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208186854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208186888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_20818689C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_2081868B4(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE0C0((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08AAE8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08BA90;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_20818F0FC((uint64_t)v6, 6, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208186A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208186AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208186AC0(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208186ADC(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08BBD8;
  sub_20819F06C(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08AB68;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08BC10;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208190248((uint64_t)v3, 7, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208186D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_208175CD0(&a9);
  _Unwind_Resume(a1);
}

void sub_208186D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_208175CD0(&a9);
  _Unwind_Resume(a1);
}

void sub_208186D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20818F470((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208186D78(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE27C((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08ABE8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08BD58;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208190F80((uint64_t)v6, 8, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208186F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208186F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208186F84(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208186FA0(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08BEA0;
  sub_20819F1EC(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08AC68;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08BED8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208191690((uint64_t)v3, 9, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208187148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_20818717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208187190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_2081871A8(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE43C((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08ACE8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C020;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208191DC0((uint64_t)v6, 10, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20818736C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_2081873A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_2081873B4(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_2081873D0(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08C168;
  sub_20819F3A4(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08AD68;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C1A0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_2081925C4((uint64_t)v3, 11, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208187610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_208177B84(&a9);
  _Unwind_Resume(a1);
}

void sub_208187644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_208177B84(&a9);
  _Unwind_Resume(a1);
}

void sub_208187658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081921D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20818766C(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE5F0((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08ADE8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C2E8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208192CEC((uint64_t)v6, 12, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208187830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208187864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208187878(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208187894(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08C430;
  sub_20819F520(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08AE68;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C468;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208193314((uint64_t)v3, 13, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208187A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208187A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208187A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_208187A9C(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE7A4((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08AEE8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C5B0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_20819393C((uint64_t)v6, 14, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208187C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208187C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208187CA8(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208187CC4(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08C6F8;
  sub_20819F6E0(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08AF68;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C730;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208194148((uint64_t)v3, 15, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208187F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_208179C88(&a9);
  _Unwind_Resume(a1);
}

void sub_208187F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_208179C88(&a9);
  _Unwind_Resume(a1);
}

void sub_208187F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_208193D54((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208187F60(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE960((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08AFE8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C878;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208194770((uint64_t)v6, 16, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208188124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208188158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20818816C(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208188188(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08C9C0;
  sub_20819F864(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08B068;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08C9F8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208194E80((uint64_t)v3, 17, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208188330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208188364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208188378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_208188390(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE43C((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08B0E8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08CB40;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_2081955B0((uint64_t)v6, 18, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208188554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208188588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20818859C(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_2081885B8(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08CC88;
  sub_20819FA1C(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08B168;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08CCC0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208195D10((uint64_t)v3, 19, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2081887F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_20817BC64(&a9);
  _Unwind_Resume(a1);
}

void sub_20818882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20817BC64(&a9);
  _Unwind_Resume(a1);
}

void sub_208188840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_208195924((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208188854(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE5F0((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08B1E8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08CE08;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208196438((uint64_t)v6, 20, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208188A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208188A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208188A60(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208188A7C(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE7A4((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08B268;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08CF50;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208198D50((uint64_t)v6, 26, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208188C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208188C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208188C88(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208188CA4(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08D098;
  sub_2081A008C(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08B2E8;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08D0D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_2081994B8((uint64_t)v3, 27, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208188EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_20817D570(&a9);
  _Unwind_Resume(a1);
}

void sub_208188F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20817D570(&a9);
  _Unwind_Resume(a1);
}

void sub_208188F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081990C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208188F40(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE960((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08B368;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08D218;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_208199AE0((uint64_t)v6, 28, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208189104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208189138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20818914C(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208189168(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE7A4((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08B3E8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08D360;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_20819C110((uint64_t)v6, 34, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20818932C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208189360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208189374(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208189390(_QWORD *a1, _DWORD *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C08D4A8;
  sub_2081A0714(a2, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C08B468;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08D4E0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a1 = v3;
  a1[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a1[2] = 0;
  sub_20819C878((uint64_t)v3, 35, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 5) = v9;
  *(_OWORD *)(a1 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v10 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a1 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2081895D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_20817EE7C(&a9);
  _Unwind_Resume(a1);
}

void sub_208189604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20817EE7C(&a9);
  _Unwind_Resume(a1);
}

void sub_208189618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20819C484((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20818962C(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE960((uint64_t)__p, a2);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C08B4E8;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08D628;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a1 = v6;
  a1[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a1[2] = 0;
  sub_20819CEA0((uint64_t)v6, 36, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a1 + 5) = v12;
  *(_OWORD *)(a1 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a1[9] = a1[3];
  a1[14] = a1[8];
  v13 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 104))(*a1);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a1 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_2081897F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208189824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208189838(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_208189854(int a1)
{
  __asm { BR              X10 }
}

void sub_208189884(uint64_t a1, _DWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;

  sub_207DDB554(*a2, &v15);
  *(_QWORD *)v2 = &off_24C0736D0;
  v3 = v15;
  v4 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v16;
  }
  else
  {
    v7 = 0;
  }
  v8 = v21;
  if (v18)
    v9 = v17 | 0x100000000;
  else
    v9 = 0;
  v10 = v20;
  v11 = v19;
  v12 = v22;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 24) = v9;
  *(_QWORD *)(v2 + 32) = v10;
  *(_DWORD *)(v2 + 40) = v8;
  *(_QWORD *)(v2 + 48) = v11;
  *(_DWORD *)(v2 + 56) = 1;
  *(_WORD *)(v2 + 60) = v12;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20818B4D4()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_20818B508(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20818B564(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20818B594(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[6];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20818B5C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20818B614@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x50uLL);
  *(_QWORD *)v4 = &off_24C075360;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2081A0BDC((uint64_t)(v4 + 40), a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20818B674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20818B688(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  unsigned int *v6;
  _BYTE *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  BOOL v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  _BYTE *v25;
  int v26;
  int i;
  uint64_t v28;
  int v29;
  char *v30;
  int v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[3];
  size_t v38[2];
  _BYTE v39[28];
  _QWORD v40[3];
  __int128 v41;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0753D0, 0);
  if (v4)
  {
    v5 = (_OWORD *)(a1 + 8);
    v6 = (unsigned int *)(v4 + 8);
    v7 = *(_BYTE **)(a1 + 48);
    if (v7
      && (v8 = *v6, (_DWORD)v8 == *(_DWORD *)v5)
      && (v9 = *((_DWORD *)v4 + 3), v9 == *(_DWORD *)(a1 + 12))
      && (v10 = *((unsigned int *)v4 + 4), (_DWORD)v10 == *(_DWORD *)(a1 + 16))
      && (v11 = *((unsigned int *)v4 + 5), (_DWORD)v11 == *(_DWORD *)(a1 + 20)))
    {
      if ((_DWORD)v10 == 1)
      {
        if ((_DWORD)v11 == (_DWORD)v8)
        {
          v8 = (v9 * v8);
          v12 = (const void *)*((_QWORD *)v4 + 6);
          if ((_DWORD)v8)
            v13 = v12 == 0;
          else
            v13 = 0;
          if (!v13)
          {
            if (!(_DWORD)v8)
              return;
            goto LABEL_47;
          }
          if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            v7 = *(_BYTE **)(a1 + 48);
LABEL_47:
            v33 = v7;
            v34 = v12;
LABEL_52:
            memmove(v33, v34, v8);
            return;
          }
LABEL_61:
          abort();
        }
        if ((_DWORD)v8 && v9)
        {
          v30 = (char *)*((_QWORD *)v4 + 6);
          v31 = v9 - 1;
          if (v9 != 1)
          {
            v32 = 0;
            do
            {
              if (!&v30[v32]
                && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_61;
              }
              memmove(&v7[v32], &v30[v32], v8);
              v32 += v11;
              --v31;
            }
            while (v31);
            v30 += v32;
            v7 += v32;
          }
          if (v30
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            v33 = v7;
            v34 = v30;
            goto LABEL_52;
          }
          goto LABEL_61;
        }
      }
      else if ((_DWORD)v8 && v9)
      {
        v24 = v8 - 1;
        v25 = (_BYTE *)*((_QWORD *)v4 + 6);
        v26 = v9 - 1;
        if (v26)
        {
          if ((_DWORD)v8 == 1)
          {
            v35 = 0;
            do
            {
              v7[v35] = v25[v35];
              v35 += v11;
              --v26;
            }
            while (v26);
            v25 += v35;
            v7 += v35;
          }
          else
          {
            for (i = 0; i != v26; ++i)
            {
              v28 = 0;
              v29 = v8 - 1;
              do
              {
                v7[v28] = v25[v28];
                v28 += v10;
                --v29;
              }
              while (v29);
              v7[v28] = v25[v28];
              v25 += v11;
              v7 += v11;
            }
          }
        }
        if ((_DWORD)v8 != 1)
        {
          v36 = 0;
          do
          {
            v7[v36] = v25[v36];
            v36 += v10;
            --v24;
          }
          while (v24);
          v25 += v36;
          v7 += v36;
        }
        *v7 = *v25;
      }
    }
    else
    {
      v14 = *(_OWORD *)v6;
      *(_OWORD *)&v39[12] = *(_OWORD *)(v4 + 20);
      *(_OWORD *)v39 = v14;
      sub_2081A0BDC((uint64_t)v40, (uint64_t)(v4 + 40));
      *v5 = *(_OWORD *)v39;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)&v39[12];
      *(_OWORD *)(a1 + 64) = v41;
      *(_QWORD *)(a1 + 40) = v40[0];
      v15 = *(void **)(a1 + 48);
      if (v15)
        free(v15);
      v16 = v40[2];
      *(_QWORD *)(a1 + 48) = v40[1];
      *(_QWORD *)(a1 + 56) = v16;
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(__p, lpsrc, 1);
    v17 = __p[0];
    v18 = *((_QWORD *)__p[0] + 2);
    *(_OWORD *)v39 = *(_OWORD *)__p[0];
    *(_QWORD *)&v39[16] = v18;
    __p[0] = 0;
    operator delete(v17);
    v19 = *(void **)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v20 = *(_DWORD *)(a1 + 8) == 0;
    else
      v20 = 1;
    v21 = *(void **)(a1 + 8);
    v22 = *(void **)(a1 + 16);
    if (v20)
      v23 = 0;
    else
      v23 = v21;
    if (HIDWORD(v23) * HIDWORD(v22) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      goto LABEL_61;
    }
    __p[0] = v19;
    __p[1] = v23;
    __p[2] = v22;
    v38[0] = (size_t)v39;
    v38[1] = (size_t)__p;
    sub_2080F2F3C(v38);
  }
}

uint64_t sub_20818BA5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20818BA64@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20818BB40@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20818BC1C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20818BC4C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[6];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20818BC78()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20818BCCC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x50uLL);
  *(_QWORD *)v4 = &off_24C07A3E8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2081A0F48((uint64_t)(v4 + 40), a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20818BD2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20818BD40(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  unsigned int *v6;
  _WORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  BOOL v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  _WORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[3];
  _BYTE v41[28];
  _QWORD v42[3];
  __int128 v43;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C07A458, 0);
  if (!v4)
  {
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(__p, lpsrc, 2);
    v18 = __p[0];
    v19 = *((_QWORD *)__p[0] + 2);
    *(_OWORD *)v41 = *(_OWORD *)__p[0];
    *(_QWORD *)&v41[16] = v19;
    __p[0] = 0;
    operator delete(v18);
    v20 = *(void **)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v21 = *(_DWORD *)(a1 + 8) == 0;
    else
      v21 = 1;
    v22 = *(void **)(a1 + 8);
    v23 = *(void **)(a1 + 16);
    if (v21)
      v24 = 0;
    else
      v24 = v22;
    if (HIDWORD(v24) * HIDWORD(v23) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      goto LABEL_59;
    }
    __p[0] = v20;
    __p[1] = v24;
    __p[2] = v23;
    sub_2080F44E4((uint64_t *)v41, (uint64_t)__p);
    return;
  }
  v5 = (_OWORD *)(a1 + 8);
  v6 = (unsigned int *)(v4 + 8);
  v7 = *(_WORD **)(a1 + 48);
  if (!v7
    || (v8 = *v6, (_DWORD)v8 != *(_DWORD *)v5)
    || (v9 = *((_DWORD *)v4 + 3), v9 != *(_DWORD *)(a1 + 12))
    || (v10 = *((unsigned int *)v4 + 4), (_DWORD)v10 != *(_DWORD *)(a1 + 16))
    || (v11 = *((unsigned int *)v4 + 5), (_DWORD)v11 != *(_DWORD *)(a1 + 20)))
  {
    v15 = *(_OWORD *)v6;
    *(_OWORD *)&v41[12] = *(_OWORD *)(v4 + 20);
    *(_OWORD *)v41 = v15;
    sub_2081A0F48((uint64_t)v42, (uint64_t)(v4 + 40));
    *v5 = *(_OWORD *)v41;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v41[12];
    *(_OWORD *)(a1 + 64) = v43;
    *(_QWORD *)(a1 + 40) = v42[0];
    v16 = *(void **)(a1 + 48);
    if (v16)
      free(v16);
    v17 = v42[2];
    *(_QWORD *)(a1 + 48) = v42[1];
    *(_QWORD *)(a1 + 56) = v17;
    return;
  }
  if ((_DWORD)v10 != 1)
  {
    if (!(_DWORD)v8 || !v9)
      return;
    v25 = v8 - 1;
    v26 = (_WORD *)*((_QWORD *)v4 + 6);
    v27 = v9 - 1;
    if (v27)
    {
      if (!v25)
      {
        v39 = 0;
        do
        {
          v7[v39] = v26[v39];
          v39 += v11;
          --v27;
        }
        while (v27);
        v26 = (_WORD *)((char *)v26 + v39 * 2);
        v7 = (_WORD *)((char *)v7 + v39 * 2);
LABEL_58:
        *v7 = *v26;
        return;
      }
      v28 = 0;
      v29 = 2 * v11;
      do
      {
        v30 = 0;
        v31 = v25;
        do
        {
          v7[v30] = v26[v30];
          v30 += v10;
          --v31;
        }
        while (v31);
        v7[v30] = v26[v30];
        v26 = (_WORD *)((char *)v26 + v29);
        v7 = (_WORD *)((char *)v7 + v29);
        ++v28;
      }
      while (v28 != v27);
    }
    if (v25)
    {
      v32 = 0;
      v33 = 2 * v10;
      do
      {
        *(_WORD *)((char *)v7 + v32) = *(_WORD *)((char *)v26 + v32);
        v32 += v33;
        --v25;
      }
      while (v25);
      v26 = (_WORD *)((char *)v26 + v32);
      v7 = (_WORD *)((char *)v7 + v32);
    }
    goto LABEL_58;
  }
  if ((_DWORD)v11 == (_DWORD)v8)
  {
    v12 = (v9 * v8);
    v13 = (const void *)*((_QWORD *)v4 + 6);
    if ((_DWORD)v12)
      v14 = v13 == 0;
    else
      v14 = 0;
    if (!v14)
    {
      if (!(_DWORD)v12)
        return;
LABEL_50:
      memmove(v7, v13, 2 * v12);
      return;
    }
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      v7 = *(_WORD **)(a1 + 48);
      goto LABEL_50;
    }
LABEL_59:
    abort();
  }
  if ((_DWORD)v8 && v9)
  {
    v34 = (char *)*((_QWORD *)v4 + 6);
    v35 = 2 * v8;
    v36 = v9 - 1;
    if (v9 != 1)
    {
      v37 = 0;
      v38 = 2 * v11;
      do
      {
        if (!&v34[v37]
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_59;
        }
        memmove((char *)v7 + v37, &v34[v37], v35);
        v37 += v38;
        --v36;
      }
      while (v36);
      v34 += v37;
      v7 = (_WORD *)((char *)v7 + v37);
    }
    if (v34
      || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      memmove(v7, v34, v35);
      return;
    }
    goto LABEL_59;
  }
}

uint64_t sub_20818C128(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20818C130@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20818C20C@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20818C2E8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 68) || *(_DWORD *)(a1 + 64) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 68);
    if (v4 * (*(_QWORD *)(a1 + 72) >> 33) != -1)
      goto LABEL_11;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 48);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20818C384(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = (void *)__p[6];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 17) || *((_DWORD *)__p + 16) == 0;
    v4 = v3 ? 0 : *((_DWORD *)__p + 17);
    if (v4 * (__p[9] >> 33) != -1)
      goto LABEL_11;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[6];
    if (v2)
LABEL_11:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_20818C41C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20818C470@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x50uLL);
  *(_QWORD *)v4 = &off_24C080CF0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2081A1378((uint64_t)(v4 + 40), a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20818C4D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int16 sub_20818C4E4@<H0>(uint64_t a1@<X0>, void *lpsrc@<X1>)
{
  char *v4;
  __int128 v5;
  _OWORD *v6;
  unsigned int *v7;
  _WORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  void *v17;
  BOOL v18;
  int v19;
  void *v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _WORD *v42;
  uint64_t v43;
  _WORD *v44;
  __int16 *v45;
  uint64_t v46;
  unint64_t v47;
  _OWORD *v48;
  __int128 v49;
  __int16 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _WORD *v54;
  __int16 *v55;
  __int128 *v56;
  _OWORD *v57;
  unint64_t v58;
  __int128 v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _WORD *v67;
  __int16 *v68;
  __int128 *v69;
  _OWORD *v70;
  unint64_t v71;
  __int128 v72;
  __int16 v73;
  uint64_t v75;
  void *__p[3];
  uint64_t v77[2];
  _BYTE v78[28];
  _QWORD v79[3];
  __int128 v80;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0813E0, 0);
  if (!v4)
  {
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(__p, lpsrc, 3);
    v20 = __p[0];
    v21 = *((_QWORD *)__p[0] + 2);
    *(_OWORD *)v78 = *(_OWORD *)__p[0];
    *(_QWORD *)&v78[16] = v21;
    __p[0] = 0;
    operator delete(v20);
    v22 = *(void **)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v23 = *(_DWORD *)(a1 + 8) == 0;
    else
      v23 = 1;
    v24 = *(void **)(a1 + 8);
    v25 = *(void **)(a1 + 16);
    if (v23)
      v26 = 0;
    else
      v26 = v24;
    if (HIDWORD(v26) * HIDWORD(v25) != -1
      || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      __p[0] = v22;
      __p[1] = v26;
      __p[2] = v25;
      v77[0] = (uint64_t)v78;
      v77[1] = (uint64_t)__p;
      LOWORD(v5) = sub_2080F5DDC(v77);
      return v5;
    }
    goto LABEL_93;
  }
  v6 = (_OWORD *)(a1 + 8);
  v7 = (unsigned int *)(v4 + 8);
  v8 = *(_WORD **)(a1 + 48);
  if (!v8
    || (v9 = *v7, (_DWORD)v9 != *(_DWORD *)v6)
    || (v10 = *((_DWORD *)v4 + 3), v10 != *(_DWORD *)(a1 + 12))
    || (v11 = *((unsigned int *)v4 + 4), (_DWORD)v11 != *(_DWORD *)(a1 + 16))
    || (v12 = *((unsigned int *)v4 + 5), (_DWORD)v12 != *(_DWORD *)(a1 + 20)))
  {
    v16 = *(_OWORD *)v7;
    *(_OWORD *)&v78[12] = *(_OWORD *)(v4 + 20);
    *(_OWORD *)v78 = v16;
    sub_2081A1378((uint64_t)v79, (uint64_t)(v4 + 40));
    *v6 = *(_OWORD *)v78;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v78[12];
    LOWORD(v5) = v80;
    *(_OWORD *)(a1 + 64) = v80;
    v17 = *(void **)(a1 + 48);
    if (v17)
    {
      if (*(_DWORD *)(a1 + 68))
        v18 = *(_DWORD *)(a1 + 64) == 0;
      else
        v18 = 1;
      if (v18)
        v19 = 0;
      else
        v19 = *(_DWORD *)(a1 + 68);
      if (v19 * (*(_QWORD *)(a1 + 72) >> 33) == -1)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v17 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 40) = v79[0];
        if (!v17)
          goto LABEL_37;
      }
      else
      {
        *(_QWORD *)(a1 + 40) = v79[0];
      }
      free(v17);
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v79[0];
    }
LABEL_37:
    v27 = v79[2];
    *(_QWORD *)(a1 + 48) = v79[1];
    *(_QWORD *)(a1 + 56) = v27;
    return v5;
  }
  if ((_DWORD)v11 != 1)
  {
    if ((_DWORD)v9 && v10)
    {
      v28 = v9 - 1;
      v29 = (_WORD *)*((_QWORD *)v4 + 6);
      v30 = 2 * v11;
      v31 = v10 - 1;
      if (v31)
      {
        if ((_DWORD)v9 == 1)
        {
          v61 = 0;
          v62 = 2 * v12;
          do
          {
            *(_WORD *)((char *)v8 + v61) = *(_WORD *)((char *)v29 + v61);
            v61 += v62;
            --v31;
          }
          while (v31);
          v29 = (_WORD *)((char *)v29 + v61);
          v8 = (_WORD *)((char *)v8 + v61);
        }
        else
        {
          v32 = 0;
          v33 = 2 * v12;
          do
          {
            v34 = 0;
            v35 = v9 - 1;
            do
            {
              *(_WORD *)((char *)v8 + v34) = *(_WORD *)((char *)v29 + v34);
              v34 += v30;
              --v35;
            }
            while (v35);
            *(_WORD *)((char *)v8 + v34) = *(_WORD *)((char *)v29 + v34);
            v29 = (_WORD *)((char *)v29 + v33);
            v8 = (_WORD *)((char *)v8 + v33);
            ++v32;
          }
          while (v32 != v31);
        }
      }
      if ((_DWORD)v9 != 1)
      {
        v63 = 0;
        do
        {
          *(_WORD *)((char *)v8 + v63) = *(_WORD *)((char *)v29 + v63);
          v63 += v30;
          --v28;
        }
        while (v28);
        v29 = (_WORD *)((char *)v29 + v63);
        v8 = (_WORD *)((char *)v8 + v63);
      }
      LOWORD(v5) = *v29;
      *v8 = *v29;
    }
    return v5;
  }
  if ((_DWORD)v12 != (_DWORD)v9)
  {
    if (!(_DWORD)v9 || !v10)
      return v5;
    v36 = *((_QWORD *)v4 + 6);
    v37 = v10 - 1;
    if (v10 == 1)
    {
      v42 = *(_WORD **)(a1 + 48);
      v43 = *((_QWORD *)v4 + 6);
LABEL_82:
      if (v43
        || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        v64 = (v9 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v64 < 0xF || (unint64_t)v42 - v43 < 0x20)
        {
          v67 = v42;
          v68 = (__int16 *)v43;
        }
        else
        {
          v65 = v64 + 1;
          v66 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
          v67 = &v42[v66];
          v68 = (__int16 *)(v43 + 2 * v66);
          v69 = (__int128 *)(v43 + 16);
          v70 = v42 + 8;
          v71 = v66;
          do
          {
            v5 = *(v69 - 1);
            v72 = *v69;
            *(v70 - 1) = v5;
            *v70 = v72;
            v69 += 2;
            v70 += 2;
            v71 -= 16;
          }
          while (v71);
          if (v65 == v66)
            return v5;
        }
        do
        {
          v73 = *v68++;
          LOWORD(v5) = v73;
          *v67++ = v73;
        }
        while (v68 != (__int16 *)(v43 + 2 * v9));
        return v5;
      }
    }
    else
    {
      v38 = 0;
      v39 = 2 * v12;
      v40 = (v9 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v41 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
      v75 = v41;
      v42 = v8;
      v43 = *((_QWORD *)v4 + 6);
      while (v43
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        v44 = v42;
        v45 = (__int16 *)v43;
        if (v40 < 0xF)
          goto LABEL_98;
        v44 = v42;
        v45 = (__int16 *)v43;
        if ((unint64_t)v8 + v39 * v38 - v39 * v38 - v36 < 0x20)
          goto LABEL_98;
        v46 = 0;
        v44 = &v42[v75];
        v45 = (__int16 *)(v43 + v75 * 2);
        v47 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v48 = &v42[v46];
          v49 = *(_OWORD *)(v43 + v46 * 2 + 16);
          *v48 = *(_OWORD *)(v43 + v46 * 2);
          v48[1] = v49;
          v46 += 16;
          v47 -= 16;
        }
        while (v47);
        if (v40 + 1 != v41)
        {
LABEL_98:
          do
          {
            v50 = *v45++;
            *v44++ = v50;
          }
          while (v45 != (__int16 *)(v43 + 2 * v9));
        }
        v43 += v39;
        v42 = (_WORD *)((char *)v42 + v39);
        if ((_DWORD)++v38 == v37)
          goto LABEL_82;
      }
    }
    goto LABEL_93;
  }
  v13 = (v10 * v9);
  v14 = *((_QWORD *)v4 + 6);
  if ((_DWORD)v13)
    v15 = v14 == 0;
  else
    v15 = 0;
  if (!v15)
  {
    if (!(_DWORD)v13)
      return v5;
    goto LABEL_64;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_93:
    abort();
  }
  v8 = *(_WORD **)(a1 + 48);
LABEL_64:
  v51 = (v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v51 < 0xF || (unint64_t)v8 - v14 < 0x20)
  {
    v54 = v8;
    v55 = (__int16 *)v14;
    do
    {
LABEL_71:
      v60 = *v55++;
      LOWORD(v5) = v60;
      *v54++ = v60;
    }
    while (v55 != (__int16 *)(v14 + 2 * v13));
    return v5;
  }
  v52 = v51 + 1;
  v53 = (v51 + 1) & 0xFFFFFFFFFFFFFFF0;
  v54 = &v8[v53];
  v55 = (__int16 *)(v14 + 2 * v53);
  v56 = (__int128 *)(v14 + 16);
  v57 = v8 + 8;
  v58 = v53;
  do
  {
    v5 = *(v56 - 1);
    v59 = *v56;
    *(v57 - 1) = v5;
    *v57 = v59;
    v56 += 2;
    v57 += 2;
    v58 -= 16;
  }
  while (v58);
  if (v52 != v53)
    goto LABEL_71;
  return v5;
}

void sub_20818CA98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,int a25,uint64_t a26)
{
  __break(1u);
  JUMPOUT(0x20818CB08);
}

uint64_t sub_20818CB20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20818CB28@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20818CC04@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20818CCE0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20818CD10(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[6];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20818CD3C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20818CD90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x50uLL);
  *(_QWORD *)v4 = &off_24C0737D8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a1 + 20);
  result = sub_2081A1658((uint64_t)(v4 + 40), a1 + 40);
  *a2 = v4;
  return result;
}

void sub_20818CDF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20818CE04(uint64_t a1, void *lpsrc)
{
  char *v4;
  _OWORD *v5;
  unsigned int *v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  BOOL v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[3];
  _BYTE v41[28];
  _QWORD v42[3];
  __int128 v43;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C073848, 0);
  if (!v4)
  {
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(__p, lpsrc, 4);
    v18 = __p[0];
    v19 = *((_QWORD *)__p[0] + 2);
    *(_OWORD *)v41 = *(_OWORD *)__p[0];
    *(_QWORD *)&v41[16] = v19;
    __p[0] = 0;
    operator delete(v18);
    v20 = *(void **)(a1 + 48);
    if (*(_DWORD *)(a1 + 12))
      v21 = *(_DWORD *)(a1 + 8) == 0;
    else
      v21 = 1;
    v22 = *(void **)(a1 + 8);
    v23 = *(void **)(a1 + 16);
    if (v21)
      v24 = 0;
    else
      v24 = v22;
    if (HIDWORD(v24) * HIDWORD(v23) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      goto LABEL_59;
    }
    __p[0] = v20;
    __p[1] = v24;
    __p[2] = v23;
    sub_207D5A1F4((uint64_t)v41, (uint64_t)__p);
    return;
  }
  v5 = (_OWORD *)(a1 + 8);
  v6 = (unsigned int *)(v4 + 8);
  v7 = *(_DWORD **)(a1 + 48);
  if (!v7
    || (v8 = *v6, (_DWORD)v8 != *(_DWORD *)v5)
    || (v9 = *((_DWORD *)v4 + 3), v9 != *(_DWORD *)(a1 + 12))
    || (v10 = *((unsigned int *)v4 + 4), (_DWORD)v10 != *(_DWORD *)(a1 + 16))
    || (v11 = *((unsigned int *)v4 + 5), (_DWORD)v11 != *(_DWORD *)(a1 + 20)))
  {
    v15 = *(_OWORD *)v6;
    *(_OWORD *)&v41[12] = *(_OWORD *)(v4 + 20);
    *(_OWORD *)v41 = v15;
    sub_2081A1658((uint64_t)v42, (uint64_t)(v4 + 40));
    *v5 = *(_OWORD *)v41;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)&v41[12];
    *(_OWORD *)(a1 + 64) = v43;
    *(_QWORD *)(a1 + 40) = v42[0];
    v16 = *(void **)(a1 + 48);
    if (v16)
      free(v16);
    v17 = v42[2];
    *(_QWORD *)(a1 + 48) = v42[1];
    *(_QWORD *)(a1 + 56) = v17;
    return;
  }
  if ((_DWORD)v10 != 1)
  {
    if (!(_DWORD)v8 || !v9)
      return;
    v25 = v8 - 1;
    v26 = (_DWORD *)*((_QWORD *)v4 + 6);
    v27 = v9 - 1;
    if (v27)
    {
      if (!v25)
      {
        v39 = 0;
        do
        {
          v7[v39] = v26[v39];
          v39 += v11;
          --v27;
        }
        while (v27);
        v26 = (_DWORD *)((char *)v26 + v39 * 4);
        v7 = (_DWORD *)((char *)v7 + v39 * 4);
LABEL_58:
        *v7 = *v26;
        return;
      }
      v28 = 0;
      v29 = 4 * v11;
      do
      {
        v30 = 0;
        v31 = v25;
        do
        {
          v7[v30] = v26[v30];
          v30 += v10;
          --v31;
        }
        while (v31);
        v7[v30] = v26[v30];
        v26 = (_DWORD *)((char *)v26 + v29);
        v7 = (_DWORD *)((char *)v7 + v29);
        ++v28;
      }
      while (v28 != v27);
    }
    if (v25)
    {
      v32 = 0;
      v33 = 4 * v10;
      do
      {
        *(_DWORD *)((char *)v7 + v32) = *(_DWORD *)((char *)v26 + v32);
        v32 += v33;
        --v25;
      }
      while (v25);
      v26 = (_DWORD *)((char *)v26 + v32);
      v7 = (_DWORD *)((char *)v7 + v32);
    }
    goto LABEL_58;
  }
  if ((_DWORD)v11 == (_DWORD)v8)
  {
    v12 = (v9 * v8);
    v13 = (const void *)*((_QWORD *)v4 + 6);
    if ((_DWORD)v12)
      v14 = v13 == 0;
    else
      v14 = 0;
    if (!v14)
    {
      if (!(_DWORD)v12)
        return;
LABEL_50:
      memmove(v7, v13, 4 * v12);
      return;
    }
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      v7 = *(_DWORD **)(a1 + 48);
      goto LABEL_50;
    }
LABEL_59:
    abort();
  }
  if ((_DWORD)v8 && v9)
  {
    v34 = (char *)*((_QWORD *)v4 + 6);
    v35 = 4 * v8;
    v36 = v9 - 1;
    if (v9 != 1)
    {
      v37 = 0;
      v38 = 4 * v11;
      do
      {
        if (!&v34[v37]
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_59;
        }
        memmove((char *)v7 + v37, &v34[v37], v35);
        v37 += v38;
        --v36;
      }
      while (v36);
      v34 += v37;
      v7 = (_DWORD *)((char *)v7 + v37);
    }
    if (v34
      || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      memmove(v7, v34, v35);
      return;
    }
    goto LABEL_59;
  }
}

uint64_t sub_20818D1EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *sub_20818D1F4@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20818D2D0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  if (a2 != 4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v5 = *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 12)) ? (v6 = *(_DWORD *)(a1 + 8) == 0) : (v6 = 1), (v7 = *(_QWORD *)(a1 + 8), v8 = *(_QWORD *)(a1 + 16), !v6) ? (v9 = v7) : (v9 = 0), HIDWORD(v9) * HIDWORD(v8) == -1&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)))
  {
    abort();
  }
  result = operator new(0x18uLL);
  *result = v5;
  result[1] = v9;
  result[2] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20818D3AC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20818D3DC(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20818D408()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20818D45C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AA68;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20818D4CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20818D4E0(uint64_t a1, void *lpsrc)
{
  char *v4;
  _BYTE *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  int v38;
  char *v39;
  size_t v40;
  int v42;
  int v43;
  BOOL v44;
  int v46;
  char *v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  size_t v52;
  unsigned __int8 v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  size_t v63;
  char *v64;
  BOOL v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  int v72;
  uint64_t v73;
  size_t v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _QWORD v79[3];
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B558, 0);
  if (v4)
  {
    v5 = *(_BYTE **)(a1 + 72);
    if (!v5 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v6 = *(_OWORD *)(v4 + 8);
      v7 = *(_OWORD *)(v4 + 24);
      v8 = *(_OWORD *)(v4 + 40);
      v78 = *((_QWORD *)v4 + 7);
      v76 = v7;
      v77 = v8;
      v75 = v6;
      sub_2081A19EC((uint64_t)v79, (uint64_t)(v4 + 64));
      v9 = v76;
      *(_OWORD *)(a1 + 8) = v75;
      *(_OWORD *)(a1 + 24) = v9;
      *(_OWORD *)(a1 + 40) = v77;
      *(_QWORD *)(a1 + 56) = v78;
      *(_OWORD *)(a1 + 88) = v80;
      *(_QWORD *)(a1 + 104) = v81;
      *(_QWORD *)(a1 + 64) = v79[0];
      v10 = *(void **)(a1 + 72);
      if (v10)
        free(v10);
      v11 = v79[2];
      *(_QWORD *)(a1 + 72) = v79[1];
      *(_QWORD *)(a1 + 80) = v11;
      return;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (*((_DWORD *)v4 + 2))
      {
        v24 = *((_DWORD *)v4 + 3);
        if (v24)
        {
          v25 = *((_DWORD *)v4 + 4);
          if (v25)
          {
            v26 = v24 - 1;
            v27 = *((unsigned int *)v4 + 6);
            v28 = *(unsigned int *)(a1 + 24);
            v29 = (_BYTE *)*((_QWORD *)v4 + 9);
            v30 = v25 - 1;
            if (v30)
            {
              v31 = *(unsigned int *)(a1 + 28);
              v32 = *((unsigned int *)v4 + 7);
              if (v26)
              {
                v33 = 0;
                v34 = v29 + 1;
                v35 = v5 + 1;
                do
                {
                  v36 = v35;
                  v37 = v34;
                  v38 = v26;
                  do
                  {
                    *(v36 - 1) = *(v37 - 1);
                    *v36 = *v37;
                    v37 += v27;
                    v36 += v28;
                    --v38;
                  }
                  while (v38);
                  *(v36 - 1) = *(v37 - 1);
                  *v36 = *v37;
                  v29 += v32;
                  v5 += v31;
                  ++v33;
                  v34 += v32;
                  v35 += v31;
                }
                while (v33 != v30);
              }
              else
              {
                do
                {
                  *v5 = *v29;
                  v5[1] = v29[1];
                  v29 += v32;
                  v5 += v31;
                  --v30;
                }
                while (v30);
              }
            }
            for (; v26; --v26)
            {
              *v5 = *v29;
              v5[1] = v29[1];
              v29 += v27;
              v5 += v28;
            }
            *v5 = *v29;
            v5[1] = v29[1];
          }
        }
      }
      return;
    }
    v39 = (char *)*((unsigned int *)v4 + 6);
    v40 = *((unsigned int *)v4 + 2);
    v73 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v39 != (_DWORD)v73 || (_DWORD)v39 != (_DWORD)v40)
    {
      v43 = *((_DWORD *)v4 + 3);
      v42 = *((_DWORD *)v4 + 4);
      if ((_DWORD)v40)
        v44 = v43 == 0;
      else
        v44 = 1;
      if (v44 || v42 == 0)
        return;
      v46 = v43 - 1;
      v47 = (char *)*((_QWORD *)v4 + 9);
      v72 = v42 - 1;
      if (v42 == 1)
      {
LABEL_98:
        if (v46)
        {
          while (v47
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v5, v47, v40);
            v47 = &v39[(_QWORD)v47];
            v5 += v73;
            if (!--v46)
              goto LABEL_104;
          }
        }
        else
        {
LABEL_104:
          if (v47
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v5, v47, v40);
            return;
          }
        }
      }
      else
      {
        v69 = *(unsigned int *)(a1 + 28);
        v68 = *((unsigned int *)v4 + 7);
        if (v43 == 1)
        {
          while (v47
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v5, v47, v40);
            v47 += v68;
            v5 += v69;
            if (!--v72)
              goto LABEL_98;
          }
        }
        else
        {
          v48 = 0;
          while (1)
          {
            v70 = v48;
            v49 = 0;
            v71 = v47;
            v50 = v5;
            do
            {
              while (v47)
              {
                memmove(v50, v47, v40);
                v47 = &v39[(_QWORD)v47];
                v50 += v73;
                if (++v49 == v46)
                  goto LABEL_50;
              }
              v51 = v39;
              v52 = v40;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v53 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (byte_254530A10)
                v54 = byte_254530A18 == 0;
              else
                v54 = 0;
              if (!v54)
              {
                v56 = qword_2545309E8;
                v55 = qword_2545309F0;
                while (v56 != v55)
                {
                  v58 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v56;
                  v57 = *(_QWORD *)(v56 + 8);
                  v56 += 16;
                  v58(v57, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v59 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_103;
              v40 = v52;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              memcpy(v50, 0, v52);
              v50 += v73;
              ++v49;
              v39 = v51;
              v47 = v51;
            }
            while (v49 != v46);
            v47 = v51;
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
LABEL_50:
            memmove(v50, v47, v40);
            v47 = &v71[v68];
            v5 += v69;
            v48 = v70 + 1;
            if (v70 + 1 == v72)
              goto LABEL_98;
          }
        }
      }
LABEL_103:
      abort();
    }
    v60 = *((unsigned int *)v4 + 7);
    v61 = *(unsigned int *)(a1 + 28);
    v62 = *((_DWORD *)v4 + 3);
    v63 = (v62 * (_DWORD)v39);
    if ((_DWORD)v60 == (_DWORD)v61 && (_DWORD)v60 == (_DWORD)v63)
    {
      v63 = (*((_DWORD *)v4 + 4) * v60);
      v64 = (char *)*((_QWORD *)v4 + 9);
      if ((_DWORD)v63)
        v65 = v64 == 0;
      else
        v65 = 0;
      if (!v65)
      {
LABEL_75:
        if (!(_DWORD)v63)
          return;
        goto LABEL_92;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_103;
      }
      v5 = *(_BYTE **)(a1 + 72);
    }
    else
    {
      if (!(_DWORD)v39)
        return;
      if (!v62)
        return;
      v66 = *((_DWORD *)v4 + 4);
      if (!v66)
        return;
      v64 = (char *)*((_QWORD *)v4 + 9);
      v67 = v66 - 1;
      if (v66 != 1)
      {
        if (!(_DWORD)v63)
          return;
        while (v64
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v5, v64, v63);
          v64 += v60;
          v5 += v61;
          if (!--v67)
            goto LABEL_89;
        }
        goto LABEL_103;
      }
LABEL_89:
      if (!(_DWORD)v63 || v64)
        goto LABEL_75;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_103;
      }
    }
LABEL_92:
    memmove(v5, v64, v63);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v82, lpsrc, 5);
  v12 = (void *)v82;
  v14 = *(_OWORD *)(v82 + 16);
  v13 = *(_OWORD *)(v82 + 32);
  v75 = *(_OWORD *)v82;
  v76 = v14;
  v77 = v13;
  *(_QWORD *)&v82 = 0;
  operator delete(v12);
  v15 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v16 = *(_DWORD *)(a1 + 32) == 0;
  else
    v16 = 1;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  if (v16)
    v17 = 0;
  *(_QWORD *)((char *)&v82 + 4) = v17;
  v19 = v17;
  LODWORD(v82) = 2;
  v20 = v82;
  v21 = HIDWORD(v17);
  LODWORD(v82) = 1;
  *(_QWORD *)((char *)&v82 + 4) = v18;
  v22 = v82;
  if (HIDWORD(v18) * HIDWORD(v17) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&v82 = v15;
  *((_QWORD *)&v82 + 1) = v20;
  v83 = v21;
  v84 = v22;
  v85 = HIDWORD(v18);
  v86 = v19;
  v87 = v18;
  v74[0] = (size_t)&v75;
  v74[1] = (size_t)&v82;
  sub_2080F33F8(v74);
}

uint64_t sub_20818DDA8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20818DDB0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20818DF18@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20818E080(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20818E0B0(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20818E0DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20818E130@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AAE8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20818E1A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20818E1B4(uint64_t a1, void *lpsrc)
{
  char *v4;
  _WORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _WORD *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  _WORD *v35;
  _WORD *v36;
  _WORD *v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  char *v45;
  _WORD *v46;
  unsigned __int8 v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  _BOOL4 v52;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _WORD *v64;
  _WORD *v65;
  _WORD *v66;
  _WORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v74;
  int v75;
  int v76;
  char *v77;
  size_t v78;
  int v79;
  unsigned __int8 *v80;
  char *v81;
  int v82;
  char *v83;
  uint64_t v84;
  size_t v85;
  unsigned __int8 *v86;
  unsigned __int8 v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  const void *v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  _BOOL4 v113;
  _BOOL4 v114;
  void *v115;
  size_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _WORD *v120;
  int v121;
  int v122;
  int v123;
  char *v124;
  int v125;
  int64_t __src;
  char *__srca;
  uint64_t __len;
  size_t __lena;
  void *__p[2];
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _QWORD v134[3];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B570, 0);
  if (v4)
  {
    v5 = *(_WORD **)(a1 + 72);
    if (!v5 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v6 = *(_OWORD *)(v4 + 8);
      v7 = *(_OWORD *)(v4 + 24);
      v8 = *(_OWORD *)(v4 + 40);
      v133 = *((_QWORD *)v4 + 7);
      v131 = v7;
      v132 = v8;
      *(_OWORD *)__p = v6;
      sub_2081A22DC((uint64_t)v134, (uint64_t)(v4 + 64));
      v9 = v131;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
      *(_OWORD *)(a1 + 24) = v9;
      *(_OWORD *)(a1 + 40) = v132;
      *(_QWORD *)(a1 + 56) = v133;
      *(_OWORD *)(a1 + 88) = v135;
      *(_QWORD *)(a1 + 104) = v136;
      *(_QWORD *)(a1 + 64) = v134[0];
      v10 = *(void **)(a1 + 72);
      if (v10)
        free(v10);
      v11 = v134[2];
      *(_QWORD *)(a1 + 72) = v134[1];
      *(_QWORD *)(a1 + 80) = v11;
      return;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (!*((_DWORD *)v4 + 2))
        return;
      v54 = *((_DWORD *)v4 + 3);
      if (!v54)
        return;
      v55 = *((_DWORD *)v4 + 4);
      if (!v55)
        return;
      v56 = v54 - 1;
      v57 = *((unsigned int *)v4 + 6);
      v58 = *(unsigned int *)(a1 + 24);
      v59 = (_WORD *)*((_QWORD *)v4 + 9);
      v60 = v55 - 1;
      if (v60)
      {
        v61 = *(unsigned int *)(a1 + 28);
        v62 = *((unsigned int *)v4 + 7);
        if (!v56)
        {
          do
          {
            *v5 = *v59;
            v5[1] = v59[1];
            v59 += v62;
            v5 += v61;
            --v60;
          }
          while (v60);
LABEL_171:
          *v5 = *v59;
          v5[1] = v59[1];
          return;
        }
        v63 = 0;
        v64 = v59 + 1;
        v65 = v5 + 1;
        do
        {
          v66 = v65;
          v67 = v64;
          v68 = v56;
          do
          {
            *(v66 - 1) = *(v67 - 1);
            *v66 = *v67;
            v67 += v57;
            v66 += v58;
            --v68;
          }
          while (v68);
          *(v66 - 1) = *(v67 - 1);
          *v66 = *v67;
          v59 += v62;
          v5 += v61;
          ++v63;
          v64 += v62;
          v65 += v61;
        }
        while (v63 != v60);
      }
      for (; v56; --v56)
      {
        *v5 = *v59;
        v5[1] = v59[1];
        v59 += v57;
        v5 += v58;
      }
      goto LABEL_171;
    }
    v70 = *((unsigned int *)v4 + 6);
    v71 = *(unsigned int *)(a1 + 24);
    v72 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v70 == (_DWORD)v71 && (_DWORD)v70 == (_DWORD)v72)
    {
      v94 = *((unsigned int *)v4 + 7);
      v95 = *(unsigned int *)(a1 + 28);
      v96 = *((_DWORD *)v4 + 3);
      v97 = (v96 * v70);
      if ((_DWORD)v94 == (_DWORD)v95 && (_DWORD)v94 == (_DWORD)v97)
      {
        v98 = (*((_DWORD *)v4 + 4) * v94);
        v99 = (const void *)*((_QWORD *)v4 + 9);
        if ((_DWORD)v98)
          v100 = v99 == 0;
        else
          v100 = 0;
        if (v100)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_186;
          }
          v5 = *(_WORD **)(a1 + 72);
        }
        else if (!(_DWORD)v98)
        {
          return;
        }
        memmove(v5, v99, 2 * v98);
        return;
      }
      if (!(_DWORD)v70)
        return;
      if (!v96)
        return;
      v103 = *((_DWORD *)v4 + 4);
      if (!v103)
        return;
      v104 = (char *)*((_QWORD *)v4 + 9);
      v105 = v103 - 1;
      if (v103 != 1)
      {
        if (!(_DWORD)v97)
          return;
        v106 = 2 * v94;
        v107 = 2 * v95;
        while (v104
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v5, v104, 2 * v97);
          v104 += v106;
          v5 = (_WORD *)((char *)v5 + v107);
          if (!--v105)
            goto LABEL_172;
        }
LABEL_186:
        abort();
      }
LABEL_172:
      if (!(_DWORD)v97 || v104)
      {
        if (!(_DWORD)v97)
          return;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_186;
      }
      v115 = v5;
      v77 = v104;
      v116 = 2 * v97;
    }
    else
    {
      if (!(_DWORD)v72)
        return;
      v74 = *((_DWORD *)v4 + 3);
      if (!v74)
        return;
      v75 = *((_DWORD *)v4 + 4);
      if (!v75)
        return;
      v76 = v74 - 1;
      v77 = (char *)*((_QWORD *)v4 + 9);
      v78 = 2 * v72;
      v125 = v75 - 1;
      __lena = *((unsigned int *)v4 + 6);
      if (v75 != 1)
      {
        if (v74 == 1)
        {
          v108 = 2 * *((unsigned int *)v4 + 7);
          v109 = 2 * *(unsigned int *)(a1 + 28);
          while (1)
          {
            v110 = v77;
            if (!v77
              && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
            memmove(v5, v110, v78);
            v77 = &v110[v108];
            v5 = (_WORD *)((char *)v5 + v109);
            if (!--v125)
              goto LABEL_181;
          }
        }
        else
        {
          v79 = 0;
          v80 = (unsigned __int8 *)&qword_254530A20;
          __srca = (char *)(2 * v70);
          v117 = *((unsigned int *)v4 + 7);
          v119 = *(unsigned int *)(a1 + 28);
          while (1)
          {
            v122 = v79;
            v82 = 0;
            v124 = v77;
            v81 = v77;
            v120 = v5;
            v83 = (char *)v5;
            do
            {
              while (v81)
              {
                memmove(v83, v81, v78);
                v81 += 2 * __lena;
                v83 += 2 * v71;
                if (++v82 == v76)
                  goto LABEL_106;
              }
              v84 = v71;
              v85 = v78;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v86 = v80;
              v87 = atomic_load(v80);
              if ((v87 & 1) == 0 && __cxa_guard_acquire((__guard *)v80))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v80);
              }
              if (byte_254530A10)
                v88 = byte_254530A18 == 0;
              else
                v88 = 0;
              if (!v88)
              {
                v89 = qword_2545309E8;
                v90 = qword_2545309F0;
                while (v89 != v90)
                {
                  v92 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v89;
                  v91 = *(_QWORD *)(v89 + 8);
                  v89 += 16;
                  v92(v91, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v80 = v86;
              v93 = atomic_load(v86);
              if ((v93 & 1) == 0 && __cxa_guard_acquire((__guard *)v86))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v86);
              }
              if (!byte_254530A10)
                goto LABEL_186;
              v78 = v85;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              memcpy(v83, 0, v85);
              v71 = v84;
              v83 += 2 * v84;
              ++v82;
              v81 = __srca;
            }
            while (v82 != v76);
            v81 = __srca;
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
LABEL_106:
            memmove(v83, v81, v78);
            v77 = &v124[2 * v117];
            v5 = &v120[v119];
            v79 = v122 + 1;
            if (v122 + 1 == v125)
              goto LABEL_181;
          }
        }
        goto LABEL_186;
      }
LABEL_181:
      if (v76)
      {
        v111 = 2 * v71;
        do
        {
          if (!v77)
          {
            v113 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v77 = 0;
            if (v113)
              goto LABEL_186;
          }
          v112 = v77;
          memmove(v5, v77, v78);
          v77 = &v112[2 * __lena];
          v5 = (_WORD *)((char *)v5 + v111);
        }
        while (--v76);
      }
      if (!v77)
      {
        v114 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v77 = 0;
        if (v114)
          goto LABEL_186;
      }
      v115 = v5;
      v116 = v78;
    }
    memmove(v115, v77, v116);
    return;
  }
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(__p, lpsrc, 6);
  v12 = __p[0];
  v13 = *(_WORD **)__p[0];
  v15 = *((unsigned int *)__p[0] + 2);
  v14 = *((_DWORD *)__p[0] + 3);
  v16 = *((_DWORD *)__p[0] + 4);
  v17 = *((_DWORD *)__p[0] + 5);
  v18 = *((unsigned int *)__p[0] + 7);
  __src = *((unsigned int *)__p[0] + 6);
  __p[0] = 0;
  operator delete(v12);
  v19 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v20 = *(_DWORD *)(a1 + 32) == 0;
  else
    v20 = 1;
  v21 = *(_QWORD *)(a1 + 32);
  if (v20)
    HIDWORD(v21) = 0;
  LODWORD(__p[0]) = 1;
  *(void **)((char *)__p + 4) = *(void **)(a1 + 40);
  v22 = (unint64_t)__p[0];
  v23 = HIDWORD(*(unint64_t *)((char *)__p + 4));
  if (LODWORD(__p[1]) * HIDWORD(v21) == -1)
  {
    v24 = HIDWORD(*(unint64_t *)((char *)__p + 4));
    v25 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    v23 = v24;
    if (v25)
      abort();
  }
  if (v17 != 1 || v22 != 1)
  {
    if (!(_DWORD)v15 || !v14 || !v16)
      return;
    v31 = v14 - 1;
    v32 = HIDWORD(v22);
    v33 = v16 - 1;
    if (v16 != 1)
    {
      if (v14 == 1)
      {
        do
        {
          *v19 = *v13;
          v19[1] = v13[1];
          v13 += v18;
          v19 += v23;
          --v33;
        }
        while (v33);
LABEL_128:
        *v19 = *v13;
        v19[1] = v13[1];
        return;
      }
      v34 = 0;
      v35 = v13 + 1;
      v36 = v19 + 1;
      do
      {
        v37 = v36;
        v38 = v35;
        v39 = v14 - 1;
        do
        {
          *(v37 - 1) = *(v38 - 1);
          *v37 = *v38;
          v38 += __src;
          v37 += v32;
          --v39;
        }
        while (v39);
        *(v37 - 1) = *(v38 - 1);
        *v37 = *v38;
        v13 += v18;
        v19 += v23;
        ++v34;
        v35 += v18;
        v36 += v23;
      }
      while (v34 != v33);
    }
    if (v14 != 1)
    {
      v40 = 2 * v32;
      do
      {
        *v19 = *v13;
        v19[1] = v13[1];
        v13 += __src;
        v19 = (_WORD *)((char *)v19 + v40);
        --v31;
      }
      while (v31);
    }
    goto LABEL_128;
  }
  v26 = HIDWORD(v22);
  if ((_DWORD)__src == (_DWORD)v15 && (_DWORD)__src == HIDWORD(v22))
  {
    v27 = (v14 * v15);
    if ((_DWORD)v18 == (_DWORD)v27 && (_DWORD)v18 == (_DWORD)v23)
    {
      v69 = (v18 * v16);
      if (v13 || !(_DWORD)v69)
      {
        if (!(_DWORD)v69)
          return;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      memmove(v19, v13, 2 * v69);
      return;
    }
    if ((_DWORD)v15 && v14 && v16)
    {
      v29 = v16 - 1;
      if (v29)
      {
        if (!(_DWORD)v27)
          return;
        v30 = 2 * v23;
        do
        {
          if (!v13
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          memmove(v19, v13, 2 * v27);
          v13 += v18;
          v19 = (_WORD *)((char *)v19 + v30);
          --v29;
        }
        while (v29);
      }
      if (!(_DWORD)v27 || v13)
      {
        if (!(_DWORD)v27)
          return;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      memmove(v19, v13, 2 * v27);
    }
  }
  else if ((_DWORD)v15 && v14 && v16)
  {
    v41 = v14 - 1;
    __len = 2 * v15;
    v123 = v16 - 1;
    if (v16 != 1)
    {
      v118 = v23;
      if (v14 == 1)
      {
        v101 = 2 * v23;
        while (v13
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v19, v13, __len);
          v13 += v18;
          v19 = (_WORD *)((char *)v19 + v101);
          if (!--v123)
            goto LABEL_146;
        }
      }
      else
      {
        v42 = 0;
        while (1)
        {
          v121 = v42;
          v43 = 0;
          v44 = (char *)v13;
          v45 = (char *)v19;
          do
          {
            while (v44)
            {
              memmove(v45, v44, __len);
              v44 += 2 * __src;
              v45 += 2 * v26;
              if (++v43 == v41)
                goto LABEL_53;
            }
            v46 = v19;
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v47 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (byte_254530A10)
              v48 = byte_254530A18 == 0;
            else
              v48 = 0;
            if (!v48)
            {
              v49 = qword_2545309E8;
              v50 = qword_2545309F0;
              while (v49 != v50)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v49)(*(_QWORD *)(v49 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                v49 += 16;
              }
            }
            v51 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              abort();
            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v45, 0, __len);
            v45 += 2 * v26;
            ++v43;
            v44 = (char *)(2 * __src);
            v19 = v46;
          }
          while (v43 != v41);
          v52 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v44 = (char *)(2 * __src);
          v19 = v46;
          if (v52)
            break;
LABEL_53:
          memmove(v45, v44, __len);
          v13 += v18;
          v19 += v118;
          v42 = v121 + 1;
          if (v121 + 1 == v123)
            goto LABEL_146;
        }
      }
      abort();
    }
LABEL_146:
    if (v41)
    {
      v102 = 2 * v26;
      do
      {
        if (!v13
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        memmove(v19, v13, __len);
        v13 += __src;
        v19 = (_WORD *)((char *)v19 + v102);
        --v41;
      }
      while (v41);
    }
    if (!v13
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    memmove(v19, v13, __len);
  }
}

uint64_t sub_20818F0F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20818F0FC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 6
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20818F264@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 6
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20818F3CC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20818F470(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20818F514(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_20818F5B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20818F608@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AB68;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20818F678(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int16 sub_20818F68C@<H0>(uint64_t a1@<X0>, void *lpsrc@<X1>)
{
  char *v4;
  __int128 v5;
  _WORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  BOOL v12;
  int v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  int v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _WORD *v38;
  _WORD *v39;
  _WORD *v40;
  _WORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  int v48;
  BOOL v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _WORD *v58;
  _WORD *v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  _WORD *v63;
  __int16 *v64;
  uint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int16 v69;
  _BOOL4 v70;
  _WORD *v71;
  __int16 *v72;
  __int128 *v73;
  _OWORD *v74;
  unint64_t v75;
  __int128 v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _WORD *v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL4 v96;
  _WORD *v97;
  __int16 *v98;
  uint64_t v99;
  unint64_t v100;
  _OWORD *v101;
  __int128 v102;
  __int16 v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _WORD *v107;
  __int16 *v108;
  __int128 *v109;
  _OWORD *v110;
  unint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _WORD *v121;
  uint64_t v122;
  _BOOL4 v123;
  _WORD *v124;
  __int16 *v125;
  uint64_t v126;
  unint64_t v127;
  _OWORD *v128;
  __int128 v129;
  __int16 v130;
  _BOOL4 v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _WORD *v135;
  __int16 *v136;
  __int128 *v137;
  _OWORD *v138;
  unint64_t v139;
  __int128 v140;
  __int16 v141;
  _BOOL4 v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _WORD *v146;
  __int16 *v147;
  __int128 *v148;
  _OWORD *v149;
  unint64_t v150;
  __int128 v151;
  __int16 v152;
  uint64_t v154;
  uint64_t v155;
  _WORD *v156;
  _WORD *v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166[2];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  _QWORD v171[3];
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  int v175;
  uint64_t v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B588, 0);
  if (v4)
  {
    v6 = *(_WORD **)(a1 + 72);
    if (!v6 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v7 = *(_OWORD *)(v4 + 8);
      v8 = *(_OWORD *)(v4 + 24);
      v9 = *(_OWORD *)(v4 + 40);
      v170 = *((_QWORD *)v4 + 7);
      v168 = v8;
      v169 = v9;
      v167 = v7;
      sub_2081A2CE4((uint64_t)v171, (uint64_t)(v4 + 64));
      v10 = v168;
      *(_OWORD *)(a1 + 8) = v167;
      *(_OWORD *)(a1 + 24) = v10;
      *(_OWORD *)(a1 + 40) = v169;
      *(_QWORD *)(a1 + 56) = v170;
      LOWORD(v5) = v172;
      *(_OWORD *)(a1 + 88) = v172;
      *(_QWORD *)(a1 + 104) = v173;
      v11 = *(void **)(a1 + 72);
      if (v11)
      {
        if (*(_DWORD *)(a1 + 96))
          v12 = *(_DWORD *)(a1 + 92) == 0;
        else
          v12 = 1;
        if (v12 || *(_DWORD *)(a1 + 88) == 0)
          v14 = 0;
        else
          v14 = *(_DWORD *)(a1 + 96);
        if (v14 * (*(_DWORD *)(a1 + 108) >> 1) == -1)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          v11 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 64) = v171[0];
          if (!v11)
            goto LABEL_29;
        }
        else
        {
          *(_QWORD *)(a1 + 64) = v171[0];
        }
        free(v11);
      }
      else
      {
        *(_QWORD *)(a1 + 64) = v171[0];
      }
LABEL_29:
      v26 = v171[2];
      *(_QWORD *)(a1 + 72) = v171[1];
      *(_QWORD *)(a1 + 80) = v26;
      return v5;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (*((_DWORD *)v4 + 2))
      {
        v28 = *((_DWORD *)v4 + 3);
        if (v28)
        {
          v29 = *((_DWORD *)v4 + 4);
          if (v29)
          {
            v30 = v28 - 1;
            v31 = (_WORD *)*((_QWORD *)v4 + 9);
            v32 = 2 * *((unsigned int *)v4 + 6);
            v33 = 2 * *(unsigned int *)(a1 + 24);
            v34 = v29 - 1;
            if (v34)
            {
              v35 = *(unsigned int *)(a1 + 28);
              v36 = *((unsigned int *)v4 + 7);
              if (v30)
              {
                v37 = 0;
                v38 = v31 + 1;
                v39 = v6 + 1;
                do
                {
                  v40 = v39;
                  v41 = v38;
                  v42 = v30;
                  do
                  {
                    *(v40 - 1) = *(v41 - 1);
                    *v40 = *v41;
                    v41 = (_WORD *)((char *)v41 + v32);
                    v40 = (_WORD *)((char *)v40 + v33);
                    --v42;
                  }
                  while (v42);
                  *(v40 - 1) = *(v41 - 1);
                  *v40 = *v41;
                  v31 += v36;
                  v6 += v35;
                  ++v37;
                  v38 += v36;
                  v39 += v35;
                }
                while (v37 != v34);
              }
              else
              {
                v113 = 2 * v36;
                v114 = 2 * v35;
                do
                {
                  *v6 = *v31;
                  v6[1] = v31[1];
                  v31 = (_WORD *)((char *)v31 + v113);
                  v6 = (_WORD *)((char *)v6 + v114);
                  --v34;
                }
                while (v34);
              }
            }
            for (; v30; --v30)
            {
              *v6 = *v31;
              v6[1] = v31[1];
              v31 = (_WORD *)((char *)v31 + v32);
              v6 = (_WORD *)((char *)v6 + v33);
            }
            *v6 = *v31;
            LOWORD(v5) = v31[1];
            v6[1] = v5;
          }
        }
      }
      return v5;
    }
    v43 = *((unsigned int *)v4 + 6);
    v44 = *(unsigned int *)(a1 + 24);
    v45 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v43 != (_DWORD)v44 || (_DWORD)v43 != (_DWORD)v45)
    {
      v48 = *((_DWORD *)v4 + 3);
      v47 = *((_DWORD *)v4 + 4);
      if ((_DWORD)v45)
        v49 = v48 == 0;
      else
        v49 = 1;
      if (v49 || v47 == 0)
        return v5;
      v51 = v48 - 1;
      v52 = *((_QWORD *)v4 + 9);
      v53 = 2 * v44;
      v158 = v47 - 1;
      v163 = *((unsigned int *)v4 + 2);
      v162 = v48 - 1;
      v154 = *((unsigned int *)v4 + 6);
      if (v47 == 1)
      {
        v58 = *(_WORD **)(a1 + 72);
LABEL_123:
        if (v51)
        {
          v116 = 0;
          v117 = 2 * v154;
          v118 = (v45 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v119 = (v118 + 1) & 0xFFFFFFFFFFFFFFF0;
          v120 = v119;
          v121 = v58;
          v122 = v52;
          while (1)
          {
            if (!v52)
            {
              v123 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v51 = v162;
              v45 = v163;
              if (v123)
                goto LABEL_151;
            }
            v124 = v121;
            v125 = (__int16 *)v52;
            if (v118 < 0xF)
              goto LABEL_167;
            v124 = v121;
            v125 = (__int16 *)v52;
            if ((unint64_t)v58 + v53 * v116 - v122 - v117 * v116 < 0x20)
              goto LABEL_167;
            v126 = 0;
            v124 = &v121[v120];
            v125 = (__int16 *)(v52 + v120 * 2);
            v127 = (v118 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v128 = &v121[v126];
              v129 = *(_OWORD *)(v52 + v126 * 2 + 16);
              *v128 = *(_OWORD *)(v52 + v126 * 2);
              v128[1] = v129;
              v126 += 16;
              v127 -= 16;
            }
            while (v127);
            if (v118 + 1 != v119)
            {
LABEL_167:
              do
              {
                v130 = *v125++;
                *v124++ = v130;
              }
              while (v125 != (__int16 *)(v52 + 2 * v45));
            }
            v52 += v117;
            v121 = (_WORD *)((char *)v121 + v53);
            if ((_DWORD)++v116 == v51)
              goto LABEL_136;
          }
        }
        v121 = v58;
LABEL_136:
        if (!v52)
        {
          v131 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v45 = v163;
          if (v131)
LABEL_151:
            abort();
        }
        v132 = (v45 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        if (v132 < 0xF || (unint64_t)v121 - v52 < 0x20)
        {
          v135 = v121;
          v136 = (__int16 *)v52;
        }
        else
        {
          v133 = v132 + 1;
          v134 = (v132 + 1) & 0xFFFFFFFFFFFFFFF0;
          v135 = &v121[v134];
          v136 = (__int16 *)(v52 + 2 * v134);
          v137 = (__int128 *)(v52 + 16);
          v138 = v121 + 8;
          v139 = v134;
          do
          {
            v5 = *(v137 - 1);
            v140 = *v137;
            *(v138 - 1) = v5;
            *v138 = v140;
            v137 += 2;
            v138 += 2;
            v139 -= 16;
          }
          while (v139);
          if (v133 == v134)
            return v5;
        }
        do
        {
          v141 = *v136++;
          LOWORD(v5) = v141;
          *v135++ = v141;
        }
        while (v136 != (__int16 *)(v52 + 2 * v45));
        return v5;
      }
      v161 = 0;
      v54 = (v45 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v159 = 2 * *((unsigned int *)v4 + 7);
      v160 = 2 * *(unsigned int *)(a1 + 28);
      v55 = 2 * v43;
      v165 = v54 + 1;
      v56 = (v54 + 1) & 0xFFFFFFFFFFFFFFF0;
      v57 = v56;
      v155 = *((_QWORD *)v4 + 9);
      v156 = v6;
      v58 = v6;
      while (1)
      {
        v59 = v58;
        v60 = v52;
        if (v51)
        {
          v61 = 0;
          v59 = v58;
          v60 = v52;
          do
          {
            if (!v60)
            {
              v62 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v51 = v162;
              v45 = v163;
              if (v62)
                goto LABEL_151;
            }
            v63 = v59;
            v64 = (__int16 *)v60;
            if (v54 < 0xF)
              goto LABEL_168;
            v63 = v59;
            v64 = (__int16 *)v60;
            if ((unint64_t)v156 + v160 * v161 + v53 * v61 - v155 - v159 * v161 - v55 * v61 < 0x20)
              goto LABEL_168;
            v65 = 0;
            v63 = &v59[v57];
            v64 = (__int16 *)(v60 + v57 * 2);
            v66 = (v54 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v67 = &v59[v65];
              v68 = *(_OWORD *)(v60 + v65 * 2 + 16);
              *v67 = *(_OWORD *)(v60 + v65 * 2);
              v67[1] = v68;
              v65 += 16;
              v66 -= 16;
            }
            while (v66);
            if (v165 != v56)
            {
LABEL_168:
              do
              {
                v69 = *v64++;
                *v63++ = v69;
              }
              while (v64 != (__int16 *)(v60 + 2 * v45));
            }
            v60 += v55;
            v59 = (_WORD *)((char *)v59 + v53);
          }
          while ((_DWORD)++v61 != v51);
        }
        if (!v60)
        {
          v70 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v51 = v162;
          v45 = v163;
          if (v70)
            goto LABEL_151;
        }
        if (v54 < 0xF || (unint64_t)v59 - v60 < 0x20)
        {
          v71 = v59;
          v72 = (__int16 *)v60;
        }
        else
        {
          v71 = &v59[v57];
          v72 = (__int16 *)(v60 + v57 * 2);
          v73 = (__int128 *)(v60 + 16);
          v74 = v59 + 8;
          v75 = (v54 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v76 = *v73;
            *(v74 - 1) = *(v73 - 1);
            *v74 = v76;
            v73 += 2;
            v74 += 2;
            v75 -= 16;
          }
          while (v75);
          if (v165 == v56)
            goto LABEL_58;
        }
        do
        {
          v77 = *v72++;
          *v71++ = v77;
        }
        while (v72 != (__int16 *)(v60 + 2 * v45));
LABEL_58:
        v52 += v159;
        v58 = (_WORD *)((char *)v58 + v160);
        if ((_DWORD)++v161 == v158)
          goto LABEL_123;
      }
    }
    v78 = *((unsigned int *)v4 + 7);
    v79 = *(unsigned int *)(a1 + 28);
    v80 = *((_DWORD *)v4 + 3);
    v81 = (v80 * v43);
    if ((_DWORD)v78 == (_DWORD)v79 && (_DWORD)v78 == (_DWORD)v81)
    {
      v82 = (*((_DWORD *)v4 + 4) * v78);
      v83 = *((_QWORD *)v4 + 9);
      if ((_DWORD)v82)
        v84 = v83 == 0;
      else
        v84 = 0;
      if (v84)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_151;
        }
        v6 = *(_WORD **)(a1 + 72);
      }
      else if (!(_DWORD)v82)
      {
        return v5;
      }
      v104 = (v82 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v104 < 0xF || (unint64_t)v6 - v83 < 0x20)
      {
        v107 = v6;
        v108 = (__int16 *)v83;
      }
      else
      {
        v105 = v104 + 1;
        v106 = (v104 + 1) & 0xFFFFFFFFFFFFFFF0;
        v107 = &v6[v106];
        v108 = (__int16 *)(v83 + 2 * v106);
        v109 = (__int128 *)(v83 + 16);
        v110 = v6 + 8;
        v111 = v106;
        do
        {
          v5 = *(v109 - 1);
          v112 = *v109;
          *(v110 - 1) = v5;
          *v110 = v112;
          v109 += 2;
          v110 += 2;
          v111 -= 16;
        }
        while (v111);
        if (v105 == v106)
          return v5;
      }
      do
      {
        v115 = *v108++;
        LOWORD(v5) = v115;
        *v107++ = v115;
      }
      while (v108 != (__int16 *)(v83 + 2 * v82));
      return v5;
    }
    if ((_DWORD)v43)
    {
      if (v80)
      {
        v85 = *((_DWORD *)v4 + 4);
        if (v85)
        {
          v86 = *((_QWORD *)v4 + 9);
          v87 = v85 - 1;
          v164 = v81;
          if (v85 == 1)
          {
            v93 = *(_WORD **)(a1 + 72);
            v95 = *((_QWORD *)v4 + 9);
          }
          else
          {
            if (!(_DWORD)v81)
              return v5;
            v88 = 0;
            v89 = 2 * v79;
            v90 = 2 * v78;
            v91 = (v81 - 1) & 0x7FFFFFFFFFFFFFFFLL;
            v92 = (v91 + 1) & 0xFFFFFFFFFFFFFFF0;
            v93 = v6;
            v94 = v92;
            v157 = v6;
            v95 = *((_QWORD *)v4 + 9);
            do
            {
              if (!v95)
              {
                v96 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                v81 = v164;
                if (v96)
                  goto LABEL_151;
              }
              v97 = v93;
              v98 = (__int16 *)v95;
              if (v91 < 0xF)
                goto LABEL_169;
              v97 = v93;
              v98 = (__int16 *)v95;
              if ((unint64_t)v157 + v89 * v88 - v86 - v90 * v88 < 0x20)
                goto LABEL_169;
              v99 = 0;
              v97 = &v93[v94];
              v98 = (__int16 *)(v95 + v94 * 2);
              v100 = (v91 + 1) & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v101 = &v93[v99];
                v5 = *(_OWORD *)(v95 + v99 * 2);
                v102 = *(_OWORD *)(v95 + v99 * 2 + 16);
                *v101 = v5;
                v101[1] = v102;
                v99 += 16;
                v100 -= 16;
              }
              while (v100);
              if (v91 + 1 != v92)
              {
LABEL_169:
                do
                {
                  v103 = *v98++;
                  LOWORD(v5) = v103;
                  *v97++ = v103;
                }
                while (v98 != (__int16 *)(v95 + 2 * v81));
              }
              v95 += v90;
              v93 = (_WORD *)((char *)v93 + v89);
              ++v88;
            }
            while ((_DWORD)v88 != v87);
          }
          if (!(_DWORD)v81 || v95)
          {
            if (!(_DWORD)v81)
              return v5;
          }
          else
          {
            v142 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v81 = v164;
            if (v142)
              goto LABEL_151;
          }
          v143 = (v81 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v143 < 0xF || (unint64_t)v93 - v95 < 0x20)
          {
            v146 = v93;
            v147 = (__int16 *)v95;
          }
          else
          {
            v144 = v143 + 1;
            v145 = (v143 + 1) & 0xFFFFFFFFFFFFFFF0;
            v146 = &v93[v145];
            v147 = (__int16 *)(v95 + 2 * v145);
            v148 = (__int128 *)(v95 + 16);
            v149 = v93 + 8;
            v150 = v145;
            do
            {
              v5 = *(v148 - 1);
              v151 = *v148;
              *(v149 - 1) = v5;
              *v149 = v151;
              v148 += 2;
              v149 += 2;
              v150 -= 16;
            }
            while (v150);
            if (v144 == v145)
              return v5;
          }
          do
          {
            v152 = *v147++;
            LOWORD(v5) = v152;
            *v146++ = v152;
          }
          while (v147 != (__int16 *)(v95 + 2 * v81));
        }
      }
    }
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v174, lpsrc, 7);
    v15 = (void *)v174;
    v17 = *(_OWORD *)(v174 + 16);
    v16 = *(_OWORD *)(v174 + 32);
    v167 = *(_OWORD *)v174;
    v168 = v17;
    v169 = v16;
    *(_QWORD *)&v174 = 0;
    operator delete(v15);
    v18 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v19 = *(_DWORD *)(a1 + 32) == 0;
    else
      v19 = 1;
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    if (v19)
      v20 = 0;
    *(_QWORD *)((char *)&v174 + 4) = v20;
    v22 = v20;
    LODWORD(v174) = 2;
    v23 = v174;
    v24 = HIDWORD(v20);
    LODWORD(v174) = 1;
    *(_QWORD *)((char *)&v174 + 4) = v21;
    v25 = v174;
    if (HIDWORD(v21) * HIDWORD(v20) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&v174 = v18;
    *((_QWORD *)&v174 + 1) = v23;
    v175 = v24;
    v176 = v25;
    v177 = HIDWORD(v21);
    v178 = v22;
    v179 = v21;
    v166[0] = (uint64_t)&v167;
    v166[1] = (uint64_t)&v174;
    LOWORD(v5) = sub_2080F680C(v166);
  }
  return v5;
}

void sub_20819019C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,int a34,int a35,int a36,int a37,unsigned int a38)
{
  void *v39;
  int v40;
  BOOL v41;

  v39 = a31;
  if (a31)
  {
    v40 = a35;
    if (a35)
      v41 = a34 == 0;
    else
      v41 = 1;
    if (v41 || a33 == 0)
      v40 = 0;
    if (v40 * (a38 >> 1) == -1)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v39 = a31;
    }
    free(v39);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_208190224(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_208190240(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208190248@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2081903B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208190518(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208190548(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208190574()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_2081905C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08ABE8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208190638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20819064C(uint64_t a1, void *lpsrc)
{
  char *v4;
  _DWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  int v44;
  int v45;
  char *v46;
  size_t v47;
  int v48;
  unsigned __int8 *v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t v53;
  size_t v54;
  unsigned __int8 *v55;
  unsigned __int8 v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  BOOL v69;
  int v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _BOOL4 v80;
  _BOOL4 v81;
  void *v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  int v87;
  char *v88;
  int v89;
  char *__src;
  uint64_t v91;
  uint64_t v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[3];
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B5A0, 0);
  if (v4)
  {
    v5 = *(_DWORD **)(a1 + 72);
    if (!v5 || *(_QWORD *)(v4 + 12) != *(_QWORD *)(a1 + 12) || *((_QWORD *)v4 + 3) != *(_QWORD *)(a1 + 24))
    {
      v6 = *(_OWORD *)(v4 + 8);
      v7 = *(_OWORD *)(v4 + 24);
      v8 = *(_OWORD *)(v4 + 40);
      v96 = *((_QWORD *)v4 + 7);
      v94 = v7;
      v95 = v8;
      v93 = v6;
      sub_207D5C5E8((uint64_t)v97, (uint64_t)(v4 + 64));
      v9 = v94;
      *(_OWORD *)(a1 + 8) = v93;
      *(_OWORD *)(a1 + 24) = v9;
      *(_OWORD *)(a1 + 40) = v95;
      *(_QWORD *)(a1 + 56) = v96;
      *(_OWORD *)(a1 + 88) = v98;
      *(_QWORD *)(a1 + 104) = v99;
      *(_QWORD *)(a1 + 64) = v97[0];
      v10 = *(void **)(a1 + 72);
      if (v10)
        free(v10);
      v11 = v97[2];
      *(_QWORD *)(a1 + 72) = v97[1];
      *(_QWORD *)(a1 + 80) = v11;
      return;
    }
    if (*((_DWORD *)v4 + 5) != 1 || *(_DWORD *)(a1 + 20) != 1)
    {
      if (!*((_DWORD *)v4 + 2))
        return;
      v24 = *((_DWORD *)v4 + 3);
      if (!v24)
        return;
      v25 = *((_DWORD *)v4 + 4);
      if (!v25)
        return;
      v26 = v24 - 1;
      v27 = *((unsigned int *)v4 + 6);
      v28 = *(unsigned int *)(a1 + 24);
      v29 = (_DWORD *)*((_QWORD *)v4 + 9);
      v30 = v25 - 1;
      if (v30)
      {
        v31 = *(unsigned int *)(a1 + 28);
        v32 = *((unsigned int *)v4 + 7);
        if (!v26)
        {
          do
          {
            *v5 = *v29;
            v5[1] = v29[1];
            v29 += v32;
            v5 += v31;
            --v30;
          }
          while (v30);
LABEL_85:
          *v5 = *v29;
          v5[1] = v29[1];
          return;
        }
        v33 = 0;
        v34 = v29 + 1;
        v35 = v5 + 1;
        do
        {
          v36 = v35;
          v37 = v34;
          v38 = v26;
          do
          {
            *(v36 - 1) = *(v37 - 1);
            *v36 = *v37;
            v37 += v27;
            v36 += v28;
            --v38;
          }
          while (v38);
          *(v36 - 1) = *(v37 - 1);
          *v36 = *v37;
          v29 += v32;
          v5 += v31;
          ++v33;
          v34 += v32;
          v35 += v31;
        }
        while (v33 != v30);
      }
      for (; v26; --v26)
      {
        *v5 = *v29;
        v5[1] = v29[1];
        v29 += v27;
        v5 += v28;
      }
      goto LABEL_85;
    }
    v39 = *((unsigned int *)v4 + 6);
    v40 = *(unsigned int *)(a1 + 24);
    v41 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v39 == (_DWORD)v40 && (_DWORD)v39 == (_DWORD)v41)
    {
      v63 = *((unsigned int *)v4 + 7);
      v64 = *(unsigned int *)(a1 + 28);
      v65 = *((_DWORD *)v4 + 3);
      v66 = (v65 * v39);
      if ((_DWORD)v63 == (_DWORD)v64 && (_DWORD)v63 == (_DWORD)v66)
      {
        v67 = (*((_DWORD *)v4 + 4) * v63);
        v68 = (const void *)*((_QWORD *)v4 + 9);
        if ((_DWORD)v67)
          v69 = v68 == 0;
        else
          v69 = 0;
        if (v69)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_100;
          }
          v5 = *(_DWORD **)(a1 + 72);
        }
        else if (!(_DWORD)v67)
        {
          return;
        }
        memmove(v5, v68, 4 * v67);
        return;
      }
      if (!(_DWORD)v39)
        return;
      if (!v65)
        return;
      v70 = *((_DWORD *)v4 + 4);
      if (!v70)
        return;
      v71 = (char *)*((_QWORD *)v4 + 9);
      v72 = v70 - 1;
      if (v70 != 1)
      {
        if (!(_DWORD)v66)
          return;
        v73 = 4 * v63;
        v74 = 4 * v64;
        while (v71
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v5, v71, 4 * v66);
          v71 += v73;
          v5 = (_DWORD *)((char *)v5 + v74);
          if (!--v72)
            goto LABEL_86;
        }
LABEL_100:
        abort();
      }
LABEL_86:
      if (!(_DWORD)v66 || v71)
      {
        if (!(_DWORD)v66)
          return;
      }
      else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      v82 = v5;
      v46 = v71;
      v83 = 4 * v66;
    }
    else
    {
      if (!(_DWORD)v41)
        return;
      v43 = *((_DWORD *)v4 + 3);
      if (!v43)
        return;
      v44 = *((_DWORD *)v4 + 4);
      if (!v44)
        return;
      v45 = v43 - 1;
      v46 = (char *)*((_QWORD *)v4 + 9);
      v47 = 4 * v41;
      v89 = v44 - 1;
      v91 = *((unsigned int *)v4 + 6);
      if (v44 != 1)
      {
        if (v43 == 1)
        {
          v75 = 4 * *((unsigned int *)v4 + 7);
          v76 = 4 * *(unsigned int *)(a1 + 28);
          while (1)
          {
            v77 = v46;
            if (!v46
              && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
            memmove(v5, v77, v47);
            v46 = &v77[v75];
            v5 = (_DWORD *)((char *)v5 + v76);
            if (!--v89)
              goto LABEL_95;
          }
        }
        else
        {
          v48 = 0;
          v49 = (unsigned __int8 *)&qword_254530A20;
          __src = (char *)(4 * v39);
          v84 = *((unsigned int *)v4 + 7);
          v85 = *(unsigned int *)(a1 + 28);
          while (1)
          {
            v87 = v48;
            v51 = 0;
            v88 = v46;
            v50 = v46;
            v86 = v5;
            v52 = (char *)v5;
            do
            {
              while (v50)
              {
                memmove(v52, v50, v47);
                v50 += 4 * v91;
                v52 += 4 * v40;
                if (++v51 == v45)
                  goto LABEL_44;
              }
              v53 = v40;
              v54 = v47;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v55 = v49;
              v56 = atomic_load(v49);
              if ((v56 & 1) == 0 && __cxa_guard_acquire((__guard *)v49))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v49);
              }
              if (byte_254530A10)
                v57 = byte_254530A18 == 0;
              else
                v57 = 0;
              if (!v57)
              {
                v58 = qword_2545309E8;
                v59 = qword_2545309F0;
                while (v58 != v59)
                {
                  v61 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v58;
                  v60 = *(_QWORD *)(v58 + 8);
                  v58 += 16;
                  v61(v60, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v49 = v55;
              v62 = atomic_load(v55);
              if ((v62 & 1) == 0 && __cxa_guard_acquire((__guard *)v55))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release((__guard *)v55);
              }
              if (!byte_254530A10)
                goto LABEL_100;
              v47 = v54;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              memcpy(v52, 0, v54);
              v40 = v53;
              v52 += 4 * v53;
              ++v51;
              v50 = __src;
            }
            while (v51 != v45);
            v50 = __src;
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
LABEL_44:
            memmove(v52, v50, v47);
            v46 = &v88[4 * v84];
            v5 = &v86[v85];
            v48 = v87 + 1;
            if (v87 + 1 == v89)
              goto LABEL_95;
          }
        }
        goto LABEL_100;
      }
LABEL_95:
      if (v45)
      {
        v78 = 4 * v40;
        do
        {
          if (!v46)
          {
            v80 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v46 = 0;
            if (v80)
              goto LABEL_100;
          }
          v79 = v46;
          memmove(v5, v46, v47);
          v46 = &v79[4 * v91];
          v5 = (_DWORD *)((char *)v5 + v78);
        }
        while (--v45);
      }
      if (!v46)
      {
        v81 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v46 = 0;
        if (v81)
          goto LABEL_100;
      }
      v82 = v5;
      v83 = v47;
    }
    memmove(v82, v46, v83);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v100, lpsrc, 8);
  v12 = (void *)v100;
  v14 = *(_OWORD *)(v100 + 16);
  v13 = *(_OWORD *)(v100 + 32);
  v93 = *(_OWORD *)v100;
  v94 = v14;
  v95 = v13;
  *(_QWORD *)&v100 = 0;
  operator delete(v12);
  v15 = *(_QWORD *)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v16 = *(_DWORD *)(a1 + 32) == 0;
  else
    v16 = 1;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  if (v16)
    v17 = 0;
  *(_QWORD *)((char *)&v100 + 4) = v17;
  v19 = v17;
  LODWORD(v100) = 2;
  v20 = v100;
  v21 = HIDWORD(v17);
  LODWORD(v100) = 1;
  *(_QWORD *)((char *)&v100 + 4) = v18;
  v22 = v100;
  if (HIDWORD(v18) * HIDWORD(v17) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&v100 = v15;
  *((_QWORD *)&v100 + 1) = v20;
  v101 = v21;
  v102 = v22;
  v103 = HIDWORD(v18);
  v104 = v19;
  v105 = v18;
  v92[0] = (uint64_t)&v93;
  v92[1] = (uint64_t)&v100;
  sub_2080F800C(v92);
}

uint64_t sub_208190F78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208190F80@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2081910E8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208191250(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208191280(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_2081912AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208191300@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AC68;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208191370(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208191384(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  size_t v32[2];
  __int128 __p;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B5B8, 0);
  if (v4)
  {
    sub_2081B9128(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 9);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v29 = *(_OWORD *)__p;
    v30 = v7;
    v31 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_BYTE **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 3;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    v16 = HIDWORD(v11);
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v34 = v14;
    v35 = v15;
    v36 = HIDWORD(v11);
    v37 = v12;
    v38 = v11;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    {
      sub_2080F3514(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
    {
      v17 = HIDWORD(v15);
      v18 = HIDWORD(v29) - 1;
      v19 = DWORD2(v30);
      v20 = (_BYTE *)v29;
      v21 = v30 - 1;
      if ((_DWORD)v30 != 1)
      {
        v22 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *v8 = *v20;
            v8[1] = v20[1];
            v8[2] = v20[2];
            v20 += v22;
            v8 += v16;
            --v21;
          }
          while (v21);
        }
        else
        {
          v23 = 0;
          v24 = v8 + 2;
          v25 = (_BYTE *)(v29 + 2);
          do
          {
            v26 = v25;
            v27 = v24;
            v28 = v18;
            do
            {
              *(v27 - 2) = *(v26 - 2);
              *(v27 - 1) = *(v26 - 1);
              *v27 = *v26;
              v27 += v17;
              v26 += v19;
              --v28;
            }
            while (v28);
            *(v27 - 2) = *(v26 - 2);
            *(v27 - 1) = *(v26 - 1);
            *v27 = *v26;
            v20 += v22;
            v8 += v16;
            ++v23;
            v24 += v16;
            v25 += v22;
          }
          while (v23 != v21);
        }
      }
      for (; v18; --v18)
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 += v17;
      }
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
    }
  }
}

uint64_t sub_208191688(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208191690@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 9
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2081917F8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 9
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208191960(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208191990(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_2081919BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208191A10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08ACE8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208191A80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208191A94(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 __p;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B5D0, 0);
  if (v4)
  {
    sub_2081B986C(a1 + 8, v4 + 2);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 10);
  v5 = (void *)__p;
  v7 = *(_OWORD *)(__p + 16);
  v6 = *(_OWORD *)(__p + 32);
  v30 = *(_OWORD *)__p;
  v31 = v7;
  v32 = v6;
  *(_QWORD *)&__p = 0;
  operator delete(v5);
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(__p) = 3;
  *(_QWORD *)((char *)&__p + 4) = v10;
  v12 = v10;
  v13 = __p;
  v14 = HIDWORD(v10);
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = v11;
  v15 = __p;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&__p = v8;
  *((_QWORD *)&__p + 1) = v13;
  v35 = v14;
  v36 = v15;
  v37 = HIDWORD(v11);
  v38 = v12;
  v39 = v11;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&__p;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_2080F4F10(v33);
    return;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (_WORD *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_WORD *)(v30 + 4);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
}

uint64_t sub_208191DB8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208191DC0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 10
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208191F28@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 10
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208192090(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_208192134(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 64);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

uint64_t sub_2081921D8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819227C(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_20819231C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208192370@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AD68;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2081923E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_2081923F4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD v16[3];
  __int128 __p;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B5E8, 0);
  if (v4)
  {
    sub_2081B9FE0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 11);
    v6 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v16[0] = *(_OWORD *)__p;
    v16[1] = v7;
    v16[2] = *(_OWORD *)(__p + 32);
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 3;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v18 = v14;
    v19 = v15;
    v20 = HIDWORD(v11);
    v21 = v12;
    v22 = v11;
    *(_QWORD *)&result = sub_2081BA9E8((uint64_t)v16, (uint64_t)&__p);
  }
  return result;
}

uint64_t sub_2081925BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_2081925C4@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 11
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819272C@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 11
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208192894(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2081928C4(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_2081928F0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208192944@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08ADE8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2081929B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_2081929C8(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  float *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 __p;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B600, 0);
  if (v4)
  {
    sub_2081BB2B8(a1 + 8, v4 + 2);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 12);
  v6 = (void *)__p;
  v7 = *(_OWORD *)(__p + 16);
  v30 = *(_OWORD *)__p;
  v31 = v7;
  v32 = *(_OWORD *)(__p + 32);
  *(_QWORD *)&__p = 0;
  operator delete(v6);
  v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(__p) = 3;
  *(_QWORD *)((char *)&__p + 4) = v10;
  v12 = v10;
  v13 = __p;
  v14 = HIDWORD(v10);
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = v11;
  v15 = __p;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&__p = v8;
  *((_QWORD *)&__p + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_2081BBA2C(&v30, (char **)&__p);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (float *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        result = v20[2];
        v8[2] = result;
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_DWORD *)(v30 + 8);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 4 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_208192CE4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208192CEC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 12
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208192E54@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 12
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208192FBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208192FEC(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208193018()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819306C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AE68;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2081930DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2081930F0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B618, 0);
  if (v4)
  {
    sub_2081BBFEC(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 13);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F3514(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F3FF4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_20819330C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208193314@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 13
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819347C@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 13
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2081935E4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208193614(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208193640()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208193694@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AEE8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208193704(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208193718(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B630, 0);
  if (v4)
  {
    sub_2081BC758(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 14);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F4F10(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F58C4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_208193934(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819393C@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 14
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208193AA4@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 14
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208193C0C(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_208193CB0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 64);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

uint64_t sub_208193D54(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208193DF8(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_208193E98()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208193EEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AF68;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208193F5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_208193F70(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  _QWORD v18[2];
  __int128 __p;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B648, 0);
  if (v4)
  {
    sub_2081BCEF4(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 15);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17[0] = *(_OWORD *)__p;
    v17[1] = v8;
    v17[2] = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v20 = v15;
    v21 = v16;
    v22 = HIDWORD(v12);
    v23 = v13;
    v24 = v12;
    v18[0] = v17;
    v18[1] = &__p;
    return sub_2080F7420(v18);
  }
  return result;
}

uint64_t sub_208194140(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208194148@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 15
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2081942B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 15
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208194418(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208194448(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208194474()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_2081944C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08AFE8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208194538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_20819454C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 __p;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B660, 0);
  if (v4)
  {
    sub_2081BD924(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 16);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17 = *(_OWORD *)__p;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&__p;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2080F8148(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_2080F88E8((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&__p);
        }
      }
    }
  }
  return result;
}

uint64_t sub_208194768(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208194770@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 16
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2081948D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 16
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208194A40(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208194A70(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208194A9C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208194AF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B068;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208194B60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208194B74(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  size_t v32[2];
  __int128 __p;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B678, 0);
  if (v4)
  {
    sub_2081B9128(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 17);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v29 = *(_OWORD *)__p;
    v30 = v7;
    v31 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_BYTE **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 3;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    v16 = HIDWORD(v11);
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v34 = v14;
    v35 = v15;
    v36 = HIDWORD(v11);
    v37 = v12;
    v38 = v11;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    {
      sub_2080F3514(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
    {
      v17 = HIDWORD(v15);
      v18 = HIDWORD(v29) - 1;
      v19 = DWORD2(v30);
      v20 = (_BYTE *)v29;
      v21 = v30 - 1;
      if ((_DWORD)v30 != 1)
      {
        v22 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *v8 = *v20;
            v8[1] = v20[1];
            v8[2] = v20[2];
            v20 += v22;
            v8 += v16;
            --v21;
          }
          while (v21);
        }
        else
        {
          v23 = 0;
          v24 = v8 + 2;
          v25 = (_BYTE *)(v29 + 2);
          do
          {
            v26 = v25;
            v27 = v24;
            v28 = v18;
            do
            {
              *(v27 - 2) = *(v26 - 2);
              *(v27 - 1) = *(v26 - 1);
              *v27 = *v26;
              v27 += v17;
              v26 += v19;
              --v28;
            }
            while (v28);
            *(v27 - 2) = *(v26 - 2);
            *(v27 - 1) = *(v26 - 1);
            *v27 = *v26;
            v20 += v22;
            v8 += v16;
            ++v23;
            v24 += v16;
            v25 += v22;
          }
          while (v23 != v21);
        }
      }
      for (; v18; --v18)
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 += v17;
      }
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
    }
  }
}

uint64_t sub_208194E78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208194E80@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 17
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208194FE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 17
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208195150(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208195180(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_2081951AC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208195200@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B0E8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208195270(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208195284(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 __p;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B690, 0);
  if (v4)
  {
    sub_2081B986C(a1 + 8, v4 + 2);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 18);
  v5 = (void *)__p;
  v7 = *(_OWORD *)(__p + 16);
  v6 = *(_OWORD *)(__p + 32);
  v30 = *(_OWORD *)__p;
  v31 = v7;
  v32 = v6;
  *(_QWORD *)&__p = 0;
  operator delete(v5);
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(__p) = 3;
  *(_QWORD *)((char *)&__p + 4) = v10;
  v12 = v10;
  v13 = __p;
  v14 = HIDWORD(v10);
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = v11;
  v15 = __p;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&__p = v8;
  *((_QWORD *)&__p + 1) = v13;
  v35 = v14;
  v36 = v15;
  v37 = HIDWORD(v11);
  v38 = v12;
  v39 = v11;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&__p;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_2080F4F10(v33);
    return;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (_WORD *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_WORD *)(v30 + 4);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
}

uint64_t sub_2081955A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_2081955B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 18
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208195718@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 18
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208195880(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_208195924(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2081959C8(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_208195A68()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208195ABC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B168;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208195B2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_208195B40(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD v16[3];
  __int128 __p;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B6A8, 0);
  if (v4)
  {
    sub_2081B9FE0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 19);
    v6 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v16[0] = *(_OWORD *)__p;
    v16[1] = v7;
    v16[2] = *(_OWORD *)(__p + 32);
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 3;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v18 = v14;
    v19 = v15;
    v20 = HIDWORD(v11);
    v21 = v12;
    v22 = v11;
    *(_QWORD *)&result = sub_2081BA9E8((uint64_t)v16, (uint64_t)&__p);
  }
  return result;
}

uint64_t sub_208195D08(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208195D10@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 19
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208195E78@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 19
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208195FE0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208196010(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819603C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208196090@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B1E8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208196100(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_208196114(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  float *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 __p;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B6C0, 0);
  if (v4)
  {
    sub_2081BB2B8(a1 + 8, v4 + 2);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 20);
  v6 = (void *)__p;
  v7 = *(_OWORD *)(__p + 16);
  v30 = *(_OWORD *)__p;
  v31 = v7;
  v32 = *(_OWORD *)(__p + 32);
  *(_QWORD *)&__p = 0;
  operator delete(v6);
  v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(__p) = 3;
  *(_QWORD *)((char *)&__p + 4) = v10;
  v12 = v10;
  v13 = __p;
  v14 = HIDWORD(v10);
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = v11;
  v15 = __p;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&__p = v8;
  *((_QWORD *)&__p + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_2081BBA2C(&v30, (char **)&__p);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (float *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        result = v20[2];
        v8[2] = result;
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_DWORD *)(v30 + 8);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 4 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_208196430(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208196438@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2081965A0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208196708(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208196738(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208196764()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_2081967B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C07A038;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208196828(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20819683C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  size_t v32[2];
  __int128 __p;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C07A0A8, 0);
  if (v4)
  {
    sub_2081B9128(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 21);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v29 = *(_OWORD *)__p;
    v30 = v7;
    v31 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_BYTE **)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 3;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    v16 = HIDWORD(v11);
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v34 = v14;
    v35 = v15;
    v36 = HIDWORD(v11);
    v37 = v12;
    v38 = v11;
    v32[0] = (size_t)&v29;
    v32[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v30) == 1)
    {
      sub_2080F3514(v32);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && (_DWORD)v30)
    {
      v17 = HIDWORD(v15);
      v18 = HIDWORD(v29) - 1;
      v19 = DWORD2(v30);
      v20 = (_BYTE *)v29;
      v21 = v30 - 1;
      if ((_DWORD)v30 != 1)
      {
        v22 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *v8 = *v20;
            v8[1] = v20[1];
            v8[2] = v20[2];
            v20 += v22;
            v8 += v16;
            --v21;
          }
          while (v21);
        }
        else
        {
          v23 = 0;
          v24 = v8 + 2;
          v25 = (_BYTE *)(v29 + 2);
          do
          {
            v26 = v25;
            v27 = v24;
            v28 = v18;
            do
            {
              *(v27 - 2) = *(v26 - 2);
              *(v27 - 1) = *(v26 - 1);
              *v27 = *v26;
              v27 += v17;
              v26 += v19;
              --v28;
            }
            while (v28);
            *(v27 - 2) = *(v26 - 2);
            *(v27 - 1) = *(v26 - 1);
            *v27 = *v26;
            v20 += v22;
            v8 += v16;
            ++v23;
            v24 += v16;
            v25 += v22;
          }
          while (v23 != v21);
        }
      }
      for (; v18; --v18)
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 += v17;
      }
      *v8 = *v20;
      v8[1] = v20[1];
      v8[2] = v20[2];
    }
  }
}

uint64_t sub_208196B40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208196B48@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 21
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208196CB0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 21
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208196E18(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208196E48(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208196E74()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208196EC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C080D70;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208196F38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208196F4C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  _WORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  __int128 __p;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0813F8, 0);
  if (v4)
  {
    sub_2081B986C(a1 + 8, v4 + 2);
    return;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 22);
  v5 = (void *)__p;
  v7 = *(_OWORD *)(__p + 16);
  v6 = *(_OWORD *)(__p + 32);
  v30 = *(_OWORD *)__p;
  v31 = v7;
  v32 = v6;
  *(_QWORD *)&__p = 0;
  operator delete(v5);
  v8 = *(_WORD **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(__p) = 3;
  *(_QWORD *)((char *)&__p + 4) = v10;
  v12 = v10;
  v13 = __p;
  v14 = HIDWORD(v10);
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = v11;
  v15 = __p;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&__p = v8;
  *((_QWORD *)&__p + 1) = v13;
  v35 = v14;
  v36 = v15;
  v37 = HIDWORD(v11);
  v38 = v12;
  v39 = v11;
  v33[0] = (uint64_t)&v30;
  v33[1] = (uint64_t)&__p;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_2080F4F10(v33);
    return;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (_WORD *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        return;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_WORD *)(v30 + 4);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 2 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (_WORD *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
}

uint64_t sub_208197270(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208197278@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 22
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_2081973E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 22
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208197548(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2081975EC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208197690(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_208197730()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208197784@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C080DF0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2081977F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_208197808(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD v16[3];
  __int128 __p;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081410, 0);
  if (v4)
  {
    sub_2081B9FE0(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 23);
    v6 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v16[0] = *(_OWORD *)__p;
    v16[1] = v7;
    v16[2] = *(_OWORD *)(__p + 32);
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 3;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v18 = v14;
    v19 = v15;
    v20 = HIDWORD(v11);
    v21 = v12;
    v22 = v11;
    *(_QWORD *)&result = sub_2081BA9E8((uint64_t)v16, (uint64_t)&__p);
  }
  return result;
}

uint64_t sub_2081979D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_2081979D8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 23
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208197B40@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 23
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208197CA8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208197CD8(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208197D04()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208197D58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C080E70;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208197DC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_208197DDC(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  float *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  float *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 __p;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081428, 0);
  if (v4)
  {
    sub_2081BB2B8(a1 + 8, v4 + 2);
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 24);
  v6 = (void *)__p;
  v7 = *(_OWORD *)(__p + 16);
  v30 = *(_OWORD *)__p;
  v31 = v7;
  v32 = *(_OWORD *)(__p + 32);
  *(_QWORD *)&__p = 0;
  operator delete(v6);
  v8 = *(float **)(a1 + 72);
  if (*(_DWORD *)(a1 + 36))
    v9 = *(_DWORD *)(a1 + 32) == 0;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v9)
    v10 = 0;
  LODWORD(__p) = 3;
  *(_QWORD *)((char *)&__p + 4) = v10;
  v12 = v10;
  v13 = __p;
  v14 = HIDWORD(v10);
  LODWORD(__p) = 1;
  *(_QWORD *)((char *)&__p + 4) = v11;
  v15 = __p;
  v16 = HIDWORD(v11);
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)&__p = v8;
  *((_QWORD *)&__p + 1) = v13;
  v34 = v14;
  v35 = v15;
  v36 = HIDWORD(v11);
  v37 = v12;
  v38 = v11;
  if ((_DWORD)v15 == 1 && DWORD1(v31) == 1)
  {
    sub_2081BBA2C(&v30, (char **)&__p);
    return result;
  }
  if (DWORD2(v30) && HIDWORD(v30) && (_DWORD)v31)
  {
    v17 = HIDWORD(v15);
    v18 = HIDWORD(v30) - 1;
    v19 = DWORD2(v31);
    v20 = (float *)v30;
    v21 = v31 - 1;
    if ((_DWORD)v31 != 1)
    {
      v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *v8 = *v20;
          v8[1] = v20[1];
          v8[2] = v20[2];
          v20 += v22;
          v8 += v16;
          --v21;
        }
        while (v21);
LABEL_27:
        *v8 = *v20;
        v8[1] = v20[1];
        result = v20[2];
        v8[2] = result;
        return result;
      }
      v23 = 0;
      v24 = v8 + 2;
      v25 = (_DWORD *)(v30 + 8);
      do
      {
        v26 = v25;
        v27 = v24;
        v28 = v18;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *v27 = *v26;
          v27 += v17;
          v26 += v19;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *v27 = *v26;
        v20 += v22;
        v8 += v16;
        ++v23;
        v24 += v16;
        v25 += v22;
      }
      while (v23 != v21);
    }
    if (v18)
    {
      v29 = 4 * v17;
      do
      {
        *v8 = *v20;
        v8[1] = v20[1];
        v8[2] = v20[2];
        v20 += v19;
        v8 = (float *)((char *)v8 + v29);
        --v18;
      }
      while (v18);
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_2081980F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208198100@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 24
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208198268@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 24
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2081983D0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208198400(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819842C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208198480@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C080EF0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2081984F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208198504(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081440, 0);
  if (v4)
  {
    sub_2081BBFEC(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 25);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F3514(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F3FF4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_208198720(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208198728@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 25
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208198890@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 25
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_2081989F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208198A28(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208198A54()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208198AA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B268;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208198B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208198B2C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B6D8, 0);
  if (v4)
  {
    sub_2081BC758(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 26);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F4F10(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F58C4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_208198D48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208198D50@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 26
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208198EB8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 26
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208199020(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_2081990C4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208199168(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_208199208()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819925C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B2E8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2081992CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_2081992E0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  _QWORD v18[2];
  __int128 __p;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B6F0, 0);
  if (v4)
  {
    sub_2081BCEF4(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 27);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17[0] = *(_OWORD *)__p;
    v17[1] = v8;
    v17[2] = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v20 = v15;
    v21 = v16;
    v22 = HIDWORD(v12);
    v23 = v13;
    v24 = v12;
    v18[0] = v17;
    v18[1] = &__p;
    return sub_2080F7420(v18);
  }
  return result;
}

uint64_t sub_2081994B0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_2081994B8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 27
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208199620@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 27
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208199788(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_2081997B8(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_2081997E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208199838@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B368;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_2081998A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_2081998BC(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 __p;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B708, 0);
  if (v4)
  {
    sub_2081BD924(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 28);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17 = *(_OWORD *)__p;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&__p;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2080F8148(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_2080F88E8((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&__p);
        }
      }
    }
  }
  return result;
}

uint64_t sub_208199AD8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_208199AE0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 28
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_208199C48@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 28
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_208199DB0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_208199DE0(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_208199E0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_208199E60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C080F70;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_208199ED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208199EE4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081458, 0);
  if (v4)
  {
    sub_2081BBFEC(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 29);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F3514(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F3FF4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_20819A100(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819A108@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 29
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819A270@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 29
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819A3D8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819A408(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819A434()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819A488@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C080FF0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819A4F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20819A50C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081470, 0);
  if (v4)
  {
    sub_2081BC758(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 30);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F4F10(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F58C4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_20819A728(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819A730@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 30
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819A898@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 30
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819AA00(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20819AAA4(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819AB48(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_20819ABE8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819AC3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C081070;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819ACAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_20819ACC0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  _QWORD v18[2];
  __int128 __p;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081488, 0);
  if (v4)
  {
    sub_2081BCEF4(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 31);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17[0] = *(_OWORD *)__p;
    v17[1] = v8;
    v17[2] = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v20 = v15;
    v21 = v16;
    v22 = HIDWORD(v12);
    v23 = v13;
    v24 = v12;
    v18[0] = v17;
    v18[1] = &__p;
    return sub_2080F7420(v18);
  }
  return result;
}

uint64_t sub_20819AE90(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819AE98@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 31
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819B000@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 31
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819B168(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819B198(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819B1C4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819B218@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C0810F0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819B288(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_20819B29C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 __p;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0814A0, 0);
  if (v4)
  {
    sub_2081BD924(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 32);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17 = *(_OWORD *)__p;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&__p;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2080F8148(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_2080F88E8((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&__p);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20819B4B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819B4C0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 32
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819B628@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 32
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819B790(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819B7C0(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819B7EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819B840@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C081170;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819B8B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20819B8C4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0814B8, 0);
  if (v4)
  {
    sub_2081BBFEC(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 33);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F3514(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F3FF4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_20819BAE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819BAE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 33
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819BC50@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 33
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819BDB8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819BDE8(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819BE14()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819BE68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B3E8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819BED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20819BEEC(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B720, 0);
  if (v4)
  {
    sub_2081BC758(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 34);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F4F10(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F58C4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_20819C108(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819C110@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 34
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819C278@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 34
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819C3E0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20819C484(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819C528(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_20819C5C8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819C61C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B468;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819C68C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_20819C6A0(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  _QWORD v18[2];
  __int128 __p;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B738, 0);
  if (v4)
  {
    sub_2081BCEF4(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 35);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17[0] = *(_OWORD *)__p;
    v17[1] = v8;
    v17[2] = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v20 = v15;
    v21 = v16;
    v22 = HIDWORD(v12);
    v23 = v13;
    v24 = v12;
    v18[0] = v17;
    v18[1] = &__p;
    return sub_2080F7420(v18);
  }
  return result;
}

uint64_t sub_20819C870(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819C878@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 35
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819C9E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 35
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819CB48(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819CB78(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819CBA4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819CBF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C08B4E8;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819CC68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_20819CC7C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 __p;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C08B750, 0);
  if (v4)
  {
    sub_2081BD924(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 36);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17 = *(_OWORD *)__p;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&__p;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2080F8148(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_2080F88E8((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&__p);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20819CE98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819CEA0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 36
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819D008@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 36
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819D170(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819D1A0(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819D1CC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819D220@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C0811F0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A19EC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819D290(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20819D2A4(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0814D0, 0);
  if (v4)
  {
    sub_2081BBFEC(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 37);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (size_t)&v16;
    v19[1] = (size_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F3514(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F3FF4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_20819D4C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819D4C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 37
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819D630@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 37
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819D798(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819D7C8(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819D7F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819D848@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C081270;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A22DC((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819D8B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20819D8CC(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;
  char *v21;
  __int128 __p;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C0814E8, 0);
  if (v4)
  {
    sub_2081BC758(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 38);
    v5 = (void *)__p;
    v7 = *(_OWORD *)(__p + 16);
    v6 = *(_OWORD *)(__p + 32);
    v16 = *(_OWORD *)__p;
    v17 = v7;
    v18 = v6;
    *(_QWORD *)&__p = 0;
    operator delete(v5);
    v8 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v9 = *(_DWORD *)(a1 + 32) == 0;
    else
      v9 = 1;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v10;
    v12 = v10;
    v13 = __p;
    v14 = HIDWORD(v10);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v15 = __p;
    if (HIDWORD(v11) * HIDWORD(v10) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v13;
    v23 = v14;
    v24 = v15;
    v25 = HIDWORD(v11);
    v26 = v12;
    v27 = v11;
    v19[0] = (uint64_t)&v16;
    v19[1] = (uint64_t)&__p;
    if ((_DWORD)v15 == 1 && DWORD1(v17) == 1)
    {
      sub_2080F4F10(v19);
    }
    else
    {
      v20 = 0;
      if (DWORD2(v16) && HIDWORD(v16))
      {
        if ((_DWORD)v17)
        {
          v21 = &v20;
          sub_2080F58C4((uint64_t)&v21, (uint64_t)&v16, (uint64_t)&__p);
        }
      }
    }
  }
}

uint64_t sub_20819DAE8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819DAF0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 38
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819DC58@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 38
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819DDC0(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_20819DE64(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 92) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 88) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 96);
    if (v5 * (*(_DWORD *)(a1 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 72);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819DF08(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = (void *)__p[9];
  if (v2)
  {
    v3 = !*((_DWORD *)__p + 24) || *((_DWORD *)__p + 23) == 0;
    v4 = v3 || *((_DWORD *)__p + 22) == 0;
    v5 = v4 ? 0 : *((_DWORD *)__p + 24);
    if (v5 * (*((_DWORD *)__p + 27) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (void *)__p[9];
    if (v2)
LABEL_14:
      free(v2);
  }
  operator delete(__p);
}

_UNKNOWN **sub_20819DFA8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819DFFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C0812F0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_2081A2CE4((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819E06C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_20819E080(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  double result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  _QWORD v18[2];
  __int128 __p;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081500, 0);
  if (v4)
  {
    sub_2081BCEF4(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 39);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17[0] = *(_OWORD *)__p;
    v17[1] = v8;
    v17[2] = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v20 = v15;
    v21 = v16;
    v22 = HIDWORD(v12);
    v23 = v13;
    v24 = v12;
    v18[0] = v17;
    v18[1] = &__p;
    return sub_2080F7420(v18);
  }
  return result;
}

uint64_t sub_20819E250(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819E258@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 39
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819E3C0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 39
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

uint64_t sub_20819E528(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_20819E558(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[9];
  if (v2)
    free(v2);
  operator delete(__p);
}

_UNKNOWN **sub_20819E584()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530840);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530840))
    return &off_253E50C80;
  __cxa_guard_release(&qword_254530840);
  return &off_253E50C80;
}

uint64_t sub_20819E5D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x70uLL);
  *(_QWORD *)v4 = &off_24C081370;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(a1 + 56);
  result = sub_207D5C5E8((uint64_t)(v4 + 64), a1 + 64);
  *a2 = v4;
  return result;
}

void sub_20819E648(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float sub_20819E65C(uint64_t a1, void *lpsrc)
{
  unsigned int *v4;
  float result;
  void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20[2];
  char v21;
  char *v22;
  __int128 __p;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C081518, 0);
  if (v4)
  {
    sub_2081BD924(a1 + 8, v4 + 2);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&__p, lpsrc, 40);
    v6 = (void *)__p;
    v8 = *(_OWORD *)(__p + 16);
    v7 = *(_OWORD *)(__p + 32);
    v17 = *(_OWORD *)__p;
    v18 = v8;
    v19 = v7;
    *(_QWORD *)&__p = 0;
    operator delete(v6);
    v9 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(a1 + 36))
      v10 = *(_DWORD *)(a1 + 32) == 0;
    else
      v10 = 1;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = 0;
    LODWORD(__p) = 4;
    *(_QWORD *)((char *)&__p + 4) = v11;
    v13 = v11;
    v14 = __p;
    v15 = HIDWORD(v11);
    LODWORD(__p) = 1;
    *(_QWORD *)((char *)&__p + 4) = v12;
    v16 = __p;
    if (HIDWORD(v12) * HIDWORD(v11) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&__p = v9;
    *((_QWORD *)&__p + 1) = v14;
    v24 = v15;
    v25 = v16;
    v26 = HIDWORD(v12);
    v27 = v13;
    v28 = v12;
    v20[0] = (uint64_t)&v17;
    v20[1] = (uint64_t)&__p;
    if ((_DWORD)v16 == 1 && DWORD1(v18) == 1)
    {
      sub_2080F8148(v20);
    }
    else
    {
      v21 = 0;
      if (DWORD2(v17) && HIDWORD(v17))
      {
        if ((_DWORD)v18)
        {
          v22 = &v21;
          return sub_2080F88E8((uint64_t)&v22, (uint64_t)&v17, (uint64_t)&__p);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20819E878(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

_QWORD *sub_20819E880@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 40
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 78, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

_QWORD *sub_20819E9E8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  if (a2 != 40
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/ImageStorage.cpp", 84, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(a1 + 72);
  v6 = !*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 32) == 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v6)
    v7 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v7;
  v9 = v7;
  v10 = v13;
  v11 = HIDWORD(v7);
  LODWORD(v14) = 1;
  HIDWORD(v14) = v8;
  if (HIDWORD(v8) * HIDWORD(v7) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_11:
    abort();
  }
  result = operator new(0x30uLL);
  *result = v5;
  result[1] = v10;
  *((_DWORD *)result + 4) = v11;
  *(_QWORD *)((char *)result + 20) = v14;
  *((_DWORD *)result + 7) = HIDWORD(v8);
  result[4] = v9;
  result[5] = v8;
  *a3 = result;
  return result;
}

void sub_20819EB50(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = (HIDWORD(v7) * HIDWORD(v5));
  if ((HIDWORD(v5) & (HIDWORD(v5) - 1)) != 0)
    v9 = 0;
  else
    v9 = HIDWORD(v5) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  if ((_DWORD)v8)
  {
    memptr = 0;
    v14 = malloc_type_posix_memalign(&memptr, v13, (HIDWORD(v7) * HIDWORD(v5)), 0x1F88E90uLL);
    if (v14)
      sub_2081FBF78(v14, v13, (HIDWORD(v7) * HIDWORD(v5)));
    v15 = memptr;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)a2 = &off_24C075360;
  *(_QWORD *)(a2 + 8) = v4;
  v16 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = v16;
}

void sub_20819EC68(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = HIDWORD(v7) * (v5 >> 31);
  if (((v5 >> 31) & ((v5 >> 31) - 1)) != 0)
    v9 = 1;
  else
    v9 = (v5 >> 31) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  v14 = v8 & 0x1FFFFFFFELL;
  if ((v8 & 0x1FFFFFFFELL) != 0)
  {
    memptr = 0;
    v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x1FFFFFFFELL, 0x1F88E90uLL);
    if (v15)
      sub_2081FBF78(v15, v13, v14);
    v16 = memptr;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)a2 = &off_24C07A3E8;
  *(_QWORD *)(a2 + 8) = v4;
  v17 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = 2 * v17;
}

void sub_20819ED88(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *memptr;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  if (v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)a1;
  if (HIDWORD(v4))
    v5 = v4 << 32;
  else
    v5 = 0;
  if ((_DWORD)v4)
    v6 = HIDWORD(v4) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = HIDWORD(v7) * (v5 >> 30);
  v9 = 3;
  if (((v5 >> 30) & ((v5 >> 30) - 1)) == 0)
    v9 = (v5 >> 30) - 1;
  v10 = v9 | (v9 >> 1) | ((v9 | (v9 >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32);
  if (v12 + 1 > 8)
    v13 = v12 + 1;
  else
    v13 = 8;
  v14 = v8 & 0x3FFFFFFFCLL;
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    memptr = 0;
    v15 = malloc_type_posix_memalign(&memptr, v13, v8 & 0x3FFFFFFFCLL, 0x1F88E90uLL);
    if (v15)
      sub_2081FBF78(v15, v13, v14);
    v16 = memptr;
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)a2 = &off_24C0737D8;
  *(_QWORD *)(a2 + 8) = v4;
  v17 = v5 | (v4 != 0);
  *(_QWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = 4 * v17;
}

void sub_20819EEAC(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 2 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v8 >> 1) << 33);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 2) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C08AA68;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_20819F06C@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 2;
  *(_QWORD *)&v23[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 2);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 2) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 2);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C08AB68;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20819F1EC(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C08AC68;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_20819F3A4@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 3;
  *(_QWORD *)&v23[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 | (v6 << 32);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 3) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 3);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C08AD68;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20819F520(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C08AE68;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_20819F6E0@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C08AF68;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20819F864(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C08B068;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_20819FA1C@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 3;
  *(_QWORD *)&v23[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 | (v6 << 32);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 3) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 3);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C08B168;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20819FB98(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  if ((_DWORD)v4)
    v6 = 3;
  else
    v6 = 0;
  v7 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v8 = (v6 * *(_DWORD *)&memptr[4]);
  else
    v8 = 0;
  v9 = v6 | (v8 << 32);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 3) >> 32)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v7;
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C07A038;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_20819FD50@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 3;
  *(_QWORD *)&v23[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 | (v6 << 32);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 3);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 3) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 3);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C080DF0;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_20819FECC(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C080EF0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_2081A008C@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C08B2E8;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_2081A0210(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C080F70;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_2081A03D0@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C081070;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_2081A0554(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C081170;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_2081A0714@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C08B468;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

void sub_2081A0898(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _BYTE memptr[12];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = v4;
  v6 = 4 * ((_DWORD)v4 != 0);
  v7 = v6 * v4;
  if (HIDWORD(v5))
    v8 = v7;
  else
    v8 = 0;
  v9 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v8 >> 2) << 34);
  v10 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v9;
  v11 = *(_QWORD *)memptr;
  if (__PAIR64__(v5, 4) >> 32)
    v12 = HIDWORD(v5) == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = HIDWORD(v5);
  v15 = v8 - 1;
  v16 = (v14 * v8);
  if ((v8 & (v8 - 1)) != 0)
    v15 = 0;
  v17 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  if ((_DWORD)v16)
  {
    v24 = v13;
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, (v14 * v8), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, v20, (v14 * v8));
    v22 = *(_QWORD *)memptr;
    v13 = v24;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)a2 = &off_24C0811F0;
  *(_QWORD *)(a2 + 8) = v10;
  if (v13)
    v23 = 0;
  else
    v23 = v10;
  *(_DWORD *)(a2 + 16) = HIDWORD(v5);
  *(_QWORD *)(a2 + 20) = v11;
  *(_DWORD *)(a2 + 28) = v8;
  *(_QWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 40) = v9;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v23;
  *(_DWORD *)(a2 + 96) = v14;
  *(_QWORD *)(a2 + 100) = v11;
  *(_DWORD *)(a2 + 108) = v8;
}

double sub_2081A0A58@<D0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  *(_DWORD *)v23 = 4;
  *(_QWORD *)&v23[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  LODWORD(v6) = v5 * v4;
  v7 = HIDWORD(v4);
  if (HIDWORD(v4))
    v6 = v6;
  else
    v6 = 0;
  v8 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  *(_DWORD *)v23 = 1;
  *(_DWORD *)&v23[4] = v8;
  v9 = *(_QWORD *)v23;
  *(_QWORD *)v23 = __PAIR64__(v4, 4);
  *(_DWORD *)&v23[8] = HIDWORD(v4);
  *(_QWORD *)&v23[12] = v9;
  *(_DWORD *)&v23[20] = v6;
  *(_QWORD *)&v23[24] = v4;
  *(_QWORD *)&v24 = v8;
  BYTE8(v24) = 0;
  BYTE4(v25) = 0;
  v21 = v9;
  v22 = v6;
  if (__PAIR64__(v4, 4) >> 32)
    v10 = HIDWORD(v4) == 0;
  else
    v10 = 1;
  if (v10)
    v11 = 0;
  else
    v11 = __PAIR64__(v4, 4);
  v19 = v11;
  if (v10)
    v12 = 0;
  else
    v12 = v7;
  v20 = v12;
  if (((2 * v6) & (2 * v6 - 1)) != 0)
    v13 = 2;
  else
    v13 = 2 * v6;
  v14 = (uint64_t *)sub_2081B8B5C((uint64_t)v26, (unsigned int *)&v19, &v21, 1, 0, 0, v13);
  v15 = *(_OWORD *)&v23[16];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v23;
  *(_QWORD *)a2 = &off_24C0812F0;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v24;
  v16 = *v14;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v16;
  v17 = v26[2];
  *(_QWORD *)(a2 + 72) = v26[1];
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(a2 + 104) = v28;
  result = *(double *)&v27;
  *(_OWORD *)(a2 + 88) = v27;
  return result;
}

uint64_t sub_2081A0BDC(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _BYTE *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _BYTE *v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  void *v25;
  const void *v26;
  size_t v27;
  int __len;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_BYTE **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = HIDWORD(v9);
  __len = HIDWORD(v10) * HIDWORD(v9);
  if (HIDWORD(v10) * HIDWORD(v9) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_50;
  }
  if ((_DWORD)v10)
    v12 = HIDWORD(v10) == 0;
  else
    v12 = 1;
  if (v12)
    return a1;
  v13 = *(_BYTE **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v16 = v15 ? 0 : *(_DWORD *)(a1 + 28);
  v17 = HIDWORD(v14);
  if (v16 * HIDWORD(v14) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_50:
    abort();
  }
  if (v9 != 1 || v14 != 1)
  {
    if ((_DWORD)v10)
    {
      v18 = v10 - 1;
      v19 = HIDWORD(v10) - 1;
      if (HIDWORD(v10) != 1)
      {
        if ((_DWORD)v10 == 1)
        {
          do
          {
            *v13 = *v7;
            v7 += v11;
            v13 += v17;
            --v19;
          }
          while (v19);
        }
        else
        {
          v20 = 0;
          do
          {
            v21 = v10 - 1;
            v22 = v7;
            v23 = v13;
            do
            {
              *v23 = *v22;
              v22 += v9;
              v23 += v14;
              --v21;
            }
            while (v21);
            *v23 = *v22;
            v7 += v11;
            v13 += v17;
            ++v20;
          }
          while (v20 != v19);
        }
      }
      if ((_DWORD)v10 != 1)
      {
        do
        {
          *v13 = *v7;
          v7 += v9;
          v13 += v14;
          --v18;
        }
        while (v18);
      }
      *v13 = *v7;
    }
    return a1;
  }
  if (HIDWORD(v9) != HIDWORD(v14) || HIDWORD(v9) != (_DWORD)v10)
  {
    if (!(_DWORD)v10)
      return a1;
    v24 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) == 1)
    {
LABEL_51:
      if (v7
        || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        v25 = v13;
        v26 = v7;
        v27 = v10;
LABEL_56:
        memmove(v25, v26, v27);
        return a1;
      }
    }
    else
    {
      while (v7
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v13, v7, v10);
        v7 += v11;
        v13 += v17;
        if (!--v24)
          goto LABEL_51;
      }
    }
    goto LABEL_50;
  }
  if (!v7 && __len)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_50;
    }
    goto LABEL_55;
  }
  if (__len)
  {
LABEL_55:
    v25 = v13;
    v26 = v7;
    v27 = (HIDWORD(v10) * HIDWORD(v9));
    goto LABEL_56;
  }
  return a1;
}

void sub_2081A0F28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081A0F48(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _WORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  _WORD *v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _WORD *v23;
  _WORD *v24;
  int v25;
  size_t v26;
  int v27;
  uint64_t v28;
  unint64_t v30;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_WORD **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = v9 >> 33;
  v12 = HIDWORD(v10) * (v9 >> 33);
  if ((_DWORD)v12 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_48;
  }
  if ((_DWORD)v10)
    v13 = HIDWORD(v10) == 0;
  else
    v13 = 1;
  if (v13)
    return a1;
  v14 = *(_WORD **)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v17 = v16 ? 0 : *(_DWORD *)(a1 + 28);
  v30 = v15 >> 33;
  if (v17 * (v15 >> 33) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_48:
    abort();
  }
  v18 = v9 & 0xFFFFFFFE;
  v19 = v15 & 0xFFFFFFFE;
  if (v18 != 2 || v19 != 2)
  {
    if (!(_DWORD)v10)
      return a1;
    v20 = v10 - 1;
    v21 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) != 1)
    {
      if ((_DWORD)v10 == 1)
      {
        do
        {
          *v14 = *v7;
          v7 += v11;
          v14 += v30;
          --v21;
        }
        while (v21);
LABEL_55:
        *v14 = *v7;
        return a1;
      }
      v22 = 0;
      do
      {
        v23 = v14;
        v24 = v7;
        v25 = v10 - 1;
        do
        {
          *v23 = *v24;
          v24 = (_WORD *)((char *)v24 + v18);
          v23 = (_WORD *)((char *)v23 + v19);
          --v25;
        }
        while (v25);
        *v23 = *v24;
        v7 += v11;
        v14 += v30;
        ++v22;
      }
      while (v22 != v21);
    }
    if ((_DWORD)v10 != 1)
    {
      do
      {
        *v14 = *v7;
        v7 = (_WORD *)((char *)v7 + v18);
        v14 = (_WORD *)((char *)v14 + v19);
        --v20;
      }
      while (v20);
    }
    goto LABEL_55;
  }
  if ((_DWORD)v11 != (_DWORD)v10 || (_DWORD)v11 != (_DWORD)v30)
  {
    if (!(_DWORD)v10)
      return a1;
    v26 = 2 * v10;
    v27 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) == 1)
    {
LABEL_49:
      if (v7
        || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v14, v7, v26);
        return a1;
      }
    }
    else
    {
      v28 = 2 * v11;
      while (v7
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v14, v7, v26);
        v7 = (_WORD *)((char *)v7 + v28);
        v14 += v30;
        if (!--v27)
          goto LABEL_49;
      }
    }
    goto LABEL_48;
  }
  if (!v7 && (_DWORD)v12)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_48;
    }
    goto LABEL_53;
  }
  if ((_DWORD)v12)
LABEL_53:
    memmove(v14, v7, 2 * v12);
  return a1;
}

void sub_2081A12BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081A12DC(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 28);
    if (v4 * (*(_QWORD *)(a1 + 32) >> 33) != -1)
      goto LABEL_11;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_2081A1378(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _WORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _WORD *v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _WORD *v23;
  _WORD *v24;
  int v25;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_WORD **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = v9 >> 33;
  if (HIDWORD(v10) * (v9 >> 33) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_37;
  }
  if ((_DWORD)v10)
    v12 = HIDWORD(v10) == 0;
  else
    v12 = 1;
  if (v12)
    return a1;
  v13 = *(_WORD **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v16 = v15 ? 0 : *(_DWORD *)(a1 + 28);
  v17 = v14 >> 33;
  if (v16 * (v14 >> 33) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_37:
    abort();
  }
  v18 = v10 - 1;
  v19 = 2 * (v9 >> 1);
  v20 = 2 * (v14 >> 1);
  v21 = HIDWORD(v10) - 1;
  if (HIDWORD(v10) != 1)
  {
    if ((_DWORD)v10 == 1)
    {
      do
      {
        *v13 = *v7;
        v7 += v11;
        v13 += v17;
        --v21;
      }
      while (v21);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = v13;
        v24 = v7;
        v25 = v10 - 1;
        do
        {
          *v23 = *v24;
          v24 = (_WORD *)((char *)v24 + v19);
          v23 = (_WORD *)((char *)v23 + v20);
          --v25;
        }
        while (v25);
        *v23 = *v24;
        v7 += v11;
        v13 += v17;
        ++v22;
      }
      while (v22 != v21);
    }
  }
  if ((_DWORD)v10 != 1)
  {
    do
    {
      *v13 = *v7;
      v7 = (_WORD *)((char *)v7 + v19);
      v13 = (_WORD *)((char *)v13 + v20);
      --v18;
    }
    while (v18);
  }
  *v13 = *v7;
  return a1;
}

void sub_2081A1594(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_2081A15B0(_QWORD *__p)
{
  void *v2;
  BOOL v3;
  int v4;

  if (__p)
  {
    v2 = (void *)__p[6];
    if (v2)
    {
      v3 = !*((_DWORD *)__p + 17) || *((_DWORD *)__p + 16) == 0;
      v4 = v3 ? 0 : *((_DWORD *)__p + 17);
      if (v4 * (__p[9] >> 33) != -1)
        goto LABEL_12;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = (void *)__p[6];
      if (v2)
LABEL_12:
        free(v2);
    }
    operator delete(__p);
  }
}

uint64_t sub_2081A1658(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  _DWORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  _DWORD *v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  size_t v26;
  int v27;
  uint64_t v28;
  unint64_t v30;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a2 + 24);
  v11 = v9 >> 34;
  v12 = HIDWORD(v10) * (v9 >> 34);
  if ((_DWORD)v12 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_48;
  }
  if ((_DWORD)v10)
    v13 = HIDWORD(v10) == 0;
  else
    v13 = 1;
  if (v13)
    return a1;
  v14 = *(_DWORD **)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
  v17 = v16 ? 0 : *(_DWORD *)(a1 + 28);
  v30 = v15 >> 34;
  if (v17 * (v15 >> 34) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_48:
    abort();
  }
  v18 = v9 & 0xFFFFFFFC;
  v19 = v15 & 0xFFFFFFFC;
  if (v18 != 4 || v19 != 4)
  {
    if (!(_DWORD)v10)
      return a1;
    v20 = v10 - 1;
    v21 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) != 1)
    {
      if ((_DWORD)v10 == 1)
      {
        do
        {
          *v14 = *v7;
          v7 += v11;
          v14 += v30;
          --v21;
        }
        while (v21);
LABEL_55:
        *v14 = *v7;
        return a1;
      }
      v22 = 0;
      do
      {
        v23 = v14;
        v24 = v7;
        v25 = v10 - 1;
        do
        {
          *v23 = *v24;
          v24 = (_DWORD *)((char *)v24 + v18);
          v23 = (_DWORD *)((char *)v23 + v19);
          --v25;
        }
        while (v25);
        *v23 = *v24;
        v7 += v11;
        v14 += v30;
        ++v22;
      }
      while (v22 != v21);
    }
    if ((_DWORD)v10 != 1)
    {
      do
      {
        *v14 = *v7;
        v7 = (_DWORD *)((char *)v7 + v18);
        v14 = (_DWORD *)((char *)v14 + v19);
        --v20;
      }
      while (v20);
    }
    goto LABEL_55;
  }
  if ((_DWORD)v11 != (_DWORD)v10 || (_DWORD)v11 != (_DWORD)v30)
  {
    if (!(_DWORD)v10)
      return a1;
    v26 = 4 * v10;
    v27 = HIDWORD(v10) - 1;
    if (HIDWORD(v10) == 1)
    {
LABEL_49:
      if (v7
        || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v14, v7, v26);
        return a1;
      }
    }
    else
    {
      v28 = 4 * v11;
      while (v7
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v14, v7, v26);
        v7 = (_DWORD *)((char *)v7 + v28);
        v14 += v30;
        if (!--v27)
          goto LABEL_49;
      }
    }
    goto LABEL_48;
  }
  if (!v7 && (_DWORD)v12)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_48;
    }
    goto LABEL_53;
  }
  if ((_DWORD)v12)
LABEL_53:
    memmove(v14, v7, 4 * v12);
  return a1;
}

void sub_2081A19CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081A19EC(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  _BYTE *v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  int v14;
  size_t v15;
  _BOOL4 v16;
  _BYTE *v17;
  unint64_t v18;
  BOOL v19;
  int v21;
  _BYTE *v22;
  unint64_t v23;
  size_t v24;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  unint64_t v47;
  unsigned __int8 v48;
  BOOL v49;
  uint64_t v50;
  uint64_t i;
  unsigned __int8 v52;
  int v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  int v57;
  int v58;
  _BYTE *v59;
  _BYTE *v60;
  void *v61;
  const void *v62;
  size_t v63;
  char *v64;
  int v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v69 = a1;
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_BYTE **)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  if (*(_DWORD *)(a2 + 24))
    v10 = *(_DWORD *)(a2 + 28) == 0;
  else
    v10 = 1;
  v11 = v10 || *(_DWORD *)(a2 + 32) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = *(_QWORD *)(a2 + 24);
  if (v11)
    v14 = 0;
  else
    v14 = *(_DWORD *)(a2 + 32);
  v71 = *(unsigned int *)(a2 + 44);
  v15 = (v14 * *(_DWORD *)(a2 + 44));
  if ((_DWORD)v15 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_130;
  }
  v16 = HIDWORD(v13) == 0;
  if (!(_DWORD)v13)
    v16 = 1;
  if (((v12 | v16) & 1) != 0)
    return v69;
  v17 = *(_BYTE **)(v69 + 8);
  v18 = *(_QWORD *)(v69 + 36);
  if (*(_DWORD *)(v69 + 32))
    v19 = *(_DWORD *)(v69 + 28) == 0;
  else
    v19 = 1;
  if (v19 || *(_DWORD *)(v69 + 24) == 0)
    v21 = 0;
  else
    v21 = *(_DWORD *)(v69 + 32);
  v70 = *(unsigned int *)(v69 + 44);
  if (v21 * *(_DWORD *)(v69 + 44) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_130;
  }
  if (v9 != 1 || v18 != 1)
  {
    if ((_DWORD)v13)
    {
      v27 = v13 - 1;
      v28 = HIDWORD(v13) - 1;
      v29 = HIDWORD(v9);
      v30 = HIDWORD(v18);
      v31 = v14 - 1;
      if (v14 != 1)
      {
        if (HIDWORD(v13) == 1)
        {
          if ((_DWORD)v13 == 1)
          {
            do
            {
              *v17 = *v8;
              v8 += v71;
              v17 += v70;
              --v31;
            }
            while (v31);
          }
          else
          {
            v53 = 0;
            do
            {
              v54 = v13 - 1;
              v55 = v8;
              v56 = v17;
              do
              {
                *v56 = *v55;
                v55 += v9;
                v56 += v18;
                --v54;
              }
              while (v54);
              *v56 = *v55;
              v8 += v71;
              v17 += v70;
              ++v53;
            }
            while (v53 != v31);
          }
        }
        else
        {
          v32 = 0;
          if ((_DWORD)v13 == 1)
          {
            do
            {
              v40 = HIDWORD(v13) - 1;
              v41 = v8;
              v42 = v17;
              do
              {
                *v42 = *v41;
                v41 += v29;
                v42 += v30;
                --v40;
              }
              while (v40);
              *v42 = *v41;
              v8 += v71;
              v17 += v70;
              ++v32;
            }
            while (v32 != v31);
          }
          else
          {
            do
            {
              v33 = 0;
              v34 = v8;
              v35 = v17;
              do
              {
                v36 = v13 - 1;
                v37 = v34;
                v38 = v35;
                do
                {
                  *v38 = *v37;
                  v37 += v9;
                  v38 += v18;
                  --v36;
                }
                while (v36);
                *v38 = *v37;
                v34 += v29;
                v35 += v30;
                ++v33;
              }
              while (v33 != v28);
              v39 = v13 - 1;
              do
              {
                *v35 = *v34;
                v34 += v9;
                v35 += v18;
                --v39;
              }
              while (v39);
              *v35 = *v34;
              v8 += v71;
              v17 += v70;
              ++v32;
            }
            while (v32 != v31);
          }
        }
      }
      if (HIDWORD(v13) != 1)
      {
        if ((_DWORD)v13 == 1)
        {
          do
          {
            *v17 = *v8;
            v8 += v29;
            v17 += v30;
            --v28;
          }
          while (v28);
        }
        else
        {
          v57 = 0;
          do
          {
            v58 = v13 - 1;
            v59 = v8;
            v60 = v17;
            do
            {
              *v60 = *v59;
              v59 += v9;
              v60 += v18;
              --v58;
            }
            while (v58);
            *v60 = *v59;
            v8 += v29;
            v17 += v30;
            ++v57;
          }
          while (v57 != v28);
        }
      }
      if ((_DWORD)v13 != 1)
      {
        do
        {
          *v17 = *v8;
          v8 += v9;
          v17 += v18;
          --v27;
        }
        while (v27);
      }
      *v17 = *v8;
    }
    return v69;
  }
  v22 = (_BYTE *)HIDWORD(v9);
  v23 = HIDWORD(v18);
  if (HIDWORD(v9) != (_DWORD)v23 || HIDWORD(v9) != (_DWORD)v13)
  {
    if (!(_DWORD)v13)
      return v69;
    v43 = HIDWORD(v13) - 1;
    v68 = v14 - 1;
    if (v14 == 1)
    {
LABEL_125:
      v64 = v8;
      if (HIDWORD(v13) == 1)
      {
LABEL_131:
        if (!v64
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_130;
        }
        v61 = v17;
        v62 = v64;
        v63 = v13;
        goto LABEL_136;
      }
      while (v64
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v17, v64, v13);
        v64 = &v22[(_QWORD)v64];
        v17 += v23;
        if (!--v43)
          goto LABEL_131;
      }
    }
    else if (HIDWORD(v13) == 1)
    {
      while (v8
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v17, v8, v13);
        v8 += v71;
        v17 += v70;
        if (!--v68)
          goto LABEL_125;
      }
    }
    else
    {
      v44 = 0;
      while (1)
      {
        v66 = v44;
        v45 = 0;
        v67 = v8;
        v46 = v17;
        do
        {
          while (v8)
          {
            memmove(v46, v8, v13);
            v8 = &v22[(_QWORD)v8];
            v46 += v23;
            if (++v45 == v43)
              goto LABEL_71;
          }
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v8 = v22;
          v47 = v23;
          v48 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (byte_254530A10)
            v49 = byte_254530A18 == 0;
          else
            v49 = 0;
          if (!v49)
          {
            v50 = qword_2545309E8;
            for (i = qword_2545309F0; v50 != i; v50 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v50)(*(_QWORD *)(v50 + 8), "ptr != nullptr || size == 0", 27, "", 0);
          }
          v52 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10)
            goto LABEL_130;
          v23 = v47;
          v22 = v8;
          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
          memcpy(v46, 0, v13);
          v46 += v23;
          ++v45;
        }
        while (v45 != v43);
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          break;
        }
LABEL_71:
        memmove(v46, v8, v13);
        v8 = &v67[v71];
        v17 += v70;
        v44 = v66 + 1;
        if (v66 + 1 == v68)
          goto LABEL_125;
      }
    }
LABEL_130:
    abort();
  }
  v24 = (HIDWORD(v13) * v13);
  if ((_DWORD)v71 == (_DWORD)v24 && (_DWORD)v71 == (_DWORD)v70)
  {
    if (v8 || !(_DWORD)v15)
    {
      if (!(_DWORD)v15)
        return v69;
    }
    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_130;
    }
    v61 = v17;
    v62 = v8;
    v63 = v15;
LABEL_136:
    memmove(v61, v62, v63);
    return v69;
  }
  if (!(_DWORD)v13)
    return v69;
  v26 = v14 - 1;
  if (v14 == 1)
  {
LABEL_116:
    if (!(_DWORD)v24 || v8)
    {
      if (!(_DWORD)v24)
        return v69;
    }
    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_130;
    }
    v61 = v17;
    v62 = v8;
    v63 = (HIDWORD(v13) * v13);
    goto LABEL_136;
  }
  if ((_DWORD)v24)
  {
    while (v8
         || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      memmove(v17, v8, v24);
      v8 += v71;
      v17 += v70;
      if (!--v26)
        goto LABEL_116;
    }
    goto LABEL_130;
  }
  return v69;
}

void sub_2081A22A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)(a12 + 8);
  if (v13)
    free(v13);
  *(_QWORD *)(a12 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081A22DC(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  _WORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _WORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _WORD *v46;
  int v47;
  _WORD *v48;
  char *v49;
  _WORD *v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  _WORD *v54;
  _WORD *v55;
  int v56;
  int v57;
  int v58;
  size_t v59;
  int v60;
  int v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unsigned __int8 v65;
  BOOL v66;
  uint64_t v67;
  uint64_t i;
  unsigned __int8 v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _WORD *v74;
  _WORD *v75;
  int v76;
  int v77;
  uint64_t v78;
  _WORD *v79;
  _WORD *v80;
  int v81;
  int v82;
  _WORD *v83;
  _WORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v90 = a1;
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(char **)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  v10 = (unint64_t)*(unsigned int *)(a2 + 44) >> 1;
  if (*(_DWORD *)(a2 + 24))
    v11 = *(_DWORD *)(a2 + 28) == 0;
  else
    v11 = 1;
  v12 = v11 || *(_DWORD *)(a2 + 32) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = *(_QWORD *)(a2 + 24);
  if (v12)
    v15 = 0;
  else
    v15 = *(_DWORD *)(a2 + 32);
  v16 = (v15 * v10);
  if ((_DWORD)v16 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_131;
  }
  if ((_DWORD)v14)
    v17 = HIDWORD(v14) == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 1;
  else
    v18 = v13;
  if ((v18 & 1) != 0)
    return v90;
  v19 = *(_WORD **)(v90 + 8);
  v20 = *(_QWORD *)(v90 + 36);
  v21 = (unint64_t)*(unsigned int *)(v90 + 44) >> 1;
  if (*(_DWORD *)(v90 + 32))
    v22 = *(_DWORD *)(v90 + 28) == 0;
  else
    v22 = 1;
  if (v22 || *(_DWORD *)(v90 + 24) == 0)
    v24 = 0;
  else
    v24 = *(_DWORD *)(v90 + 32);
  if (v24 * (_DWORD)v21 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_131;
  }
  v25 = v9 & 0xFFFFFFFE;
  v26 = v20 & 0xFFFFFFFE;
  if (v25 != 2 || v26 != 2)
  {
    v33 = v14 - 1;
    v34 = HIDWORD(v14) - 1;
    v35 = v9 >> 33;
    v36 = v20 >> 33;
    v37 = v15 - 1;
    if (v15 == 1)
    {
      v39 = v8;
      if (HIDWORD(v14) == 1)
        goto LABEL_106;
    }
    else
    {
      v38 = v10;
      v39 = v8;
      if (HIDWORD(v14) == 1)
      {
        if ((_DWORD)v14 != 1)
        {
          v77 = 0;
          v78 = 2 * v38;
          do
          {
            v79 = v19;
            v80 = v39;
            v81 = v14 - 1;
            do
            {
              *v79 = *v80;
              v80 = (_WORD *)((char *)v80 + v25);
              v79 = (_WORD *)((char *)v79 + v26);
              --v81;
            }
            while (v81);
            *v79 = *v80;
            v39 = (_WORD *)((char *)v39 + v78);
            v19 += v21;
            ++v77;
          }
          while (v77 != v37);
LABEL_106:
          while (v33)
          {
            *v19 = *v39;
            v39 = (_WORD *)((char *)v39 + v25);
            v19 = (_WORD *)((char *)v19 + v26);
            --v33;
          }
          goto LABEL_138;
        }
        do
        {
          *v19 = *v39;
          v39 += v38;
          v19 += v21;
          --v37;
        }
        while (v37);
LABEL_138:
        *v19 = *v39;
        return v90;
      }
      if ((_DWORD)v14 == 1)
      {
        v82 = 0;
        do
        {
          v83 = v19;
          v84 = v39;
          v85 = HIDWORD(v14) - 1;
          do
          {
            *v83 = *v84;
            v84 += v35;
            v83 += v36;
            --v85;
          }
          while (v85);
          *v83 = *v84;
          v39 += v38;
          v19 += v21;
          ++v82;
        }
        while (v82 != v37);
        do
        {
LABEL_117:
          *v19 = *v39;
          v39 += v35;
          v19 += v36;
          --v34;
        }
        while (v34);
        goto LABEL_138;
      }
      v40 = 0;
      v41 = v38;
      v42 = v35;
      v43 = 2 * v21;
      v44 = v36;
      v45 = &v8[2 * v35];
      v46 = &v19[v36];
      do
      {
        v47 = 0;
        v48 = v46;
        v49 = v45;
        v50 = v19;
        v51 = v39;
        do
        {
          v52 = v49;
          v53 = v48;
          v54 = v50;
          v55 = v39;
          v56 = v33;
          do
          {
            *v54 = *v55;
            v55 = (_WORD *)((char *)v55 + v25);
            v54 = (_WORD *)((char *)v54 + v26);
            --v56;
          }
          while (v56);
          *v54 = *v55;
          v39 = (_WORD *)((char *)v39 + v42 * 2);
          v50 = (_WORD *)((char *)v50 + v44 * 2);
          ++v47;
          v49 = (char *)&v52[v42];
          v48 = &v53[v44];
        }
        while (v47 != v34);
        v57 = v33;
        do
        {
          *v53 = *v52;
          v52 = (_WORD *)((char *)v52 + v25);
          v53 = (_WORD *)((char *)v53 + v26);
          --v57;
        }
        while (v57);
        *v53 = *v52;
        v39 = &v51[v41];
        v19 = (_WORD *)((char *)v19 + v43);
        ++v40;
        v45 += v41 * 2;
        v46 = (_WORD *)((char *)v46 + v43);
      }
      while (v40 != v37);
    }
    if (v33)
    {
      v71 = 0;
      v72 = 2 * v35;
      v73 = 2 * v36;
      do
      {
        v74 = v19;
        v75 = v39;
        v76 = v33;
        do
        {
          *v74 = *v75;
          v75 = (_WORD *)((char *)v75 + v25);
          v74 = (_WORD *)((char *)v74 + v26);
          --v76;
        }
        while (v76);
        *v74 = *v75;
        v39 = (_WORD *)((char *)v39 + v72);
        v19 = (_WORD *)((char *)v19 + v73);
        ++v71;
      }
      while (v71 != v34);
      goto LABEL_106;
    }
    goto LABEL_117;
  }
  v27 = v9 >> 33;
  v28 = v20 >> 33;
  if (v9 >> 33 != (_DWORD)v14 || (_DWORD)v27 != (_DWORD)v28)
  {
    v58 = HIDWORD(v14) - 1;
    v59 = 2 * v14;
    v94 = v27;
    v95 = 2 * v27;
    v93 = v15 - 1;
    if (v15 == 1)
    {
LABEL_126:
      if (HIDWORD(v14) == 1)
      {
LABEL_132:
        if (!v8
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_131;
        }
        memmove(v19, v8, v59);
        return v90;
      }
      v86 = 2 * v28;
      while (v8
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v19, v8, v59);
        v8 += v95;
        v19 = (_WORD *)((char *)v19 + v86);
        if (!--v58)
          goto LABEL_132;
      }
    }
    else if (HIDWORD(v14) == 1)
    {
      while (v8
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v19, v8, v59);
        v8 += 2 * v10;
        v19 += v21;
        if (!--v93)
          goto LABEL_126;
      }
    }
    else
    {
      v60 = 0;
      v88 = v10;
      v89 = v21;
      while (1)
      {
        v91 = v60;
        v61 = 0;
        v92 = v8;
        v62 = v8;
        v63 = (char *)v19;
        v64 = v94;
        do
        {
          while (v62)
          {
            memmove(v63, v62, v59);
            v62 += 2 * v64;
            v63 += 2 * v28;
            if (++v61 == v58)
              goto LABEL_69;
          }
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v65 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (byte_254530A10)
            v66 = byte_254530A18 == 0;
          else
            v66 = 0;
          if (!v66)
          {
            v67 = qword_2545309E8;
            for (i = qword_2545309F0; v67 != i; v67 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v67)(*(_QWORD *)(v67 + 8), "ptr != nullptr || size == 0", 27, "", 0);
          }
          v69 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          v64 = v94;
          if (!byte_254530A10)
            goto LABEL_131;
          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
          memcpy(v63, 0, v59);
          v63 += 2 * v28;
          ++v61;
          v62 = (char *)v95;
        }
        while (v61 != v58);
        v70 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v62 = (char *)v95;
        if (v70)
          break;
LABEL_69:
        memmove(v63, v62, v59);
        v8 = &v92[2 * v88];
        v19 += v89;
        v60 = v91 + 1;
        if (v91 + 1 == v93)
          goto LABEL_126;
      }
    }
LABEL_131:
    abort();
  }
  v29 = (HIDWORD(v14) * v14);
  if ((_DWORD)v10 == (_DWORD)v29 && (_DWORD)v10 == (_DWORD)v21)
  {
    if (v8 || !(_DWORD)v16)
    {
      if (!(_DWORD)v16)
        return v90;
    }
    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_131;
    }
    memmove(v19, v8, 2 * v16);
    return v90;
  }
  v31 = v15 - 1;
  if (v15 == 1)
  {
LABEL_109:
    if (!(_DWORD)v29 || v8)
    {
      if (!(_DWORD)v29)
        return v90;
    }
    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_131;
    }
    memmove(v19, v8, 2 * v29);
    return v90;
  }
  if ((_DWORD)v29)
  {
    v32 = 2 * v21;
    while (v8
         || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      memmove(v19, v8, 2 * v29);
      v8 += 2 * v10;
      v19 = (_WORD *)((char *)v19 + v32);
      if (!--v31)
        goto LABEL_109;
    }
    goto LABEL_131;
  }
  return v90;
}

void sub_2081A2C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)(a12 + 8);
  if (v13)
    free(v13);
  *(_QWORD *)(a12 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081A2C40(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 24) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 32);
    if (v5 * (*(_DWORD *)(a1 + 44) >> 1) != -1)
      goto LABEL_14;
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_2081A2CE4(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  char v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  _WORD *v42;
  _WORD *v43;
  _WORD *v44;
  _WORD *v45;
  _WORD *v46;
  _WORD *v47;
  _WORD *v48;
  int v49;
  int v50;
  int v51;
  _WORD *v52;
  _WORD *v53;
  int v54;
  int v55;
  _WORD *v56;
  _WORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  _WORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *memptr;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr = 0;
    v6 = malloc_type_posix_memalign(&memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2081FBF78(v6, *(_QWORD *)(a1 + 16), v4);
    *(_QWORD *)(a1 + 8) = memptr;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_WORD **)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  v10 = (unint64_t)*(unsigned int *)(a2 + 44) >> 1;
  if (*(_DWORD *)(a2 + 24))
    v11 = *(_DWORD *)(a2 + 28) == 0;
  else
    v11 = 1;
  v12 = v11 || *(_DWORD *)(a2 + 32) == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = *(_QWORD *)(a2 + 24);
  if (v12)
    v15 = 0;
  else
    v15 = *(_DWORD *)(a2 + 32);
  if (v15 * (_DWORD)v10 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_77;
  }
  if ((_DWORD)v14)
    v16 = HIDWORD(v14) == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 1;
  else
    v17 = v13;
  if ((v17 & 1) != 0)
    return a1;
  v18 = *(_WORD **)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 36);
  v20 = (unint64_t)*(unsigned int *)(a1 + 44) >> 1;
  v21 = !*(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 28) == 0;
  v22 = v21 || *(_DWORD *)(a1 + 24) == 0;
  v23 = v22 ? 0 : *(_DWORD *)(a1 + 32);
  if (v23 * (_DWORD)v20 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_77:
    abort();
  }
  v24 = v9 >> 1;
  v25 = v14 - 1;
  v26 = v19 >> 1;
  v27 = HIDWORD(v14) - 1;
  v28 = v9 >> 33;
  v29 = v19 >> 33;
  v30 = v15 - 1;
  if (v15 != 1)
  {
    if (HIDWORD(v14) == 1)
    {
      if ((_DWORD)v14 == 1)
      {
        do
        {
          *v18 = *v8;
          v8 += v10;
          v18 += v20;
          --v30;
        }
        while (v30);
      }
      else
      {
        v51 = 0;
        do
        {
          v52 = v18;
          v53 = v8;
          v54 = v14 - 1;
          do
          {
            *v52 = *v53;
            v53 += v24;
            v52 += v26;
            --v54;
          }
          while (v54);
          *v52 = *v53;
          v8 += v10;
          v18 += v20;
          ++v51;
        }
        while (v51 != v30);
      }
    }
    else
    {
      v31 = 0;
      v32 = 2 * v10;
      v33 = v28;
      if ((_DWORD)v14 == 1)
      {
        do
        {
          v55 = HIDWORD(v14) - 1;
          v56 = v18;
          v57 = v8;
          do
          {
            *v56 = *v57;
            v57 = (_WORD *)((char *)v57 + v33 * 2);
            v56 += v29;
            --v55;
          }
          while (v55);
          *v56 = *v57;
          v8 = (_WORD *)((char *)v8 + v32);
          v18 += v20;
          ++v31;
        }
        while (v31 != v30);
      }
      else
      {
        v34 = 2 * v24;
        v35 = 2 * v20;
        v36 = v29;
        v37 = &v8[v33];
        v38 = &v18[v29];
        v39 = 2 * v26;
        do
        {
          v40 = 0;
          v41 = v38;
          v42 = v37;
          v43 = v18;
          v44 = v8;
          do
          {
            v45 = v42;
            v46 = v41;
            v47 = v43;
            v48 = v44;
            v49 = v25;
            do
            {
              *v47 = *v48;
              v48 = (_WORD *)((char *)v48 + v34);
              v47 = (_WORD *)((char *)v47 + v39);
              --v49;
            }
            while (v49);
            *v47 = *v48;
            v44 = (_WORD *)((char *)v44 + v33 * 2);
            v43 = (_WORD *)((char *)v43 + v36 * 2);
            ++v40;
            v42 = &v45[v33];
            v41 = &v46[v36];
          }
          while (v40 != v27);
          v50 = v25;
          do
          {
            *v46 = *v45;
            v45 = (_WORD *)((char *)v45 + v34);
            v46 = (_WORD *)((char *)v46 + v39);
            --v50;
          }
          while (v50);
          *v46 = *v45;
          v8 = (_WORD *)((char *)v8 + v32);
          v18 = (_WORD *)((char *)v18 + v35);
          ++v31;
          v37 = (_WORD *)((char *)v37 + v32);
          v38 = (_WORD *)((char *)v38 + v35);
        }
        while (v31 != v30);
      }
    }
  }
  if (v27)
  {
    if (v25)
    {
      v58 = 0;
      v59 = 2 * v28;
      v60 = 2 * v29;
      do
      {
        v61 = v18;
        v62 = v8;
        v63 = v25;
        do
        {
          *v61 = *v62;
          v62 += v24;
          v61 += v26;
          --v63;
        }
        while (v63);
        *v61 = *v62;
        v8 = (_WORD *)((char *)v8 + v59);
        v18 = (_WORD *)((char *)v18 + v60);
        ++v58;
      }
      while (v58 != v27);
    }
    else
    {
      v64 = 2 * v28;
      v65 = 2 * v29;
      do
      {
        *v18 = *v8;
        v8 = (_WORD *)((char *)v8 + v64);
        v18 = (_WORD *)((char *)v18 + v65);
        --v27;
      }
      while (v27);
    }
  }
  if (v25)
  {
    v66 = 2 * v24;
    v67 = 2 * v26;
    do
    {
      *v18 = *v8;
      v8 = (_WORD *)((char *)v8 + v66);
      v18 = (_WORD *)((char *)v18 + v67);
      --v25;
    }
    while (v25);
  }
  *v18 = *v8;
  return a1;
}

void sub_2081A30E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_2081A3100(int a1)
{
  __asm { BR              X10 }
}

void sub_2081A3158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  int v34;
  int v35;
  _BYTE *v36;
  _BYTE *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int i;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  const void *v54;
  BOOL v55;
  int v56;
  BOOL v57;
  char *v58;
  char *v59;
  int v60;
  void *v61;
  const void *v62;
  _QWORD *v63;
  void *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  _BYTE v83[28];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t (**v89)();
  char *v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int16 v97;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 - 208) = off_24C06EB30;
  sub_207CA98A4(v4, v3 - 200);
  v5 = *(_QWORD *)(v3 - 200);
  if (!v5)
  {
    v89 = &off_24C0751D0;
    if (*(_BYTE *)(v3 - 160) && *(_QWORD *)(v3 - 184))
    {
      v77 = *(std::__shared_weak_count **)(v3 - 192);
      p_shared_owners = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldxr(p_shared_owners);
      while (__stxr(v79 + 1, p_shared_owners));
      do
        v80 = __ldaxr(p_shared_owners);
      while (__stlxr(v80 - 1, p_shared_owners));
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
      __break(1u);
      return;
    }
    v88 = *(_QWORD *)(v3 - 176);
    sub_20819EB50(&v88, (uint64_t)&v82);
    v17 = (char *)operator new(0x50uLL);
    *(_QWORD *)v17 = &off_24C075360;
    *(_OWORD *)(v17 + 8) = *(_OWORD *)v83;
    *(_OWORD *)(v17 + 20) = *(_OWORD *)&v83[12];
    v18 = v85;
    *((_QWORD *)v17 + 5) = v84;
    *((_QWORD *)v17 + 6) = v18;
    *((_QWORD *)v17 + 7) = v86;
    *((_OWORD *)v17 + 4) = v87;
    *(_QWORD *)(v3 - 240) = v17;
    v82 = v17;
    v19 = (std::__shared_weak_count *)operator new(0x20uLL);
    v19->__shared_owners_ = 0;
    v20 = (unint64_t *)&v19->__shared_owners_;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0752C8;
    v19->__shared_weak_owners_ = 0;
    v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
    *(_QWORD *)v83 = v19;
    *(_QWORD *)(v3 - 240) = 0;
    v90 = v17;
    v91 = v19;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v92 = 0;
    if (*((_DWORD *)v17 + 3))
      v22 = *((_DWORD *)v17 + 2) == 0;
    else
      v22 = 1;
    v23 = *((_QWORD *)v17 + 2);
    if (v22)
      v24 = 0;
    else
      v24 = *((_QWORD *)v17 + 1);
    if (HIDWORD(v24) * HIDWORD(v23) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v25 = operator new(0x18uLL);
    *v25 = v18;
    v25[1] = v24;
    v25[2] = v23;
    v94 = v23;
    v93 = *(_OWORD *)v25;
    operator delete(v25);
    v95 = v93;
    v96 = *(_OWORD *)(v2 + 168);
    v26 = (*(uint64_t (**)(char *))(*(_QWORD *)v17 + 104))(v17);
    v27 = v26;
    if ((v26 & 0xFFFFFF) <= 0x10000)
      v27 = 0;
    v28 = v26 & 0xFF00;
    if ((v26 & 0xFF0000) == 0)
      v28 = 0;
    v97 = v28 & 0xFF00 | v27;
    do
      v29 = __ldaxr(v20);
    while (__stlxr(v29 - 1, v20));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v30 = *(unsigned int *)(v3 - 168);
    v31 = v94;
    if ((_DWORD)v30 != 1 || (_DWORD)v94 != 1)
    {
      v33 = *(_DWORD *)(v3 - 176);
      if (v33)
      {
        v34 = *(_DWORD *)(v3 - 172);
        if (v34)
        {
          v35 = v33 - 1;
          v36 = *(_BYTE **)(v3 - 184);
          v37 = (_BYTE *)v93;
          v38 = v34 - 1;
          if (v38)
          {
            v39 = HIDWORD(v94);
            v40 = *(unsigned int *)(v3 - 164);
            if (v35)
            {
              for (i = 0; i != v38; ++i)
              {
                v42 = v35;
                v43 = v36;
                v44 = v37;
                do
                {
                  *v44 = *v43;
                  v43 += v30;
                  v44 += v31;
                  --v42;
                }
                while (v42);
                *v44 = *v43;
                v36 += v40;
                v37 += v39;
              }
            }
            else
            {
              do
              {
                *v37 = *v36;
                v36 += v40;
                v37 += v39;
                --v38;
              }
              while (v38);
            }
          }
          for (; v35; --v35)
          {
            *v37 = *v36;
            v36 += v30;
            v37 += v31;
          }
          *v37 = *v36;
        }
      }
      goto LABEL_85;
    }
    v51 = HIDWORD(v94);
    v52 = *(unsigned int *)(v3 - 164);
    v53 = *(unsigned int *)(v3 - 176);
    if ((_DWORD)v52 == HIDWORD(v94) && (_DWORD)v52 == (_DWORD)v53)
    {
      v53 = (*(_DWORD *)(v3 - 172) * v52);
      v54 = *(const void **)(v3 - 184);
      if ((_DWORD)v53)
        v55 = v54 == 0;
      else
        v55 = 0;
      if (!v55)
      {
        if (!(_DWORD)v53)
          goto LABEL_85;
        goto LABEL_80;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_80:
        v61 = (void *)v93;
        v62 = v54;
LABEL_84:
        memmove(v61, v62, v53);
LABEL_85:
        v63 = *(_QWORD **)(v3 - 240);
        if (v63)
        {
          v64 = (void *)v63[6];
          if (v64)
            free(v64);
          operator delete(v63);
        }
        v65 = v90;
        v66 = v91;
        if (v91)
        {
          v67 = (unint64_t *)&v91->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
          v69 = v91;
        }
        else
        {
          v69 = 0;
        }
        v70 = HIDWORD(v96);
        if (BYTE4(v92))
          v71 = v92 | 0x100000000;
        else
          v71 = 0;
        v72 = v96;
        v73 = v93;
        v74 = v97;
        *(_QWORD *)v81 = v65;
        *(_QWORD *)(v81 + 8) = v66;
        *(_QWORD *)(v81 + 16) = v71;
        *(_QWORD *)(v81 + 24) = v72;
        *(_DWORD *)(v81 + 32) = v70;
        *(_QWORD *)(v81 + 40) = v73;
        *(_DWORD *)(v81 + 48) = 1;
        *(_WORD *)(v81 + 52) = v74;
        if (v69)
        {
          v75 = (unint64_t *)&v69->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      v56 = *(_DWORD *)(v3 - 172);
      if ((_DWORD)v53)
        v57 = v56 == 0;
      else
        v57 = 1;
      if (v57)
        goto LABEL_85;
      v58 = (char *)v93;
      v59 = *(char **)(v3 - 184);
      v60 = v56 - 1;
      if (v56 == 1)
      {
LABEL_81:
        if (v59
          || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v61 = v58;
          v62 = v59;
          goto LABEL_84;
        }
      }
      else
      {
        while (v59
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v58, v59, v53);
          v59 += v52;
          v58 += v51;
          if (!--v60)
            goto LABEL_81;
        }
      }
    }
    abort();
  }
  v6 = *(std::__shared_weak_count **)(v3 - 192);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v5 = *(_QWORD *)(v3 - 200);
    v10 = *(std::__shared_weak_count **)(v3 - 192);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t))(*(_QWORD *)v5 + 32))(&v89, v5);
  v14 = (*((uint64_t (**)(uint64_t (**)()))*v89 + 6))(v89);
  v15 = v89;
  if (v89)
  {
    v16 = operator new(0x20uLL);
    *v16 = &off_24C073880;
    v16[1] = 0;
    v16[2] = 0;
    v16[3] = v15;
  }
  else
  {
    v16 = 0;
  }
  v45 = *(_QWORD *)(v3 - 176);
  v46 = *(_DWORD *)(v3 - 164);
  v47 = *(_WORD *)(v3 - 160);
  *(_QWORD *)v81 = v15;
  *(_QWORD *)(v81 + 8) = v16;
  *(_QWORD *)(v81 + 16) = 0;
  *(_QWORD *)(v81 + 24) = v45;
  *(_DWORD *)(v81 + 32) = v46;
  *(_QWORD *)(v81 + 40) = v14;
  *(_DWORD *)(v81 + 48) = 1;
  *(_WORD *)(v81 + 52) = v47;
LABEL_55:
  v48 = *(std::__shared_weak_count **)(v3 - 192);
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_2081B1038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,_QWORD *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;

  sub_207C99D78(a14);
  sub_207F1703C(&a47);
  v53 = *(std::__shared_weak_count **)(v51 - 192);
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  _Unwind_Resume(a1);
}

size_t *sub_2081B2964(size_t *a1, _DWORD *a2, void **a3, char a4, void **a5, char a6, uint64_t a7)
{
  void *v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  BOOL v22;
  void *memptr[3];
  void **v25[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (void *)((*a2 != 0) | (unint64_t)(v13 << 32));
  }
  v14 = (v12 * HIDWORD(v11));
  v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  *a1 = v14;
  a1[1] = 0;
  a1[2] = v18;
  if ((_DWORD)v14)
  {
    memptr[0] = 0;
    v19 = malloc_type_posix_memalign(memptr, v18, v14, 0x1F88E90uLL);
    if (v19)
      sub_2081FBF78(v19, a1[2], v14);
    v20 = memptr[0];
    a1[1] = (size_t)memptr[0];
    v21 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
    if (v20 && a6)
    {
      if ((_DWORD)v21)
        v22 = HIDWORD(v21) == 0;
      else
        v22 = 1;
      if (v22)
        v21 = 0;
      memptr[0] = v20;
      memptr[1] = (void *)v21;
      memptr[2] = v11;
      if (HIDWORD(v21) * HIDWORD(v11) == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v25[0] = memptr;
      v25[1] = a5;
      sub_2080F2DC4(v25);
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
  }
  return a1;
}

void sub_2081B2AE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_2081B2B0C(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_2081B464C(a2, a1);
}

void sub_2081B2B34(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

char *sub_2081B2B90()
{
  _QWORD *v0;
  uint64_t v1;
  char *result;
  int v3;
  uint64_t (**v4)();
  _BYTE v5[56];
  uint64_t v6;
  __int128 v7;

  v4 = &off_24C075318;
  sub_20819EB50(&v3, (uint64_t)v5);
  result = (char *)operator new(0x50uLL);
  *(_QWORD *)result = &off_24C075360;
  *(_OWORD *)(result + 8) = *(_OWORD *)&v5[8];
  *(_OWORD *)(result + 20) = *(_OWORD *)(v1 + 20);
  *(_OWORD *)(result + 40) = *(_OWORD *)(v1 + 40);
  *((_QWORD *)result + 7) = v6;
  *((_OWORD *)result + 4) = v7;
  *v0 = result;
  return result;
}

void sub_2081B40CC()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2081B4100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  if (a33)
  {
    free(a33);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2081B464C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

char *sub_2081B469C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  size_t *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  char *result;
  __int128 v15;
  char v16;
  unint64_t v17;
  void *v18;
  _BYTE v19[28];
  size_t v20[3];
  __int128 v21;
  __int128 v22;

  v16 = 0;
  if (a3[1])
    v5 = *a3 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a3;
  if (v5)
    v6 = 0;
  v7 = v6 << 32;
  if (!HIDWORD(v6))
    v7 = 0;
  if ((_DWORD)v6)
    v8 = HIDWORD(v6) == 0;
  else
    v8 = 1;
  *(_QWORD *)v19 = v6;
  *(_QWORD *)&v19[8] = v7 | (v6 != 0);
  v19[16] = 0;
  v19[24] = 0;
  v18 = *(void **)&v19[8];
  if (v8)
    v6 = 0;
  v17 = v6;
  if ((HIDWORD(v7) & (HIDWORD(v7) - 1)) != 0)
    v9 = 1;
  else
    v9 = HIDWORD(v7);
  v10 = sub_2081B2964(v20, &v17, &v18, 1, (void **)&v16, 1, v9);
  v22 = *(_OWORD *)v19;
  *(_OWORD *)(v4 + 124) = *(_OWORD *)&v19[12];
  v11 = *v10;
  v12 = v20[1];
  v13 = v20[2];
  v15 = v21;
  result = (char *)operator new(0x50uLL);
  *(_QWORD *)result = &off_24C075360;
  *(_OWORD *)(result + 8) = v22;
  *(_OWORD *)(result + 20) = *(_OWORD *)(v4 + 124);
  *((_QWORD *)result + 5) = v11;
  *((_QWORD *)result + 6) = v12;
  *((_QWORD *)result + 7) = v13;
  *((_OWORD *)result + 4) = v15;
  *v3 = result;
  return result;
}

void sub_2081B7640()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2081B7674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  if (v17)
  {
    free(v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_2081B77D4(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2081FBF78(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x7FFFFFFF7FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 31) >> 1) == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x7FFFFFFF;
      if (v25 == 1)
      {
        sub_2080F4144((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x7FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 2 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_WORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 2 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_WORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_2081B7A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

unint64_t *sub_2081B7A34(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    v20 = malloc_type_posix_memalign(&memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2081FBF78(v20, a1[2], v15);
    v21 = memptr;
    a1[1] = (unint64_t)memptr;
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = v22;
      v25 = HIDWORD(v24) * ((v11 >> 31) >> 1);
      if (a6)
      {
        if (v25 == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v26 = v24 - 1;
          v27 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v28 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = *a5;
                v21 += v28;
                --v27;
              }
              while (v27);
            }
            else
            {
              v29 = 0;
              v30 = 2 * v28;
              do
              {
                v31 = v21;
                v32 = v24 - 1;
                do
                {
                  *v31 = *a5;
                  v31 += v11 & 0x7FFFFFFF;
                  --v32;
                }
                while (v32);
                *v31 = *a5;
                v21 = (_WORD *)((char *)v21 + v30);
                ++v29;
              }
              while (v29 != v27);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v11 & 0x7FFFFFFF;
              --v26;
            }
            while (v26);
          }
          *v21 = *a5;
        }
      }
      else
      {
        if (v25 == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v33 = v24 - 1;
          v34 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v35 = HIDWORD(v11) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *v21 = 0;
                v21 += v35;
                --v34;
              }
              while (v34);
            }
            else
            {
              v36 = 0;
              v37 = 2 * v35;
              do
              {
                v38 = v21;
                v39 = v24 - 1;
                do
                {
                  *v38 = 0;
                  v38 += v11 & 0x7FFFFFFF;
                  --v39;
                }
                while (v39);
                *v38 = 0;
                v21 = (_WORD *)((char *)v21 + v37);
                ++v36;
              }
              while (v36 != v34);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *v21 = 0;
              v21 += v11 & 0x7FFFFFFF;
              --v33;
            }
            while (v33);
          }
          *v21 = 0;
        }
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_2081B7D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081A12DC(v1);
  _Unwind_Resume(a1);
}

void sub_2081B7D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081A12DC(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_2081B7D50(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 4 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2081FBF78(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x3FFFFFFF;
      if (v25 == 1)
      {
        sub_2080F7640((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 4 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_DWORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 4 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_DWORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_2081B7F94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

size_t *sub_2081B7FB0(size_t *a1, unsigned int *a2, uint64_t a3, char a4, _BYTE *a5, char a6, uint64_t a7)
{
  size_t *v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  int v23;
  _BYTE *v24;
  size_t v25;
  BOOL v26;
  BOOL v27;
  char v28;
  size_t v29;
  int v30;
  size_t v31;
  size_t v32;
  BOOL v33;
  char v34;
  int v35;
  int v36;
  size_t v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  _BYTE *v43;
  int v44;
  int v45;
  _BYTE *v46;
  size_t v47;
  BOOL v48;
  char v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  char *v55;
  BOOL v56;
  char v57;
  int i;
  int v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  _BYTE *v64;
  size_t *v66;
  void *memptr;

  v10 = a1;
  if (a4)
  {
    v11 = *(_QWORD *)a3;
    v12 = *(_DWORD *)(a3 + 8);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32);
  if (v21 + 1 > 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  *a1 = v18;
  a1[1] = 0;
  a1[2] = v22;
  if ((_DWORD)v18)
  {
    memptr = 0;
    v23 = malloc_type_posix_memalign(&memptr, v22, v18, 0x1F88E90uLL);
    if (v23)
      sub_2081FBF78(v23, v10[2], v18);
    v24 = memptr;
    v10[1] = (size_t)memptr;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_QWORD *)a2;
  *((_DWORD *)v10 + 8) = a2[2];
  v10[3] = v25;
  *(size_t *)((char *)v10 + 36) = v11;
  *((_DWORD *)v10 + 11) = v12;
  if (v24 && a6)
  {
    if (*((_DWORD *)v10 + 6))
      v26 = *((_DWORD *)v10 + 7) == 0;
    else
      v26 = 1;
    v27 = v26 || *((_DWORD *)v10 + 8) == 0;
    v28 = v27;
    if (v27)
      v29 = 0;
    else
      v29 = v10[3];
    if (v27)
      v30 = 0;
    else
      v30 = *((_DWORD *)v10 + 8);
    if (v30 * v12 == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    if (v11 == 1)
    {
      v31 = HIDWORD(v11);
      if ((_DWORD)v29 * (_DWORD)v11 == HIDWORD(v11))
      {
        v32 = (HIDWORD(v29) * v29);
        if (v12 == HIDWORD(v29) * HIDWORD(v11))
        {
          memset(v24, *a5, (v32 * v30));
          return v10;
        }
        if ((_DWORD)v29)
          v56 = HIDWORD(v29) == 0;
        else
          v56 = 1;
        if (v56)
          v57 = 1;
        else
          v57 = v28;
        if ((v57 & 1) == 0)
        {
          for (i = v30 - 1; i; --i)
          {
            memset(v24, *a5, (HIDWORD(v29) * v29));
            v24 += v12;
          }
LABEL_93:
          memset(v24, *a5, v32);
        }
      }
      else
      {
        v47 = HIDWORD(v29);
        if ((_DWORD)v29)
          v48 = HIDWORD(v29) == 0;
        else
          v48 = 1;
        if (v48)
          v49 = 1;
        else
          v49 = v28;
        if ((v49 & 1) == 0)
        {
          v32 = v29;
          v50 = HIDWORD(v29) - 1;
          v51 = v30 - 1;
          v66 = v10;
          if (v30 != 1)
          {
            v52 = v12;
            if ((_DWORD)v47 == 1)
            {
              do
              {
                memset(v24, *a5, v32);
                v24 += v12;
                --v51;
              }
              while (v51);
            }
            else
            {
              v53 = 0;
              do
              {
                v54 = HIDWORD(v29) - 1;
                v55 = v24;
                do
                {
                  memset(v55, *a5, v32);
                  v55 += v31;
                  --v54;
                }
                while (v54);
                memset(v55, *a5, v32);
                v24 += v52;
                ++v53;
              }
              while (v53 != v51);
            }
          }
          if (HIDWORD(v29) == 1)
          {
            v10 = v66;
          }
          else
          {
            v10 = v66;
            do
            {
              memset(v24, *a5, v32);
              v24 += v31;
              --v50;
            }
            while (v50);
          }
          goto LABEL_93;
        }
      }
    }
    else
    {
      if (HIDWORD(v29))
        v33 = (_DWORD)v29 == 0;
      else
        v33 = 1;
      if (v33)
        v34 = 1;
      else
        v34 = v28;
      if ((v34 & 1) == 0 && (_DWORD)v29)
      {
        v35 = v29 - 1;
        v36 = HIDWORD(v29) - 1;
        v37 = HIDWORD(v11);
        v38 = v30 - 1;
        if (v30 != 1)
        {
          if (HIDWORD(v29) == 1)
          {
            if ((_DWORD)v29 == 1)
            {
              do
              {
                *v24 = *a5;
                v24 += v12;
                --v38;
              }
              while (v38);
            }
            else
            {
              v59 = 0;
              do
              {
                v60 = v29 - 1;
                v61 = v24;
                do
                {
                  *v61 = *a5;
                  v61 += v11;
                  --v60;
                }
                while (v60);
                *v61 = *a5;
                v24 += v12;
                ++v59;
              }
              while (v59 != v38);
            }
          }
          else
          {
            v39 = 0;
            if ((_DWORD)v29 == 1)
            {
              do
              {
                v45 = HIDWORD(v29) - 1;
                v46 = v24;
                do
                {
                  *v46 = *a5;
                  v46 += v37;
                  --v45;
                }
                while (v45);
                *v46 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
            else
            {
              do
              {
                v40 = 0;
                v41 = v24;
                do
                {
                  v42 = v29 - 1;
                  v43 = v41;
                  do
                  {
                    *v43 = *a5;
                    v43 += v11;
                    --v42;
                  }
                  while (v42);
                  *v43 = *a5;
                  v41 += v37;
                  ++v40;
                }
                while (v40 != v36);
                v44 = v29 - 1;
                do
                {
                  *v41 = *a5;
                  v41 += v11;
                  --v44;
                }
                while (v44);
                *v41 = *a5;
                v24 += v12;
                ++v39;
              }
              while (v39 != v38);
            }
          }
        }
        if (HIDWORD(v29) != 1)
        {
          if ((_DWORD)v29 == 1)
          {
            do
            {
              *v24 = *a5;
              v24 += v37;
              --v36;
            }
            while (v36);
          }
          else
          {
            v62 = 0;
            do
            {
              v63 = v29 - 1;
              v64 = v24;
              do
              {
                *v64 = *a5;
                v64 += v11;
                --v63;
              }
              while (v63);
              *v64 = *a5;
              v24 += v37;
              ++v62;
            }
            while (v62 != v36);
          }
        }
        if ((_DWORD)v29 != 1)
        {
          do
          {
            *v24 = *a5;
            v24 += v11;
            --v35;
          }
          while (v35);
        }
        *v24 = *a5;
      }
    }
  }
  return v10;
}

void sub_2081B8450(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081B8470(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, const __int16 *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  int v51;
  __int16 *v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  __int16 *v60;
  int v61;
  BOOL v62;
  char v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v71;
  unint64_t v72;
  __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  int16x8_t v76;
  int16x8_t *v77;
  unint64_t v78;
  int v79;
  __int16 *v80;
  int v81;
  uint64_t v82;
  __int16 *v83;
  int v84;
  unint64_t v85;
  __int16 *v86;
  unint64_t v87;
  int16x8_t v89;
  int16x8_t *v90;
  uint64_t v91;
  int16x8_t v92;
  int16x8_t *v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD v97[3];
  void *memptr;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _QWORD v104[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2081FBF78(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = (__int16 *)memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (!v25 || !a6)
    return a1;
  v27 = v12 & 0x7FFFFFFF;
  if (*(_DWORD *)(a1 + 24))
    v28 = *(_DWORD *)(a1 + 28) == 0;
  else
    v28 = 1;
  v29 = v28 || *(_DWORD *)(a1 + 32) == 0;
  v30 = v29;
  if (v29)
    v31 = 0;
  else
    v31 = *(_QWORD *)(a1 + 24);
  if (v29)
    v32 = 0;
  else
    v32 = *(_DWORD *)(a1 + 32);
  v33 = (v32 * v27);
  if ((_DWORD)v33 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_142;
  }
  v34 = v11 & 0x7FFFFFFF7FFFFFFFLL;
  v35 = v11 & 0x7FFFFFFF;
  if (v35 != 1)
  {
    if ((_DWORD)v31)
      v40 = HIDWORD(v31) == 0;
    else
      v40 = 1;
    if (v40)
      v41 = 1;
    else
      v41 = v30;
    if ((v41 & 1) != 0)
      return a1;
    v42 = v31 - 1;
    v43 = HIDWORD(v31) - 1;
    v44 = HIDWORD(v34);
    v45 = v32 - 1;
    if (v32 != 1)
    {
      if (HIDWORD(v31) == 1)
      {
        if ((_DWORD)v31 != 1)
        {
          v79 = 0;
          do
          {
            v80 = v25;
            v81 = v31 - 1;
            do
            {
              *v80 = *a5;
              v80 += v35;
              --v81;
            }
            while (v81);
            *v80 = *a5;
            v25 += v27;
            ++v79;
          }
          while (v79 != v45);
LABEL_110:
          if ((_DWORD)v31 != 1)
          {
            v82 = 2 * v35;
            do
            {
              *v25 = *a5;
              v25 = (__int16 *)((char *)v25 + v82);
              --v42;
            }
            while (v42);
          }
          goto LABEL_131;
        }
        do
        {
          *v25 = *a5;
          v25 += v27;
          --v45;
        }
        while (v45);
LABEL_131:
        *v25 = *a5;
        return a1;
      }
      if ((_DWORD)v31 == 1)
      {
        do
        {
          v83 = v25;
          v84 = HIDWORD(v31) - 1;
          do
          {
            *v83 = *a5;
            v83 += v44;
            --v84;
          }
          while (v84);
          *v83 = *a5;
          v25 += v27;
          ++v42;
        }
        while (v42 != v45);
        do
        {
LABEL_117:
          *v25 = *a5;
          v25 += v44;
          --v43;
        }
        while (v43);
        goto LABEL_131;
      }
      v46 = 0;
      v47 = 2 * v27;
      v48 = v44;
      v49 = 2 * v35;
      v50 = &v25[v44];
      do
      {
        v51 = 0;
        v52 = v50;
        v53 = v25;
        do
        {
          v54 = v52;
          v55 = v53;
          v56 = v31 - 1;
          do
          {
            *v55 = *a5;
            v55 = (__int16 *)((char *)v55 + v49);
            --v56;
          }
          while (v56);
          *v55 = *a5;
          v53 = (__int16 *)((char *)v53 + v48 * 2);
          ++v51;
          v52 = &v54[v48];
        }
        while (v51 != v43);
        v57 = v31 - 1;
        do
        {
          *v54 = *a5;
          v54 = (__int16 *)((char *)v54 + v49);
          --v57;
        }
        while (v57);
        *v54 = *a5;
        v25 = (__int16 *)((char *)v25 + v47);
        ++v46;
        v50 = (__int16 *)((char *)v50 + v47);
      }
      while (v46 != v45);
    }
    if (HIDWORD(v31) == 1)
      goto LABEL_110;
    if ((_DWORD)v31 != 1)
    {
      v58 = 0;
      v59 = 2 * v44;
      do
      {
        v60 = v25;
        v61 = v31 - 1;
        do
        {
          *v60 = *a5;
          v60 += v35;
          --v61;
        }
        while (v61);
        *v60 = *a5;
        v25 = (__int16 *)((char *)v25 + v59);
        ++v58;
      }
      while (v58 != v43);
      goto LABEL_110;
    }
    goto LABEL_117;
  }
  if (HIDWORD(v34) != (_DWORD)v31)
  {
    v96 = 0;
    v95 = v31;
    v97[0] = &v96;
    v97[1] = &v95;
    v97[2] = a5;
    if ((_DWORD)v31)
      v62 = HIDWORD(v31) == 0;
    else
      v62 = 1;
    if (v62)
      v63 = 1;
    else
      v63 = v30;
    if ((v63 & 1) == 0)
    {
      LODWORD(memptr) = 0;
      HIDWORD(memptr) = v31 - 1;
      v99 = 1;
      v100 = HIDWORD(v31) - 1;
      v104[0] = 0;
      v104[1] = 0;
      v64 = v32 - 1;
      v101 = (v11 & 0x7FFFFFFF7FFFFFFFLL) >> 32;
      v102 = v32 - 1;
      v103 = v27;
      if (v32 != 1)
      {
        v65 = 2 * v27;
        do
        {
          sub_2080F42D4((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
          v25 = (__int16 *)((char *)v25 + v65);
          --v64;
        }
        while (v64);
      }
      sub_2080F42D4((uint64_t)&memptr, (uint64_t)v104, (uint64_t)v97, (unint64_t)v25);
    }
    return a1;
  }
  v36 = (HIDWORD(v31) * v31);
  if ((_DWORD)v27 != (_DWORD)v36)
  {
    if ((_DWORD)v31)
      v66 = HIDWORD(v31) == 0;
    else
      v66 = 1;
    if (v66)
      v67 = 1;
    else
      v67 = v30;
    if ((v67 & 1) != 0)
      return a1;
    v68 = v32 - 1;
    if (v32 == 1)
    {
      if (!(_DWORD)v36)
        return a1;
    }
    else
    {
      if (!(_DWORD)v36)
        return a1;
      v69 = 0;
      v70 = 2 * v27;
      v71 = v25;
      do
      {
        v72 = (unint64_t)v71;
        if (!v71
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_142;
        }
        v73 = (__int16 *)v72;
        v74 = v36;
        if (v36 < 0x10)
          goto LABEL_102;
        if (v72 < (unint64_t)(a5 + 1))
        {
          v73 = (__int16 *)v72;
          v74 = v36;
          if ((__int16 *)((char *)&v25[v36] + v70 * v69) > a5)
            goto LABEL_102;
        }
        v75 = 0;
        v73 = (__int16 *)(v72 + 2 * (v36 & 0xFFFFFFF0));
        v76 = vld1q_dup_s16(a5);
        do
        {
          v77 = (int16x8_t *)(v72 + v75);
          *v77 = v76;
          v77[1] = v76;
          v75 += 32;
        }
        while (((2 * v36) & 0x1FFFFFFE0) != v75);
        v74 = v36 & 0xF;
        if ((v36 & 0xFFFFFFF0) != v36)
        {
LABEL_102:
          v78 = v74 + 1;
          do
          {
            *v73++ = *a5;
            --v78;
          }
          while (v78 > 1);
        }
        v71 = (__int16 *)(v72 + v70);
        ++v69;
      }
      while ((_DWORD)v69 != v68);
      v25 = (__int16 *)(v72 + v70);
      if (!v72)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v25 = 0;
          goto LABEL_123;
        }
LABEL_142:
        abort();
      }
    }
LABEL_123:
    v85 = v36 - ((_DWORD)v36 != 0) + 1;
    if (v85 >= 0x10 && (v25 >= a5 + 1 || &v25[v36] <= a5))
    {
      v86 = &v25[v85 & 0xFFFFFFFFFFFFFFF0];
      v36 -= v85 & 0xFFFFFFFFFFFFFFF0;
      v92 = vld1q_dup_s16(a5);
      v93 = (int16x8_t *)(v25 + 8);
      v94 = v85 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v93[-1] = v92;
        *v93 = v92;
        v93 += 2;
        v94 -= 16;
      }
      while (v94);
      if (v85 == (v85 & 0xFFFFFFFFFFFFFFF0))
        return a1;
    }
    else
    {
      v86 = v25;
    }
    v87 = v36 + 1;
    do
    {
      *v86++ = *a5;
      --v87;
    }
    while (v87 > 1);
    return a1;
  }
  if (!(_DWORD)v33)
    return a1;
  if (v33 < 0x10 || v25 < a5 + 1 && &v25[v33] > a5)
  {
    v37 = v25;
    v38 = (v32 * v27);
LABEL_44:
    v39 = v38 + 1;
    do
    {
      *v37++ = *a5;
      --v39;
    }
    while (v39 > 1);
    return a1;
  }
  v37 = &v25[v33 & 0xFFFFFFF0];
  v38 = ((_BYTE)v32 * (_BYTE)v27) & 0xF;
  v89 = vld1q_dup_s16(a5);
  v90 = (int16x8_t *)(v25 + 8);
  v91 = v33 & 0xFFFFFFF0;
  do
  {
    v90[-1] = v89;
    *v90 = v89;
    v90 += 2;
    v91 -= 16;
  }
  while (v91);
  if ((v33 & 0xFFFFFFF0) != v33)
    goto LABEL_44;
  return a1;
}

void sub_2081B8B38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081B8B5C(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  char v31;
  unint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  int v47;
  _WORD *v48;
  _WORD *v49;
  _WORD *v50;
  _WORD *v51;
  int v52;
  int v53;
  int v54;
  _WORD *v55;
  BOOL v56;
  char v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  int v68;
  _WORD *v69;
  _WORD *v70;
  _WORD *v71;
  _WORD *v72;
  int v73;
  int v74;
  int v75;
  _WORD *v76;
  int v77;
  uint64_t v78;
  _WORD *v79;
  int v80;
  int v81;
  uint64_t v82;
  _WORD *v83;
  int v84;
  int v85;
  uint64_t v86;
  _WORD *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _WORD *v92;
  int v93;
  uint64_t v94;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 2 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    memptr = 0;
    v24 = malloc_type_posix_memalign(&memptr, v23, 2 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2081FBF78(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = memptr;
    *(_QWORD *)(a1 + 8) = memptr;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 44) = 2 * v12;
  if (v25)
  {
    v27 = v12 & 0x7FFFFFFF;
    v28 = v11 & 0x7FFFFFFF7FFFFFFFLL;
    if (*(_DWORD *)(a1 + 24))
      v29 = *(_DWORD *)(a1 + 28) == 0;
    else
      v29 = 1;
    v30 = v29 || *(_DWORD *)(a1 + 32) == 0;
    v31 = v30;
    if (v30)
      v32 = 0;
    else
      v32 = *(_QWORD *)(a1 + 24);
    if (v30)
      v33 = 0;
    else
      v33 = *(_DWORD *)(a1 + 32);
    v34 = v33 * v27;
    if (a6)
    {
      if (v34 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if (HIDWORD(v32))
        v35 = (_DWORD)v32 == 0;
      else
        v35 = 1;
      if (v35)
        v36 = 1;
      else
        v36 = v31;
      if ((v36 & 1) == 0 && (_DWORD)v32)
      {
        v37 = v32 - 1;
        v38 = HIDWORD(v32) - 1;
        v39 = HIDWORD(v28);
        v40 = v33 - 1;
        if (v33 != 1)
        {
          v41 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if ((_DWORD)v32 == 1)
            {
              do
              {
                *v25 = *a5;
                v25 += v27;
                --v40;
              }
              while (v40);
            }
            else
            {
              v77 = 0;
              v78 = 2 * v41;
              do
              {
                v79 = v25;
                v80 = v32 - 1;
                do
                {
                  *v79 = *a5;
                  v79 = (_WORD *)((char *)v79 + v78);
                  --v80;
                }
                while (v80);
                *v79 = *a5;
                v25 += v27;
                ++v77;
              }
              while (v77 != v40);
            }
          }
          else
          {
            v42 = 0;
            v43 = 2 * v27;
            v44 = v39;
            if ((_DWORD)v32 == 1)
            {
              do
              {
                v54 = HIDWORD(v32) - 1;
                v55 = v25;
                do
                {
                  *v55 = *a5;
                  v55 = (_WORD *)((char *)v55 + v44 * 2);
                  --v54;
                }
                while (v54);
                *v55 = *a5;
                v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
              }
              while (v42 != v40);
            }
            else
            {
              v45 = 2 * v41;
              v46 = &v25[v44];
              do
              {
                v47 = 0;
                v48 = v46;
                v49 = v25;
                do
                {
                  v50 = v48;
                  v51 = v49;
                  v52 = v32 - 1;
                  do
                  {
                    *v51 = *a5;
                    v51 = (_WORD *)((char *)v51 + v45);
                    --v52;
                  }
                  while (v52);
                  *v51 = *a5;
                  v49 = (_WORD *)((char *)v49 + v44 * 2);
                  ++v47;
                  v48 = &v50[v44];
                }
                while (v47 != v38);
                v53 = v32 - 1;
                do
                {
                  *v50 = *a5;
                  v50 = (_WORD *)((char *)v50 + v45);
                  --v53;
                }
                while (v53);
                *v50 = *a5;
                v25 = (_WORD *)((char *)v25 + v43);
                ++v42;
                v46 = (_WORD *)((char *)v46 + v43);
              }
              while (v42 != v40);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if ((_DWORD)v32 == 1)
          {
            v89 = 2 * v39;
            do
            {
              *v25 = *a5;
              v25 = (_WORD *)((char *)v25 + v89);
              --v38;
            }
            while (v38);
          }
          else
          {
            v85 = 0;
            v86 = 2 * v39;
            do
            {
              v87 = v25;
              v88 = v32 - 1;
              do
              {
                *v87 = *a5;
                v87 += v11 & 0x7FFFFFFF;
                --v88;
              }
              while (v88);
              *v87 = *a5;
              v25 = (_WORD *)((char *)v25 + v86);
              ++v85;
            }
            while (v85 != v38);
          }
        }
        if ((_DWORD)v32 != 1)
        {
          do
          {
            *v25 = *a5;
            v25 += v11 & 0x7FFFFFFF;
            --v37;
          }
          while (v37);
        }
        *v25 = *a5;
      }
    }
    else
    {
      if (v34 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if (HIDWORD(v32))
        v56 = (_DWORD)v32 == 0;
      else
        v56 = 1;
      if (v56)
        v57 = 1;
      else
        v57 = v31;
      if ((v57 & 1) == 0 && (_DWORD)v32)
      {
        v58 = v32 - 1;
        v59 = HIDWORD(v32) - 1;
        v60 = HIDWORD(v28);
        v61 = v33 - 1;
        if (v33 != 1)
        {
          v62 = v11 & 0x7FFFFFFF;
          if (HIDWORD(v32) == 1)
          {
            if ((_DWORD)v32 == 1)
            {
              do
              {
                *v25 = 0;
                v25 += v27;
                --v61;
              }
              while (v61);
            }
            else
            {
              v81 = 0;
              v82 = 2 * v62;
              do
              {
                v83 = v25;
                v84 = v32 - 1;
                do
                {
                  *v83 = 0;
                  v83 = (_WORD *)((char *)v83 + v82);
                  --v84;
                }
                while (v84);
                *v83 = 0;
                v25 += v27;
                ++v81;
              }
              while (v81 != v61);
            }
          }
          else
          {
            v63 = 0;
            v64 = 2 * v27;
            v65 = v60;
            if ((_DWORD)v32 == 1)
            {
              do
              {
                v75 = HIDWORD(v32) - 1;
                v76 = v25;
                do
                {
                  *v76 = 0;
                  v76 = (_WORD *)((char *)v76 + v65 * 2);
                  --v75;
                }
                while (v75);
                *v76 = 0;
                v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
              }
              while (v63 != v61);
            }
            else
            {
              v66 = 2 * v62;
              v67 = &v25[v65];
              do
              {
                v68 = 0;
                v69 = v67;
                v70 = v25;
                do
                {
                  v71 = v69;
                  v72 = v70;
                  v73 = v32 - 1;
                  do
                  {
                    *v72 = 0;
                    v72 = (_WORD *)((char *)v72 + v66);
                    --v73;
                  }
                  while (v73);
                  *v72 = 0;
                  v70 = (_WORD *)((char *)v70 + v65 * 2);
                  ++v68;
                  v69 = &v71[v65];
                }
                while (v68 != v59);
                v74 = v32 - 1;
                do
                {
                  *v71 = 0;
                  v71 = (_WORD *)((char *)v71 + v66);
                  --v74;
                }
                while (v74);
                *v71 = 0;
                v25 = (_WORD *)((char *)v25 + v64);
                ++v63;
                v67 = (_WORD *)((char *)v67 + v64);
              }
              while (v63 != v61);
            }
          }
        }
        if (HIDWORD(v32) != 1)
        {
          if ((_DWORD)v32 == 1)
          {
            v94 = 2 * v60;
            do
            {
              *v25 = 0;
              v25 = (_WORD *)((char *)v25 + v94);
              --v59;
            }
            while (v59);
          }
          else
          {
            v90 = 0;
            v91 = 2 * v60;
            do
            {
              v92 = v25;
              v93 = v32 - 1;
              do
              {
                *v92 = 0;
                v92 += v11 & 0x7FFFFFFF;
                --v93;
              }
              while (v93);
              *v92 = 0;
              v25 = (_WORD *)((char *)v25 + v91);
              ++v90;
            }
            while (v90 != v59);
          }
        }
        if ((_DWORD)v32 != 1)
        {
          do
          {
            *v25 = 0;
            v25 += v11 & 0x7FFFFFFF;
            --v58;
          }
          while (v58);
        }
        *v25 = 0;
      }
    }
  }
  return a1;
}

void sub_2081B9100(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081A2C40(v1);
  _Unwind_Resume(a1);
}

void sub_2081B9114(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2081A2C40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2081B9128(uint64_t a1, unsigned int *a2)
{
  _BYTE *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  size_t v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[3];
  __int128 v61;
  uint64_t v62;

  v3 = *(_BYTE **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v56 = *(_OWORD *)a2;
    v57 = *((_OWORD *)a2 + 1);
    v58 = *((_OWORD *)a2 + 2);
    v59 = *((_QWORD *)a2 + 6);
    sub_2081A19EC((uint64_t)v60, (uint64_t)(a2 + 14));
    *(_OWORD *)a1 = v56;
    *(_OWORD *)(a1 + 16) = v57;
    *(_OWORD *)(a1 + 32) = v58;
    *(_OWORD *)(a1 + 80) = v61;
    *(_QWORD *)(a1 + 96) = v62;
    v4 = v60[0];
    *(_QWORD *)(a1 + 48) = v59;
    *(_QWORD *)(a1 + 56) = v4;
    v5 = *(void **)(a1 + 64);
    if (v5)
      free(v5);
    v6 = v60[2];
    *(_QWORD *)(a1 + 64) = v60[1];
    *(_QWORD *)(a1 + 72) = v6;
    return a1;
  }
  if (a2[3] == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    v24 = (char *)a2[4];
    v25 = *a2;
    v54 = v24;
    v55 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24 != (_DWORD)v55 || (_DWORD)v24 != (_DWORD)v25)
    {
      if (!(_DWORD)v25)
        return a1;
      v31 = a2[1];
      if (!v31)
        return a1;
      v32 = a2[2];
      if (!v32)
        return a1;
      v33 = v31 - 1;
      v34 = (char *)*((_QWORD *)a2 + 8);
      v53 = v32 - 1;
      if (v32 == 1)
      {
LABEL_81:
        if (v33)
        {
          while (v34
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v34, v25);
            v34 = &v24[(_QWORD)v34];
            v3 += v55;
            if (!--v33)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v34
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v34, v25);
            return a1;
          }
        }
      }
      else
      {
        v50 = *(unsigned int *)(a1 + 20);
        v49 = a2[5];
        if (v31 == 1)
        {
          while (v34
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v34, v25);
            v34 += v49;
            v3 += v50;
            if (!--v53)
              goto LABEL_81;
          }
        }
        else
        {
          v35 = 0;
          while (1)
          {
            v51 = v35;
            v36 = v34;
            v37 = 0;
            v52 = v36;
            v38 = v3;
            do
            {
              while (v36)
              {
                memmove(v38, v36, v25);
                v36 = &v24[(_QWORD)v36];
                v38 += v55;
                if (++v37 == v33)
                  goto LABEL_41;
              }
              v39 = v25;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v40 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (byte_254530A10)
                v41 = byte_254530A18 == 0;
              else
                v41 = 0;
              if (!v41)
              {
                v42 = qword_2545309E8;
                v43 = qword_2545309F0;
                while (v42 != v43)
                {
                  v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v42;
                  v44 = *(_QWORD *)(v42 + 8);
                  v42 += 16;
                  v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v46 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_90;
              v25 = v39;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              memcpy(v38, 0, v39);
              v24 = v54;
              v38 += v55;
              ++v37;
              v36 = v54;
            }
            while (v37 != v33);
            v36 = v54;
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
LABEL_41:
            memmove(v38, v36, v25);
            v34 = &v52[v49];
            v3 += v50;
            v35 = v51 + 1;
            if (v51 + 1 == v53)
              goto LABEL_81;
          }
        }
      }
      goto LABEL_90;
    }
    v26 = a2[5];
    v27 = *(unsigned int *)(a1 + 20);
    v28 = a2[1];
    v29 = v28 * a2[4];
    if ((_DWORD)v26 == (_DWORD)v27 && (_DWORD)v26 == (_DWORD)v29)
    {
      v29 = v26 * a2[2];
      v30 = (char *)*((_QWORD *)a2 + 8);
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v3 = *(_BYTE **)(a1 + 64);
          goto LABEL_75;
        }
LABEL_90:
        abort();
      }
    }
    else
    {
      if (!(_DWORD)v54)
        return a1;
      if (!v28)
        return a1;
      v47 = a2[2];
      if (!v47)
        return a1;
      v30 = (char *)*((_QWORD *)a2 + 8);
      v48 = v47 - 1;
      if (v47 != 1)
      {
        if (!(_DWORD)v29)
          return a1;
        while (v30
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v30, v29);
          v30 += v26;
          v3 += v27;
          if (!--v48)
            goto LABEL_70;
        }
        goto LABEL_90;
      }
LABEL_70:
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))goto LABEL_75;
        goto LABEL_90;
      }
    }
    if (!(_DWORD)v29)
      return a1;
LABEL_75:
    memmove(v3, v30, v29);
    return a1;
  }
  if (*a2)
  {
    v9 = a2[1];
    if (v9)
    {
      v10 = a2[2];
      if (v10)
      {
        v11 = v9 - 1;
        v12 = a2[4];
        v13 = *(unsigned int *)(a1 + 16);
        v14 = (_BYTE *)*((_QWORD *)a2 + 8);
        v15 = v10 - 1;
        if (v15)
        {
          v16 = *(unsigned int *)(a1 + 20);
          v17 = a2[5];
          if (v11)
          {
            v18 = 0;
            v19 = v3 + 2;
            v20 = v14 + 2;
            do
            {
              v21 = v20;
              v22 = v19;
              v23 = v11;
              do
              {
                *(v22 - 2) = *(v21 - 2);
                *(v22 - 1) = *(v21 - 1);
                *v22 = *v21;
                v22 += v13;
                v21 += v12;
                --v23;
              }
              while (v23);
              *(v22 - 2) = *(v21 - 2);
              *(v22 - 1) = *(v21 - 1);
              *v22 = *v21;
              v14 += v17;
              v3 += v16;
              ++v18;
              v19 += v16;
              v20 += v17;
            }
            while (v18 != v15);
          }
          else
          {
            do
            {
              *v3 = *v14;
              v3[1] = v14[1];
              v3[2] = v14[2];
              v14 += v17;
              v3 += v16;
              --v15;
            }
            while (v15);
          }
        }
        for (; v11; --v11)
        {
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v14 += v12;
          v3 += v13;
        }
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
      }
    }
  }
  return a1;
}

uint64_t sub_2081B986C(uint64_t a1, unsigned int *a2)
{
  _WORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_WORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_WORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 2 * v31);
          return a1;
        }
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v3 = *(_WORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 2 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 2 * v27;
        v51 = 2 * v28;
        while (v48
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v48, 2 * v30);
          v48 += v50;
          v3 = (_WORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 2 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 2 * v25;
          while (v36
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            v36 += 2 * v61;
            v3 = (_WORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 2 * a2[5];
        v53 = 2 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_WORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(2 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 2 * v61;
              v39 += 2 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v40 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (byte_254530A10)
              v41 = byte_254530A18 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_2545309E8;
              v43 = qword_2545309F0;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_92;
            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v39, 0, __len);
            v39 += 2 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[2 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_2081A22DC((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

uint64_t sub_2081B9FE0(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  _WORD *v3;
  void *v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  _WORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _WORD *v49;
  __int16 *v50;
  uint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int16 v55;
  _BOOL4 v56;
  _WORD *v57;
  __int16 *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  _WORD *v76;
  __int16 *v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _WORD *v86;
  __int16 *v87;
  __int128 *v88;
  _OWORD *v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  _WORD *v103;
  __int16 *v104;
  uint64_t v105;
  unint64_t v106;
  _OWORD *v107;
  __int128 v108;
  __int16 v109;
  _BOOL4 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _WORD *v114;
  __int16 *v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  __int16 v120;
  _BOOL4 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _WORD *v125;
  __int16 *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _QWORD v151[3];
  __int128 v152;
  uint64_t v153;

  v2 = a1;
  v3 = *(_WORD **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v147 = *(_OWORD *)a2;
    v148 = *((_OWORD *)a2 + 1);
    v149 = *((_OWORD *)a2 + 2);
    v150 = *((_QWORD *)a2 + 6);
    sub_2081A2CE4((uint64_t)v151, (uint64_t)(a2 + 14));
    *(_OWORD *)v2 = v147;
    *(_OWORD *)(v2 + 16) = v148;
    *(_OWORD *)(v2 + 32) = v149;
    *(_QWORD *)(v2 + 48) = v150;
    *(_OWORD *)(v2 + 80) = v152;
    *(_QWORD *)(v2 + 96) = v153;
    v4 = *(void **)(v2 + 64);
    if (v4)
    {
      if (*(_DWORD *)(v2 + 88))
        v5 = *(_DWORD *)(v2 + 84) == 0;
      else
        v5 = 1;
      if (v5 || *(_DWORD *)(v2 + 80) == 0)
        v7 = 0;
      else
        v7 = *(_DWORD *)(v2 + 88);
      if (v7 * (*(_DWORD *)(v2 + 100) >> 1) == -1)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v4 = *(void **)(v2 + 64);
        *(_QWORD *)(v2 + 56) = v151[0];
        if (!v4)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(v2 + 56) = v151[0];
      }
      free(v4);
    }
    else
    {
      *(_QWORD *)(v2 + 56) = v151[0];
    }
LABEL_20:
    v8 = v151[2];
    *(_QWORD *)(v2 + 64) = v151[1];
    *(_QWORD *)(v2 + 72) = v8;
    return v2;
  }
  if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
  {
    if (*a2)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = a2[2];
        if (v12)
        {
          v13 = v11 - 1;
          v14 = (_WORD *)*((_QWORD *)a2 + 8);
          v15 = 2 * a2[4];
          v16 = 2 * *(unsigned int *)(a1 + 16);
          v17 = v12 - 1;
          if (v17)
          {
            v18 = *(unsigned int *)(a1 + 20);
            v19 = a2[5];
            if (v13)
            {
              v20 = 0;
              v21 = v3 + 2;
              v22 = v14 + 2;
              do
              {
                v23 = v22;
                v24 = v21;
                v25 = v13;
                do
                {
                  *(v24 - 2) = *(v23 - 2);
                  *(v24 - 1) = *(v23 - 1);
                  *v24 = *v23;
                  v24 = (_WORD *)((char *)v24 + v16);
                  v23 = (_WORD *)((char *)v23 + v15);
                  --v25;
                }
                while (v25);
                *(v24 - 2) = *(v23 - 2);
                *(v24 - 1) = *(v23 - 1);
                *v24 = *v23;
                v14 += v19;
                v3 += v18;
                ++v20;
                v21 += v18;
                v22 += v19;
              }
              while (v20 != v17);
            }
            else
            {
              v92 = 2 * v19;
              v93 = 2 * v18;
              do
              {
                *v3 = *v14;
                v3[1] = v14[1];
                v3[2] = v14[2];
                v14 = (_WORD *)((char *)v14 + v92);
                v3 = (_WORD *)((char *)v3 + v93);
                --v17;
              }
              while (v17);
            }
          }
          for (; v13; --v13)
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v14 = (_WORD *)((char *)v14 + v15);
            v3 = (_WORD *)((char *)v3 + v16);
          }
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
        }
      }
    }
    return v2;
  }
  v26 = a2[4];
  v27 = *(unsigned int *)(a1 + 16);
  v28 = *a2;
  if ((_DWORD)v26 != (_DWORD)v27 || (_DWORD)v26 != (_DWORD)v28)
  {
    if (!(_DWORD)v28)
      return v2;
    v35 = a2[1];
    if (!v35)
      return v2;
    v36 = a2[2];
    if (!v36)
      return v2;
    v37 = v35 - 1;
    v38 = *((_QWORD *)a2 + 8);
    v39 = 2 * v27;
    v138 = v36 - 1;
    v144 = *a2;
    v143 = v35 - 1;
    v132 = a2[4];
    if (v36 == 1)
    {
      v44 = *(_QWORD *)(a1 + 64);
LABEL_105:
      if (v37)
      {
        v95 = 0;
        v96 = 2 * v132;
        v97 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v98 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
        v99 = 2 * v98;
        v100 = v44;
        v101 = v38;
        while (1)
        {
          if (!v101)
          {
            v102 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v37 = v143;
            v28 = v144;
            if (v102)
              goto LABEL_133;
          }
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if (v97 < 0xF)
            goto LABEL_147;
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if ((unint64_t)(v44 + v39 * v95 - (v38 + v96 * v95)) < 0x20)
            goto LABEL_147;
          v105 = 0;
          v103 = (_WORD *)(v100 + v99);
          v104 = (__int16 *)(v101 + v99);
          v106 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v107 = (_OWORD *)(v100 + v105);
            v108 = *(_OWORD *)(v101 + v105 + 16);
            *v107 = *(_OWORD *)(v101 + v105);
            v107[1] = v108;
            v105 += 32;
            v106 -= 16;
          }
          while (v106);
          if (v97 + 1 != v98)
          {
LABEL_147:
            do
            {
              v109 = *v104++;
              *v103++ = v109;
            }
            while (v104 != (__int16 *)(v101 + 2 * v28));
          }
          v101 += v96;
          v100 += v39;
          if ((_DWORD)++v95 == v37)
            goto LABEL_118;
        }
      }
      v100 = v44;
      v101 = v38;
LABEL_118:
      if (!v101)
      {
        v110 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v28 = v144;
        if (v110)
LABEL_133:
          abort();
      }
      v111 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v2 = a1;
      if (v111 < 0xF || (unint64_t)(v100 - v101) < 0x20)
      {
        v114 = (_WORD *)v100;
        v115 = (__int16 *)v101;
      }
      else
      {
        v112 = v111 + 1;
        v113 = (v111 + 1) & 0xFFFFFFFFFFFFFFF0;
        v114 = (_WORD *)(v100 + 2 * v113);
        v115 = (__int16 *)(v101 + 2 * v113);
        v116 = (__int128 *)(v101 + 16);
        v117 = (_OWORD *)(v100 + 16);
        v118 = v113;
        do
        {
          v119 = *v116;
          *(v117 - 1) = *(v116 - 1);
          *v117 = v119;
          v116 += 2;
          v117 += 2;
          v118 -= 16;
        }
        while (v118);
        if (v112 == v113)
          return v2;
      }
      do
      {
        v120 = *v115++;
        *v114++ = v120;
      }
      while (v115 != (__int16 *)(v101 + 2 * v28));
      return v2;
    }
    v142 = 0;
    v40 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v139 = 2 * a2[5];
    v140 = 2 * *(unsigned int *)(a1 + 20);
    v41 = 2 * v26;
    v146 = v40 + 1;
    v42 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
    v43 = 2 * v42;
    v135 = *((_QWORD *)a2 + 8);
    v136 = *(_QWORD *)(a1 + 64);
    v44 = v136;
    while (1)
    {
      v141 = v38;
      v45 = v44;
      v46 = v38;
      if (v37)
      {
        v47 = 0;
        v45 = v44;
        v46 = v141;
        do
        {
          if (!v46)
          {
            v48 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v37 = v143;
            v28 = v144;
            if (v48)
              goto LABEL_133;
          }
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if (v40 < 0xF)
            goto LABEL_148;
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if ((unint64_t)(v136 + v140 * v142 + v39 * v47 - (v135 + v139 * v142 + v41 * v47)) < 0x20)
            goto LABEL_148;
          v51 = 0;
          v49 = (_WORD *)(v45 + v43);
          v50 = (__int16 *)(v46 + v43);
          v52 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v53 = (_OWORD *)(v45 + v51);
            v54 = *(_OWORD *)(v46 + v51 + 16);
            *v53 = *(_OWORD *)(v46 + v51);
            v53[1] = v54;
            v51 += 32;
            v52 -= 16;
          }
          while (v52);
          if (v146 != v42)
          {
LABEL_148:
            do
            {
              v55 = *v50++;
              *v49++ = v55;
            }
            while (v50 != (__int16 *)(v46 + 2 * v28));
          }
          v46 += v41;
          v45 += v39;
        }
        while ((_DWORD)++v47 != v37);
      }
      if (!v46)
      {
        v56 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v37 = v143;
        v28 = v144;
        if (v56)
          goto LABEL_133;
      }
      if (v40 < 0xF || (unint64_t)(v45 - v46) < 0x20)
      {
        v57 = (_WORD *)v45;
        v58 = (__int16 *)v46;
      }
      else
      {
        v57 = (_WORD *)(v45 + v43);
        v58 = (__int16 *)(v46 + v43);
        v59 = (__int128 *)(v46 + 16);
        v60 = (_OWORD *)(v45 + 16);
        v61 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *v60 = v62;
          v59 += 2;
          v60 += 2;
          v61 -= 16;
        }
        while (v61);
        if (v146 == v42)
          goto LABEL_49;
      }
      do
      {
        v63 = *v58++;
        *v57++ = v63;
      }
      while (v58 != (__int16 *)(v46 + 2 * v28));
LABEL_49:
      v38 = v141 + v139;
      v44 += v140;
      if ((_DWORD)++v142 == v138)
        goto LABEL_105;
    }
  }
  v29 = a2[5];
  v30 = *(unsigned int *)(a1 + 20);
  v31 = a2[1];
  v32 = v31 * v26;
  if ((_DWORD)v29 == (_DWORD)v30 && (_DWORD)v29 == (_DWORD)v32)
  {
    v33 = a2[2] * v29;
    v34 = *((_QWORD *)a2 + 8);
    if (!(_DWORD)v33 || v34)
    {
      if (!(_DWORD)v33)
        return v2;
    }
    else
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_133;
      }
      v3 = *(_WORD **)(v2 + 64);
    }
    v83 = (v33 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v83 < 0xF || (unint64_t)v3 - v34 < 0x20)
    {
      v86 = v3;
      v87 = (__int16 *)v34;
    }
    else
    {
      v84 = v83 + 1;
      v85 = (v83 + 1) & 0xFFFFFFFFFFFFFFF0;
      v86 = &v3[v85];
      v87 = (__int16 *)(v34 + 2 * v85);
      v88 = (__int128 *)(v34 + 16);
      v89 = v3 + 8;
      v90 = v85;
      do
      {
        v91 = *v88;
        *(v89 - 1) = *(v88 - 1);
        *v89 = v91;
        v88 += 2;
        v89 += 2;
        v90 -= 16;
      }
      while (v90);
      if (v84 == v85)
        return v2;
    }
    do
    {
      v94 = *v87++;
      *v86++ = v94;
    }
    while (v87 != (__int16 *)(v34 + 2 * v33));
    return v2;
  }
  if ((_DWORD)v26)
  {
    if (v31)
    {
      v64 = a2[2];
      if (v64)
      {
        v65 = *((_QWORD *)a2 + 8);
        v66 = v64 - 1;
        v145 = v32;
        if (v64 == 1)
        {
          v134 = a1;
          v70 = *(_QWORD *)(a1 + 64);
          v74 = *((_QWORD *)a2 + 8);
LABEL_130:
          if (!(_DWORD)v32 || v74)
          {
            v2 = v134;
            if (!(_DWORD)v32)
              return v2;
          }
          else
          {
            v121 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v32 = v145;
            v2 = v134;
            if (v121)
              goto LABEL_133;
          }
          v122 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v122 < 0xF || (unint64_t)(v70 - v74) < 0x20)
          {
            v125 = (_WORD *)v70;
            v126 = (__int16 *)v74;
          }
          else
          {
            v123 = v122 + 1;
            v124 = (v122 + 1) & 0xFFFFFFFFFFFFFFF0;
            v125 = (_WORD *)(v70 + 2 * v124);
            v126 = (__int16 *)(v74 + 2 * v124);
            v127 = (__int128 *)(v74 + 16);
            v128 = (_OWORD *)(v70 + 16);
            v129 = v124;
            do
            {
              v130 = *v127;
              *(v128 - 1) = *(v127 - 1);
              *v128 = v130;
              v127 += 2;
              v128 += 2;
              v129 -= 16;
            }
            while (v129);
            if (v123 == v124)
              return v2;
          }
          do
          {
            v131 = *v126++;
            *v125++ = v131;
          }
          while (v126 != (__int16 *)(v74 + 2 * v32));
          return v2;
        }
        if ((_DWORD)v32)
        {
          v134 = a1;
          v67 = 0;
          v68 = 2 * v30;
          v69 = 2 * v29;
          v70 = *(_QWORD *)(a1 + 64);
          v71 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v72 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
          v73 = 2 * v72;
          v137 = v70;
          v74 = *((_QWORD *)a2 + 8);
          while (1)
          {
            if (!v74)
            {
              v75 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v32 = v145;
              if (v75)
                goto LABEL_133;
            }
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if (v71 < 0xF)
              goto LABEL_149;
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if ((unint64_t)(v137 + v68 * v67 - (v65 + v69 * v67)) < 0x20)
              goto LABEL_149;
            v78 = 0;
            v76 = (_WORD *)(v70 + v73);
            v77 = (__int16 *)(v74 + v73);
            v79 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v80 = (_OWORD *)(v70 + v78);
              v81 = *(_OWORD *)(v74 + v78 + 16);
              *v80 = *(_OWORD *)(v74 + v78);
              v80[1] = v81;
              v78 += 32;
              v79 -= 16;
            }
            while (v79);
            if (v71 + 1 != v72)
            {
LABEL_149:
              do
              {
                v82 = *v77++;
                *v76++ = v82;
              }
              while (v77 != (__int16 *)(v74 + 2 * v32));
            }
            v74 += v69;
            v70 += v68;
            if ((_DWORD)++v67 == v66)
              goto LABEL_130;
          }
        }
      }
    }
  }
  return v2;
}

void sub_2081BA9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_208192134((uint64_t)va);
  _Unwind_Resume(a1);
}

__int16 sub_2081BA9E8@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  int v4;
  int v5;
  BOOL v6;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  _WORD *v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  _BOOL4 v46;
  _WORD *v47;
  __int16 *v48;
  uint64_t v49;
  unint64_t v50;
  _OWORD *v51;
  __int128 v52;
  __int16 v53;
  _BOOL4 v54;
  _WORD *v55;
  __int16 *v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  _BOOL4 v69;
  _WORD *v70;
  __int16 *v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int16 v76;
  _BOOL4 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _WORD *v81;
  __int16 *v82;
  __int128 *v83;
  _OWORD *v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int16 v88;
  int v89;
  _WORD *v90;
  _WORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _WORD *v98;
  _WORD *v99;
  _BOOL4 v100;
  _WORD *v101;
  __int16 *v102;
  uint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  __int128 v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  unint64_t v111;
  __int16 *v112;
  unint64_t v113;
  unint64_t v114;
  _WORD *v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  __int16 v120;
  _BOOL4 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _WORD *v125;
  __int16 *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  __int16 v131;
  uint64_t v133;
  _WORD *v134;
  _WORD *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _WORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;

  if (*(_DWORD *)(a1 + 20) != 1 || *(_DWORD *)(a2 + 20) != 1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 8))
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && v5 != 0)
    {
      v8 = v4 - 1;
      v9 = *(_WORD **)a1;
      v10 = *(_WORD **)a2;
      v11 = 2 * *(unsigned int *)(a1 + 24);
      v12 = 2 * *(unsigned int *)(a2 + 24);
      v13 = v5 - 1;
      if (v13)
      {
        v14 = *(unsigned int *)(a2 + 28);
        v15 = *(unsigned int *)(a1 + 28);
        if (v8)
        {
          v16 = 0;
          v17 = v10 + 2;
          v18 = v9 + 2;
          do
          {
            v19 = v18;
            v20 = v17;
            v21 = v8;
            do
            {
              *(v20 - 2) = *(v19 - 2);
              *(v20 - 1) = *(v19 - 1);
              *v20 = *v19;
              v20 = (_WORD *)((char *)v20 + v12);
              v19 = (_WORD *)((char *)v19 + v11);
              --v21;
            }
            while (v21);
            *(v20 - 2) = *(v19 - 2);
            *(v20 - 1) = *(v19 - 1);
            *v20 = *v19;
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v14;
            v18 += v15;
          }
          while (v16 != v13);
        }
        else
        {
          v108 = 2 * v15;
          v109 = 2 * v14;
          do
          {
            *v10 = *v9;
            v10[1] = v9[1];
            v10[2] = v9[2];
            v9 = (_WORD *)((char *)v9 + v108);
            v10 = (_WORD *)((char *)v10 + v109);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *v10 = *v9;
        v10[1] = v9[1];
        v10[2] = v9[2];
        v9 = (_WORD *)((char *)v9 + v11);
        v10 = (_WORD *)((char *)v10 + v12);
      }
      *v10 = *v9;
      v10[1] = v9[1];
      LOWORD(v86) = v9[2];
      v10[2] = v86;
    }
    return v86;
  }
  v22 = *(unsigned int *)(a1 + 24);
  v23 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v22 != (_DWORD)v23)
  {
    v24 = *(_DWORD *)(a1 + 8);
LABEL_30:
    if (!v24)
      return v86;
    v32 = *(_DWORD *)(a1 + 12);
    if (!v32)
      return v86;
    v33 = *(_DWORD *)(a1 + 16);
    if (!v33)
      return v86;
    v34 = v32 - 1;
    v35 = *(_WORD **)a1;
    v36 = *(_WORD **)a2;
    v37 = 2 * v23;
    v38 = v24;
    v136 = v33 - 1;
    v143 = v24;
    v141 = v32 - 1;
    v133 = *(unsigned int *)(a1 + 24);
    if (v33 == 1)
    {
LABEL_59:
      if (v34)
      {
        v62 = 0;
        v63 = 2 * v133;
        v64 = (v38 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v65 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
        v66 = v65;
        v67 = v36;
        v68 = v35;
        while (1)
        {
          if (!v68)
          {
            v69 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v34 = v141;
            v38 = v143;
            if (v69)
              goto LABEL_119;
          }
          v70 = v67;
          v71 = v68;
          if (v64 < 0xF)
            goto LABEL_132;
          v70 = v67;
          v71 = v68;
          if ((unint64_t)((char *)v36 + v37 * v62 - ((char *)v35 + v63 * v62)) < 0x20)
            goto LABEL_132;
          v72 = 0;
          v70 = &v67[v66];
          v71 = &v68[v66];
          v73 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v74 = &v67[v72];
            v75 = *(_OWORD *)&v68[v72 + 8];
            *v74 = *(_OWORD *)&v68[v72];
            v74[1] = v75;
            v72 += 16;
            v73 -= 16;
          }
          while (v73);
          if (v64 + 1 != v65)
          {
LABEL_132:
            do
            {
              v76 = *v71++;
              *v70++ = v76;
            }
            while (v71 != &v68[v38]);
          }
          v68 = (_WORD *)((char *)v68 + v63);
          v67 = (_WORD *)((char *)v67 + v37);
          if ((_DWORD)++v62 == v34)
            goto LABEL_72;
        }
      }
      v67 = v36;
      v68 = v35;
LABEL_72:
      if (!v68)
      {
        v77 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v38 = v143;
        if (v77)
LABEL_119:
          abort();
      }
      v78 = (v38 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v78 < 0xF || (unint64_t)((char *)v67 - (char *)v68) < 0x20)
      {
        v81 = v67;
        v82 = v68;
      }
      else
      {
        v79 = v78 + 1;
        v80 = (v78 + 1) & 0xFFFFFFFFFFFFFFF0;
        v81 = &v67[v80];
        v82 = &v68[v80];
        v83 = (__int128 *)(v68 + 8);
        v84 = v67 + 8;
        v85 = v80;
        do
        {
          v86 = *(v83 - 1);
          v87 = *v83;
          *(v84 - 1) = v86;
          *v84 = v87;
          v83 += 2;
          v84 += 2;
          v85 -= 16;
        }
        while (v85);
        if (v79 == v80)
          return v86;
      }
      do
      {
        v88 = *v82++;
        LOWORD(v86) = v88;
        *v81++ = v88;
      }
      while (v82 != &v68[v38]);
      return v86;
    }
    v140 = 0;
    v39 = (v24 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v137 = 2 * *(unsigned int *)(a1 + 28);
    v138 = 2 * *(unsigned int *)(a2 + 28);
    v40 = 2 * v22;
    v145 = v39 + 1;
    v41 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
    v42 = v41;
    v134 = *(_WORD **)a2;
    v135 = *(_WORD **)a1;
    while (1)
    {
      v139 = v36;
      v43 = v36;
      v44 = v35;
      if (v34)
      {
        v45 = 0;
        v43 = v139;
        v44 = v35;
        do
        {
          if (!v44)
          {
            v46 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v34 = v141;
            v38 = v143;
            if (v46)
              goto LABEL_119;
          }
          v47 = v43;
          v48 = v44;
          if (v39 < 0xF)
            goto LABEL_133;
          v47 = v43;
          v48 = v44;
          if ((unint64_t)((char *)v134 + v138 * v140 + v37 * v45 - ((char *)v135 + v137 * v140 + v40 * v45)) < 0x20)
            goto LABEL_133;
          v49 = 0;
          v47 = &v43[v42];
          v48 = &v44[v42];
          v50 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v51 = &v43[v49];
            v52 = *(_OWORD *)&v44[v49 + 8];
            *v51 = *(_OWORD *)&v44[v49];
            v51[1] = v52;
            v49 += 16;
            v50 -= 16;
          }
          while (v50);
          if (v145 != v41)
          {
LABEL_133:
            do
            {
              v53 = *v48++;
              *v47++ = v53;
            }
            while (v48 != &v44[v38]);
          }
          v44 = (_WORD *)((char *)v44 + v40);
          v43 = (_WORD *)((char *)v43 + v37);
        }
        while ((_DWORD)++v45 != v34);
      }
      if (!v44)
      {
        v54 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v34 = v141;
        v38 = v143;
        if (v54)
          goto LABEL_119;
      }
      if (v39 < 0xF || (unint64_t)((char *)v43 - (char *)v44) < 0x20)
      {
        v55 = v43;
        v56 = v44;
      }
      else
      {
        v55 = &v43[v42];
        v56 = &v44[v42];
        v57 = (__int128 *)(v44 + 8);
        v58 = v43 + 8;
        v59 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 16;
        }
        while (v59);
        if (v145 == v41)
          goto LABEL_35;
      }
      do
      {
        v61 = *v56++;
        *v55++ = v61;
      }
      while (v56 != &v44[v38]);
LABEL_35:
      v35 = (_WORD *)((char *)v35 + v137);
      v36 = &v139[(unint64_t)v138 / 2];
      if ((_DWORD)++v140 == v136)
        goto LABEL_59;
    }
  }
  v24 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v22 != v24)
    goto LABEL_30;
  v25 = *(unsigned int *)(a1 + 28);
  v26 = *(unsigned int *)(a2 + 28);
  v27 = *(_DWORD *)(a1 + 12);
  v28 = (v27 * v22);
  if ((_DWORD)v25 == (_DWORD)v26 && (_DWORD)v25 == (_DWORD)v28)
  {
    v29 = (v25 * *(_DWORD *)(a1 + 16));
    v30 = *(_WORD **)a1;
    if ((_DWORD)v29)
      v31 = v30 == 0;
    else
      v31 = 0;
    if (v31)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_119;
      }
    }
    else if (!(_DWORD)v29)
    {
      return v86;
    }
    v110 = *(_WORD **)a2;
    v111 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v111 < 0xF)
    {
      v112 = v30;
    }
    else
    {
      v112 = v30;
      if ((unint64_t)((char *)v110 - (char *)v30) >= 0x20)
      {
        v113 = v111 + 1;
        v114 = v113 & 0xFFFFFFFFFFFFFFF0;
        v115 = &v110[v114];
        v112 = &v30[v114];
        v116 = (__int128 *)(v30 + 8);
        v117 = v110 + 8;
        v118 = v113 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v86 = *(v116 - 1);
          v119 = *v116;
          *(v117 - 1) = v86;
          *v117 = v119;
          v116 += 2;
          v117 += 2;
          v118 -= 16;
        }
        while (v118);
        v110 = v115;
        if (v113 == (v113 & 0xFFFFFFFFFFFFFFF0))
          return v86;
      }
    }
    do
    {
      v120 = *v112++;
      LOWORD(v86) = v120;
      *v110++ = v120;
    }
    while (v112 != &v30[v29]);
    return v86;
  }
  if ((_DWORD)v22)
  {
    if (v27)
    {
      v89 = *(_DWORD *)(a1 + 16);
      if (v89)
      {
        v90 = *(_WORD **)a1;
        v91 = *(_WORD **)a2;
        v92 = v89 - 1;
        v142 = v28;
        if (v89 == 1)
        {
          v98 = *(_WORD **)a2;
          v99 = *(_WORD **)a1;
LABEL_116:
          if (!(_DWORD)v28 || v99)
          {
            if (!(_DWORD)v28)
              return v86;
          }
          else
          {
            v121 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v28 = v142;
            if (v121)
              goto LABEL_119;
          }
          v122 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v122 < 0xF || (unint64_t)((char *)v98 - (char *)v99) < 0x20)
          {
            v125 = v98;
            v126 = v99;
          }
          else
          {
            v123 = v122 + 1;
            v124 = (v122 + 1) & 0xFFFFFFFFFFFFFFF0;
            v125 = &v98[v124];
            v126 = &v99[v124];
            v127 = (__int128 *)(v99 + 8);
            v128 = v98 + 8;
            v129 = v124;
            do
            {
              v86 = *(v127 - 1);
              v130 = *v127;
              *(v128 - 1) = v86;
              *v128 = v130;
              v127 += 2;
              v128 += 2;
              v129 -= 16;
            }
            while (v129);
            if (v123 == v124)
              return v86;
          }
          do
          {
            v131 = *v126++;
            LOWORD(v86) = v131;
            *v125++ = v131;
          }
          while (v126 != &v99[v28]);
          return v86;
        }
        if ((_DWORD)v28)
        {
          v93 = 0;
          v94 = 2 * v26;
          v95 = 2 * v25;
          v96 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v97 = (v96 + 1) & 0xFFFFFFFFFFFFFFF0;
          v144 = v97;
          v98 = *(_WORD **)a2;
          v99 = *(_WORD **)a1;
          while (1)
          {
            if (!v99)
            {
              v100 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v28 = v142;
              if (v100)
                goto LABEL_119;
            }
            v101 = v98;
            v102 = v99;
            if (v96 < 0xF)
              goto LABEL_134;
            v101 = v98;
            v102 = v99;
            if ((unint64_t)((char *)v91 + v94 * v93 - ((char *)v90 + v95 * v93)) < 0x20)
              goto LABEL_134;
            v103 = 0;
            v101 = &v98[v144];
            v102 = &v99[v144];
            v104 = (v96 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v105 = &v98[v103];
              v86 = *(_OWORD *)&v99[v103];
              v106 = *(_OWORD *)&v99[v103 + 8];
              *v105 = v86;
              v105[1] = v106;
              v103 += 16;
              v104 -= 16;
            }
            while (v104);
            if (v96 + 1 != v97)
            {
LABEL_134:
              do
              {
                v107 = *v102++;
                LOWORD(v86) = v107;
                *v101++ = v107;
              }
              while (v102 != &v99[v28]);
            }
            v99 = (_WORD *)((char *)v99 + v95);
            v98 = (_WORD *)((char *)v98 + v94);
            if ((_DWORD)++v93 == v92)
              goto LABEL_116;
          }
        }
      }
    }
  }
  return v86;
}

uint64_t sub_2081BB2B8(uint64_t a1, unsigned int *a2)
{
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_DWORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_DWORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 4 * v31);
          return a1;
        }
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v3 = *(_DWORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 4 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 4 * v27;
        v51 = 4 * v28;
        while (v48
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v48, 4 * v30);
          v48 += v50;
          v3 = (_DWORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 4 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 4 * v25;
          while (v36
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            v36 += 4 * v61;
            v3 = (_DWORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 4 * a2[5];
        v53 = 4 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_DWORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(4 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 4 * v61;
              v39 += 4 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v40 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (byte_254530A10)
              v41 = byte_254530A18 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_2545309E8;
              v43 = qword_2545309F0;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_92;
            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v39, 0, __len);
            v39 += 4 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[4 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_207D5C5E8((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

_DWORD *sub_2081BBA2C(_DWORD *result, char **__len)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v22;
  char *v23;
  char *v24;
  size_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  unsigned __int8 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  const void *v41;
  size_t v42;
  uint64_t v43;
  const void *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  int v53;
  char *__src;

  v3 = result[6];
  v4 = *((unsigned int *)__len + 6);
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v5 = result[2];
LABEL_18:
    v19 = result[3];
    v18 = result[4];
    if (v5)
      v20 = v19 == 0;
    else
      v20 = 1;
    if (v20 || v18 == 0)
      return result;
    v22 = v19 - 1;
    v23 = *(char **)result;
    v24 = *__len;
    v25 = 4 * v5;
    v53 = v18 - 1;
    if (v18 == 1)
    {
      v27 = result[6];
LABEL_51:
      if (v22)
      {
        v37 = 4 * v27;
        v38 = 4 * v4;
        v39 = v23;
        while (v39
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v24, v39, v25);
          v39 += v37;
          v24 += v38;
          if (!--v22)
            goto LABEL_58;
        }
      }
      else
      {
        v39 = v23;
LABEL_58:
        if (v39
          || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v40 = v24;
          v41 = v39;
          v42 = v25;
          return memmove(v40, v41, v42);
        }
      }
    }
    else if (v19 == 1)
    {
      v27 = result[6];
      v46 = 4 * result[7];
      v47 = 4 * *((unsigned int *)__len + 7);
      while (v23
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v24, v23, v25);
        v23 += v46;
        v24 += v47;
        if (!--v53)
          goto LABEL_51;
      }
    }
    else
    {
      v26 = 0;
      v27 = result[6];
      __src = (char *)(4 * v3);
      v48 = result[7];
      v49 = *((unsigned int *)__len + 7);
      while (1)
      {
        v50 = v26;
        v28 = 0;
        v51 = v23;
        v52 = v24;
        v29 = v24;
        do
        {
          while (v23)
          {
            memmove(v29, v23, v25);
            v23 += 4 * v27;
            v29 += 4 * v4;
            if (++v28 == v22)
              goto LABEL_31;
          }
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v30 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (byte_254530A10)
            v31 = byte_254530A18 == 0;
          else
            v31 = 0;
          if (!v31)
          {
            v32 = qword_2545309E8;
            v33 = qword_2545309F0;
            while (v32 != v33)
            {
              v35 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v32;
              v34 = *(_QWORD *)(v32 + 8);
              v32 += 16;
              v35(v34, "ptr != nullptr || size == 0", 27, "", 0);
            }
          }
          v36 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10)
            goto LABEL_77;
          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
          memcpy(v29, 0, v25);
          v29 += 4 * v4;
          ++v28;
          v23 = __src;
        }
        while (v28 != v22);
        v23 = __src;
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          break;
        }
LABEL_31:
        memmove(v29, v23, v25);
        v23 = &v51[4 * v48];
        v24 = &v52[4 * v49];
        v26 = v50 + 1;
        if (v50 + 1 == v53)
          goto LABEL_51;
      }
    }
LABEL_77:
    abort();
  }
  v5 = result[2];
  if ((_DWORD)v3 != result[5] * v5)
    goto LABEL_18;
  v6 = result[7];
  v7 = *((unsigned int *)__len + 7);
  v8 = result[3];
  v9 = v8 * v3;
  if ((_DWORD)v6 == (_DWORD)v7 && (_DWORD)v6 == v9)
  {
    v43 = v8 * v5 * result[4];
    v44 = *(const void **)result;
    if ((_DWORD)v43)
      v45 = v44 == 0;
    else
      v45 = 0;
    if (v45)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
    }
    else if (!(_DWORD)v43)
    {
      return result;
    }
    v40 = *__len;
    v42 = 4 * v43;
    v41 = v44;
    return memmove(v40, v41, v42);
  }
  if (!v5)
    return result;
  if (!v8)
    return result;
  v11 = result[4];
  if (!v11)
    return result;
  v12 = *__len;
  v13 = v8 * v5;
  v14 = *(char **)result;
  v15 = v11 - 1;
  if (v11 == 1)
  {
LABEL_74:
    if (!(_DWORD)v13 || v14)
    {
      if (!(_DWORD)v13)
        return result;
    }
    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_77;
    }
    v40 = v12;
    v41 = v14;
    v42 = 4 * v13;
    return memmove(v40, v41, v42);
  }
  if ((_DWORD)v13)
  {
    v16 = 4 * v6;
    v17 = 4 * v7;
    while (v14
         || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      result = memmove(v12, v14, 4 * v13);
      v14 += v16;
      v12 += v17;
      if (!--v15)
        goto LABEL_74;
    }
    goto LABEL_77;
  }
  return result;
}

uint64_t sub_2081BBFEC(uint64_t a1, unsigned int *a2)
{
  _BYTE *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  size_t v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[3];
  __int128 v61;
  uint64_t v62;

  v3 = *(_BYTE **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v56 = *(_OWORD *)a2;
    v57 = *((_OWORD *)a2 + 1);
    v58 = *((_OWORD *)a2 + 2);
    v59 = *((_QWORD *)a2 + 6);
    sub_2081A19EC((uint64_t)v60, (uint64_t)(a2 + 14));
    *(_OWORD *)a1 = v56;
    *(_OWORD *)(a1 + 16) = v57;
    *(_OWORD *)(a1 + 32) = v58;
    *(_OWORD *)(a1 + 80) = v61;
    *(_QWORD *)(a1 + 96) = v62;
    v4 = v60[0];
    *(_QWORD *)(a1 + 48) = v59;
    *(_QWORD *)(a1 + 56) = v4;
    v5 = *(void **)(a1 + 64);
    if (v5)
      free(v5);
    v6 = v60[2];
    *(_QWORD *)(a1 + 64) = v60[1];
    *(_QWORD *)(a1 + 72) = v6;
    return a1;
  }
  if (a2[3] == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    v24 = (char *)a2[4];
    v25 = *a2;
    v54 = v24;
    v55 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24 != (_DWORD)v55 || (_DWORD)v24 != (_DWORD)v25)
    {
      if (!(_DWORD)v25)
        return a1;
      v31 = a2[1];
      if (!v31)
        return a1;
      v32 = a2[2];
      if (!v32)
        return a1;
      v33 = v31 - 1;
      v34 = (char *)*((_QWORD *)a2 + 8);
      v53 = v32 - 1;
      if (v32 == 1)
      {
LABEL_81:
        if (v33)
        {
          while (v34
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v34, v25);
            v34 = &v24[(_QWORD)v34];
            v3 += v55;
            if (!--v33)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v34
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v34, v25);
            return a1;
          }
        }
      }
      else
      {
        v50 = *(unsigned int *)(a1 + 20);
        v49 = a2[5];
        if (v31 == 1)
        {
          while (v34
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v34, v25);
            v34 += v49;
            v3 += v50;
            if (!--v53)
              goto LABEL_81;
          }
        }
        else
        {
          v35 = 0;
          while (1)
          {
            v51 = v35;
            v36 = v34;
            v37 = 0;
            v52 = v36;
            v38 = v3;
            do
            {
              while (v36)
              {
                memmove(v38, v36, v25);
                v36 = &v24[(_QWORD)v36];
                v38 += v55;
                if (++v37 == v33)
                  goto LABEL_41;
              }
              v39 = v25;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v40 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (byte_254530A10)
                v41 = byte_254530A18 == 0;
              else
                v41 = 0;
              if (!v41)
              {
                v42 = qword_2545309E8;
                v43 = qword_2545309F0;
                while (v42 != v43)
                {
                  v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v42;
                  v44 = *(_QWORD *)(v42 + 8);
                  v42 += 16;
                  v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v46 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_90;
              v25 = v39;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              memcpy(v38, 0, v39);
              v24 = v54;
              v38 += v55;
              ++v37;
              v36 = v54;
            }
            while (v37 != v33);
            v36 = v54;
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
LABEL_41:
            memmove(v38, v36, v25);
            v34 = &v52[v49];
            v3 += v50;
            v35 = v51 + 1;
            if (v51 + 1 == v53)
              goto LABEL_81;
          }
        }
      }
      goto LABEL_90;
    }
    v26 = a2[5];
    v27 = *(unsigned int *)(a1 + 20);
    v28 = a2[1];
    v29 = v28 * a2[4];
    if ((_DWORD)v26 == (_DWORD)v27 && (_DWORD)v26 == (_DWORD)v29)
    {
      v29 = v26 * a2[2];
      v30 = (char *)*((_QWORD *)a2 + 8);
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v3 = *(_BYTE **)(a1 + 64);
          goto LABEL_75;
        }
LABEL_90:
        abort();
      }
    }
    else
    {
      if (!(_DWORD)v54)
        return a1;
      if (!v28)
        return a1;
      v47 = a2[2];
      if (!v47)
        return a1;
      v30 = (char *)*((_QWORD *)a2 + 8);
      v48 = v47 - 1;
      if (v47 != 1)
      {
        if (!(_DWORD)v29)
          return a1;
        while (v30
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v30, v29);
          v30 += v26;
          v3 += v27;
          if (!--v48)
            goto LABEL_70;
        }
        goto LABEL_90;
      }
LABEL_70:
      if ((_DWORD)v29 && !v30)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))goto LABEL_75;
        goto LABEL_90;
      }
    }
    if (!(_DWORD)v29)
      return a1;
LABEL_75:
    memmove(v3, v30, v29);
    return a1;
  }
  if (*a2)
  {
    v9 = a2[1];
    if (v9)
    {
      v10 = a2[2];
      if (v10)
      {
        v11 = v9 - 1;
        v12 = a2[4];
        v13 = *(unsigned int *)(a1 + 16);
        v14 = (_BYTE *)*((_QWORD *)a2 + 8);
        v15 = v10 - 1;
        if (v15)
        {
          v16 = *(unsigned int *)(a1 + 20);
          v17 = a2[5];
          if (v11)
          {
            v18 = 0;
            v19 = v3 + 3;
            v20 = v14 + 1;
            do
            {
              v21 = v20;
              v22 = v19;
              v23 = v11;
              do
              {
                *(v22 - 3) = *(v21 - 1);
                *(v22 - 2) = *v21;
                *(v22 - 1) = v21[1];
                *v22 = v21[2];
                v22 += v13;
                v21 += v12;
                --v23;
              }
              while (v23);
              *(v22 - 3) = *(v21 - 1);
              *(v22 - 2) = *v21;
              *(v22 - 1) = v21[1];
              *v22 = v21[2];
              v14 += v17;
              v3 += v16;
              ++v18;
              v19 += v16;
              v20 += v17;
            }
            while (v18 != v15);
          }
          else
          {
            do
            {
              *v3 = *v14;
              v3[1] = v14[1];
              v3[2] = v14[2];
              v3[3] = v14[3];
              v14 += v17;
              v3 += v16;
              --v15;
            }
            while (v15);
          }
        }
        for (; v11; --v11)
        {
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
          v14 += v12;
          v3 += v13;
        }
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v3[3] = v14[3];
      }
    }
  }
  return a1;
}

uint64_t sub_2081BC758(uint64_t a1, unsigned int *a2)
{
  _WORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _WORD *v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_WORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_WORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v3[3] = v14[3];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22[1] = v21[1];
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v22[1] = v21[1];
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v3[3] = v14[3];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 2 * v31);
          return a1;
        }
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v3 = *(_WORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 2 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 2 * v27;
        v51 = 2 * v28;
        while (v48
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v48, 2 * v30);
          v48 += v50;
          v3 = (_WORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 2 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 2 * v25;
          while (v36
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            v36 += 2 * v61;
            v3 = (_WORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 2 * a2[5];
        v53 = 2 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_WORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(2 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 2 * v61;
              v39 += 2 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v40 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (byte_254530A10)
              v41 = byte_254530A18 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_2545309E8;
              v43 = qword_2545309F0;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_92;
            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v39, 0, __len);
            v39 += 2 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[2 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_2081A22DC((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

uint64_t sub_2081BCEF4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  _WORD *v3;
  void *v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  _WORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _WORD *v49;
  __int16 *v50;
  uint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int16 v55;
  _BOOL4 v56;
  _WORD *v57;
  __int16 *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  _WORD *v76;
  __int16 *v77;
  uint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 v81;
  __int16 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _WORD *v86;
  __int16 *v87;
  __int128 *v88;
  _OWORD *v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  _WORD *v103;
  __int16 *v104;
  uint64_t v105;
  unint64_t v106;
  _OWORD *v107;
  __int128 v108;
  __int16 v109;
  _BOOL4 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _WORD *v114;
  __int16 *v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  __int16 v120;
  _BOOL4 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _WORD *v125;
  __int16 *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _QWORD v151[3];
  __int128 v152;
  uint64_t v153;

  v2 = a1;
  v3 = *(_WORD **)(a1 + 64);
  if (!v3 || *(_QWORD *)(a2 + 1) != *(_QWORD *)(a1 + 4) || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v147 = *(_OWORD *)a2;
    v148 = *((_OWORD *)a2 + 1);
    v149 = *((_OWORD *)a2 + 2);
    v150 = *((_QWORD *)a2 + 6);
    sub_2081A2CE4((uint64_t)v151, (uint64_t)(a2 + 14));
    *(_OWORD *)v2 = v147;
    *(_OWORD *)(v2 + 16) = v148;
    *(_OWORD *)(v2 + 32) = v149;
    *(_QWORD *)(v2 + 48) = v150;
    *(_OWORD *)(v2 + 80) = v152;
    *(_QWORD *)(v2 + 96) = v153;
    v4 = *(void **)(v2 + 64);
    if (v4)
    {
      if (*(_DWORD *)(v2 + 88))
        v5 = *(_DWORD *)(v2 + 84) == 0;
      else
        v5 = 1;
      if (v5 || *(_DWORD *)(v2 + 80) == 0)
        v7 = 0;
      else
        v7 = *(_DWORD *)(v2 + 88);
      if (v7 * (*(_DWORD *)(v2 + 100) >> 1) == -1)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v4 = *(void **)(v2 + 64);
        *(_QWORD *)(v2 + 56) = v151[0];
        if (!v4)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(v2 + 56) = v151[0];
      }
      free(v4);
    }
    else
    {
      *(_QWORD *)(v2 + 56) = v151[0];
    }
LABEL_20:
    v8 = v151[2];
    *(_QWORD *)(v2 + 64) = v151[1];
    *(_QWORD *)(v2 + 72) = v8;
    return v2;
  }
  if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
  {
    if (*a2)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = a2[2];
        if (v12)
        {
          v13 = v11 - 1;
          v14 = (_WORD *)*((_QWORD *)a2 + 8);
          v15 = 2 * a2[4];
          v16 = 2 * *(unsigned int *)(a1 + 16);
          v17 = v12 - 1;
          if (v17)
          {
            v18 = *(unsigned int *)(a1 + 20);
            v19 = a2[5];
            if (v13)
            {
              v20 = 0;
              v21 = v3 + 2;
              v22 = v14 + 2;
              do
              {
                v23 = v22;
                v24 = v21;
                v25 = v13;
                do
                {
                  *(v24 - 2) = *(v23 - 2);
                  *(v24 - 1) = *(v23 - 1);
                  *v24 = *v23;
                  v24[1] = v23[1];
                  v24 = (_WORD *)((char *)v24 + v16);
                  v23 = (_WORD *)((char *)v23 + v15);
                  --v25;
                }
                while (v25);
                *(v24 - 2) = *(v23 - 2);
                *(v24 - 1) = *(v23 - 1);
                *v24 = *v23;
                v24[1] = v23[1];
                v14 += v19;
                v3 += v18;
                ++v20;
                v21 += v18;
                v22 += v19;
              }
              while (v20 != v17);
            }
            else
            {
              v92 = 2 * v19;
              v93 = 2 * v18;
              do
              {
                *v3 = *v14;
                v3[1] = v14[1];
                v3[2] = v14[2];
                v3[3] = v14[3];
                v14 = (_WORD *)((char *)v14 + v92);
                v3 = (_WORD *)((char *)v3 + v93);
                --v17;
              }
              while (v17);
            }
          }
          for (; v13; --v13)
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v3[3] = v14[3];
            v14 = (_WORD *)((char *)v14 + v15);
            v3 = (_WORD *)((char *)v3 + v16);
          }
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
        }
      }
    }
    return v2;
  }
  v26 = a2[4];
  v27 = *(unsigned int *)(a1 + 16);
  v28 = *a2;
  if ((_DWORD)v26 != (_DWORD)v27 || (_DWORD)v26 != (_DWORD)v28)
  {
    if (!(_DWORD)v28)
      return v2;
    v35 = a2[1];
    if (!v35)
      return v2;
    v36 = a2[2];
    if (!v36)
      return v2;
    v37 = v35 - 1;
    v38 = *((_QWORD *)a2 + 8);
    v39 = 2 * v27;
    v138 = v36 - 1;
    v144 = *a2;
    v143 = v35 - 1;
    v132 = a2[4];
    if (v36 == 1)
    {
      v44 = *(_QWORD *)(a1 + 64);
LABEL_105:
      if (v37)
      {
        v95 = 0;
        v96 = 2 * v132;
        v97 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v98 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
        v99 = 2 * v98;
        v100 = v44;
        v101 = v38;
        while (1)
        {
          if (!v101)
          {
            v102 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v37 = v143;
            v28 = v144;
            if (v102)
              goto LABEL_133;
          }
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if (v97 < 0xF)
            goto LABEL_147;
          v103 = (_WORD *)v100;
          v104 = (__int16 *)v101;
          if ((unint64_t)(v44 + v39 * v95 - (v38 + v96 * v95)) < 0x20)
            goto LABEL_147;
          v105 = 0;
          v103 = (_WORD *)(v100 + v99);
          v104 = (__int16 *)(v101 + v99);
          v106 = (v97 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v107 = (_OWORD *)(v100 + v105);
            v108 = *(_OWORD *)(v101 + v105 + 16);
            *v107 = *(_OWORD *)(v101 + v105);
            v107[1] = v108;
            v105 += 32;
            v106 -= 16;
          }
          while (v106);
          if (v97 + 1 != v98)
          {
LABEL_147:
            do
            {
              v109 = *v104++;
              *v103++ = v109;
            }
            while (v104 != (__int16 *)(v101 + 2 * v28));
          }
          v101 += v96;
          v100 += v39;
          if ((_DWORD)++v95 == v37)
            goto LABEL_118;
        }
      }
      v100 = v44;
      v101 = v38;
LABEL_118:
      if (!v101)
      {
        v110 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v28 = v144;
        if (v110)
LABEL_133:
          abort();
      }
      v111 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v2 = a1;
      if (v111 < 0xF || (unint64_t)(v100 - v101) < 0x20)
      {
        v114 = (_WORD *)v100;
        v115 = (__int16 *)v101;
      }
      else
      {
        v112 = v111 + 1;
        v113 = (v111 + 1) & 0xFFFFFFFFFFFFFFF0;
        v114 = (_WORD *)(v100 + 2 * v113);
        v115 = (__int16 *)(v101 + 2 * v113);
        v116 = (__int128 *)(v101 + 16);
        v117 = (_OWORD *)(v100 + 16);
        v118 = v113;
        do
        {
          v119 = *v116;
          *(v117 - 1) = *(v116 - 1);
          *v117 = v119;
          v116 += 2;
          v117 += 2;
          v118 -= 16;
        }
        while (v118);
        if (v112 == v113)
          return v2;
      }
      do
      {
        v120 = *v115++;
        *v114++ = v120;
      }
      while (v115 != (__int16 *)(v101 + 2 * v28));
      return v2;
    }
    v142 = 0;
    v40 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v139 = 2 * a2[5];
    v140 = 2 * *(unsigned int *)(a1 + 20);
    v41 = 2 * v26;
    v146 = v40 + 1;
    v42 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
    v43 = 2 * v42;
    v135 = *((_QWORD *)a2 + 8);
    v136 = *(_QWORD *)(a1 + 64);
    v44 = v136;
    while (1)
    {
      v141 = v38;
      v45 = v44;
      v46 = v38;
      if (v37)
      {
        v47 = 0;
        v45 = v44;
        v46 = v141;
        do
        {
          if (!v46)
          {
            v48 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v37 = v143;
            v28 = v144;
            if (v48)
              goto LABEL_133;
          }
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if (v40 < 0xF)
            goto LABEL_148;
          v49 = (_WORD *)v45;
          v50 = (__int16 *)v46;
          if ((unint64_t)(v136 + v140 * v142 + v39 * v47 - (v135 + v139 * v142 + v41 * v47)) < 0x20)
            goto LABEL_148;
          v51 = 0;
          v49 = (_WORD *)(v45 + v43);
          v50 = (__int16 *)(v46 + v43);
          v52 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v53 = (_OWORD *)(v45 + v51);
            v54 = *(_OWORD *)(v46 + v51 + 16);
            *v53 = *(_OWORD *)(v46 + v51);
            v53[1] = v54;
            v51 += 32;
            v52 -= 16;
          }
          while (v52);
          if (v146 != v42)
          {
LABEL_148:
            do
            {
              v55 = *v50++;
              *v49++ = v55;
            }
            while (v50 != (__int16 *)(v46 + 2 * v28));
          }
          v46 += v41;
          v45 += v39;
        }
        while ((_DWORD)++v47 != v37);
      }
      if (!v46)
      {
        v56 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v37 = v143;
        v28 = v144;
        if (v56)
          goto LABEL_133;
      }
      if (v40 < 0xF || (unint64_t)(v45 - v46) < 0x20)
      {
        v57 = (_WORD *)v45;
        v58 = (__int16 *)v46;
      }
      else
      {
        v57 = (_WORD *)(v45 + v43);
        v58 = (__int16 *)(v46 + v43);
        v59 = (__int128 *)(v46 + 16);
        v60 = (_OWORD *)(v45 + 16);
        v61 = (v40 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v62 = *v59;
          *(v60 - 1) = *(v59 - 1);
          *v60 = v62;
          v59 += 2;
          v60 += 2;
          v61 -= 16;
        }
        while (v61);
        if (v146 == v42)
          goto LABEL_49;
      }
      do
      {
        v63 = *v58++;
        *v57++ = v63;
      }
      while (v58 != (__int16 *)(v46 + 2 * v28));
LABEL_49:
      v38 = v141 + v139;
      v44 += v140;
      if ((_DWORD)++v142 == v138)
        goto LABEL_105;
    }
  }
  v29 = a2[5];
  v30 = *(unsigned int *)(a1 + 20);
  v31 = a2[1];
  v32 = v31 * v26;
  if ((_DWORD)v29 == (_DWORD)v30 && (_DWORD)v29 == (_DWORD)v32)
  {
    v33 = a2[2] * v29;
    v34 = *((_QWORD *)a2 + 8);
    if (!(_DWORD)v33 || v34)
    {
      if (!(_DWORD)v33)
        return v2;
    }
    else
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_133;
      }
      v3 = *(_WORD **)(v2 + 64);
    }
    v83 = (v33 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v83 < 0xF || (unint64_t)v3 - v34 < 0x20)
    {
      v86 = v3;
      v87 = (__int16 *)v34;
    }
    else
    {
      v84 = v83 + 1;
      v85 = (v83 + 1) & 0xFFFFFFFFFFFFFFF0;
      v86 = &v3[v85];
      v87 = (__int16 *)(v34 + 2 * v85);
      v88 = (__int128 *)(v34 + 16);
      v89 = v3 + 8;
      v90 = v85;
      do
      {
        v91 = *v88;
        *(v89 - 1) = *(v88 - 1);
        *v89 = v91;
        v88 += 2;
        v89 += 2;
        v90 -= 16;
      }
      while (v90);
      if (v84 == v85)
        return v2;
    }
    do
    {
      v94 = *v87++;
      *v86++ = v94;
    }
    while (v87 != (__int16 *)(v34 + 2 * v33));
    return v2;
  }
  if ((_DWORD)v26)
  {
    if (v31)
    {
      v64 = a2[2];
      if (v64)
      {
        v65 = *((_QWORD *)a2 + 8);
        v66 = v64 - 1;
        v145 = v32;
        if (v64 == 1)
        {
          v134 = a1;
          v70 = *(_QWORD *)(a1 + 64);
          v74 = *((_QWORD *)a2 + 8);
LABEL_130:
          if (!(_DWORD)v32 || v74)
          {
            v2 = v134;
            if (!(_DWORD)v32)
              return v2;
          }
          else
          {
            v121 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v32 = v145;
            v2 = v134;
            if (v121)
              goto LABEL_133;
          }
          v122 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v122 < 0xF || (unint64_t)(v70 - v74) < 0x20)
          {
            v125 = (_WORD *)v70;
            v126 = (__int16 *)v74;
          }
          else
          {
            v123 = v122 + 1;
            v124 = (v122 + 1) & 0xFFFFFFFFFFFFFFF0;
            v125 = (_WORD *)(v70 + 2 * v124);
            v126 = (__int16 *)(v74 + 2 * v124);
            v127 = (__int128 *)(v74 + 16);
            v128 = (_OWORD *)(v70 + 16);
            v129 = v124;
            do
            {
              v130 = *v127;
              *(v128 - 1) = *(v127 - 1);
              *v128 = v130;
              v127 += 2;
              v128 += 2;
              v129 -= 16;
            }
            while (v129);
            if (v123 == v124)
              return v2;
          }
          do
          {
            v131 = *v126++;
            *v125++ = v131;
          }
          while (v126 != (__int16 *)(v74 + 2 * v32));
          return v2;
        }
        if ((_DWORD)v32)
        {
          v134 = a1;
          v67 = 0;
          v68 = 2 * v30;
          v69 = 2 * v29;
          v70 = *(_QWORD *)(a1 + 64);
          v71 = (v32 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v72 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
          v73 = 2 * v72;
          v137 = v70;
          v74 = *((_QWORD *)a2 + 8);
          while (1)
          {
            if (!v74)
            {
              v75 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v32 = v145;
              if (v75)
                goto LABEL_133;
            }
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if (v71 < 0xF)
              goto LABEL_149;
            v76 = (_WORD *)v70;
            v77 = (__int16 *)v74;
            if ((unint64_t)(v137 + v68 * v67 - (v65 + v69 * v67)) < 0x20)
              goto LABEL_149;
            v78 = 0;
            v76 = (_WORD *)(v70 + v73);
            v77 = (__int16 *)(v74 + v73);
            v79 = (v71 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v80 = (_OWORD *)(v70 + v78);
              v81 = *(_OWORD *)(v74 + v78 + 16);
              *v80 = *(_OWORD *)(v74 + v78);
              v80[1] = v81;
              v78 += 32;
              v79 -= 16;
            }
            while (v79);
            if (v71 + 1 != v72)
            {
LABEL_149:
              do
              {
                v82 = *v77++;
                *v76++ = v82;
              }
              while (v77 != (__int16 *)(v74 + 2 * v32));
            }
            v74 += v69;
            v70 += v68;
            if ((_DWORD)++v67 == v66)
              goto LABEL_130;
          }
        }
      }
    }
  }
  return v2;
}

void sub_2081BD910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_208193CB0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081BD924(uint64_t a1, unsigned int *a2)
{
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  int v38;
  char *v39;
  unsigned __int8 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  char *__src;
  uint64_t v61;
  uint64_t __len;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;

  v3 = *(_DWORD **)(a1 + 64);
  if (v3 && *(_QWORD *)(a2 + 1) == *(_QWORD *)(a1 + 4) && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    if (a2[3] != 1 || *(_DWORD *)(a1 + 12) != 1)
    {
      if (!*a2)
        return a1;
      v9 = a2[1];
      if (!v9)
        return a1;
      v10 = a2[2];
      if (!v10)
        return a1;
      v11 = v9 - 1;
      v12 = a2[4];
      v13 = *(unsigned int *)(a1 + 16);
      v14 = (_DWORD *)*((_QWORD *)a2 + 8);
      v15 = v10 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a1 + 20);
        v17 = a2[5];
        if (!v11)
        {
          do
          {
            *v3 = *v14;
            v3[1] = v14[1];
            v3[2] = v14[2];
            v3[3] = v14[3];
            v14 += v17;
            v3 += v16;
            --v15;
          }
          while (v15);
LABEL_71:
          *v3 = *v14;
          v3[1] = v14[1];
          v3[2] = v14[2];
          v3[3] = v14[3];
          return a1;
        }
        v18 = 0;
        v19 = v3 + 2;
        v20 = v14 + 2;
        do
        {
          v21 = v20;
          v22 = v19;
          v23 = v11;
          do
          {
            *(v22 - 2) = *(v21 - 2);
            *(v22 - 1) = *(v21 - 1);
            *v22 = *v21;
            v22[1] = v21[1];
            v22 += v13;
            v21 += v12;
            --v23;
          }
          while (v23);
          *(v22 - 2) = *(v21 - 2);
          *(v22 - 1) = *(v21 - 1);
          *v22 = *v21;
          v22[1] = v21[1];
          v14 += v17;
          v3 += v16;
          ++v18;
          v19 += v16;
          v20 += v17;
        }
        while (v18 != v15);
      }
      for (; v11; --v11)
      {
        *v3 = *v14;
        v3[1] = v14[1];
        v3[2] = v14[2];
        v3[3] = v14[3];
        v14 += v12;
        v3 += v13;
      }
      goto LABEL_71;
    }
    v24 = a2[4];
    v25 = *(unsigned int *)(a1 + 16);
    v26 = *a2;
    if ((_DWORD)v24 == (_DWORD)v25 && (_DWORD)v24 == (_DWORD)v26)
    {
      v27 = a2[5];
      v28 = *(unsigned int *)(a1 + 20);
      v29 = a2[1];
      v30 = v29 * v24;
      if ((_DWORD)v27 == (_DWORD)v28 && (_DWORD)v27 == (_DWORD)v30)
      {
        v31 = v27 * a2[2];
        v32 = (const void *)*((_QWORD *)a2 + 8);
        if (!(_DWORD)v31 || v32)
        {
          if (!(_DWORD)v31)
            return a1;
LABEL_69:
          memmove(v3, v32, 4 * v31);
          return a1;
        }
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v3 = *(_DWORD **)(a1 + 64);
          goto LABEL_69;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          return a1;
        if (!v29)
          return a1;
        v47 = a2[2];
        if (!v47)
          return a1;
        v48 = (char *)*((_QWORD *)a2 + 8);
        v49 = v47 - 1;
        if (v47 == 1)
        {
LABEL_72:
          if (!(_DWORD)v30 || v48)
          {
            if (!(_DWORD)v30)
              return a1;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_92;
          }
          memmove(v3, v48, 4 * v30);
          return a1;
        }
        if (!(_DWORD)v30)
          return a1;
        v50 = 4 * v27;
        v51 = 4 * v28;
        while (v48
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v48, 4 * v30);
          v48 += v50;
          v3 = (_DWORD *)((char *)v3 + v51);
          if (!--v49)
            goto LABEL_72;
        }
      }
    }
    else
    {
      if (!(_DWORD)v26)
        return a1;
      v33 = a2[1];
      if (!v33)
        return a1;
      v34 = a2[2];
      if (!v34)
        return a1;
      v35 = v33 - 1;
      v36 = (char *)*((_QWORD *)a2 + 8);
      v61 = a2[4];
      __len = 4 * v26;
      v59 = v34 - 1;
      if (v34 == 1)
      {
LABEL_81:
        if (v35)
        {
          v54 = 4 * v25;
          while (v36
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            v36 += 4 * v61;
            v3 = (_DWORD *)((char *)v3 + v54);
            if (!--v35)
              goto LABEL_87;
          }
        }
        else
        {
LABEL_87:
          if (v36
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v3, v36, __len);
            return a1;
          }
        }
      }
      else if (v33 == 1)
      {
        v52 = 4 * a2[5];
        v53 = 4 * *(unsigned int *)(a1 + 20);
        while (v36
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v3, v36, __len);
          v36 += v52;
          v3 = (_DWORD *)((char *)v3 + v53);
          if (!--v59)
            goto LABEL_81;
        }
      }
      else
      {
        v37 = 0;
        __src = (char *)(4 * v24);
        v55 = a2[5];
        v56 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v57 = v37;
          v38 = 0;
          v58 = v36;
          v39 = (char *)v3;
          do
          {
            while (v36)
            {
              memmove(v39, v36, __len);
              v36 += 4 * v61;
              v39 += 4 * v25;
              if (++v38 == v35)
                goto LABEL_39;
            }
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v40 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (byte_254530A10)
              v41 = byte_254530A18 == 0;
            else
              v41 = 0;
            if (!v41)
            {
              v42 = qword_2545309E8;
              v43 = qword_2545309F0;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v46 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_92;
            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v39, 0, __len);
            v39 += 4 * v25;
            ++v38;
            v36 = __src;
          }
          while (v38 != v35);
          v36 = __src;
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            break;
          }
LABEL_39:
          memmove(v39, v36, __len);
          v36 = &v58[4 * v55];
          v3 += v56;
          v37 = v57 + 1;
          if (v57 + 1 == v59)
            goto LABEL_81;
        }
      }
    }
LABEL_92:
    abort();
  }
  v63 = *(_OWORD *)a2;
  v64 = *((_OWORD *)a2 + 1);
  v65 = *((_OWORD *)a2 + 2);
  v66 = *((_QWORD *)a2 + 6);
  sub_207D5C5E8((uint64_t)v67, (uint64_t)(a2 + 14));
  *(_OWORD *)a1 = v63;
  *(_OWORD *)(a1 + 16) = v64;
  *(_OWORD *)(a1 + 32) = v65;
  *(_OWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 96) = v69;
  v4 = v67[0];
  *(_QWORD *)(a1 + 48) = v66;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a1 + 64);
  if (v5)
    free(v5);
  v6 = v67[2];
  *(_QWORD *)(a1 + 64) = v67[1];
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

uint64_t sub_2081BE0C0(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  _BYTE memptr[12];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0)
    v15 = 1;
  else
    v15 = v14 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v19;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20)
      sub_2081FBF78(v20, *(_QWORD *)(a1 + 72), 2 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v21 = 0;
  else
    v21 = v8;
  *(_QWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v6;
  return a1;
}

uint64_t sub_2081BE27C(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 2;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 2 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x1FFFFFFFFLL | ((unint64_t)(v6 >> 1) << 33);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 2);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 4 * v6;
  v15 = v14 - 1;
  v3 = (v14 & (v14 - 1)) == 0;
  v16 = 3;
  if (v3)
    v16 = v15;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, *(_QWORD *)(a1 + 72), 4 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v22 = 0;
  else
    v22 = v8;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v6;
  return a1;
}

uint64_t sub_2081BE43C(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  v6 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v7 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v7 = 0;
  v8 = v5 | (v7 << 32);
  v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v8;
  v10 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v9))
    v11 = (_DWORD)v9 == 0;
  else
    v11 = 1;
  v12 = v11 || (_DWORD)v6 == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v6;
  v15 = 2 * v7;
  if ((v15 & (v15 - 1)) != 0)
    v16 = 1;
  else
    v16 = v15 - 1;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v14 * v7);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v14 * (_DWORD)v7)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 2 * (v14 * v7), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, *(_QWORD *)(a1 + 72), 2 * (v14 * v7));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v9;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 92) = (2 * v10) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v7;
  return a1;
}

uint64_t sub_2081BE5F0(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 3;
  *(_QWORD *)&memptr[4] = v4;
  if ((_DWORD)v4)
    v5 = 3;
  else
    v5 = 0;
  v6 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v7 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v7 = 0;
  v8 = v5 | (v7 << 32);
  v9 = __PAIR64__(*(unsigned int *)&memptr[4], 3);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v8;
  v10 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = __PAIR64__(v4, 3);
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (__PAIR64__(v4, 3) >> 32)
    v11 = (_DWORD)v9 == 0;
  else
    v11 = 1;
  v12 = v11 || (_DWORD)v6 == 0;
  v13 = v12;
  if (v12)
    v14 = 0;
  else
    v14 = v6;
  v15 = 4 * v7;
  if ((v15 & (v15 - 1)) != 0)
    v16 = 3;
  else
    v16 = v15 - 1;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v14 * v7);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v14 * (_DWORD)v7)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v14 * v7), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, *(_QWORD *)(a1 + 72), 4 * (v14 * v7));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v13)
    v22 = 0;
  else
    v22 = v9;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 92) = (4 * v10) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v7;
  return a1;
}

uint64_t sub_2081BE7A4(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  unint64_t v21;
  _BYTE memptr[12];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 2 * v6;
  if ((v14 & (v14 - 1)) != 0)
    v15 = 1;
  else
    v15 = v14 - 1;
  v16 = v15 | (v15 >> 1) | ((v15 | (v15 >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *(_QWORD *)(a1 + 56) = 2 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v19;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v20 = malloc_type_posix_memalign((void **)memptr, v19, 2 * (v13 * v6), 0x1F88E90uLL);
    if (v20)
      sub_2081FBF78(v20, *(_QWORD *)(a1 + 72), 2 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v21 = 0;
  else
    v21 = v8;
  *(_QWORD *)(a1 + 80) = v21;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (2 * v9) & 0xFFFFFFFEFFFFFFFELL;
  *(_DWORD *)(a1 + 100) = 2 * v6;
  return a1;
}

uint64_t sub_2081BE960(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  _BYTE memptr[12];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
    v3 = *a2 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a2;
  if (v3)
    v4 = 0;
  *(_DWORD *)memptr = 4;
  *(_QWORD *)&memptr[4] = v4;
  v5 = 4 * ((_DWORD)v4 != 0);
  if (HIDWORD(v4))
    v6 = (v5 * *(_DWORD *)&memptr[4]);
  else
    v6 = 0;
  v7 = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
  v8 = __PAIR64__(*(unsigned int *)&memptr[4], 4);
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v7;
  v9 = *(_QWORD *)memptr;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = HIDWORD(v4);
  *(_QWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (HIDWORD(v8))
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  v11 = v10 || HIDWORD(v4) == 0;
  v12 = v11;
  if (v11)
    v13 = 0;
  else
    v13 = HIDWORD(v4);
  v14 = 4 * v6;
  v15 = v14 - 1;
  v3 = (v14 & (v14 - 1)) == 0;
  v16 = 3;
  if (v3)
    v16 = v15;
  v17 = v16 | (v16 >> 1) | ((v16 | (v16 >> 1)) >> 2);
  v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
  v19 = v18 | (v18 >> 16) | ((v18 | (v18 >> 16)) >> 32);
  if (v19 + 1 > 8)
    v20 = v19 + 1;
  else
    v20 = 8;
  *(_QWORD *)(a1 + 56) = 4 * (v13 * v6);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v20;
  if (v13 * (_DWORD)v6)
  {
    *(_QWORD *)memptr = 0;
    v21 = malloc_type_posix_memalign((void **)memptr, v20, 4 * (v13 * v6), 0x1F88E90uLL);
    if (v21)
      sub_2081FBF78(v21, *(_QWORD *)(a1 + 72), 4 * (v13 * v6));
    *(_QWORD *)(a1 + 64) = *(_QWORD *)memptr;
  }
  if (v12)
    v22 = 0;
  else
    v22 = v8;
  *(_QWORD *)(a1 + 80) = v22;
  *(_DWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 92) = (4 * v9) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 100) = 4 * v6;
  return a1;
}

_DWORD *sub_2081BEB20(_DWORD *result, char **a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  size_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  char *v25;
  unsigned __int8 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v32;
  int v33;
  char *v34;
  int v35;
  int v36;
  char *v37;
  char *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  char *v44;
  int v45;
  int v46;

  v3 = result[6];
  v4 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v5 = result[2];
LABEL_12:
    v13 = result[3];
    v12 = result[4];
    if (v5)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (!v14 && v12 != 0)
    {
      v16 = v5;
      v17 = *(char **)result;
      v18 = *a2;
      v45 = v12 - 1;
      v46 = v13 - 1;
      if (v12 == 1)
      {
LABEL_59:
        v36 = v46;
        if (v46)
        {
          while (v17
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v18, v17, v16);
            v17 += v3;
            v18 += v4;
            if (!--v36)
              goto LABEL_65;
          }
        }
        else
        {
LABEL_65:
          if (v17
            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            v37 = v18;
            v38 = v17;
            v39 = v16;
            return memmove(v37, v38, v39);
          }
        }
      }
      else
      {
        v41 = *((unsigned int *)a2 + 7);
        v40 = result[7];
        if (v13 == 1)
        {
          while (v17
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v18, v17, v16);
            v17 += v40;
            v18 += v41;
            if (!--v45)
              goto LABEL_59;
          }
        }
        else
        {
          v19 = 0;
          while (1)
          {
            v42 = v19;
            v20 = v18;
            v21 = 0;
            v43 = v20;
            v44 = v17;
            v22 = v17;
            do
            {
              while (v22)
              {
                memmove(v20, v22, v16);
                v22 += v3;
                v20 += v4;
                if (++v21 == v46)
                  goto LABEL_25;
              }
              v23 = v16;
              v24 = v4;
              v25 = (char *)v3;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v26 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (byte_254530A10)
                v27 = byte_254530A18 == 0;
              else
                v27 = 0;
              if (!v27)
              {
                v28 = qword_2545309E8;
                v29 = qword_2545309F0;
                while (v28 != v29)
                {
                  v31 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v28;
                  v30 = *(_QWORD *)(v28 + 8);
                  v28 += 16;
                  v31(v30, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v32 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_73;
              v3 = (unint64_t)v25;
              v16 = v23;
              qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
              memmove(v20, 0, v23);
              v22 = v25;
              v4 = v24;
              v20 += v24;
              ++v21;
            }
            while (v21 != v46);
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              break;
            }
LABEL_25:
            memmove(v20, v22, v16);
            v17 = &v44[v40];
            v18 = &v43[v41];
            v19 = v42 + 1;
            if (v42 + 1 == v45)
              goto LABEL_59;
          }
        }
      }
      goto LABEL_73;
    }
    return result;
  }
  v5 = result[2];
  if ((_DWORD)v3 != result[5] * v5)
    goto LABEL_12;
  v6 = result[7];
  v7 = *((unsigned int *)a2 + 7);
  v8 = result[3];
  v9 = v8 * v5;
  if ((_DWORD)v6 == (_DWORD)v7 && (_DWORD)v6 == v8 * (_DWORD)v3)
  {
    v9 = (v9 * result[4]);
    v10 = *(char **)result;
    if ((_DWORD)v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (!v11)
    {
      if (!(_DWORD)v9)
        return result;
      goto LABEL_69;
    }
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_69:
      v37 = *a2;
LABEL_76:
      v38 = v10;
      v39 = v9;
      return memmove(v37, v38, v39);
    }
LABEL_73:
    abort();
  }
  if (v5)
  {
    if (v8)
    {
      v33 = result[4];
      if (v33)
      {
        v34 = *a2;
        v10 = *(char **)result;
        v35 = v33 - 1;
        if (v33 == 1)
        {
LABEL_70:
          if (!(_DWORD)v9 || v10)
          {
            if (!(_DWORD)v9)
              return result;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_73;
          }
          v37 = v34;
          goto LABEL_76;
        }
        if ((_DWORD)v9)
        {
          while (v10
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            result = memmove(v34, v10, v9);
            v10 += v6;
            v34 += v7;
            if (!--v35)
              goto LABEL_70;
          }
          goto LABEL_73;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_2081BF0E4(_DWORD *result, char **__len)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v22;
  char *v23;
  char *v24;
  size_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  unsigned __int8 v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  const void *v41;
  size_t v42;
  uint64_t v43;
  const void *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  int v53;
  char *__src;

  v3 = result[6];
  v4 = *((unsigned int *)__len + 6);
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v5 = result[2];
LABEL_18:
    v19 = result[3];
    v18 = result[4];
    if (v5)
      v20 = v19 == 0;
    else
      v20 = 1;
    if (v20 || v18 == 0)
      return result;
    v22 = v19 - 1;
    v23 = *(char **)result;
    v24 = *__len;
    v25 = 2 * v5;
    v53 = v18 - 1;
    if (v18 == 1)
    {
      v27 = result[6];
LABEL_51:
      if (v22)
      {
        v37 = 2 * v27;
        v38 = 2 * v4;
        v39 = v23;
        while (v39
             || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          memmove(v24, v39, v25);
          v39 += v37;
          v24 += v38;
          if (!--v22)
            goto LABEL_58;
        }
      }
      else
      {
        v39 = v23;
LABEL_58:
        if (v39
          || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v40 = v24;
          v41 = v39;
          v42 = v25;
          return memmove(v40, v41, v42);
        }
      }
    }
    else if (v19 == 1)
    {
      v27 = result[6];
      v46 = 2 * result[7];
      v47 = 2 * *((unsigned int *)__len + 7);
      while (v23
           || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        memmove(v24, v23, v25);
        v23 += v46;
        v24 += v47;
        if (!--v53)
          goto LABEL_51;
      }
    }
    else
    {
      v26 = 0;
      v27 = result[6];
      __src = (char *)(2 * v3);
      v48 = result[7];
      v49 = *((unsigned int *)__len + 7);
      while (1)
      {
        v50 = v26;
        v28 = 0;
        v51 = v23;
        v52 = v24;
        v29 = v24;
        do
        {
          while (v23)
          {
            memmove(v29, v23, v25);
            v23 += 2 * v27;
            v29 += 2 * v4;
            if (++v28 == v22)
              goto LABEL_31;
          }
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v30 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (byte_254530A10)
            v31 = byte_254530A18 == 0;
          else
            v31 = 0;
          if (!v31)
          {
            v32 = qword_2545309E8;
            v33 = qword_2545309F0;
            while (v32 != v33)
            {
              v35 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v32;
              v34 = *(_QWORD *)(v32 + 8);
              v32 += 16;
              v35(v34, "ptr != nullptr || size == 0", 27, "", 0);
            }
          }
          v36 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10)
            goto LABEL_77;
          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
          memcpy(v29, 0, v25);
          v29 += 2 * v4;
          ++v28;
          v23 = __src;
        }
        while (v28 != v22);
        v23 = __src;
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          break;
        }
LABEL_31:
        memmove(v29, v23, v25);
        v23 = &v51[2 * v48];
        v24 = &v52[2 * v49];
        v26 = v50 + 1;
        if (v50 + 1 == v53)
          goto LABEL_51;
      }
    }
LABEL_77:
    abort();
  }
  v5 = result[2];
  if ((_DWORD)v3 != result[5] * v5)
    goto LABEL_18;
  v6 = result[7];
  v7 = *((unsigned int *)__len + 7);
  v8 = result[3];
  v9 = v8 * v3;
  if ((_DWORD)v6 == (_DWORD)v7 && (_DWORD)v6 == v9)
  {
    v43 = v8 * v5 * result[4];
    v44 = *(const void **)result;
    if ((_DWORD)v43)
      v45 = v44 == 0;
    else
      v45 = 0;
    if (v45)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
    }
    else if (!(_DWORD)v43)
    {
      return result;
    }
    v40 = *__len;
    v42 = 2 * v43;
    v41 = v44;
    return memmove(v40, v41, v42);
  }
  if (!v5)
    return result;
  if (!v8)
    return result;
  v11 = result[4];
  if (!v11)
    return result;
  v12 = *__len;
  v13 = v8 * v5;
  v14 = *(char **)result;
  v15 = v11 - 1;
  if (v11 == 1)
  {
LABEL_74:
    if (!(_DWORD)v13 || v14)
    {
      if (!(_DWORD)v13)
        return result;
    }
    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_77;
    }
    v40 = v12;
    v41 = v14;
    v42 = 2 * v13;
    return memmove(v40, v41, v42);
  }
  if ((_DWORD)v13)
  {
    v16 = 2 * v6;
    v17 = 2 * v7;
    while (v14
         || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      result = memmove(v12, v14, 2 * v13);
      v14 += v16;
      v12 += v17;
      if (!--v15)
        goto LABEL_74;
    }
    goto LABEL_77;
  }
  return result;
}

_BYTE *sub_2081BF6A4(_BYTE *result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;

  v2 = *((_DWORD *)result + 3);
  v3 = *((_DWORD *)result + 4);
  if (*((_DWORD *)result + 2))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = v2 - 1;
    v7 = *((unsigned int *)result + 6);
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(_BYTE **)result;
    v10 = *(_BYTE **)a2;
    v11 = v3 - 1;
    if (v11)
    {
      v12 = *(unsigned int *)(a2 + 28);
      v13 = *((unsigned int *)result + 7);
      if (v6)
      {
        v14 = 0;
        v15 = v10 + 3;
        result = v9 + 1;
        do
        {
          v16 = result;
          v17 = v15;
          v18 = v6;
          do
          {
            *(v17 - 3) = *(v16 - 1);
            *(v17 - 2) = *v16;
            *(v17 - 1) = v16[1];
            *v17 = v16[2];
            v17 += v8;
            v16 += v7;
            --v18;
          }
          while (v18);
          *(v17 - 3) = *(v16 - 1);
          *(v17 - 2) = *v16;
          *(v17 - 1) = v16[1];
          *v17 = v16[2];
          v9 += v13;
          v10 += v12;
          ++v14;
          v15 += v12;
          result += v13;
        }
        while (v14 != v11);
      }
      else
      {
        do
        {
          *v10 = *v9;
          v10[1] = v9[1];
          v10[2] = v9[2];
          v10[3] = v9[3];
          v9 += v13;
          v10 += v12;
          --v11;
        }
        while (v11);
      }
    }
    for (; v6; --v6)
    {
      *v10 = *v9;
      v10[1] = v9[1];
      v10[2] = v9[2];
      v10[3] = v9[3];
      v9 += v7;
      v10 += v8;
    }
    *v10 = *v9;
    v10[1] = v9[1];
    v10[2] = v9[2];
    v10[3] = v9[3];
  }
  return result;
}

uint64_t sub_2081BF7F4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _WORD *v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  int v19;

  v2 = *(_DWORD *)(result + 12);
  v3 = *(_DWORD *)(result + 16);
  if (*(_DWORD *)(result + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = v2 - 1;
    v7 = *(unsigned int *)(result + 24);
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(_WORD **)result;
    v10 = *(_WORD **)a2;
    v11 = v3 - 1;
    if (v11)
    {
      v12 = *(unsigned int *)(a2 + 28);
      v13 = *(unsigned int *)(result + 28);
      if (!v6)
      {
        do
        {
          *v10 = *v9;
          v10[1] = v9[1];
          v10[2] = v9[2];
          v10[3] = v9[3];
          v9 += v13;
          v10 += v12;
          --v11;
        }
        while (v11);
LABEL_18:
        *v10 = *v9;
        v10[1] = v9[1];
        v10[2] = v9[2];
        v10[3] = v9[3];
        return result;
      }
      v14 = 0;
      result = 2 * v8;
      v15 = v10 + 2;
      v16 = v9 + 2;
      do
      {
        v17 = v16;
        v18 = v15;
        v19 = v6;
        do
        {
          *(v18 - 2) = *(v17 - 2);
          *(v18 - 1) = *(v17 - 1);
          *v18 = *v17;
          v18[1] = v17[1];
          v18 = (_WORD *)((char *)v18 + result);
          v17 += v7;
          --v19;
        }
        while (v19);
        *(v18 - 2) = *(v17 - 2);
        *(v18 - 1) = *(v17 - 1);
        *v18 = *v17;
        v18[1] = v17[1];
        v9 += v13;
        v10 += v12;
        ++v14;
        v15 += v12;
        v16 += v13;
      }
      while (v14 != v11);
    }
    for (; v6; --v6)
    {
      *v10 = *v9;
      v10[1] = v9[1];
      v10[2] = v9[2];
      v10[3] = v9[3];
      v9 += v7;
      v10 += v8;
    }
    goto LABEL_18;
  }
  return result;
}

__int16 sub_2081BF96C@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  int v4;
  int v5;
  BOOL v6;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  _WORD *v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  _BOOL4 v46;
  _WORD *v47;
  __int16 *v48;
  uint64_t v49;
  unint64_t v50;
  _OWORD *v51;
  __int128 v52;
  __int16 v53;
  _BOOL4 v54;
  _WORD *v55;
  __int16 *v56;
  __int128 *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  _BOOL4 v69;
  _WORD *v70;
  __int16 *v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int16 v76;
  _BOOL4 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _WORD *v81;
  __int16 *v82;
  __int128 *v83;
  _OWORD *v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int16 v88;
  int v89;
  _WORD *v90;
  _WORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _WORD *v98;
  _WORD *v99;
  _BOOL4 v100;
  _WORD *v101;
  __int16 *v102;
  uint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  __int128 v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  _WORD *v110;
  unint64_t v111;
  __int16 *v112;
  unint64_t v113;
  unint64_t v114;
  _WORD *v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  __int16 v120;
  _BOOL4 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _WORD *v125;
  __int16 *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  __int16 v131;
  uint64_t v133;
  _WORD *v134;
  _WORD *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _WORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;

  if (*(_DWORD *)(a1 + 20) != 1 || *(_DWORD *)(a2 + 20) != 1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 8))
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && v5 != 0)
    {
      v8 = v4 - 1;
      v9 = *(_WORD **)a1;
      v10 = *(_WORD **)a2;
      v11 = 2 * *(unsigned int *)(a1 + 24);
      v12 = 2 * *(unsigned int *)(a2 + 24);
      v13 = v5 - 1;
      if (v13)
      {
        v14 = *(unsigned int *)(a2 + 28);
        v15 = *(unsigned int *)(a1 + 28);
        if (v8)
        {
          v16 = 0;
          v17 = v10 + 2;
          v18 = v9 + 2;
          do
          {
            v19 = v18;
            v20 = v17;
            v21 = v8;
            do
            {
              *(v20 - 2) = *(v19 - 2);
              *(v20 - 1) = *(v19 - 1);
              *v20 = *v19;
              v20[1] = v19[1];
              v20 = (_WORD *)((char *)v20 + v12);
              v19 = (_WORD *)((char *)v19 + v11);
              --v21;
            }
            while (v21);
            *(v20 - 2) = *(v19 - 2);
            *(v20 - 1) = *(v19 - 1);
            *v20 = *v19;
            v20[1] = v19[1];
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v14;
            v18 += v15;
          }
          while (v16 != v13);
        }
        else
        {
          v108 = 2 * v15;
          v109 = 2 * v14;
          do
          {
            *v10 = *v9;
            v10[1] = v9[1];
            v10[2] = v9[2];
            v10[3] = v9[3];
            v9 = (_WORD *)((char *)v9 + v108);
            v10 = (_WORD *)((char *)v10 + v109);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *v10 = *v9;
        v10[1] = v9[1];
        v10[2] = v9[2];
        v10[3] = v9[3];
        v9 = (_WORD *)((char *)v9 + v11);
        v10 = (_WORD *)((char *)v10 + v12);
      }
      *v10 = *v9;
      v10[1] = v9[1];
      v10[2] = v9[2];
      LOWORD(v86) = v9[3];
      v10[3] = v86;
    }
    return v86;
  }
  v22 = *(unsigned int *)(a1 + 24);
  v23 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v22 != (_DWORD)v23)
  {
    v24 = *(_DWORD *)(a1 + 8);
LABEL_30:
    if (!v24)
      return v86;
    v32 = *(_DWORD *)(a1 + 12);
    if (!v32)
      return v86;
    v33 = *(_DWORD *)(a1 + 16);
    if (!v33)
      return v86;
    v34 = v32 - 1;
    v35 = *(_WORD **)a1;
    v36 = *(_WORD **)a2;
    v37 = 2 * v23;
    v38 = v24;
    v136 = v33 - 1;
    v143 = v24;
    v141 = v32 - 1;
    v133 = *(unsigned int *)(a1 + 24);
    if (v33 == 1)
    {
LABEL_59:
      if (v34)
      {
        v62 = 0;
        v63 = 2 * v133;
        v64 = (v38 - 1) & 0x7FFFFFFFFFFFFFFFLL;
        v65 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
        v66 = v65;
        v67 = v36;
        v68 = v35;
        while (1)
        {
          if (!v68)
          {
            v69 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v34 = v141;
            v38 = v143;
            if (v69)
              goto LABEL_119;
          }
          v70 = v67;
          v71 = v68;
          if (v64 < 0xF)
            goto LABEL_132;
          v70 = v67;
          v71 = v68;
          if ((unint64_t)((char *)v36 + v37 * v62 - ((char *)v35 + v63 * v62)) < 0x20)
            goto LABEL_132;
          v72 = 0;
          v70 = &v67[v66];
          v71 = &v68[v66];
          v73 = (v64 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v74 = &v67[v72];
            v75 = *(_OWORD *)&v68[v72 + 8];
            *v74 = *(_OWORD *)&v68[v72];
            v74[1] = v75;
            v72 += 16;
            v73 -= 16;
          }
          while (v73);
          if (v64 + 1 != v65)
          {
LABEL_132:
            do
            {
              v76 = *v71++;
              *v70++ = v76;
            }
            while (v71 != &v68[v38]);
          }
          v68 = (_WORD *)((char *)v68 + v63);
          v67 = (_WORD *)((char *)v67 + v37);
          if ((_DWORD)++v62 == v34)
            goto LABEL_72;
        }
      }
      v67 = v36;
      v68 = v35;
LABEL_72:
      if (!v68)
      {
        v77 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v38 = v143;
        if (v77)
LABEL_119:
          abort();
      }
      v78 = (v38 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v78 < 0xF || (unint64_t)((char *)v67 - (char *)v68) < 0x20)
      {
        v81 = v67;
        v82 = v68;
      }
      else
      {
        v79 = v78 + 1;
        v80 = (v78 + 1) & 0xFFFFFFFFFFFFFFF0;
        v81 = &v67[v80];
        v82 = &v68[v80];
        v83 = (__int128 *)(v68 + 8);
        v84 = v67 + 8;
        v85 = v80;
        do
        {
          v86 = *(v83 - 1);
          v87 = *v83;
          *(v84 - 1) = v86;
          *v84 = v87;
          v83 += 2;
          v84 += 2;
          v85 -= 16;
        }
        while (v85);
        if (v79 == v80)
          return v86;
      }
      do
      {
        v88 = *v82++;
        LOWORD(v86) = v88;
        *v81++ = v88;
      }
      while (v82 != &v68[v38]);
      return v86;
    }
    v140 = 0;
    v39 = (v24 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v137 = 2 * *(unsigned int *)(a1 + 28);
    v138 = 2 * *(unsigned int *)(a2 + 28);
    v40 = 2 * v22;
    v145 = v39 + 1;
    v41 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
    v42 = v41;
    v134 = *(_WORD **)a2;
    v135 = *(_WORD **)a1;
    while (1)
    {
      v139 = v36;
      v43 = v36;
      v44 = v35;
      if (v34)
      {
        v45 = 0;
        v43 = v139;
        v44 = v35;
        do
        {
          if (!v44)
          {
            v46 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v34 = v141;
            v38 = v143;
            if (v46)
              goto LABEL_119;
          }
          v47 = v43;
          v48 = v44;
          if (v39 < 0xF)
            goto LABEL_133;
          v47 = v43;
          v48 = v44;
          if ((unint64_t)((char *)v134 + v138 * v140 + v37 * v45 - ((char *)v135 + v137 * v140 + v40 * v45)) < 0x20)
            goto LABEL_133;
          v49 = 0;
          v47 = &v43[v42];
          v48 = &v44[v42];
          v50 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v51 = &v43[v49];
            v52 = *(_OWORD *)&v44[v49 + 8];
            *v51 = *(_OWORD *)&v44[v49];
            v51[1] = v52;
            v49 += 16;
            v50 -= 16;
          }
          while (v50);
          if (v145 != v41)
          {
LABEL_133:
            do
            {
              v53 = *v48++;
              *v47++ = v53;
            }
            while (v48 != &v44[v38]);
          }
          v44 = (_WORD *)((char *)v44 + v40);
          v43 = (_WORD *)((char *)v43 + v37);
        }
        while ((_DWORD)++v45 != v34);
      }
      if (!v44)
      {
        v54 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v34 = v141;
        v38 = v143;
        if (v54)
          goto LABEL_119;
      }
      if (v39 < 0xF || (unint64_t)((char *)v43 - (char *)v44) < 0x20)
      {
        v55 = v43;
        v56 = v44;
      }
      else
      {
        v55 = &v43[v42];
        v56 = &v44[v42];
        v57 = (__int128 *)(v44 + 8);
        v58 = v43 + 8;
        v59 = (v39 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 16;
        }
        while (v59);
        if (v145 == v41)
          goto LABEL_35;
      }
      do
      {
        v61 = *v56++;
        *v55++ = v61;
      }
      while (v56 != &v44[v38]);
LABEL_35:
      v35 = (_WORD *)((char *)v35 + v137);
      v36 = &v139[(unint64_t)v138 / 2];
      if ((_DWORD)++v140 == v136)
        goto LABEL_59;
    }
  }
  v24 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v22 != v24)
    goto LABEL_30;
  v25 = *(unsigned int *)(a1 + 28);
  v26 = *(unsigned int *)(a2 + 28);
  v27 = *(_DWORD *)(a1 + 12);
  v28 = (v27 * v22);
  if ((_DWORD)v25 == (_DWORD)v26 && (_DWORD)v25 == (_DWORD)v28)
  {
    v29 = (v25 * *(_DWORD *)(a1 + 16));
    v30 = *(_WORD **)a1;
    if ((_DWORD)v29)
      v31 = v30 == 0;
    else
      v31 = 0;
    if (v31)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_119;
      }
    }
    else if (!(_DWORD)v29)
    {
      return v86;
    }
    v110 = *(_WORD **)a2;
    v111 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v111 < 0xF)
    {
      v112 = v30;
    }
    else
    {
      v112 = v30;
      if ((unint64_t)((char *)v110 - (char *)v30) >= 0x20)
      {
        v113 = v111 + 1;
        v114 = v113 & 0xFFFFFFFFFFFFFFF0;
        v115 = &v110[v114];
        v112 = &v30[v114];
        v116 = (__int128 *)(v30 + 8);
        v117 = v110 + 8;
        v118 = v113 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v86 = *(v116 - 1);
          v119 = *v116;
          *(v117 - 1) = v86;
          *v117 = v119;
          v116 += 2;
          v117 += 2;
          v118 -= 16;
        }
        while (v118);
        v110 = v115;
        if (v113 == (v113 & 0xFFFFFFFFFFFFFFF0))
          return v86;
      }
    }
    do
    {
      v120 = *v112++;
      LOWORD(v86) = v120;
      *v110++ = v120;
    }
    while (v112 != &v30[v29]);
    return v86;
  }
  if ((_DWORD)v22)
  {
    if (v27)
    {
      v89 = *(_DWORD *)(a1 + 16);
      if (v89)
      {
        v90 = *(_WORD **)a1;
        v91 = *(_WORD **)a2;
        v92 = v89 - 1;
        v142 = v28;
        if (v89 == 1)
        {
          v98 = *(_WORD **)a2;
          v99 = *(_WORD **)a1;
LABEL_116:
          if (!(_DWORD)v28 || v99)
          {
            if (!(_DWORD)v28)
              return v86;
          }
          else
          {
            v121 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
            v28 = v142;
            if (v121)
              goto LABEL_119;
          }
          v122 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v122 < 0xF || (unint64_t)((char *)v98 - (char *)v99) < 0x20)
          {
            v125 = v98;
            v126 = v99;
          }
          else
          {
            v123 = v122 + 1;
            v124 = (v122 + 1) & 0xFFFFFFFFFFFFFFF0;
            v125 = &v98[v124];
            v126 = &v99[v124];
            v127 = (__int128 *)(v99 + 8);
            v128 = v98 + 8;
            v129 = v124;
            do
            {
              v86 = *(v127 - 1);
              v130 = *v127;
              *(v128 - 1) = v86;
              *v128 = v130;
              v127 += 2;
              v128 += 2;
              v129 -= 16;
            }
            while (v129);
            if (v123 == v124)
              return v86;
          }
          do
          {
            v131 = *v126++;
            LOWORD(v86) = v131;
            *v125++ = v131;
          }
          while (v126 != &v99[v28]);
          return v86;
        }
        if ((_DWORD)v28)
        {
          v93 = 0;
          v94 = 2 * v26;
          v95 = 2 * v25;
          v96 = (v28 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          v97 = (v96 + 1) & 0xFFFFFFFFFFFFFFF0;
          v144 = v97;
          v98 = *(_WORD **)a2;
          v99 = *(_WORD **)a1;
          while (1)
          {
            if (!v99)
            {
              v100 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
              v28 = v142;
              if (v100)
                goto LABEL_119;
            }
            v101 = v98;
            v102 = v99;
            if (v96 < 0xF)
              goto LABEL_134;
            v101 = v98;
            v102 = v99;
            if ((unint64_t)((char *)v91 + v94 * v93 - ((char *)v90 + v95 * v93)) < 0x20)
              goto LABEL_134;
            v103 = 0;
            v101 = &v98[v144];
            v102 = &v99[v144];
            v104 = (v96 + 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v105 = &v98[v103];
              v86 = *(_OWORD *)&v99[v103];
              v106 = *(_OWORD *)&v99[v103 + 8];
              *v105 = v86;
              v105[1] = v106;
              v103 += 16;
              v104 -= 16;
            }
            while (v104);
            if (v96 + 1 != v97)
            {
LABEL_134:
              do
              {
                v107 = *v102++;
                LOWORD(v86) = v107;
                *v101++ = v107;
              }
              while (v102 != &v99[v28]);
            }
            v99 = (_WORD *)((char *)v99 + v95);
            v98 = (_WORD *)((char *)v98 + v94);
            if ((_DWORD)++v93 == v92)
              goto LABEL_116;
          }
        }
      }
    }
  }
  return v86;
}

float sub_2081C0264(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  float result;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = v2 - 1;
    v7 = *(unsigned int *)(a1 + 24);
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(float **)a1;
    v10 = *(float **)a2;
    v11 = v3 - 1;
    if (v11)
    {
      v12 = *(unsigned int *)(a2 + 28);
      v13 = *(unsigned int *)(a1 + 28);
      if (!v6)
      {
        do
        {
          *v10 = *v9;
          v10[1] = v9[1];
          v10[2] = v9[2];
          v10[3] = v9[3];
          v9 += v13;
          v10 += v12;
          --v11;
        }
        while (v11);
LABEL_18:
        *v10 = *v9;
        v10[1] = v9[1];
        v10[2] = v9[2];
        result = v9[3];
        v10[3] = result;
        return result;
      }
      v14 = 0;
      v15 = v10 + 2;
      v16 = v9 + 2;
      do
      {
        v17 = v16;
        v18 = v15;
        v19 = v6;
        do
        {
          *(v18 - 2) = *(v17 - 2);
          *(v18 - 1) = *(v17 - 1);
          *v18 = *v17;
          v18[1] = v17[1];
          v18 += v8;
          v17 += v7;
          --v19;
        }
        while (v19);
        *(v18 - 2) = *(v17 - 2);
        *(v18 - 1) = *(v17 - 1);
        *v18 = *v17;
        v18[1] = v17[1];
        v9 += v13;
        v10 += v12;
        ++v14;
        v15 += v12;
        v16 += v13;
      }
      while (v14 != v11);
    }
    for (; v6; --v6)
    {
      *v10 = *v9;
      v10[1] = v9[1];
      v10[2] = v9[2];
      v10[3] = v9[3];
      v9 += v7;
      v10 += v8;
    }
    goto LABEL_18;
  }
  return result;
}

#error "2081C03D4: too big function (funcsize=0)"

void sub_2081D568C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p)
{
  unint64_t *p_shared_owners;
  unint64_t v39;

  if (__p)
    operator delete(__p);
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  _Unwind_Resume(a1);
}

double sub_2081D7410(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081D74C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_2081D7500(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  size_t v11;

  sub_2080A1748(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 8));
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(unsigned int **)v4;
  v7 = *(_DWORD **)(v4 + 8);
  v8 = **(_DWORD **)v4 + 1;
  **(_DWORD **)v4 = v8;
  if (v8 != *v7)
  {
    v10 = 0;
LABEL_6:
    v11 = strlen(*(const char **)(**(_QWORD **)(v4 + 16) + 8 * v10));
    sub_207CBAB98(v3, *(_QWORD *)(**(_QWORD **)(v4 + 16) + 8 * v10), v11);
    sub_207F1F614(v5, v3, *(unsigned int **)v4, v10, **(_DWORD **)(v4 + 24));
    return;
  }
  v9 = v6[1] + 1;
  *v6 = 0;
  v6[1] = v9;
  if (v9 != v7[1])
  {
    v10 = 1;
    goto LABEL_6;
  }
}

double sub_2081D75D4(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081D768C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_2081D76C4(_BYTE *result, unsigned int a2, unint64_t **a3, uint64_t a4)
{
  unint64_t **v5;
  int v6;
  int v7;
  unint64_t *v8;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t **v32;

  v5 = a3;
  if ((_DWORD)result)
  {
    v6 = (int)result;
    v7 = 0;
    v8 = *a3;
    v32 = (uint64_t **)(a3 + 1);
    do
    {
      v13 = *(_BYTE *)(a4 + 23);
      if (v13 >= 0)
        v14 = *(unsigned __int8 *)(a4 + 23);
      else
        v14 = *(_QWORD *)(a4 + 8);
      if (v13 >= 0)
        v15 = (_BYTE *)a4;
      else
        v15 = *(_BYTE **)a4;
      if (v14 >= 1)
      {
        v16 = &v15[v14];
        v17 = v14;
        result = v15;
        do
        {
          result = memchr(result, 46, v17);
          if (!result)
            break;
          if (*result == 46)
          {
            if (result == v16)
              break;
            v18 = result - v15;
            v10 = (uint64_t **)v5;
            if (result - v15 != -1)
            {
              v19 = (_BYTE *)*v8;
              if (*v8 <= v18)
                v19 = (_BYTE *)(result - v15);
              *v8 = (unint64_t)v19;
              v20 = *(unsigned __int8 *)(a4 + 23);
              if ((v20 & 0x80u) != 0)
                v20 = *(_QWORD *)(a4 + 8);
              v14 = v20 + ~v18;
              v10 = v32;
            }
            goto LABEL_4;
          }
          ++result;
          v17 = v16 - result;
        }
        while (v16 - result >= 1);
      }
      v10 = (uint64_t **)v5;
LABEL_4:
      v11 = *v10;
      v12 = *v11;
      if (*v11 <= (unint64_t)v14)
        v12 = v14;
      *v11 = v12;
      a4 += 24 * a2;
      ++v7;
    }
    while (v7 != v6);
  }
  v21 = *(_BYTE *)(a4 + 23);
  if (v21 >= 0)
    v22 = *(unsigned __int8 *)(a4 + 23);
  else
    v22 = *(_QWORD *)(a4 + 8);
  if (v21 >= 0)
    v23 = (_BYTE *)a4;
  else
    v23 = *(_BYTE **)a4;
  if (v22 >= 1)
  {
    v24 = &v23[v22];
    v25 = v22;
    result = v23;
    do
    {
      result = memchr(result, 46, v25);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result != v24)
        {
          v26 = result - v23;
          if (result - v23 != -1)
          {
            v28 = *v5++;
            v27 = v28;
            v29 = (_BYTE *)*v28;
            if (*v28 <= v26)
              v29 = (_BYTE *)(result - v23);
            *v27 = (unint64_t)v29;
            v30 = *(unsigned __int8 *)(a4 + 23);
            if ((v30 & 0x80u) != 0)
              v30 = *(_QWORD *)(a4 + 8);
            v22 = v30 + ~v26;
          }
        }
        break;
      }
      ++result;
      v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  v31 = **v5;
  if (v31 <= v22)
    v31 = v22;
  **v5 = v31;
  return result;
}

_QWORD *sub_2081D78AC(uint64_t a1, void **a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t v12;

  result = sub_2081FBE78(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8));
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(unsigned int **)v5;
  v8 = *(_DWORD **)(v5 + 8);
  v9 = **(_DWORD **)v5 + 1;
  **(_DWORD **)v5 = v9;
  if (v9 != *v8)
  {
    v11 = 0;
LABEL_6:
    v12 = strlen(*(const char **)(**(_QWORD **)(v5 + 16) + 8 * v11));
    sub_207CBAB98(v4, *(_QWORD *)(**(_QWORD **)(v5 + 16) + 8 * v11), v12);
    return sub_207F1F614(v6, v4, *(unsigned int **)v5, v11, **(_DWORD **)(v5 + 24));
  }
  v10 = v7[1] + 1;
  *v7 = 0;
  v7[1] = v10;
  if (v10 != v8[1])
  {
    v11 = 1;
    goto LABEL_6;
  }
  return result;
}

void sub_2081D7984(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081D7AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081D7AF0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081D7C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081D7C5C(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081D7D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_2081D7D4C(uint64_t ****a1, __int128 **a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;

  v4 = *a1;
  sub_2080A1748(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  v6 = v4[1];
  v5 = v4[2];
  v7 = (uint64_t)v6[4];
  v8 = (unsigned int *)*v6;
  v9 = v6[1];
  v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    v11 = v8[1] + 1;
    *v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2))
        goto LABEL_8;
      v13 = 2;
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_207CBAB98(v5, *(_QWORD *)(*v6[2] + 8 * v13), v14);
  sub_207F215D4(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  v15 = *a1;
  sub_2080A1748(**v15, (__int128 *)((char *)*a2 + 24), *(unsigned __int8 *)(*v15)[1]);
  v17 = v15[1];
  v16 = v15[2];
  v18 = (uint64_t)v17[4];
  v19 = (unsigned int *)*v17;
  v20 = v17[1];
  v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)*v17 = v21;
  if (v21 != *(_DWORD *)v20)
  {
    v24 = 0;
LABEL_15:
    v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
    sub_207CBAB98(v16, *(_QWORD *)(*v17[2] + 8 * v24), v25);
    sub_207F215D4(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
    return;
  }
  v22 = v19[1] + 1;
  *v19 = 0;
  v19[1] = v22;
  if (v22 != *((_DWORD *)v20 + 1))
  {
    v24 = 1;
    goto LABEL_15;
  }
  v23 = v19[2] + 1;
  v19[1] = 0;
  v19[2] = v23;
  if (v23 != *((_DWORD *)v20 + 2))
  {
    v24 = 2;
    goto LABEL_15;
  }
}

double sub_2081D7F1C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081D7FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_2081D800C(_BYTE *result, uint64_t a2)
{
  uint64_t **v3;
  unint64_t **v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;

  v3 = (uint64_t **)result;
  v4 = (unint64_t **)(result + 8);
  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if (v6 >= 1)
  {
    v8 = &v7[v6];
    v9 = v6;
    result = v7;
    do
    {
      result = memchr(result, 46, v9);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v8)
          break;
        v19 = result - v7;
        v10 = v3;
        if (result - v7 != -1)
        {
          v20 = (_BYTE *)**v3;
          if ((unint64_t)v20 <= v19)
            v20 = (_BYTE *)(result - v7);
          **v3 = (uint64_t)v20;
          v21 = *(unsigned __int8 *)(a2 + 23);
          if ((v21 & 0x80u) != 0)
            v21 = *(_QWORD *)(a2 + 8);
          v6 = v21 + ~v19;
          v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  v10 = v3;
LABEL_13:
  v11 = *v10;
  v12 = *v11;
  if (*v11 <= (unint64_t)v6)
    v12 = v6;
  *v11 = v12;
  v13 = *(char *)(a2 + 47);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 47);
  else
    v14 = *(_QWORD *)(a2 + 32);
  if (v13 >= 0)
    v15 = (_BYTE *)(a2 + 24);
  else
    v15 = *(_BYTE **)(a2 + 24);
  if (v14 >= 1)
  {
    v16 = &v15[v14];
    v17 = v14;
    result = v15;
    do
    {
      result = memchr(result, 46, v17);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v16)
          break;
        v22 = result - v15;
        if (result - v15 == -1)
          break;
        v23 = (_BYTE *)**v3;
        if ((unint64_t)v23 <= v22)
          v23 = (_BYTE *)(result - v15);
        **v3 = (uint64_t)v23;
        v24 = *(unsigned __int8 *)(a2 + 47);
        if ((v24 & 0x80u) != 0)
          v24 = *(_QWORD *)(a2 + 32);
        v14 = v24 + ~v22;
        goto LABEL_27;
      }
      ++result;
      v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  v4 = (unint64_t **)v3;
LABEL_27:
  v18 = **v4;
  if (v18 <= v14)
    v18 = v14;
  **v4 = v18;
  return result;
}

_QWORD *sub_2081D81B8(uint64_t a1, void **a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t v13;

  result = sub_2081FBE78(**(uint64_t ***)a1, a2, **(unsigned __int8 **)(*(_QWORD *)a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8));
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(unsigned int **)v5;
  v8 = *(_DWORD **)(v5 + 8);
  v9 = **(_DWORD **)v5 + 1;
  **(_DWORD **)v5 = v9;
  if (v9 != *v8)
  {
    v12 = 0;
LABEL_8:
    v13 = strlen(*(const char **)(**(_QWORD **)(v5 + 16) + 8 * v12));
    sub_207CBAB98(v4, *(_QWORD *)(**(_QWORD **)(v5 + 16) + 8 * v12), v13);
    return sub_207F215D4(v6, v4, *(unsigned int **)v5, v12, **(_DWORD **)(v5 + 24));
  }
  v10 = v7[1] + 1;
  *v7 = 0;
  v7[1] = v10;
  if (v10 != v8[1])
  {
    v12 = 1;
    goto LABEL_8;
  }
  v11 = v7[2] + 1;
  v7[1] = 0;
  v7[2] = v11;
  if (v11 != v8[2])
  {
    v12 = 2;
    goto LABEL_8;
  }
  return result;
}

void sub_2081D82B0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081D8400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081D841C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081D856C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081D8588(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081D8640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2081D8678(_DWORD *result, _QWORD *a2, unint64_t ***a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  if (result[5])
  {
    v4 = 0;
    do
    {
      *a2 = a4;
      v10 = result[3];
      v11 = **a3;
      v12 = *v11;
      if (v10)
      {
        v13 = 24 * result[4];
        v5 = a4;
        do
        {
          *a2 = v5;
          v14 = *(unsigned __int8 *)(v5 + 23);
          if ((v14 & 0x80u) != 0)
            v14 = *(_QWORD *)(v5 + 8);
          if (v12 <= v14)
            v12 = v14;
          *v11 = v12;
          v15 = *(unsigned __int8 *)(v5 + 47);
          if ((v15 & 0x80u) != 0)
            v15 = *(_QWORD *)(v5 + 32);
          if (v12 <= v15)
            v12 = v15;
          *v11 = v12;
          v16 = *(unsigned __int8 *)(v5 + 71);
          if ((v16 & 0x80u) != 0)
            v16 = *(_QWORD *)(v5 + 56);
          if (v12 <= v16)
            v12 = v16;
          *v11 = v12;
          v5 += v13;
          --v10;
        }
        while (v10);
      }
      else
      {
        v5 = a4;
      }
      *a2 = v5;
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      if (v12 > v6)
        v6 = v12;
      *v11 = v6;
      v7 = *(unsigned __int8 *)(v5 + 47);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v5 + 32);
      if (v6 <= v7)
        v6 = v7;
      *v11 = v6;
      v8 = *(unsigned __int8 *)(v5 + 71);
      v9 = *(_QWORD *)(v5 + 56);
      if ((v8 & 0x80u) == 0)
        v9 = v8;
      if (v6 > v9)
        v9 = v6;
      *v11 = v9;
      a4 += 24 * result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *a2 = a4;
  v17 = result[3];
  v18 = **a3;
  v19 = *v18;
  if (v17)
  {
    v20 = 24 * result[4];
    do
    {
      *a2 = a4;
      v21 = *(unsigned __int8 *)(a4 + 23);
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a4 + 8);
      if (v19 <= v21)
        v19 = v21;
      *v18 = v19;
      v22 = *(unsigned __int8 *)(a4 + 47);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a4 + 32);
      if (v19 <= v22)
        v19 = v22;
      *v18 = v19;
      v23 = *(unsigned __int8 *)(a4 + 71);
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a4 + 56);
      if (v19 <= v23)
        v19 = v23;
      *v18 = v19;
      a4 += v20;
      --v17;
    }
    while (v17);
  }
  *a2 = a4;
  v24 = *(unsigned __int8 *)(a4 + 23);
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a4 + 8);
  if (v19 > v24)
    v24 = v19;
  *v18 = v24;
  v25 = *(unsigned __int8 *)(a4 + 47);
  if ((v25 & 0x80u) != 0)
    v25 = *(_QWORD *)(a4 + 32);
  if (v24 <= v25)
    v24 = v25;
  *v18 = v24;
  v26 = *(unsigned __int8 *)(a4 + 71);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a4 + 56);
  if (v24 <= v26)
    v24 = v26;
  *v18 = v24;
  return result;
}

void sub_2081D88A0(uint64_t ****a1, __int128 **a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;
  uint64_t ***v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  size_t v36;

  v4 = *a1;
  sub_2080A1748(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  v6 = v4[1];
  v5 = v4[2];
  v7 = (uint64_t)v6[4];
  v8 = (unsigned int *)*v6;
  v9 = v6[1];
  v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    v11 = v8[1] + 1;
    *v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2))
        goto LABEL_8;
      v13 = 2;
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_207CBAB98(v5, *(_QWORD *)(*v6[2] + 8 * v13), v14);
  sub_207F215D4(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  v15 = *a1;
  sub_2080A1748(***a1, (__int128 *)((char *)*a2 + 24), *(unsigned __int8 *)(**a1)[1]);
  v17 = v15[1];
  v16 = v15[2];
  v18 = (uint64_t)v17[4];
  v19 = (unsigned int *)*v17;
  v20 = v17[1];
  v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)*v17 = v21;
  if (v21 == *(_DWORD *)v20)
  {
    v22 = v19[1] + 1;
    *v19 = 0;
    v19[1] = v22;
    if (v22 == *((_DWORD *)v20 + 1))
    {
      v23 = v19[2] + 1;
      v19[1] = 0;
      v19[2] = v23;
      if (v23 == *((_DWORD *)v20 + 2))
        goto LABEL_15;
      v24 = 2;
    }
    else
    {
      v24 = 1;
    }
  }
  else
  {
    v24 = 0;
  }
  v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
  sub_207CBAB98(v16, *(_QWORD *)(*v17[2] + 8 * v24), v25);
  sub_207F215D4(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
LABEL_15:
  v26 = *a1;
  sub_2080A1748(**v26, *a2 + 3, *(unsigned __int8 *)(*v26)[1]);
  v28 = v26[1];
  v27 = v26[2];
  v29 = (uint64_t)v28[4];
  v30 = (unsigned int *)*v28;
  v31 = v28[1];
  v32 = *(_DWORD *)*v28 + 1;
  *(_DWORD *)*v28 = v32;
  if (v32 != *(_DWORD *)v31)
  {
    v35 = 0;
LABEL_22:
    v36 = strlen(*(const char **)(*v28[2] + 8 * v35));
    sub_207CBAB98(v27, *(_QWORD *)(*v28[2] + 8 * v35), v36);
    sub_207F215D4(v29, v27, (unsigned int *)*v28, v35, *(_DWORD *)v28[3]);
    return;
  }
  v33 = v30[1] + 1;
  *v30 = 0;
  v30[1] = v33;
  if (v33 != *((_DWORD *)v31 + 1))
  {
    v35 = 1;
    goto LABEL_22;
  }
  v34 = v30[2] + 1;
  v30[1] = 0;
  v30[2] = v34;
  if (v34 != *((_DWORD *)v31 + 2))
  {
    v35 = 2;
    goto LABEL_22;
  }
}

double sub_2081D8B34(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081D8BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_2081D8C24(_BYTE *result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = (_BYTE **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(_QWORD *)a2;
    v10 = v3 - 1;
    if (v3 != 1)
    {
      v11 = *(unsigned int *)(a2 + 28);
      if (v2 == 1)
      {
        v16 = 24 * v11;
        do
        {
          sub_2081D8D50(*v6, v9);
          v9 += v16;
          --v10;
        }
        while (v10);
      }
      else
      {
        v12 = 0;
        v13 = 24 * v11;
        do
        {
          v14 = v9;
          v15 = v7;
          do
          {
            sub_2081D8D50(*v6, v14);
            v14 += 24 * v8;
            --v15;
          }
          while (v15);
          sub_2081D8D50(*v6, v14);
          v9 += v13;
          ++v12;
        }
        while (v12 != v10);
      }
    }
    for (; v7; --v7)
    {
      sub_2081D8D50(*v6, v9);
      v9 += 24 * v8;
    }
    return sub_2081D8D50(*v6, v9);
  }
  return result;
}

_BYTE *sub_2081D8D50(_BYTE *result, uint64_t a2)
{
  uint64_t **v3;
  unint64_t **v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;

  v3 = (uint64_t **)result;
  v4 = (unint64_t **)(result + 8);
  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if (v6 >= 1)
  {
    v8 = &v7[v6];
    v9 = v6;
    result = v7;
    do
    {
      result = memchr(result, 46, v9);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v8)
          break;
        v27 = result - v7;
        v10 = v3;
        if (result - v7 != -1)
        {
          v28 = (_BYTE *)**v3;
          if ((unint64_t)v28 <= v27)
            v28 = (_BYTE *)(result - v7);
          **v3 = (uint64_t)v28;
          v29 = *(unsigned __int8 *)(a2 + 23);
          if ((v29 & 0x80u) != 0)
            v29 = *(_QWORD *)(a2 + 8);
          v6 = v29 + ~v27;
          v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  v10 = v3;
LABEL_13:
  v11 = *v10;
  v12 = *v11;
  if (*v11 <= (unint64_t)v6)
    v12 = v6;
  *v11 = v12;
  v13 = *(char *)(a2 + 47);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 47);
  else
    v14 = *(_QWORD *)(a2 + 32);
  if (v13 >= 0)
    v15 = (_BYTE *)(a2 + 24);
  else
    v15 = *(_BYTE **)(a2 + 24);
  if (v14 >= 1)
  {
    v16 = &v15[v14];
    v17 = v14;
    result = v15;
    do
    {
      result = memchr(result, 46, v17);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v16)
          break;
        v30 = result - v15;
        v18 = v3;
        if (result - v15 != -1)
        {
          v31 = (_BYTE *)**v3;
          if ((unint64_t)v31 <= v30)
            v31 = (_BYTE *)(result - v15);
          **v3 = (uint64_t)v31;
          v32 = *(unsigned __int8 *)(a2 + 47);
          if ((v32 & 0x80u) != 0)
            v32 = *(_QWORD *)(a2 + 32);
          v14 = v32 + ~v30;
          v18 = (uint64_t **)v4;
        }
        goto LABEL_27;
      }
      ++result;
      v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  v18 = v3;
LABEL_27:
  v19 = *v18;
  v20 = *v19;
  if (*v19 <= (unint64_t)v14)
    v20 = v14;
  *v19 = v20;
  v21 = *(char *)(a2 + 71);
  if (v21 >= 0)
    v22 = *(unsigned __int8 *)(a2 + 71);
  else
    v22 = *(_QWORD *)(a2 + 56);
  if (v21 >= 0)
    v23 = (_BYTE *)(a2 + 48);
  else
    v23 = *(_BYTE **)(a2 + 48);
  if (v22 >= 1)
  {
    v24 = &v23[v22];
    v25 = v22;
    result = v23;
    do
    {
      result = memchr(result, 46, v25);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v24)
          break;
        v33 = result - v23;
        if (result - v23 == -1)
          break;
        v34 = (_BYTE *)**v3;
        if ((unint64_t)v34 <= v33)
          v34 = (_BYTE *)(result - v23);
        **v3 = (uint64_t)v34;
        v35 = *(unsigned __int8 *)(a2 + 71);
        if ((v35 & 0x80u) != 0)
          v35 = *(_QWORD *)(a2 + 56);
        v22 = v35 + ~v33;
        goto LABEL_41;
      }
      ++result;
      v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  v4 = (unint64_t **)v3;
LABEL_41:
  v26 = **v4;
  if (v26 <= v22)
    v26 = v22;
  **v4 = v26;
  return result;
}

uint64_t sub_2081D8FC0(uint64_t result, uint64_t *a2, _QWORD **a3, _BYTE *a4)
{
  unsigned int v4;
  _BYTE **v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE **v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE **v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE **v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE **v28;
  _BYTE *v29;
  unsigned int v30;
  _BYTE *v31;
  unsigned int v32;
  _BYTE **v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int v38;
  _BYTE **v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v44;
  _BYTE **v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  _BYTE *v49;
  unsigned int v50;

  *a2 = (uint64_t)a4;
  if (*(_DWORD *)(result + 12))
  {
    v4 = 0;
    do
    {
      *a2 = (uint64_t)a4;
      v5 = (_BYTE **)*a3;
      v6 = (_BYTE *)**a3;
      v7 = *v6;
      if (v7 <= *a4)
        LOBYTE(v7) = *a4;
      *v6 = v7;
      v8 = v5[1];
      v9 = *a4;
      if (v9 >= *v8)
        LOBYTE(v9) = *v8;
      *v8 = v9;
      v10 = (_BYTE **)*a3;
      v11 = *a2;
      v12 = (_BYTE *)**a3;
      v13 = *v12;
      if (v13 <= *(unsigned __int8 *)(*a2 + 1))
        LOBYTE(v13) = *(_BYTE *)(*a2 + 1);
      *v12 = v13;
      v14 = v10[1];
      v15 = *(unsigned __int8 *)(v11 + 1);
      if (v15 >= *v14)
        LOBYTE(v15) = *v14;
      *v14 = v15;
      v16 = (_BYTE **)*a3;
      v17 = *a2;
      v18 = (_BYTE *)**a3;
      v19 = *v18;
      if (v19 <= *(unsigned __int8 *)(*a2 + 2))
        LOBYTE(v19) = *(_BYTE *)(*a2 + 2);
      *v18 = v19;
      v20 = v16[1];
      v21 = *(unsigned __int8 *)(v17 + 2);
      if (v21 >= *v20)
        LOBYTE(v21) = *v20;
      *v20 = v21;
      v22 = (_BYTE **)*a3;
      v23 = *a2;
      v24 = (_BYTE *)**a3;
      v25 = *v24;
      if (v25 <= *(unsigned __int8 *)(*a2 + 3))
        LOBYTE(v25) = *(_BYTE *)(*a2 + 3);
      *v24 = v25;
      v26 = v22[1];
      v27 = *(unsigned __int8 *)(v23 + 3);
      if (v27 >= *v26)
        LOBYTE(v27) = *v26;
      *v26 = v27;
      a4 += *(unsigned int *)(result + 16);
      ++v4;
    }
    while (v4 < *(_DWORD *)(result + 12));
  }
  *a2 = (uint64_t)a4;
  v28 = (_BYTE **)*a3;
  v29 = (_BYTE *)**a3;
  v30 = *v29;
  if (v30 <= *a4)
    LOBYTE(v30) = *a4;
  *v29 = v30;
  v31 = v28[1];
  v32 = *a4;
  if (v32 >= *v31)
    LOBYTE(v32) = *v31;
  *v31 = v32;
  v33 = (_BYTE **)*a3;
  v34 = *a2;
  v35 = (_BYTE *)**a3;
  v36 = *v35;
  if (v36 <= *(unsigned __int8 *)(*a2 + 1))
    LOBYTE(v36) = *(_BYTE *)(*a2 + 1);
  *v35 = v36;
  v37 = v33[1];
  v38 = *(unsigned __int8 *)(v34 + 1);
  if (v38 >= *v37)
    LOBYTE(v38) = *v37;
  *v37 = v38;
  v39 = (_BYTE **)*a3;
  v40 = *a2;
  v41 = (_BYTE *)**a3;
  v42 = *v41;
  if (v42 <= *(unsigned __int8 *)(*a2 + 2))
    LOBYTE(v42) = *(_BYTE *)(*a2 + 2);
  *v41 = v42;
  v43 = v39[1];
  v44 = *(unsigned __int8 *)(v40 + 2);
  if (v44 >= *v43)
    LOBYTE(v44) = *v43;
  *v43 = v44;
  v45 = (_BYTE **)*a3;
  v46 = *a2;
  v47 = (_BYTE *)**a3;
  v48 = *v47;
  if (v48 <= *(unsigned __int8 *)(*a2 + 3))
    LOBYTE(v48) = *(_BYTE *)(*a2 + 3);
  *v47 = v48;
  v49 = v45[1];
  v50 = *(unsigned __int8 *)(v46 + 3);
  if (v50 >= *v49)
    LOBYTE(v50) = *v49;
  *v49 = v50;
  return result;
}

void sub_2081D91A8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081D9280(*a3, v4);
      sub_2081D9280(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_2081D9280(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_2081D9280(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081D9280(*a3, v4);
  sub_2081D9280(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_2081D9280(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_2081D9280(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_2081D9280(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081D93D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081D93EC(uint64_t result, _QWORD *a2, _QWORD **a3, unsigned __int16 *a4)
{
  int v4;
  _WORD *v5;
  _WORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  *a2 = a4;
  v4 = *(_DWORD *)(result + 12);
  v6 = (_WORD *)**a3;
  v5 = (_WORD *)(*a3)[1];
  if (v4)
  {
    v7 = 2 * *(unsigned int *)(result + 16);
    do
    {
      *a2 = a4;
      v8 = (unsigned __int16)*v6;
      if (v8 <= *a4)
        LOWORD(v8) = *a4;
      *v6 = v8;
      v9 = *a4;
      if (v9 >= (unsigned __int16)*v5)
        LOWORD(v9) = *v5;
      *v5 = v9;
      v10 = (unsigned __int16)*v6;
      if (v10 <= a4[1])
        LOWORD(v10) = a4[1];
      *v6 = v10;
      v11 = a4[1];
      if (v11 >= (unsigned __int16)*v5)
        LOWORD(v11) = *v5;
      *v5 = v11;
      v12 = (unsigned __int16)*v6;
      if (v12 <= a4[2])
        LOWORD(v12) = a4[2];
      *v6 = v12;
      v13 = a4[2];
      if (v13 >= (unsigned __int16)*v5)
        LOWORD(v13) = *v5;
      *v5 = v13;
      v14 = (unsigned __int16)*v6;
      if (v14 <= a4[3])
        LOWORD(v14) = a4[3];
      *v6 = v14;
      v15 = a4[3];
      if (v15 >= (unsigned __int16)*v5)
        LOWORD(v15) = *v5;
      *v5 = v15;
      a4 = (unsigned __int16 *)((char *)a4 + v7);
      --v4;
    }
    while (v4);
  }
  *a2 = a4;
  v16 = (unsigned __int16)*v6;
  if (v16 <= *a4)
    LOWORD(v16) = *a4;
  *v6 = v16;
  v17 = *a4;
  if (v17 >= (unsigned __int16)*v5)
    LOWORD(v17) = *v5;
  *v5 = v17;
  v18 = (unsigned __int16)*v6;
  if (v18 <= a4[1])
    LOWORD(v18) = a4[1];
  *v6 = v18;
  v19 = a4[1];
  if (v19 >= (unsigned __int16)*v5)
    LOWORD(v19) = *v5;
  *v5 = v19;
  v20 = (unsigned __int16)*v6;
  if (v20 <= a4[2])
    LOWORD(v20) = a4[2];
  *v6 = v20;
  v21 = a4[2];
  if (v21 >= (unsigned __int16)*v5)
    LOWORD(v21) = *v5;
  *v5 = v21;
  v22 = (unsigned __int16)*v6;
  if (v22 <= a4[3])
    LOWORD(v22) = a4[3];
  *v6 = v22;
  v23 = a4[3];
  if (v23 >= (unsigned __int16)*v5)
    LOWORD(v23) = *v5;
  *v5 = v23;
  return result;
}

void sub_2081D9560(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081D9638(*a3, v4);
      sub_2081D9638(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_2081D9638(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_2081D9638(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081D9638(*a3, v4);
  sub_2081D9638(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_2081D9638(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_2081D9638(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_2081D9638(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081D9788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081D97A4(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_2081D98AC(v5, v4);
      sub_2081D98AC(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_2081D98AC(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_2081D98AC(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_2081D98AC(v5, v4);
  sub_2081D98AC(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_2081D98AC(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_2081D98AC(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_2081D98AC(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081D9964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2081D999C(_DWORD *result, unint64_t **a2, uint64_t a3)
{
  int v3;
  int v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = result[5];
  if (!v3)
  {
    v4 = result[3];
    v5 = *a2;
    v7 = **a2;
    if (!v4)
      goto LABEL_78;
    goto LABEL_41;
  }
  v4 = result[3];
  v5 = *a2;
  v6 = result[6];
  v7 = **a2;
  if (v4)
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(a3 + 95);
    v10 = 24 * result[4];
    do
    {
      v11 = v9;
      v12 = v4;
      do
      {
        v13 = *(v11 - 72);
        if ((v13 & 0x80u) != 0)
          v13 = *(_QWORD *)(v11 - 87);
        if (v7 <= v13)
          v7 = v13;
        *v5 = v7;
        v14 = *(v11 - 48);
        if ((v14 & 0x80u) != 0)
          v14 = *(_QWORD *)(v11 - 63);
        if (v7 <= v14)
          v7 = v14;
        *v5 = v7;
        v15 = *(v11 - 24);
        if ((v15 & 0x80u) != 0)
          v15 = *(_QWORD *)(v11 - 39);
        if (v7 <= v15)
          v7 = v15;
        *v5 = v7;
        v16 = *v11;
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v11 - 15);
        if (v7 <= v16)
          v7 = v16;
        *v5 = v7;
        v11 += v10;
        --v12;
      }
      while (v12);
      v17 = *(v11 - 72);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v11 - 87);
      if (v7 <= v17)
        v7 = v17;
      *v5 = v7;
      v18 = *(v11 - 48);
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(v11 - 63);
      if (v7 <= v18)
        v7 = v18;
      *v5 = v7;
      v19 = *(v11 - 24);
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(v11 - 39);
      if (v7 <= v19)
        v7 = v19;
      *v5 = v7;
      v20 = *v11;
      v21 = *(_QWORD *)(v11 - 15);
      if ((v20 & 0x80u) == 0)
        v21 = v20;
      if (v7 <= v21)
        v7 = v21;
      *v5 = v7;
      a3 += 24 * v6;
      ++v8;
      v9 += 24 * v6;
    }
    while (v8 != v3);
LABEL_41:
    v22 = 24 * result[4];
    do
    {
      v23 = *(unsigned __int8 *)(a3 + 23);
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a3 + 8);
      if (v7 <= v23)
        v7 = v23;
      *v5 = v7;
      v24 = *(unsigned __int8 *)(a3 + 47);
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(a3 + 32);
      if (v7 <= v24)
        v7 = v24;
      *v5 = v7;
      v25 = *(unsigned __int8 *)(a3 + 71);
      if ((v25 & 0x80u) != 0)
        v25 = *(_QWORD *)(a3 + 56);
      if (v7 <= v25)
        v7 = v25;
      *v5 = v7;
      v26 = *(unsigned __int8 *)(a3 + 95);
      if ((v26 & 0x80u) != 0)
        v26 = *(_QWORD *)(a3 + 80);
      if (v7 <= v26)
        v7 = v26;
      *v5 = v7;
      a3 += v22;
      --v4;
    }
    while (v4);
    goto LABEL_78;
  }
  v27 = 24 * v6;
  do
  {
    v28 = *(unsigned __int8 *)(a3 + 23);
    if ((v28 & 0x80u) != 0)
      v28 = *(_QWORD *)(a3 + 8);
    if (v7 <= v28)
      v7 = v28;
    *v5 = v7;
    v29 = *(unsigned __int8 *)(a3 + 47);
    if ((v29 & 0x80u) != 0)
      v29 = *(_QWORD *)(a3 + 32);
    if (v7 <= v29)
      v7 = v29;
    *v5 = v7;
    v30 = *(unsigned __int8 *)(a3 + 71);
    if ((v30 & 0x80u) != 0)
      v30 = *(_QWORD *)(a3 + 56);
    if (v7 <= v30)
      v7 = v30;
    *v5 = v7;
    v31 = *(unsigned __int8 *)(a3 + 95);
    if ((v31 & 0x80u) != 0)
      v31 = *(_QWORD *)(a3 + 80);
    if (v7 <= v31)
      v7 = v31;
    *v5 = v7;
    a3 += v27;
    --v3;
  }
  while (v3);
LABEL_78:
  v32 = *(unsigned __int8 *)(a3 + 23);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a3 + 8);
  if (v7 > v32)
    v32 = v7;
  *v5 = v32;
  v33 = *(unsigned __int8 *)(a3 + 47);
  if ((v33 & 0x80u) != 0)
    v33 = *(_QWORD *)(a3 + 32);
  if (v32 <= v33)
    v32 = v33;
  *v5 = v32;
  v34 = *(unsigned __int8 *)(a3 + 71);
  if ((v34 & 0x80u) != 0)
    v34 = *(_QWORD *)(a3 + 56);
  if (v32 <= v34)
    v32 = v34;
  *v5 = v32;
  v35 = *(unsigned __int8 *)(a3 + 95);
  if ((v35 & 0x80u) != 0)
    v35 = *(_QWORD *)(a3 + 80);
  if (v32 <= v35)
    v32 = v35;
  *v5 = v32;
  return result;
}

void sub_2081D9CCC(uint64_t ****a1, __int128 **a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  size_t v25;
  uint64_t ***v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  size_t v36;
  uint64_t ***v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  size_t v47;

  v4 = *a1;
  sub_2080A1748(***a1, *a2, *(unsigned __int8 *)(**a1)[1]);
  v6 = v4[1];
  v5 = v4[2];
  v7 = (uint64_t)v6[4];
  v8 = (unsigned int *)*v6;
  v9 = v6[1];
  v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    v11 = v8[1] + 1;
    *v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
    {
      v12 = v8[2] + 1;
      v8[1] = 0;
      v8[2] = v12;
      if (v12 == *((_DWORD *)v9 + 2))
        goto LABEL_8;
      v13 = 2;
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = strlen(*(const char **)(*v6[2] + 8 * v13));
  sub_207CBAB98(v5, *(_QWORD *)(*v6[2] + 8 * v13), v14);
  sub_207F215D4(v7, v5, (unsigned int *)*v6, v13, *(_DWORD *)v6[3]);
LABEL_8:
  v15 = *a1;
  sub_2080A1748(***a1, (__int128 *)((char *)*a2 + 24), *(unsigned __int8 *)(**a1)[1]);
  v17 = v15[1];
  v16 = v15[2];
  v18 = (uint64_t)v17[4];
  v19 = (unsigned int *)*v17;
  v20 = v17[1];
  v21 = *(_DWORD *)*v17 + 1;
  *(_DWORD *)*v17 = v21;
  if (v21 == *(_DWORD *)v20)
  {
    v22 = v19[1] + 1;
    *v19 = 0;
    v19[1] = v22;
    if (v22 == *((_DWORD *)v20 + 1))
    {
      v23 = v19[2] + 1;
      v19[1] = 0;
      v19[2] = v23;
      if (v23 == *((_DWORD *)v20 + 2))
        goto LABEL_15;
      v24 = 2;
    }
    else
    {
      v24 = 1;
    }
  }
  else
  {
    v24 = 0;
  }
  v25 = strlen(*(const char **)(*v17[2] + 8 * v24));
  sub_207CBAB98(v16, *(_QWORD *)(*v17[2] + 8 * v24), v25);
  sub_207F215D4(v18, v16, (unsigned int *)*v17, v24, *(_DWORD *)v17[3]);
LABEL_15:
  v26 = *a1;
  sub_2080A1748(***a1, *a2 + 3, *(unsigned __int8 *)(**a1)[1]);
  v28 = v26[1];
  v27 = v26[2];
  v29 = (uint64_t)v28[4];
  v30 = (unsigned int *)*v28;
  v31 = v28[1];
  v32 = *(_DWORD *)*v28 + 1;
  *(_DWORD *)*v28 = v32;
  if (v32 == *(_DWORD *)v31)
  {
    v33 = v30[1] + 1;
    *v30 = 0;
    v30[1] = v33;
    if (v33 == *((_DWORD *)v31 + 1))
    {
      v34 = v30[2] + 1;
      v30[1] = 0;
      v30[2] = v34;
      if (v34 == *((_DWORD *)v31 + 2))
        goto LABEL_22;
      v35 = 2;
    }
    else
    {
      v35 = 1;
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = strlen(*(const char **)(*v28[2] + 8 * v35));
  sub_207CBAB98(v27, *(_QWORD *)(*v28[2] + 8 * v35), v36);
  sub_207F215D4(v29, v27, (unsigned int *)*v28, v35, *(_DWORD *)v28[3]);
LABEL_22:
  v37 = *a1;
  sub_2080A1748(**v37, (__int128 *)((char *)*a2 + 72), *(unsigned __int8 *)(*v37)[1]);
  v39 = v37[1];
  v38 = v37[2];
  v40 = (uint64_t)v39[4];
  v41 = (unsigned int *)*v39;
  v42 = v39[1];
  v43 = *(_DWORD *)*v39 + 1;
  *(_DWORD *)*v39 = v43;
  if (v43 != *(_DWORD *)v42)
  {
    v46 = 0;
LABEL_29:
    v47 = strlen(*(const char **)(*v39[2] + 8 * v46));
    sub_207CBAB98(v38, *(_QWORD *)(*v39[2] + 8 * v46), v47);
    sub_207F215D4(v40, v38, (unsigned int *)*v39, v46, *(_DWORD *)v39[3]);
    return;
  }
  v44 = v41[1] + 1;
  *v41 = 0;
  v41[1] = v44;
  if (v44 != *((_DWORD *)v42 + 1))
  {
    v46 = 1;
    goto LABEL_29;
  }
  v45 = v41[2] + 1;
  v41[1] = 0;
  v41[2] = v45;
  if (v45 != *((_DWORD *)v42 + 2))
  {
    v46 = 2;
    goto LABEL_29;
  }
}

double sub_2081DA024(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_2081DA12C(v5, v4);
      sub_2081DA12C(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_2081DA12C(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_2081DA12C(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_2081DA12C(v5, v4);
  sub_2081DA12C(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_2081DA12C(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_2081DA12C(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_2081DA12C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DA1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_2081DA21C(_BYTE *result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BYTE **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v2 = *(_DWORD *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = (_BYTE **)result;
    v7 = v2 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(_QWORD *)a2;
    v10 = v3 - 1;
    if (v3 != 1)
    {
      v11 = *(unsigned int *)(a2 + 28);
      if (v2 == 1)
      {
        v16 = 24 * v11;
        do
        {
          sub_2081DA348(*v6, v9);
          v9 += v16;
          --v10;
        }
        while (v10);
      }
      else
      {
        v12 = 0;
        v13 = 24 * v11;
        do
        {
          v14 = v9;
          v15 = v7;
          do
          {
            sub_2081DA348(*v6, v14);
            v14 += 24 * v8;
            --v15;
          }
          while (v15);
          sub_2081DA348(*v6, v14);
          v9 += v13;
          ++v12;
        }
        while (v12 != v10);
      }
    }
    for (; v7; --v7)
    {
      sub_2081DA348(*v6, v9);
      v9 += 24 * v8;
    }
    return sub_2081DA348(*v6, v9);
  }
  return result;
}

_BYTE *sub_2081DA348(_BYTE *result, uint64_t a2)
{
  uint64_t **v3;
  unint64_t **v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;

  v3 = (uint64_t **)result;
  v4 = (unint64_t **)(result + 8);
  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if (v6 >= 1)
  {
    v8 = &v7[v6];
    v9 = v6;
    result = v7;
    do
    {
      result = memchr(result, 46, v9);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v8)
          break;
        v35 = result - v7;
        v10 = v3;
        if (result - v7 != -1)
        {
          v36 = (_BYTE *)**v3;
          if ((unint64_t)v36 <= v35)
            v36 = (_BYTE *)(result - v7);
          **v3 = (uint64_t)v36;
          v37 = *(unsigned __int8 *)(a2 + 23);
          if ((v37 & 0x80u) != 0)
            v37 = *(_QWORD *)(a2 + 8);
          v6 = v37 + ~v35;
          v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  v10 = v3;
LABEL_13:
  v11 = *v10;
  v12 = *v11;
  if (*v11 <= (unint64_t)v6)
    v12 = v6;
  *v11 = v12;
  v13 = *(char *)(a2 + 47);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 47);
  else
    v14 = *(_QWORD *)(a2 + 32);
  if (v13 >= 0)
    v15 = (_BYTE *)(a2 + 24);
  else
    v15 = *(_BYTE **)(a2 + 24);
  if (v14 >= 1)
  {
    v16 = &v15[v14];
    v17 = v14;
    result = v15;
    do
    {
      result = memchr(result, 46, v17);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v16)
          break;
        v38 = result - v15;
        v18 = v3;
        if (result - v15 != -1)
        {
          v39 = (_BYTE *)**v3;
          if ((unint64_t)v39 <= v38)
            v39 = (_BYTE *)(result - v15);
          **v3 = (uint64_t)v39;
          v40 = *(unsigned __int8 *)(a2 + 47);
          if ((v40 & 0x80u) != 0)
            v40 = *(_QWORD *)(a2 + 32);
          v14 = v40 + ~v38;
          v18 = (uint64_t **)v4;
        }
        goto LABEL_27;
      }
      ++result;
      v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  v18 = v3;
LABEL_27:
  v19 = *v18;
  v20 = *v19;
  if (*v19 <= (unint64_t)v14)
    v20 = v14;
  *v19 = v20;
  v21 = *(char *)(a2 + 71);
  if (v21 >= 0)
    v22 = *(unsigned __int8 *)(a2 + 71);
  else
    v22 = *(_QWORD *)(a2 + 56);
  if (v21 >= 0)
    v23 = (_BYTE *)(a2 + 48);
  else
    v23 = *(_BYTE **)(a2 + 48);
  if (v22 >= 1)
  {
    v24 = &v23[v22];
    v25 = v22;
    result = v23;
    do
    {
      result = memchr(result, 46, v25);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v24)
          break;
        v41 = result - v23;
        v26 = v3;
        if (result - v23 != -1)
        {
          v42 = (_BYTE *)**v3;
          if ((unint64_t)v42 <= v41)
            v42 = (_BYTE *)(result - v23);
          **v3 = (uint64_t)v42;
          v43 = *(unsigned __int8 *)(a2 + 71);
          if ((v43 & 0x80u) != 0)
            v43 = *(_QWORD *)(a2 + 56);
          v22 = v43 + ~v41;
          v26 = (uint64_t **)v4;
        }
        goto LABEL_41;
      }
      ++result;
      v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  v26 = v3;
LABEL_41:
  v27 = *v26;
  v28 = *v27;
  if (*v27 <= (unint64_t)v22)
    v28 = v22;
  *v27 = v28;
  v29 = *(char *)(a2 + 95);
  if (v29 >= 0)
    v30 = *(unsigned __int8 *)(a2 + 95);
  else
    v30 = *(_QWORD *)(a2 + 80);
  if (v29 >= 0)
    v31 = (_BYTE *)(a2 + 72);
  else
    v31 = *(_BYTE **)(a2 + 72);
  if (v30 >= 1)
  {
    v32 = &v31[v30];
    v33 = v30;
    result = v31;
    do
    {
      result = memchr(result, 46, v33);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v32)
          break;
        v44 = result - v31;
        if (result - v31 == -1)
          break;
        v45 = (_BYTE *)**v3;
        if ((unint64_t)v45 <= v44)
          v45 = (_BYTE *)(result - v31);
        **v3 = (uint64_t)v45;
        v46 = *(unsigned __int8 *)(a2 + 95);
        if ((v46 & 0x80u) != 0)
          v46 = *(_QWORD *)(a2 + 80);
        v30 = v46 + ~v44;
        goto LABEL_55;
      }
      ++result;
      v33 = v32 - result;
    }
    while (v32 - result >= 1);
  }
  v4 = (unint64_t **)v3;
LABEL_55:
  v34 = **v4;
  if (v34 <= v30)
    v34 = v30;
  **v4 = v34;
  return result;
}

_QWORD *sub_2081DA67C(uint64_t a1, uint64_t a2, uint64_t *a3, void **a4)
{
  void **v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081D81B8(*a3, v4);
      sub_2081D81B8(*a3, (void **)(*(_QWORD *)a2 + 24));
      sub_2081D81B8(*a3, (void **)(*(_QWORD *)a2 + 48));
      sub_2081D81B8(*a3, (void **)(*(_QWORD *)a2 + 72));
      v4 += 3 * *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081D81B8(*a3, v4);
  sub_2081D81B8(*a3, (void **)(*(_QWORD *)a2 + 24));
  sub_2081D81B8(*a3, (void **)(*(_QWORD *)a2 + 48));
  return sub_2081D81B8(*a3, (void **)(*(_QWORD *)a2 + 72));
}

void sub_2081DA758(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DA8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081DA8C4(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DAA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081DAA30(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DAAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_2081DAB20(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DABD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_2081DAC10(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DAD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081DAD7C(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DAE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_2081DAE6C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DAF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_2081DAF5C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DB034(*a3, v4);
      sub_2081DB034(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_2081DB034(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_2081DB034(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DB034(*a3, v4);
  sub_2081DB034(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_2081DB034(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_2081DB034(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_2081DB034(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DB184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081DB1A0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DB278(*a3, v4);
      sub_2081DB278(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_2081DB278(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_2081DB278(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DB278(*a3, v4);
  sub_2081DB278(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_2081DB278(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_2081DB278(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_2081DB278(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DB3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081DB3E4(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_2081DB4EC(v5, v4);
      sub_2081DB4EC(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_2081DB4EC(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_2081DB4EC(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_2081DB4EC(v5, v4);
  sub_2081DB4EC(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_2081DB4EC(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_2081DB4EC(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_2081DB4EC(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DB5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_2081DB5DC(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_2081DB6E4(v5, v4);
      sub_2081DB6E4(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_2081DB6E4(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_2081DB6E4(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_2081DB6E4(v5, v4);
  sub_2081DB6E4(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_2081DB6E4(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_2081DB6E4(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_2081DB6E4(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DB79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_2081DB7D4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DB8AC(*a3, v4);
      sub_2081DB8AC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_2081DB8AC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_2081DB8AC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DB8AC(*a3, v4);
  sub_2081DB8AC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_2081DB8AC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_2081DB8AC(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_2081DB8AC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DB9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081DBA18(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DBAF0(*a3, v4);
      sub_2081DBAF0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_2081DBAF0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_2081DBAF0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DBAF0(*a3, v4);
  sub_2081DBAF0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_2081DBAF0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_2081DBAF0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_2081DBAF0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DBC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081DBC5C(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_2081DBD64(v5, v4);
      sub_2081DBD64(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_2081DBD64(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_2081DBD64(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_2081DBD64(v5, v4);
  sub_2081DBD64(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_2081DBD64(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_2081DBD64(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_2081DBD64(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DBE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_2081DBE54(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_2081DBF5C(v5, v4);
      sub_2081DBF5C(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_2081DBF5C(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_2081DBF5C(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_2081DBF5C(v5, v4);
  sub_2081DBF5C(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_2081DBF5C(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_2081DBF5C(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_2081DBF5C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DC014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_2081DC04C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DC124(*a3, v4);
      sub_2081DC124(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_2081DC124(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_2081DC124(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DC124(*a3, v4);
  sub_2081DC124(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_2081DC124(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_2081DC124(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_2081DC124(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DC274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081DC290(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DC368(*a3, v4);
      sub_2081DC368(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_2081DC368(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_2081DC368(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DC368(*a3, v4);
  sub_2081DC368(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_2081DC368(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_2081DC368(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_2081DC368(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DC4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081DC4D4(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_2081DC5DC(v5, v4);
      sub_2081DC5DC(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_2081DC5DC(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_2081DC5DC(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_2081DC5DC(v5, v4);
  sub_2081DC5DC(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_2081DC5DC(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_2081DC5DC(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_2081DC5DC(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DC694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_2081DC6CC(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_2081DC7D4(v5, v4);
      sub_2081DC7D4(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_2081DC7D4(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_2081DC7D4(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_2081DC7D4(v5, v4);
  sub_2081DC7D4(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_2081DC7D4(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_2081DC7D4(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_2081DC7D4(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DC88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

void sub_2081DC8C4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DC99C(*a3, v4);
      sub_2081DC99C(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
      sub_2081DC99C(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
      sub_2081DC99C(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DC99C(*a3, v4);
  sub_2081DC99C(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 1));
  sub_2081DC99C(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 2));
  sub_2081DC99C(*a3, (unsigned __int8 *)(*(_QWORD *)a2 + 3));
}

void sub_2081DC99C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207F1FE34(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DCAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081DCB08(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned int v8;

  v4 = a4;
  *(_QWORD *)a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    v8 = 0;
    do
    {
      *(_QWORD *)a2 = v4;
      sub_2081DCBE0(*a3, v4);
      sub_2081DCBE0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
      sub_2081DCBE0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
      sub_2081DCBE0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
      v4 += *(unsigned int *)(a1 + 16);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
  *(_QWORD *)a2 = v4;
  sub_2081DCBE0(*a3, v4);
  sub_2081DCBE0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 2));
  sub_2081DCBE0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 4));
  sub_2081DCBE0(*a3, (unsigned __int16 *)(*(_QWORD *)a2 + 6));
}

void sub_2081DCBE0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *__p[2];
  unsigned __int8 v19;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_207DD5C1C(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      v15 = v11[2] + 1;
      v11[1] = 0;
      v11[2] = v15;
      if (v15 == v12[2])
        return;
      v16 = 2;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v16));
  sub_207CBAB98(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v16), v17);
  sub_207F215D4(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_2081DCD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081DCD4C(_DWORD *a1, __int16 **a2, __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  __int16 *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (__int16 *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (__int16 *)v4;
      sub_2081DCE54(v5, v4);
      sub_2081DCE54(*a2 + 1, (uint64_t)(a2[2] + 12));
      sub_2081DCE54(*a2 + 2, (uint64_t)(a2[2] + 24));
      sub_2081DCE54(*a2 + 3, (uint64_t)(a2[2] + 36));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (__int16 *)v4;
  sub_2081DCE54(v5, v4);
  sub_2081DCE54(*a2 + 1, (uint64_t)(a2[2] + 12));
  sub_2081DCE54(*a2 + 2, (uint64_t)(a2[2] + 24));
  return sub_2081DCE54(*a2 + 3, (uint64_t)(a2[2] + 36));
}

double sub_2081DCE54(__int16 *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_2080A1380((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DCF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

double sub_2081DCF44(_DWORD *a1, float **a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  float *v5;
  unsigned int v8;

  v4 = a4;
  v5 = a3;
  *a2 = a3;
  a2[2] = (float *)a4;
  if (a1[5])
  {
    v8 = 0;
    do
    {
      *a2 = v5;
      a2[2] = (float *)v4;
      sub_2081DD04C(v5, v4);
      sub_2081DD04C(*a2 + 1, (uint64_t)(a2[2] + 6));
      sub_2081DD04C(*a2 + 2, (uint64_t)(a2[2] + 12));
      sub_2081DD04C(*a2 + 3, (uint64_t)(a2[2] + 18));
      v5 += a1[6];
      v4 += 24 * a1[7];
      ++v8;
    }
    while (v8 < a1[5]);
  }
  *a2 = v5;
  a2[2] = (float *)v4;
  sub_2081DD04C(v5, v4);
  sub_2081DD04C(*a2 + 1, (uint64_t)(a2[2] + 6));
  sub_2081DD04C(*a2 + 2, (uint64_t)(a2[2] + 12));
  return sub_2081DD04C(*a2 + 3, (uint64_t)(a2[2] + 18));
}

double sub_2081DD04C(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_207E36388((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_207CA9F48();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C08D728[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C08D6F8[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_2081DD104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C08D6F8[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081DD13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  int __dst;

  memcpy(&v12, (const void *)(a3 + 4 * a2 - 8), sizeof(v12));
  *(_QWORD *)a1 = v12;
  memcpy(&__dst, (const void *)(a5 + 4 * a4 - 4), sizeof(__dst));
  *(_DWORD *)(a1 + 8) = __dst * a6;
  if (a2 != a4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/src/Size.cpp", 37, (uint64_t)"shape.size() == value_stride.size()", 35, (uint64_t)&unk_208229935, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return a1;
}

_QWORD *sub_2081DD200(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08D790;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08D750;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2081E2F24(a1[1]);
  }
  return a1;
}

void sub_2081DD2C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081DD30C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08D790;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08D750;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2081E2F24(a1[1]);
  }
  return a1;
}

void sub_2081DD3D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081DD418(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_2081E30F8(a1[1]);
  }
LABEL_9:
  *a1 = &off_24C08D790;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2081DD504(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_2081DD418(a1);
  operator delete(v1);
}

uint64_t sub_2081DD518(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 249, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  v13 = v10;
  v11 = atomic_load((unint64_t *)(v10 + 104));
  if (v11 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v14, (void (__cdecl *)(void *))sub_2081DFC20);
  }
  return *(_QWORD *)(*(_QWORD *)(v10 + 112) + 8 * a2);
}

_QWORD *sub_2081DD61C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08D790;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08D770;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2081E3010(a1[1]);
  }
  return a1;
}

void sub_2081DD6E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081DD728(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(uint64_t **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = &off_24C08D790;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = (uint64_t *)a1[1];
  }
  *a1 = off_24C08D770;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return a1;
        goto LABEL_12;
      }
    }
    if (v8)
LABEL_12:
      sub_2081E3010(a1[1]);
  }
  return a1;
}

void sub_2081DD7EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *v1 = v2;
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081DD834(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (uint64_t *)a1[1];
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    if (v4)
LABEL_8:
      sub_2081E31E4(a1[1]);
  }
LABEL_9:
  *a1 = &off_24C08D790;
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2081DD920(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_2081DD834(a1);
  operator delete(v1);
}

__IOSurface *sub_2081DD934@<X0>(IOSurfaceRef *a1@<X0>, _QWORD *a2@<X8>)
{
  __IOSurface *result;
  size_t PlaneCount;
  unint64_t v6;
  char *v7;
  size_t v8;

  result = *a1;
  if (result)
  {
    PlaneCount = IOSurfaceGetPlaneCount(result);
    if (PlaneCount <= 1)
      v6 = 1;
    else
      v6 = PlaneCount;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    if (v6 >> 61)
      sub_207CA420C();
    v7 = (char *)operator new(8 * v6);
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    bzero(v7, 8 * v6);
    v8 = 0;
    a2[1] = &v7[8 * v6];
    do
    {
      result = (__IOSurface *)IOSurfaceGetBaseAddressOfPlane(*a1, v8);
      *(_QWORD *)&v7[8 * v8++] = result;
    }
    while (v6 != v8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_2081DD9FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081DDA24(_QWORD *a1, std::__shared_weak_count_vtbl *cf, int a3, int a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;

  if (a3 && cf)
    CFRetain(cf);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A778;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = cf;
  v28 = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v28)
  {
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *a1 = &off_24C08D790;
  v14 = (char *)operator new(0xA0uLL);
  v15 = v14;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C08D7F8;
  v16 = v14 + 24;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v14 + 3) = cf;
    *((_QWORD *)v14 + 4) = v28;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
  }
  else
  {
    *((_QWORD *)v14 + 3) = cf;
    *((_QWORD *)v14 + 4) = 0;
  }
  *((_DWORD *)v14 + 10) = a4;
  *((_DWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 6) = a4 == 1;
  *((_QWORD *)v14 + 7) = a4 == 2;
  *((_QWORD *)v14 + 8) = 850045863;
  v20 = 0uLL;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *((_QWORD *)v14 + 15) = 0;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      v20 = 0uLL;
    }
  }
  *((_OWORD *)v15 + 8) = v20;
  *((_OWORD *)v15 + 9) = v20;
  a1[1] = v16;
  a1[2] = v15;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return a1;
}

void sub_2081DDC4C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_2081DDC60()
{
  __break(1u);
}

void sub_2081DDC8C()
{
  __cxa_end_catch();
  JUMPOUT(0x2081DDC94);
}

void sub_2081DDCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_207C99D78((uint64_t)&a11);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2081DDCBC(unsigned int *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (****v22)();
  int v23;
  size_t v24;
  __int128 *p_dst;
  const void **v26;
  uint64_t (***v27)();
  uint64_t (***v28)();
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (****v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t (***v35)();
  int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  uint64_t (**v55)();
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  char v65;
  char v66;
  __int128 properties;
  __int128 __p;
  uint64_t v69;
  unsigned __int8 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  char v79;
  char v80;
  _DWORD v81[6];
  int v82;
  __int128 __dst;
  unint64_t v84;
  uint64_t (***v85)();
  const char *v86;
  _DWORD *v87;
  const char *v88;
  const char *v89;
  uint64_t (****v90)();

  v78 = a2;
  if (a1[1] * *a1)
  {
    sub_2081E01A0(a1, a2, a3, 0, 0, (uint64_t)&properties);
    v57 = properties;
    sub_207D0178C((std::__shared_weak_count_vtbl **)&properties, (uint64_t)&v57);
    v6 = (std::__shared_weak_count_vtbl *)IOSurfaceCreate((CFDictionaryRef)properties);
    sub_2081DDA24(&v55, v6, 0, 0);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&properties + 1);
    if (!*((_QWORD *)&properties + 1))
      goto LABEL_6;
    v8 = (unint64_t *)(*((_QWORD *)&properties + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v10 = (uint64_t *)v56;
      if (!(_QWORD)v56)
        goto LABEL_45;
    }
    else
    {
LABEL_6:
      v10 = (uint64_t *)v56;
      if (!(_QWORD)v56)
        goto LABEL_45;
    }
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (!v11)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if (v12)
      {
LABEL_13:
        *(_QWORD *)a4 = &off_24C08D790;
        *(_OWORD *)(a4 + 8) = v56;
        *(_BYTE *)(a4 + 120) = 1;
LABEL_106:
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        return;
      }
    }
LABEL_45:
    v82 = 0;
    sub_2080F2350(v81, "Failed to create IOSurface for format ");
    sub_207DDDF2C((uint64_t)&v80, (uint64_t)v81, &v78);
    v85 = (uint64_t (***)())v81;
    v86 = " and size ";
    v87 = v81;
    v88 = " and size ";
    v89 = " and size ";
    if (v82 == -1)
      sub_207CA9F48();
    *(_QWORD *)&__dst = &v85;
    ((void (*)(__int128 *, _DWORD *))off_24C08D898[v82])(&__dst, v81);
    sub_20815EEDC((uint64_t)&v79, (uint64_t)v81, a1);
    v85 = (uint64_t (***)())v81;
    v86 = ", used properties:\n";
    v87 = v81;
    v88 = ", used properties:\n";
    v89 = ", used properties:\n";
    if (v82 == -1)
      sub_207CA9F48();
    *(_QWORD *)&__dst = &v85;
    ((void (*)(__int128 *, _DWORD *))off_24C08D8B0[v82])(&__dst, v81);
    v18 = operator new(0x118uLL);
    v18[34] = 0;
    *((_OWORD *)v18 + 15) = 0u;
    *((_OWORD *)v18 + 16) = 0u;
    *((_OWORD *)v18 + 13) = 0u;
    *((_OWORD *)v18 + 14) = 0u;
    *((_OWORD *)v18 + 11) = 0u;
    *((_OWORD *)v18 + 12) = 0u;
    *((_OWORD *)v18 + 9) = 0u;
    *((_OWORD *)v18 + 10) = 0u;
    *((_OWORD *)v18 + 7) = 0u;
    *((_OWORD *)v18 + 8) = 0u;
    *((_OWORD *)v18 + 5) = 0u;
    *((_OWORD *)v18 + 6) = 0u;
    *((_OWORD *)v18 + 3) = 0u;
    *((_OWORD *)v18 + 4) = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    *((_OWORD *)v18 + 2) = 0u;
    *(_OWORD *)v18 = 0u;
    sub_207CA2878((uint64_t)v18);
    v90 = (uint64_t (****)())v18;
    sub_207D0178C((std::__shared_weak_count_vtbl **)&v85, (uint64_t)&v57);
    sub_207D02290(v18 + 2, v85);
    v19 = (std::__shared_weak_count *)v86;
    if (!v86)
      goto LABEL_51;
    v20 = (unint64_t *)(v86 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = v90;
      v23 = *((_DWORD *)v90 + 30);
      if ((v23 & 0x10) == 0)
        goto LABEL_52;
    }
    else
    {
LABEL_51:
      v22 = v90;
      v23 = *((_DWORD *)v90 + 30);
      if ((v23 & 0x10) == 0)
      {
LABEL_52:
        if ((v23 & 8) == 0)
        {
          v24 = 0;
          HIBYTE(v84) = 0;
          p_dst = &__dst;
          goto LABEL_67;
        }
        v26 = (const void **)(v22 + 5);
        v27 = v22[7];
LABEL_59:
        v29 = *v26;
        v24 = (char *)v27 - (_BYTE *)*v26;
        if (v24 >= 0x7FFFFFFFFFFFFFF8)
          sub_207C95C50();
        if (v24 >= 0x17)
        {
          v30 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17)
            v30 = v24 | 7;
          v31 = v30 + 1;
          p_dst = (__int128 *)operator new(v30 + 1);
          *((_QWORD *)&__dst + 1) = v24;
          v84 = v31 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v84) = (_BYTE)v27 - *(_BYTE *)v26;
          p_dst = &__dst;
          if (!v24)
          {
LABEL_67:
            *((_BYTE *)p_dst + v24) = 0;
            v32 = v90;
            if (v90)
            {
              v33 = MEMORY[0x24BEDB7F0];
              v34 = *MEMORY[0x24BEDB7F0];
              *v90 = (uint64_t (***)())*MEMORY[0x24BEDB7F0];
              v35 = *(uint64_t (****)())(v33 + 72);
              *(uint64_t (****)())((char *)v32 + *(_QWORD *)(v34 - 24)) = *(uint64_t (****)())(v33 + 64);
              v32[3] = (uint64_t (***)())(MEMORY[0x24BEDB848] + 16);
              v32[2] = v35;
              if (*((char *)v32 + 111) < 0)
                operator delete(v32[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x20BD027B8](v32 + 16);
              operator delete(v32);
            }
            v85 = (uint64_t (***)())v81;
            v86 = (const char *)&__dst;
            v87 = v81;
            v88 = (const char *)&__dst;
            v89 = (const char *)&__dst;
            if (v82 == -1)
              sub_207CA9F48();
            v90 = &v85;
            ((void (*)(uint64_t (*****)(), _DWORD *))off_24C08D838[v82])(&v90, v81);
            if (SHIBYTE(v84) < 0)
              operator delete((void *)__dst);
            if (v82 == -1)
              sub_207CA9F48();
            v85 = (uint64_t (***)())&__dst;
            ((void (*)(void **__return_ptr, uint64_t (****)(), _DWORD *))off_24C08D868[v82])(v44, &v85, v81);
            if (v82 != -1)
              ((void (*)(uint64_t (****)(), _DWORD *))off_24C08D850[v82])(&v85, v81);
            if (SHIBYTE(v45) < 0)
            {
              sub_207CA40D8(v46, v44[0], (unint64_t)v44[1]);
            }
            else
            {
              *(_OWORD *)v46 = *(_OWORD *)v44;
              v47 = v45;
            }
            v48 = 1;
            LOBYTE(v49) = 0;
            v53 = 0;
            v54 = 1;
            sub_207CCAFD0(0x22u, (__int128 *)v46, (uint64_t)&properties);
            *(_OWORD *)a4 = properties;
            *(_BYTE *)(a4 + 16) = 0;
            *(_BYTE *)(a4 + 112) = 0;
            if (v77)
            {
              *(_BYTE *)(a4 + 40) = 0;
              v36 = v70;
              if (v70)
              {
                *(_OWORD *)(a4 + 16) = __p;
                *(_QWORD *)(a4 + 32) = v69;
                v69 = 0;
                __p = 0uLL;
                *(_BYTE *)(a4 + 40) = 1;
              }
              *(_BYTE *)(a4 + 48) = 0;
              *(_BYTE *)(a4 + 104) = 0;
              if (v76)
              {
                v37 = v73;
                *(_QWORD *)(a4 + 64) = v72;
                *(_OWORD *)(a4 + 48) = v71;
                v71 = 0uLL;
                *(_QWORD *)(a4 + 72) = v37;
                *(_OWORD *)(a4 + 80) = v74;
                *(_QWORD *)(a4 + 96) = v75;
                v72 = 0;
                v74 = 0uLL;
                v75 = 0;
                *(_BYTE *)(a4 + 104) = 1;
              }
              *(_BYTE *)(a4 + 112) = 1;
              *(_BYTE *)(a4 + 120) = 0;
              if (v36 && SHIBYTE(v69) < 0)
                operator delete((void *)__p);
              if (!v54)
                goto LABEL_99;
            }
            else
            {
              *(_BYTE *)(a4 + 120) = 0;
              if (!v54)
              {
LABEL_99:
                if (SHIBYTE(v45) < 0)
                  operator delete(v44[0]);
                v38 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
                v55 = &off_24C08D790;
                if (*((_QWORD *)&v56 + 1))
                {
                  v39 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                goto LABEL_106;
              }
            }
            if (v53)
            {
              if (v52 < 0)
                operator delete(v51);
              if (v50 < 0)
                operator delete(v49);
            }
            if (v48 && SHIBYTE(v47) < 0)
              operator delete(v46[0]);
            goto LABEL_99;
          }
        }
        memmove(p_dst, v29, v24);
        goto LABEL_67;
      }
    }
    v27 = v22[14];
    v28 = v22[9];
    if (v27 < v28)
    {
      v22[14] = v28;
      v27 = v28;
    }
    v26 = (const void **)(v22 + 8);
    goto LABEL_59;
  }
  v82 = 0;
  sub_20805A49C(v81, "given IOSurface size ");
  sub_20815EEDC((uint64_t)v44, (uint64_t)v81, a1);
  v85 = (uint64_t (***)())v81;
  v86 = " is invalid, must be non-zero";
  v87 = v81;
  v88 = " is invalid, must be non-zero";
  v89 = " is invalid, must be non-zero";
  if (v82 == -1)
    sub_207CA9F48();
  v55 = (uint64_t (**)())&v85;
  ((void (*)(uint64_t (***)(), _DWORD *))off_24C08D880[v82])(&v55, v81);
  if (v82 == -1)
    sub_207CA9F48();
  v85 = &v55;
  ((void (*)(__int128 *__return_ptr, uint64_t (****)(), _DWORD *))off_24C08D868[v82])(&__dst, &v85, v81);
  if (v82 != -1)
    ((void (*)(uint64_t (****)(), _DWORD *))off_24C08D850[v82])(&v85, v81);
  if (SHIBYTE(v84) < 0)
  {
    sub_207CA40D8(&v58, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v58 = __dst;
    v59 = v84;
  }
  v60 = 1;
  LOBYTE(v61) = 0;
  v65 = 0;
  v66 = 1;
  sub_207CCAFD0(0x16u, &v58, (uint64_t)&properties);
  *(_OWORD *)a4 = properties;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v77)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v16 = v70;
    if (v70)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v69;
      v69 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v76)
    {
      v17 = v73;
      *(_QWORD *)(a4 + 64) = v72;
      *(_OWORD *)(a4 + 48) = v71;
      v71 = 0uLL;
      *(_QWORD *)(a4 + 72) = v17;
      *(_OWORD *)(a4 + 80) = v74;
      *(_QWORD *)(a4 + 96) = v75;
      v72 = 0;
      v74 = 0uLL;
      v75 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v16 && SHIBYTE(v69) < 0)
      operator delete((void *)__p);
    if (!v66)
      goto LABEL_42;
    goto LABEL_34;
  }
  *(_BYTE *)(a4 + 120) = 0;
  if (v66)
  {
LABEL_34:
    if (v65)
    {
      if (v64 < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
    }
    if (v60 && SHIBYTE(v59) < 0)
      operator delete((void *)v58);
  }
LABEL_42:
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__dst);
}

void sub_2081DE590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 113) < 0)
  {
    operator delete(*(void **)(v34 - 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2081DE6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_207C99D78((uint64_t)&a45);
  JUMPOUT(0x2081DE6B8);
}

uint64_t sub_2081DE6D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_2081DE77C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C08D790;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081DE7F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C08D790;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

size_t sub_2081DE864(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 131, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetPlaneCount(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetPlaneCount(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetPlaneCount(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetPlaneCount(v9);
}

size_t sub_2081DE99C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 147, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetWidth(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetWidth(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetWidth(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetWidth(v9);
}

size_t sub_2081DEAD4(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 152, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetWidthOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetWidthOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetWidthOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetWidthOfPlane(v11, planeIndex);
}

size_t sub_2081DEC1C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 157, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetHeight(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetHeight(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetHeight(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetHeight(v9);
}

size_t sub_2081DED54(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 162, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetHeightOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetHeightOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetHeightOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetHeightOfPlane(v11, planeIndex);
}

size_t sub_2081DEE9C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 192, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetBytesPerElement(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerElement(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetBytesPerElement(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetBytesPerElement(v9);
}

size_t sub_2081DEFD4(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 197, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerElementOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetBytesPerElementOfPlane(v11, planeIndex);
}

size_t sub_2081DF11C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 202, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetBytesPerRow(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerRow(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetBytesPerRow(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetBytesPerRow(v9);
}

size_t sub_2081DF254(uint64_t a1, size_t planeIndex)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 207, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return IOSurfaceGetBytesPerRowOfPlane(0, planeIndex);
  v11 = *(__IOSurface **)v10;
  v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (!v12)
    return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
    return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return IOSurfaceGetBytesPerRowOfPlane(v11, planeIndex);
}

uint64_t sub_2081DF39C(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __IOSurface *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    v4 = *v2;
    v3 = (std::__shared_weak_count *)v2[1];
    if (!v3)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v4)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 212, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return IOSurfaceGetPixelFormat(0);
  v9 = *(__IOSurface **)v8;
  v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (!v10)
    return IOSurfaceGetPixelFormat(v9);
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (v13)
    return IOSurfaceGetPixelFormat(v9);
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return IOSurfaceGetPixelFormat(v9);
}

uint64_t sub_2081DF4D4(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 243, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 8);
  v13 = v10;
  v11 = atomic_load((unint64_t *)(v10 + 104));
  if (v11 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v14, (void (__cdecl *)(void *))sub_2081DFC20);
  }
  return *(_QWORD *)(*(_QWORD *)(v10 + 112) + 8 * a2);
}

void sub_2081DF5D8(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v22;
  char v23;
  const void *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count_vtbl *ChildSurface;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  const char *v50;
  unsigned int v51;
  __int128 v52;
  char **OffsetOfPlane;
  char *v54[2];
  __int128 v55;

  v6 = *(uint64_t **)(a1 + 8);
  if (v6)
  {
    v8 = *v6;
    v7 = (std::__shared_weak_count *)v6[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_8:
        if (sub_2081DE864(a1) > a2)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_7:
      if (v8)
        goto LABEL_8;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 299, (uint64_t)"IsValid() && plane_index < NumPlanes()", 38, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_12:
  v54[0] = 0;
  v54[1] = 0;
  OffsetOfPlane = v54;
  sub_207D006CC(&OffsetOfPlane, (std::__shared_weak_count_vtbl **)&v55);
  v52 = v55;
  sub_207CFF9E4((uint64_t)&OffsetOfPlane, v54[0]);
  v12 = *(uint64_t **)(a1 + 8);
  if (v12)
  {
    v14 = *v12;
    v13 = (std::__shared_weak_count *)v12[1];
    if (!v13)
      goto LABEL_18;
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v14)
        goto LABEL_20;
    }
    else
    {
LABEL_18:
      if (v14)
        goto LABEL_20;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 218, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_70;
  }
LABEL_20:
  v18 = sub_2081DF39C(a1);
  v19 = sub_2080F29D8(v18);
  if (v19 <= a2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp", 223, (uint64_t)"plane_index < num_planes", 24, (uint64_t)"Plane index can't be more than total number of planes", 53, (void (*)(void **))sub_208216974))
  {
    goto LABEL_70;
  }
  if (v19 != 1)
  {
    if (v19 != 2)
    {
LABEL_68:
      v49 = 234;
      v50 = "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/src/IOSurfaceRef.cpp";
LABEL_69:
      sub_208216178(v50, v49, (uint64_t)"", 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_208216974);
      goto LABEL_70;
    }
    if (sub_2080F29D8(v18) != 1)
    {
      v22 = (v18 & 0xFFFFFFEF) == 0x34323066 || (v18 & 0xFFFFFFEF) == 875836518;
      if (a2 || !v22)
      {
        v23 = !v22;
        if (a2 != 1)
          v23 = 1;
        if ((v23 & 1) != 0)
        {
          v49 = 443;
          v50 = "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h";
          goto LABEL_69;
        }
        v20 = 2;
      }
      else
      {
        v20 = 1;
      }
      goto LABEL_43;
    }
    if (!a2
      || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 429, (uint64_t)"index == 0", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      v20 = sub_20815D4C8(v18);
LABEL_43:
      if (!sub_20815E7F8(v18))
      {
        if (v20 == 1)
        {
          v18 = 1278226488;
          goto LABEL_48;
        }
        if (v20 == 2)
        {
          v18 = 843264056;
          goto LABEL_48;
        }
      }
      goto LABEL_68;
    }
LABEL_70:
    abort();
  }
LABEL_48:
  v24 = (const void *)*MEMORY[0x24BDD8EF8];
  LODWORD(OffsetOfPlane) = v18;
  sub_208159CF4((uint64_t)&v52, v24, (unsigned int *)&OffsetOfPlane);
  v25 = a2;
  v26 = sub_2081DEAD4(a1, a2);
  v27 = (const void *)*MEMORY[0x24BDD8FD0];
  OffsetOfPlane = (char **)v26;
  sub_208159E60((uint64_t)&v52, v27, (uint64_t *)&OffsetOfPlane);
  v28 = sub_2081DED54(a1, a2);
  v29 = (const void *)*MEMORY[0x24BDD8EB0];
  OffsetOfPlane = (char **)v28;
  sub_208159E60((uint64_t)&v52, v29, (uint64_t *)&OffsetOfPlane);
  LODWORD(v55) = 0x4000;
  sub_207DE5394((uint64_t)&v52, (const void *)*MEMORY[0x24BDC56C8], (int *)&v55);
  v30 = sub_2081DF254(a1, a2);
  v31 = (const void *)*MEMORY[0x24BDD8E38];
  OffsetOfPlane = (char **)v30;
  sub_208159E60((uint64_t)&v52, v31, (uint64_t *)&OffsetOfPlane);
  v32 = sub_2081DEFD4(a1, a2);
  v33 = (const void *)*MEMORY[0x24BDD8E30];
  OffsetOfPlane = (char **)v32;
  sub_208159E60((uint64_t)&v52, v33, (uint64_t *)&OffsetOfPlane);
  OffsetOfPlane = 0;
  v34 = *(_QWORD *)(a1 + 8);
  if (v34)
  {
    v35 = *(std::__shared_weak_count **)(v34 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  OffsetOfPlane = (char **)IOSurfaceGetOffsetOfPlane();
  sub_208159E60((uint64_t)&v52, (const void *)*MEMORY[0x24BDD8EE8], (uint64_t *)&OffsetOfPlane);
  v39 = sub_2081DED54(a1, a2);
  v51 = sub_2081DF254(a1, v25) * v39;
  sub_207DE5230((uint64_t)&v52, (const void *)*MEMORY[0x24BDD8E18], &v51);
  v40 = *(_QWORD *)(a1 + 8);
  if (v40)
  {
    v41 = *(std::__shared_weak_count **)(v40 + 8);
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      do
        v44 = __ldaxr(v42);
      while (__stlxr(v44 - 1, v42));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  ChildSurface = (std::__shared_weak_count_vtbl *)IOSurfaceCreateChildSurface();
  sub_2081DDA24(a3, ChildSurface, 0, 0);
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_2081DFB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  sub_207CFF9E4((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_2081DFB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081DFC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2081DFC20(uint64_t ***a1)
{
  uint64_t v1;
  void *v2;
  double result;
  __int128 v4;
  uint64_t v5;

  v1 = ***a1;
  sub_2081DD934((IOSurfaceRef *)v1, &v4);
  v2 = *(void **)(v1 + 112);
  if (v2)
  {
    *(_QWORD *)(v1 + 120) = v2;
    operator delete(v2);
  }
  result = *(double *)&v4;
  *(_OWORD *)(v1 + 112) = v4;
  *(_QWORD *)(v1 + 128) = v5;
  return result;
}

void sub_2081DFC78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08D7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2081DFC88(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08D7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2081DFCA8(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_2081DFD20(int a1, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 v20;
  uint64_t v21;
  BOOL v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          v2 = 1094862674;
          v3 = 0x4000000004;
          if (a2 >= 2)
            v4 = 0;
          else
            v4 = 0x4000000004;
          v5 = v4 & 0x4000000000;
          v6 = 1111970369;
          goto LABEL_72;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        return 0;
      }
      v37 = xmmword_2082857A0;
      if (a2 <= 2)
        return *((_QWORD *)&v37 + a2);
      else
        return 0;
    }
    if (a1 <= 843264055)
    {
      if (a1 == 24)
      {
        v35 = 0xC000000003;
        if (a2 >= 2)
          v35 = 0;
        return v35 & 0xC0000000FFLL;
      }
      else
      {
        v7 = 0x4000000004;
        if (a2 >= 2)
          v7 = 0;
        v8 = 0xC000000003;
        if (a2 >= 2)
          v8 = 0;
        if (a1 == 842285639)
          v9 = v8;
        else
          v9 = 0;
        if (a1 == 842285639)
          v10 = v8 & 0xC000000000;
        else
          v10 = 0;
        if (a1 == 32)
        {
          v11 = v7 & 0x4000000000;
        }
        else
        {
          LOBYTE(v7) = v9;
          v11 = v10;
        }
        return v11 | v7;
      }
    }
    if (a1 != 843264056)
    {
      v13 = 843264102;
      v14 = 0x8000000008;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0x8000000000;
      v16 = 843264104;
      v17 = 0x4000000004;
      if (a2 >= 2)
        v17 = 0;
      v18 = v17 & 0x4000000000;
      goto LABEL_54;
    }
LABEL_101:
    v34 = 0x4000000002;
    goto LABEL_107;
  }
  if (a1 <= 1647392358)
  {
    if (a1 > 1380401728)
    {
      if (a1 == 1380401729)
      {
        v36 = 0x4000000004;
        if (a2 >= 2)
          v36 = 0;
        return v36 & 0x40000000FFLL;
      }
      v13 = 1380410945;
      v14 = 0x10000000010;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0x10000000000;
      v16 = 1380411457;
      goto LABEL_51;
    }
    if (a1 != 1278226488)
    {
      v2 = 1278226534;
      if (a2 >= 2)
        v4 = 0;
      else
        v4 = 0x4000000004;
      v5 = v4 & 0x4000000000;
      v6 = 1278226536;
      v3 = 0x4000000002;
      goto LABEL_72;
    }
    v34 = 0x4000000001;
LABEL_107:
    if (a2 >= 2)
      v34 = 0;
    return v34 & 0x40000000FFLL;
  }
  if (a1 <= 1717855599)
  {
    if (a1 != 1647392359)
    {
      v13 = 1647589490;
      v14 = 0xC000000006;
      if (a2 >= 2)
        v14 = 0;
      v15 = v14 & 0xC000000000;
      v16 = 1647719521;
LABEL_51:
      v17 = 0x8000000008;
      if (a2 >= 2)
        v17 = 0;
      v18 = v17 & 0x8000000000;
LABEL_54:
      v19 = a1 == v16;
      if (a1 == v16)
        v20 = v17;
      else
        v20 = 0;
      if (v19)
        v21 = v18;
      else
        v21 = 0;
      v22 = a1 == v13;
      if (a1 == v13)
        v23 = v14;
      else
        v23 = v20;
      if (v22)
        v24 = v15;
      else
        v24 = v21;
      return v24 | v23;
    }
    goto LABEL_101;
  }
  if (a1 <= 1751410031)
  {
    v2 = 1717855600;
    v3 = 0x4000000004;
    if (a2 >= 2)
      v4 = 0;
    else
      v4 = 0x4000000004;
    v5 = v4 & 0x4000000000;
    v6 = 1717856627;
LABEL_72:
    if (a2 >= 2)
      v3 = 0;
    if (a1 == v6)
    {
      v25 = v3 & 0x4000000000;
    }
    else
    {
      LOBYTE(v3) = 0;
      v25 = 0;
    }
    v26 = a1 == v2;
    if (a1 == v2)
      v27 = v4;
    else
      v27 = v3;
    if (v26)
      v28 = v5;
    else
      v28 = v25;
    return v28 | v27;
  }
  v29 = 0x4000000002;
  if (a2 >= 2)
    v30 = 0;
  else
    v30 = 0x4000000002;
  if (a2 >= 2)
    v29 = 0;
  if (a1 == 1751411059)
  {
    v31 = v29 & 0x4000000000;
  }
  else
  {
    LOBYTE(v29) = 0;
    v31 = 0;
  }
  if (a1 == 1751410032)
    v32 = v30;
  else
    v32 = v29;
  if (a1 == 1751410032)
    v33 = v30 & 0x4000000000;
  else
    v33 = v31;
  return v33 | v32;
}

void sub_2081E01A0(unsigned int *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v12;
  CFMutableDictionaryRef v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  int v25;
  unsigned __int8 v26;
  const void *v27;
  const void *v28;
  const void *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned __int8 v37;
  const void *v38;
  const void *v39;
  const void *v40;
  unsigned __int8 v41;
  const void *v42;
  const void *v43;
  const void *v44;
  unsigned __int8 v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void **v49;
  unsigned int v50;
  int v51;
  unsigned __int8 v52;
  unsigned int v53;
  std::string::size_type v54;
  unsigned int v55;
  int v56;
  unsigned __int8 v57;
  unsigned int v58;
  std::string::size_type v59;
  unsigned int v60;
  int v61;
  unsigned __int8 v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  unsigned __int8 v66;
  unint64_t v67;
  unsigned int v68;
  std::__shared_weak_count_vtbl **v69;
  char *v70;
  char *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  std::__shared_weak_count_vtbl **v89;
  char *v90;
  char *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unsigned int v106;
  std::__shared_weak_count_vtbl **v107;
  char *v108;
  char *v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unsigned int v124;
  std::__shared_weak_count_vtbl **v125;
  char *v126;
  char *v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  std::logic_error *exception;
  void *__p[2];
  std::__shared_weak_count_vtbl **v160;
  __int128 v161;
  __int128 v162;
  void **v163;
  char v164;
  std::string value;
  std::__shared_weak_count *v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
  *(_OWORD *)a6 = *(_OWORD *)__p;
  sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  v13 = *(CFMutableDictionaryRef *)a6;
  v12 = *(std::__shared_weak_count **)(a6 + 8);
  if (!v12)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v13)
      goto LABEL_20;
  }
  else
  {
LABEL_6:
    if (!v13)
      goto LABEL_20;
  }
  LODWORD(__p[0]) = a2;
  sub_207CF8B74((unsigned int *)__p, (CFNumberRef *)&value);
  v17 = *(_OWORD *)&value.__r_.__value_.__l.__data_;
  if (value.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      if (!(_QWORD)v17)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  if ((_QWORD)v17)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a6, (const void *)*MEMORY[0x24BDD8EF8], value.__r_.__value_.__l.__data_);
LABEL_14:
  size = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_20:
  value.__r_.__value_.__r.__words[0] = *a1;
  sub_208159E60(a6, (const void *)*MEMORY[0x24BDD8FD0], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = a1[1];
  sub_208159E60(a6, (const void *)*MEMORY[0x24BDD8EB0], (uint64_t *)&value);
  sub_2081E2020(a3, &value);
  sub_207D008BC(a6, CFSTR("IOSurfaceName"), (uint64_t)&value);
  v24 = a5;
  if (SHIBYTE(value.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(value.__r_.__value_.__l.__data_);
    if (a2 > 1278226487)
      goto LABEL_22;
  }
  else if (a2 > 1278226487)
  {
LABEL_22:
    if (a2 > 1647392358)
    {
      if (a2 <= 1717855599)
      {
        if (a2 == 1647392359 || a2 == 1647589490)
          goto LABEL_60;
        v25 = 1647719521;
      }
      else
      {
        if (a2 <= 1751410031)
        {
          if (a2 != 1717855600)
          {
            v25 = 1717856627;
            goto LABEL_59;
          }
LABEL_60:
          v32 = sub_2081DFD20(a2, 0);
          if (!v33)
            sub_207CA2A4C();
          v34 = v32;
          value.__r_.__value_.__r.__words[0] = v32;
          sub_208159E60(a6, (const void *)*MEMORY[0x24BDD8E30], (uint64_t *)&value);
          if (a5)
          {
            value.__r_.__value_.__r.__words[0] = a4;
            sub_208159E60(a6, (const void *)*MEMORY[0x24BDD8E38], (uint64_t *)&value);
          }
          else
          {
            v35 = *a1 * v34;
            if (v35 % HIDWORD(v34))
              v36 = v35 / HIDWORD(v34) + 1;
            else
              v36 = v35 / HIDWORD(v34);
            value.__r_.__value_.__r.__words[0] = (v36 * HIDWORD(v34));
            sub_208159E60(a6, (const void *)*MEMORY[0x24BDD8E38], (uint64_t *)&value);
          }
          return;
        }
        if (a2 == 1751410032)
          goto LABEL_60;
        v25 = 1751411059;
      }
LABEL_59:
      if (a2 == v25)
        goto LABEL_60;
LABEL_267:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LODWORD(__p[0]) = a2;
      sub_2081E2848((uint64_t)&value, (int *)__p);
      std::logic_error::logic_error(exception, &value);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
    }
    if (a2 > 1380401728)
    {
      if (a2 == 1380401729 || a2 == 1380410945)
        goto LABEL_60;
      v25 = 1380411457;
      goto LABEL_59;
    }
    v30 = -1278226488;
LABEL_45:
    v31 = a2 + v30;
    if (v31 <= 0x30 && ((1 << v31) & 0x1400000000001) != 0)
      goto LABEL_60;
    goto LABEL_267;
  }
  if (a2 <= 875704421)
  {
    if (a2 <= 843264055)
    {
      if (a2 == 24 || a2 == 32)
        goto LABEL_60;
      v25 = 842285639;
      goto LABEL_59;
    }
    v30 = -843264056;
    goto LABEL_45;
  }
  if (a2 > 875836533)
  {
    if (a2 != 875836534)
    {
      if (a2 == 1094862674)
        goto LABEL_60;
      v25 = 1111970369;
      goto LABEL_59;
    }
    v45 = atomic_load((unsigned __int8 *)&qword_253E52C38);
    if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C38))
    {
      v146 = sub_2081DFD20(875836534, 0);
      if (!v147)
        sub_207CA2A4C();
      qword_253E52C30 = v146;
      __cxa_guard_release(&qword_253E52C38);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
    v162 = *(_OWORD *)__p;
    sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v46 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v47 = (const void *)*MEMORY[0x24BDD8F70];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_253E52C30;
    v48 = (const void *)*MEMORY[0x24BDD8F10];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    v49 = (const void **)MEMORY[0x24BDD8F18];
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v60 = qword_253E52C30 * *a1;
      if (v60 % HIDWORD(qword_253E52C30))
        v61 = v60 / HIDWORD(qword_253E52C30) + 1;
      else
        v61 = v60 / HIDWORD(qword_253E52C30);
      value.__r_.__value_.__r.__words[0] = (v61 * HIDWORD(qword_253E52C30));
      sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v62 = atomic_load((unsigned __int8 *)&qword_253E52C48);
    if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C48))
    {
      v154 = sub_2081DFD20(875836534, 1u);
      if (!v155)
        sub_207CA2A4C();
      qword_253E52C40 = v154;
      __cxa_guard_release(&qword_253E52C48);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
    v161 = *(_OWORD *)__p;
    sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v63 = *(_QWORD *)a1;
    value.__r_.__value_.__r.__words[0] = v63;
    sub_208159E60((uint64_t)&v161, v46, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = HIDWORD(v63);
    sub_208159E60((uint64_t)&v161, v47, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_253E52C40;
    sub_208159E60((uint64_t)&v161, v48, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_208159E60((uint64_t)&v161, *v49, (uint64_t *)&value);
    }
    else
    {
      if ((qword_253E52C40 * v63) % HIDWORD(qword_253E52C40))
        v106 = (qword_253E52C40 * v63) / HIDWORD(qword_253E52C40) + 1;
      else
        v106 = (qword_253E52C40 * v63) / HIDWORD(qword_253E52C40);
      value.__r_.__value_.__r.__words[0] = v106 * HIDWORD(qword_253E52C40);
      sub_208159E60((uint64_t)&v161, *v49, (uint64_t *)&value);
    }
    sub_207D01634((std::__shared_weak_count_vtbl **)&value, (uint64_t)&v162);
    sub_207D01634((std::__shared_weak_count_vtbl **)&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v107 = (std::__shared_weak_count_vtbl **)operator new(0x20uLL);
    __p[0] = v107;
    __p[1] = v107;
    v160 = v107 + 4;
    sub_207D01634(v107, (uint64_t)&value);
    sub_207D01634(v107 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v107 + 4;
    sub_2081E2A50(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v108 = (char *)__p[0];
    if (__p[0])
    {
      v109 = (char *)__p[1];
      v110 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v111 = (std::__shared_weak_count *)*((_QWORD *)v109 - 1);
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          v109 -= 16;
        }
        while (v109 != v108);
        v110 = __p[0];
      }
      __p[1] = v108;
      operator delete(v110);
    }
    v114 = v166;
    if (v166)
    {
      v115 = (unint64_t *)&v166->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v118 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v123 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v123);
    while (__stlxr(v87 - 1, v123));
LABEL_240:
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
    return;
  }
  if (a2 == 875704422)
  {
    v41 = atomic_load((unsigned __int8 *)&qword_253E52C18);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C18))
    {
      v144 = sub_2081DFD20(875704422, 0);
      if (!v145)
        sub_207CA2A4C();
      qword_253E52C10 = v144;
      __cxa_guard_release(&qword_253E52C18);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
    v162 = *(_OWORD *)__p;
    sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v42 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v43 = (const void *)*MEMORY[0x24BDD8F70];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_253E52C10;
    v44 = (const void *)*MEMORY[0x24BDD8F10];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v55 = qword_253E52C10 * *a1;
      if (v55 % HIDWORD(qword_253E52C10))
        v56 = v55 / HIDWORD(qword_253E52C10) + 1;
      else
        v56 = v55 / HIDWORD(qword_253E52C10);
      value.__r_.__value_.__r.__words[0] = (v56 * HIDWORD(qword_253E52C10));
      sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v57 = atomic_load((unsigned __int8 *)&qword_253E52C28);
    if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C28))
    {
      v152 = sub_2081DFD20(875704422, 1u);
      if (!v153)
        sub_207CA2A4C();
      qword_253E52C20 = v152;
      __cxa_guard_release(&qword_253E52C28);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
    v161 = *(_OWORD *)__p;
    sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v58 = a1[1];
    v59 = (*a1 & 1) + (*a1 >> 1);
    value.__r_.__value_.__r.__words[0] = v59;
    sub_208159E60((uint64_t)&v161, v42, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = (v58 & 1) + (v58 >> 1);
    sub_208159E60((uint64_t)&v161, v43, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_253E52C20;
    sub_208159E60((uint64_t)&v161, v44, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_208159E60((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      if ((qword_253E52C20 * v59) % HIDWORD(qword_253E52C20))
        v88 = (qword_253E52C20 * v59) / HIDWORD(qword_253E52C20) + 1;
      else
        v88 = (qword_253E52C20 * v59) / HIDWORD(qword_253E52C20);
      value.__r_.__value_.__r.__words[0] = v88 * HIDWORD(qword_253E52C20);
      sub_208159E60((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    sub_207D01634((std::__shared_weak_count_vtbl **)&value, (uint64_t)&v162);
    sub_207D01634((std::__shared_weak_count_vtbl **)&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v89 = (std::__shared_weak_count_vtbl **)operator new(0x20uLL);
    __p[0] = v89;
    __p[1] = v89;
    v160 = v89 + 4;
    sub_207D01634(v89, (uint64_t)&value);
    sub_207D01634(v89 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v89 + 4;
    sub_2081E2A50(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v90 = (char *)__p[0];
    if (__p[0])
    {
      v91 = (char *)__p[1];
      v92 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v93 = (std::__shared_weak_count *)*((_QWORD *)v91 - 1);
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v91 -= 16;
        }
        while (v91 != v90);
        v92 = __p[0];
      }
      __p[1] = v90;
      operator delete(v92);
    }
    v96 = v166;
    if (v166)
    {
      v97 = (unint64_t *)&v166->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v99 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v100 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v105 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v105);
    while (__stlxr(v87 - 1, v105));
    goto LABEL_240;
  }
  if (a2 == 875704438)
  {
    v37 = atomic_load((unsigned __int8 *)&qword_253E52BF8);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_253E52BF8))
    {
      v142 = sub_2081DFD20(875704438, 0);
      if (!v143)
        sub_207CA2A4C();
      qword_253E52BF0 = v142;
      __cxa_guard_release(&qword_253E52BF8);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
    v162 = *(_OWORD *)__p;
    sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    value.__r_.__value_.__r.__words[0] = *a1;
    v38 = (const void *)*MEMORY[0x24BDD8FA8];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = a1[1];
    v39 = (const void *)*MEMORY[0x24BDD8F70];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_253E52BF0;
    v40 = (const void *)*MEMORY[0x24BDD8F10];
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      v50 = qword_253E52BF0 * *a1;
      if (v50 % HIDWORD(qword_253E52BF0))
        v51 = v50 / HIDWORD(qword_253E52BF0) + 1;
      else
        v51 = v50 / HIDWORD(qword_253E52BF0);
      value.__r_.__value_.__r.__words[0] = (v51 * HIDWORD(qword_253E52BF0));
      sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    v52 = atomic_load((unsigned __int8 *)&qword_253E52C08);
    if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C08))
    {
      v150 = sub_2081DFD20(875704438, 1u);
      if (!v151)
        sub_207CA2A4C();
      qword_253E52C00 = v150;
      __cxa_guard_release(&qword_253E52C08);
    }
    *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
    value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
    sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
    v161 = *(_OWORD *)__p;
    sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
    v53 = a1[1];
    v54 = (*a1 & 1) + (*a1 >> 1);
    value.__r_.__value_.__r.__words[0] = v54;
    sub_208159E60((uint64_t)&v161, v38, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = (v53 & 1) + (v53 >> 1);
    sub_208159E60((uint64_t)&v161, v39, (uint64_t *)&value);
    value.__r_.__value_.__r.__words[0] = qword_253E52C00;
    sub_208159E60((uint64_t)&v161, v40, (uint64_t *)&value);
    if (v24)
    {
      value.__r_.__value_.__r.__words[0] = a4;
      sub_208159E60((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    else
    {
      if ((qword_253E52C00 * v54) % HIDWORD(qword_253E52C00))
        v68 = (qword_253E52C00 * v54) / HIDWORD(qword_253E52C00) + 1;
      else
        v68 = (qword_253E52C00 * v54) / HIDWORD(qword_253E52C00);
      value.__r_.__value_.__r.__words[0] = v68 * HIDWORD(qword_253E52C00);
      sub_208159E60((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
    }
    sub_207D01634((std::__shared_weak_count_vtbl **)&value, (uint64_t)&v162);
    sub_207D01634((std::__shared_weak_count_vtbl **)&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
    __p[0] = 0;
    __p[1] = 0;
    v160 = 0;
    v163 = __p;
    v164 = 0;
    v69 = (std::__shared_weak_count_vtbl **)operator new(0x20uLL);
    __p[0] = v69;
    __p[1] = v69;
    v160 = v69 + 4;
    sub_207D01634(v69, (uint64_t)&value);
    sub_207D01634(v69 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
    __p[1] = v69 + 4;
    sub_2081E2A50(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
    v70 = (char *)__p[0];
    if (__p[0])
    {
      v71 = (char *)__p[1];
      v72 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v73 = (std::__shared_weak_count *)*((_QWORD *)v71 - 1);
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v71 -= 16;
        }
        while (v71 != v70);
        v72 = __p[0];
      }
      __p[1] = v70;
      operator delete(v72);
    }
    v76 = v166;
    if (v166)
    {
      v77 = (unint64_t *)&v166->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
    if (value.__r_.__value_.__l.__size_)
    {
      v80 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
    if (*((_QWORD *)&v161 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
    if (!*((_QWORD *)&v162 + 1))
      return;
    v86 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    goto LABEL_240;
  }
  if (a2 != 875836518)
    goto LABEL_267;
  v26 = atomic_load((unsigned __int8 *)&qword_253E52C58);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C58))
  {
    v148 = sub_2081DFD20(875836518, 0);
    if (!v149)
      sub_207CA2A4C();
    qword_253E52C50 = v148;
    __cxa_guard_release(&qword_253E52C58);
  }
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
  v162 = *(_OWORD *)__p;
  sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  value.__r_.__value_.__r.__words[0] = *a1;
  v27 = (const void *)*MEMORY[0x24BDD8FA8];
  sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8FA8], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = a1[1];
  v28 = (const void *)*MEMORY[0x24BDD8F70];
  sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F70], (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = qword_253E52C50;
  v29 = (const void *)*MEMORY[0x24BDD8F10];
  sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F10], (uint64_t *)&value);
  if (v24)
  {
    value.__r_.__value_.__r.__words[0] = a4;
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  else
  {
    v64 = qword_253E52C50 * *a1;
    if (v64 % HIDWORD(qword_253E52C50))
      v65 = v64 / HIDWORD(qword_253E52C50) + 1;
    else
      v65 = v64 / HIDWORD(qword_253E52C50);
    value.__r_.__value_.__r.__words[0] = (v65 * HIDWORD(qword_253E52C50));
    sub_208159E60((uint64_t)&v162, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  v66 = atomic_load((unsigned __int8 *)&qword_253E52C68);
  if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C68))
  {
    v156 = sub_2081DFD20(875836518, 1u);
    if (!v157)
      sub_207CA2A4C();
    qword_253E52C60 = v156;
    __cxa_guard_release(&qword_253E52C68);
  }
  *(_OWORD *)&value.__r_.__value_.__r.__words[1] = 0uLL;
  value.__r_.__value_.__r.__words[0] = (std::string::size_type)&value.__r_.__value_.__l.__size_;
  sub_207D006CC(&value, (std::__shared_weak_count_vtbl **)__p);
  v161 = *(_OWORD *)__p;
  sub_207CFF9E4((uint64_t)&value, (char *)value.__r_.__value_.__l.__size_);
  v67 = *(_QWORD *)a1;
  value.__r_.__value_.__r.__words[0] = v67;
  sub_208159E60((uint64_t)&v161, v27, (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = HIDWORD(v67);
  sub_208159E60((uint64_t)&v161, v28, (uint64_t *)&value);
  value.__r_.__value_.__r.__words[0] = qword_253E52C60;
  sub_208159E60((uint64_t)&v161, v29, (uint64_t *)&value);
  if (v24)
  {
    value.__r_.__value_.__r.__words[0] = a4;
    sub_208159E60((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  else
  {
    if ((qword_253E52C60 * v67) % HIDWORD(qword_253E52C60))
      v124 = (qword_253E52C60 * v67) / HIDWORD(qword_253E52C60) + 1;
    else
      v124 = (qword_253E52C60 * v67) / HIDWORD(qword_253E52C60);
    value.__r_.__value_.__r.__words[0] = v124 * HIDWORD(qword_253E52C60);
    sub_208159E60((uint64_t)&v161, (const void *)*MEMORY[0x24BDD8F18], (uint64_t *)&value);
  }
  sub_207D01634((std::__shared_weak_count_vtbl **)&value, (uint64_t)&v162);
  sub_207D01634((std::__shared_weak_count_vtbl **)&value.__r_.__value_.__r.__words[2], (uint64_t)&v161);
  __p[0] = 0;
  __p[1] = 0;
  v160 = 0;
  v163 = __p;
  v164 = 0;
  v125 = (std::__shared_weak_count_vtbl **)operator new(0x20uLL);
  __p[0] = v125;
  __p[1] = v125;
  v160 = v125 + 4;
  sub_207D01634(v125, (uint64_t)&value);
  sub_207D01634(v125 + 2, (uint64_t)&value.__r_.__value_.__r.__words[2]);
  __p[1] = v125 + 4;
  sub_2081E2A50(a6, (const void *)*MEMORY[0x24BDD8F88], (uint64_t *)__p);
  v126 = (char *)__p[0];
  if (__p[0])
  {
    v127 = (char *)__p[1];
    v128 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v129 = (std::__shared_weak_count *)*((_QWORD *)v127 - 1);
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        v127 -= 16;
      }
      while (v127 != v126);
      v128 = __p[0];
    }
    __p[1] = v126;
    operator delete(v128);
  }
  v132 = v166;
  if (v166)
  {
    v133 = (unint64_t *)&v166->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)value.__r_.__value_.__l.__size_;
  if (value.__r_.__value_.__l.__size_)
  {
    v136 = (unint64_t *)(value.__r_.__value_.__l.__size_ + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v139 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v141);
    while (__stlxr(v87 - 1, v141));
    goto LABEL_240;
  }
}

void sub_2081E1818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_253E52C68);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_253E52C48);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_253E52C28);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  __cxa_guard_abort(&qword_253E52C08);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E18B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_253E52C58);
  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081E18D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_253E52C38);
  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081E18F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_253E52C18);
  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081E1918(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_253E52BF8);
  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081E1938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_207C99D78((uint64_t)&a13);
  sub_207C99D78((uint64_t)&a15);
  sub_207C99D78(v25);
  _Unwind_Resume(a1);
}

void sub_2081E1BDC()
{
  JUMPOUT(0x2081E1BB4);
}

void sub_2081E1BE4()
{
  JUMPOUT(0x2081E1BB4);
}

void sub_2081E1BEC()
{
  JUMPOUT(0x2081E1BB4);
}

void sub_2081E1BF4()
{
  JUMPOUT(0x2081E1BB4);
}

void sub_2081E1BFC()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C04()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C0C()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C14()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C1C()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C24()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C2C()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C34()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C3C()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C44()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C4C()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C54()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C5C()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C64()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C6C()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C74()
{
  JUMPOUT(0x2081E1BBCLL);
}

void sub_2081E1C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  uint64_t v21;

  sub_207CFF9E4((uint64_t)&a20, a21);
  sub_207C99D78((uint64_t)&a15);
  sub_207C99D78(v21);
  _Unwind_Resume(a1);
}

void sub_2081E1CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v7);
  _Unwind_Resume(a1);
}

void sub_2081E1E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  uint64_t v21;

  sub_207CFF9E4((uint64_t)&a20, a21);
  sub_207C99D78(v21);
  _Unwind_Resume(a1);
}

void sub_2081E1E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v12);
  _Unwind_Resume(a1);
}

void sub_2081E1E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
  {
    operator delete(__p);
    sub_207C99D78(v25);
    _Unwind_Resume(a1);
  }
  sub_207C99D78(v25);
  _Unwind_Resume(a1);
}

void sub_2081E1E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081E1E80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081E1E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,char *a21)
{
  sub_207CFF9E4((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_2081E1EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_2081E1ED4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  void *value;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_10;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, CFSTR("IOSurfaceName"), (const void **)&value))
  {
    sub_207CF9014((CFIndex)value, a2);
    return;
  }
LABEL_10:
  a2->__r_.__value_.__s.__data_[0] = 0;
  a2[1].__r_.__value_.__s.__data_[0] = 0;
}

uint64_t sub_2081E1F98(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  sub_2081E2020(a2, &__p);
  sub_207D008BC(a1, CFSTR("IOSurfaceName"), (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_2081E2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081E2020(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD v9[8];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253E52BE8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52BE8))
  {
    sub_2081E2160();
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E52C70, &dword_207C77000);
    __cxa_guard_release(&qword_253E52BE8);
  }
  v5 = byte_253E52C70;
  v6 = byte_253E52C70[23];
  if (byte_253E52C70[23] < 0)
  {
    v6 = *(_QWORD *)&byte_253E52C70[8];
    v5 = *(char **)byte_253E52C70;
  }
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = "; ";
  v9[3] = 2;
  v7 = *((unsigned __int8 *)a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = a1;
  else
    v8 = (uint64_t *)*a1;
  if ((v7 & 0x80u) != 0)
    v7 = a1[1];
  v9[4] = v8;
  v9[5] = v7;
  v9[6] = "; X/X";
  v9[7] = 5;
  sub_207CAC8F4((uint64_t)v9, (uint64_t)&v10, 0, 0, a2);
}

void sub_2081E2144(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52BE8);
  _Unwind_Resume(a1);
}

void sub_2081E2160()
{
  __int128 v0;
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  std::__fs::filesystem::path::__string_view v5;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *MainBundle;
  std::__shared_weak_count *v16;
  CFBundleRef v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__fs::filesystem::path::__string_view v22;
  std::__fs::filesystem::path *v23;
  std::basic_string_view<_CharT, _Traits>::size_type v24;
  std::basic_string_view<_CharT, _Traits>::size_type v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__fs::filesystem::path::__string_view v32;
  std::string::size_type v33;
  std::__fs::filesystem::path *v34;
  std::string::size_type v35;
  std::__fs::filesystem::path *p_bundle;
  std::__fs::filesystem::path bundle;
  CFBundleRef v38;
  std::__shared_weak_count *v39;
  std::__fs::filesystem::path v40;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path __dst;
  std::__fs::filesystem::path v43;
  uint64_t v44;
  std::__fs::filesystem::path *v45;
  std::string::size_type v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  sub_207CF8830((uint64_t)&bundle);
  v0 = *(_OWORD *)&bundle.__pn_.__r_.__value_.__l.__data_;
  if (!bundle.__pn_.__r_.__value_.__l.__size_)
    goto LABEL_6;
  v1 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  do
    v3 = __ldaxr(v1);
  while (__stlxr(v3 - 1, v1));
  if (!v3)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v0 + 1) + 16))(*((_QWORD *)&v0 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v0 + 1));
    if ((_QWORD)v0)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if ((_QWORD)v0)
      goto LABEL_10;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/src/BundleRef.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20821B3D2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_10:
  v4 = (std::__shared_weak_count_vtbl *)CFBundleCopyExecutableURL((CFBundleRef)bundle.__pn_.__r_.__value_.__l.__data_);
  sub_207D027F0((std::__shared_weak_count_vtbl **)&v40, v4, 0);
  sub_207D02C20((uint64_t)&v40, (uint64_t)&v43);
  v5 = std::__fs::filesystem::path::__filename(&v43);
  if (v5.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v5.__size_ >= 0x17)
  {
    v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5.__size_ | 7) != 0x17)
      v7 = v5.__size_ | 7;
    v8 = v7 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v7 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v5.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v5.__size_;
    p_dst = &__dst;
    if (!v5.__size_)
      goto LABEL_18;
  }
  memmove(p_dst, v5.__data_, v5.__size_);
LABEL_18:
  p_dst->__pn_.__r_.__value_.__s.__data_[v5.__size_] = 0;
  __p = __dst;
  if ((_BYTE)v44 && SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__pn_.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v40.__pn_.__r_.__value_.__l.__size_;
  if (v40.__pn_.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(v40.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)bundle.__pn_.__r_.__value_.__l.__size_;
  if (bundle.__pn_.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  MainBundle = (std::__shared_weak_count_vtbl *)CFBundleGetMainBundle();
  sub_207CF8608((std::__shared_weak_count_vtbl **)&v38, MainBundle, 1);
  v17 = v38;
  v16 = v39;
  if (!v39)
    goto LABEL_36;
  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v17)
      goto LABEL_40;
  }
  else
  {
LABEL_36:
    if (v17)
      goto LABEL_40;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/src/BundleRef.cpp", 54, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20821B3D2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_40:
  v21 = (std::__shared_weak_count_vtbl *)CFBundleCopyExecutableURL(v38);
  sub_207D027F0((std::__shared_weak_count_vtbl **)&bundle, v21, 0);
  sub_207D02C20((uint64_t)&bundle, (uint64_t)&v43);
  v22 = std::__fs::filesystem::path::__filename(&v43);
  if (v22.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v22.__size_ >= 0x17)
  {
    v24 = (v22.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22.__size_ | 7) != 0x17)
      v24 = v22.__size_ | 7;
    v25 = v24 + 1;
    v23 = (std::__fs::filesystem::path *)operator new(v24 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v22.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  }
  else
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v22.__size_;
    v23 = &__dst;
    if (!v22.__size_)
      goto LABEL_48;
  }
  memmove(v23, v22.__data_, v22.__size_);
LABEL_48:
  v23->__pn_.__r_.__value_.__s.__data_[v22.__size_] = 0;
  v40 = __dst;
  if ((_BYTE)v44 && SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__pn_.__r_.__value_.__l.__data_);
  v26 = (std::__shared_weak_count *)bundle.__pn_.__r_.__value_.__l.__size_;
  if (bundle.__pn_.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(bundle.__pn_.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32.__data_ = (const std::string_view::value_type *)&__p;
  else
    v32.__data_ = (const std::string_view::value_type *)__p.__pn_.__r_.__value_.__r.__words[0];
  if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32.__size_ = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
  else
    v32.__size_ = __p.__pn_.__r_.__value_.__l.__size_;
  if (std::__fs::filesystem::path::__compare(&v40, v32))
  {
    if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_207CA40D8(&__dst, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
    else
      __dst = v40;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      sub_207CA40D8(&bundle, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    else
      bundle = __p;
    v33 = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    v34 = &__dst;
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v33 = __dst.__pn_.__r_.__value_.__l.__size_;
      v34 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
    }
    v43.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    v43.__pn_.__r_.__value_.__l.__size_ = v33;
    v43.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)"/";
    v44 = 1;
    v35 = HIBYTE(bundle.__pn_.__r_.__value_.__r.__words[2]);
    p_bundle = &bundle;
    if ((bundle.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v35 = bundle.__pn_.__r_.__value_.__l.__size_;
      p_bundle = (std::__fs::filesystem::path *)bundle.__pn_.__r_.__value_.__r.__words[0];
    }
    v45 = p_bundle;
    v46 = v35;
    sub_207CAC8F4((uint64_t)&v43, (uint64_t)&v47, 0, 0, (std::string *)byte_253E52C70);
    if (SHIBYTE(bundle.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(bundle.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_86;
    }
    else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_86;
    }
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(byte_253E52C70, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    *(std::__fs::filesystem::path *)byte_253E52C70 = v40;
  }
LABEL_86:
  if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_90:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v40.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_90;
}

void sub_2081E26FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if (a30 < 0)
      goto LABEL_6;
  }
  else if (a30 < 0)
  {
LABEL_6:
    operator delete(a25);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2081E2834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2081E2848(uint64_t a1, int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_2081E2E34(v4, "Unsupported pixel format value ");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_207CA9F48();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C08D8E0[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_207CA9F48();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C08D8F8[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C08D8C8[v5])(v7, v4);
  return result;
}

void sub_2081E2948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081E2964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2081E2954);
}

void ***sub_2081E2988(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_2081E2A50(uint64_t a1, const void *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v12;
  CFMutableArrayRef v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count_vtbl *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *value[2];
  CFMutableArrayRef theArray[2];
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_207CF94CC((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v13 = theArray[0];
  v12 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v14 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_13;
LABEL_45:
      v32 = value;
      goto LABEL_46;
    }
  }
  if (!v13)
    goto LABEL_45;
LABEL_13:
  v17 = *a3;
  v18 = a3[1];
  if (*a3 != v18)
  {
    do
    {
      sub_207D0178C(&v46, v17);
      v20 = v46;
      v19 = v47;
      if (!v47)
      {
LABEL_30:
        if (v20)
          goto LABEL_31;
        goto LABEL_34;
      }
      v21 = (unint64_t *)&v47->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (v24)
      {
        v25 = v47;
        if (!v47)
          goto LABEL_27;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v25 = v47;
        if (!v47)
          goto LABEL_27;
      }
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      do
LABEL_27:
        v28 = __ldxr(v21);
      while (__stxr(v28 + 1, v21));
      do
        v29 = __ldaxr(v21);
      while (__stlxr(v29 - 1, v21));
      if (v29)
        goto LABEL_30;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v20)
      {
LABEL_31:
        CFArrayAppendValue(theArray[0], v20);
        if (v19)
          goto LABEL_35;
        goto LABEL_39;
      }
LABEL_34:
      value[0] = 0;
      value[1] = 0;
      if (v19)
      {
LABEL_35:
        v30 = (unint64_t *)&v19->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
LABEL_39:
      if (!v20)
        goto LABEL_47;
      v17 += 16;
    }
    while (v17 != v18);
  }
  *(_OWORD *)value = *(_OWORD *)theArray;
  v32 = theArray;
LABEL_46:
  *v32 = 0;
  v32[1] = 0;
LABEL_47:
  v33 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v34 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v37 = value[0];
  v36 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_57;
  v38 = (unint64_t *)((char *)value[1] + 8);
  do
    v39 = __ldxr(v38);
  while (__stxr(v39 + 1, v38));
  do
    v40 = __ldaxr(v38);
  while (__stlxr(v40 - 1, v38));
  if (v40)
  {
LABEL_57:
    if (!v37)
      goto LABEL_59;
    goto LABEL_58;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (v37)
LABEL_58:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value[0]);
LABEL_59:
  v41 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v42 = (unint64_t *)((char *)value[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_2081E2DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2081E2DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (a12)
  {
    v16 = (unint64_t *)&a12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2081E2E34(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C08D8C8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_2081E2F24(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v5;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) + 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
    }
    else if (v4 != 2 || *(_QWORD *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 2;
LABEL_14:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v5, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v5;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v5 = 1;
    goto LABEL_14;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_2081E2FE8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E2FFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E3010(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v6;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v6 = 2;
LABEL_16:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v6;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    goto LABEL_16;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_2081E30D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E30E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E30F8(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v5;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24) - 1;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(_QWORD *)(a1 + 32))
        goto LABEL_5;
    }
    else if (v4 != 2 || *(_QWORD *)(a1 + 32))
    {
      goto LABEL_5;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 2;
LABEL_14:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v5, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v5;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v5 = 1;
    goto LABEL_14;
  }
LABEL_5:
  std::mutex::unlock(v2);
}

void sub_2081E31BC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E31D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E31E4(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  IOSurfaceLockOptions v4;
  IOSurfaceLockOptions v6;

  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32) - 1;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (*(_QWORD *)(a1 + 24) && !v3)
        goto LABEL_7;
    }
    else if (v4 != 2 || v3 != 0)
    {
      goto LABEL_7;
    }
    IOSurfaceUnlock(*(IOSurfaceRef *)a1, v4, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = 0;
    v3 = *(_QWORD *)(a1 + 32);
  }
  if (v3)
  {
    v6 = 2;
LABEL_16:
    IOSurfaceLock(*(IOSurfaceRef *)a1, v6, (uint32_t *)(a1 + 20));
    *(_DWORD *)(a1 + 16) = v6;
    std::mutex::unlock(v2);
    return;
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v6 = 1;
    goto LABEL_16;
  }
LABEL_7:
  std::mutex::unlock(v2);
}

void sub_2081E32A4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E32B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081E32CC(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  lconv *v10;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  lconv *v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unsigned __int8 *v39;
  char v40;
  char *v41;
  char *v42;
  _QWORD v43[2];
  void (***v44)(void);
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  lconv *v50;
  char v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  void *__p;
  uint64_t v87;
  unint64_t v88;
  int v89;
  char *v90;
  std::__shared_weak_count *v91;
  char v92;
  void *v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v39 = a1;
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = *(_DWORD *)a2;
    if (*(_BYTE *)(a2 + 16))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v6 = (char *)operator new(0x28uLL);
      v7 = (std::__shared_weak_count *)v6;
      *((_QWORD *)v6 + 1) = 0;
      v8 = (unint64_t *)(v6 + 8);
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = off_24C08D968;
      *((_QWORD *)v6 + 3) = off_24C08D9B8;
      *((_QWORD *)v6 + 4) = a3;
      v41 = v6 + 24;
      v42 = v6;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      v44 = (void (***)(void))(v6 + 24);
      v45 = (std::__shared_weak_count *)v6;
      v43[0] = 0;
      v43[1] = 0;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v10 = localeconv();
      v50 = v10;
      thousands_sep = v10->thousands_sep;
      if (thousands_sep)
        LOBYTE(thousands_sep) = *thousands_sep;
      v51 = (char)thousands_sep;
      decimal_point = v10->decimal_point;
      if (v10->decimal_point)
        LOBYTE(decimal_point) = *decimal_point;
      v52 = (char)decimal_point;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v85 = 32;
      v13 = operator new(0x208uLL);
      __p = v13;
      v88 = 0x8000000000000208;
      v87 = 512;
      *(_QWORD *)&v14 = 0x2020202020202020;
      *((_QWORD *)&v14 + 1) = 0x2020202020202020;
      *v13 = v14;
      v13[1] = v14;
      v13[2] = v14;
      v13[3] = v14;
      v13[4] = v14;
      v13[5] = v14;
      v13[6] = v14;
      v13[7] = v14;
      v13[8] = v14;
      v13[9] = v14;
      v13[10] = v14;
      v13[11] = v14;
      v13[12] = v14;
      v13[13] = v14;
      v13[14] = v14;
      v13[15] = v14;
      v13[16] = v14;
      v13[17] = v14;
      v13[18] = v14;
      v13[19] = v14;
      v13[20] = v14;
      v13[21] = v14;
      v13[22] = v14;
      v13[23] = v14;
      v13[24] = v14;
      v13[25] = v14;
      v13[26] = v14;
      v13[27] = v14;
      v13[28] = v14;
      v13[29] = v14;
      v13[30] = v14;
      v13[31] = v14;
      *((_BYTE *)v13 + 512) = 0;
      v89 = 0;
      do
        v15 = __ldaxr(v8);
      while (__stlxr(v15 - 1, v8));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      sub_2081E6634(&v44, (uint64_t)a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
      if (SHIBYTE(v88) < 0)
        operator delete(__p);
      v16 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
LABEL_50:
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v19 = (char *)operator new(0x28uLL);
      v20 = (std::__shared_weak_count *)v19;
      *((_QWORD *)v19 + 1) = 0;
      v21 = (unint64_t *)(v19 + 8);
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = off_24C08D968;
      *((_QWORD *)v19 + 3) = off_24C08D9B8;
      v22 = v19 + 24;
      *((_QWORD *)v19 + 4) = a3;
      do
        v23 = __ldxr(v21);
      while (__stxr(v23 + 1, v21));
      do
        v24 = __ldxr(v21);
      while (__stxr(v24 + 1, v21));
      v44 = (void (***)(void))(v19 + 24);
      v45 = (std::__shared_weak_count *)v19;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v25 = localeconv();
      v50 = v25;
      v26 = v25->thousands_sep;
      if (v26)
        LOBYTE(v26) = *v26;
      v51 = (char)v26;
      v27 = v25->decimal_point;
      if (v25->decimal_point)
        LOBYTE(v27) = *v27;
      v52 = (char)v27;
      v64 = 0u;
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v85 = 32;
      v28 = operator new(0x208uLL);
      __p = v28;
      v88 = 0x8000000000000208;
      v87 = 512;
      *(_QWORD *)&v29 = 0x2020202020202020;
      *((_QWORD *)&v29 + 1) = 0x2020202020202020;
      *v28 = v29;
      v28[1] = v29;
      v28[2] = v29;
      v28[3] = v29;
      v28[4] = v29;
      v28[5] = v29;
      v28[6] = v29;
      v28[7] = v29;
      v28[8] = v29;
      v28[9] = v29;
      v28[10] = v29;
      v28[11] = v29;
      v28[12] = v29;
      v28[13] = v29;
      v28[14] = v29;
      v28[15] = v29;
      v28[16] = v29;
      v28[17] = v29;
      v28[18] = v29;
      v28[19] = v29;
      v28[20] = v29;
      v28[21] = v29;
      v28[22] = v29;
      v28[23] = v29;
      v28[24] = v29;
      v28[25] = v29;
      v28[26] = v29;
      v28[27] = v29;
      v28[28] = v29;
      v28[29] = v29;
      v28[30] = v29;
      v28[31] = v29;
      *((_BYTE *)v28 + 512) = 0;
      v89 = 0;
      v90 = v22;
      v91 = v20;
      do
        v30 = __ldxr(v21);
      while (__stxr(v30 + 1, v21));
      v92 = 32;
      v31 = operator new(0x208uLL);
      v93 = v31;
      v94 = xmmword_2082857B0;
      *(_QWORD *)&v32 = 0x2020202020202020;
      *((_QWORD *)&v32 + 1) = 0x2020202020202020;
      *v31 = v32;
      v31[1] = v32;
      v31[2] = v32;
      v31[3] = v32;
      v31[4] = v32;
      v31[5] = v32;
      v31[6] = v32;
      v31[7] = v32;
      v31[8] = v32;
      v31[9] = v32;
      v31[10] = v32;
      v31[11] = v32;
      v31[12] = v32;
      v31[13] = v32;
      v31[14] = v32;
      v31[15] = v32;
      v31[16] = v32;
      v31[17] = v32;
      v31[18] = v32;
      v31[19] = v32;
      v31[20] = v32;
      v31[21] = v32;
      v31[22] = v32;
      v31[23] = v32;
      v31[24] = v32;
      v31[25] = v32;
      v31[26] = v32;
      v31[27] = v32;
      v31[28] = v32;
      v31[29] = v32;
      v31[30] = v32;
      v31[31] = v32;
      *((_BYTE *)v31 + 512) = 0;
      do
        v33 = __ldaxr(v21);
      while (__stlxr(v33 - 1, v21));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      do
        v34 = __ldaxr(v21);
      while (__stlxr(v34 - 1, v21));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      sub_2081E83A0((uint64_t)&v44, a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
      if (SHIBYTE(v94) < 0)
        operator delete(v93);
      v35 = v91;
      if (v91)
      {
        v36 = (unint64_t *)&v91->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(v88) < 0)
        operator delete(__p);
      v16 = v45;
      if (v45)
      {
        v38 = (unint64_t *)&v45->__shared_owners_;
        do
          v18 = __ldaxr(v38);
        while (__stlxr(v18 - 1, v38));
        goto LABEL_50;
      }
    }
  }
  else
  {
    DWORD2(v46) = 0;
    sub_2081E63C8((uint64_t)&v44, (uint64_t *)&v39);
    if (DWORD2(v46) == -1)
      sub_207CA9F48();
    v43[0] = &v40;
    ((void (*)(_QWORD *, void (****)(void)))off_24C08D940[DWORD2(v46)])(v43, &v44);
    if (DWORD2(v46) != -1)
      ((void (*)(_QWORD *, void (****)(void)))off_24C08D928[DWORD2(v46)])(v43, &v44);
  }
}

void sub_2081E38AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  uint64_t v17;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  v19 = (std::__shared_weak_count *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  if (a17)
  {
    v22 = (unint64_t *)&a17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(a1);
}

void sub_2081E3AEC(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  lconv *v10;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  int v20;
  size_t v21;
  void **p_dst;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  lconv *v29;
  char *v30;
  char *v31;
  _OWORD *v32;
  __int128 v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  const void **v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  void (***v49)(void);
  uint64_t v50;
  uint64_t v51;
  void (**v52)(void);
  _QWORD v53[3];
  int v54;
  void **__dst;
  std::__shared_weak_count *v56;
  unint64_t v57;
  void (****v58)(void);
  void (***v59)(void);
  void **v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  lconv *v65;
  char v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100;
  void *__p;
  uint64_t v102;
  unint64_t v103;
  int v104;
  char *v105;
  std::__shared_weak_count *v106;
  char v107;
  void *v108;
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 8))
  {
    v54 = 0;
    v19 = (char *)operator new(0x118uLL);
    *((_QWORD *)v19 + 34) = 0;
    *((_OWORD *)v19 + 15) = 0u;
    *((_OWORD *)v19 + 16) = 0u;
    *((_OWORD *)v19 + 13) = 0u;
    *((_OWORD *)v19 + 14) = 0u;
    *((_OWORD *)v19 + 11) = 0u;
    *((_OWORD *)v19 + 12) = 0u;
    *((_OWORD *)v19 + 9) = 0u;
    *((_OWORD *)v19 + 10) = 0u;
    *((_OWORD *)v19 + 7) = 0u;
    *((_OWORD *)v19 + 8) = 0u;
    *((_OWORD *)v19 + 5) = 0u;
    *((_OWORD *)v19 + 6) = 0u;
    *((_OWORD *)v19 + 3) = 0u;
    *((_OWORD *)v19 + 4) = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    *((_OWORD *)v19 + 2) = 0u;
    *(_OWORD *)v19 = 0u;
    sub_207CA2878((uint64_t)v19);
    v59 = (void (***)(void))v19;
    sub_2081E5F84((uint64_t *)v19 + 2, (uint64_t)a1);
    v20 = *((_DWORD *)v19 + 30);
    if ((v20 & 0x10) != 0)
    {
      v43 = *((_QWORD *)v19 + 14);
      v44 = *((_QWORD *)v19 + 9);
      if (v43 < v44)
      {
        *((_QWORD *)v19 + 14) = v44;
        v43 = v44;
      }
      v45 = (const void **)(v19 + 64);
    }
    else
    {
      if ((v20 & 8) == 0)
      {
        v21 = 0;
        HIBYTE(v57) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_64;
      }
      v45 = (const void **)(v19 + 40);
      v43 = *((_QWORD *)v19 + 7);
    }
    v46 = *v45;
    v21 = v43 - (_QWORD)*v45;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v21 >= 0x17)
    {
      v47 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v47 = v21 | 7;
      v48 = v47 + 1;
      p_dst = (void **)operator new(v47 + 1);
      v56 = (std::__shared_weak_count *)v21;
      v57 = v48 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v57) = v43 - *(_BYTE *)v45;
      p_dst = (void **)&__dst;
      if (!v21)
        goto LABEL_64;
    }
    memmove(p_dst, v46, v21);
LABEL_64:
    *((_BYTE *)p_dst + v21) = 0;
    v49 = v59;
    if (v59)
    {
      v50 = MEMORY[0x24BEDB7F0];
      v51 = *MEMORY[0x24BEDB7F0];
      *v59 = (void (**)(void))*MEMORY[0x24BEDB7F0];
      v52 = *(void (***)(void))(v50 + 72);
      *(void (***)(void))((char *)v49 + *(_QWORD *)(v51 - 24)) = *(void (***)(void))(v50 + 64);
      v49[3] = (void (**)(void))(MEMORY[0x24BEDB848] + 16);
      v49[2] = v52;
      if (*((char *)v49 + 111) < 0)
        operator delete(v49[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD027B8](v49 + 16);
      operator delete(v49);
    }
    v59 = (void (***)(void))v53;
    v60 = (void **)&__dst;
    *(_QWORD *)&v61 = v53;
    *((_QWORD *)&v61 + 1) = &__dst;
    *(_QWORD *)&v62 = &__dst;
    if (v54 == -1)
      sub_207CA9F48();
    v58 = &v59;
    ((void (*)(void (*****)(void), _QWORD *))off_24C08D910[v54])(&v58, v53);
    if (SHIBYTE(v57) < 0)
      operator delete(__dst);
    if (v54 == -1)
      sub_207CA9F48();
    v59 = (void (***)(void))&__dst;
    ((void (*)(void (****)(void), _QWORD *))off_24C08D940[v54])(&v59, v53);
    if (v54 != -1)
      ((void (*)(void (****)(void), _QWORD *))off_24C08D928[v54])(&v59, v53);
    return;
  }
  v5 = *(_DWORD *)a2;
  if (*(_BYTE *)(a2 + 16))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v6 = (std::__shared_weak_count *)operator new(0x28uLL);
    v7 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_24C08D968;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C08D9B8;
    v6[1].__shared_owners_ = (uint64_t)a3;
    __dst = (void **)&v6[1].__vftable;
    v56 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v59 = (void (***)(void))&v6[1];
    v60 = (void **)&v6->__vftable;
    v53[0] = 0;
    v53[1] = 0;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v10 = localeconv();
    v65 = v10;
    thousands_sep = v10->thousands_sep;
    if (thousands_sep)
      LOBYTE(thousands_sep) = *thousands_sep;
    v66 = (char)thousands_sep;
    decimal_point = v10->decimal_point;
    if (v10->decimal_point)
      LOBYTE(decimal_point) = *decimal_point;
    v67 = (char)decimal_point;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v100 = 32;
    v13 = operator new(0x208uLL);
    __p = v13;
    v103 = 0x8000000000000208;
    v102 = 512;
    *(_QWORD *)&v14 = 0x2020202020202020;
    *((_QWORD *)&v14 + 1) = 0x2020202020202020;
    *v13 = v14;
    v13[1] = v14;
    v13[2] = v14;
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = v14;
    v13[6] = v14;
    v13[7] = v14;
    v13[8] = v14;
    v13[9] = v14;
    v13[10] = v14;
    v13[11] = v14;
    v13[12] = v14;
    v13[13] = v14;
    v13[14] = v14;
    v13[15] = v14;
    v13[16] = v14;
    v13[17] = v14;
    v13[18] = v14;
    v13[19] = v14;
    v13[20] = v14;
    v13[21] = v14;
    v13[22] = v14;
    v13[23] = v14;
    v13[24] = v14;
    v13[25] = v14;
    v13[26] = v14;
    v13[27] = v14;
    v13[28] = v14;
    v13[29] = v14;
    v13[30] = v14;
    v13[31] = v14;
    *((_BYTE *)v13 + 512) = 0;
    v104 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    sub_2081E8884(&v59, (uint64_t)a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
    if (SHIBYTE(v103) < 0)
      operator delete(__p);
    v16 = (std::__shared_weak_count *)v60;
    if (v60)
    {
      v17 = (unint64_t *)(v60 + 1);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_50:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v23 = (char *)operator new(0x28uLL);
    v24 = (std::__shared_weak_count *)v23;
    *((_QWORD *)v23 + 1) = 0;
    v25 = (unint64_t *)(v23 + 8);
    *((_QWORD *)v23 + 2) = 0;
    *(_QWORD *)v23 = off_24C08D968;
    *((_QWORD *)v23 + 3) = off_24C08D9B8;
    v26 = v23 + 24;
    *((_QWORD *)v23 + 4) = a3;
    do
      v27 = __ldxr(v25);
    while (__stxr(v27 + 1, v25));
    do
      v28 = __ldxr(v25);
    while (__stxr(v28 + 1, v25));
    v59 = (void (***)(void))(v23 + 24);
    v60 = (void **)v23;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v29 = localeconv();
    v65 = v29;
    v30 = v29->thousands_sep;
    if (v30)
      LOBYTE(v30) = *v30;
    v66 = (char)v30;
    v31 = v29->decimal_point;
    if (v29->decimal_point)
      LOBYTE(v31) = *v31;
    v67 = (char)v31;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v100 = 32;
    v32 = operator new(0x208uLL);
    __p = v32;
    v103 = 0x8000000000000208;
    v102 = 512;
    *(_QWORD *)&v33 = 0x2020202020202020;
    *((_QWORD *)&v33 + 1) = 0x2020202020202020;
    *v32 = v33;
    v32[1] = v33;
    v32[2] = v33;
    v32[3] = v33;
    v32[4] = v33;
    v32[5] = v33;
    v32[6] = v33;
    v32[7] = v33;
    v32[8] = v33;
    v32[9] = v33;
    v32[10] = v33;
    v32[11] = v33;
    v32[12] = v33;
    v32[13] = v33;
    v32[14] = v33;
    v32[15] = v33;
    v32[16] = v33;
    v32[17] = v33;
    v32[18] = v33;
    v32[19] = v33;
    v32[20] = v33;
    v32[21] = v33;
    v32[22] = v33;
    v32[23] = v33;
    v32[24] = v33;
    v32[25] = v33;
    v32[26] = v33;
    v32[27] = v33;
    v32[28] = v33;
    v32[29] = v33;
    v32[30] = v33;
    v32[31] = v33;
    *((_BYTE *)v32 + 512) = 0;
    v104 = 0;
    v105 = v26;
    v106 = v24;
    do
      v34 = __ldxr(v25);
    while (__stxr(v34 + 1, v25));
    v107 = 32;
    v35 = operator new(0x208uLL);
    v108 = v35;
    v109 = xmmword_2082857B0;
    *(_QWORD *)&v36 = 0x2020202020202020;
    *((_QWORD *)&v36 + 1) = 0x2020202020202020;
    *v35 = v36;
    v35[1] = v36;
    v35[2] = v36;
    v35[3] = v36;
    v35[4] = v36;
    v35[5] = v36;
    v35[6] = v36;
    v35[7] = v36;
    v35[8] = v36;
    v35[9] = v36;
    v35[10] = v36;
    v35[11] = v36;
    v35[12] = v36;
    v35[13] = v36;
    v35[14] = v36;
    v35[15] = v36;
    v35[16] = v36;
    v35[17] = v36;
    v35[18] = v36;
    v35[19] = v36;
    v35[20] = v36;
    v35[21] = v36;
    v35[22] = v36;
    v35[23] = v36;
    v35[24] = v36;
    v35[25] = v36;
    v35[26] = v36;
    v35[27] = v36;
    v35[28] = v36;
    v35[29] = v36;
    v35[30] = v36;
    v35[31] = v36;
    *((_BYTE *)v35 + 512) = 0;
    do
      v37 = __ldaxr(v25);
    while (__stlxr(v37 - 1, v25));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    do
      v38 = __ldaxr(v25);
    while (__stlxr(v38 - 1, v25));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    sub_2081E9E40((uint64_t)&v59, a1, v5 >= 0, v5 & ~(v5 >> 31), 0);
    if (SHIBYTE(v109) < 0)
      operator delete(v108);
    v39 = v106;
    if (v106)
    {
      v40 = (unint64_t *)&v106->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (SHIBYTE(v103) < 0)
      operator delete(__p);
    v16 = (std::__shared_weak_count *)v60;
    if (v60)
    {
      v42 = (unint64_t *)(v60 + 1);
      do
        v18 = __ldaxr(v42);
      while (__stlxr(v18 - 1, v42));
      goto LABEL_50;
    }
  }
}

void sub_2081E4294(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_207C9CFA4(a1);
}

_QWORD *sub_2081E4514@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[8];
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  sub_2080946F4(a1, v8, 1, 0, (unint64_t)v6);
  v3 = operator new(0x10uLL);
  *(_BYTE *)v3 = v6[0];
  v3[1] = v7;
  v6[0] = 0;
  v7 = 0;
  *a2 = v3;
  sub_207D20660(&v7, 0);
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2081E45E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  sub_207D20660(&a11, a10);
  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_2081E4638@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  unsigned __int8 v6[8];
  void **v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  sub_2081E475C(a1, v8, 1, 0, v6);
  v3 = operator new(0x10uLL);
  *(_BYTE *)v3 = v6[0];
  v3[1] = v7;
  v6[0] = 0;
  v7 = 0;
  *a2 = v3;
  sub_20806DC2C(&v7, 0);
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2081E4708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, void **a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  sub_20806DC2C(&a11, a10);
  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_2081E475C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, char a4@<W3>, unsigned __int8 *a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  lconv *v15;
  int v16;
  unsigned __int8 **v17;
  uint64_t v18;
  std::string *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  size_t v23;
  char v24;
  std::string::__raw *v25;
  int v26;
  void **v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  size_t v35;
  int v36;
  void **v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  uint64_t v43;
  void *v44;
  void *exception;
  const void *v46[2];
  char v47;
  std::string __p;
  std::string v49;
  std::string v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  int v55;
  _QWORD v56[2];
  char v57;
  int v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  char __str[8];
  void **v72;
  std::runtime_error v73;
  uint64_t v74;
  std::string v75;
  std::string *v76;
  unsigned __int8 *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  _BYTE v84[24];
  std::string *v85;
  char v86;
  unsigned __int8 v87;
  void **v88[2];

  v88[1] = *(void ***)MEMORY[0x24BDAC8D0];
  *a5 = 0;
  v8 = *((char *)a1 + 23);
  v9 = a1[1];
  if (v8 >= 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  *((_QWORD *)a5 + 1) = 0;
  if (v8 >= 0)
    v11 = v8;
  else
    v11 = v9;
  v12 = (_QWORD *)a2[3];
  if (!v12)
  {
    v52 = 0;
    goto LABEL_12;
  }
  if (v12 == a2)
  {
    v52 = v51;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v51);
    v13 = v52;
    if (v52)
      goto LABEL_14;
LABEL_12:
    *(_QWORD *)&v79 = 0;
    goto LABEL_17;
  }
  v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  v52 = v13;
  if (!v13)
    goto LABEL_12;
LABEL_14:
  if (v13 == v51)
  {
    *(_QWORD *)&v79 = &v77;
    (*(void (**)(_QWORD *, unsigned __int8 **))(v51[0] + 24))(v51, &v77);
  }
  else
  {
    *(_QWORD *)&v79 = v13;
    v52 = 0;
  }
LABEL_17:
  v14 = v79;
  if (!(_QWORD)v79)
  {
LABEL_20:
    v54 = (_QWORD *)v14;
    goto LABEL_22;
  }
  if ((unsigned __int8 **)v79 != &v77)
  {
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v79 + 16))();
    goto LABEL_20;
  }
  v54 = v53;
  (*((void (**)(unsigned __int8 **, _QWORD *))v77 + 3))(&v77, v53);
LABEL_22:
  v55 = 0;
  v56[0] = v10;
  v56[1] = (char *)v10 + v11;
  v57 = a4;
  v58 = -1;
  v59 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  v65 = "";
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v15 = localeconv();
  if (v15->decimal_point)
    v16 = *v15->decimal_point;
  else
    v16 = 46;
  v69 = v16;
  v70 = a3;
  v55 = sub_2081EA2E8((uint64_t)v56);
  v17 = (unsigned __int8 **)v79;
  if ((unsigned __int8 **)v79 == &v77)
  {
    v18 = 4;
    v17 = &v77;
  }
  else
  {
    if (!(_QWORD)v79)
      goto LABEL_30;
    v18 = 5;
  }
  (*(void (**)(void))&(*v17)[8 * v18])();
LABEL_30:
  if (!v54)
  {
    v77 = a5;
    v78 = 0u;
    v79 = 0u;
    LOBYTE(v80) = 0;
    BYTE1(v80) = v70;
    sub_2081EE420((uint64_t)v53, &v77);
    v55 = sub_2081EA2E8((uint64_t)v56);
    if (v55 == 15)
      goto LABEL_48;
    v20 = (unsigned __int8 *)*((_QWORD *)&v61 + 1);
    v21 = (unsigned __int8 *)v62;
    memset(&v75, 0, sizeof(v75));
    if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
    {
      do
      {
        v22 = *v20;
        if (v22 > 0x1F)
        {
          std::string::push_back(&v75, v22);
        }
        else
        {
          LOBYTE(v72) = 0;
          *(_QWORD *)__str = 0;
          snprintf(__str, 9uLL, "<U+%.4X>", v22);
          v23 = strlen(__str);
          std::string::append(&v75, __str, v23);
        }
        ++v20;
      }
      while (v20 != v21);
    }
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v60;
    v50.__r_.__value_.__r.__words[2] = v61;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&__p, "value");
    sub_2081EDBE4(&v49, (uint64_t)v53, 0xFu, (const void **)&__p.__r_.__value_.__l.__data_);
    sub_207D1B330(101, (uint64_t *)&v50, (uint64_t)&v49, (uint64_t)__str);
    LOBYTE(v80) = 1;
    if (BYTE1(v80))
    {
      exception = __cxa_allocate_exception(0x28uLL);
      *(_QWORD *)exception = off_24C072CF8;
      *((_DWORD *)exception + 2) = (_DWORD)v72;
      std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v73);
      *(_QWORD *)exception = off_24C072DF8;
      *((_QWORD *)exception + 4) = v74;
      __cxa_throw(exception, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
    }
    *(_QWORD *)__str = off_24C072CF8;
    std::runtime_error::~runtime_error(&v73);
    std::exception::~exception((std::exception *)__str);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_48:
        if (!(_BYTE)v80)
          goto LABEL_90;
        goto LABEL_49;
      }
    }
    else if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_48;
    }
    operator delete(v75.__r_.__value_.__l.__data_);
    if (!(_BYTE)v80)
      goto LABEL_90;
LABEL_49:
    v26 = *a5;
    *a5 = 9;
    __str[0] = v26;
    v27 = (void **)*((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = 0;
    v72 = v27;
    sub_20806DC2C(&v72, v26);
    goto LABEL_90;
  }
  if (v54 == v53)
  {
    v76 = &v75;
    (*(void (**)(_QWORD *, std::string *))(v53[0] + 24))(v53, &v75);
    v19 = v76;
  }
  else
  {
    v19 = (std::string *)(*(uint64_t (**)(void))(*v54 + 16))();
    v76 = v19;
  }
  v24 = v70;
  v77 = a5;
  v25 = (std::string::__raw *)v84;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0;
  if (!v19)
    goto LABEL_44;
  if (v19 != &v75)
  {
    v19 = (std::string *)(*(uint64_t (**)(std::string *))(v19->__r_.__value_.__r.__words[0] + 16))(v19);
LABEL_44:
    v85 = v19;
    goto LABEL_51;
  }
  v85 = (std::string *)v84;
  (*(void (**)(std::string *, _BYTE *))(v75.__r_.__value_.__r.__words[0] + 24))(&v75, v84);
LABEL_51:
  v86 = v24;
  v87 = 9;
  v88[0] = 0;
  v28 = v80;
  if ((_QWORD)v80 == *((_QWORD *)&v80 + 1) << 6)
  {
    if ((uint64_t)v80 + 1 < 0)
      sub_207D159B0();
    if ((unint64_t)v80 > 0x3FFFFFFFFFFFFFFELL)
    {
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else if (*((_QWORD *)&v80 + 1) << 7 <= ((unint64_t)v80 & 0xFFFFFFFFFFFFFFC0) + 64)
    {
      v29 = (v80 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    else
    {
      v29 = *((_QWORD *)&v80 + 1) << 7;
    }
    sub_207D1C104((uint64_t)&v79 + 8, v29);
    v28 = v80;
  }
  *(_QWORD *)&v80 = v28 + 1;
  *(_QWORD *)(*((_QWORD *)&v79 + 1) + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
  v30 = v76;
  if (v76 == &v75)
  {
    v31 = 4;
    v30 = &v75;
  }
  else
  {
    if (!v76)
      goto LABEL_64;
    v31 = 5;
  }
  (*(void (**)(void))(v30->__r_.__value_.__r.__words[0] + 8 * v31))();
LABEL_64:
  sub_2081EBDE0((uint64_t)v53, &v77);
  v55 = sub_2081EA2E8((uint64_t)v56);
  if (v55 == 15)
    goto LABEL_74;
  v32 = (unsigned __int8 *)*((_QWORD *)&v61 + 1);
  v33 = (unsigned __int8 *)v62;
  memset(&v50, 0, sizeof(v50));
  if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
  {
    do
    {
      v34 = *v32;
      if (v34 > 0x1F)
      {
        std::string::push_back(&v50, v34);
      }
      else
      {
        LOBYTE(v72) = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v34);
        v35 = strlen(__str);
        std::string::append(&v50, __str, v35);
      }
      ++v32;
    }
    while (v32 != v33);
  }
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v60;
  v49.__r_.__value_.__r.__words[2] = v61;
  v47 = 5;
  strcpy((char *)v46, "value");
  sub_2081EDBE4(&__p, (uint64_t)v53, 0xFu, v46);
  sub_207D1B330(101, (uint64_t *)&v49, (uint64_t)&__p, (uint64_t)__str);
  v83 = 1;
  if (v86)
  {
    v44 = __cxa_allocate_exception(0x28uLL);
    *(_QWORD *)v44 = off_24C072CF8;
    *((_DWORD *)v44 + 2) = (_DWORD)v72;
    std::runtime_error::runtime_error((std::runtime_error *)v44 + 1, &v73);
    *(_QWORD *)v44 = off_24C072DF8;
    *((_QWORD *)v44 + 4) = v74;
    __cxa_throw(v44, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
  }
  *(_QWORD *)__str = off_24C072CF8;
  std::runtime_error::~runtime_error(&v73);
  std::exception::~exception((std::exception *)__str);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_77:
    operator delete(v50.__r_.__value_.__l.__data_);
    if (v83)
      goto LABEL_75;
    goto LABEL_78;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
LABEL_74:
  if (v83)
  {
LABEL_75:
    v36 = *a5;
    *a5 = 9;
    __str[0] = v36;
    v37 = (void **)*((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = 0;
    v72 = v37;
    goto LABEL_80;
  }
LABEL_78:
  if (*a5 != 9)
    goto LABEL_81;
  *a5 = 0;
  __str[0] = 9;
  v38 = (void **)*((_QWORD *)a5 + 1);
  *((_QWORD *)a5 + 1) = 0;
  v72 = v38;
  v36 = 9;
LABEL_80:
  sub_20806DC2C(&v72, v36);
LABEL_81:
  sub_20806DC2C(v88, v87);
  if (v85 == (std::string *)v84)
  {
    v39 = 4;
    goto LABEL_85;
  }
  if (v85)
  {
    v39 = 5;
    v25 = (std::string::__raw *)v85;
LABEL_85:
    (*(void (**)(std::string::__raw *))(v25->__words[0] + 8 * v39))(v25);
  }
  if ((_QWORD)v81)
    operator delete((void *)v81);
  if (*((_QWORD *)&v79 + 1))
    operator delete(*((void **)&v79 + 1));
LABEL_90:
  if ((_QWORD)v78)
  {
    *((_QWORD *)&v78 + 1) = v78;
    operator delete((void *)v78);
  }
  if (SHIBYTE(v64) < 0)
    operator delete((void *)v63);
  if (*((_QWORD *)&v61 + 1))
  {
    *(_QWORD *)&v62 = *((_QWORD *)&v61 + 1);
    operator delete(*((void **)&v61 + 1));
  }
  v40 = v54;
  if (v54 == v53)
  {
    v41 = 4;
    v40 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_101;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_101:
  result = v52;
  if (v52 == v51)
  {
    v43 = 4;
    result = v51;
  }
  else
  {
    if (!v52)
      return result;
    v43 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v43))();
}

void sub_2081E4FF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

uint64_t **sub_2081E52C0(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_207D20660(v2 + 1, *(unsigned __int8 *)v2);
    operator delete(v2);
  }
  return a1;
}

void ****sub_2081E5300(void ****a1)
{
  void ***v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20806DC2C(v2 + 1, *(unsigned __int8 *)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2081E5340(uint64_t *a1, uint64_t *a2)
{
  int v3;
  int v4;
  uint64_t result;
  BOOL v6;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 **v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;

  v3 = *(unsigned __int8 *)a1;
  v4 = *(unsigned __int8 *)a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      v10 = (double)a1[1];
    }
    else
    {
      if (v3 == 7 && v4 == 5)
        return *((double *)a1 + 1) == (double)a2[1];
      if (v3 != 6 || v4 != 7)
      {
        if (v3 == 7 && v4 == 6)
        {
          return *((double *)a1 + 1) == (double)(unint64_t)a2[1];
        }
        else
        {
          if (v3 != 6 || v4 != 5)
          {
            result = 0;
            if (v3 != 5 || v4 != 6)
              return result;
          }
          return a1[1] == a2[1];
        }
      }
      v10 = (double)(unint64_t)a1[1];
    }
    return *((double *)a2 + 1) == v10;
  }
  result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      v11 = (_QWORD *)a1[1];
      v12 = (_QWORD *)a2[1];
      if (v11[2] != v12[2])
        return 0;
      v15 = (_QWORD *)*v11;
      v13 = v11 + 1;
      v14 = v15;
      if (v15 == v13)
        return result;
      v16 = (_QWORD *)*v12;
      break;
    case 2:
      v27 = (uint64_t *)a1[1];
      v28 = (uint64_t *)a2[1];
      v29 = *v27;
      v30 = v27[1];
      v31 = *v28;
      if (v30 - *v27 != v28[1] - *v28)
        return 0;
      for (; v29 != v30; v31 += 16)
      {
        result = sub_2081E5340(v29, v31);
        if (!(_DWORD)result)
          break;
        v29 += 16;
      }
      return result;
    case 3:
      v32 = (unsigned __int8 *)a1[1];
      v33 = (unsigned __int8 **)a2[1];
      v34 = v32[23];
      if ((v34 & 0x80u) == 0)
        v35 = (unsigned __int8 *)v32[23];
      else
        v35 = (unsigned __int8 *)*((_QWORD *)v32 + 1);
      v36 = (unsigned __int8 *)*((unsigned __int8 *)v33 + 23);
      v37 = (char)v36;
      if ((char)v36 < 0)
        v36 = v33[1];
      if (v35 != v36)
        return 0;
      if (v37 >= 0)
        v38 = (unsigned __int8 *)a2[1];
      else
        v38 = *v33;
      if ((v34 & 0x80) != 0)
        return memcmp(*(const void **)v32, v38, *((_QWORD *)v32 + 1)) == 0;
      if (v32[23])
      {
        v39 = v34 - 1;
        do
        {
          v41 = *v32++;
          v40 = v41;
          v43 = *v38++;
          v42 = v43;
          v45 = v39-- != 0;
          result = v40 == v42;
        }
        while (v40 == v42 && v45);
      }
      return result;
    case 4:
      return *((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8);
    case 5:
    case 6:
      return a1[1] == a2[1];
    case 7:
      return *((double *)a1 + 1) == *((double *)a2 + 1);
    case 8:
      v46 = a1[1];
      v47 = a2[1];
      v48 = *(_QWORD *)(v46 + 8) - *(_QWORD *)v46;
      if (v48 != *(_QWORD *)(v47 + 8) - *(_QWORD *)v47
        || memcmp(*(const void **)v46, *(const void **)v47, v48)
        || *(unsigned __int8 *)(v46 + 24) != *(unsigned __int8 *)(v47 + 24))
      {
        return 0;
      }
      return *(unsigned __int8 *)(v46 + 25) == *(unsigned __int8 *)(v47 + 25);
    default:
      return 0;
  }
  while (1)
  {
    v17 = *((unsigned __int8 *)v14 + 55);
    if ((v17 & 0x80u) == 0)
      v18 = *((unsigned __int8 *)v14 + 55);
    else
      v18 = v14[5];
    v19 = *((unsigned __int8 *)v16 + 55);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = v16[5];
    if (v18 != v19)
      return 0;
    v21 = (const void **)(v14 + 4);
    if (v20 >= 0)
      v22 = (unsigned __int8 *)(v16 + 4);
    else
      v22 = (unsigned __int8 *)v16[4];
    if ((v17 & 0x80) != 0)
    {
      if (memcmp(*v21, v22, v14[5]))
        return 0;
    }
    else if (*((_BYTE *)v14 + 55))
    {
      while (*(unsigned __int8 *)v21 == *v22)
      {
        v21 = (const void **)((char *)v21 + 1);
        ++v22;
        if (!--v17)
          goto LABEL_45;
      }
      return 0;
    }
LABEL_45:
    result = sub_2081E5340(v14 + 7, v16 + 7);
    if ((_DWORD)result)
    {
      v23 = (_QWORD *)v14[1];
      v24 = v14;
      if (v23)
      {
        do
        {
          v14 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v24[2];
          v6 = *v14 == (_QWORD)v24;
          v24 = v14;
        }
        while (!v6);
      }
      v25 = (_QWORD *)v16[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v16[2];
          v6 = *v26 == (_QWORD)v16;
          v16 = v26;
        }
        while (!v6);
      }
      result = 1;
      v16 = v26;
      if (v14 != v13)
        continue;
    }
    return result;
  }
}

uint64_t sub_2081E56BC(uint64_t *a1, uint64_t *a2)
{
  int v3;
  int v4;
  uint64_t result;
  double v9;
  uint64_t *v10;
  unsigned __int8 ***v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 **v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;

  v3 = *(unsigned __int8 *)a1;
  v4 = *(unsigned __int8 *)a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      v9 = (double)a1[1];
    }
    else
    {
      if (v3 == 7 && v4 == 5)
        return *((double *)a1 + 1) == (double)a2[1];
      if (v3 != 6 || v4 != 7)
      {
        if (v3 == 7 && v4 == 6)
          return *((double *)a1 + 1) == (double)(unint64_t)a2[1];
        if (v3 == 6 && v4 == 5)
          return a1[1] == a2[1];
        result = 0;
        if (v3 == 5 && v4 == 6)
          return a1[1] == a2[1];
        return result;
      }
      v9 = (double)(unint64_t)a1[1];
    }
    return *((double *)a2 + 1) == v9;
  }
  result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      v10 = (uint64_t *)a1[1];
      v11 = (unsigned __int8 ***)a2[1];
      v13 = *v10;
      v12 = v10[1];
      v14 = *v11;
      if (v12 - *v10 != (char *)v11[1] - (char *)*v11)
        return 0;
      if (v13 == v12)
        return result;
      break;
    case 2:
      v21 = (uint64_t *)a1[1];
      v22 = (uint64_t *)a2[1];
      v23 = *v21;
      v24 = v21[1];
      v25 = *v22;
      if (v24 - *v21 != v22[1] - *v22)
        return 0;
      for (; v23 != v24; v25 += 16)
      {
        result = sub_2081E56BC(v23, v25);
        if (!(_DWORD)result)
          break;
        v23 += 16;
      }
      return result;
    case 3:
      v26 = (unsigned __int8 *)a1[1];
      v27 = (unsigned __int8 **)a2[1];
      v28 = v26[23];
      if ((v28 & 0x80u) == 0)
        v29 = (unsigned __int8 *)v26[23];
      else
        v29 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
      v30 = (unsigned __int8 *)*((unsigned __int8 *)v27 + 23);
      v31 = (char)v30;
      if ((char)v30 < 0)
        v30 = v27[1];
      if (v29 != v30)
        return 0;
      if (v31 >= 0)
        v32 = (unsigned __int8 *)a2[1];
      else
        v32 = *v27;
      if ((v28 & 0x80) != 0)
        return memcmp(*(const void **)v26, v32, *((_QWORD *)v26 + 1)) == 0;
      if (v26[23])
      {
        v33 = v28 - 1;
        do
        {
          v35 = *v26++;
          v34 = v35;
          v37 = *v32++;
          v36 = v37;
          v39 = v33-- != 0;
          result = v34 == v36;
        }
        while (v34 == v36 && v39);
      }
      return result;
    case 4:
      return *((unsigned __int8 *)a1 + 8) == *((unsigned __int8 *)a2 + 8);
    case 5:
    case 6:
      return a1[1] == a2[1];
    case 7:
      return *((double *)a1 + 1) == *((double *)a2 + 1);
    case 8:
      v40 = a1[1];
      v41 = a2[1];
      v42 = *(_QWORD *)(v40 + 8) - *(_QWORD *)v40;
      if (v42 != *(_QWORD *)(v41 + 8) - *(_QWORD *)v41
        || memcmp(*(const void **)v40, *(const void **)v41, v42)
        || *(unsigned __int8 *)(v40 + 24) != *(unsigned __int8 *)(v41 + 24))
      {
        return 0;
      }
      return *(unsigned __int8 *)(v40 + 25) == *(unsigned __int8 *)(v41 + 25);
    default:
      return 0;
  }
  while (1)
  {
    v15 = *(unsigned __int8 *)(v13 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(unsigned __int8 **)(v13 + 8);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = (unsigned __int8 *)v14;
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *(_QWORD *)(v13 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v13 + 23))
    {
      v20 = 0;
      while (*(unsigned __int8 *)(v13 + v20) == v19[v20])
      {
        if (v15 == ++v20)
          goto LABEL_42;
      }
      return 0;
    }
LABEL_42:
    result = sub_2081E56BC(v13 + 24, v14 + 3);
    if ((_DWORD)result)
    {
      v13 += 40;
      v14 += 5;
      result = 1;
      if (v13 != v12)
        continue;
    }
    return result;
  }
}

uint64_t sub_2081E5A68(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void *exception;
  char *v14;
  std::string v15;
  std::string v16;

  if (*(_BYTE *)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v14 = (char *)sub_20809655C((char *)a1);
    sub_207C96EE8(&v15, v14);
    sub_207C96E8C("cannot use operator[] with a string argument with ", &v15, &v16);
    sub_207D1E5F8(305, (uint64_t)&v16, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 == v5)
    return v4 + 24;
  v6 = *((_BYTE *)a2 + 23);
  if (v6 >= 0)
    v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v7 = a2[1];
  if (v6 >= 0)
    v8 = (unsigned __int8 *)a2;
  else
    v8 = *a2;
  do
  {
    v9 = *(unsigned __int8 *)(v4 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
    else
      v10 = *(unsigned __int8 **)(v4 + 8);
    if (v10 == v7)
    {
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v4, v8, *(_QWORD *)(v4 + 8)))
          return v4 + 24;
      }
      else
      {
        if (!*(_BYTE *)(v4 + 23))
          return v4 + 24;
        v11 = 0;
        while (*(unsigned __int8 *)(v4 + v11) == v8[v11])
        {
          if (v9 == ++v11)
            return v4 + 24;
        }
      }
    }
    v4 += 40;
  }
  while (v4 != v5);
  return v5 + 24;
}

void sub_2081E5BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t *sub_2081E5C10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  unsigned int fmtflags;
  const std::locale::facet *v12;
  lconv *v13;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v16;
  int8x16_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::locale v23;
  void (***v24)(void);
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  lconv *v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  void *__p;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C08DA60;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DA10;
  v7[1].__shared_owners_ = (uint64_t)a1;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v23);
    v10[1].__fmtflags_ = fmtflags;
  }
  v24 = (void (***)(void))&v7[1];
  v25 = v7;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = localeconv();
  v30 = v13;
  thousands_sep = v13->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v31 = (char)thousands_sep;
  decimal_point = v13->decimal_point;
  if (v13->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v32 = (char)decimal_point;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v65 = fmtflags;
  v16 = operator new(0x208uLL);
  __p = v16;
  v68 = 0x8000000000000208;
  v67 = 512;
  v17 = vdupq_n_s8(fmtflags);
  *v16 = v17;
  v16[1] = v17;
  v16[2] = v17;
  v16[3] = v17;
  v16[4] = v17;
  v16[5] = v17;
  v16[6] = v17;
  v16[7] = v17;
  v16[8] = v17;
  v16[9] = v17;
  v16[10] = v17;
  v16[11] = v17;
  v16[12] = v17;
  v16[13] = v17;
  v16[14] = v17;
  v16[15] = v17;
  v16[16] = v17;
  v16[17] = v17;
  v16[18] = v17;
  v16[19] = v17;
  v16[20] = v17;
  v16[21] = v17;
  v16[22] = v17;
  v16[23] = v17;
  v16[24] = v17;
  v16[25] = v17;
  v16[26] = v17;
  v16[27] = v17;
  v16[28] = v17;
  v16[29] = v17;
  v16[30] = v17;
  v16[31] = v17;
  *((_BYTE *)v16 + 512) = 0;
  v69 = 0;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_2081E6634(&v24, a2, v6 > 0, v6 & ~(v6 >> 63), 0);
  if (SHIBYTE(v68) < 0)
    operator delete(__p);
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_2081E5EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081E5F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  sub_207C99D78((uint64_t)&a12);
  sub_207C99D78((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2081E5F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E763C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081E5F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2081E5F84(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  unsigned int fmtflags;
  const std::locale::facet *v12;
  lconv *v13;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v16;
  int8x16_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::locale v23;
  void (***v24)(void);
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  lconv *v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  void *__p;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C08DA60;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DA10;
  v7[1].__shared_owners_ = (uint64_t)a1;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v23, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v23);
    v10[1].__fmtflags_ = fmtflags;
  }
  v24 = (void (***)(void))&v7[1];
  v25 = v7;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = localeconv();
  v30 = v13;
  thousands_sep = v13->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v31 = (char)thousands_sep;
  decimal_point = v13->decimal_point;
  if (v13->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v32 = (char)decimal_point;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v65 = fmtflags;
  v16 = operator new(0x208uLL);
  __p = v16;
  v68 = 0x8000000000000208;
  v67 = 512;
  v17 = vdupq_n_s8(fmtflags);
  *v16 = v17;
  v16[1] = v17;
  v16[2] = v17;
  v16[3] = v17;
  v16[4] = v17;
  v16[5] = v17;
  v16[6] = v17;
  v16[7] = v17;
  v16[8] = v17;
  v16[9] = v17;
  v16[10] = v17;
  v16[11] = v17;
  v16[12] = v17;
  v16[13] = v17;
  v16[14] = v17;
  v16[15] = v17;
  v16[16] = v17;
  v16[17] = v17;
  v16[18] = v17;
  v16[19] = v17;
  v16[20] = v17;
  v16[21] = v17;
  v16[22] = v17;
  v16[23] = v17;
  v16[24] = v17;
  v16[25] = v17;
  v16[26] = v17;
  v16[27] = v17;
  v16[28] = v17;
  v16[29] = v17;
  v16[30] = v17;
  v16[31] = v17;
  *((_BYTE *)v16 + 512) = 0;
  v69 = 0;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_2081E8884(&v24, a2, v6 > 0, v6 & ~(v6 >> 63), 0);
  if (SHIBYTE(v68) < 0)
    operator delete(__p);
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a1;
}

void sub_2081E625C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081E6278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  sub_207C99D78((uint64_t)&a12);
  sub_207C99D78((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2081E629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E763C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081E62B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_2081E62F8(_BYTE *result, int a2)
{
  _BYTE *v2;
  _QWORD *v3;
  _BYTE *v4;
  _QWORD *v5;

  v2 = result;
  *result = a2;
  switch(a2)
  {
    case 1:
    case 2:
      v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      *((_QWORD *)v2 + 1) = v3;
      result = v2;
      break;
    case 3:
      v4 = operator new(0x18uLL);
      v4[23] = 0;
      *v4 = 0;
      *((_QWORD *)v2 + 1) = v4;
      result = v2;
      break;
    case 4:
      result[8] = 0;
      break;
    case 8:
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      *((_WORD *)v5 + 12) = 0;
      *((_QWORD *)v2 + 1) = v5;
      result = v2;
      break;
    default:
      *((_QWORD *)result + 1) = 0;
      break;
  }
  return result;
}

void sub_2081E63C8(uint64_t a1, uint64_t *a2)
{
  void *v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new(0x118uLL);
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *((_QWORD *)v4 + 34) = 0;
  sub_207CA2878((uint64_t)v4);
  v20[0] = v4;
  sub_2081E5C10((uint64_t *)v4 + 2, *a2);
  v5 = *((_DWORD *)v4 + 30);
  if ((v5 & 0x10) != 0)
  {
    v8 = *((_QWORD *)v4 + 14);
    v9 = *((_QWORD *)v4 + 9);
    if (v8 < v9)
    {
      *((_QWORD *)v4 + 14) = v9;
      v8 = v9;
    }
    v10 = (const void *)*((_QWORD *)v4 + 8);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = (const void *)*((_QWORD *)v4 + 5);
    v6 = *((_QWORD *)v4 + 7) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v13 + 128);
    operator delete((void *)v13);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_207CA9F48();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C08D910[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_2081E65F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_2081E6620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void (****sub_2081E6634(void (****result)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5))(void)
{
  void (****v8)(void);
  void (**v9)(void);
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void (*v17)(void);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(void);
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t (*v28)(void);
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t (***v39)(void);
  _QWORD *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  void (****v53)(void);
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  BOOL v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  char *v78;
  char v79;
  char *v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(void);
  char *v92;
  char v93;
  unint64_t v94;

  v8 = result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_34;
    case 1:
      v9 = **result;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v28 = (uint64_t (*)(void))v9[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v9[1]();
        v10 = (a5 + a4);
        v11 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          v12 = (unint64_t)v8[77];
          if (v12 >= v10)
          {
LABEL_6:
            v13 = *(_QWORD **)(a2 + 8);
            v14 = (_QWORD *)*v13;
            if (v13[2] == 1)
            {
LABEL_7:
              v15 = v14;
LABEL_8:
              v16 = v8 + 76;
              if (*((char *)v8 + 631) < 0)
                v16 = (_QWORD *)*v11;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v16, (a5 + a4));
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
              sub_2081E7714((uint64_t)v8, v15 + 4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
              sub_2081E6634(v8, v15 + 7, 1, a4, (a5 + a4));
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
              v17 = (**v8)[1];
              goto LABEL_175;
            }
LABEL_102:
            v72 = 0;
            do
            {
              v73 = v8 + 76;
              if (*((char *)v8 + 631) < 0)
                v73 = (_QWORD *)*v11;
              ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v73, (a5 + a4));
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
              sub_2081E7714((uint64_t)v8, v14 + 4);
              ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
              sub_2081E6634(v8, v14 + 7, 1, a4, (a5 + a4));
              ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
              v74 = (_QWORD *)v14[1];
              if (v74)
              {
                do
                {
                  v15 = v74;
                  v74 = (_QWORD *)*v74;
                }
                while (v74);
              }
              else
              {
                do
                {
                  v15 = (_QWORD *)v14[2];
                  v70 = *v15 == (_QWORD)v14;
                  v14 = v15;
                }
                while (!v70);
              }
              ++v72;
              v14 = v15;
            }
            while (v72 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
            goto LABEL_8;
          }
        }
        else
        {
          v12 = *((unsigned __int8 *)v8 + 631);
          if (v10 <= v12)
            goto LABEL_6;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v12, 32);
        v71 = *(_QWORD **)(a2 + 8);
        v14 = (_QWORD *)*v71;
        if (v71[2] == 1)
          goto LABEL_7;
        goto LABEL_102;
      }
      (*v9)();
      v48 = *(_QWORD **)(a2 + 8);
      v49 = (_QWORD *)*v48;
      if (v48[2] == 1)
      {
        v50 = (_QWORD *)*v48;
      }
      else
      {
        v68 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
          sub_2081E7714((uint64_t)v8, v49 + 4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
          sub_2081E6634(v8, v49 + 7, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          v69 = (_QWORD *)v49[1];
          if (v69)
          {
            do
            {
              v50 = v69;
              v69 = (_QWORD *)*v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              v50 = (_QWORD *)v49[2];
              v70 = *v50 == (_QWORD)v49;
              v49 = v50;
            }
            while (!v70);
          }
          ++v68;
          v49 = v50;
        }
        while (v68 < *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) - 1);
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
      sub_2081E7714((uint64_t)v8, v50 + 4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
      sub_2081E6634(v8, v50 + 7, 0, a4, a5);
      goto LABEL_176;
    case 2:
      v18 = *(uint64_t **)(a2 + 8);
      v19 = *v18;
      v20 = v18[1];
      v21 = **result;
      if (v19 == v20)
      {
        v28 = (uint64_t (*)(void))v21[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v21[1]();
        v22 = (a5 + a4);
        v23 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          v24 = (unint64_t)v8[77];
          if (v24 >= v22)
          {
LABEL_15:
            v25 = *(uint64_t **)(a2 + 8);
            v26 = *v25;
            if (*v25 != v25[1] - 16)
              goto LABEL_16;
            goto LABEL_114;
          }
        }
        else
        {
          v24 = *((unsigned __int8 *)v8 + 631);
          if (v22 <= v24)
            goto LABEL_15;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v24, 32);
        v75 = *(uint64_t **)(a2 + 8);
        v26 = *v75;
        if (*v75 != v75[1] - 16)
        {
          do
          {
LABEL_16:
            ((void (*)(void (***)(void)))(**v8)[1])(*v8);
            sub_2081E6634(v8, v26, 1, a4, (a5 + a4));
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
            v26 += 16;
          }
          while (v26 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
        }
LABEL_114:
        v76 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
          v76 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v76, (a5 + a4));
        sub_2081E6634(v8, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
        if (*((char *)v8 + 631) < 0)
          v23 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v23, a5);
        goto LABEL_119;
      }
      (*v21)();
      v51 = *(uint64_t **)(a2 + 8);
      v52 = *v51;
      v53 = v8;
      if (*v51 != v51[1] - 16)
      {
        do
        {
          sub_2081E6634(v53, v52, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          v52 += 16;
          v53 = v8;
        }
        while (v52 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
      }
      sub_2081E6634(v53, v52, 0, a4, a5);
LABEL_119:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 3:
      (***result)();
      sub_2081E7714((uint64_t)v8, *(uint64_t **)(a2 + 8));
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 4:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 5:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
        goto LABEL_40;
      v30 = result + 2;
      if ((v29 & 0x8000000000000000) != 0)
      {
        *v30 = 45;
        v29 = -(uint64_t)v29;
        if (v29 >= 0xA)
        {
          v58 = 4;
          v77 = v29;
          do
          {
            if (v77 <= 0x63)
            {
              v58 -= 2;
              goto LABEL_180;
            }
            if (v77 <= 0x3E7)
            {
              --v58;
              goto LABEL_180;
            }
            if (v77 >> 4 < 0x271)
              goto LABEL_180;
            v58 += 4;
            v33 = v77 >= 0x186A0;
            v77 /= 0x2710uLL;
          }
          while (v33);
          v58 -= 3;
        }
        else
        {
          v58 = 1;
        }
LABEL_180:
        v31 = v58 + 1;
        goto LABEL_181;
      }
      if (v29 < 0xA)
        goto LABEL_31;
      v31 = 4;
      v32 = *(_QWORD *)(a2 + 8);
      while (1)
      {
        if (v32 <= 0x63)
        {
          v31 -= 2;
          goto LABEL_181;
        }
        if (v32 <= 0x3E7)
          break;
        if (v32 >> 4 < 0x271)
          goto LABEL_181;
        v31 += 4;
        v33 = v32 >= 0x186A0;
        v32 /= 0x2710uLL;
        if (!v33)
        {
          v31 -= 3;
          goto LABEL_181;
        }
      }
      --v31;
LABEL_181:
      v34 = (uint64_t)&v30[v31];
      if (v29 < 0x64)
      {
        v82 = v29;
      }
      else
      {
        do
        {
          v82 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v94 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v94 > 0x270);
      }
      if (v82 >= 0xA)
        goto LABEL_186;
      goto LABEL_139;
    case 6:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
      {
LABEL_40:
        v27 = (uint64_t (*)(void))***result;
        return (void (****)(void))v27();
      }
      if (v29 < 0xA)
      {
LABEL_31:
        v34 = (uint64_t)result + 17;
        goto LABEL_140;
      }
      v54 = 4;
      v55 = *(_QWORD *)(a2 + 8);
      while (2)
      {
        if (v55 <= 0x63)
        {
          v54 -= 2;
        }
        else
        {
          if (v55 > 0x3E7)
          {
            if (v55 >> 4 < 0x271)
              break;
            v54 += 4;
            v33 = v55 >= 0x186A0;
            v55 /= 0x2710uLL;
            if (!v33)
            {
              v54 -= 3;
              break;
            }
            continue;
          }
          --v54;
        }
        break;
      }
      v34 = (uint64_t)result + v54 + 16;
      if (v29 < 0x64)
      {
        v82 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        do
        {
          v82 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v83 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v83 > 0x270);
      }
      if (v82 >= 0xA)
      {
LABEL_186:
        *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * v82];
      }
      else
      {
LABEL_139:
        LOBYTE(v29) = v82;
LABEL_140:
        *(_BYTE *)(v34 - 1) = v29 + 48;
      }
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 7:
      if ((*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_34:
        v28 = (uint64_t (*)(void))(**result)[1];
      }
      else
      {
        sub_2081E7CE0((char *)result + 16, *(double *)(a2 + 8));
        v28 = (uint64_t (*)(void))(**v8)[1];
      }
      return (void (****)(void))v28();
    case 8:
      v35 = (**result)[1];
      if (!a3)
      {
        v35();
        v41 = *(_QWORD *)(a2 + 8);
        v43 = *(_BYTE **)v41;
        v42 = *(_BYTE **)(v41 + 8);
        if (v43 == v42)
          goto LABEL_146;
        if (v43 != v42 - 1)
        {
          while (1)
          {
            v44 = *v43;
            if (*v43)
              break;
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_45:
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
            if (++v43 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
              goto LABEL_68;
          }
          if (v44 >= 0xA)
          {
            if (v44 < 0x64)
            {
              v46 = &a00010203040506[2 * v44];
              *((_BYTE *)v8 + 17) = v46[1];
              v47 = *v46;
              v45 = 2;
LABEL_53:
              *((_BYTE *)v8 + 16) = v47;
              ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v45);
              goto LABEL_45;
            }
            *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
            LODWORD(v44) = (41 * v44) >> 12;
            v45 = 3;
          }
          else
          {
            v45 = 1;
          }
          v47 = v44 | 0x30;
          goto LABEL_53;
        }
LABEL_68:
        v56 = *v43;
        if (!*v43)
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
          goto LABEL_146;
        }
        if (v56 >= 0xA)
        {
          if (v56 < 0x64)
          {
            v78 = &a00010203040506[2 * v56];
            *((_BYTE *)v8 + 17) = v78[1];
            v79 = *v78;
            v57 = 2;
LABEL_145:
            *((_BYTE *)v8 + 16) = v79;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v57);
LABEL_146:
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\"subtype\":", 12);
            v84 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v84 + 25))
            {
              v28 = (uint64_t (*)(void))(**v8)[1];
              return (void (****)(void))v28();
            }
            v85 = *(unsigned __int8 *)(v84 + 24);
            if (!v85)
            {
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
              goto LABEL_176;
            }
            if (v85 >= 0xA)
            {
              if (v85 < 0x64)
              {
                v86 = &a00010203040506[2 * v85];
                *((_BYTE *)v8 + 17) = v86[1];
                v87 = *v86;
LABEL_169:
                *((_BYTE *)v8 + 16) = v87;
                v17 = (**v8)[1];
                goto LABEL_175;
              }
              *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                     * (v85
                                                                                       - 100
                                                                                       * ((41 * v85) >> 12))];
              LODWORD(v85) = (41 * v85) >> 12;
            }
            v87 = v85 | 0x30;
            goto LABEL_169;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
          v57 = 3;
          LODWORD(v56) = (41 * v56) >> 12;
        }
        else
        {
          v57 = 1;
        }
        v79 = v56 | 0x30;
        goto LABEL_145;
      }
      v35();
      v36 = (a5 + a4);
      v37 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
      {
        v38 = (unint64_t)v8[77];
        if (v38 >= v36)
        {
          v39 = (uint64_t (***)(void))*v8;
LABEL_75:
          v40 = (_QWORD *)*v37;
          goto LABEL_76;
        }
      }
      else
      {
        v38 = *((unsigned __int8 *)v8 + 631);
        if (v36 <= v38)
        {
          v39 = (uint64_t (***)(void))*v8;
          v40 = v8 + 76;
          goto LABEL_76;
        }
      }
      std::string::resize((std::string *)(v8 + 76), 2 * v38, 32);
      v39 = (uint64_t (***)(void))*v8;
      v40 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        goto LABEL_75;
LABEL_76:
      ((void (*)(uint64_t (***)(void), _QWORD *, unint64_t))(*v39)[1])(v39, v40, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"bytes\": [", 10);
      v59 = *(_QWORD *)(a2 + 8);
      v61 = *(_BYTE **)v59;
      v60 = *(_BYTE **)(v59 + 8);
      if (v61 == v60)
        goto LABEL_157;
      if (v61 != v60 - 1)
      {
        while (1)
        {
          v62 = *v61;
          if (*v61)
            break;
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_80:
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ", ", 2);
          if (++v61 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
            goto LABEL_89;
        }
        if (v62 >= 0xA)
        {
          if (v62 < 0x64)
          {
            v64 = &a00010203040506[2 * v62];
            *((_BYTE *)v8 + 17) = v64[1];
            v65 = *v64;
            v63 = 2;
LABEL_88:
            *((_BYTE *)v8 + 16) = v65;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v63);
            goto LABEL_80;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
          LODWORD(v62) = (41 * v62) >> 12;
          v63 = 3;
        }
        else
        {
          v63 = 1;
        }
        v65 = v62 | 0x30;
        goto LABEL_88;
      }
LABEL_89:
      v66 = *v61;
      if (!*v61)
      {
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
        goto LABEL_157;
      }
      if (v66 < 0xA)
      {
        v67 = 1;
LABEL_155:
        v81 = v66 | 0x30;
        goto LABEL_156;
      }
      if (v66 >= 0x64)
      {
        *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
        v67 = 3;
        LODWORD(v66) = (41 * v66) >> 12;
        goto LABEL_155;
      }
      v80 = &a00010203040506[2 * v66];
      *((_BYTE *)v8 + 17) = v80[1];
      v81 = *v80;
      v67 = 2;
LABEL_156:
      *((_BYTE *)v8 + 16) = v81;
      ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v67);
LABEL_157:
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\n", 3);
      v88 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        v88 = (_QWORD *)*v37;
      ((void (*)(void (***)(void), _QWORD *, unint64_t))(**v8)[1])(*v8, v88, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"subtype\": ", 11);
      v89 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v89 + 25))
      {
        v91 = (**v8)[1];
LABEL_173:
        v91();
        goto LABEL_174;
      }
      v90 = *(unsigned __int8 *)(v89 + 24);
      if (v90)
      {
        if (v90 >= 0xA)
        {
          if (v90 < 0x64)
          {
            v92 = &a00010203040506[2 * v90];
            *((_BYTE *)v8 + 17) = v92[1];
            v93 = *v92;
LABEL_172:
            *((_BYTE *)v8 + 16) = v93;
            v91 = (**v8)[1];
            goto LABEL_173;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                 * (v90
                                                                                   - 100
                                                                                   * ((41 * v90) >> 12))];
          LODWORD(v90) = (41 * v90) >> 12;
        }
        v93 = v90 | 0x30;
        goto LABEL_172;
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_174:
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
      v17 = (**v8)[1];
LABEL_175:
      v17();
LABEL_176:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 9:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    default:
      return result;
  }
}

uint64_t sub_2081E763C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 631) < 0)
  {
    operator delete(*(void **)(a1 + 608));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2081E76BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08D968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2081E76CC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08D968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2081E76EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_2081E76FC(uint64_t a1, std::string::value_type a2)
{
  std::string::push_back(*(std::string **)(a1 + 8), a2);
}

std::string *sub_2081E7704(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

uint64_t sub_2081E7714(uint64_t result, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  int v20;
  void *exception;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  void *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  std::string::size_type v32;
  char __str[8];
  std::string::size_type v34;
  char v35;

  LOBYTE(v2) = *((char *)a2 + 23) < 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (!v3)
    return result;
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = result + 90;
  do
  {
    if ((v2 & 1) != 0)
      v15 = (uint64_t *)*a2;
    else
      v15 = a2;
    v16 = *((unsigned __int8 *)v15 + v6);
    if (v10)
      v11 = *((_BYTE *)v15 + v6) & 0x3F | (v11 << 6);
    else
      v11 = (0xFFu >> byte_208286240[v16]) & v16;
    v10 = byte_208286240[16 * v10 + 256 + byte_208286240[v16]];
    if (v10 != 1)
    {
      if (v10)
      {
        *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
        ++v7;
        goto LABEL_6;
      }
      switch(v11)
      {
        case 8u:
          *(_WORD *)(v12 + v9) = 25180;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 9u:
          *(_WORD *)(v12 + v9) = 29788;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xAu:
          *(_WORD *)(v12 + v9) = 28252;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xBu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
          goto LABEL_30;
        case 0xCu:
          *(_WORD *)(v12 + v9) = 26204;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xDu:
          *(_WORD *)(v12 + v9) = 29276;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0x22u:
          *(_WORD *)(v12 + v9) = 8796;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        default:
          if (v11 == 92)
          {
            *(_WORD *)(v12 + v9) = 23644;
            v9 += 2;
            if ((unint64_t)(v9 - 500) > 0xC)
              goto LABEL_23;
          }
          else
          {
LABEL_30:
            if (v11 > 0x1F)
            {
              *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
            else
            {
              result = snprintf((char *)(v12 + v9), 7uLL, "\\u%04x", v11);
              v9 += 6;
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
          }
          break;
      }
LABEL_34:
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v9);
      v10 = 0;
      v9 = 0;
      v8 = 0;
      v7 = 0;
      goto LABEL_6;
    }
    v17 = *((_DWORD *)v5 + 158);
    if ((v17 - 1) < 2)
    {
      v6 -= v7 != 0;
      if (v17 != 1)
      {
        v10 = 0;
        v7 = 0;
        v9 = v8;
        goto LABEL_6;
      }
      v9 = v8 + 3;
      v18 = v12 + v8;
      *(_WORD *)v18 = -16401;
      *(_BYTE *)(v18 + 2) = -67;
      if ((unint64_t)(v8 - 497) > 0xC)
      {
LABEL_23:
        v10 = 0;
        v7 = 0;
        v8 = v9;
        goto LABEL_6;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      v35 = 3;
      *(_DWORD *)__str = 0;
      snprintf(__str, 3uLL, "%.2X", v16);
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v28, v6);
      sub_207C96E8C("invalid UTF-8 byte at index ", &v28, &v29);
      sub_207C96E30(": 0x", &v29, &v30);
      if (v35 >= 0)
        v22 = __str;
      else
        v22 = *(char **)__str;
      if (v35 >= 0)
        v23 = v35;
      else
        v23 = v34;
      v24 = std::string::append(&v30, v22, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v32 = v24->__r_.__value_.__r.__words[2];
      v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      sub_207D1E5F8(316, (uint64_t)&v31, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v10 = 1;
LABEL_6:
    ++v6;
    v13 = *((char *)a2 + 23);
    v2 = v13 >> 31;
    v14 = a2[1];
    if (v13 >= 0)
      v14 = *((unsigned __int8 *)a2 + 23);
  }
  while (v6 < v14);
  if (v10)
  {
    v20 = *((_DWORD *)v5 + 158);
    switch(v20)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v8);
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 2:
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 0:
        v35 = 3;
        *(_DWORD *)__str = 0;
        v26 = (uint64_t *)*a2;
        if (v13 >= 0)
          v26 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v26 + v14 - 1));
        v27 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_207D1E5F8(316, (uint64_t)&v31, (uint64_t)v27);
        __cxa_throw(v27, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
      default:
        return result;
    }
    return v19();
  }
  if (v9)
  {
    v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
    return v19();
  }
  return result;
}

void sub_2081E7BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v40)
  {
LABEL_7:
    if (a39 < 0)
      operator delete(a34);
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v39);
  goto LABEL_7;
}

char *sub_2081E7CE0(char *__src, double a2)
{
  char *v2;
  char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unsigned int v99;
  char v100;
  char v101;
  uint64_t v102;
  unsigned __int8 v103;

  v2 = __src;
  if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
  {
    a2 = -a2;
    *__src = 45;
    v2 = __src + 1;
    if (a2 == 0.0)
      goto LABEL_3;
  }
  else if (a2 == 0.0)
  {
LABEL_3:
    *(_WORD *)v2 = 11824;
    result = v2 + 3;
    v2[2] = 48;
    return result;
  }
  v4 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)&a2 >> 52;
  if (*(_QWORD *)&a2 >> 52)
  {
    v6 = 2 * (v4 | 0x10000000000000);
    v7 = (2 * (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000)) | 1;
    v8 = v5 - 1076;
    if (*(_QWORD *)&a2 >> 53 && !v4)
    {
      v9 = v5 - 53;
      v10 = 0x3FFFFFFFFFFFFFLL;
      v4 = 0x10000000000000;
      goto LABEL_12;
    }
    v4 |= 0x10000000000000uLL;
  }
  else
  {
    v6 = 2 * v4;
    v7 = (2 * (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL)) | 1;
    v8 = -1075;
  }
  v10 = v6 - 1;
  v9 = v8;
LABEL_12:
  v11 = -v8;
  v12 = -4813693 - 78913 * v8;
  do
  {
    v13 = v7;
    v7 *= 2;
    ++v11;
    v12 += 78913;
  }
  while ((v7 & 0x8000000000000000) == 0);
  do
  {
    v14 = v4;
    v4 *= 2;
  }
  while ((v4 & 0x8000000000000000) == 0);
  v15 = v10 << (v9 + v11);
  v16 = v12 / 0x40000;
  if (v11 - 61 > 0)
    ++v16;
  v17 = (char *)&unk_208285D50 + 16 * ((int)((v16 + 307 + (((v16 + 307) >> 28) & 7)) << 16) >> 19);
  v18 = *(_QWORD *)v17;
  v19 = v17 + 8;
  v20 = v4 & 0xFFFFFFFE;
  v21 = v14 >> 31;
  v22 = HIDWORD(*(_QWORD *)v17);
  v23 = *(_QWORD *)v17 * (unint64_t)v20;
  v24 = HIDWORD(*(_QWORD *)v17) * (unint64_t)v20;
  v25 = HIDWORD(v24);
  v26 = (*(_QWORD *)v17 * (v14 >> 31)) >> 32;
  v27 = ((v24 & 0xFFFFFFFE)
       + HIDWORD(v23)
       + *(_QWORD *)v17 * (v14 >> 31)
       + 0x80000000) >> 32;
  v28 = HIDWORD(v15);
  v29 = HIDWORD(*(_QWORD *)v17) * (unint64_t)v15;
  v30 = *(_QWORD *)v17 * (unint64_t)HIDWORD(v15);
  v31 = HIDWORD(*(_QWORD *)v17) * (unint64_t)HIDWORD(v15);
  v32 = HIDWORD(v29);
  v33 = ((*(_QWORD *)v17 * (unint64_t)v15) >> 32)
      + v29
      + v30
      + 0x80000000;
  v34 = v11 - *((_DWORD *)v17 + 2);
  v35 = v34 - 64;
  v36 = v7 & 0xFFFFFFFE;
  v37 = v13 >> 31;
  v38 = v18 * (unint64_t)v36;
  v39 = HIDWORD(v18) * (unint64_t)v36;
  v40 = v18 * (v13 >> 31);
  v41 = HIDWORD(v18) * v37;
  v42 = HIDWORD(v39);
  v43 = HIDWORD(v40);
  v44 = ((v39 & 0xFFFFFFFE) + HIDWORD(v38) + v40 + 0x80000000) >> 32;
  v45 = v41 + HIDWORD(v39) + HIDWORD(v40) + v44 - 1;
  v46 = -*((_DWORD *)v19 + 1);
  v47 = v32 + HIDWORD(v30) + HIDWORD(v33);
  v48 = ~v31 - v47 + v45;
  v49 = v26 + v22 * (v14 >> 31) + v25 + v27;
  v50 = v45 - v49;
  v51 = 1 << v34;
  v52 = v45 >> v34;
  v53 = (1 << v34) - 1;
  v54 = v45 & v53;
  if (v52 <= 0x3B9AC9FF)
  {
    if (v52 <= 0x5F5E0FF)
    {
      if (v52 <= 0x98967F)
      {
        if (v52 <= 0xF423F)
        {
          v57 = v52 >> 5;
          if (v52 <= 9)
            v58 = 1;
          else
            v58 = 10;
          if (v52 <= 9)
            v59 = 1;
          else
            v59 = 2;
          if (v52 <= 0x63)
            v60 = v58;
          else
            v60 = 100;
          if (v52 <= 0x63)
            v56 = v59;
          else
            v56 = 3;
          if (v52 > 0x3E7)
          {
            v60 = 1000;
            v56 = 4;
          }
          if (v52 >> 4 > 0x270)
          {
            v60 = 10000;
            v56 = 5;
          }
          v61 = v57 > 0xC34;
          if (v57 > 0xC34)
            v55 = 100000;
          else
            v55 = v60;
          if (v61)
            v56 = 6;
        }
        else
        {
          v55 = 1000000;
          v56 = 7;
        }
      }
      else
      {
        v55 = 10000000;
        v56 = 8;
      }
    }
    else
    {
      v55 = 100000000;
      v56 = 9;
    }
  }
  else
  {
    v55 = 1000000000;
    v56 = 10;
  }
  v62 = 0;
  v63 = v42 + v43 + v41;
  v64 = v56;
  v65 = ~v49 + v63 + v44;
  v66 = v42 - v47 + v43 + v44 + v22 * (v37 - v28) - 2;
  v67 = v54 - v42 - v43 - v44 + v25 + v26 + v27 + v22 * (v21 - v37) + 1;
  while (v62 != v64)
  {
    v68 = v62;
    v69 = v52 / v55;
    v52 = v52 % v55;
    v70 = v69 + 48;
    v62 = v68 + 1;
    v2[v68] = v70;
    --v56;
    v71 = v52 << v35;
    v72 = (v52 << v35) + v54;
    if (v48 < v72)
    {
      v55 /= 0xAu;
    }
    else
    {
      v46 += v56;
      v73 = (unint64_t)v55 << v35;
      if (v72 >= v50 || v48 - v72 < v73)
        goto LABEL_71;
      v75 = 0;
      v76 = v54 + v71 + v73;
      v77 = v66 - v76;
      v78 = v67 + v71 + v73;
      do
      {
        if (v76 >= v50 && v65 - v72 + v75 <= v78)
          break;
        v2[v68] = --v70;
        if (v76 >= v50)
          break;
        v79 = v77 + v75;
        v75 -= v73;
        v76 += v73;
        v78 += v73;
      }
      while (v79 >= v73);
    }
    if (v48 >= v72)
      goto LABEL_71;
  }
  do
  {
    v80 = v48;
    v81 = v50;
    v82 = (10 * v54) >> v35;
    v54 = (10 * v54) & v53;
    v83 = v82 + 48;
    v2[v64++] = v82 + 48;
    v48 = 10 * v80;
    v50 *= 10;
    --v46;
  }
  while (10 * v80 < v54);
  if (v54 < v50 && 10 * v80 - v54 >= v51)
  {
    v84 = 10 * v81;
    v85 = -(uint64_t)v54;
    v86 = 10 * v80 - v51;
    v87 = v51 + v54;
    v88 = -10 * v81;
    do
    {
      if (v87 >= v50 && v84 + v85 <= v88 + v87)
        break;
      v2[v64 - 1] = --v83;
      if (v87 >= v50)
        break;
      v89 = v86 + v85;
      v85 -= v51;
      v87 += v51;
    }
    while (v89 >= v51);
  }
  LODWORD(v62) = v64;
LABEL_71:
  v90 = v46 + (uint64_t)(int)v62;
  if ((v46 & 0x80000000) == 0 && (int)v90 <= 15)
  {
    memset(&v2[(int)v62], 48, v46);
    *(_WORD *)&v2[v90] = 12334;
    return &v2[v90 + 2];
  }
  if ((v90 - 16) >= 0xFFFFFFF1)
  {
    v93 = v90;
    v94 = &v2[v90];
    v95 = (int)v62;
    memmove(v94 + 1, v94, (int)v62 - v93);
    *v94 = 46;
    return &v2[v95 + 1];
  }
  if ((_DWORD)v90 == 0 || v90 >= 0xFFFFFFFD)
  {
    v91 = -(int)v90;
    v92 = (int)v62;
    memmove(&v2[v91 + 2], v2, (int)v62);
    *(_WORD *)v2 = 11824;
    memset(v2 + 2, 48, v91);
    return &v2[v92 + 2 + v91];
  }
  if ((_DWORD)v62 == 1)
  {
    v96 = 1;
  }
  else
  {
    v97 = (int)v62;
    memmove(v2 + 2, v2 + 1, (int)v62 - 1);
    v2[1] = 46;
    v96 = v97 + 1;
  }
  v98 = &v2[v96];
  *v98 = 101;
  v99 = v90 - 1;
  if ((int)v90 >= 1)
    v100 = 43;
  else
    v100 = 45;
  if ((int)v90 - 1 < 0)
    v99 = 1 - v90;
  v98[1] = v100;
  if (v99 > 9)
  {
    if (v99 > 0x63)
    {
      v98[2] = v99 / 0x64 + 48;
      v103 = v99 % 0x64;
      v98[3] = (v103 / 0xAu) | 0x30;
      v98[4] = (v103 % 0xAu) | 0x30;
      v102 = 2;
      return &v98[v102 + 3];
    }
    v98[2] = v99 / 0xAu + 48;
    v101 = (v99 % 0xAu) | 0x30;
  }
  else
  {
    v98[2] = 48;
    v101 = v99 + 48;
  }
  v98[3] = v101;
  v102 = 1;
  return &v98[v102 + 3];
}

void (****sub_2081E83A0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5))(void)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t (*v31)(void);
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v10 = *a2;
  if (v10 == 2)
  {
    v22 = (uint64_t *)*((_QWORD *)a2 + 1);
    v23 = *v22;
    v24 = v22[1];
    v25 = **(_QWORD **)(a1 + 640);
    if (v23 != v24)
    {
      (*(void (**)(void))v25)();
      v26 = (uint64_t *)*((_QWORD *)a2 + 1);
      v27 = *v26;
      v28 = a1;
      if (*v26 != v26[1] - 16)
      {
        do
        {
          sub_2081E83A0(v28, v27, a3, a4, a5);
          (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
          v27 += 16;
          v28 = a1;
        }
        while (v27 != *(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - 16);
      }
      sub_2081E83A0(v28, v27, a3, a4, a5);
      v29 = ***(uint64_t (****)(void))(a1 + 640);
      return (void (****)(void))v29();
    }
    v31 = *(uint64_t (**)(void))(v25 + 8);
    return (void (****)(void))v31();
  }
  if (v10 != 1)
    return sub_2081E6634((void (****)(void))a1, (uint64_t)a2, a3, a4, a5);
  v11 = **(_QWORD **)(a1 + 640);
  if (!*(_QWORD *)(*((_QWORD *)a2 + 1) + 16))
  {
    v31 = *(uint64_t (**)(void))(v11 + 8);
    return (void (****)(void))v31();
  }
  if (!(_DWORD)a3)
  {
    (*(void (**)(void))v11)();
    v32 = (_QWORD *)*((_QWORD *)a2 + 1);
    v33 = (_QWORD *)*v32;
    if (v32[2] < 2uLL)
    {
      v36 = (_QWORD *)*v32;
    }
    else
    {
      v34 = 1;
      do
      {
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
        sub_2081E7714(a1, v33 + 4);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
        sub_2081E83A0(a1, v33 + 7, 0, a4, a5);
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
        v35 = (_QWORD *)v33[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (_QWORD *)v33[2];
            v21 = *v36 == (_QWORD)v33;
            v33 = v36;
          }
          while (!v21);
        }
        ++v34;
        v33 = v36;
      }
      while (v34 < *(_QWORD *)(*((_QWORD *)a2 + 1) + 16));
    }
    (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
    sub_2081E7714(a1, v36 + 4);
    (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
    sub_2081E83A0(a1, v36 + 7, 0, a4, a5);
    goto LABEL_45;
  }
  (*(void (**)(void))(v11 + 8))();
  v12 = (a5 + a4);
  v13 = (uint64_t *)(a1 + 664);
  if (*(char *)(a1 + 687) < 0)
  {
    v14 = *(_QWORD *)(a1 + 672);
    if (v14 >= v12)
    {
LABEL_7:
      v15 = (_QWORD *)*((_QWORD *)a2 + 1);
      v16 = (_QWORD *)*v15;
      if (v15[2] >= 2uLL)
        goto LABEL_8;
      goto LABEL_39;
    }
  }
  else
  {
    v14 = *(unsigned __int8 *)(a1 + 687);
    if (v12 <= v14)
      goto LABEL_7;
  }
  std::string::resize((std::string *)(a1 + 664), 2 * v14, 32);
  v37 = (_QWORD *)*((_QWORD *)a2 + 1);
  v16 = (_QWORD *)*v37;
  if (v37[2] >= 2uLL)
  {
LABEL_8:
    v17 = 1;
    do
    {
      v18 = (_QWORD *)(a1 + 664);
      if (*(char *)(a1 + 687) < 0)
        v18 = (_QWORD *)*v13;
      (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v18, (a5 + a4));
      (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
      sub_2081E7714(a1, v16 + 4);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
      sub_2081E83A0(a1, v16 + 7, 1, a4, (a5 + a4));
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), ",\n", 2);
      v19 = (_QWORD *)v16[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v16[2];
          v21 = *v20 == (_QWORD)v16;
          v16 = v20;
        }
        while (!v21);
      }
      ++v17;
      v16 = v20;
    }
    while (v17 < *(_QWORD *)(*((_QWORD *)a2 + 1) + 16));
    goto LABEL_40;
  }
LABEL_39:
  v20 = v16;
LABEL_40:
  v38 = a1 + 664;
  if (*(char *)(a1 + 687) < 0)
    v38 = *v13;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v38, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
  sub_2081E7714(a1, v20 + 4);
  (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
  sub_2081E83A0(a1, v20 + 7, 1, a4, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 10);
  if (*(char *)(a1 + 687) < 0)
    v13 = (uint64_t *)*v13;
  (*(void (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v13, a5);
LABEL_45:
  v29 = ***(uint64_t (****)(void))(a1 + 640);
  return (void (****)(void))v29();
}

void (****sub_2081E8884(void (****result)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5))(void)
{
  void (****v8)(void);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(void);
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(void);
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t (*v28)(void);
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(void);
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t (***v39)(void);
  _QWORD *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (****v53)(void);
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  void (***v68)(void);
  void (*v69)(void);
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  char *v74;
  char v75;
  char *v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(void);
  char *v88;
  char v89;
  unint64_t v90;

  v8 = result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_33;
    case 1:
      v9 = *(uint64_t **)(a2 + 8);
      v10 = *v9;
      v11 = v9[1];
      v12 = **result;
      if (v10 == v11)
      {
        v28 = (uint64_t (*)(void))v12[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v12[1]();
        v13 = (a5 + a4);
        if (*((char *)v8 + 631) < 0)
        {
          v14 = (unint64_t)v8[77];
          if (v14 >= v13)
          {
LABEL_6:
            v15 = *(_QWORD *)(a2 + 8);
            v16 = *(uint64_t **)v15;
            if (*(_QWORD *)(v15 + 8) - *(_QWORD *)v15 == 40)
              goto LABEL_92;
            goto LABEL_7;
          }
        }
        else
        {
          v14 = *((unsigned __int8 *)v8 + 631);
          if (v13 <= v14)
            goto LABEL_6;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v14, 32);
        v70 = *(_QWORD *)(a2 + 8);
        v16 = *(uint64_t **)v70;
        if (*(_QWORD *)(v70 + 8) - *(_QWORD *)v70 == 40)
          goto LABEL_92;
LABEL_7:
        v17 = 0;
        do
        {
          ((void (*)(void (***)(void)))(**v8)[1])(*v8);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
          sub_2081E9874((uint64_t)v8, v16);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
          sub_2081E8884(v8, v16 + 3, 1, a4, v13);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
          ++v17;
          v16 += 5;
        }
        while (v17 < -1
                    - 0x3333333333333333
                    * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8)) >> 3));
LABEL_92:
        v68 = (void (***)(void))(v8 + 76);
        if (*((char *)v8 + 631) < 0)
          v68 = v8[76];
        ((void (*)(void (***)(void), void (***)(void), unint64_t))(**v8)[1])(*v8, v68, v13);
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
        sub_2081E9874((uint64_t)v8, v16);
        ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\": ", 3);
        sub_2081E8884(v8, v16 + 3, 1, a4, v13);
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
        v69 = (**v8)[1];
        goto LABEL_161;
      }
      (*v12)();
      v48 = *(_QWORD *)(a2 + 8);
      v49 = *(uint64_t **)v48;
      if (*(_QWORD *)(v48 + 8) - *(_QWORD *)v48 != 40)
      {
        v50 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
          sub_2081E9874((uint64_t)v8, v49);
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
          sub_2081E8884(v8, v49 + 3, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          ++v50;
          v49 += 5;
        }
        while (v50 < -1
                    - 0x3333333333333333
                    * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - **(_QWORD **)(a2 + 8)) >> 3));
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 34);
      sub_2081E9874((uint64_t)v8, v49);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\":", 2);
      sub_2081E8884(v8, v49 + 3, 0, a4, a5);
      goto LABEL_162;
    case 2:
      v18 = *(uint64_t **)(a2 + 8);
      v19 = *v18;
      v20 = v18[1];
      v21 = **result;
      if (v19 == v20)
      {
        v28 = (uint64_t (*)(void))v21[1];
        return (void (****)(void))v28();
      }
      if (a3)
      {
        v21[1]();
        v22 = (a5 + a4);
        v23 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
        {
          v24 = (unint64_t)v8[77];
          if (v24 >= v22)
          {
LABEL_14:
            v25 = *(uint64_t **)(a2 + 8);
            v26 = *v25;
            if (*v25 != v25[1] - 16)
              goto LABEL_15;
            goto LABEL_100;
          }
        }
        else
        {
          v24 = *((unsigned __int8 *)v8 + 631);
          if (v22 <= v24)
            goto LABEL_14;
        }
        std::string::resize((std::string *)(v8 + 76), 2 * v24, 32);
        v71 = *(uint64_t **)(a2 + 8);
        v26 = *v71;
        if (*v71 != v71[1] - 16)
        {
          do
          {
LABEL_15:
            ((void (*)(void (***)(void)))(**v8)[1])(*v8);
            sub_2081E8884(v8, v26, 1, a4, (a5 + a4));
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ",\n", 2);
            v26 += 16;
          }
          while (v26 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
        }
LABEL_100:
        v72 = v8 + 76;
        if (*((char *)v8 + 631) < 0)
          v72 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v72, (a5 + a4));
        sub_2081E8884(v8, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
        if (*((char *)v8 + 631) < 0)
          v23 = (_QWORD *)*v23;
        ((void (*)(void (***)(void), _QWORD *, _QWORD))(**v8)[1])(*v8, v23, a5);
        goto LABEL_105;
      }
      (*v21)();
      v51 = *(uint64_t **)(a2 + 8);
      v52 = *v51;
      v53 = v8;
      if (*v51 != v51[1] - 16)
      {
        do
        {
          sub_2081E8884(v53, v52, 0, a4, a5);
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
          v52 += 16;
          v53 = v8;
        }
        while (v52 != *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16);
      }
      sub_2081E8884(v53, v52, 0, a4, a5);
LABEL_105:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 3:
      (***result)();
      sub_2081E9874((uint64_t)v8, *(uint64_t **)(a2 + 8));
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 4:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 5:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
        goto LABEL_39;
      v30 = result + 2;
      if ((v29 & 0x8000000000000000) != 0)
      {
        *v30 = 45;
        v29 = -(uint64_t)v29;
        if (v29 >= 0xA)
        {
          v58 = 4;
          v73 = v29;
          do
          {
            if (v73 <= 0x63)
            {
              v58 -= 2;
              goto LABEL_166;
            }
            if (v73 <= 0x3E7)
            {
              --v58;
              goto LABEL_166;
            }
            if (v73 >> 4 < 0x271)
              goto LABEL_166;
            v58 += 4;
            v33 = v73 >= 0x186A0;
            v73 /= 0x2710uLL;
          }
          while (v33);
          v58 -= 3;
        }
        else
        {
          v58 = 1;
        }
LABEL_166:
        v31 = v58 + 1;
        goto LABEL_167;
      }
      if (v29 < 0xA)
        goto LABEL_30;
      v31 = 4;
      v32 = *(_QWORD *)(a2 + 8);
      while (1)
      {
        if (v32 <= 0x63)
        {
          v31 -= 2;
          goto LABEL_167;
        }
        if (v32 <= 0x3E7)
          break;
        if (v32 >> 4 < 0x271)
          goto LABEL_167;
        v31 += 4;
        v33 = v32 >= 0x186A0;
        v32 /= 0x2710uLL;
        if (!v33)
        {
          v31 -= 3;
          goto LABEL_167;
        }
      }
      --v31;
LABEL_167:
      v34 = (uint64_t)&v30[v31];
      if (v29 < 0x64)
      {
        v78 = v29;
      }
      else
      {
        do
        {
          v78 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v90 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v90 > 0x270);
      }
      if (v78 >= 0xA)
        goto LABEL_172;
      goto LABEL_125;
    case 6:
      v29 = *(_QWORD *)(a2 + 8);
      if (!v29)
      {
LABEL_39:
        v27 = (uint64_t (*)(void))***result;
        return (void (****)(void))v27();
      }
      if (v29 < 0xA)
      {
LABEL_30:
        v34 = (uint64_t)result + 17;
        goto LABEL_126;
      }
      v54 = 4;
      v55 = *(_QWORD *)(a2 + 8);
      while (2)
      {
        if (v55 <= 0x63)
        {
          v54 -= 2;
        }
        else
        {
          if (v55 > 0x3E7)
          {
            if (v55 >> 4 < 0x271)
              break;
            v54 += 4;
            v33 = v55 >= 0x186A0;
            v55 /= 0x2710uLL;
            if (!v33)
            {
              v54 -= 3;
              break;
            }
            continue;
          }
          --v54;
        }
        break;
      }
      v34 = (uint64_t)result + v54 + 16;
      if (v29 < 0x64)
      {
        v78 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        do
        {
          v78 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * (v29 % 0x64)];
          v34 -= 2;
          v79 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v79 > 0x270);
      }
      if (v78 >= 0xA)
      {
LABEL_172:
        *(_WORD *)(v34 - 2) = *(_WORD *)&a00010203040506[2 * v78];
      }
      else
      {
LABEL_125:
        LOBYTE(v29) = v78;
LABEL_126:
        *(_BYTE *)(v34 - 1) = v29 + 48;
      }
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    case 7:
      if ((*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_33:
        v28 = (uint64_t (*)(void))(**result)[1];
      }
      else
      {
        sub_2081E7CE0((char *)result + 16, *(double *)(a2 + 8));
        v28 = (uint64_t (*)(void))(**v8)[1];
      }
      return (void (****)(void))v28();
    case 8:
      v35 = (**result)[1];
      if (!a3)
      {
        v35();
        v41 = *(_QWORD *)(a2 + 8);
        v43 = *(_BYTE **)v41;
        v42 = *(_BYTE **)(v41 + 8);
        if (v43 == v42)
          goto LABEL_132;
        if (v43 != v42 - 1)
        {
          while (1)
          {
            v44 = *v43;
            if (*v43)
              break;
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_44:
            ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 44);
            if (++v43 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
              goto LABEL_68;
          }
          if (v44 >= 0xA)
          {
            if (v44 < 0x64)
            {
              v46 = &a00010203040506[2 * v44];
              *((_BYTE *)v8 + 17) = v46[1];
              v47 = *v46;
              v45 = 2;
LABEL_52:
              *((_BYTE *)v8 + 16) = v47;
              ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v45);
              goto LABEL_44;
            }
            *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
            LODWORD(v44) = (41 * v44) >> 12;
            v45 = 3;
          }
          else
          {
            v45 = 1;
          }
          v47 = v44 | 0x30;
          goto LABEL_52;
        }
LABEL_68:
        v56 = *v43;
        if (!*v43)
        {
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
          goto LABEL_132;
        }
        if (v56 >= 0xA)
        {
          if (v56 < 0x64)
          {
            v74 = &a00010203040506[2 * v56];
            *((_BYTE *)v8 + 17) = v74[1];
            v75 = *v74;
            v57 = 2;
LABEL_131:
            *((_BYTE *)v8 + 16) = v75;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v57);
LABEL_132:
            ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\"subtype\":", 12);
            v80 = *(_QWORD *)(a2 + 8);
            if (!*(_BYTE *)(v80 + 25))
            {
              v28 = (uint64_t (*)(void))(**v8)[1];
              return (void (****)(void))v28();
            }
            v81 = *(unsigned __int8 *)(v80 + 24);
            if (!v81)
            {
              ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
              goto LABEL_162;
            }
            if (v81 >= 0xA)
            {
              if (v81 < 0x64)
              {
                v82 = &a00010203040506[2 * v81];
                *((_BYTE *)v8 + 17) = v82[1];
                v83 = *v82;
LABEL_155:
                *((_BYTE *)v8 + 16) = v83;
                v69 = (**v8)[1];
                goto LABEL_161;
              }
              *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                     * (v81
                                                                                       - 100
                                                                                       * ((41 * v81) >> 12))];
              LODWORD(v81) = (41 * v81) >> 12;
            }
            v83 = v81 | 0x30;
            goto LABEL_155;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v43 % 0x64u)];
          v57 = 3;
          LODWORD(v56) = (41 * v56) >> 12;
        }
        else
        {
          v57 = 1;
        }
        v75 = v56 | 0x30;
        goto LABEL_131;
      }
      v35();
      v36 = (a5 + a4);
      v37 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
      {
        v38 = (unint64_t)v8[77];
        if (v38 >= v36)
        {
          v39 = (uint64_t (***)(void))*v8;
LABEL_75:
          v40 = (_QWORD *)*v37;
          goto LABEL_76;
        }
      }
      else
      {
        v38 = *((unsigned __int8 *)v8 + 631);
        if (v36 <= v38)
        {
          v39 = (uint64_t (***)(void))*v8;
          v40 = v8 + 76;
          goto LABEL_76;
        }
      }
      std::string::resize((std::string *)(v8 + 76), 2 * v38, 32);
      v39 = (uint64_t (***)(void))*v8;
      v40 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        goto LABEL_75;
LABEL_76:
      ((void (*)(uint64_t (***)(void), _QWORD *, unint64_t))(*v39)[1])(v39, v40, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"bytes\": [", 10);
      v59 = *(_QWORD *)(a2 + 8);
      v61 = *(_BYTE **)v59;
      v60 = *(_BYTE **)(v59 + 8);
      if (v61 == v60)
        goto LABEL_143;
      if (v61 != v60 - 1)
      {
        while (1)
        {
          v62 = *v61;
          if (*v61)
            break;
          ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_80:
          ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, ", ", 2);
          if (++v61 == (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1))
            goto LABEL_89;
        }
        if (v62 >= 0xA)
        {
          if (v62 < 0x64)
          {
            v64 = &a00010203040506[2 * v62];
            *((_BYTE *)v8 + 17) = v64[1];
            v65 = *v64;
            v63 = 2;
LABEL_88:
            *((_BYTE *)v8 + 16) = v65;
            ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v63);
            goto LABEL_80;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
          LODWORD(v62) = (41 * v62) >> 12;
          v63 = 3;
        }
        else
        {
          v63 = 1;
        }
        v65 = v62 | 0x30;
        goto LABEL_88;
      }
LABEL_89:
      v66 = *v61;
      if (!*v61)
      {
        ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
        goto LABEL_143;
      }
      if (v66 < 0xA)
      {
        v67 = 1;
LABEL_141:
        v77 = v66 | 0x30;
        goto LABEL_142;
      }
      if (v66 >= 0x64)
      {
        *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2 * (*v61 % 0x64u)];
        v67 = 3;
        LODWORD(v66) = (41 * v66) >> 12;
        goto LABEL_141;
      }
      v76 = &a00010203040506[2 * v66];
      *((_BYTE *)v8 + 17) = v76[1];
      v77 = *v76;
      v67 = 2;
LABEL_142:
      *((_BYTE *)v8 + 16) = v77;
      ((void (*)(void (***)(void), void (****)(void), uint64_t))(**v8)[1])(*v8, v8 + 2, v67);
LABEL_143:
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "],\n", 3);
      v84 = v8 + 76;
      if (*((char *)v8 + 631) < 0)
        v84 = (_QWORD *)*v37;
      ((void (*)(void (***)(void), _QWORD *, unint64_t))(**v8)[1])(*v8, v84, v36);
      ((void (*)(void (***)(void), const char *, uint64_t))(**v8)[1])(*v8, "\"subtype\": ", 11);
      v85 = *(_QWORD *)(a2 + 8);
      if (!*(_BYTE *)(v85 + 25))
      {
        v87 = (**v8)[1];
LABEL_159:
        v87();
        goto LABEL_160;
      }
      v86 = *(unsigned __int8 *)(v85 + 24);
      if (v86)
      {
        if (v86 >= 0xA)
        {
          if (v86 < 0x64)
          {
            v88 = &a00010203040506[2 * v86];
            *((_BYTE *)v8 + 17) = v88[1];
            v89 = *v88;
LABEL_158:
            *((_BYTE *)v8 + 16) = v89;
            v87 = (**v8)[1];
            goto LABEL_159;
          }
          *(_WORD *)((char *)v8 + 17) = *(_WORD *)&a00010203040506[2
                                                                 * (v86
                                                                                   - 100
                                                                                   * ((41 * v86) >> 12))];
          LODWORD(v86) = (41 * v86) >> 12;
        }
        v89 = v86 | 0x30;
        goto LABEL_158;
      }
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 48);
LABEL_160:
      ((void (*)(void (***)(void), uint64_t))***v8)(*v8, 10);
      v69 = (**v8)[1];
LABEL_161:
      v69();
LABEL_162:
      v27 = (uint64_t (*)(void))***v8;
      return (void (****)(void))v27();
    case 9:
      v28 = (uint64_t (*)(void))(**result)[1];
      return (void (****)(void))v28();
    default:
      return result;
  }
}

uint64_t sub_2081E9874(uint64_t result, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  int v20;
  void *exception;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  void *v27;
  std::string v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  std::string::size_type v32;
  char __str[8];
  std::string::size_type v34;
  char v35;

  LOBYTE(v2) = *((char *)a2 + 23) < 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (!v3)
    return result;
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = result + 90;
  do
  {
    if ((v2 & 1) != 0)
      v15 = (uint64_t *)*a2;
    else
      v15 = a2;
    v16 = *((unsigned __int8 *)v15 + v6);
    if (v10)
      v11 = *((_BYTE *)v15 + v6) & 0x3F | (v11 << 6);
    else
      v11 = (0xFFu >> byte_208286240[v16]) & v16;
    v10 = byte_208286240[16 * v10 + 256 + byte_208286240[v16]];
    if (v10 != 1)
    {
      if (v10)
      {
        *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
        ++v7;
        goto LABEL_6;
      }
      switch(v11)
      {
        case 8u:
          *(_WORD *)(v12 + v9) = 25180;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 9u:
          *(_WORD *)(v12 + v9) = 29788;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xAu:
          *(_WORD *)(v12 + v9) = 28252;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xBu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
          goto LABEL_30;
        case 0xCu:
          *(_WORD *)(v12 + v9) = 26204;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0xDu:
          *(_WORD *)(v12 + v9) = 29276;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        case 0x22u:
          *(_WORD *)(v12 + v9) = 8796;
          v9 += 2;
          if ((unint64_t)(v9 - 500) <= 0xC)
            break;
          goto LABEL_23;
        default:
          if (v11 == 92)
          {
            *(_WORD *)(v12 + v9) = 23644;
            v9 += 2;
            if ((unint64_t)(v9 - 500) > 0xC)
              goto LABEL_23;
          }
          else
          {
LABEL_30:
            if (v11 > 0x1F)
            {
              *(_BYTE *)(v12 + v9++) = *((_BYTE *)v15 + v6);
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
            else
            {
              result = snprintf((char *)(v12 + v9), 7uLL, "\\u%04x", v11);
              v9 += 6;
              if ((unint64_t)(v9 - 500) > 0xC)
                goto LABEL_23;
            }
          }
          break;
      }
LABEL_34:
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v9);
      v10 = 0;
      v9 = 0;
      v8 = 0;
      v7 = 0;
      goto LABEL_6;
    }
    v17 = *((_DWORD *)v5 + 158);
    if ((v17 - 1) < 2)
    {
      v6 -= v7 != 0;
      if (v17 != 1)
      {
        v10 = 0;
        v7 = 0;
        v9 = v8;
        goto LABEL_6;
      }
      v9 = v8 + 3;
      v18 = v12 + v8;
      *(_WORD *)v18 = -16401;
      *(_BYTE *)(v18 + 2) = -67;
      if ((unint64_t)(v8 - 497) > 0xC)
      {
LABEL_23:
        v10 = 0;
        v7 = 0;
        v8 = v9;
        goto LABEL_6;
      }
      goto LABEL_34;
    }
    if (!v17)
    {
      v35 = 3;
      *(_DWORD *)__str = 0;
      snprintf(__str, 3uLL, "%.2X", v16);
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v28, v6);
      sub_207C96E8C("invalid UTF-8 byte at index ", &v28, &v29);
      sub_207C96E30(": 0x", &v29, &v30);
      if (v35 >= 0)
        v22 = __str;
      else
        v22 = *(char **)__str;
      if (v35 >= 0)
        v23 = v35;
      else
        v23 = v34;
      v24 = std::string::append(&v30, v22, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v32 = v24->__r_.__value_.__r.__words[2];
      v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      sub_207D1E5F8(316, (uint64_t)&v31, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v10 = 1;
LABEL_6:
    ++v6;
    v13 = *((char *)a2 + 23);
    v2 = v13 >> 31;
    v14 = a2[1];
    if (v13 >= 0)
      v14 = *((unsigned __int8 *)a2 + 23);
  }
  while (v6 < v14);
  if (v10)
  {
    v20 = *((_DWORD *)v5 + 158);
    switch(v20)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v12, v8);
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 2:
        v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 0:
        v35 = 3;
        *(_DWORD *)__str = 0;
        v26 = (uint64_t *)*a2;
        if (v13 >= 0)
          v26 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v26 + v14 - 1));
        v27 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_207D1E5F8(316, (uint64_t)&v31, (uint64_t)v27);
        __cxa_throw(v27, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
      default:
        return result;
    }
    return v19();
  }
  if (v9)
  {
    v19 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
    return v19();
  }
  return result;
}

void sub_2081E9D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v40)
  {
LABEL_7:
    if (a39 < 0)
      operator delete(a34);
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v39);
  goto LABEL_7;
}

void (****sub_2081E9E40(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5))(void)
{
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t (*v30)(void);
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;

  v10 = *a2;
  if (v10 == 2)
  {
    v21 = (uint64_t *)*((_QWORD *)a2 + 1);
    v22 = *v21;
    v23 = v21[1];
    v24 = **(_QWORD **)(a1 + 640);
    if (v22 != v23)
    {
      (*(void (**)(void))v24)();
      v25 = (uint64_t *)*((_QWORD *)a2 + 1);
      v26 = *v25;
      v27 = a1;
      if (*v25 != v25[1] - 16)
      {
        do
        {
          sub_2081E9E40(v27, v26, a3, a4, a5);
          (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
          v26 += 16;
          v27 = a1;
        }
        while (v26 != *(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - 16);
      }
      sub_2081E9E40(v27, v26, a3, a4, a5);
      v28 = ***(uint64_t (****)(void))(a1 + 640);
      return (void (****)(void))v28();
    }
    v30 = *(uint64_t (**)(void))(v24 + 8);
    return (void (****)(void))v30();
  }
  if (v10 != 1)
    return sub_2081E8884((void (****)(void))a1, (uint64_t)a2, a3, a4, a5);
  v11 = (uint64_t *)*((_QWORD *)a2 + 1);
  v12 = *v11;
  v13 = v11[1];
  v14 = **(_QWORD **)(a1 + 640);
  if (v12 == v13)
  {
    v30 = *(uint64_t (**)(void))(v14 + 8);
    return (void (****)(void))v30();
  }
  if (!(_DWORD)a3)
  {
    (*(void (**)(void))v14)();
    v31 = *((_QWORD *)a2 + 1);
    v32 = *(uint64_t **)v31;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v31 + 8) - *(_QWORD *)v31) >> 3) >= 2)
    {
      v33 = 1;
      do
      {
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
        sub_2081E9874(a1, v32);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
        sub_2081E9E40(a1, v32 + 3, 0, a4, a5);
        (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 44);
        v32 += 5;
        ++v33;
      }
      while (v33 < 0xCCCCCCCCCCCCCCCDLL
                  * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 3));
    }
    (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
    sub_2081E9874(a1, v32);
    (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\":", 2);
    sub_2081E9E40(a1, v32 + 3, 0, a4, a5);
    goto LABEL_28;
  }
  (*(void (**)(void))(v14 + 8))();
  v15 = (a5 + a4);
  v16 = (_QWORD *)(a1 + 664);
  if (*(char *)(a1 + 687) < 0)
  {
    v17 = *(_QWORD *)(a1 + 672);
    if (v17 >= v15)
      goto LABEL_7;
LABEL_31:
    std::string::resize((std::string *)(a1 + 664), 2 * v17, 32);
    goto LABEL_7;
  }
  v17 = *(unsigned __int8 *)(a1 + 687);
  if (v15 > v17)
    goto LABEL_31;
LABEL_7:
  v18 = *((_QWORD *)a2 + 1);
  v19 = *(uint64_t **)v18;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3) >= 2)
  {
    v20 = 1;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640));
      (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
      sub_2081E9874(a1, v19);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
      sub_2081E9E40(a1, v19 + 3, 1, a4, (a5 + a4));
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), ",\n", 2);
      v19 += 5;
      ++v20;
    }
    while (v20 < 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) - **((_QWORD **)a2 + 1)) >> 3));
  }
  v34 = (_QWORD *)(a1 + 664);
  if (*(char *)(a1 + 687) < 0)
    v34 = (_QWORD *)*v16;
  (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v34, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 34);
  sub_2081E9874(a1, v19);
  (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), "\": ", 3);
  sub_2081E9E40(a1, v19 + 3, 1, a4, (a5 + a4));
  (***(void (****)(_QWORD, uint64_t))(a1 + 640))(*(_QWORD *)(a1 + 640), 10);
  if (*(char *)(a1 + 687) < 0)
    v16 = (_QWORD *)*v16;
  (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 640) + 8))(*(_QWORD *)(a1 + 640), v16, a5);
LABEL_28:
  v28 = ***(uint64_t (****)(void))(a1 + 640);
  return (void (****)(void))v28();
}

uint64_t sub_2081EA2E8(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v12;
  uint64_t result;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  _BYTE *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  size_t v26;
  char *v27;
  char *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;
  char *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  int v53;
  int v54;
  char *v55;
  uint64_t v56;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  _BYTE *v66;
  unint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  size_t v71;
  _BYTE *v72;
  void **v73;
  size_t v74;
  char *v75;
  char *v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  unint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  size_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  __int128 *v92;
  unint64_t v93;
  __int128 v94;
  char *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  char v100;
  int v101;
  int v102;
  int v103;
  unsigned __int8 *v104;
  unint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  size_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unsigned __int8 *v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  size_t v124;
  char *v125;
  int v126;
  char *v127;
  unint64_t v128;
  char *v129;
  __int128 *v130;
  unint64_t v131;
  __int128 v132;
  char *v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  std::string::value_type v138;
  int v139;
  char *v140;
  __int128 *v141;
  unint64_t v142;
  __int128 v143;
  char *v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  char *v153;
  char v154;
  int v155;
  int v156;
  size_t v157;
  void *v158;
  uint64_t v159;
  size_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  int v167;
  unsigned __int8 *v168;
  unint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  _BYTE *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  size_t v176;
  char *v177;
  char *v178;
  unint64_t v179;
  char *v180;
  __int128 *v181;
  unint64_t v182;
  __int128 v183;
  char *v184;
  uint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  char v189;
  int v190;
  void *v191;
  uint64_t v192;
  size_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  int v198;
  int v199;
  _QWORD *v200;
  uint64_t v201;
  const char *v202;
  unint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int64x2_t v208;
  int64x2_t v209;
  char *__endptr;

  if (!*(_QWORD *)(a1 + 32))
  {
    if (sub_20809B688(a1) == 239)
    {
      if (sub_20809B688(a1) != 187 || sub_20809B688(a1) != 191)
      {
        v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
        goto LABEL_35;
      }
    }
    else
    {
      v3 = (_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(a1 + 24) = 1;
      --*(_QWORD *)(a1 + 32);
      if (v4 || (v3 = (_QWORD *)(a1 + 48), (v4 = *(_QWORD *)(a1 + 48)) != 0))
        *v3 = v4 - 1;
      if (*(_DWORD *)(a1 + 20) != -1)
        --*(_QWORD *)(a1 + 64);
    }
  }
  sub_2081EBB74(a1);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = (uint64_t *)(a1 + 48);
    while (1)
    {
      if (*(_DWORD *)(a1 + 20) != 47)
        goto LABEL_30;
      v6 = sub_20809B688(a1);
      if (v6 != 47)
        break;
      do
        v10 = sub_20809B688(a1);
      while ((v10 + 1) > 0xE || ((1 << (v10 + 1)) & 0x4803) == 0);
LABEL_29:
      sub_2081EBB74(a1);
      if (!*(_BYTE *)(a1 + 16))
        goto LABEL_30;
    }
    if (v6 == 42)
    {
      do
      {
        while (1)
        {
          v7 = sub_20809B688(a1);
          if (v7 != 42)
            break;
          if (sub_20809B688(a1) == 47)
            goto LABEL_29;
          *(_BYTE *)(a1 + 24) = 1;
          v8 = *(_QWORD *)(a1 + 40);
          --*(_QWORD *)(a1 + 32);
          v9 = (_QWORD *)(a1 + 40);
          if (v8 || (v8 = *v5, v9 = (_QWORD *)(a1 + 48), *v5))
            *v9 = v8 - 1;
          if (*(_DWORD *)(a1 + 20) != -1)
            --*(_QWORD *)(a1 + 64);
        }
      }
      while ((v7 + 1) >= 2);
      v2 = "invalid comment; missing closing '*/'";
    }
    else
    {
      v2 = "invalid comment; expecting '/' or '*' after '/'";
    }
LABEL_35:
    *(_QWORD *)(a1 + 104) = v2;
    return 14;
  }
LABEL_30:
  v12 = *(_DWORD *)(a1 + 20);
  result = 8;
  switch(v12)
  {
    case -1:
    case 0:
      return 15;
    case 34:
      if (*(char *)(a1 + 103) < 0)
      {
        **(_BYTE **)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v64 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        *(_BYTE *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 103) = 0;
        LOBYTE(v64) = 34;
      }
      v65 = (_QWORD *)(a1 + 56);
      v66 = *(_BYTE **)(a1 + 56);
      *(_QWORD *)(a1 + 64) = v66;
      v67 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v66 >= v67)
      {
        v69 = v67 - (_QWORD)v66;
        v70 = 2 * v69;
        if (2 * v69 <= 1)
          v70 = 1;
        if (v69 >= 0x3FFFFFFFFFFFFFFFLL)
          v71 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        v72 = operator new(v71);
        *v72 = v64;
        v68 = v72 + 1;
        *(_QWORD *)(a1 + 56) = v72;
        *(_QWORD *)(a1 + 64) = v72 + 1;
        *(_QWORD *)(a1 + 72) = &v72[v71];
        if (v66)
          operator delete(v66);
      }
      else
      {
        *v66 = v64;
        v68 = v66 + 1;
      }
      v73 = (void **)(a1 + 80);
      *(_QWORD *)(a1 + 64) = v68;
      v209 = vdupq_n_s64(1uLL);
      while (2)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v209);
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v77 = *(_DWORD *)(a1 + 20);
          if (v77 == -1)
            goto LABEL_430;
LABEL_166:
          v81 = *(_BYTE **)(a1 + 64);
          v80 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v81 < v80)
          {
            *v81 = v77;
            v82 = (uint64_t)(v81 + 1);
            goto LABEL_196;
          }
          v83 = (_BYTE *)*v65;
          v84 = (unint64_t)&v81[-*v65];
          v85 = v84 + 1;
          if ((uint64_t)(v84 + 1) < 0)
            goto LABEL_466;
          v86 = v80 - (_QWORD)v83;
          if (2 * v86 > v85)
            v85 = 2 * v86;
          if (v86 >= 0x3FFFFFFFFFFFFFFFLL)
            v87 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v87 = v85;
          if (v87)
          {
            v88 = (char *)operator new(v87);
            v89 = &v88[v84];
            v88[v84] = v77;
            v82 = (uint64_t)&v88[v84 + 1];
            if (v81 == v83)
            {
LABEL_194:
              *(_QWORD *)(a1 + 56) = v89;
              *(_QWORD *)(a1 + 64) = v82;
              *(_QWORD *)(a1 + 72) = &v88[v87];
              if (v81)
                operator delete(v81);
LABEL_196:
              *(_QWORD *)(a1 + 64) = v82;
              v101 = *(_DWORD *)(a1 + 20);
              if (v101 == 10)
              {
                v197 = *(_QWORD *)(a1 + 48) + 1;
                *(_QWORD *)(a1 + 40) = 0;
                *(_QWORD *)(a1 + 48) = v197;
                v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
                goto LABEL_35;
              }
              v2 = "invalid string: missing closing quote";
              switch(v101)
              {
                case -1:
                  goto LABEL_35;
                case 0:
                  v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
                  goto LABEL_35;
                case 1:
                  v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
                  goto LABEL_35;
                case 2:
                  v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
                  goto LABEL_35;
                case 3:
                  v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
                  goto LABEL_35;
                case 4:
                  v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
                  goto LABEL_35;
                case 5:
                  v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
                  goto LABEL_35;
                case 6:
                  v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
                  goto LABEL_35;
                case 7:
                  v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
                  goto LABEL_35;
                case 8:
                  v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
                  goto LABEL_35;
                case 9:
                  v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
                  goto LABEL_35;
                case 11:
                  v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
                  goto LABEL_35;
                case 12:
                  v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
                  goto LABEL_35;
                case 13:
                  v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
                  goto LABEL_35;
                case 14:
                  v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
                  goto LABEL_35;
                case 15:
                  v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
                  goto LABEL_35;
                case 16:
                  v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
                  goto LABEL_35;
                case 17:
                  v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
                  goto LABEL_35;
                case 18:
                  v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
                  goto LABEL_35;
                case 19:
                  v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
                  goto LABEL_35;
                case 20:
                  v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
                  goto LABEL_35;
                case 21:
                  v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
                  goto LABEL_35;
                case 22:
                  v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
                  goto LABEL_35;
                case 23:
                  v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
                  goto LABEL_35;
                case 24:
                  v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
                  goto LABEL_35;
                case 25:
                  v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
                  goto LABEL_35;
                case 26:
                  v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
                  goto LABEL_35;
                case 27:
                  v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
                  goto LABEL_35;
                case 28:
                  v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
                  goto LABEL_35;
                case 29:
                  v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
                  goto LABEL_35;
                case 30:
                  v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
                  goto LABEL_35;
                case 31:
                  v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
                  goto LABEL_35;
                case 32:
                case 33:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                  goto LABEL_364;
                case 34:
                  return 4;
                case 92:
                  v139 = sub_20809B688(a1);
                  v2 = "invalid string: forbidden character after backslash";
                  switch(v139)
                  {
                    case '"':
                      std::string::push_back((std::string *)(a1 + 80), 34);
                      continue;
                    case '/':
                      std::string::push_back((std::string *)(a1 + 80), 47);
                      continue;
                    case '\\':
                      std::string::push_back((std::string *)(a1 + 80), 92);
                      continue;
                    case 'b':
                      std::string::push_back((std::string *)(a1 + 80), 8);
                      continue;
                    case 'f':
                      std::string::push_back((std::string *)(a1 + 80), 12);
                      continue;
                    case 'n':
                      std::string::push_back((std::string *)(a1 + 80), 10);
                      continue;
                    case 'r':
                      std::string::push_back((std::string *)(a1 + 80), 13);
                      continue;
                    case 't':
                      std::string::push_back((std::string *)(a1 + 80), 9);
                      continue;
                    case 'u':
                      v150 = sub_20809B8D8(a1);
                      if (v150 == -1)
                        goto LABEL_467;
                      v151 = v150;
                      if ((v150 & 0xFFFFFC00) == 0xD800)
                      {
                        if (sub_20809B688(a1) != 92 || sub_20809B688(a1) != 117)
                          goto LABEL_468;
                        v152 = sub_20809B8D8(a1);
                        if (v152 == -1)
                        {
LABEL_467:
                          v2 = "invalid string: '\\u' must be followed by 4 hex digits";
                          goto LABEL_35;
                        }
                        if (v152 >> 10 != 55)
                        {
LABEL_468:
                          v2 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                          goto LABEL_35;
                        }
                        v151 = v152 + (v151 << 10) - 56613888;
                        goto LABEL_292;
                      }
                      if ((v150 & 0xFFFFFC00) == 0xDC00)
                      {
                        v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                        goto LABEL_35;
                      }
                      if ((int)v150 > 127)
                      {
                        if (v150 > 0x7FF)
                        {
                          if (!HIWORD(v150))
                          {
                            std::string::push_back((std::string *)(a1 + 80), (v150 >> 12) | 0xE0);
                            goto LABEL_293;
                          }
LABEL_292:
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 18) | 0xF0);
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 12) & 0x3F | 0x80);
LABEL_293:
                          std::string::push_back((std::string *)(a1 + 80), (v151 >> 6) & 0x3F | 0x80);
                          std::string::push_back((std::string *)(a1 + 80), v151 & 0x3F | 0x80);
                          continue;
                        }
                        std::string::push_back((std::string *)(a1 + 80), (v150 >> 6) | 0xC0);
                        v138 = v151 & 0x3F | 0x80;
                      }
                      else
                      {
                        v138 = v150;
                      }
LABEL_258:
                      std::string::push_back((std::string *)(a1 + 80), v138);
                      continue;
                    default:
                      goto LABEL_35;
                  }
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 217:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                  if (*(_BYTE *)(a1 + 24))
                  {
                    *(_BYTE *)(a1 + 24) = 0;
                    v102 = *(_DWORD *)(a1 + 20);
                  }
                  else
                  {
                    v104 = *(unsigned __int8 **)a1;
                    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
                    {
                      v102 = -1;
                    }
                    else
                    {
                      v102 = *v104;
                      *(_QWORD *)a1 = v104 + 1;
                    }
                    *(_DWORD *)(a1 + 20) = v102;
                  }
                  if (v102 == -1)
                    goto LABEL_431;
                  v106 = *(_BYTE **)(a1 + 64);
                  v105 = *(_QWORD *)(a1 + 72);
                  if ((unint64_t)v106 < v105)
                  {
                    *v106 = v102;
                    v107 = (uint64_t)(v106 + 1);
                    goto LABEL_279;
                  }
                  v108 = (_BYTE *)*v65;
                  v109 = (unint64_t)&v106[-*v65];
                  v110 = v109 + 1;
                  if ((uint64_t)(v109 + 1) < 0)
                    goto LABEL_466;
                  v111 = v105 - (_QWORD)v108;
                  if (2 * v111 > v110)
                    v110 = 2 * v111;
                  if (v111 >= 0x3FFFFFFFFFFFFFFFLL)
                    v112 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v112 = v110;
                  if (v112)
                    v113 = (char *)operator new(v112);
                  else
                    v113 = 0;
                  v114 = &v113[v109];
                  v113[v109] = v102;
                  v107 = (uint64_t)&v113[v109 + 1];
                  if (v106 == v108)
                    goto LABEL_277;
                  if (v109 < 8 || (unint64_t)(v108 - v113) < 0x20)
                    goto LABEL_274;
                  if (v109 >= 0x20)
                  {
                    v115 = v109 & 0xFFFFFFFFFFFFFFE0;
                    v129 = &v113[v109 - 16];
                    v130 = (__int128 *)(v106 - 16);
                    v131 = v109 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v132 = *v130;
                      *((_OWORD *)v129 - 1) = *(v130 - 1);
                      *(_OWORD *)v129 = v132;
                      v129 -= 32;
                      v130 -= 2;
                      v131 -= 32;
                    }
                    while (v131);
                    if (v109 == v115)
                      goto LABEL_276;
                    if ((v109 & 0x18) == 0)
                    {
                      v114 -= v115;
                      v106 -= v115;
LABEL_274:
                      v148 = v114 - 1;
                      do
                      {
                        v149 = *--v106;
                        *v148-- = v149;
                      }
                      while (v106 != v108);
LABEL_276:
                      v106 = (_BYTE *)*v65;
                      v114 = v113;
LABEL_277:
                      *(_QWORD *)(a1 + 56) = v114;
                      *(_QWORD *)(a1 + 64) = v107;
                      *(_QWORD *)(a1 + 72) = &v113[v112];
                      if (v106)
                        operator delete(v106);
LABEL_279:
                      *(_QWORD *)(a1 + 64) = v107;
                      v101 = *(_DWORD *)(a1 + 20);
                      if (v101 == 10)
                        goto LABEL_428;
LABEL_363:
                      if ((v101 - 192) >= 0xFFFFFFC0)
                      {
LABEL_364:
                        v190 = *(char *)(a1 + 103);
                        if ((v190 & 0x80000000) == 0)
                        {
                          if (*(_BYTE *)(a1 + 103) != 22)
                          {
                            v74 = *(unsigned __int8 *)(a1 + 103);
                            *(_BYTE *)(a1 + 103) = (v190 + 1) & 0x7F;
                            v75 = (char *)(a1 + 80);
LABEL_160:
                            v76 = &v75[v74];
                            *v76 = v101;
                            v76[1] = 0;
                            continue;
                          }
                          v74 = 22;
                          v191 = (void *)(a1 + 80);
                          goto LABEL_370;
                        }
                        v192 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                        v74 = v192 - 1;
                        if (*(_QWORD *)(a1 + 88) != v192 - 1)
                        {
                          v75 = (char *)*v73;
                          v74 = *(_QWORD *)(a1 + 88);
LABEL_383:
                          *(_QWORD *)(a1 + 88) = v74 + 1;
                          goto LABEL_160;
                        }
                        if (v192 != 0x7FFFFFFFFFFFFFF8)
                        {
                          v191 = *v73;
                          v193 = 0x7FFFFFFFFFFFFFF7;
                          if (v74 >= 0x3FFFFFFFFFFFFFF3)
                          {
LABEL_378:
                            v196 = (char *)operator new(v193);
                            v75 = v196;
                            if (!v74 || (memmove(v196, v191, v74), v74 != 22))
                              operator delete(v191);
                            *(_QWORD *)(a1 + 80) = v75;
                            *(_QWORD *)(a1 + 96) = v193 | 0x8000000000000000;
                            goto LABEL_383;
                          }
LABEL_370:
                          if (v74 + 1 > 2 * v74)
                            v194 = v74 + 1;
                          else
                            v194 = 2 * v74;
                          v195 = (v194 & 0x7FFFFFFFFFFFFFF8) + 8;
                          if ((v194 | 7) != 0x17)
                            v195 = v194 | 7;
                          if (v194 >= 0x17)
                            v193 = v195 + 1;
                          else
                            v193 = 23;
                          goto LABEL_378;
                        }
LABEL_470:
                        sub_207C95C50();
                      }
LABEL_431:
                      v2 = "invalid string: ill-formed UTF-8 byte";
                      goto LABEL_35;
                    }
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v114 -= v109 & 0xFFFFFFFFFFFFFFF8;
                  v133 = &v113[&v106[-v115] - v108 - 8];
                  v134 = (uint64_t *)&v106[-v115 - 8];
                  v135 = v115 - (v109 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v136 = *v134--;
                    *(_QWORD *)v133 = v136;
                    v133 -= 8;
                    v135 += 8;
                  }
                  while (v135);
                  v106 -= v109 & 0xFFFFFFFFFFFFFFF8;
                  if (v109 == (v109 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_276;
                  goto LABEL_274;
                case 224:
                  std::string::push_back((std::string *)(a1 + 80), -32);
                  sub_20809B688(a1);
                  v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 192) < 0xFFFFFFE0)
                    goto LABEL_431;
                  goto LABEL_256;
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 234:
                case 235:
                case 236:
                case 238:
                case 239:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                  if (*(_BYTE *)(a1 + 24))
                  {
                    *(_BYTE *)(a1 + 24) = 0;
                    v103 = *(_DWORD *)(a1 + 20);
                  }
                  else
                  {
                    v116 = *(unsigned __int8 **)a1;
                    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
                    {
                      v103 = -1;
                    }
                    else
                    {
                      v103 = *v116;
                      *(_QWORD *)a1 = v116 + 1;
                    }
                    *(_DWORD *)(a1 + 20) = v103;
                  }
                  if (v103 == -1)
                    goto LABEL_431;
                  v118 = *(_BYTE **)(a1 + 64);
                  v117 = *(_QWORD *)(a1 + 72);
                  if ((unint64_t)v118 < v117)
                  {
                    *v118 = v103;
                    v119 = (uint64_t)(v118 + 1);
                    goto LABEL_303;
                  }
                  v120 = (_BYTE *)*v65;
                  v121 = (unint64_t)&v118[-*v65];
                  v122 = v121 + 1;
                  if ((uint64_t)(v121 + 1) < 0)
                    goto LABEL_466;
                  v123 = v117 - (_QWORD)v120;
                  if (2 * v123 > v122)
                    v122 = 2 * v123;
                  if (v123 >= 0x3FFFFFFFFFFFFFFFLL)
                    v124 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v122;
                  if (v124)
                    v125 = (char *)operator new(v124);
                  else
                    v125 = 0;
                  v127 = &v125[v121];
                  v125[v121] = v103;
                  v119 = (uint64_t)&v125[v121 + 1];
                  if (v118 == v120)
                    goto LABEL_301;
                  if (v121 < 8 || (unint64_t)(v120 - v125) < 0x20)
                    goto LABEL_298;
                  if (v121 >= 0x20)
                  {
                    v128 = v121 & 0xFFFFFFFFFFFFFFE0;
                    v140 = &v125[v121 - 16];
                    v141 = (__int128 *)(v118 - 16);
                    v142 = v121 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v143 = *v141;
                      *((_OWORD *)v140 - 1) = *(v141 - 1);
                      *(_OWORD *)v140 = v143;
                      v140 -= 32;
                      v141 -= 2;
                      v142 -= 32;
                    }
                    while (v142);
                    if (v121 == v128)
                      goto LABEL_300;
                    if ((v121 & 0x18) == 0)
                    {
                      v127 -= v128;
                      v118 -= v128;
LABEL_298:
                      v153 = v127 - 1;
                      do
                      {
                        v154 = *--v118;
                        *v153-- = v154;
                      }
                      while (v118 != v120);
LABEL_300:
                      v118 = (_BYTE *)*v65;
                      v127 = v125;
LABEL_301:
                      *(_QWORD *)(a1 + 56) = v127;
                      *(_QWORD *)(a1 + 64) = v119;
                      *(_QWORD *)(a1 + 72) = &v125[v124];
                      if (v118)
                        operator delete(v118);
LABEL_303:
                      *(_QWORD *)(a1 + 64) = v119;
                      v155 = *(_DWORD *)(a1 + 20);
                      if (v155 == 10)
                        goto LABEL_428;
                      if ((v155 - 192) < 0xFFFFFFC0)
                        goto LABEL_431;
                      v156 = *(char *)(a1 + 103);
                      if (v156 < 0)
                      {
                        v159 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                        v157 = v159 - 1;
                        if (*(_QWORD *)(a1 + 88) != v159 - 1)
                        {
                          v162 = (char *)*v73;
                          v157 = *(_QWORD *)(a1 + 88);
LABEL_325:
                          *(_QWORD *)(a1 + 88) = v157 + 1;
LABEL_326:
                          v166 = &v162[v157];
                          *v166 = v155;
                          v166[1] = 0;
                          *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                          if (*(_BYTE *)(a1 + 24))
                          {
                            *(_BYTE *)(a1 + 24) = 0;
                            v167 = *(_DWORD *)(a1 + 20);
                          }
                          else
                          {
                            v168 = *(unsigned __int8 **)a1;
                            if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
                            {
                              v167 = -1;
                            }
                            else
                            {
                              v167 = *v168;
                              *(_QWORD *)a1 = v168 + 1;
                            }
                            *(_DWORD *)(a1 + 20) = v167;
                          }
                          if (v167 == -1)
                            goto LABEL_431;
                          v170 = *(_BYTE **)(a1 + 64);
                          v169 = *(_QWORD *)(a1 + 72);
                          if ((unint64_t)v170 < v169)
                          {
                            *v170 = v167;
                            v171 = (uint64_t)(v170 + 1);
                            goto LABEL_362;
                          }
                          v172 = (_BYTE *)*v65;
                          v173 = (unint64_t)&v170[-*v65];
                          v174 = v173 + 1;
                          if ((uint64_t)(v173 + 1) >= 0)
                          {
                            v175 = v169 - (_QWORD)v172;
                            if (2 * v175 > v174)
                              v174 = 2 * v175;
                            if (v175 >= 0x3FFFFFFFFFFFFFFFLL)
                              v176 = 0x7FFFFFFFFFFFFFFFLL;
                            else
                              v176 = v174;
                            if (v176)
                              v177 = (char *)operator new(v176);
                            else
                              v177 = 0;
                            v178 = &v177[v173];
                            v177[v173] = v167;
                            v171 = (uint64_t)&v177[v173 + 1];
                            if (v170 == v172)
                              goto LABEL_360;
                            if (v173 >= 8 && (unint64_t)(v172 - v177) >= 0x20)
                            {
                              if (v173 < 0x20)
                              {
                                v179 = 0;
                                goto LABEL_352;
                              }
                              v179 = v173 & 0xFFFFFFFFFFFFFFE0;
                              v180 = &v177[v173 - 16];
                              v181 = (__int128 *)(v170 - 16);
                              v182 = v173 & 0xFFFFFFFFFFFFFFE0;
                              do
                              {
                                v183 = *v181;
                                *((_OWORD *)v180 - 1) = *(v181 - 1);
                                *(_OWORD *)v180 = v183;
                                v180 -= 32;
                                v181 -= 2;
                                v182 -= 32;
                              }
                              while (v182);
                              if (v173 == v179)
                                goto LABEL_359;
                              if ((v173 & 0x18) != 0)
                              {
LABEL_352:
                                v178 -= v173 & 0xFFFFFFFFFFFFFFF8;
                                v184 = &v177[&v170[-v179] - v172 - 8];
                                v185 = (uint64_t *)&v170[-v179 - 8];
                                v186 = v179 - (v173 & 0xFFFFFFFFFFFFFFF8);
                                do
                                {
                                  v187 = *v185--;
                                  *(_QWORD *)v184 = v187;
                                  v184 -= 8;
                                  v186 += 8;
                                }
                                while (v186);
                                v170 -= v173 & 0xFFFFFFFFFFFFFFF8;
                                if (v173 == (v173 & 0xFFFFFFFFFFFFFFF8))
                                  goto LABEL_359;
                                goto LABEL_357;
                              }
                              v178 -= v179;
                              v170 -= v179;
                            }
LABEL_357:
                            v188 = v178 - 1;
                            do
                            {
                              v189 = *--v170;
                              *v188-- = v189;
                            }
                            while (v170 != v172);
LABEL_359:
                            v170 = (_BYTE *)*v65;
                            v178 = v177;
LABEL_360:
                            *(_QWORD *)(a1 + 56) = v178;
                            *(_QWORD *)(a1 + 64) = v171;
                            *(_QWORD *)(a1 + 72) = &v177[v176];
                            if (v170)
                              operator delete(v170);
LABEL_362:
                            *(_QWORD *)(a1 + 64) = v171;
                            v101 = *(_DWORD *)(a1 + 20);
                            if (v101 != 10)
                              goto LABEL_363;
LABEL_428:
                            v206 = *(_QWORD *)(a1 + 48) + 1;
                            *(_QWORD *)(a1 + 40) = 0;
                            *(_QWORD *)(a1 + 48) = v206;
                            v2 = "invalid string: ill-formed UTF-8 byte";
                            goto LABEL_35;
                          }
LABEL_466:
                          sub_207CA420C();
                        }
                        if (v159 == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_470;
                        v158 = *v73;
                        v160 = 0x7FFFFFFFFFFFFFF7;
                        if (v157 >= 0x3FFFFFFFFFFFFFF3)
                        {
LABEL_320:
                          v165 = (char *)operator new(v160);
                          v162 = v165;
                          if (!v157 || (memmove(v165, v158, v157), v157 != 22))
                            operator delete(v158);
                          *(_QWORD *)(a1 + 80) = v162;
                          *(_QWORD *)(a1 + 96) = v160 | 0x8000000000000000;
                          goto LABEL_325;
                        }
                      }
                      else
                      {
                        if (*(_BYTE *)(a1 + 103) != 22)
                        {
                          v157 = *(unsigned __int8 *)(a1 + 103);
                          *(_BYTE *)(a1 + 103) = (v156 + 1) & 0x7F;
                          v162 = (char *)(a1 + 80);
                          goto LABEL_326;
                        }
                        v157 = 22;
                        v158 = (void *)(a1 + 80);
                      }
                      if (v157 + 1 > 2 * v157)
                        v161 = v157 + 1;
                      else
                        v161 = 2 * v157;
                      if (v161 >= 0x17)
                      {
                        v163 = (v161 & 0x7FFFFFFFFFFFFFF8) + 8;
                        v164 = v161 | 7;
                        if (v164 == 23)
                          v164 = v163;
                        v160 = v164 + 1;
                      }
                      else
                      {
                        v160 = 23;
                      }
                      goto LABEL_320;
                    }
                  }
                  else
                  {
                    v128 = 0;
                  }
                  v127 -= v121 & 0xFFFFFFFFFFFFFFF8;
                  v144 = &v125[&v118[-v128] - v120 - 8];
                  v145 = (uint64_t *)&v118[-v128 - 8];
                  v146 = v128 - (v121 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v147 = *v145--;
                    *(_QWORD *)v144 = v147;
                    v144 -= 8;
                    v146 += 8;
                  }
                  while (v146);
                  v118 -= v121 & 0xFFFFFFFFFFFFFFF8;
                  if (v121 == (v121 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_300;
                  goto LABEL_298;
                case 237:
                  std::string::push_back((std::string *)(a1 + 80), -19);
                  sub_20809B688(a1);
                  v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 160) < 0xFFFFFFE0)
                    goto LABEL_431;
                  goto LABEL_256;
                case 240:
                  std::string::push_back((std::string *)(a1 + 80), -16);
                  sub_20809B688(a1);
                  v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 192) < 0xFFFFFFD0)
                    goto LABEL_431;
                  goto LABEL_255;
                case 241:
                case 242:
                case 243:
                  std::string::push_back((std::string *)(a1 + 80), v101);
                  sub_20809B688(a1);
                  v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 192) < 0xFFFFFFC0)
                    goto LABEL_431;
                  goto LABEL_255;
                case 244:
                  std::string::push_back((std::string *)(a1 + 80), -12);
                  sub_20809B688(a1);
                  v126 = *(_DWORD *)(a1 + 20);
                  if ((v126 - 144) < 0xFFFFFFF0)
                    goto LABEL_431;
LABEL_255:
                  std::string::push_back((std::string *)(a1 + 80), v126);
                  sub_20809B688(a1);
                  v137 = *(_DWORD *)(a1 + 20);
                  if ((v137 - 192) < 0xFFFFFFC0)
                    goto LABEL_431;
LABEL_256:
                  std::string::push_back((std::string *)(a1 + 80), v137);
                  sub_20809B688(a1);
                  if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0)
                    goto LABEL_431;
                  v138 = *(_DWORD *)(a1 + 20);
                  goto LABEL_258;
                default:
                  goto LABEL_431;
              }
            }
          }
          else
          {
            v88 = 0;
            v89 = &v81[-*v65];
            *(_BYTE *)v84 = v77;
            v82 = v84 + 1;
            if (v81 == v83)
              goto LABEL_194;
          }
          if (v84 >= 8 && (unint64_t)(v83 - v88) >= 0x20)
          {
            if (v84 < 0x20)
            {
              v90 = 0;
              goto LABEL_186;
            }
            v90 = v84 & 0xFFFFFFFFFFFFFFE0;
            v91 = &v88[v84 - 16];
            v92 = (__int128 *)(v81 - 16);
            v93 = v84 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v94 = *v92;
              *((_OWORD *)v91 - 1) = *(v92 - 1);
              *(_OWORD *)v91 = v94;
              v91 -= 32;
              v92 -= 2;
              v93 -= 32;
            }
            while (v93);
            if (v84 == v90)
              goto LABEL_193;
            if ((v84 & 0x18) != 0)
            {
LABEL_186:
              v89 -= v84 & 0xFFFFFFFFFFFFFFF8;
              v95 = &v88[&v81[-v90] - v83 - 8];
              v96 = (uint64_t *)&v81[-v90 - 8];
              v97 = v90 - (v84 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v98 = *v96--;
                *(_QWORD *)v95 = v98;
                v95 -= 8;
                v97 += 8;
              }
              while (v97);
              v81 -= v84 & 0xFFFFFFFFFFFFFFF8;
              if (v84 == (v84 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_193;
              goto LABEL_191;
            }
            v89 -= v90;
            v81 -= v90;
          }
LABEL_191:
          v99 = v89 - 1;
          do
          {
            v100 = *--v81;
            *v99-- = v100;
          }
          while (v81 != v83);
LABEL_193:
          v81 = (_BYTE *)*v65;
          v89 = v88;
          goto LABEL_194;
        }
        break;
      }
      v78 = *(unsigned __int8 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
      }
      else
      {
        v79 = *v78;
        LOBYTE(v77) = *v78;
        *(_QWORD *)a1 = v78 + 1;
        *(_DWORD *)(a1 + 20) = v79;
        if (v79 != -1)
          goto LABEL_166;
      }
LABEL_430:
      v2 = "invalid string: missing closing quote";
      goto LABEL_35;
    case 44:
      return 13;
    case 45:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      if (*(char *)(a1 + 103) < 0)
      {
        **(_BYTE **)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v12 = *(_DWORD *)(a1 + 20);
        v15 = (_QWORD *)(a1 + 56);
        v14 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 64) = v14;
        v16 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v14 < v16)
          goto LABEL_33;
      }
      else
      {
        *(_BYTE *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 103) = 0;
        v15 = (_QWORD *)(a1 + 56);
        v14 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 64) = v14;
        v16 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v14 < v16)
        {
LABEL_33:
          *v14 = v12;
          v17 = v14 + 1;
          goto LABEL_45;
        }
      }
      v18 = v16 - (_QWORD)v14;
      v19 = 2 * v18;
      if (2 * v18 <= 1)
        v19 = 1;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v21 = operator new(v20);
      *v21 = v12;
      v17 = v21 + 1;
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = v21 + 1;
      *(_QWORD *)(a1 + 72) = &v21[v20];
      if (v14)
        operator delete(v14);
LABEL_45:
      v22 = (const char *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = v17;
      v23 = *(_DWORD *)(a1 + 20);
      v24 = 5;
      if ((v23 - 49) >= 9)
      {
        if (v23 != 48)
        {
          if (v23 == 45)
            std::string::push_back((std::string *)(a1 + 80), 45);
          v62 = sub_20809B688(a1);
          if ((v62 - 49) < 9)
          {
            v23 = *(_DWORD *)(a1 + 20);
            v25 = 6;
            goto LABEL_47;
          }
          if (v62 != 48)
          {
            v2 = "invalid number; expected digit after '-'";
            goto LABEL_35;
          }
          v23 = *(_DWORD *)(a1 + 20);
          v24 = 6;
        }
        std::string::push_back((std::string *)(a1 + 80), v23);
        v198 = sub_20809B688(a1);
        if (v198 == 46)
        {
LABEL_111:
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 136));
          if (sub_20809B688(a1) - 48 > 9)
          {
            v2 = "invalid number; expected digit after '.'";
            goto LABEL_35;
          }
          do
          {
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
            v61 = sub_20809B688(a1);
          }
          while ((v61 - 48) < 0xA);
          if (v61 != 101 && v61 != 69)
          {
LABEL_404:
            v24 = 7;
            goto LABEL_405;
          }
        }
        else if (v198 != 69 && v198 != 101)
        {
          goto LABEL_405;
        }
        v53 = *(_DWORD *)(a1 + 20);
LABEL_402:
        std::string::push_back((std::string *)(a1 + 80), v53);
        v199 = sub_20809B688(a1);
        if ((v199 - 48) >= 0xA)
        {
          if (v199 != 43 && v199 != 45)
          {
            v2 = "invalid number; expected '+', '-', or digit after exponent";
            goto LABEL_35;
          }
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          if (sub_20809B688(a1) - 48 >= 0xA)
          {
            v2 = "invalid number; expected digit after exponent sign";
            goto LABEL_35;
          }
        }
        do
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        while (sub_20809B688(a1) - 48 < 0xA);
        goto LABEL_404;
      }
      v25 = 5;
LABEL_47:
      v207 = v25;
      std::string::push_back((std::string *)(a1 + 80), v23);
      v208 = vdupq_n_s64(1uLL);
      while (1)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v208);
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v29 = *(_DWORD *)(a1 + 20);
          if (v29 == -1)
            goto LABEL_107;
        }
        else
        {
          v30 = *(unsigned __int8 **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
LABEL_107:
            v24 = v207;
            goto LABEL_405;
          }
          v31 = *v30;
          LOBYTE(v29) = *v30;
          *(_QWORD *)a1 = v30 + 1;
          *(_DWORD *)(a1 + 20) = v31;
          if (v31 == -1)
            goto LABEL_107;
        }
        v33 = *(_BYTE **)(a1 + 64);
        v32 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v33 < v32)
        {
          *v33 = v29;
          v34 = (uint64_t)(v33 + 1);
          goto LABEL_85;
        }
        v35 = (_BYTE *)*v15;
        v36 = (unint64_t)&v33[-*v15];
        v37 = v36 + 1;
        if ((uint64_t)(v36 + 1) < 0)
          sub_207CA420C();
        v38 = v32 - (_QWORD)v35;
        if (2 * v38 > v37)
          v37 = 2 * v38;
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
          v39 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (!v39)
        {
          v40 = 0;
          v41 = &v33[-*v15];
          *(_BYTE *)v36 = v29;
          v34 = v36 + 1;
          if (v33 == v35)
            goto LABEL_83;
LABEL_67:
          if (v36 >= 8 && (unint64_t)(v35 - v40) >= 0x20)
          {
            if (v36 < 0x20)
            {
              v42 = 0;
              goto LABEL_75;
            }
            v42 = v36 & 0xFFFFFFFFFFFFFFE0;
            v43 = &v40[v36 - 16];
            v44 = (__int128 *)(v33 - 16);
            v45 = v36 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v46 = *v44;
              *((_OWORD *)v43 - 1) = *(v44 - 1);
              *(_OWORD *)v43 = v46;
              v43 -= 32;
              v44 -= 2;
              v45 -= 32;
            }
            while (v45);
            if (v36 == v42)
              goto LABEL_82;
            if ((v36 & 0x18) != 0)
            {
LABEL_75:
              v41 -= v36 & 0xFFFFFFFFFFFFFFF8;
              v47 = &v40[&v33[-v42] - v35 - 8];
              v48 = (uint64_t *)&v33[-v42 - 8];
              v49 = v42 - (v36 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v50 = *v48--;
                *(_QWORD *)v47 = v50;
                v47 -= 8;
                v49 += 8;
              }
              while (v49);
              v33 -= v36 & 0xFFFFFFFFFFFFFFF8;
              if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_82;
              goto LABEL_80;
            }
            v41 -= v42;
            v33 -= v42;
          }
LABEL_80:
          v51 = v41 - 1;
          do
          {
            v52 = *--v33;
            *v51-- = v52;
          }
          while (v33 != v35);
LABEL_82:
          v33 = (_BYTE *)*v15;
          v41 = v40;
          goto LABEL_83;
        }
        v40 = (char *)operator new(v39);
        v41 = &v40[v36];
        v40[v36] = v29;
        v34 = (uint64_t)&v40[v36 + 1];
        if (v33 != v35)
          goto LABEL_67;
LABEL_83:
        *(_QWORD *)(a1 + 56) = v41;
        *(_QWORD *)(a1 + 64) = v34;
        *(_QWORD *)(a1 + 72) = &v40[v39];
        if (v33)
          operator delete(v33);
LABEL_85:
        *(_QWORD *)(a1 + 64) = v34;
        v53 = *(_DWORD *)(a1 + 20);
        if ((v53 - 48) >= 0xA)
          break;
        v54 = *(char *)(a1 + 103);
        if ((v54 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a1 + 103) != 22)
          {
            v26 = *(unsigned __int8 *)(a1 + 103);
            *(_BYTE *)(a1 + 103) = (v54 + 1) & 0x7F;
            v27 = (char *)(a1 + 80);
            goto LABEL_49;
          }
          v55 = (char *)(a1 + 80);
          v26 = 22;
LABEL_92:
          if (v26 + 1 > 2 * v26)
            v58 = v26 + 1;
          else
            v58 = 2 * v26;
          v59 = (v58 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17)
            v59 = v58 | 7;
          if (v58 >= 0x17)
            v57 = v59 + 1;
          else
            v57 = 23;
LABEL_100:
          v60 = (char *)operator new(v57);
          v27 = v60;
          if (!v26 || (memmove(v60, v55, v26), v26 != 22))
            operator delete(v55);
          *(_QWORD *)(a1 + 80) = v27;
          *(_QWORD *)(a1 + 96) = v57 | 0x8000000000000000;
          goto LABEL_105;
        }
        v56 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        v26 = v56 - 1;
        if (*(_QWORD *)(a1 + 88) == v56 - 1)
        {
          if (v56 == 0x7FFFFFFFFFFFFFF8)
            sub_207C95C50();
          v55 = *(char **)v22;
          v57 = 0x7FFFFFFFFFFFFFF7;
          if (v26 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_92;
          goto LABEL_100;
        }
        v27 = *(char **)v22;
        v26 = *(_QWORD *)(a1 + 88);
LABEL_105:
        *(_QWORD *)(a1 + 88) = v26 + 1;
LABEL_49:
        v28 = &v27[v26];
        *v28 = v53;
        v28[1] = 0;
      }
      if (v53 > 68)
      {
        v24 = v207;
        if (v53 != 69 && v53 != 101)
          goto LABEL_405;
        goto LABEL_402;
      }
      v24 = v207;
      if (v53 == 10)
      {
        v63 = *(_QWORD *)(a1 + 48) + 1;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = v63;
      }
      else if (v53 == 46)
      {
        goto LABEL_111;
      }
LABEL_405:
      v200 = (_QWORD *)(a1 + 40);
      v201 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(a1 + 24) = 1;
      --*(_QWORD *)(a1 + 32);
      if (v201 || (v200 = (_QWORD *)(a1 + 48), (v201 = *(_QWORD *)(a1 + 48)) != 0))
        *v200 = v201 - 1;
      if (*(_DWORD *)(a1 + 20) != -1)
        --*(_QWORD *)(a1 + 64);
      __endptr = 0;
      *__error() = 0;
      if (v24 == 6)
      {
        v204 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0)
          v204 = *(const char **)v22;
        v205 = strtoll(v204, &__endptr, 10);
        if (*__error())
          goto LABEL_419;
        *(_QWORD *)(a1 + 112) = v205;
        return 6;
      }
      else
      {
        if (v24 == 5)
        {
          v202 = (const char *)(a1 + 80);
          if (*(char *)(a1 + 103) < 0)
            v202 = *(const char **)v22;
          v203 = strtoull(v202, &__endptr, 10);
          if (!*__error())
          {
            *(_QWORD *)(a1 + 120) = v203;
            return 5;
          }
        }
LABEL_419:
        if (*(char *)(a1 + 103) < 0)
          v22 = *(const char **)v22;
        *(double *)(a1 + 128) = strtod(v22, &__endptr);
        return 7;
      }
    case 58:
      return 12;
    case 91:
      return result;
    case 93:
      return 10;
    case 102:
      if (sub_20809B688(a1) != 97
        || sub_20809B688(a1) != 108
        || sub_20809B688(a1) != 115
        || sub_20809B688(a1) != 101)
      {
        goto LABEL_147;
      }
      return 2;
    case 110:
      if (sub_20809B688(a1) != 117
        || sub_20809B688(a1) != 108
        || sub_20809B688(a1) != 108)
      {
        goto LABEL_147;
      }
      return 3;
    case 116:
      if (sub_20809B688(a1) != 114
        || sub_20809B688(a1) != 117
        || sub_20809B688(a1) != 101)
      {
        goto LABEL_147;
      }
      return 1;
    case 123:
      return 9;
    case 125:
      return 11;
    default:
LABEL_147:
      v2 = "invalid literal";
      goto LABEL_35;
  }
}

void sub_2081EBB74(uint64_t a1)
{
  _QWORD *v2;
  int64x2_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  int64x2_t v30;

  v2 = (_QWORD *)(a1 + 56);
  v3 = vdupq_n_s64(1uLL);
  v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1)
        return;
LABEL_8:
      v9 = *(_BYTE **)(a1 + 64);
      v8 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *v9 = v5;
        *(_QWORD *)(a1 + 64) = v9 + 1;
        v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17)
          return;
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            v4 = *(_QWORD *)(a1 + 48) + 1;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      v11 = (_BYTE *)*v2;
      v12 = (unint64_t)&v9[-*v2];
      v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0)
        sub_207CA420C();
      v14 = v8 - (_QWORD)v11;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)operator new(v15);
        v17 = &v16[v12];
        v16[v12] = v5;
        v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11)
          goto LABEL_37;
      }
      else
      {
        v16 = 0;
        v17 = &v9[-*v2];
        *(_BYTE *)v12 = v5;
        v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(_QWORD *)(a1 + 56) = v17;
          *(_QWORD *)(a1 + 64) = v18;
          *(_QWORD *)(a1 + 72) = &v16[v15];
          if (v9)
            operator delete(v9);
          v3 = v30;
          *(_QWORD *)(a1 + 64) = v18;
          v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v19 = 0;
          goto LABEL_29;
        }
        v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        v20 = &v16[v12 - 16];
        v21 = (__int128 *)(v9 - 16);
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19)
          goto LABEL_36;
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v16[&v9[-v19] - v11 - 8];
          v25 = (uint64_t *)&v9[-v19 - 8];
          v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *v25--;
            *(_QWORD *)v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_36;
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      v28 = v17 - 1;
      do
      {
        v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      v9 = (_BYTE *)*v2;
      v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  v6 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
  }
  else
  {
    v7 = *v6;
    LOBYTE(v5) = *v6;
    *(_QWORD *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (v7 != -1)
      goto LABEL_8;
  }
}

void sub_2081EBDE0(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  void **v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  unsigned __int8 *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  _OWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  unsigned __int8 *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  _OWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  char v116;
  void **v117;
  unsigned __int8 *v118;
  int v119;
  std::string::size_type v120;
  void ***p_size;
  unint64_t v122;
  unint64_t v123;
  char v124;
  void **v125;
  char *v126;
  std::string::size_type v127;
  unint64_t v128;
  int v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  void **v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  uint64_t v149;
  unsigned __int8 *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned __int8 *v158;
  int v159;
  void **v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  _BYTE *v169;
  unsigned int v170;
  size_t v171;
  size_t v172;
  std::string::size_type v173;
  size_t v174;
  unint64_t v175;
  std::string *v176;
  size_t v177;
  unint64_t v178;
  std::string *v179;
  size_t size;
  std::string *v181;
  size_t v182;
  size_t v183;
  unint64_t v184;
  uint64_t v185;
  std::string *v186;
  std::string *v187;
  _BYTE *v188;
  unint64_t v189;
  uint64_t v190;
  void *v191;
  std::string::size_type v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  size_t v195;
  std::string *v196;
  _BYTE *v197;
  unsigned int v198;
  size_t v199;
  size_t v200;
  std::string::size_type v201;
  size_t v202;
  unint64_t v203;
  std::string *v204;
  size_t v205;
  unint64_t v206;
  std::string *v207;
  std::string *v208;
  size_t v209;
  _BYTE *v210;
  size_t v211;
  unint64_t v212;
  uint64_t v213;
  std::string *v214;
  unint64_t v215;
  uint64_t v216;
  void *v217;
  std::string::size_type v218;
  void *exception;
  void *v220;
  void *v221;
  void **v222;
  uint64_t **v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  std::string v228;
  std::string __p;
  std::string v230;
  std::string v231;
  void *v232;
  unint64_t v233;
  uint64_t v234;
  char __str[8];
  void **v236;
  std::runtime_error v237;
  uint64_t v238;
  uint64_t v239;

  v4 = a1 + 120;
  v5 = a1 + 40;
  v239 = *MEMORY[0x24BDAC8D0];
  v232 = 0;
  v233 = 0;
  v222 = (void **)(a2 + 4);
  v234 = 0;
  v223 = (uint64_t **)(a2 + 1);
  v6 = (unsigned __int8 *)(a2 + 17);
  v225 = a1 + 120;
  v224 = (unsigned __int8 *)(a2 + 17);
  while (2)
  {
    v7 = 0;
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        v7 = 1;
        goto LABEL_4;
      case 2:
LABEL_4:
        sub_2081F0BBC(a2, v7);
        goto LABEL_156;
      case 3:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        __str[0] = 0;
        v236 = 0;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v20 = a2[15];
        if (!v20)
          sub_207CA408C();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v20 + 48))(v20, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v21 = a2[2];
        if (a2[1] == v21)
          goto LABEL_151;
        v22 = *((_QWORD *)v21 - 1);
        if (!v22)
          goto LABEL_155;
        if (*(_BYTE *)v22 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v22 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 >= *(_QWORD *)(v18 + 16))
          goto LABEL_220;
        goto LABEL_150;
      case 4:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        __str[0] = 3;
        v29 = (void **)operator new(0x18uLL);
        v30 = v29;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_207CA40D8(v29, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v29 = *(_OWORD *)v4;
          v29[2] = *(void **)(v4 + 16);
        }
        v236 = v30;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v113 = a2[15];
        if (!v113)
          sub_207CA408C();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v113 + 48))(v113, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v114 = a2[2];
        if (a2[1] == v114)
          goto LABEL_151;
        v115 = *((_QWORD *)v114 - 1);
        if (!v115)
          goto LABEL_155;
        if (*(_BYTE *)v115 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v115 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 < *(_QWORD *)(v18 + 16))
          goto LABEL_150;
        goto LABEL_220;
      case 5:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        v35 = *(void ***)(a1 + 160);
        __str[0] = 6;
        v236 = v35;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v36 = a2[15];
        if (!v36)
          sub_207CA408C();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v36 + 48))(v36, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v37 = a2[2];
        if (a2[1] == v37)
          goto LABEL_151;
        v38 = *((_QWORD *)v37 - 1);
        if (!v38)
          goto LABEL_155;
        if (*(_BYTE *)v38 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v38 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 >= *(_QWORD *)(v18 + 16))
          goto LABEL_220;
        goto LABEL_150;
      case 6:
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        v14 = *(void ***)(a1 + 152);
        __str[0] = 5;
        v236 = v14;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v15 = a2[15];
        if (!v15)
          sub_207CA408C();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v15 + 48))(v15, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v16 = a2[2];
        if (a2[1] == v16)
          goto LABEL_151;
        v17 = *((_QWORD *)v16 - 1);
        if (!v17)
          goto LABEL_155;
        if (*(_BYTE *)v17 != 2)
          goto LABEL_152;
        v18 = *(_QWORD *)(v17 + 8);
        v19 = *(_QWORD *)(v18 + 8);
        if (v19 >= *(_QWORD *)(v18 + 16))
          goto LABEL_220;
        goto LABEL_150;
      case 7:
        v31 = *(void ***)(a1 + 168);
        if (((unint64_t)v31 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          sub_2081EDAF0(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_2081EDAF0(&v228, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_207C96E8C("number overflow parsing '", &v228, &__p);
          sub_207C96E30("'", &__p, &v230);
          sub_207D1CEE4(406, (uint64_t)&v230, (uint64_t)__str);
          sub_2081F0934((uint64_t)a2, (uint64_t)__str);
          *(_QWORD *)__str = off_24C072CF8;
          std::runtime_error::~runtime_error(&v237);
          std::exception::~exception((std::exception *)__str);
          if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v230.__r_.__value_.__l.__data_);
          goto LABEL_355;
        }
        if (((*(_QWORD *)&a2[4][((unint64_t)(a2[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a2 + 40) - 1)) & 1) == 0)
          goto LABEL_156;
        __str[0] = 7;
        v236 = v31;
        LODWORD(__p.__r_.__value_.__l.__data_) = (unint64_t)(a2[2] - a2[1]) >> 3;
        v228.__r_.__value_.__s.__data_[0] = 5;
        v32 = a2[15];
        if (!v32)
          sub_207CA408C();
        if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *, char *))(*(_QWORD *)v32 + 48))(v32, &__p, &v228, __str) & 1) == 0)goto LABEL_155;
        v33 = a2[2];
        if (a2[1] == v33)
        {
LABEL_151:
          v116 = __str[0];
          v117 = v236;
          __str[0] = 0;
          v236 = 0;
          v118 = *a2;
          v119 = **a2;
          *v118 = v116;
          v231.__r_.__value_.__s.__data_[0] = v119;
          v120 = *((_QWORD *)v118 + 1);
          *((_QWORD *)v118 + 1) = v117;
          v231.__r_.__value_.__l.__size_ = v120;
          p_size = (void ***)&v231.__r_.__value_.__l.__size_;
        }
        else
        {
          v34 = *((_QWORD *)v33 - 1);
          if (!v34)
            goto LABEL_155;
          if (*(_BYTE *)v34 == 2)
          {
            v18 = *(_QWORD *)(v34 + 8);
            v19 = *(_QWORD *)(v18 + 8);
            if (v19 < *(_QWORD *)(v18 + 16))
            {
LABEL_150:
              *(_BYTE *)v19 = __str[0];
              *(_QWORD *)(v19 + 8) = v236;
              __str[0] = 0;
              v236 = 0;
              *(_QWORD *)(v18 + 8) = v19 + 16;
            }
            else
            {
LABEL_220:
              *(_QWORD *)(v18 + 8) = sub_20806E340((void **)v18, __str);
            }
            goto LABEL_155;
          }
LABEL_152:
          v122 = (unint64_t)(a2[8] - 1);
          v123 = *(_QWORD *)&a2[7][(v122 >> 3) & 0x1FFFFFFFFFFFFFF8];
          a2[8] = (unsigned __int8 *)v122;
          if (((v123 >> v122) & 1) == 0)
          {
LABEL_155:
            sub_20806DC2C(&v236, __str[0]);
            goto LABEL_156;
          }
          v124 = __str[0];
          v125 = v236;
          __str[0] = 0;
          v236 = 0;
          v126 = (char *)a2[10];
          v119 = *v126;
          *v126 = v124;
          v230.__r_.__value_.__s.__data_[0] = v119;
          v127 = *((_QWORD *)v126 + 1);
          *((_QWORD *)v126 + 1) = v125;
          v230.__r_.__value_.__l.__size_ = v127;
          p_size = (void ***)&v230.__r_.__value_.__l.__size_;
        }
        sub_20806DC2C(p_size, v119);
        goto LABEL_155;
      case 8:
        *(_DWORD *)__str = (unint64_t)(a2[2] - a2[1]) >> 3;
        v231.__r_.__value_.__s.__data_[0] = 2;
        v8 = a2[15];
        if (!v8)
          goto LABEL_364;
        v9 = (*(uint64_t (**)(unsigned __int8 *, char *, std::string *, unsigned __int8 *))(*(_QWORD *)v8 + 48))(v8, __str, &v231, v6);
        v10 = v9;
        v12 = (unint64_t)a2[5];
        v11 = a2[6];
        if (v12 != (_QWORD)v11 << 6)
        {
          a2[5] = (unsigned __int8 *)(v12 + 1);
          v39 = a2[4];
          v40 = v12 >> 6;
          v41 = 1 << v12;
          if (!v9)
            goto LABEL_60;
          goto LABEL_83;
        }
        if ((uint64_t)(v12 + 1) < 0)
          goto LABEL_365;
        if (v12 <= 0x3FFFFFFFFFFFFFFELL)
        {
          v13 = (_QWORD)v11 << 7;
          if (v13 <= (v12 & 0xFFFFFFFFFFFFFFC0) + 64)
            v13 = (v12 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v12 < v13)
          {
            if ((v13 & 0x8000000000000000) != 0)
              goto LABEL_365;
LABEL_64:
            v47 = ((v13 - 1) >> 6) + 1;
            v48 = (uint64_t *)operator new(8 * v47);
            v49 = *v222;
            v50 = (v12 - 1) >> 6;
            if (v12 < 0x41)
              v50 = 0;
            v48[v50] = 0;
            if (v12 > 0x3F || (v12 & 0x3F) != 0)
            {
              v51 = 0;
              v52 = 0;
              v53 = v48;
              v54 = v49;
              do
              {
                v55 = 1 << v51;
                if (((*v54 >> v52) & 1) != 0)
                  v56 = *v53 | v55;
                else
                  v56 = *v53 & ~v55;
                *v53 = v56;
                v54 += v52 == 63;
                if (v52 == 63)
                  v52 = 0;
                else
                  ++v52;
                v53 += v51 == 63;
                if (v51 == 63)
                  v51 = 0;
                else
                  ++v51;
              }
              while (v52 != (v12 & 0x3F) || v54 != &v49[v12 >> 6]);
            }
            a2[4] = (unsigned __int8 *)v48;
            a2[6] = (unsigned __int8 *)v47;
            if (v49)
            {
              operator delete(v49);
              v12 = (unint64_t)a2[5];
            }
          }
          a2[5] = (unsigned __int8 *)(v12 + 1);
          v39 = a2[4];
          v40 = v12 >> 6;
          v41 = 1 << v12;
          if (!v10)
            goto LABEL_60;
          goto LABEL_83;
        }
        v13 = 0x7FFFFFFFFFFFFFFFLL;
        if (v12 < 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_64;
        a2[5] = 0;
        v39 = a2[4];
        v40 = 0x3FFFFFFFFFFFFFFLL;
        v41 = 0;
        if (!v9)
        {
LABEL_60:
          v42 = *(_QWORD *)&v39[8 * v40] & ~v41;
          goto LABEL_84;
        }
LABEL_83:
        v42 = *(_QWORD *)&v39[8 * v40] | v41;
LABEL_84:
        *(_QWORD *)&v39[8 * v40] = v42;
        v57 = sub_2081F0984(a2, 2u);
        v58 = v57;
        v60 = (uint64_t *)a2[2];
        v59 = a2[3];
        if (v60 < (uint64_t *)v59)
        {
          *v60 = v57;
          v61 = (uint64_t)(v60 + 1);
          goto LABEL_181;
        }
        v62 = *v223;
        v63 = (char *)v60 - (char *)*v223;
        v64 = v63 >> 3;
        v65 = (v63 >> 3) + 1;
        if (v65 >> 61)
          goto LABEL_366;
        v66 = v59 - (unsigned __int8 *)v62;
        if (v66 >> 2 > v65)
          v65 = v66 >> 2;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67)
        {
          if (v67 >> 61)
            goto LABEL_371;
          v68 = operator new(8 * v67);
          v69 = &v68[8 * v64];
          *(_QWORD *)v69 = v58;
          v61 = (uint64_t)(v69 + 8);
          v70 = (char *)((char *)v60 - (char *)v62);
          if (v60 == v62)
          {
LABEL_179:
            a2[1] = v69;
            a2[2] = (unsigned __int8 *)v61;
            a2[3] = &v68[8 * v67];
            if (!v60)
              goto LABEL_181;
LABEL_180:
            operator delete(v60);
            goto LABEL_181;
          }
        }
        else
        {
          v68 = 0;
          v69 = (unsigned __int8 *)(8 * v64);
          *(_QWORD *)(8 * v64) = v58;
          v61 = 8 * v64 + 8;
          v70 = (char *)((char *)v60 - (char *)v62);
          if (v60 == v62)
            goto LABEL_179;
        }
        v71 = (unint64_t)(v70 - 8);
        if (v71 < 0x58)
          goto LABEL_382;
        if ((unint64_t)((char *)v60 - v68 - v63) < 0x20)
          goto LABEL_382;
        v72 = (v71 >> 3) + 1;
        v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v60[v73 / 0xFFFFFFFFFFFFFFF8];
        v69 -= v73;
        v75 = &v68[8 * v64 - 16];
        v76 = v60 - 2;
        v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 4;
          v77 -= 4;
        }
        while (v77);
        v60 = v74;
        if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_382:
          do
          {
            v79 = *--v60;
            *((_QWORD *)v69 - 1) = v79;
            v69 -= 8;
          }
          while (v60 != v62);
        }
        v60 = *v223;
        a2[1] = v69;
        a2[2] = (unsigned __int8 *)v61;
        a2[3] = &v68[8 * v67];
        if (v60)
          goto LABEL_180;
LABEL_181:
        a2[2] = (unsigned __int8 *)v61;
        v146 = sub_2081EA2E8(v5);
        v4 = v225;
        v6 = v224;
        *(_DWORD *)(a1 + 32) = v146;
        if (v146 == 10)
        {
          v147 = a2[2];
          v149 = *((_QWORD *)v147 - 1);
          v148 = v147 - 8;
          if (v149)
          {
            LODWORD(v231.__r_.__value_.__l.__data_) = ((unint64_t)(a2[2] - a2[1]) >> 3) - 1;
            v230.__r_.__value_.__s.__data_[0] = 3;
            v150 = a2[15];
            if (!v150)
LABEL_364:
              sub_207CA408C();
            if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *))(*(_QWORD *)v150 + 48))(v150, &v231, &v230) & 1) == 0)
            {
              sub_2080968B4((uint64_t)__str, v224);
              v158 = (unsigned __int8 *)*((_QWORD *)a2[2] - 1);
              v159 = *v158;
              *v158 = __str[0];
              __str[0] = v159;
              v160 = (void **)*((_QWORD *)v158 + 1);
              *((_QWORD *)v158 + 1) = v236;
              v236 = v160;
              sub_20806DC2C(&v236, v159);
              v162 = a2[1];
              v161 = a2[2];
              a2[2] = v161 - 8;
              --a2[5];
              if (v162 != v161 - 8)
              {
                v163 = *((_QWORD *)v161 - 2);
                if (*(_BYTE *)v163 == 2)
                {
                  v164 = *(_QWORD *)(v163 + 8);
                  v165 = *(_QWORD *)(v164 + 8);
                  v166 = *(unsigned __int8 *)(v165 - 16);
                  v165 -= 16;
                  sub_20806DC2C((void ***)(v165 + 8), v166);
                  *(_QWORD *)(v164 + 8) = v165;
                }
              }
              goto LABEL_156;
            }
            a2[2] -= 8;
          }
          else
          {
            a2[2] = v148;
          }
          --a2[5];
LABEL_156:
          v128 = v233;
          if (!v233)
            goto LABEL_347;
LABEL_157:
          if (((*(_QWORD *)((char *)v232 + (((v128 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v128 - 1)) & 1) != 0)
          {
            v129 = sub_2081EA2E8(v5);
            *(_DWORD *)(a1 + 32) = v129;
            if (v129 == 13)
              goto LABEL_177;
            if (v129 != 10)
            {
              sub_2081EDAF0(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v230 = *(std::string *)(a1 + 72);
              sub_207C96EE8(&v228, "array");
              sub_2081EDBE4(&__p, a1, 0xAu, (const void **)&v228.__r_.__value_.__l.__data_);
              sub_207D1B330(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
              sub_2081EDAA0((uint64_t)a2, (uint64_t)__str);
              goto LABEL_354;
            }
            v130 = a2[2];
            v132 = *((_QWORD *)v130 - 1);
            v131 = v130 - 8;
            if (v132)
            {
              LODWORD(v231.__r_.__value_.__l.__data_) = ((unint64_t)(a2[2] - a2[1]) >> 3) - 1;
              v230.__r_.__value_.__s.__data_[0] = 3;
              v133 = a2[15];
              if (!v133)
                sub_207CA408C();
              if (((*(uint64_t (**)(unsigned __int8 *, std::string *, std::string *))(*(_QWORD *)v133 + 48))(v133, &v231, &v230) & 1) != 0)
              {
                a2[2] -= 8;
                goto LABEL_168;
              }
              sub_2080968B4((uint64_t)__str, v6);
              v135 = (unsigned __int8 *)*((_QWORD *)a2[2] - 1);
              v136 = *v135;
              *v135 = __str[0];
              __str[0] = v136;
              v137 = (void **)*((_QWORD *)v135 + 1);
              *((_QWORD *)v135 + 1) = v236;
              v236 = v137;
              sub_20806DC2C(&v236, v136);
              v139 = a2[1];
              v138 = a2[2];
              a2[2] = v138 - 8;
              --a2[5];
              if (v139 != v138 - 8)
              {
                v140 = *((_QWORD *)v138 - 2);
                if (*(_BYTE *)v140 == 2)
                {
                  v141 = *(_QWORD *)(v140 + 8);
                  v142 = *(_QWORD *)(v141 + 8);
                  v143 = *(unsigned __int8 *)(v142 - 16);
                  v142 -= 16;
                  sub_20806DC2C((void ***)(v142 + 8), v143);
                  *(_QWORD *)(v141 + 8) = v142;
                }
              }
            }
            else
            {
              a2[2] = v131;
LABEL_168:
              --a2[5];
            }
          }
          else
          {
            v134 = sub_2081EA2E8(v5);
            *(_DWORD *)(a1 + 32) = v134;
            if (v134 == 13)
            {
              v144 = sub_2081EA2E8(v5);
              *(_DWORD *)(a1 + 32) = v144;
              if (v144 == 4)
              {
                sub_2081F0704((uint64_t)a2, v4);
                v145 = sub_2081EA2E8(v5);
                *(_DWORD *)(a1 + 32) = v145;
                if (v145 == 12)
                {
LABEL_177:
                  *(_DWORD *)(a1 + 32) = sub_2081EA2E8(v5);
                  continue;
                }
LABEL_353:
                sub_2081EDAF0(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v230 = *(std::string *)(a1 + 72);
                sub_207C96EE8(&v228, "object separator");
                sub_2081EDBE4(&__p, a1, 0xCu, (const void **)&v228.__r_.__value_.__l.__data_);
                sub_207D1B330(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
                sub_2081EDAA0((uint64_t)a2, (uint64_t)__str);
LABEL_354:
                *(_QWORD *)__str = off_24C072CF8;
                std::runtime_error::~runtime_error(&v237);
                std::exception::~exception((std::exception *)__str);
LABEL_355:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                {
                  v220 = (void *)v228.__r_.__value_.__r.__words[0];
LABEL_344:
                  operator delete(v220);
                }
                goto LABEL_345;
              }
LABEL_352:
              sub_2081EDAF0(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v230 = *(std::string *)(a1 + 72);
              sub_207C96EE8(&v228, "object key");
              sub_2081EDBE4(&__p, a1, 4u, (const void **)&v228.__r_.__value_.__l.__data_);
              sub_207D1B330(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
              sub_2081EDAA0((uint64_t)a2, (uint64_t)__str);
              goto LABEL_354;
            }
            if (v134 != 11)
            {
              sub_2081EDAF0(&v231, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v230 = *(std::string *)(a1 + 72);
              sub_207C96EE8(&v228, "object");
              sub_2081EDBE4(&__p, a1, 0xBu, (const void **)&v228.__r_.__value_.__l.__data_);
              sub_207D1B330(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
              sub_2081EDAA0((uint64_t)a2, (uint64_t)__str);
              goto LABEL_354;
            }
            sub_2081F01DC((uint64_t)a2);
          }
          v128 = --v233;
          if (!v233)
            goto LABEL_347;
          goto LABEL_157;
        }
        v151 = v233;
        if (v233 == v234 << 6)
        {
          if ((uint64_t)(v233 + 1) < 0)
            sub_207D159B0();
          v152 = v234 << 7;
          if (v234 << 7 <= (v233 & 0xFFFFFFFFFFFFFFC0) + 64)
            v152 = (v233 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v233 <= 0x3FFFFFFFFFFFFFFELL)
            v153 = v152;
          else
            v153 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v232, v153);
          v151 = v233;
        }
        v233 = v151 + 1;
        *(_QWORD *)((char *)v232 + ((v151 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v151;
        continue;
      case 9:
        *(_DWORD *)__str = (unint64_t)(a2[2] - a2[1]) >> 3;
        v231.__r_.__value_.__s.__data_[0] = 0;
        v23 = a2[15];
        if (!v23)
          goto LABEL_364;
        v24 = (*(uint64_t (**)(unsigned __int8 *, char *, std::string *, unsigned __int8 *))(*(_QWORD *)v23 + 48))(v23, __str, &v231, v6);
        v25 = v24;
        v27 = (unint64_t)a2[5];
        v26 = a2[6];
        if (v27 != (_QWORD)v26 << 6)
        {
          a2[5] = (unsigned __int8 *)(v27 + 1);
          v43 = a2[4];
          v44 = v27 >> 6;
          v45 = 1 << v27;
          if (!v24)
            goto LABEL_62;
          goto LABEL_123;
        }
        if ((uint64_t)(v27 + 1) < 0)
          goto LABEL_365;
        if (v27 <= 0x3FFFFFFFFFFFFFFELL)
        {
          v28 = (_QWORD)v26 << 7;
          if (v28 <= (v27 & 0xFFFFFFFFFFFFFFC0) + 64)
            v28 = (v27 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v27 < v28)
          {
            if ((v28 & 0x8000000000000000) != 0)
LABEL_365:
              sub_207D159B0();
LABEL_104:
            v80 = ((v28 - 1) >> 6) + 1;
            v81 = (uint64_t *)operator new(8 * v80);
            v82 = *v222;
            v83 = (v27 - 1) >> 6;
            if (v27 < 0x41)
              v83 = 0;
            v81[v83] = 0;
            if (v27 > 0x3F || (v27 & 0x3F) != 0)
            {
              v84 = 0;
              v85 = 0;
              v86 = v81;
              v87 = v82;
              do
              {
                v88 = 1 << v84;
                if (((*v87 >> v85) & 1) != 0)
                  v89 = *v86 | v88;
                else
                  v89 = *v86 & ~v88;
                *v86 = v89;
                v87 += v85 == 63;
                if (v85 == 63)
                  v85 = 0;
                else
                  ++v85;
                v86 += v84 == 63;
                if (v84 == 63)
                  v84 = 0;
                else
                  ++v84;
              }
              while (v85 != (v27 & 0x3F) || v87 != &v82[v27 >> 6]);
            }
            a2[4] = (unsigned __int8 *)v81;
            a2[6] = (unsigned __int8 *)v80;
            if (v82)
            {
              operator delete(v82);
              v27 = (unint64_t)a2[5];
            }
          }
          a2[5] = (unsigned __int8 *)(v27 + 1);
          v43 = a2[4];
          v44 = v27 >> 6;
          v45 = 1 << v27;
          if (!v25)
            goto LABEL_62;
          goto LABEL_123;
        }
        v28 = 0x7FFFFFFFFFFFFFFFLL;
        if (v27 < 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_104;
        a2[5] = 0;
        v43 = a2[4];
        v44 = 0x3FFFFFFFFFFFFFFLL;
        v45 = 0;
        if (!v24)
        {
LABEL_62:
          v46 = *(_QWORD *)&v43[8 * v44] & ~v45;
          goto LABEL_124;
        }
LABEL_123:
        v46 = *(_QWORD *)&v43[8 * v44] | v45;
LABEL_124:
        *(_QWORD *)&v43[8 * v44] = v46;
        v90 = sub_2081F0984(a2, 1u);
        v91 = v90;
        v93 = (uint64_t *)a2[2];
        v92 = a2[3];
        if (v93 < (uint64_t *)v92)
        {
          *v93 = v90;
          v94 = (uint64_t)(v93 + 1);
          goto LABEL_198;
        }
        v95 = *v223;
        v96 = (char *)v93 - (char *)*v223;
        v97 = v96 >> 3;
        v98 = (v96 >> 3) + 1;
        if (v98 >> 61)
LABEL_366:
          sub_2081F0BA8();
        v99 = v92 - (unsigned __int8 *)v95;
        if (v99 >> 2 > v98)
          v98 = v99 >> 2;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
          v100 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        if (v100)
        {
          if (v100 >> 61)
LABEL_371:
            sub_207CA3AB8();
          v101 = operator new(8 * v100);
          v102 = &v101[8 * v97];
          *(_QWORD *)v102 = v91;
          v94 = (uint64_t)(v102 + 8);
          v103 = (char *)((char *)v93 - (char *)v95);
          if (v93 == v95)
          {
LABEL_196:
            a2[1] = v102;
            a2[2] = (unsigned __int8 *)v94;
            a2[3] = &v101[8 * v100];
            if (!v93)
              goto LABEL_198;
LABEL_197:
            operator delete(v93);
            goto LABEL_198;
          }
        }
        else
        {
          v101 = 0;
          v102 = (unsigned __int8 *)(8 * v97);
          *(_QWORD *)(8 * v97) = v91;
          v94 = 8 * v97 + 8;
          v103 = (char *)((char *)v93 - (char *)v95);
          if (v93 == v95)
            goto LABEL_196;
        }
        v104 = (unint64_t)(v103 - 8);
        if (v104 < 0x58)
          goto LABEL_383;
        if ((unint64_t)((char *)v93 - v101 - v96) < 0x20)
          goto LABEL_383;
        v105 = (v104 >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v107 = &v93[v106 / 0xFFFFFFFFFFFFFFF8];
        v102 -= v106;
        v108 = &v101[8 * v97 - 16];
        v109 = v93 - 2;
        v110 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v111 = *(_OWORD *)v109;
          *(v108 - 1) = *((_OWORD *)v109 - 1);
          *v108 = v111;
          v108 -= 2;
          v109 -= 4;
          v110 -= 4;
        }
        while (v110);
        v93 = v107;
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_383:
          do
          {
            v112 = *--v93;
            *((_QWORD *)v102 - 1) = v112;
            v102 -= 8;
          }
          while (v93 != v95);
        }
        v93 = *v223;
        a2[1] = v102;
        a2[2] = (unsigned __int8 *)v94;
        a2[3] = &v101[8 * v100];
        if (v93)
          goto LABEL_197;
LABEL_198:
        a2[2] = (unsigned __int8 *)v94;
        v154 = sub_2081EA2E8(v5);
        v4 = v225;
        v6 = v224;
        *(_DWORD *)(a1 + 32) = v154;
        if (v154 == 11)
        {
          sub_2081F01DC((uint64_t)a2);
          goto LABEL_156;
        }
        if (v154 != 4)
          goto LABEL_352;
        sub_2081F0704((uint64_t)a2, v225);
        v155 = sub_2081EA2E8(v5);
        *(_DWORD *)(a1 + 32) = v155;
        if (v155 != 12)
          goto LABEL_353;
        v156 = v233;
        if (v233 == v234 << 6)
        {
          if ((uint64_t)(v233 + 1) < 0)
            sub_207D159B0();
          if (v233 > 0x3FFFFFFFFFFFFFFELL)
          {
            v157 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if (v234 << 7 <= (v233 & 0xFFFFFFFFFFFFFFC0) + 64)
          {
            v157 = (v233 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          else
          {
            v157 = v234 << 7;
          }
          sub_207D1C104((uint64_t)&v232, v157);
          v156 = v233;
        }
        v233 = v156 + 1;
        *(_QWORD *)((char *)v232 + ((v156 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v156);
        *(_DWORD *)(a1 + 32) = sub_2081EA2E8(v5);
        continue;
      case 0xE:
        v168 = *(unsigned __int8 **)(a1 + 96);
        v167 = *(unsigned __int8 **)(a1 + 104);
        memset(&v231, 0, sizeof(v231));
        if (v168 == v167)
          goto LABEL_339;
        v226 = v167;
        while (1)
        {
          v170 = *v168;
          if (v170 > 0x1F)
          {
            if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v231.__r_.__value_.__l.__size_ == size)
              {
                if ((v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                  sub_207C95C50();
                v179 = (std::string *)v231.__r_.__value_.__r.__words[0];
                v183 = 0x7FFFFFFFFFFFFFF7;
                if (size < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_256:
                  if (size + 1 > 2 * size)
                    v184 = size + 1;
                  else
                    v184 = 2 * size;
                  v185 = (v184 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v184 | 7) != 0x17)
                    v185 = v184 | 7;
                  if (v184 >= 0x17)
                    v183 = v185 + 1;
                  else
                    v183 = 23;
                }
                v186 = (std::string *)operator new(v183);
                v187 = v186;
                if (!size || (memmove(v186, v179, size), size != 22))
                  operator delete(v179);
                v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
                v231.__r_.__value_.__r.__words[2] = v183 | 0x8000000000000000;
              }
              else
              {
                size = v231.__r_.__value_.__l.__size_;
                v187 = (std::string *)v231.__r_.__value_.__r.__words[0];
              }
              v231.__r_.__value_.__l.__size_ = size + 1;
            }
            else
            {
              if (HIBYTE(v231.__r_.__value_.__r.__words[2]) == 22)
              {
                v179 = &v231;
                size = 22;
                goto LABEL_256;
              }
              size = HIBYTE(v231.__r_.__value_.__r.__words[2]);
              *((_BYTE *)&v231.__r_.__value_.__s + 23) = (*((_BYTE *)&v231.__r_.__value_.__s + 23) + 1) & 0x7F;
              v187 = &v231;
            }
            v188 = (char *)v187 + size;
            *v188 = v170;
            v188[1] = 0;
            goto LABEL_225;
          }
          LOBYTE(v236) = 0;
          *(_QWORD *)__str = 0;
          snprintf(__str, 9uLL, "<U+%.4X>", v170);
          v171 = strlen(__str);
          v172 = v171;
          if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v173 = 22;
          else
            v173 = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v174 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
          else
            v174 = v231.__r_.__value_.__l.__size_;
          if (v173 - v174 >= v171)
          {
            if (!v171)
              goto LABEL_225;
            if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v181 = &v231;
            else
              v181 = (std::string *)v231.__r_.__value_.__r.__words[0];
            memmove((char *)v181 + v174, __str, v171);
            v182 = v174 + v172;
            if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
              v231.__r_.__value_.__l.__size_ = v174 + v172;
            else
              *((_BYTE *)&v231.__r_.__value_.__s + 23) = v182 & 0x7F;
            v169 = (char *)v181 + v182;
          }
          else
          {
            v175 = v174 + v171;
            if (0x7FFFFFFFFFFFFFF6 - v173 < v174 + v171 - v173)
              sub_207C95C50();
            if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v176 = &v231;
            else
              v176 = (std::string *)v231.__r_.__value_.__r.__words[0];
            v177 = 0x7FFFFFFFFFFFFFF7;
            if (v173 < 0x3FFFFFFFFFFFFFF3)
            {
              v178 = 2 * v173;
              if (v175 > 2 * v173)
                v178 = v174 + v171;
              if (v178 >= 0x17)
              {
                v189 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
                v190 = v178 | 7;
                if (v190 == 23)
                  v190 = v189;
                v177 = v190 + 1;
              }
              else
              {
                v177 = 23;
              }
            }
            v191 = operator new(v177);
            v192 = (std::string::size_type)v191;
            if (v174)
              memmove(v191, v176, v174);
            memcpy((void *)(v192 + v174), __str, v172);
            if (v173 != 22)
              operator delete(v176);
            v231.__r_.__value_.__l.__size_ = v174 + v172;
            v231.__r_.__value_.__r.__words[2] = v177 | 0x8000000000000000;
            v231.__r_.__value_.__r.__words[0] = v192;
            v169 = (_BYTE *)(v192 + v175);
          }
          *v169 = 0;
          v167 = v226;
LABEL_225:
          if (++v168 == v167)
          {
LABEL_339:
            v230 = *(std::string *)(a1 + 72);
            *((_BYTE *)&v228.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v228, "value");
            sub_2081EDBE4(&__p, a1, 0, (const void **)&v228.__r_.__value_.__l.__data_);
            sub_207D1B330(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
            *((_BYTE *)a2 + 88) = 1;
            if (*((_BYTE *)a2 + 128))
            {
              exception = __cxa_allocate_exception(0x28uLL);
              *(_QWORD *)exception = off_24C072CF8;
              *((_DWORD *)exception + 2) = (_DWORD)v236;
              std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v237);
              *(_QWORD *)exception = off_24C072DF8;
              *((_QWORD *)exception + 4) = v238;
              __cxa_throw(exception, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
            }
            goto LABEL_342;
          }
        }
      default:
        v194 = *(unsigned __int8 **)(a1 + 96);
        v193 = *(unsigned __int8 **)(a1 + 104);
        memset(&v231, 0, sizeof(v231));
        if (v194 == v193)
          goto LABEL_341;
        v227 = v193;
        break;
    }
    break;
  }
  do
  {
    v198 = *v194;
    if (v198 > 0x1F)
    {
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
      {
        v195 = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v231.__r_.__value_.__l.__size_ != v195)
        {
          v195 = v231.__r_.__value_.__l.__size_;
          v196 = (std::string *)v231.__r_.__value_.__r.__words[0];
LABEL_328:
          v231.__r_.__value_.__l.__size_ = v195 + 1;
          goto LABEL_283;
        }
        if ((v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          sub_207C95C50();
        v207 = (std::string *)v231.__r_.__value_.__r.__words[0];
        v211 = 0x7FFFFFFFFFFFFFF7;
        if (v195 >= 0x3FFFFFFFFFFFFFF3)
        {
LABEL_323:
          v214 = (std::string *)operator new(v211);
          v196 = v214;
          if (!v195 || (memmove(v214, v207, v195), v195 != 22))
            operator delete(v207);
          v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
          v231.__r_.__value_.__r.__words[2] = v211 | 0x8000000000000000;
          goto LABEL_328;
        }
      }
      else
      {
        if (HIBYTE(v231.__r_.__value_.__r.__words[2]) != 22)
        {
          v195 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
          *((_BYTE *)&v231.__r_.__value_.__s + 23) = (*((_BYTE *)&v231.__r_.__value_.__s + 23) + 1) & 0x7F;
          v196 = &v231;
LABEL_283:
          v197 = (char *)v196 + v195;
          *v197 = v198;
          v197[1] = 0;
          goto LABEL_284;
        }
        v207 = &v231;
        v195 = 22;
      }
      if (v195 + 1 > 2 * v195)
        v212 = v195 + 1;
      else
        v212 = 2 * v195;
      v213 = (v212 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v212 | 7) != 0x17)
        v213 = v212 | 7;
      if (v212 >= 0x17)
        v211 = v213 + 1;
      else
        v211 = 23;
      goto LABEL_323;
    }
    LOBYTE(v236) = 0;
    *(_QWORD *)__str = 0;
    snprintf(__str, 9uLL, "<U+%.4X>", v198);
    v199 = strlen(__str);
    v200 = v199;
    if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v201 = 22;
    else
      v201 = (v231.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v202 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
    else
      v202 = v231.__r_.__value_.__l.__size_;
    if (v201 - v202 >= v199)
    {
      if (!v199)
        goto LABEL_284;
      if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v208 = &v231;
      else
        v208 = (std::string *)v231.__r_.__value_.__r.__words[0];
      memmove((char *)v208 + v202, __str, v199);
      v209 = v202 + v200;
      if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
        v231.__r_.__value_.__l.__size_ = v202 + v200;
      else
        *((_BYTE *)&v231.__r_.__value_.__s + 23) = v209 & 0x7F;
      v210 = (char *)v208 + v209;
    }
    else
    {
      v203 = v202 + v199;
      if (0x7FFFFFFFFFFFFFF6 - v201 < v202 + v199 - v201)
        sub_207C95C50();
      if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v204 = &v231;
      else
        v204 = (std::string *)v231.__r_.__value_.__r.__words[0];
      v205 = 0x7FFFFFFFFFFFFFF7;
      if (v201 < 0x3FFFFFFFFFFFFFF3)
      {
        v206 = 2 * v201;
        if (v203 > 2 * v201)
          v206 = v202 + v199;
        if (v206 >= 0x17)
        {
          v215 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
          v216 = v206 | 7;
          if (v216 == 23)
            v216 = v215;
          v205 = v216 + 1;
        }
        else
        {
          v205 = 23;
        }
      }
      v217 = operator new(v205);
      v218 = (std::string::size_type)v217;
      if (v202)
        memmove(v217, v204, v202);
      memcpy((void *)(v218 + v202), __str, v200);
      if (v201 != 22)
        operator delete(v204);
      v231.__r_.__value_.__l.__size_ = v202 + v200;
      v231.__r_.__value_.__r.__words[2] = v205 | 0x8000000000000000;
      v231.__r_.__value_.__r.__words[0] = v218;
      v210 = (_BYTE *)(v218 + v203);
    }
    *v210 = 0;
    v193 = v227;
LABEL_284:
    ++v194;
  }
  while (v194 != v193);
LABEL_341:
  v230 = *(std::string *)(a1 + 72);
  *((_BYTE *)&v228.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v228, "value");
  sub_2081EDBE4(&__p, a1, 0x10u, (const void **)&v228.__r_.__value_.__l.__data_);
  sub_207D1B330(101, (uint64_t *)&v230, (uint64_t)&__p, (uint64_t)__str);
  *((_BYTE *)a2 + 88) = 1;
  if (*((_BYTE *)a2 + 128))
  {
    v221 = __cxa_allocate_exception(0x28uLL);
    *(_QWORD *)v221 = off_24C072CF8;
    *((_DWORD *)v221 + 2) = (_DWORD)v236;
    std::runtime_error::runtime_error((std::runtime_error *)v221 + 1, &v237);
    *(_QWORD *)v221 = off_24C072DF8;
    *((_QWORD *)v221 + 4) = v238;
    __cxa_throw(v221, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
  }
LABEL_342:
  *(_QWORD *)__str = off_24C072CF8;
  std::runtime_error::~runtime_error(&v237);
  std::exception::~exception((std::exception *)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v220 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_344;
  }
LABEL_345:
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
LABEL_347:
  if (v232)
    operator delete(v232);
}

void sub_2081ED87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41)
{
  std::runtime_error *v41;
  uint64_t v42;
  void *v44;

  *(_QWORD *)(v42 - 136) = off_24C072CF8;
  std::runtime_error::~runtime_error(v41 + 1);
  std::exception::~exception((std::exception *)(v42 - 136));
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a40 < 0)
  {
    operator delete(a35);
    v44 = a41;
    if (a41)
    {
LABEL_10:
      operator delete(v44);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v44 = a41;
    if (a41)
      goto LABEL_10;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2081EDAA0(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 88) = 1;
  if (*(_BYTE *)(result + 128))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v4 = (void *)sub_207D1F664((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
  }
  return result;
}

void sub_2081EDAF0(std::string *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned int v6;
  size_t v7;
  char __str[8];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = *v4;
      if (v6 > 0x1F)
      {
        std::string::push_back(this, v6);
      }
      else
      {
        v9 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v6);
        v7 = strlen(__str);
        std::string::append(this, __str, v7);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_2081EDBC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_2081EDBE4(std::string *this, uint64_t a2, unsigned int a3, const void **a4)
{
  int v7;
  size_t v8;
  unint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  const char *v25;
  size_t v26;
  std::string::size_type v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  size_t v36;
  unsigned int v37;
  std::string::size_type size;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  void **v52;
  std::string::size_type v53;
  void *v54;
  const char *v55;
  size_t v56;
  std::string::size_type v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  void **v63;
  std::string::size_type v64;
  std::string v65;
  std::string __dst;
  std::string v67;
  std::string v68;
  void *__p[2];
  int64_t v70;
  char __str[8];
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 13;
  strcpy((char *)this, "syntax error ");
  v7 = *((char *)a4 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a4 + 23);
  else
    v8 = (size_t)a4[1];
  if (v8)
  {
    v9 = v8 + 14;
    if (v8 + 14 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v9 > 0x16)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (char *)operator new(v12 + 1);
      v68.__r_.__value_.__l.__size_ = v8 + 14;
      v68.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      memset(&v68, 0, sizeof(v68));
      v11 = (char *)&v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = v8 + 14;
    }
    qmemcpy(v11, "while parsing ", 14);
    v14 = v11 + 14;
    if (v7 >= 0)
      v15 = a4;
    else
      v15 = *a4;
    memmove(v11 + 14, v15, v8);
    v14[v8] = 0;
    v16 = std::string::append(&v68, " ", 1uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v70 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v70 >= 0)
      v19 = HIBYTE(v70);
    else
      v19 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_22:
  std::string::append(this, "- ", 2uLL);
  v20 = *(int *)(a2 + 32);
  if ((_DWORD)v20 != 14)
  {
    if (v20 > 0x10)
      v25 = "unknown token";
    else
      v25 = off_24C08DA98[v20];
    v26 = strlen(v25);
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v27 = v26;
    if (v26 >= 0x17)
    {
      v40 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v40 = v26 | 7;
      v41 = v40 + 1;
      v28 = operator new(v40 + 1);
      v68.__r_.__value_.__l.__size_ = v27;
      v68.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = v26;
      v28 = &v68;
      if (!v26)
        goto LABEL_49;
    }
    memcpy(v28, v25, v27);
LABEL_49:
    *((_BYTE *)v28 + v27) = 0;
    v42 = std::string::insert(&v68, 0, "unexpected ", 0xBuLL);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v70 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v70 >= 0)
      v45 = HIBYTE(v70);
    else
      v45 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v44, v45);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_87;
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_87;
    }
    v54 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_86;
  }
  v21 = *(const char **)(a2 + 144);
  v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v29 = v22 | 7;
    v30 = v29 + 1;
    p_dst = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_37;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_37:
    memmove(p_dst, v21, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v31 = std::string::append(&__dst, "; last read: '", 0xEuLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = *(unsigned __int8 **)(a2 + 96);
  v34 = *(unsigned __int8 **)(a2 + 104);
  memset(&v65, 0, sizeof(v65));
  if (v33 == v34)
  {
    size = 0;
    v39 = 0;
    v37 = 0;
  }
  else
  {
    do
    {
      v35 = *v33;
      if (v35 > 0x1F)
      {
        std::string::push_back(&v65, v35);
      }
      else
      {
        v72 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v35);
        v36 = strlen(__str);
        std::string::append(&v65, __str, v36);
      }
      ++v33;
    }
    while (v33 != v34);
    v37 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    size = v65.__r_.__value_.__l.__size_;
    v39 = v65.__r_.__value_.__r.__words[0];
  }
  if ((v37 & 0x80u) == 0)
    v46 = &v65;
  else
    v46 = (std::string *)v39;
  if ((v37 & 0x80u) == 0)
    v47 = v37;
  else
    v47 = size;
  v48 = std::string::append(&v67, (const std::string::value_type *)v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v68, "'", 1uLL);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v70 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v52 = __p;
  else
    v52 = (void **)__p[0];
  if (v70 >= 0)
    v53 = HIBYTE(v70);
  else
    v53 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v52, v53);
  if (SHIBYTE(v70) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_75:
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_83;
    }
  }
  else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v68.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_77;
LABEL_84:
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_83:
  operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_84;
LABEL_77:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_87;
LABEL_85:
  v54 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_86:
  operator delete(v54);
LABEL_87:
  if (!a3)
    return;
  if (a3 > 0x10)
    v55 = "unknown token";
  else
    v55 = off_24C08DB20[a3 - 1];
  v56 = strlen(v55);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v57 = v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = operator new(v59 + 1);
    v68.__r_.__value_.__l.__size_ = v57;
    v68.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    goto LABEL_98;
  }
  *((_BYTE *)&v68.__r_.__value_.__s + 23) = v56;
  v58 = &v68;
  if (v56)
LABEL_98:
    memcpy(v58, v55, v57);
  *((_BYTE *)v58 + v57) = 0;
  v61 = std::string::insert(&v68, 0, "; expected ", 0xBuLL);
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v70 = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v63 = __p;
  else
    v63 = (void **)__p[0];
  if (v70 >= 0)
    v64 = HIBYTE(v70);
  else
    v64 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v63, v64);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_109:
    operator delete(v68.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_109;
}

void sub_2081EE268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
  {
    operator delete(__p);
    if (a35 < 0)
    {
LABEL_5:
      operator delete(a30);
      if (a16 < 0)
      {
LABEL_8:
        operator delete(a11);
        if ((a28 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a28 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a22 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v42 + 23) < 0)
            operator delete(*(void **)v42);
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a17);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a23);
      if ((a22 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a35 < 0)
  {
    goto LABEL_5;
  }
  if (a16 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

uint64_t sub_2081EE39C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  sub_20806DC2C((void ***)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_2081EE420(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char **v13;
  unint64_t v14;
  void ***v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  void ***v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _OWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  unsigned __int8 *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _OWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  char v76;
  unsigned __int8 *v77;
  void **v78;
  _QWORD *v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void ***p_size;
  char *v83;
  char v84;
  unsigned __int8 *v85;
  std::string::size_type v86;
  _QWORD *v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  void ***v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char v115;
  void ***v116;
  void ***v117;
  void ***v118;
  void ***v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char v125;
  void ***v126;
  void ***v127;
  void ***v128;
  void ***v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  void ***v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char v141;
  void ***v142;
  void ***v143;
  void ***v144;
  void ***v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char v151;
  void ***v152;
  void ***v153;
  void ***v154;
  unsigned __int8 *v155;
  unint64_t v156;
  int v157;
  int v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  __int128 v170;
  char *v171;
  int v172;
  unsigned __int8 *v173;
  std::string::size_type v174;
  char *v175;
  char *v176;
  const char *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  std::runtime_error_vtbl *v181;
  char v182;
  void ***v183;
  std::runtime_error v184;
  void ***v185;
  void ***v186;
  int v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  size_t v193;
  std::string *v194;
  _BYTE *v195;
  unsigned int v196;
  size_t v197;
  size_t v198;
  std::string::size_type v199;
  size_t size;
  unint64_t v201;
  std::string *v202;
  size_t v203;
  unint64_t v204;
  std::string *v205;
  std::string *v206;
  size_t v207;
  _BYTE *v208;
  size_t v209;
  unint64_t v210;
  uint64_t v211;
  std::string *v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  std::string::size_type v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  size_t v219;
  std::string *v220;
  _BYTE *v221;
  unsigned int v222;
  size_t v223;
  size_t v224;
  std::string::size_type v225;
  size_t v226;
  unint64_t v227;
  std::string *v228;
  size_t v229;
  unint64_t v230;
  std::string *v231;
  std::string *v232;
  size_t v233;
  _BYTE *v234;
  size_t v235;
  unint64_t v236;
  uint64_t v237;
  std::string *v238;
  unint64_t v239;
  uint64_t v240;
  void *v241;
  std::string::size_type v242;
  void *exception;
  void *v244;
  void *v245;
  uint64_t **v246;
  uint64_t v247;
  unsigned __int8 *v248;
  unsigned __int8 *v249;
  std::string v250;
  std::string __p;
  std::string v252;
  std::string v253;
  void *v254;
  unint64_t v255;
  uint64_t v256;
  char __str[8];
  void **v258;
  std::runtime_error v259;
  uint64_t v260;
  uint64_t v261;

  v247 = a1 + 120;
  v4 = a1 + 40;
  v261 = *MEMORY[0x24BDAC8D0];
  v254 = 0;
  v255 = 0;
  v246 = (uint64_t **)(a2 + 1);
  v256 = 0;
LABEL_2:
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        __str[0] = 1;
        sub_2081F1100(a2, (unsigned __int8 *)__str);
        goto LABEL_190;
      case 2:
        __str[0] = 0;
        sub_2081F1100(a2, (unsigned __int8 *)__str);
        goto LABEL_190;
      case 3:
        v16 = a2[2];
        if (a2[1] != v16)
        {
          v17 = *((_QWORD *)v16 - 1);
          if (*(_BYTE *)v17 == 2)
          {
            v13 = *(char ***)(v17 + 8);
            v15 = (void ***)v13[1];
            v18 = (unint64_t)v13[2];
            if ((unint64_t)v15 < v18)
            {
              *(_BYTE *)v15 = 0;
              v15[1] = 0;
              v13[1] = (char *)(v15 + 2);
              goto LABEL_190;
            }
            v119 = (void ***)*v13;
            v120 = ((char *)v15 - *v13) >> 4;
            v121 = v120 + 1;
            if (!((unint64_t)(v120 + 1) >> 60))
            {
              v122 = v18 - (_QWORD)v119;
              if (v122 >> 3 > v121)
                v121 = v122 >> 3;
              if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
                v123 = 0xFFFFFFFFFFFFFFFLL;
              else
                v123 = v121;
              if (!(v123 >> 60))
              {
                v124 = (char *)operator new(16 * v123);
                v112 = &v124[16 * v120];
                v113 = &v124[16 * v123];
                *v112 = 0;
                *((_QWORD *)v112 + 1) = 0;
                v114 = v112 + 16;
                if (v15 != v119)
                {
                  do
                  {
                    v125 = *((_BYTE *)v15 - 16);
                    v15 -= 2;
                    *(v112 - 16) = v125;
                    v112 -= 16;
                    *((_QWORD *)v112 + 1) = v15[1];
                    *(_BYTE *)v15 = 0;
                    v15[1] = 0;
                  }
                  while (v15 != v119);
                  v15 = (void ***)*v13;
                  v126 = (void ***)v13[1];
                  *v13 = v112;
                  v13[1] = v114;
                  v13[2] = v113;
                  if (v126 != v15)
                  {
                    v127 = v126 - 1;
                    do
                    {
                      v128 = v127 - 1;
                      sub_20806DC2C(v127, *((unsigned __int8 *)v127 - 8));
                      v127 -= 2;
                    }
                    while (v128 != v15);
                  }
                  goto LABEL_181;
                }
LABEL_184:
                *v13 = v112;
                v13[1] = v114;
                v13[2] = v113;
                if (!v15)
                  goto LABEL_183;
                goto LABEL_182;
              }
LABEL_402:
              sub_207CA3AB8();
            }
LABEL_404:
            sub_20806DC18();
          }
          v85 = a2[4];
          v75 = *v85;
          *v85 = 0;
          v253.__r_.__value_.__s.__data_[0] = v75;
          v86 = *((_QWORD *)v85 + 1);
          *((_QWORD *)v85 + 1) = 0;
          goto LABEL_188;
        }
        v77 = *a2;
        v75 = **a2;
        *v77 = 0;
        __str[0] = v75;
        v78 = (void **)*((_QWORD *)v77 + 1);
        *((_QWORD *)v77 + 1) = 0;
        goto LABEL_72;
      case 4:
        v24 = a2[2];
        if (a2[1] != v24)
        {
          v25 = *((_QWORD *)v24 - 1);
          if (*(_BYTE *)v25 != 2)
          {
            v87 = operator new(0x18uLL);
            v88 = v87;
            if (*(char *)(a1 + 143) < 0)
            {
              sub_207CA40D8(v87, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
            }
            else
            {
              *(_OWORD *)v87 = *(_OWORD *)v247;
              v87[2] = *(_QWORD *)(v247 + 16);
            }
            v173 = a2[4];
            v75 = *v173;
            *v173 = 3;
            v252.__r_.__value_.__s.__data_[0] = v75;
            v174 = *((_QWORD *)v173 + 1);
            *((_QWORD *)v173 + 1) = v88;
            v252.__r_.__value_.__l.__size_ = v174;
            p_size = (void ***)&v252.__r_.__value_.__l.__size_;
            goto LABEL_189;
          }
          v26 = *(_QWORD *)(v25 + 8);
          v27 = *(void ****)(v26 + 8);
          v28 = *(_QWORD *)(v26 + 16);
          if ((unint64_t)v27 < v28)
          {
            v27[1] = 0;
            *(_BYTE *)v27 = 3;
            v29 = (void **)operator new(0x18uLL);
            v30 = v29;
            if (*(char *)(a1 + 143) < 0)
            {
              sub_207CA40D8(v29, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
            }
            else
            {
              *(_OWORD *)v29 = *(_OWORD *)v247;
              v29[2] = *(void **)(v247 + 16);
            }
            v27[1] = v30;
            *(_QWORD *)(v26 + 8) = v27 + 2;
            *(_QWORD *)(v26 + 8) = v27 + 2;
LABEL_190:
            v156 = v255;
            if (v255)
            {
              while (1)
              {
                if (((*(_QWORD *)((char *)v254 + (((v156 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v156
                                                                                                - 1)) & 1) != 0)
                {
                  v157 = sub_2081EA2E8(v4);
                  *(_DWORD *)(a1 + 32) = v157;
                  if (v157 == 13)
                    goto LABEL_228;
                  if (v157 != 10)
                  {
                    sub_2081EDAF0(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    v252 = *(std::string *)(a1 + 72);
                    sub_207C96EE8(&v250, "array");
                    sub_2081EDBE4(&__p, a1, 0xAu, (const void **)&v250.__r_.__value_.__l.__data_);
                    sub_207D1B330(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                    sub_2081F018C((uint64_t)a2, (uint64_t)__str);
                    goto LABEL_393;
                  }
                }
                else
                {
                  v158 = sub_2081EA2E8(v4);
                  *(_DWORD *)(a1 + 32) = v158;
                  if (v158 == 13)
                  {
                    v159 = sub_2081EA2E8(v4);
                    *(_DWORD *)(a1 + 32) = v159;
                    if (v159 == 4)
                    {
                      v160 = *(uint64_t **)(*((_QWORD *)a2[2] - 1) + 8);
                      __str[0] = 0;
                      v258 = 0;
                      v161 = *v160;
                      v162 = v160[1];
                      if (*v160 != v162)
                      {
                        v163 = *(_BYTE *)(a1 + 143);
                        if (v163 >= 0)
                          v164 = *(unsigned __int8 *)(a1 + 143);
                        else
                          v164 = *(_QWORD *)(a1 + 128);
                        if (v163 >= 0)
                          v165 = (unsigned __int8 *)v247;
                        else
                          v165 = *(unsigned __int8 **)(a1 + 120);
                        do
                        {
                          v166 = *(unsigned __int8 *)(v161 + 23);
                          if ((v166 & 0x80u) == 0)
                            v167 = *(unsigned __int8 *)(v161 + 23);
                          else
                            v167 = *(_QWORD *)(v161 + 8);
                          if (v167 == v164)
                          {
                            if ((v166 & 0x80) != 0)
                            {
                              if (!memcmp(*(const void **)v161, v165, *(_QWORD *)(v161 + 8)))
                                goto LABEL_219;
                            }
                            else
                            {
                              if (!*(_BYTE *)(v161 + 23))
                              {
LABEL_219:
                                v169 = 0;
                                goto LABEL_227;
                              }
                              v168 = 0;
                              while (*(unsigned __int8 *)(v161 + v168) == v165[v168])
                              {
                                if (v166 == ++v168)
                                  goto LABEL_219;
                              }
                            }
                          }
                          v161 += 40;
                        }
                        while (v161 != v162);
                      }
                      if (v162 >= v160[2])
                      {
                        v171 = sub_2080966E4(v160, v247, (unsigned __int8 *)__str);
                      }
                      else
                      {
                        if (*(char *)(a1 + 143) < 0)
                        {
                          sub_207CA40D8((_BYTE *)v162, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
                        }
                        else
                        {
                          v170 = *(_OWORD *)v247;
                          *(_QWORD *)(v162 + 16) = *(_QWORD *)(v247 + 16);
                          *(_OWORD *)v162 = v170;
                        }
                        sub_2080968B4(v162 + 24, (unsigned __int8 *)__str);
                        v171 = (char *)(v162 + 40);
                        v160[1] = v162 + 40;
                      }
                      v160[1] = (uint64_t)v171;
                      v161 = (uint64_t)(v171 - 40);
                      v169 = __str[0];
LABEL_227:
                      sub_20806DC2C(&v258, v169);
                      a2[4] = (unsigned __int8 *)(v161 + 24);
                      v172 = sub_2081EA2E8(v4);
                      *(_DWORD *)(a1 + 32) = v172;
                      if (v172 == 12)
                      {
LABEL_228:
                        *(_DWORD *)(a1 + 32) = sub_2081EA2E8(v4);
                        goto LABEL_2;
                      }
LABEL_392:
                      sub_2081EDAF0(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                      v252 = *(std::string *)(a1 + 72);
                      sub_207C96EE8(&v250, "object separator");
                      sub_2081EDBE4(&__p, a1, 0xCu, (const void **)&v250.__r_.__value_.__l.__data_);
                      sub_207D1B330(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                      sub_2081F018C((uint64_t)a2, (uint64_t)__str);
LABEL_393:
                      *(_QWORD *)__str = off_24C072CF8;
                      std::runtime_error::~runtime_error(&v259);
                      std::exception::~exception((std::exception *)__str);
LABEL_394:
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
                      {
                        v244 = (void *)v250.__r_.__value_.__r.__words[0];
LABEL_384:
                        operator delete(v244);
                      }
                      goto LABEL_385;
                    }
LABEL_391:
                    sub_2081EDAF0(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    v252 = *(std::string *)(a1 + 72);
                    sub_207C96EE8(&v250, "object key");
                    sub_2081EDBE4(&__p, a1, 4u, (const void **)&v250.__r_.__value_.__l.__data_);
                    sub_207D1B330(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                    sub_2081F018C((uint64_t)a2, (uint64_t)__str);
                    goto LABEL_393;
                  }
                  if (v158 != 11)
                  {
                    sub_2081EDAF0(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                    v252 = *(std::string *)(a1 + 72);
                    sub_207C96EE8(&v250, "object");
                    sub_2081EDBE4(&__p, a1, 0xBu, (const void **)&v250.__r_.__value_.__l.__data_);
                    sub_207D1B330(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
                    sub_2081F018C((uint64_t)a2, (uint64_t)__str);
                    goto LABEL_393;
                  }
                }
                a2[2] -= 8;
                v156 = --v255;
                if (!v255)
                  goto LABEL_387;
              }
            }
            goto LABEL_387;
          }
          v129 = *(void ****)v26;
          v130 = ((uint64_t)v27 - *(_QWORD *)v26) >> 4;
          v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 60)
            goto LABEL_404;
          v132 = v28 - (_QWORD)v129;
          if (v132 >> 3 > v131)
            v131 = v132 >> 3;
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
            v133 = 0xFFFFFFFFFFFFFFFLL;
          else
            v133 = v131;
          v260 = v26 + 16;
          if (v133)
          {
            if (v133 >> 60)
              goto LABEL_402;
            v134 = (char *)operator new(16 * v133);
          }
          else
          {
            v134 = 0;
          }
          v176 = &v134[16 * v130];
          *(_QWORD *)__str = v134;
          v258 = (void **)v176;
          v177 = &v134[16 * v133];
          v259.__vftable = (std::runtime_error_vtbl *)v176;
          v259.__imp_.__imp_ = v177;
          *((_QWORD *)v176 + 1) = 0;
          v178 = v176 + 8;
          *v176 = 3;
          v179 = operator new(0x18uLL);
          v180 = v179;
          if (*(char *)(a1 + 143) < 0)
          {
            sub_207CA40D8(v179, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
            v129 = *(void ****)v26;
            v27 = *(void ****)(v26 + 8);
            *v178 = v180;
            v181 = (std::runtime_error_vtbl *)(v176 + 16);
            v259.__vftable = (std::runtime_error_vtbl *)(v176 + 16);
            if (v27 == v129)
              goto LABEL_246;
          }
          else
          {
            *(_OWORD *)v179 = *(_OWORD *)v247;
            v179[2] = *(_QWORD *)(v247 + 16);
            *v178 = v179;
            v181 = (std::runtime_error_vtbl *)(v176 + 16);
            v259.__vftable = (std::runtime_error_vtbl *)(v176 + 16);
            if (v27 == v129)
            {
LABEL_246:
              *(_QWORD *)v26 = v176;
              *(_QWORD *)(v26 + 8) = v181;
              *(_QWORD *)(v26 + 16) = v177;
              if (!v129)
                goto LABEL_245;
              goto LABEL_244;
            }
          }
          do
          {
            v182 = *((_BYTE *)v27 - 16);
            v27 -= 2;
            *(v176 - 16) = v182;
            v176 -= 16;
            *((_QWORD *)v176 + 1) = v27[1];
            *(_BYTE *)v27 = 0;
            v27[1] = 0;
          }
          while (v27 != v129);
          v129 = *(void ****)v26;
          v183 = *(void ****)(v26 + 8);
          v184 = v259;
          *(_QWORD *)v26 = v176;
          *(std::runtime_error *)(v26 + 8) = v184;
          v181 = v184.__vftable;
          if (v183 != v129)
          {
            v185 = v183 - 1;
            do
            {
              v186 = v185 - 1;
              sub_20806DC2C(v185, *((unsigned __int8 *)v185 - 8));
              v185 -= 2;
            }
            while (v186 != v129);
          }
          if (!v129)
            goto LABEL_245;
LABEL_244:
          operator delete(v129);
LABEL_245:
          *(_QWORD *)(v26 + 8) = v181;
          goto LABEL_190;
        }
        v79 = operator new(0x18uLL);
        v80 = v79;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_207CA40D8(v79, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v79 = *(_OWORD *)v247;
          v79[2] = *(_QWORD *)(v247 + 16);
        }
        v155 = *a2;
        v75 = **a2;
        *v155 = 3;
        v253.__r_.__value_.__s.__data_[0] = v75;
        v86 = *((_QWORD *)v155 + 1);
        *((_QWORD *)v155 + 1) = v80;
        goto LABEL_188;
      case 5:
        v10 = *(void ***)(a1 + 160);
        v35 = a2[2];
        if (a2[1] != v35)
        {
          v36 = *((_QWORD *)v35 - 1);
          if (*(_BYTE *)v36 == 2)
          {
            v13 = *(char ***)(v36 + 8);
            v15 = (void ***)v13[1];
            v37 = (unint64_t)v13[2];
            if ((unint64_t)v15 < v37)
            {
              *(_BYTE *)v15 = 6;
              v15[1] = v10;
              v13[1] = (char *)(v15 + 2);
              goto LABEL_190;
            }
            v135 = (void ***)*v13;
            v136 = ((char *)v15 - *v13) >> 4;
            v137 = v136 + 1;
            if ((unint64_t)(v136 + 1) >> 60)
              goto LABEL_404;
            v138 = v37 - (_QWORD)v135;
            if (v138 >> 3 > v137)
              v137 = v138 >> 3;
            if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
              v139 = 0xFFFFFFFFFFFFFFFLL;
            else
              v139 = v137;
            if (v139 >> 60)
              goto LABEL_402;
            v140 = (char *)operator new(16 * v139);
            v112 = &v140[16 * v136];
            v113 = &v140[16 * v139];
            *v112 = 6;
            *((_QWORD *)v112 + 1) = v10;
            v114 = v112 + 16;
            if (v15 == v135)
              goto LABEL_184;
            do
            {
              v141 = *((_BYTE *)v15 - 16);
              v15 -= 2;
              *(v112 - 16) = v141;
              v112 -= 16;
              *((_QWORD *)v112 + 1) = v15[1];
              *(_BYTE *)v15 = 0;
              v15[1] = 0;
            }
            while (v15 != v135);
            v15 = (void ***)*v13;
            v142 = (void ***)v13[1];
            *v13 = v112;
            v13[1] = v114;
            v13[2] = v113;
            if (v142 != v15)
            {
              v143 = v142 - 1;
              do
              {
                v144 = v143 - 1;
                sub_20806DC2C(v143, *((unsigned __int8 *)v143 - 8));
                v143 -= 2;
              }
              while (v144 != v15);
            }
LABEL_181:
            if (!v15)
            {
LABEL_183:
              v13[1] = v114;
              goto LABEL_190;
            }
LABEL_182:
            operator delete(v15);
            goto LABEL_183;
          }
          v83 = (char *)a2[4];
          v75 = *v83;
          v84 = 6;
          goto LABEL_78;
        }
        v74 = *a2;
        v75 = **a2;
        v76 = 6;
        goto LABEL_70;
      case 6:
        v10 = *(void ***)(a1 + 152);
        v11 = a2[2];
        if (a2[1] != v11)
        {
          v12 = *((_QWORD *)v11 - 1);
          if (*(_BYTE *)v12 == 2)
          {
            v13 = *(char ***)(v12 + 8);
            v15 = (void ***)v13[1];
            v14 = (unint64_t)v13[2];
            if ((unint64_t)v15 < v14)
            {
              *(_BYTE *)v15 = 5;
              v15[1] = v10;
              v13[1] = (char *)(v15 + 2);
              goto LABEL_190;
            }
            v106 = (void ***)*v13;
            v107 = ((char *)v15 - *v13) >> 4;
            v108 = v107 + 1;
            if ((unint64_t)(v107 + 1) >> 60)
              goto LABEL_404;
            v109 = v14 - (_QWORD)v106;
            if (v109 >> 3 > v108)
              v108 = v109 >> 3;
            if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
              v110 = 0xFFFFFFFFFFFFFFFLL;
            else
              v110 = v108;
            if (v110 >> 60)
              goto LABEL_402;
            v111 = (char *)operator new(16 * v110);
            v112 = &v111[16 * v107];
            v113 = &v111[16 * v110];
            *v112 = 5;
            *((_QWORD *)v112 + 1) = v10;
            v114 = v112 + 16;
            if (v15 == v106)
              goto LABEL_184;
            do
            {
              v115 = *((_BYTE *)v15 - 16);
              v15 -= 2;
              *(v112 - 16) = v115;
              v112 -= 16;
              *((_QWORD *)v112 + 1) = v15[1];
              *(_BYTE *)v15 = 0;
              v15[1] = 0;
            }
            while (v15 != v106);
            v15 = (void ***)*v13;
            v116 = (void ***)v13[1];
            *v13 = v112;
            v13[1] = v114;
            v13[2] = v113;
            if (v116 != v15)
            {
              v117 = v116 - 1;
              do
              {
                v118 = v117 - 1;
                sub_20806DC2C(v117, *((unsigned __int8 *)v117 - 8));
                v117 -= 2;
              }
              while (v118 != v15);
            }
            goto LABEL_181;
          }
          v83 = (char *)a2[4];
          v75 = *v83;
          v84 = 5;
LABEL_78:
          *v83 = v84;
          v253.__r_.__value_.__s.__data_[0] = v75;
          v86 = *((_QWORD *)v83 + 1);
          *((_QWORD *)v83 + 1) = v10;
LABEL_188:
          v253.__r_.__value_.__l.__size_ = v86;
          p_size = (void ***)&v253.__r_.__value_.__l.__size_;
          goto LABEL_189;
        }
        v74 = *a2;
        v75 = **a2;
        v76 = 5;
LABEL_70:
        *v74 = v76;
        __str[0] = v75;
        v78 = (void **)*((_QWORD *)v74 + 1);
        *((_QWORD *)v74 + 1) = v10;
LABEL_72:
        v258 = v78;
        p_size = &v258;
LABEL_189:
        sub_20806DC2C(p_size, v75);
        goto LABEL_190;
      case 7:
        v31 = *(void ***)(a1 + 168);
        if (((unint64_t)v31 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          sub_2081EDAF0(&v253, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_2081EDAF0(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_207C96E8C("number overflow parsing '", &v250, &__p);
          sub_207C96E30("'", &__p, &v252);
          sub_207D1CEE4(406, (uint64_t)&v252, (uint64_t)__str);
          sub_2081F0D74((uint64_t)a2, (uint64_t)__str);
          *(_QWORD *)__str = off_24C072CF8;
          std::runtime_error::~runtime_error(&v259);
          std::exception::~exception((std::exception *)__str);
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v252.__r_.__value_.__l.__data_);
          goto LABEL_394;
        }
        v32 = a2[2];
        if (a2[1] == v32)
        {
          v81 = *a2;
          v75 = **a2;
          *v81 = 7;
          __str[0] = v75;
          v78 = (void **)*((_QWORD *)v81 + 1);
          *((_QWORD *)v81 + 1) = v31;
          goto LABEL_72;
        }
        v33 = *((_QWORD *)v32 - 1);
        if (*(_BYTE *)v33 != 2)
        {
          v89 = a2[4];
          v75 = *v89;
          *v89 = 7;
          v253.__r_.__value_.__s.__data_[0] = v75;
          v86 = *((_QWORD *)v89 + 1);
          *((_QWORD *)v89 + 1) = v31;
          goto LABEL_188;
        }
        v13 = *(char ***)(v33 + 8);
        v15 = (void ***)v13[1];
        v34 = (unint64_t)v13[2];
        if ((unint64_t)v15 < v34)
        {
          *(_BYTE *)v15 = 7;
          v15[1] = v31;
          v13[1] = (char *)(v15 + 2);
          goto LABEL_190;
        }
        v145 = (void ***)*v13;
        v146 = ((char *)v15 - *v13) >> 4;
        v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 60)
          sub_20806DC18();
        v148 = v34 - (_QWORD)v145;
        if (v148 >> 3 > v147)
          v147 = v148 >> 3;
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0)
          v149 = 0xFFFFFFFFFFFFFFFLL;
        else
          v149 = v147;
        if (v149 >> 60)
          sub_207CA3AB8();
        v150 = (char *)operator new(16 * v149);
        v112 = &v150[16 * v146];
        v113 = &v150[16 * v149];
        *v112 = 7;
        *((_QWORD *)v112 + 1) = v31;
        v114 = v112 + 16;
        if (v15 != v145)
        {
          do
          {
            v151 = *((_BYTE *)v15 - 16);
            v15 -= 2;
            *(v112 - 16) = v151;
            v112 -= 16;
            *((_QWORD *)v112 + 1) = v15[1];
            *(_BYTE *)v15 = 0;
            v15[1] = 0;
          }
          while (v15 != v145);
          v15 = (void ***)*v13;
          v152 = (void ***)v13[1];
          *v13 = v112;
          v13[1] = v114;
          v13[2] = v113;
          if (v152 != v15)
          {
            v153 = v152 - 1;
            do
            {
              v154 = v153 - 1;
              sub_20806DC2C(v153, *((unsigned __int8 *)v153 - 8));
              v153 -= 2;
            }
            while (v154 != v15);
          }
          goto LABEL_181;
        }
        goto LABEL_184;
      case 8:
        v5 = sub_2081F0DC4(a2, 2u);
        v6 = v5;
        v8 = (uint64_t *)a2[2];
        v7 = a2[3];
        if (v8 < (uint64_t *)v7)
        {
          *v8 = v5;
          v9 = (uint64_t)(v8 + 1);
          goto LABEL_83;
        }
        v38 = *v246;
        v39 = (char *)v8 - (char *)*v246;
        v40 = v39 >> 3;
        v41 = (v39 >> 3) + 1;
        if (v41 >> 61)
          goto LABEL_403;
        v42 = v7 - (unsigned __int8 *)v38;
        if (v42 >> 2 > v41)
          v41 = v42 >> 2;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          if (v43 >> 61)
            goto LABEL_402;
          v44 = operator new(8 * v43);
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v6;
          v9 = (uint64_t)(v45 + 8);
          v46 = (char *)((char *)v8 - (char *)v38);
          if (v8 == v38)
          {
LABEL_81:
            a2[1] = v45;
            a2[2] = (unsigned __int8 *)v9;
            a2[3] = &v44[8 * v43];
            if (!v8)
              goto LABEL_83;
LABEL_82:
            operator delete(v8);
            goto LABEL_83;
          }
        }
        else
        {
          v44 = 0;
          v45 = (unsigned __int8 *)(8 * v40);
          *(_QWORD *)(8 * v40) = v6;
          v9 = 8 * v40 + 8;
          v46 = (char *)((char *)v8 - (char *)v38);
          if (v8 == v38)
            goto LABEL_81;
        }
        v47 = (unint64_t)(v46 - 8);
        if (v47 < 0x58)
          goto LABEL_416;
        if ((unint64_t)((char *)v8 - &v44[v39]) < 0x20)
          goto LABEL_416;
        v48 = (v47 >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v50 = &v8[v49 / 0xFFFFFFFFFFFFFFF8];
        v45 -= v49;
        v51 = &v44[8 * v40 - 16];
        v52 = v8 - 2;
        v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 4;
          v53 -= 4;
        }
        while (v53);
        v8 = v50;
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_416:
          do
          {
            v55 = *--v8;
            *((_QWORD *)v45 - 1) = v55;
            v45 -= 8;
          }
          while (v8 != v38);
        }
        v8 = *v246;
        a2[1] = v45;
        a2[2] = (unsigned __int8 *)v9;
        a2[3] = &v44[8 * v43];
        if (v8)
          goto LABEL_82;
LABEL_83:
        a2[2] = (unsigned __int8 *)v9;
        v90 = sub_2081EA2E8(v4);
        *(_DWORD *)(a1 + 32) = v90;
        if (v90 == 10)
          goto LABEL_97;
        v91 = v255;
        if (v255 == v256 << 6)
        {
          if ((uint64_t)(v255 + 1) < 0)
            sub_207D159B0();
          v92 = v256 << 7;
          if (v256 << 7 <= (v255 & 0xFFFFFFFFFFFFFFC0) + 64)
            v92 = (v255 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v255 <= 0x3FFFFFFFFFFFFFFELL)
            v93 = v92;
          else
            v93 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v254, v93);
          v91 = v255;
        }
        v255 = v91 + 1;
        *(_QWORD *)((char *)v254 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v91;
        continue;
      case 9:
        v19 = sub_2081F0DC4(a2, 1u);
        v20 = v19;
        v22 = (uint64_t *)a2[2];
        v21 = a2[3];
        if (v22 < (uint64_t *)v21)
        {
          *v22 = v19;
          v23 = (uint64_t)(v22 + 1);
          goto LABEL_96;
        }
        v56 = *v246;
        v57 = (char *)v22 - (char *)*v246;
        v58 = v57 >> 3;
        v59 = (v57 >> 3) + 1;
        if (v59 >> 61)
LABEL_403:
          sub_2081F0BA8();
        v60 = v21 - (unsigned __int8 *)v56;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          if (v61 >> 61)
            goto LABEL_402;
          v62 = operator new(8 * v61);
          v63 = &v62[8 * v58];
          *(_QWORD *)v63 = v20;
          v23 = (uint64_t)(v63 + 8);
          v64 = (char *)((char *)v22 - (char *)v56);
          if (v22 == v56)
          {
LABEL_94:
            a2[1] = v63;
            a2[2] = (unsigned __int8 *)v23;
            a2[3] = &v62[8 * v61];
            if (!v22)
              goto LABEL_96;
LABEL_95:
            operator delete(v22);
            goto LABEL_96;
          }
        }
        else
        {
          v62 = 0;
          v63 = (unsigned __int8 *)(8 * v58);
          *(_QWORD *)(8 * v58) = v20;
          v23 = 8 * v58 + 8;
          v64 = (char *)((char *)v22 - (char *)v56);
          if (v22 == v56)
            goto LABEL_94;
        }
        v65 = (unint64_t)(v64 - 8);
        if (v65 < 0x58)
          goto LABEL_417;
        if ((unint64_t)((char *)v22 - &v62[v57]) < 0x20)
          goto LABEL_417;
        v66 = (v65 >> 3) + 1;
        v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
        v68 = &v22[v67 / 0xFFFFFFFFFFFFFFF8];
        v63 -= v67;
        v69 = &v62[8 * v58 - 16];
        v70 = v22 - 2;
        v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v72 = *(_OWORD *)v70;
          *(v69 - 1) = *((_OWORD *)v70 - 1);
          *v69 = v72;
          v69 -= 2;
          v70 -= 4;
          v71 -= 4;
        }
        while (v71);
        v22 = v68;
        if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_417:
          do
          {
            v73 = *--v22;
            *((_QWORD *)v63 - 1) = v73;
            v63 -= 8;
          }
          while (v22 != v56);
        }
        v22 = *v246;
        a2[1] = v63;
        a2[2] = (unsigned __int8 *)v23;
        a2[3] = &v62[8 * v61];
        if (v22)
          goto LABEL_95;
LABEL_96:
        a2[2] = (unsigned __int8 *)v23;
        v94 = sub_2081EA2E8(v4);
        *(_DWORD *)(a1 + 32) = v94;
        if (v94 == 11)
        {
LABEL_97:
          a2[2] -= 8;
          goto LABEL_190;
        }
        if (v94 != 4)
          goto LABEL_391;
        v95 = *(uint64_t **)(*((_QWORD *)a2[2] - 1) + 8);
        __str[0] = 0;
        v258 = 0;
        v96 = *v95;
        v97 = v95[1];
        if (*v95 != v97)
        {
          v98 = *(_BYTE *)(a1 + 143);
          if (v98 >= 0)
            v99 = *(unsigned __int8 *)(a1 + 143);
          else
            v99 = *(_QWORD *)(a1 + 128);
          if (v98 >= 0)
            v100 = (unsigned __int8 *)v247;
          else
            v100 = *(unsigned __int8 **)(a1 + 120);
          do
          {
            v101 = *(unsigned __int8 *)(v96 + 23);
            if ((v101 & 0x80u) == 0)
              v102 = *(unsigned __int8 *)(v96 + 23);
            else
              v102 = *(_QWORD *)(v96 + 8);
            if (v102 == v99)
            {
              if ((v101 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v96, v100, *(_QWORD *)(v96 + 8)))
                  goto LABEL_117;
              }
              else
              {
                if (!*(_BYTE *)(v96 + 23))
                {
LABEL_117:
                  v104 = 0;
                  goto LABEL_251;
                }
                v103 = 0;
                while (*(unsigned __int8 *)(v96 + v103) == v100[v103])
                {
                  if (v101 == ++v103)
                    goto LABEL_117;
                }
              }
            }
            v96 += 40;
          }
          while (v96 != v97);
        }
        if (v97 >= v95[2])
        {
          v175 = sub_2080966E4(v95, v247, (unsigned __int8 *)__str);
        }
        else
        {
          if (*(char *)(a1 + 143) < 0)
          {
            sub_207CA40D8((_BYTE *)v97, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
          }
          else
          {
            v105 = *(_OWORD *)v247;
            *(_QWORD *)(v97 + 16) = *(_QWORD *)(v247 + 16);
            *(_OWORD *)v97 = v105;
          }
          sub_2080968B4(v97 + 24, (unsigned __int8 *)__str);
          v175 = (char *)(v97 + 40);
          v95[1] = v97 + 40;
        }
        v95[1] = (uint64_t)v175;
        v96 = (uint64_t)(v175 - 40);
        v104 = __str[0];
LABEL_251:
        sub_20806DC2C(&v258, v104);
        a2[4] = (unsigned __int8 *)(v96 + 24);
        v187 = sub_2081EA2E8(v4);
        *(_DWORD *)(a1 + 32) = v187;
        if (v187 != 12)
          goto LABEL_392;
        v188 = v255;
        if (v255 == v256 << 6)
        {
          if ((uint64_t)(v255 + 1) < 0)
            sub_207D159B0();
          v189 = v256 << 7;
          if (v256 << 7 <= (v255 & 0xFFFFFFFFFFFFFFC0) + 64)
            v189 = (v255 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v255 <= 0x3FFFFFFFFFFFFFFELL)
            v190 = v189;
          else
            v190 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v254, v190);
          v188 = v255;
        }
        v255 = v188 + 1;
        *(_QWORD *)((char *)v254 + ((v188 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v188);
        *(_DWORD *)(a1 + 32) = sub_2081EA2E8(v4);
        continue;
      case 0xE:
        v192 = *(unsigned __int8 **)(a1 + 96);
        v191 = *(unsigned __int8 **)(a1 + 104);
        memset(&v253, 0, sizeof(v253));
        if (v192 == v191)
          goto LABEL_379;
        v248 = v191;
        while (1)
        {
          v196 = *v192;
          if (v196 > 0x1F)
            break;
          LOBYTE(v258) = 0;
          *(_QWORD *)__str = 0;
          snprintf(__str, 9uLL, "<U+%.4X>", v196);
          v197 = strlen(__str);
          v198 = v197;
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v199 = 22;
          else
            v199 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v253.__r_.__value_.__r.__words[2]);
          else
            size = v253.__r_.__value_.__l.__size_;
          if (v199 - size < v197)
          {
            v201 = size + v197;
            if (0x7FFFFFFFFFFFFFF6 - v199 < size + v197 - v199)
              sub_207C95C50();
            if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v202 = &v253;
            else
              v202 = (std::string *)v253.__r_.__value_.__r.__words[0];
            v203 = 0x7FFFFFFFFFFFFFF7;
            if (v199 < 0x3FFFFFFFFFFFFFF3)
            {
              v204 = 2 * v199;
              if (v201 > 2 * v199)
                v204 = size + v197;
              if (v204 >= 0x17)
              {
                v213 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
                v214 = v204 | 7;
                if (v214 == 23)
                  v214 = v213;
                v203 = v214 + 1;
              }
              else
              {
                v203 = 23;
              }
            }
            v215 = operator new(v203);
            v216 = (std::string::size_type)v215;
            if (size)
              memmove(v215, v202, size);
            memcpy((void *)(v216 + size), __str, v198);
            if (v199 != 22)
              operator delete(v202);
            v253.__r_.__value_.__l.__size_ = size + v198;
            v253.__r_.__value_.__r.__words[2] = v203 | 0x8000000000000000;
            v253.__r_.__value_.__r.__words[0] = v216;
            v208 = (_BYTE *)(v216 + v201);
            goto LABEL_318;
          }
          if (v197)
          {
            if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v206 = &v253;
            else
              v206 = (std::string *)v253.__r_.__value_.__r.__words[0];
            memmove((char *)v206 + size, __str, v197);
            v207 = size + v198;
            if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
              v253.__r_.__value_.__l.__size_ = size + v198;
            else
              *((_BYTE *)&v253.__r_.__value_.__s + 23) = v207 & 0x7F;
            v208 = (char *)v206 + v207;
LABEL_318:
            *v208 = 0;
            v191 = v248;
          }
LABEL_265:
          if (++v192 == v191)
          {
LABEL_379:
            v252 = *(std::string *)(a1 + 72);
            *((_BYTE *)&v250.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v250, "value");
            sub_2081EDBE4(&__p, a1, 0, (const void **)&v250.__r_.__value_.__l.__data_);
            sub_207D1B330(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
            *((_BYTE *)a2 + 40) = 1;
            if (*((_BYTE *)a2 + 41))
            {
              exception = __cxa_allocate_exception(0x28uLL);
              *(_QWORD *)exception = off_24C072CF8;
              *((_DWORD *)exception + 2) = (_DWORD)v258;
              std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v259);
              *(_QWORD *)exception = off_24C072DF8;
              *((_QWORD *)exception + 4) = v260;
              __cxa_throw(exception, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
            }
            goto LABEL_382;
          }
        }
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        {
          v193 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v253.__r_.__value_.__l.__size_ != v193)
          {
            v193 = v253.__r_.__value_.__l.__size_;
            v194 = (std::string *)v253.__r_.__value_.__r.__words[0];
LABEL_309:
            v253.__r_.__value_.__l.__size_ = v193 + 1;
            goto LABEL_264;
          }
          if ((v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            sub_207C95C50();
          v205 = (std::string *)v253.__r_.__value_.__r.__words[0];
          v209 = 0x7FFFFFFFFFFFFFF7;
          if (v193 >= 0x3FFFFFFFFFFFFFF3)
          {
LABEL_304:
            v212 = (std::string *)operator new(v209);
            v194 = v212;
            if (!v193 || (memmove(v212, v205, v193), v193 != 22))
              operator delete(v205);
            v253.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
            v253.__r_.__value_.__r.__words[2] = v209 | 0x8000000000000000;
            goto LABEL_309;
          }
        }
        else
        {
          if (HIBYTE(v253.__r_.__value_.__r.__words[2]) != 22)
          {
            v193 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
            *((_BYTE *)&v253.__r_.__value_.__s + 23) = (*((_BYTE *)&v253.__r_.__value_.__s + 23) + 1) & 0x7F;
            v194 = &v253;
LABEL_264:
            v195 = (char *)v194 + v193;
            *v195 = v196;
            v195[1] = 0;
            goto LABEL_265;
          }
          v205 = &v253;
          v193 = 22;
        }
        if (v193 + 1 > 2 * v193)
          v210 = v193 + 1;
        else
          v210 = 2 * v193;
        v211 = (v210 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v210 | 7) != 0x17)
          v211 = v210 | 7;
        if (v210 >= 0x17)
          v209 = v211 + 1;
        else
          v209 = 23;
        goto LABEL_304;
      default:
        v218 = *(unsigned __int8 **)(a1 + 96);
        v217 = *(unsigned __int8 **)(a1 + 104);
        memset(&v253, 0, sizeof(v253));
        if (v218 == v217)
          goto LABEL_381;
        v249 = v217;
        break;
    }
    break;
  }
  do
  {
    v222 = *v218;
    if (v222 > 0x1F)
    {
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      {
        v219 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v253.__r_.__value_.__l.__size_ != v219)
        {
          v219 = v253.__r_.__value_.__l.__size_;
          v220 = (std::string *)v253.__r_.__value_.__r.__words[0];
LABEL_368:
          v253.__r_.__value_.__l.__size_ = v219 + 1;
          goto LABEL_323;
        }
        if ((v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
          sub_207C95C50();
        v231 = (std::string *)v253.__r_.__value_.__r.__words[0];
        v235 = 0x7FFFFFFFFFFFFFF7;
        if (v219 >= 0x3FFFFFFFFFFFFFF3)
        {
LABEL_363:
          v238 = (std::string *)operator new(v235);
          v220 = v238;
          if (!v219 || (memmove(v238, v231, v219), v219 != 22))
            operator delete(v231);
          v253.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
          v253.__r_.__value_.__r.__words[2] = v235 | 0x8000000000000000;
          goto LABEL_368;
        }
      }
      else
      {
        if (HIBYTE(v253.__r_.__value_.__r.__words[2]) != 22)
        {
          v219 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
          *((_BYTE *)&v253.__r_.__value_.__s + 23) = (*((_BYTE *)&v253.__r_.__value_.__s + 23) + 1) & 0x7F;
          v220 = &v253;
LABEL_323:
          v221 = (char *)v220 + v219;
          *v221 = v222;
          v221[1] = 0;
          goto LABEL_324;
        }
        v231 = &v253;
        v219 = 22;
      }
      if (v219 + 1 > 2 * v219)
        v236 = v219 + 1;
      else
        v236 = 2 * v219;
      v237 = (v236 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v236 | 7) != 0x17)
        v237 = v236 | 7;
      if (v236 >= 0x17)
        v235 = v237 + 1;
      else
        v235 = 23;
      goto LABEL_363;
    }
    LOBYTE(v258) = 0;
    *(_QWORD *)__str = 0;
    snprintf(__str, 9uLL, "<U+%.4X>", v222);
    v223 = strlen(__str);
    v224 = v223;
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v225 = 22;
    else
      v225 = (v253.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v226 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
    else
      v226 = v253.__r_.__value_.__l.__size_;
    if (v225 - v226 >= v223)
    {
      if (!v223)
        goto LABEL_324;
      if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v232 = &v253;
      else
        v232 = (std::string *)v253.__r_.__value_.__r.__words[0];
      memmove((char *)v232 + v226, __str, v223);
      v233 = v226 + v224;
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        v253.__r_.__value_.__l.__size_ = v226 + v224;
      else
        *((_BYTE *)&v253.__r_.__value_.__s + 23) = v233 & 0x7F;
      v234 = (char *)v232 + v233;
    }
    else
    {
      v227 = v226 + v223;
      if (0x7FFFFFFFFFFFFFF6 - v225 < v226 + v223 - v225)
        sub_207C95C50();
      if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v228 = &v253;
      else
        v228 = (std::string *)v253.__r_.__value_.__r.__words[0];
      v229 = 0x7FFFFFFFFFFFFFF7;
      if (v225 < 0x3FFFFFFFFFFFFFF3)
      {
        v230 = 2 * v225;
        if (v227 > 2 * v225)
          v230 = v226 + v223;
        if (v230 >= 0x17)
        {
          v239 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
          v240 = v230 | 7;
          if (v240 == 23)
            v240 = v239;
          v229 = v240 + 1;
        }
        else
        {
          v229 = 23;
        }
      }
      v241 = operator new(v229);
      v242 = (std::string::size_type)v241;
      if (v226)
        memmove(v241, v228, v226);
      memcpy((void *)(v242 + v226), __str, v224);
      if (v225 != 22)
        operator delete(v228);
      v253.__r_.__value_.__l.__size_ = v226 + v224;
      v253.__r_.__value_.__r.__words[2] = v229 | 0x8000000000000000;
      v253.__r_.__value_.__r.__words[0] = v242;
      v234 = (_BYTE *)(v242 + v227);
    }
    *v234 = 0;
    v217 = v249;
LABEL_324:
    ++v218;
  }
  while (v218 != v217);
LABEL_381:
  v252 = *(std::string *)(a1 + 72);
  *((_BYTE *)&v250.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v250, "value");
  sub_2081EDBE4(&__p, a1, 0x10u, (const void **)&v250.__r_.__value_.__l.__data_);
  sub_207D1B330(101, (uint64_t *)&v252, (uint64_t)&__p, (uint64_t)__str);
  *((_BYTE *)a2 + 40) = 1;
  if (*((_BYTE *)a2 + 41))
  {
    v245 = __cxa_allocate_exception(0x28uLL);
    *(_QWORD *)v245 = off_24C072CF8;
    *((_DWORD *)v245 + 2) = (_DWORD)v258;
    std::runtime_error::runtime_error((std::runtime_error *)v245 + 1, &v259);
    *(_QWORD *)v245 = off_24C072DF8;
    *((_QWORD *)v245 + 4) = v260;
    __cxa_throw(v245, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
  }
LABEL_382:
  *(_QWORD *)__str = off_24C072CF8;
  std::runtime_error::~runtime_error(&v259);
  std::exception::~exception((std::exception *)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v244 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_384;
  }
LABEL_385:
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
LABEL_387:
  if (v254)
    operator delete(v254);
}

void sub_2081EFEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39)
{
  std::runtime_error *v39;
  uint64_t v40;
  void *v42;

  *(_QWORD *)(v40 - 152) = off_24C072CF8;
  std::runtime_error::~runtime_error(v39 + 1);
  std::exception::~exception((std::exception *)(v40 - 152));
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a38 < 0)
  {
    operator delete(a33);
    v42 = a39;
    if (a39)
    {
LABEL_10:
      operator delete(v42);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v42 = a39;
    if (a39)
      goto LABEL_10;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2081F018C(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 40) = 1;
  if (*(_BYTE *)(result + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v4 = (void *)sub_207D1F664((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
  }
  return result;
}

void sub_2081F01DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  void ***v11;
  uint64_t v12;
  unint64_t v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void **v18;
  void ***v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char v23;
  void **v24;
  int v25;
  std::string::size_type v26;
  void ***v27;
  void ***v28;
  void **v29;
  void *v30;
  void *v31;
  void *exception;
  void *v33;
  void *v34;
  char *v35;
  void *v36;
  char *v37;
  char v38[8];
  void **v39;
  std::string v40;
  std::string v41;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 - 8))
  {
    LODWORD(v41.__r_.__value_.__l.__data_) = ((unint64_t)(v2 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
    v40.__r_.__value_.__s.__data_[0] = 1;
    v3 = *(_QWORD *)(a1 + 120);
    if (!v3)
      sub_207CA408C();
    if (((*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v3 + 48))(v3, &v41, &v40) & 1) == 0)
    {
      sub_2080968B4((uint64_t)v38, (unsigned __int8 *)(a1 + 136));
      v4 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
      v5 = *v4;
      *v4 = v38[0];
      v38[0] = v5;
      v6 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v39;
      v39 = v6;
      sub_20806DC2C(&v39, v5);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    v9 = *(unsigned __int8 **)(v7 - 16);
    if (v9)
    {
      v10 = *v9;
      if ((v10 - 1) <= 1)
      {
        if (v10 == 2)
        {
          v12 = 0;
          v11 = (void ***)**((_QWORD **)v9 + 1);
          goto LABEL_12;
        }
        if (v10 == 1)
        {
          v11 = 0;
          v12 = **((_QWORD **)v9 + 1);
LABEL_12:
          v13 = 0x8000000000000000;
          goto LABEL_21;
        }
        v11 = 0;
        v13 = 0;
        v12 = 0;
        while (1)
        {
LABEL_21:
          if (v10 == 1)
          {
            if (v12 == *(_QWORD *)(*((_QWORD *)v9 + 1) + 8))
              return;
            v14 = (void ***)(v12 + 24);
          }
          else if (v10 == 2)
          {
            v14 = v11;
            if (v11 == *(void ****)(*((_QWORD *)v9 + 1) + 8))
              return;
          }
          else
          {
            if (v13 == 1)
              return;
            v14 = (void ***)v9;
            if (v13)
            {
              exception = __cxa_allocate_exception(0x20uLL);
              sub_207C96EE8(&v41, "cannot get value");
              sub_207D1E424(214, (uint64_t)&v41, (uint64_t)exception);
              __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
            }
          }
          if (*(_BYTE *)v14 == 9)
            break;
          if (v10 == 1)
          {
            v12 += 40;
          }
          else if (v10 == 2)
          {
            v11 += 2;
          }
          else
          {
            ++v13;
          }
        }
        if (v10 != 2)
        {
          if (v10 == 1)
          {
            v15 = *((_QWORD *)v9 + 1);
            v16 = *(_QWORD *)(v15 + 8);
            for (i = v12 + 40; ; i += 40)
            {
              v18 = (void **)(i - 40);
              v19 = (void ***)(i - 8);
              if (i == v16)
                break;
              sub_20806DC2C(v19, *(unsigned __int8 *)(i - 16));
              if (*(char *)(i - 17) < 0)
                operator delete(*v18);
              if (*(char *)(i + 23) < 0)
              {
                sub_207CA40D8((_BYTE *)(i - 40), *(void **)i, *(_QWORD *)(i + 8));
              }
              else
              {
                *(_OWORD *)v18 = *(_OWORD *)i;
                *(_QWORD *)(i - 24) = *(_QWORD *)(i + 16);
              }
              *(_BYTE *)(i - 16) = *(_BYTE *)(i + 24);
              *(_QWORD *)(i - 8) = *(_QWORD *)(i + 32);
              *(_BYTE *)(i + 24) = 0;
              *(_QWORD *)(i + 32) = 0;
              v16 = *(_QWORD *)(v15 + 8);
            }
            sub_20806DC2C(v19, *(unsigned __int8 *)(i - 16));
            if (*(char *)(i - 17) < 0)
              operator delete(*v18);
            *(_QWORD *)(v15 + 8) = v18;
            return;
          }
          if ((v10 - 3) > 5)
          {
            v34 = __cxa_allocate_exception(0x20uLL);
            v35 = (char *)v9;
            v36 = v34;
            v37 = (char *)sub_20809655C(v35);
            sub_207C96EE8(&v40, v37);
            sub_207C96E8C("cannot use erase() with ", &v40, &v41);
            sub_207D1E5F8(307, (uint64_t)&v41, (uint64_t)v36);
            __cxa_throw(v36, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
          }
          if (v13)
          {
            v33 = __cxa_allocate_exception(0x20uLL);
            sub_207C96EE8(&v41, "iterator out of range");
            sub_207D1E424(205, (uint64_t)&v41, (uint64_t)v33);
            __cxa_throw(v33, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
          }
          if (v10 == 8)
          {
            v29 = (void **)*((_QWORD *)v9 + 1);
            v31 = *v29;
            if (*v29)
            {
              v29[1] = v31;
              v30 = v31;
              goto LABEL_57;
            }
          }
          else
          {
            if (v10 != 3)
            {
LABEL_59:
              *v9 = 0;
              return;
            }
            v29 = (void **)*((_QWORD *)v9 + 1);
            if (*((char *)v29 + 23) < 0)
            {
              v30 = *v29;
LABEL_57:
              operator delete(v30);
              v29 = (void **)*((_QWORD *)v9 + 1);
            }
          }
          operator delete(v29);
          *((_QWORD *)v9 + 1) = 0;
          goto LABEL_59;
        }
        v20 = *((_QWORD *)v9 + 1);
        v21 = *(void ****)(v20 + 8);
        v22 = v11 + 2;
        if (v11 + 2 != v21)
        {
          do
          {
            v23 = *(_BYTE *)v22;
            v24 = v22[1];
            *(_BYTE *)v22 = 0;
            v22[1] = 0;
            v25 = *((unsigned __int8 *)v22 - 16);
            *((_BYTE *)v22 - 16) = v23;
            v41.__r_.__value_.__s.__data_[0] = v25;
            v26 = (std::string::size_type)*(v22 - 1);
            *(v22 - 1) = v24;
            v41.__r_.__value_.__l.__size_ = v26;
            sub_20806DC2C((void ***)&v41.__r_.__value_.__l.__size_, v25);
            v22 += 2;
          }
          while (v22 != v21);
          v21 = *(void ****)(v20 + 8);
          v11 = v22 - 2;
        }
        if (v21 != v11)
        {
          v27 = v21 - 1;
          do
          {
            v28 = v27 - 1;
            sub_20806DC2C(v27, *((unsigned __int8 *)v27 - 8));
            v27 -= 2;
          }
          while (v28 != v11);
        }
        *(_QWORD *)(v20 + 8) = v11;
      }
    }
  }
}

void sub_2081F0680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  char v23;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if ((v23 & 1) != 0)
    __cxa_free_exception(v22);
  _Unwind_Resume(exception_object);
}

void sub_2081F0704(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  int v18;
  void **v19;
  char v20[8];
  void **v21;
  unsigned __int8 v22[8];
  void **v23;
  char v24;
  unsigned __int8 v25[8];
  void **v26;

  v22[0] = 3;
  v4 = (void **)operator new(0x18uLL);
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
  }
  v23 = v5;
  *(_DWORD *)v25 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v24 = 4;
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
    sub_207CA408C();
  v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, unsigned __int8 *))(*(_QWORD *)v6 + 48))(v6, v25, &v24, v22);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0)
      sub_207D159B0();
    v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64)
      v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_207D1C104(a1 + 56, v11);
    v8 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v8 + 1;
  v12 = *(_QWORD *)(a1 + 56);
  v13 = v8 >> 6;
  v14 = 1 << v8;
  v15 = 8 * v13;
  if ((v7 & 1) != 0)
  {
    *(_QWORD *)(v12 + v15) |= v14;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8))
    {
      sub_2080968B4((uint64_t)v20, (unsigned __int8 *)(a1 + 136));
      v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 8);
      v25[0] = 0;
      v26 = 0;
      v17 = sub_208096584(v16, a2, v25);
      sub_20806DC2C(&v26, v25[0]);
      v18 = v17[24];
      v17 += 24;
      *v17 = v20[0];
      v20[0] = v18;
      v19 = (void **)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v21;
      v21 = v19;
      *(_QWORD *)(a1 + 80) = v17;
      sub_20806DC2C(&v21, v18);
    }
  }
  else
  {
    *(_QWORD *)(v12 + v15) &= ~v14;
  }
  sub_20806DC2C(&v23, v22[0]);
}

void sub_2081F08D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, void **a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  void ***v15;
  void ***v16;

  sub_20806DC2C(v16, a15);
  sub_20806DC2C(&a11, a10);
  sub_20806DC2C(v15, a12);
  _Unwind_Resume(a1);
}

void sub_2081F0908(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2081F091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;

  sub_20806DC2C(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2081F0934(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 88) = 1;
  if (*(_BYTE *)(result + 128))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (void *)sub_207D1E98C((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C072D10, (void (*)(void *))sub_207D1D060);
  }
  return result;
}

uint64_t sub_2081F0984(unsigned __int8 **a1, unsigned __int8 a2)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void **v11;
  uint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  unsigned __int8 *v19;
  int v20;
  void **v21;
  void **v22;
  char v23;
  void **v24;
  char v25[8];
  void **v26;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) == 0)
    return 0;
  v25[0] = a2;
  switch(a2)
  {
    case 1u:
    case 2u:
      v5 = operator new(0x18uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      goto LABEL_9;
    case 3u:
      v5 = operator new(0x18uLL);
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      goto LABEL_9;
    case 4u:
      LOBYTE(v26) = 0;
      break;
    case 8u:
      v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      *((_WORD *)v5 + 12) = 0;
LABEL_9:
      v26 = (void **)v5;
      break;
    default:
      v26 = 0;
      break;
  }
  v6 = a1[2];
  if (a1[1] == v6)
  {
    v11 = v26;
    v25[0] = 0;
    v26 = 0;
    v12 = (uint64_t)*a1;
    v13 = **a1;
    *(_BYTE *)v12 = a2;
    v23 = v13;
    v14 = *(void ***)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v11;
    v24 = v14;
    sub_20806DC2C(&v24, v13);
    v15 = (uint64_t)*a1;
  }
  else
  {
    v7 = *((_QWORD *)v6 - 1);
    if (!v7)
      goto LABEL_18;
    if (*(_BYTE *)v7 == 2)
    {
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(_QWORD *)(v8 + 8);
      if (v9 >= *(_QWORD *)(v8 + 16))
      {
        v10 = sub_20806E340((void **)v8, v25);
      }
      else
      {
        *(_BYTE *)v9 = a2;
        *(_QWORD *)(v9 + 8) = v26;
        v25[0] = 0;
        v26 = 0;
        v10 = (char *)(v9 + 16);
      }
      *(_QWORD *)(v8 + 8) = v10;
      v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
      goto LABEL_21;
    }
    v16 = (unint64_t)(a1[8] - 1);
    v17 = *(_QWORD *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
    a1[8] = (unsigned __int8 *)v16;
    if (((v17 >> v16) & 1) != 0)
    {
      v18 = v26;
      v25[0] = 0;
      v26 = 0;
      v19 = a1[10];
      v20 = *v19;
      *v19 = a2;
      v21 = (void **)*((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = v18;
      v22 = v21;
      sub_20806DC2C(&v22, v20);
      v15 = (uint64_t)a1[10];
    }
    else
    {
LABEL_18:
      v15 = 0;
    }
  }
LABEL_21:
  sub_20806DC2C(&v26, v25[0]);
  return v15;
}

void sub_2081F0B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  _Unwind_Resume(a1);
}

void sub_2081F0BA8()
{
  sub_207C95C64("vector");
}

void sub_2081F0BBC(unsigned __int8 **a1, unsigned __int8 a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  void **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23[8];
  unint64_t v24;
  char v25;
  int v26;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v23[0] = 4;
    v24 = a2;
    v26 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v25 = 5;
    v3 = a1[15];
    if (!v3)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v3 + 48))(v3, &v26, &v25, v23) & 1) == 0)goto LABEL_13;
    v4 = a1[2];
    if (a1[1] == v4)
    {
      v8 = v23[0];
      v9 = (void ***)&v22;
      v10 = (void **)v24;
      v23[0] = 0;
      v24 = 0;
      v11 = (uint64_t)*a1;
      v12 = **a1;
      *(_BYTE *)v11 = v8;
      v21 = v12;
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v10;
      v22 = v13;
    }
    else
    {
      v5 = *((_QWORD *)v4 - 1);
      if (!v5)
        goto LABEL_13;
      if (*(_BYTE *)v5 == 2)
      {
        v6 = *(_QWORD *)(v5 + 8);
        v7 = *(_QWORD *)(v6 + 8);
        if (v7 >= *(_QWORD *)(v6 + 16))
        {
          *(_QWORD *)(v6 + 8) = sub_20806E340((void **)v6, v23);
        }
        else
        {
          *(_BYTE *)v7 = v23[0];
          *(_QWORD *)(v7 + 8) = v24;
          v23[0] = 0;
          v24 = 0;
          *(_QWORD *)(v6 + 8) = v7 + 16;
        }
        goto LABEL_13;
      }
      v14 = (unint64_t)(a1[8] - 1);
      v15 = *(_QWORD *)&a1[7][(v14 >> 3) & 0x1FFFFFFFFFFFFFF8];
      a1[8] = (unsigned __int8 *)v14;
      if (((v15 >> v14) & 1) == 0)
      {
LABEL_13:
        sub_20806DC2C((void ***)&v24, v23[0]);
        return;
      }
      v16 = v23[0];
      v9 = (void ***)&v20;
      v17 = (void **)v24;
      v23[0] = 0;
      v24 = 0;
      v18 = a1[10];
      v12 = *v18;
      *v18 = v16;
      v19 = *((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = v17;
      v20 = v19;
    }
    sub_20806DC2C(v9, v12);
    goto LABEL_13;
  }
}

void sub_2081F0D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  void ***v14;

  sub_20806DC2C(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_2081F0D74(uint64_t result, uint64_t a2)
{
  void *exception;
  void *v4;

  *(_BYTE *)(result + 40) = 1;
  if (*(_BYTE *)(result + 41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (void *)sub_207D1E98C((uint64_t)exception, a2);
    __cxa_throw(v4, (struct type_info *)&unk_24C072D10, (void (*)(void *))sub_207D1D060);
  }
  return result;
}

uint64_t sub_2081F0DC4(unsigned __int8 **a1, unsigned __int8 a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  void **v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  int v18;
  void **v19;
  void **v21;
  void ***v22;
  void ***v23;
  char v24;
  void ***v25;
  void ***v26;
  void ***v27;
  unsigned __int8 *v28;
  int v29;
  void **v30;
  void **v31;
  char v32;
  void **v33[2];
  void **v34;
  void **v35;
  void **v36;
  _QWORD *v37;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = 0;
    switch(a2)
    {
      case 1u:
      case 2u:
        v10 = (void **)operator new(0x18uLL);
        v10[1] = 0;
        v10[2] = 0;
        *v10 = 0;
        break;
      case 3u:
        v10 = (void **)operator new(0x18uLL);
        *((_BYTE *)v10 + 23) = 0;
        *(_BYTE *)v10 = 0;
        break;
      case 4u:
        LOBYTE(v33[0]) = 0;
        v10 = v33[0];
        break;
      case 8u:
        v10 = (void **)operator new(0x20uLL);
        v10[1] = 0;
        v10[2] = 0;
        *v10 = 0;
        *((_WORD *)v10 + 12) = 0;
        break;
      default:
        break;
    }
    v17 = (uint64_t)*a1;
    v18 = **a1;
    *(_BYTE *)v17 = a2;
    v32 = v18;
    v19 = *(void ***)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v10;
    v33[0] = v19;
    sub_20806DC2C(v33, v18);
    return (uint64_t)*a1;
  }
  else
  {
    v5 = *((_QWORD *)v4 - 1);
    if (*(_BYTE *)v5 == 2)
    {
      v6 = *(void ***)(v5 + 8);
      v7 = (char *)v6[1];
      v8 = (char *)v6[2];
      if (v7 >= v8)
      {
        v12 = (v7 - (_BYTE *)*v6) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_20806DC18();
        v13 = v8 - (_BYTE *)*v6;
        v14 = v13 >> 3;
        if (v13 >> 3 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v37 = v6 + 2;
        if (v15)
        {
          if (v15 >> 60)
            sub_207CA3AB8();
          v16 = (void **)operator new(16 * v15);
        }
        else
        {
          v16 = 0;
        }
        v33[1] = v16;
        v34 = &v16[2 * v12];
        v35 = v34;
        v36 = &v16[2 * v15];
        sub_2081E62F8(v34, a2);
        v21 = v34;
        v9 = v34 + 2;
        v22 = (void ***)*v6;
        v23 = (void ***)v6[1];
        if (v23 == *v6)
        {
          *v6 = v34;
          v6[1] = v9;
          v6[2] = v36;
          if (!v23)
            goto LABEL_30;
        }
        else
        {
          do
          {
            v24 = *((_BYTE *)v23 - 16);
            v23 -= 2;
            *((_BYTE *)v21 - 16) = v24;
            v21 -= 2;
            v21[1] = v23[1];
            *(_BYTE *)v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v22);
          v23 = (void ***)*v6;
          v25 = (void ***)v6[1];
          *v6 = v21;
          v6[1] = v9;
          v6[2] = v36;
          if (v25 != v23)
          {
            v26 = v25 - 1;
            do
            {
              v27 = v26 - 1;
              sub_20806DC2C(v26, *((unsigned __int8 *)v26 - 8));
              v26 -= 2;
            }
            while (v27 != v23);
          }
          if (!v23)
            goto LABEL_30;
        }
        operator delete(v23);
      }
      else
      {
        sub_2081E62F8(v6[1], a2);
        v9 = v7 + 16;
        v6[1] = v7 + 16;
      }
LABEL_30:
      v6[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    v11 = 0;
    switch(a2)
    {
      case 1u:
      case 2u:
        v11 = (void **)operator new(0x18uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        break;
      case 3u:
        v11 = (void **)operator new(0x18uLL);
        *((_BYTE *)v11 + 23) = 0;
        *(_BYTE *)v11 = 0;
        break;
      case 4u:
        LOBYTE(v31) = 0;
        v11 = v31;
        break;
      case 8u:
        v11 = (void **)operator new(0x20uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        *((_WORD *)v11 + 12) = 0;
        break;
      default:
        break;
    }
    v28 = a1[4];
    v29 = *v28;
    *v28 = a2;
    v30 = (void **)*((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = v11;
    v31 = v30;
    sub_20806DC2C(&v31, v29);
    return (uint64_t)a1[4];
  }
}

void sub_2081F10E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_208098748((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F10F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2081F1100(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  char **v4;
  unint64_t v5;
  void ***v6;
  void **v7;
  char *v8;
  void ***v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void ***v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  void ***v29;
  void ***v30;
  void ***v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v2 = a1[2];
  if (a1[1] == v2)
  {
    v9 = (void ***)&v34;
    v10 = *a2;
    v11 = (uint64_t)*a1;
    v12 = **a1;
    *(_BYTE *)v11 = 4;
    v33 = v12;
    v13 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v10;
    v34 = v13;
LABEL_7:
    sub_20806DC2C(v9, v12);
    return;
  }
  v3 = *((_QWORD *)v2 - 1);
  if (*(_BYTE *)v3 != 2)
  {
    v9 = (void ***)&v32;
    v14 = *a2;
    v15 = a1[4];
    v12 = *v15;
    *v15 = 4;
    v16 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v14;
    v32 = v16;
    goto LABEL_7;
  }
  v4 = *(char ***)(v3 + 8);
  v6 = (void ***)v4[1];
  v5 = (unint64_t)v4[2];
  if ((unint64_t)v6 >= v5)
  {
    v17 = (void ***)*v4;
    v18 = ((char *)v6 - *v4) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      sub_20806DC18();
    v20 = v5 - (_QWORD)v17;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
    v22 = 0xFFFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v19;
    if (v22 >> 60)
      sub_207CA3AB8();
    v23 = *a2;
    v24 = 16 * v22;
    v25 = (char *)operator new(16 * v22);
    v26 = &v25[16 * v18];
    v27 = &v25[v24];
    *v26 = 4;
    *((_QWORD *)v26 + 1) = v23;
    v8 = v26 + 16;
    if (v6 == v17)
    {
      *v4 = v26;
      v4[1] = v8;
      v4[2] = v27;
      if (!v6)
        goto LABEL_21;
    }
    else
    {
      do
      {
        v28 = *((_BYTE *)v6 - 16);
        v6 -= 2;
        *(v26 - 16) = v28;
        v26 -= 16;
        *((_QWORD *)v26 + 1) = v6[1];
        *(_BYTE *)v6 = 0;
        v6[1] = 0;
      }
      while (v6 != v17);
      v6 = (void ***)*v4;
      v29 = (void ***)v4[1];
      *v4 = v26;
      v4[1] = v8;
      v4[2] = v27;
      if (v29 != v6)
      {
        v30 = v29 - 1;
        do
        {
          v31 = v30 - 1;
          sub_20806DC2C(v30, *((unsigned __int8 *)v30 - 8));
          v30 -= 2;
        }
        while (v31 != v6);
      }
      if (!v6)
        goto LABEL_21;
    }
    operator delete(v6);
  }
  else
  {
    v6[1] = 0;
    v7 = (void **)*a2;
    *(_BYTE *)v6 = 4;
    v6[1] = v7;
    v8 = (char *)(v6 + 2);
  }
LABEL_21:
  v4[1] = v8;
}

void sub_2081F12E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2081F12F4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DA10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2081F1314(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t sub_2081F1324()
{
  return std::ostream::put();
}

uint64_t sub_2081F132C()
{
  return std::ostream::write();
}

uint64_t sub_2081F133C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  const void *v15;
  const void *v16;
  int v17;
  const void *v18;
  unint64_t v19;
  size_t v20;
  int v21;
  int v22;
  uint64_t **v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  std::string::size_type v29;
  uint64_t v30;
  const void *v31;
  std::string *p_s1;
  uint64_t v33;
  uint64_t v34;
  void *exception;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  std::string v41;
  std::string __s1;

  if (*(_BYTE *)(a1 + 88))
  {
    if (!*(_BYTE *)(a1 + 100))
      goto LABEL_47;
    v2 = *(unsigned int *)(a1 + 96);
    v39 = 6;
    v40 = v2;
    v3 = *(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)v3)
    {
      *(_BYTE *)v3 = 1;
      v4 = (char *)operator new(0x18uLL);
      *((_QWORD *)v4 + 1) = 0;
      v5 = (uint64_t **)(v4 + 8);
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)v4 = v4 + 8;
      *(_QWORD *)(v3 + 8) = v4;
      *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__s1, "version");
      v6 = (uint64_t **)(v4 + 8);
      v7 = (uint64_t **)(v4 + 8);
      goto LABEL_41;
    }
    if (*(_BYTE *)v3 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v37 = (char *)sub_207D1E770((char *)v3);
      sub_207C96EE8(&v41, v37);
      sub_207C96E8C("cannot use operator[] with a string argument with ", &v41, &__s1);
      sub_207D1E5F8(305, (uint64_t)&__s1, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v4 = *(char **)(v3 + 8);
    v5 = (uint64_t **)(v4 + 8);
    v13 = (uint64_t *)*((_QWORD *)v4 + 1);
    *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&__s1, "version");
    if (!v13)
    {
      v6 = (uint64_t **)(v4 + 8);
      v7 = (uint64_t **)(v4 + 8);
LABEL_41:
      v24 = (char *)operator new(0x48uLL);
      *(std::string *)(v24 + 32) = __s1;
      memset(&__s1, 0, sizeof(__s1));
      v24[56] = 0;
      *((_QWORD *)v24 + 8) = 0;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = v7;
      *v6 = (uint64_t *)v24;
      v25 = **(_QWORD **)v4;
      v26 = (uint64_t *)v24;
      if (v25)
      {
        *(_QWORD *)v4 = v25;
        v26 = *v6;
      }
      sub_207CC24B4(*v5, v26);
      ++*((_QWORD *)v4 + 2);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_45:
      v27 = v24[56];
      v24[56] = v39;
      v39 = v27;
      v28 = *((_QWORD *)v24 + 8);
      *((_QWORD *)v24 + 8) = v40;
      v40 = v28;
      sub_207D20660(&v40, v27);
      if (*(_BYTE *)(a1 + 100))
        *(_BYTE *)(a1 + 100) = 0;
LABEL_47:
      v29 = *(_QWORD *)(a1 + 80);
      if (v29 >= 0x7FFFFFFFFFFFFFF8)
        sub_207C95C50();
      v30 = *(_QWORD *)(a1 + 40);
      v31 = *(const void **)(a1 + 72);
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        p_s1 = (std::string *)operator new(v33 + 1);
        __s1.__r_.__value_.__l.__size_ = v29;
        __s1.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
      }
      else
      {
        *((_BYTE *)&__s1.__r_.__value_.__s + 23) = v29;
        p_s1 = &__s1;
        if (!v29)
        {
LABEL_55:
          p_s1->__r_.__value_.__s.__data_[v29] = 0;
          v23 = sub_208094DF0(v30, (const void **)&__s1.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          return (uint64_t)v23;
        }
      }
      memmove(p_s1, v31, v29);
      goto LABEL_55;
    }
    while (1)
    {
      v7 = (uint64_t **)v13;
      v16 = (const void *)v13[4];
      v14 = v13 + 4;
      v15 = v16;
      v17 = *((char *)v14 + 23);
      if (v17 >= 0)
        v18 = v14;
      else
        v18 = v15;
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)v14 + 23);
      else
        v19 = v14[1];
      if (v19 >= 7)
        v20 = 7;
      else
        v20 = v19;
      v21 = memcmp(&__s1, v18, v20);
      if (v21)
      {
        if (v21 < 0)
          goto LABEL_15;
LABEL_29:
        v22 = memcmp(v18, &__s1, v20);
        if (v22)
        {
          if ((v22 & 0x80000000) == 0)
            goto LABEL_39;
        }
        else if (v19 >= 7)
        {
LABEL_39:
          v24 = (char *)v7;
          goto LABEL_45;
        }
        v13 = v7[1];
        if (!v13)
        {
          v6 = v7 + 1;
          goto LABEL_41;
        }
      }
      else
      {
        if (v19 <= 7)
          goto LABEL_29;
LABEL_15:
        v13 = *v7;
        if (!*v7)
        {
          v6 = v7;
          goto LABEL_41;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 100))
  {
    v38 = *(unsigned int *)(a1 + 96);
    v8 = (unsigned __int8 *)sub_2080926D0(*(_QWORD *)(a1 + 40), 0);
    v9 = *v8;
    *v8 = 6;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v38;
    v38 = v10;
    sub_207D20660(&v38, v9);
    if (*(_BYTE *)(a1 + 100))
      *(_BYTE *)(a1 + 100) = 0;
  }
  v11 = *(unsigned __int8 **)(a1 + 40);
  v12 = *v11;
  if (*v11)
  {
    if ((_DWORD)v12 == 1)
    {
      v12 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 16);
    }
    else if ((_DWORD)v12 == 2)
    {
      v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    }
    else
    {
      v12 = 1;
    }
  }
  return sub_2080926D0((uint64_t)v11, v12);
}

void sub_2081F1748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t *v24;

  sub_207D20660(v24, a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2081F17E4(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  void **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t result;

  v3 = *(char **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (void **)(a1 + 48);
    v7 = *(char **)(a1 + 48);
    v8 = (v3 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_207D159B0();
    v10 = v2 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_207CA3AB8();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = *(_QWORD *)(a1 + 40);
    v5 = v13 + 8;
    if (v3 != v7)
    {
      v15 = v3 - v7 - 8;
      if (v15 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v7 - v12) < 0x20)
        goto LABEL_30;
      v16 = (v15 >> 3) + 1;
      v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v4 = &v3[-v17];
      v13 -= v17;
      v18 = &v12[8 * v8 - 16];
      v19 = (__int128 *)(v3 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v22 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *((_QWORD *)v13 - 1) = v22;
          v13 -= 8;
        }
        while (v4 != v7);
      }
      v4 = (char *)*v6;
    }
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a1 + 64) = v14;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)(a1 + 40);
    v5 = v3 + 8;
  }
  *(_QWORD *)(a1 + 56) = v5;
  result = sub_2081F133C(a1);
  *(_QWORD *)(a1 + 40) = result;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return result;
}

void sub_2081F1960(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v5 = (char *)operator new(v4);
    v6 = (unsigned __int8 *)&v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F9204(v7, (unsigned __int8 *)v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_2081F1A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_2081F1A98(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  void **v7;
  unsigned __int8 *v8;
  unint64_t v9;
  char *v10;
  int v11;
  void **v12;
  std::string::size_type v13;
  uint64_t v14;
  const void *v15;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *exception;
  char *v22;
  void **v23;
  char v24;
  void **v25;
  std::string v26;
  std::string __p;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      v2 = (void **)*(unsigned int *)(a1 + 96);
      v24 = 6;
      v25 = v2;
      v3 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)v3)
      {
        if (*(_BYTE *)v3 != 1)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          v22 = (char *)sub_20809655C((char *)v3);
          sub_207C96EE8(&v26, v22);
          sub_207C96E8C("cannot use operator[] with a string argument with ", &v26, &__p);
          sub_207D1E5F8(305, (uint64_t)&__p, (uint64_t)exception);
          __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
        }
        v4 = *(uint64_t **)(v3 + 8);
      }
      else
      {
        *(_BYTE *)v3 = 1;
        v4 = (uint64_t *)operator new(0x18uLL);
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        *(_QWORD *)(v3 + 8) = v4;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "version");
      v26.__r_.__value_.__s.__data_[0] = 0;
      v26.__r_.__value_.__l.__size_ = 0;
      v10 = sub_208096584(v4, (uint64_t)&__p, (unsigned __int8 *)&v26);
      sub_20806DC2C((void ***)&v26.__r_.__value_.__l.__size_, v26.__r_.__value_.__s.__data_[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v10[24];
      v10[24] = v24;
      v24 = v11;
      v12 = (void **)*((_QWORD *)v10 + 4);
      *((_QWORD *)v10 + 4) = v25;
      v25 = v12;
      sub_20806DC2C(&v25, v11);
      if (*(_BYTE *)(a1 + 100))
        *(_BYTE *)(a1 + 100) = 0;
    }
    v13 = *(_QWORD *)(a1 + 80);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(const void **)(a1 + 72);
    if (v13 >= 0x17)
    {
      v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v17 = v13 | 7;
      v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v13;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v13;
      p_p = &__p;
      if (!v13)
      {
LABEL_26:
        p_p->__r_.__value_.__s.__data_[v13] = 0;
        v19 = sub_20809598C(v14, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return (uint64_t)v19;
      }
    }
    memmove(p_p, v15, v13);
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    v23 = (void **)*(unsigned int *)(a1 + 96);
    v5 = (unsigned __int8 *)sub_208092A30(*(_QWORD *)(a1 + 40), 0);
    v6 = *v5;
    *v5 = 6;
    v7 = (void **)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = v23;
    v23 = v7;
    sub_20806DC2C(&v23, v6);
    if (*(_BYTE *)(a1 + 100))
      *(_BYTE *)(a1 + 100) = 0;
  }
  v8 = *(unsigned __int8 **)(a1 + 40);
  v9 = *v8;
  if (*v8)
  {
    if ((_DWORD)v9 == 1)
    {
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v8 + 1) + 8) - **((_QWORD **)v8 + 1)) >> 3);
    }
    else if ((_DWORD)v9 == 2)
    {
      v9 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v8 + 1) + 8) - **((_QWORD **)v8 + 1)) >> 4;
    }
    else
    {
      v9 = 1;
    }
  }
  return sub_208092A30((uint64_t)v8, v9);
}

void sub_2081F1D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void ***v24;

  sub_20806DC2C(v24, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_2081F1E44(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  void **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t result;

  v3 = *(char **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (void **)(a1 + 48);
    v7 = *(char **)(a1 + 48);
    v8 = (v3 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_2081F0BA8();
    v10 = v2 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_207CA3AB8();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = *(_QWORD *)(a1 + 40);
    v5 = v13 + 8;
    if (v3 != v7)
    {
      v15 = v3 - v7 - 8;
      if (v15 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v7 - v12) < 0x20)
        goto LABEL_30;
      v16 = (v15 >> 3) + 1;
      v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v4 = &v3[-v17];
      v13 -= v17;
      v18 = &v12[8 * v8 - 16];
      v19 = (__int128 *)(v3 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v22 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *((_QWORD *)v13 - 1) = v22;
          v13 -= 8;
        }
        while (v4 != v7);
      }
      v4 = (char *)*v6;
    }
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a1 + 64) = v14;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_QWORD *)v3 = *(_QWORD *)(a1 + 40);
    v5 = v3 + 8;
  }
  *(_QWORD *)(a1 + 56) = v5;
  result = sub_2081F1A98(a1);
  *(_QWORD *)(a1 + 40) = result;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return result;
}

void sub_2081F1FC0(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  unsigned __int8 *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v5 = (char *)operator new(v4);
    v6 = (unsigned __int8 *)&v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081F9C3C(v7, (unsigned __int8 *)v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_2081F20A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F20F8(uint64_t a1, _DWORD *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 88)
    && *(_QWORD *)(a1 + 80) == 7
    && ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == 1936876918)
      ? (v5 = v4 == 1852795251)
      : (v5 = 0),
        v5))
  {
    *(_DWORD *)(a1 + 96) = *a2;
    *(_BYTE *)(a1 + 100) = 1;
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v9 = *a2;
    v6 = (unsigned __int8 *)sub_2081F133C(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_207D20660(&v9, v7);
  }
}

void sub_2081F21BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2081F21D4(uint64_t a1, float *a2)
{
  BOOL v3;
  double *v4;
  int v5;
  double v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  double v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD *v15;
  _BYTE v16[24];
  unsigned int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *a2;
    v4 = (double *)sub_2081F133C(a1);
    v5 = *(unsigned __int8 *)v4;
    *(_BYTE *)v4 = 7;
    v6 = v4[1];
    v4[1] = v11;
    v11 = v6;
    sub_207D20660((uint64_t *)&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_207E36388((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_207CA9F48();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))*(&off_24C08DBB8 + v17))(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))*(&off_24C08DBA0 + v17))(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_2081F133C(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = (_QWORD *)v10;
    sub_207D20660((uint64_t *)&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_2081F235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  uint64_t *v18;

  sub_207D20660(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2081F238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F23A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F23B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2081F23CC(uint64_t a1, double *a2)
{
  BOOL v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  _QWORD *v15;
  _BYTE v16[24];
  unsigned int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *(_QWORD *)a2;
    v4 = (unsigned __int8 *)sub_2081F133C(a1);
    v5 = *v4;
    *v4 = 7;
    v6 = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v11;
    v11 = v6;
    sub_207D20660(&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_207DF6804((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_207CA9F48();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))*(&off_24C08DBB8 + v17))(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))*(&off_24C08DBA0 + v17))(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_2081F133C(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = (_QWORD *)v10;
    sub_207D20660((uint64_t *)&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_2081F2550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  uint64_t *v18;

  sub_207D20660(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2081F2580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F2594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F25A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2081F25C0(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1936876918)
      ? (v7 = v6 == 1852795251)
      : (v7 = 0),
        !v7))
  {
    v8 = operator new(0x18uLL);
    v9 = (uint64_t)v8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_207CA40D8(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)a2;
      v8[2] = *(_QWORD *)(a2 + 16);
    }
    v13 = v9;
    v10 = (unsigned __int8 *)sub_2081F133C(a1);
    v11 = *v10;
    *v10 = 3;
    v12 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = v13;
    v13 = v12;
    sub_207D20660(&v13, v11);
  }
}

void sub_2081F26A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2081F26B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2081F26D0(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F9114(v7, v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_2081F27B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F2808(uint64_t a1, uint64_t a2)
{
  __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(__int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (__int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F92F4(v7, (__int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F28F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F2940(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(unsigned __int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207DCF3A0();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (unsigned __int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F93E8(v7, (unsigned __int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F2A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F2A78(uint64_t a1, uint64_t a2)
{
  int *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(int **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = (int *)&v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F94DC(v7, (int *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F2B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F2BB0(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = &v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F95D4(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F2C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F2CE8(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F96CC(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F2DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F2E20(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = operator new(0x18uLL);
  sub_2081F97C4(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F133C(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = *((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = (_QWORD *)v10;
  sub_207D20660((uint64_t *)&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F2F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  uint64_t *v14;

  sub_207D20660(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F2F58(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  __int16 *v5;
  uint64_t v6;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int16 *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unint64_t v24;
  _OWORD *v25;
  int8x16_t *v26;
  unint64_t v27;
  int8x16_t v35;
  __int16 v50;
  _QWORD *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  void *__p[2];
  uint64_t v59;
  char v60[8];
  _QWORD *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];
  unsigned int v66;
  char v67;
  char *v68;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_2081F133C(a1);
    if (*a2)
    {
      v5 = (__int16 *)a2[1];
      v6 = 2 * *a2;
      do
      {
        if ((~(unsigned __int16)*v5 & 0x7C00) != 0)
        {
          _H0 = *v5;
          __asm { FCVT            D0, H0 }
          LOBYTE(v64) = 7;
          v65[0] = _D0;
          sub_2081F98BC((uint64_t)v4, (char *)&v64);
          sub_207D20660(v65, v64);
        }
        else
        {
          v66 = 0;
          sub_2080A1380((uint64_t)&v68, (uint64_t)&v64, v5);
          if (v66 == -1)
            sub_207CA9F48();
          v68 = &v67;
          ((void (*)(void **__return_ptr, char **, uint64_t *))*(&off_24C08DBB8 + v66))(__p, &v68, &v64);
          if (v66 != -1)
            ((void (*)(char **, uint64_t *))*(&off_24C08DBA0 + v66))(&v68, &v64);
          v61 = 0;
          v60[0] = 3;
          v12 = operator new(0x18uLL);
          *(_OWORD *)v12 = *(_OWORD *)__p;
          v12[2] = v59;
          __p[1] = 0;
          v59 = 0;
          __p[0] = 0;
          v61 = v12;
          sub_2081F98BC((uint64_t)v4, v60);
          sub_207D20660((uint64_t *)&v61, v60[0]);
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 2;
      }
      while (v6);
    }
    else
    {
      v20 = operator new(0x18uLL);
      v20[1] = 0;
      v20[2] = 0;
      *v20 = 0;
      v21 = *v4;
      *v4 = 2;
      v62 = v21;
      v22 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v20;
      v63 = v22;
      sub_207D20660(&v63, v21);
    }
    return;
  }
  v13 = (char *)*a2;
  v14 = a2[1];
  v65[0] = 0;
  v65[1] = 0;
  v64 = 0;
  if (!v13)
  {
    v17 = 0;
    goto LABEL_27;
  }
  v15 = 2 * (_QWORD)v13;
  if ((unint64_t)-((-2 * (uint64_t)v13) >> 1) >> 61)
    sub_207CA420C();
  v16 = (char *)operator new(-8 * ((-2 * (uint64_t)v13) >> 1));
  v17 = v16;
  v18 = (unint64_t)(v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v18 < 0x17)
  {
    v19 = (__int16 *)v14;
    v13 = v16;
    do
    {
LABEL_26:
      v50 = *v19++;
      _H0 = v50;
      __asm { FCVT            D0, H0 }
      *(_QWORD *)v13 = _D0;
      v13 += 8;
    }
    while (v19 != (__int16 *)(v14 + v15));
    goto LABEL_27;
  }
  _CF = (unint64_t)v16 >= v14 + 2 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 2
     || v14 >= (unint64_t)&v16[8 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 8];
  v19 = (__int16 *)v14;
  v13 = v16;
  if (!_CF)
    goto LABEL_26;
  v24 = v18 + 1;
  v19 = (__int16 *)(v14 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
  v13 = &v16[8 * (v24 & 0xFFFFFFFFFFFFFFF0)];
  v25 = v16 + 64;
  v26 = (int8x16_t *)(v14 + 16);
  v27 = v24 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q1 = v26[-1];
    _D2 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    _H0 = WORD1(_D2);
    __asm
    {
      FCVT            D3, H0
      FCVT            D0, H2
    }
    *((_QWORD *)&_Q0 + 1) = _D3;
    LOWORD(_D3) = HIWORD(_D2);
    __asm { FCVT            D3, H3 }
    LOWORD(_D2) = WORD2(_D2);
    __asm { FCVT            D2, H2 }
    *((_QWORD *)&_Q2 + 1) = _D3;
    v35 = *v26;
    v26 += 2;
    _Q3 = v35;
    _H4 = _Q1.i16[1];
    __asm
    {
      FCVT            D4, H4
      FCVT            D5, H1
    }
    *((_QWORD *)&_Q5 + 1) = _D4;
    LOWORD(_D4) = _Q1.i16[3];
    __asm { FCVT            D4, H4 }
    _Q1.i16[0] = _Q1.i16[2];
    __asm { FCVT            D1, H1 }
    _Q1.i64[1] = _D4;
    _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    _H6 = WORD1(_D4);
    __asm
    {
      FCVT            D6, H6
      FCVT            D7, H4
    }
    *((_QWORD *)&_Q7 + 1) = _D6;
    LOWORD(_D6) = HIWORD(_D4);
    __asm { FCVT            D6, H6 }
    LOWORD(_D4) = WORD2(_D4);
    __asm { FCVT            D4, H4 }
    *((_QWORD *)&_Q4 + 1) = _D6;
    LOWORD(_D6) = v35.i16[1];
    __asm
    {
      FCVT            D6, H6
      FCVT            D16, H3
    }
    *((_QWORD *)&_Q16 + 1) = _D6;
    LOWORD(_D6) = v35.i16[3];
    __asm { FCVT            D6, H6 }
    _Q3.i16[0] = v35.i16[2];
    __asm { FCVT            D3, H3 }
    _Q3.i64[1] = _D6;
    *(v25 - 4) = _Q5;
    *(v25 - 3) = _Q1;
    *(v25 - 2) = _Q0;
    *(v25 - 1) = _Q2;
    *v25 = _Q16;
    v25[1] = _Q3;
    v25[2] = _Q7;
    v25[3] = _Q4;
    v25 += 8;
    v27 -= 16;
  }
  while (v27);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_26;
LABEL_27:
  v53 = operator new(0x18uLL);
  sub_2081F9A54(v53, v17, v13);
  v57 = v53;
  v54 = (unsigned __int8 *)sub_2081F133C(a1);
  v55 = *v54;
  *v54 = 2;
  v56 = *((_QWORD *)v54 + 1);
  *((_QWORD *)v54 + 1) = v57;
  v57 = (_QWORD *)v56;
  sub_207D20660((uint64_t *)&v57, v55);
  if (v17)
    operator delete(v17);
}

void sub_2081F331C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t *v24;

  sub_207D20660(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2081F33EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F3400(uint64_t a1, float **__sz)
{
  unsigned __int8 *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  _QWORD *v9;
  float *v10;
  float *v11;
  size_t v12;
  float *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double *v19;
  float *v20;
  float v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  void *__p[2];
  uint64_t v27;
  char v28[8];
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  unsigned int v34;
  char v35;
  char *v36;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_2081F133C(a1);
    v5 = *__sz;
    if (*__sz)
    {
      v6 = __sz[1];
      v7 = 4 * (_QWORD)v5;
      do
      {
        v8 = *v6;
        if ((*(_DWORD *)v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          v34 = 0;
          sub_207E36388((uint64_t)&v36, (uint64_t)&v32, v6);
          if (v34 == -1)
            sub_207CA9F48();
          v36 = &v35;
          ((void (*)(void **__return_ptr, char **, uint64_t *))*(&off_24C08DBB8 + v34))(__p, &v36, &v32);
          if (v34 != -1)
            ((void (*)(char **, uint64_t *))*(&off_24C08DBA0 + v34))(&v36, &v32);
          v29 = 0;
          v28[0] = 3;
          v9 = operator new(0x18uLL);
          *(_OWORD *)v9 = *(_OWORD *)__p;
          v9[2] = v27;
          __p[1] = 0;
          v27 = 0;
          __p[0] = 0;
          v29 = v9;
          sub_2081F98BC((uint64_t)v4, v28);
          sub_207D20660((uint64_t *)&v29, v28[0]);
          if (SHIBYTE(v27) < 0)
            operator delete(__p[0]);
        }
        else
        {
          LOBYTE(v32) = 7;
          *(double *)v33 = v8;
          sub_2081F98BC((uint64_t)v4, (char *)&v32);
          sub_207D20660(v33, v32);
        }
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    else
    {
      v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      v15 = *v4;
      *v4 = 2;
      v30 = v15;
      v16 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v14;
      v31 = v16;
      sub_207D20660(&v31, v15);
    }
  }
  else
  {
    v11 = *__sz;
    v10 = __sz[1];
    v33[0] = 0;
    v33[1] = 0;
    v32 = 0;
    if (v11)
    {
      if (((unint64_t)v11 & 0x8000000000000000) != 0)
        sub_207D0CD58();
      v12 = 4 * (_QWORD)v11;
      v13 = (float *)operator new(4 * (_QWORD)v11);
      v11 = &v13[(_QWORD)v11];
      memcpy(v13, v10, v12);
    }
    else
    {
      v13 = 0;
    }
    v25 = 0;
    v17 = operator new(0x18uLL);
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v18 = (char *)v11 - (char *)v13;
    if (v11 != v13)
    {
      if ((unint64_t)v18 >= 0x3FFFFFFFFFFFFFFDLL)
        sub_207D159B0();
      v19 = (double *)operator new(4 * v18);
      *v17 = v19;
      v17[1] = v19;
      v17[2] = &v19[2 * (v18 >> 2)];
      if (v13 != v11)
      {
        v20 = v13;
        do
        {
          v21 = *v20++;
          *(_BYTE *)v19 = 7;
          v19[1] = v21;
          v19 += 2;
        }
        while (v20 != v11);
      }
      v17[1] = v19;
    }
    v25 = v17;
    v22 = (unsigned __int8 *)sub_2081F133C(a1);
    v23 = *v22;
    *v22 = 2;
    v24 = *((_QWORD *)v22 + 1);
    *((_QWORD *)v22 + 1) = v25;
    v25 = (_QWORD *)v24;
    sub_207D20660((uint64_t *)&v25, v23);
    if (v13)
      operator delete(v13);
  }
}

void sub_2081F36F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t *v24;
  uint64_t *v25;

  v25 = v24;
  sub_207D20660(v25, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2081F3820(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  double *v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;
  char *v9;
  const void *v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p[2];
  uint64_t v22;
  char v23[8];
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  unsigned int v29;
  char v30;
  char *v31;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_2081F133C(a1);
    if (*a2)
    {
      v5 = (double *)a2[1];
      v6 = 8 * *a2;
      do
      {
        v7 = *v5;
        if ((*(_QWORD *)v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          LOBYTE(v27) = 7;
          *(double *)v28 = v7;
          sub_2081F98BC((uint64_t)v4, (char *)&v27);
          sub_207D20660(v28, v27);
        }
        else
        {
          v29 = 0;
          sub_207DF6804((uint64_t)&v31, (uint64_t)&v27, v5);
          if (v29 == -1)
            sub_207CA9F48();
          v31 = &v30;
          ((void (*)(void **__return_ptr, char **, uint64_t *))*(&off_24C08DBB8 + v29))(__p, &v31, &v27);
          if (v29 != -1)
            ((void (*)(char **, uint64_t *))*(&off_24C08DBA0 + v29))(&v31, &v27);
          v24 = 0;
          v23[0] = 3;
          v8 = operator new(0x18uLL);
          *(_OWORD *)v8 = *(_OWORD *)__p;
          v8[2] = v22;
          __p[1] = 0;
          v22 = 0;
          __p[0] = 0;
          v24 = v8;
          sub_2081F98BC((uint64_t)v4, v23);
          sub_207D20660((uint64_t *)&v24, v23[0]);
          if (SHIBYTE(v22) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    else
    {
      v13 = operator new(0x18uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      v14 = *v4;
      *v4 = 2;
      v25 = v14;
      v15 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v13;
      v26 = v15;
      sub_207D20660(&v26, v14);
    }
  }
  else
  {
    v9 = (char *)*a2;
    v10 = (const void *)a2[1];
    v28[0] = 0;
    v28[1] = 0;
    v27 = 0;
    if (v9)
    {
      if (((unint64_t)v9 & 0x8000000000000000) != 0)
        sub_207CA420C();
      v11 = 8 * (_QWORD)v9;
      v12 = (char *)operator new(8 * (_QWORD)v9);
      v9 = &v12[8 * (_QWORD)v9];
      memcpy(v12, v10, v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = operator new(0x18uLL);
    sub_2081F9A54(v16, v12, v9);
    v20 = v16;
    v17 = (unsigned __int8 *)sub_2081F133C(a1);
    v18 = *v17;
    *v17 = 2;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v20;
    v20 = (_QWORD *)v19;
    sub_207D20660((uint64_t *)&v20, v18);
    if (v12)
      operator delete(v12);
  }
}

void sub_2081F3AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t *v24;

  sub_207D20660(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2081F3B8C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void *v20;
  void *__p;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25[2];
  char v26;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 + 24 * *a2;
  v22 = 0;
  v23 = 0;
  __p = 0;
  sub_2081F78E0((char *)&__p, v4, v5, v3);
  v25[0] = 0;
  v24 = 2;
  v6 = (char *)__p;
  v7 = v22;
  v8 = operator new(0x18uLL);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v25[1] = (uint64_t)v8;
  v26 = 0;
  if (v7 != v6)
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3)) >> 60)
      sub_207D159B0();
    v9 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3));
    v10 = 0;
    *v8 = v9;
    v8[1] = v9;
    v8[2] = &v9[0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3)];
    do
    {
      v12 = &v9[v10];
      *((_QWORD *)v12 + 1) = 0;
      *v12 = 3;
      v13 = operator new(0x18uLL);
      v14 = v13;
      if (v6[23] < 0)
      {
        sub_207CA40D8(v13, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v11 = *(_OWORD *)v6;
        v13[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v13 = v11;
      }
      *((_QWORD *)v12 + 1) = v14;
      v6 += 24;
      v10 += 16;
    }
    while (v6 != v7);
    v8[1] = &v9[v10];
  }
  v25[0] = (uint64_t)v8;
  v15 = (unsigned __int8 *)sub_2081F133C(a1);
  v16 = *v15;
  *v15 = v24;
  v24 = v16;
  v17 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v25[0];
  v25[0] = v17;
  sub_207D20660(v25, v16);
  v18 = (void **)__p;
  if (__p)
  {
    v19 = (void **)v22;
    v20 = __p;
    if (v22 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = __p;
    }
    v22 = (char *)v18;
    operator delete(v20);
  }
}

void sub_2081F3D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_207D20660(v13, a13);
  sub_207C99DE0(&a10);
  _Unwind_Resume(a1);
}

void sub_2081F3D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2081F3D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207D1E224((void ***)va1);
  operator delete(v2);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2081F3DDC(uint64_t a1, _DWORD *a2)
{
  int *v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  void **v9;

  if (*(_BYTE *)(a1 + 88)
    && *(_QWORD *)(a1 + 80) == 7
    && ((v2 = *(int **)(a1 + 72), v3 = *v2, v4 = *(int *)((char *)v2 + 3), v3 == 1936876918)
      ? (v5 = v4 == 1852795251)
      : (v5 = 0),
        v5))
  {
    *(_DWORD *)(a1 + 96) = *a2;
    *(_BYTE *)(a1 + 100) = 1;
    *(_BYTE *)(a1 + 88) = 0;
  }
  else
  {
    v9 = (void **)*a2;
    v6 = (unsigned __int8 *)sub_2081F1A98(a1);
    v7 = *v6;
    *v6 = 6;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;
    v9 = v8;
    sub_20806DC2C(&v9, v7);
  }
}

void sub_2081F3EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2081F3EB8(uint64_t a1, float *a2)
{
  BOOL v3;
  unsigned __int8 *v4;
  int v5;
  void **v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  double v11;
  void *__p[2];
  void *v13;
  char v14;
  void **v15;
  _BYTE v16[24];
  unsigned int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_DWORD *)a2 & 0x7FFFFFFFu) < 0x7F800000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *a2;
    v4 = (unsigned __int8 *)sub_2081F1A98(a1);
    v5 = *v4;
    *v4 = 7;
    v6 = (void **)*((_QWORD *)v4 + 1);
    *((double *)v4 + 1) = v11;
    v11 = *(double *)&v6;
    sub_20806DC2C((void ***)&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_207E36388((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_207CA9F48();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))*(&off_24C08DBB8 + v17))(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))*(&off_24C08DBA0 + v17))(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = (void **)operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_2081F1A98(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = v10;
    sub_20806DC2C(&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_2081F4040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  void ***v18;

  sub_20806DC2C(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2081F4070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F4084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F4098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2081F40B0(uint64_t a1, double *a2)
{
  BOOL v3;
  unsigned __int8 *v4;
  int v5;
  void **v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;
  void *__p[2];
  void *v13;
  char v14;
  void **v15;
  _BYTE v16[24];
  unsigned int v17;
  char v18;
  char *v19;

  if (*(_BYTE *)(a1 + 32))
    v3 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  else
    v3 = 1;
  if (v3)
  {
    v11 = *(void ***)a2;
    v4 = (unsigned __int8 *)sub_2081F1A98(a1);
    v5 = *v4;
    *v4 = 7;
    v6 = (void **)*((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v11;
    v11 = v6;
    sub_20806DC2C(&v11, v5);
  }
  else
  {
    v17 = 0;
    sub_207DF6804((uint64_t)&v19, (uint64_t)v16, a2);
    if (v17 == -1)
      sub_207CA9F48();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, _BYTE *))*(&off_24C08DBB8 + v17))(__p, &v19, v16);
    if (v17 != -1)
      ((void (*)(char **, _BYTE *))*(&off_24C08DBA0 + v17))(&v19, v16);
    v15 = 0;
    v14 = 3;
    v7 = (void **)operator new(0x18uLL);
    *(_OWORD *)v7 = *(_OWORD *)__p;
    v7[2] = v13;
    __p[1] = 0;
    v13 = 0;
    __p[0] = 0;
    v15 = v7;
    v8 = (unsigned __int8 *)sub_2081F1A98(a1);
    v9 = *v8;
    *v8 = v14;
    v14 = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v15;
    v15 = v10;
    sub_20806DC2C(&v15, v9);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
}

void sub_2081F4234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unsigned __int8 a18)
{
  void ***v18;

  sub_20806DC2C(v18, a18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2081F4264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F4278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F428C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2081F42A4(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  void **v8;
  void **v9;
  unsigned __int8 *v10;
  int v11;
  void **v12;
  void **v13;

  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || ((v4 = *(int **)(a1 + 72), v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1936876918)
      ? (v7 = v6 == 1852795251)
      : (v7 = 0),
        !v7))
  {
    v8 = (void **)operator new(0x18uLL);
    v9 = v8;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_207CA40D8(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)a2;
      v8[2] = *(void **)(a2 + 16);
    }
    v13 = v9;
    v10 = (unsigned __int8 *)sub_2081F1A98(a1);
    v11 = *v10;
    *v10 = 3;
    v12 = (void **)*((_QWORD *)v10 + 1);
    *((_QWORD *)v10 + 1) = v13;
    v13 = v12;
    sub_20806DC2C(&v13, v11);
  }
}

void sub_2081F4388(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2081F439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2081F43B4(uint64_t a1, size_t *a2)
{
  const void *v3;
  size_t v4;
  char *v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v4 = *a2;
  v3 = (const void *)a2[1];
  if (*a2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    memcpy(v5, v3, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081F9B4C(v7, v5, v6);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v5)
    operator delete(v5);
}

void sub_2081F449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F44EC(uint64_t a1, uint64_t a2)
{
  __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(__int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (__int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081F9D2C(v7, (__int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F45D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F4624(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(unsigned __int16 **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207DCF3A0();
    v5 = 2 * (_QWORD)v3;
    v6 = (char *)operator new(2 * (_QWORD)v3);
    v3 = (unsigned __int16 *)&v6[2 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081F9E20(v7, (unsigned __int16 *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F475C(uint64_t a1, uint64_t a2)
{
  int *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(int **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = (int *)&v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081F9F14(v7, (int *)v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F4844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F4894(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 4 * (_QWORD)v3;
    v6 = (char *)operator new(4 * (_QWORD)v3);
    v3 = &v6[4 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081FA00C(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F49CC(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081FA104(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F4AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F4B04(uint64_t a1, uint64_t a2)
{
  char *v3;
  const void *v4;
  size_t v5;
  char *v6;
  void **v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  void **v11;

  v3 = *(char **)a2;
  v4 = *(const void **)(a2 + 8);
  if (*(_QWORD *)a2)
  {
    if (((unint64_t)v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v5 = 8 * (_QWORD)v3;
    v6 = (char *)operator new(8 * (_QWORD)v3);
    v3 = &v6[8 * (_QWORD)v3];
    memcpy(v6, v4, v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (void **)operator new(0x18uLL);
  sub_2081FA1FC(v7, v6, v3);
  v11 = v7;
  v8 = (unsigned __int8 *)sub_2081F1A98(a1);
  v9 = *v8;
  *v8 = 2;
  v10 = (void **)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v11;
  v11 = v10;
  sub_20806DC2C(&v11, v9);
  if (v6)
    operator delete(v6);
}

void sub_2081F4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void *v13;
  void ***v14;

  sub_20806DC2C(v14, a13);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_2081F4C3C(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  __int16 *v5;
  uint64_t v6;
  void **v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  __int16 *v19;
  _QWORD *v20;
  int v21;
  void **v22;
  unint64_t v24;
  _OWORD *v25;
  int8x16_t *v26;
  unint64_t v27;
  int8x16_t v35;
  __int16 v50;
  void **v53;
  unsigned __int8 *v54;
  int v55;
  void **v56;
  void **v57;
  void *__p[2];
  void *v59;
  char v60[8];
  void **v61;
  char v62;
  void **v63;
  uint64_t v64;
  void **v65[2];
  unsigned int v66;
  char v67;
  char *v68;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_2081F1A98(a1);
    if (*a2)
    {
      v5 = (__int16 *)a2[1];
      v6 = 2 * *a2;
      do
      {
        if ((~(unsigned __int16)*v5 & 0x7C00) != 0)
        {
          _H0 = *v5;
          __asm { FCVT            D0, H0 }
          LOBYTE(v64) = 7;
          v65[0] = _D0;
          sub_2081FA2F4((uint64_t)v4, (char *)&v64);
          sub_20806DC2C(v65, v64);
        }
        else
        {
          v66 = 0;
          sub_2080A1380((uint64_t)&v68, (uint64_t)&v64, v5);
          if (v66 == -1)
            sub_207CA9F48();
          v68 = &v67;
          ((void (*)(void **__return_ptr, char **, uint64_t *))*(&off_24C08DBB8 + v66))(__p, &v68, &v64);
          if (v66 != -1)
            ((void (*)(char **, uint64_t *))*(&off_24C08DBA0 + v66))(&v68, &v64);
          v61 = 0;
          v60[0] = 3;
          v12 = (void **)operator new(0x18uLL);
          *(_OWORD *)v12 = *(_OWORD *)__p;
          v12[2] = v59;
          __p[1] = 0;
          v59 = 0;
          __p[0] = 0;
          v61 = v12;
          sub_2081FA2F4((uint64_t)v4, v60);
          sub_20806DC2C(&v61, v60[0]);
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 2;
      }
      while (v6);
    }
    else
    {
      v20 = operator new(0x18uLL);
      v20[1] = 0;
      v20[2] = 0;
      *v20 = 0;
      v21 = *v4;
      *v4 = 2;
      v62 = v21;
      v22 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v20;
      v63 = v22;
      sub_20806DC2C(&v63, v21);
    }
    return;
  }
  v13 = (char *)*a2;
  v14 = a2[1];
  v65[0] = 0;
  v65[1] = 0;
  v64 = 0;
  if (!v13)
  {
    v17 = 0;
    goto LABEL_27;
  }
  v15 = 2 * (_QWORD)v13;
  if ((unint64_t)-((-2 * (uint64_t)v13) >> 1) >> 61)
    sub_207CA420C();
  v16 = (char *)operator new(-8 * ((-2 * (uint64_t)v13) >> 1));
  v17 = v16;
  v18 = (unint64_t)(v13 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v18 < 0x17)
  {
    v19 = (__int16 *)v14;
    v13 = v16;
    do
    {
LABEL_26:
      v50 = *v19++;
      _H0 = v50;
      __asm { FCVT            D0, H0 }
      *(_QWORD *)v13 = _D0;
      v13 += 8;
    }
    while (v19 != (__int16 *)(v14 + v15));
    goto LABEL_27;
  }
  _CF = (unint64_t)v16 >= v14 + 2 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 2
     || v14 >= (unint64_t)&v16[8 * (_QWORD)(v13 + 0x7FFFFFFFFFFFFFFFLL) + 8];
  v19 = (__int16 *)v14;
  v13 = v16;
  if (!_CF)
    goto LABEL_26;
  v24 = v18 + 1;
  v19 = (__int16 *)(v14 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
  v13 = &v16[8 * (v24 & 0xFFFFFFFFFFFFFFF0)];
  v25 = v16 + 64;
  v26 = (int8x16_t *)(v14 + 16);
  v27 = v24 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    _Q1 = v26[-1];
    _D2 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    _H0 = WORD1(_D2);
    __asm
    {
      FCVT            D3, H0
      FCVT            D0, H2
    }
    *((_QWORD *)&_Q0 + 1) = _D3;
    LOWORD(_D3) = HIWORD(_D2);
    __asm { FCVT            D3, H3 }
    LOWORD(_D2) = WORD2(_D2);
    __asm { FCVT            D2, H2 }
    *((_QWORD *)&_Q2 + 1) = _D3;
    v35 = *v26;
    v26 += 2;
    _Q3 = v35;
    _H4 = _Q1.i16[1];
    __asm
    {
      FCVT            D4, H4
      FCVT            D5, H1
    }
    *((_QWORD *)&_Q5 + 1) = _D4;
    LOWORD(_D4) = _Q1.i16[3];
    __asm { FCVT            D4, H4 }
    _Q1.i16[0] = _Q1.i16[2];
    __asm { FCVT            D1, H1 }
    _Q1.i64[1] = _D4;
    _D4 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
    _H6 = WORD1(_D4);
    __asm
    {
      FCVT            D6, H6
      FCVT            D7, H4
    }
    *((_QWORD *)&_Q7 + 1) = _D6;
    LOWORD(_D6) = HIWORD(_D4);
    __asm { FCVT            D6, H6 }
    LOWORD(_D4) = WORD2(_D4);
    __asm { FCVT            D4, H4 }
    *((_QWORD *)&_Q4 + 1) = _D6;
    LOWORD(_D6) = v35.i16[1];
    __asm
    {
      FCVT            D6, H6
      FCVT            D16, H3
    }
    *((_QWORD *)&_Q16 + 1) = _D6;
    LOWORD(_D6) = v35.i16[3];
    __asm { FCVT            D6, H6 }
    _Q3.i16[0] = v35.i16[2];
    __asm { FCVT            D3, H3 }
    _Q3.i64[1] = _D6;
    *(v25 - 4) = _Q5;
    *(v25 - 3) = _Q1;
    *(v25 - 2) = _Q0;
    *(v25 - 1) = _Q2;
    *v25 = _Q16;
    v25[1] = _Q3;
    v25[2] = _Q7;
    v25[3] = _Q4;
    v25 += 8;
    v27 -= 16;
  }
  while (v27);
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_26;
LABEL_27:
  v53 = (void **)operator new(0x18uLL);
  sub_2081FA48C(v53, v17, v13);
  v57 = v53;
  v54 = (unsigned __int8 *)sub_2081F1A98(a1);
  v55 = *v54;
  *v54 = 2;
  v56 = (void **)*((_QWORD *)v54 + 1);
  *((_QWORD *)v54 + 1) = v57;
  v57 = v56;
  sub_20806DC2C(&v57, v55);
  if (v17)
    operator delete(v17);
}

void sub_2081F5000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void ***v24;

  sub_20806DC2C(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2081F50D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081F50E4(uint64_t a1, float **__sz)
{
  unsigned __int8 *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  void **v9;
  float *v10;
  float *v11;
  size_t v12;
  float *v13;
  _QWORD *v14;
  int v15;
  void **v16;
  void **v17;
  uint64_t v18;
  double *v19;
  float *v20;
  float v21;
  unsigned __int8 *v22;
  int v23;
  void **v24;
  void **v25;
  void *__p[2];
  void *v27;
  char v28[8];
  void **v29;
  char v30;
  void **v31;
  uint64_t v32;
  void **v33[2];
  unsigned int v34;
  char v35;
  char *v36;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_2081F1A98(a1);
    v5 = *__sz;
    if (*__sz)
    {
      v6 = __sz[1];
      v7 = 4 * (_QWORD)v5;
      do
      {
        v8 = *v6;
        if ((*(_DWORD *)v6 & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          v34 = 0;
          sub_207E36388((uint64_t)&v36, (uint64_t)&v32, v6);
          if (v34 == -1)
            sub_207CA9F48();
          v36 = &v35;
          ((void (*)(void **__return_ptr, char **, uint64_t *))*(&off_24C08DBB8 + v34))(__p, &v36, &v32);
          if (v34 != -1)
            ((void (*)(char **, uint64_t *))*(&off_24C08DBA0 + v34))(&v36, &v32);
          v29 = 0;
          v28[0] = 3;
          v9 = (void **)operator new(0x18uLL);
          *(_OWORD *)v9 = *(_OWORD *)__p;
          v9[2] = v27;
          __p[1] = 0;
          v27 = 0;
          __p[0] = 0;
          v29 = v9;
          sub_2081FA2F4((uint64_t)v4, v28);
          sub_20806DC2C(&v29, v28[0]);
          if (SHIBYTE(v27) < 0)
            operator delete(__p[0]);
        }
        else
        {
          LOBYTE(v32) = 7;
          *(double *)v33 = v8;
          sub_2081FA2F4((uint64_t)v4, (char *)&v32);
          sub_20806DC2C(v33, v32);
        }
        ++v6;
        v7 -= 4;
      }
      while (v7);
    }
    else
    {
      v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      v15 = *v4;
      *v4 = 2;
      v30 = v15;
      v16 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v14;
      v31 = v16;
      sub_20806DC2C(&v31, v15);
    }
  }
  else
  {
    v11 = *__sz;
    v10 = __sz[1];
    v33[0] = 0;
    v33[1] = 0;
    v32 = 0;
    if (v11)
    {
      if (((unint64_t)v11 & 0x8000000000000000) != 0)
        sub_207D0CD58();
      v12 = 4 * (_QWORD)v11;
      v13 = (float *)operator new(4 * (_QWORD)v11);
      v11 = &v13[(_QWORD)v11];
      memcpy(v13, v10, v12);
    }
    else
    {
      v13 = 0;
    }
    v25 = 0;
    v17 = (void **)operator new(0x18uLL);
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v18 = (char *)v11 - (char *)v13;
    if (v11 != v13)
    {
      if ((unint64_t)v18 >= 0x3FFFFFFFFFFFFFFDLL)
        sub_20806DC18();
      v19 = (double *)operator new(4 * v18);
      *v17 = v19;
      v17[1] = v19;
      v17[2] = &v19[2 * (v18 >> 2)];
      if (v13 != v11)
      {
        v20 = v13;
        do
        {
          v21 = *v20++;
          *(_BYTE *)v19 = 7;
          v19[1] = v21;
          v19 += 2;
        }
        while (v20 != v11);
      }
      v17[1] = v19;
    }
    v25 = v17;
    v22 = (unsigned __int8 *)sub_2081F1A98(a1);
    v23 = *v22;
    *v22 = 2;
    v24 = (void **)*((_QWORD *)v22 + 1);
    *((_QWORD *)v22 + 1) = v25;
    v25 = v24;
    sub_20806DC2C(&v25, v23);
    if (v13)
      operator delete(v13);
  }
}

void sub_2081F53DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void ***v24;
  void ***v25;

  v25 = v24;
  sub_20806DC2C(v25, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2081F5504(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  double *v5;
  uint64_t v6;
  void **v7;
  void **v8;
  char *v9;
  const void *v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  int v14;
  void **v15;
  void **v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void **v20;
  void *__p[2];
  void *v22;
  char v23[8];
  void **v24;
  char v25;
  void **v26;
  uint64_t v27;
  void **v28[2];
  unsigned int v29;
  char v30;
  char *v31;

  if (*(_BYTE *)(a1 + 32))
  {
    v4 = (unsigned __int8 *)sub_2081F1A98(a1);
    if (*a2)
    {
      v5 = (double *)a2[1];
      v6 = 8 * *a2;
      do
      {
        v7 = *(void ***)v5;
        if ((*(_QWORD *)v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          LOBYTE(v27) = 7;
          v28[0] = v7;
          sub_2081FA2F4((uint64_t)v4, (char *)&v27);
          sub_20806DC2C(v28, v27);
        }
        else
        {
          v29 = 0;
          sub_207DF6804((uint64_t)&v31, (uint64_t)&v27, v5);
          if (v29 == -1)
            sub_207CA9F48();
          v31 = &v30;
          ((void (*)(void **__return_ptr, char **, uint64_t *))*(&off_24C08DBB8 + v29))(__p, &v31, &v27);
          if (v29 != -1)
            ((void (*)(char **, uint64_t *))*(&off_24C08DBA0 + v29))(&v31, &v27);
          v24 = 0;
          v23[0] = 3;
          v8 = (void **)operator new(0x18uLL);
          *(_OWORD *)v8 = *(_OWORD *)__p;
          v8[2] = v22;
          __p[1] = 0;
          v22 = 0;
          __p[0] = 0;
          v24 = v8;
          sub_2081FA2F4((uint64_t)v4, v23);
          sub_20806DC2C(&v24, v23[0]);
          if (SHIBYTE(v22) < 0)
            operator delete(__p[0]);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    else
    {
      v13 = operator new(0x18uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 0;
      v14 = *v4;
      *v4 = 2;
      v25 = v14;
      v15 = (void **)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v13;
      v26 = v15;
      sub_20806DC2C(&v26, v14);
    }
  }
  else
  {
    v9 = (char *)*a2;
    v10 = (const void *)a2[1];
    v28[0] = 0;
    v28[1] = 0;
    v27 = 0;
    if (v9)
    {
      if (((unint64_t)v9 & 0x8000000000000000) != 0)
        sub_207CA420C();
      v11 = 8 * (_QWORD)v9;
      v12 = (char *)operator new(8 * (_QWORD)v9);
      v9 = &v12[8 * (_QWORD)v9];
      memcpy(v12, v10, v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (void **)operator new(0x18uLL);
    sub_2081FA48C(v16, v12, v9);
    v20 = v16;
    v17 = (unsigned __int8 *)sub_2081F1A98(a1);
    v18 = *v17;
    *v17 = 2;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v20;
    v20 = v19;
    sub_20806DC2C(&v20, v18);
    if (v12)
      operator delete(v12);
  }
}

void sub_2081F578C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void ***v24;

  sub_20806DC2C(v24, a10);
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2081F5870(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void **v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  void *__p;
  char *v22;
  uint64_t v23;
  char v24;
  void **v25[2];
  char v26;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 + 24 * *a2;
  v22 = 0;
  v23 = 0;
  __p = 0;
  sub_2081F78E0((char *)&__p, v4, v5, v3);
  v25[0] = 0;
  v24 = 2;
  v6 = (char *)__p;
  v7 = v22;
  v8 = (void **)operator new(0x18uLL);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v25[1] = v8;
  v26 = 0;
  if (v7 != v6)
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3)) >> 60)
      sub_20806DC18();
    v9 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3));
    v10 = 0;
    *v8 = v9;
    v8[1] = v9;
    v8[2] = &v9[0xAAAAAAAAAAAAAAB0 * ((v7 - v6) >> 3)];
    do
    {
      v12 = &v9[v10];
      *((_QWORD *)v12 + 1) = 0;
      *v12 = 3;
      v13 = operator new(0x18uLL);
      v14 = v13;
      if (v6[23] < 0)
      {
        sub_207CA40D8(v13, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v11 = *(_OWORD *)v6;
        v13[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v13 = v11;
      }
      *((_QWORD *)v12 + 1) = v14;
      v6 += 24;
      v10 += 16;
    }
    while (v6 != v7);
    v8[1] = &v9[v10];
  }
  v25[0] = v8;
  v15 = (unsigned __int8 *)sub_2081F1A98(a1);
  v16 = *v15;
  *v15 = v24;
  v24 = v16;
  v17 = (void **)*((_QWORD *)v15 + 1);
  *((void ***)v15 + 1) = v25[0];
  v25[0] = v17;
  sub_20806DC2C(v25, v16);
  v18 = (void **)__p;
  if (__p)
  {
    v19 = (void **)v22;
    v20 = __p;
    if (v22 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = __p;
    }
    v22 = (char *)v18;
    operator delete(v20);
  }
}

void sub_2081F5A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  sub_207C99DE0(&a10);
  _Unwind_Resume(a1);
}

void sub_2081F5A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2081F5A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_208096D4C((void ***)va1);
  operator delete(v2);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2081F5AC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 32) = v3;
  v5 = *(char **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = *(char **)(a1 + 40);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_207CA420C();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      goto LABEL_47;
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v2;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v2;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_52;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = *(char **)(a1 + 40);
  }
LABEL_21:
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  *(_QWORD *)(a1 + 48) = v7;
  v26 = *(char **)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v26 < v25)
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 112);
    v27 = v26 + 8;
    goto LABEL_44;
  }
  v28 = *(char **)(a1 + 64);
  v29 = (v26 - v28) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    sub_207CA420C();
  v31 = v25 - (_QWORD)v28;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v32 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v32 = v30;
  if (v32)
  {
    if (!(v32 >> 61))
    {
      v33 = operator new(8 * v32);
      goto LABEL_35;
    }
LABEL_47:
    sub_207CA3AB8();
  }
  v33 = 0;
LABEL_35:
  v34 = &v33[8 * v29];
  v35 = &v33[8 * v32];
  *v34 = *(_QWORD *)(a1 + 112);
  v27 = v34 + 1;
  if (v26 != v28)
  {
    v36 = v26 - v28 - 8;
    if (v36 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v28 - v33) < 0x20)
      goto LABEL_53;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v26[-v38];
    v34 = (_QWORD *)((char *)v34 - v38);
    v40 = &v33[8 * v29 - 16];
    v41 = v26 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v44 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v34 = v44;
      }
      while (v26 != v28);
    }
  }
  *(_QWORD *)(a1 + 64) = v34;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v35;
  if (v28)
    operator delete(v28);
LABEL_44:
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_BYTE *)(a1 + 104))
    *(_BYTE *)(a1 + 104) = 0;
}

uint64_t sub_2081F5D78(uint64_t *a1)
{
  _BYTE *v1;
  size_t v3;
  const void *v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const void *__dst[2];
  unint64_t v10;

  v1 = (_BYTE *)a1[4];
  if (*v1 == 2)
    return sub_208097024(a1[4], a1[14]);
  v3 = a1[12];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v4 = (const void *)a1[11];
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (const void **)operator new(v6 + 1);
    __dst[1] = (const void *)v3;
    v10 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v10) = a1[12];
    v5 = __dst;
    if (!v3)
      goto LABEL_11;
  }
  memmove(v5, v4, v3);
LABEL_11:
  *((_BYTE *)v5 + v3) = 0;
  v8 = sub_207D151D8((uint64_t)v1, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__dst[0]);
  return (uint64_t)v8;
}

void sub_2081F5E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F5E90(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_2081F80CC(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 >= 0x100uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_2081F5F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F5F4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 32) = v3;
  v5 = *(char **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = *(char **)(a1 + 40);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_207CA420C();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      goto LABEL_47;
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v2;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v2;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_52;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = *(char **)(a1 + 40);
  }
LABEL_21:
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  *(_QWORD *)(a1 + 48) = v7;
  v26 = *(char **)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v26 < v25)
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 112);
    v27 = v26 + 8;
    goto LABEL_44;
  }
  v28 = *(char **)(a1 + 64);
  v29 = (v26 - v28) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
    sub_207CA420C();
  v31 = v25 - (_QWORD)v28;
  if (v31 >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v32 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v32 = v30;
  if (v32)
  {
    if (!(v32 >> 61))
    {
      v33 = operator new(8 * v32);
      goto LABEL_35;
    }
LABEL_47:
    sub_207CA3AB8();
  }
  v33 = 0;
LABEL_35:
  v34 = &v33[8 * v29];
  v35 = &v33[8 * v32];
  *v34 = *(_QWORD *)(a1 + 112);
  v27 = v34 + 1;
  if (v26 != v28)
  {
    v36 = v26 - v28 - 8;
    if (v36 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v28 - v33) < 0x20)
      goto LABEL_53;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v26[-v38];
    v34 = (_QWORD *)((char *)v34 - v38);
    v40 = &v33[8 * v29 - 16];
    v41 = v26 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v44 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v34 = v44;
      }
      while (v26 != v28);
    }
  }
  *(_QWORD *)(a1 + 64) = v34;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v35;
  if (v28)
    operator delete(v28);
LABEL_44:
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_BYTE *)(a1 + 104))
    *(_BYTE *)(a1 + 104) = 0;
}

uint64_t sub_2081F6204(uint64_t *a1)
{
  _BYTE *v1;
  size_t v3;
  const void *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *__dst[2];
  unint64_t v10;

  v1 = (_BYTE *)a1[4];
  if (*v1 == 2)
    return sub_208097680(a1[4], a1[14]);
  v3 = a1[12];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v4 = (const void *)a1[11];
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (unsigned __int8 *)operator new(v6 + 1);
    __dst[1] = (unsigned __int8 *)v3;
    v10 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v10) = a1[12];
    v5 = (unsigned __int8 *)__dst;
    if (!v3)
      goto LABEL_11;
  }
  memmove(v5, v4, v3);
LABEL_11:
  v5[v3] = 0;
  v8 = sub_2081E5A68((uint64_t)v1, __dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  return v8;
}

void sub_2081F6300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F631C(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_2081F8AC4(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 >= 0x100uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_2081F63B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F63D8(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_2081F7A10(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_2081F6474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F6494(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_2081F5D78(a1);
  ++a1[14];
  sub_2081F5E90(v4, a2);
}

void sub_2081F64C8(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F7A10(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (__int16)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F6564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F6584(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_2081F5D78(a1);
  ++a1[14];
  sub_2081F65B8(v4, a2);
}

void sub_2081F65B8(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F80CC(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 >= 0x10000uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F6654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F6674(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F7A10(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (int)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F6710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F6730(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F80CC(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (HIDWORD(*v6))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F67CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F67EC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_2081F5D78(a1);
  ++a1[14];
  sub_2081F6820(v4, *(_WORD **)(a2 + 8));
}

void sub_2081F6820(unint64_t a1, _WORD *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  int v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  __int16 v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30[3];
  unsigned __int8 *v31[4];
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  void *__p[2];
  uint64_t v37;
  char *v38;
  double v39;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v32 = (unsigned __int8 *)a1;
    v33 = 0;
    v34 = v5;
    v35 = 0x8000000000000000;
    v31[0] = (unsigned __int8 *)a1;
    v31[1] = 0;
    v31[2] = v4;
    v31[3] = (unsigned __int8 *)0x8000000000000000;
    if (!sub_207D23444(&v32, v31))
    {
      v6 = *MEMORY[0x24BEDB7F0];
      v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v9 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v10 = (void **)sub_207D21398((uint64_t)&v32);
        v11 = *(unsigned __int8 *)v10;
        if ((v11 - 5) > 2)
        {
          if (v11 == 3)
          {
            __p[0] = 0;
            __p[1] = 0;
            v37 = 0;
            sub_207D21A34(v10, (uint64_t)__p);
            v18 = SHIBYTE(v37);
            v19 = (char *)__p[0];
            v20 = (char *)operator new(0x118uLL);
            v21 = v20;
            if (v18 >= 0)
              v22 = (char *)__p;
            else
              v22 = v19;
            sub_208215780((uint64_t)v20, v22);
            v38 = v21;
            v39 = 0.0;
            v23 = (_QWORD *)MEMORY[0x20BD02224](v21, &v39);
            _S0 = v39;
            __asm { FCVT            H0, S0 }
            _ZF = (*(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 32) & 5) == 0;
            *(_QWORD *)v21 = v6;
            *(_QWORD *)&v21[*(_QWORD *)(v6 - 24)] = v7;
            if (_ZF)
              v26 = _H0;
            else
              v26 = 0;
            *((_QWORD *)v21 + 3) = v9;
            *((_QWORD *)v21 + 2) = v8;
            if (v21[111] < 0)
              operator delete(*((void **)v21 + 11));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x20BD027B8](v21 + 128);
            operator delete(v21);
            if (SHIBYTE(v37) < 0)
              operator delete(__p[0]);
            *a2 = v26;
            v17 = *v32;
            if (v17 != 2)
            {
LABEL_21:
              if (v17 == 1)
              {
                v27 = v33;
                v28 = (_QWORD *)v33[1];
                if (v28)
                {
                  do
                  {
                    v29 = v28;
                    v28 = (_QWORD *)*v28;
                  }
                  while (v28);
                }
                else
                {
                  do
                  {
                    v29 = (_QWORD *)v27[2];
                    _ZF = *v29 == (_QWORD)v27;
                    v27 = v29;
                  }
                  while (!_ZF);
                }
                v33 = v29;
              }
              else
              {
                ++v35;
              }
              goto LABEL_5;
            }
          }
          else
          {
            *a2 = 0x7FFF;
            v17 = *v32;
            if (v17 != 2)
              goto LABEL_21;
          }
        }
        else
        {
          __p[0] = 0;
          sub_208097518((uint64_t *)v10, (double *)__p);
          _S0 = *(double *)__p;
          __asm { FCVT            H0, S0 }
          *a2 = LOWORD(_S0);
          v17 = *v32;
          if (v17 != 2)
            goto LABEL_21;
        }
        v34 += 16;
LABEL_5:
        ++a2;
      }
      while (!sub_207D23444(&v32, v31));
    }
  }
  else
  {
    memset(v30, 0, sizeof(v30));
    sub_2081FA740(a1, (uint64_t)v30);
    if (v30[0])
      operator delete(v30[0]);
  }
}

void sub_2081F6AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F6B10(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_2081F5D78(a1);
  ++a1[14];
  sub_2081F6B44(v4, *(float **)(a2 + 8));
}

void sub_2081F6B44(unint64_t a1, float *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[3];
  unsigned __int8 *v13[4];
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v14 = (unsigned __int8 *)a1;
    v15 = 0;
    v16 = v5;
    v17 = 0x8000000000000000;
    v13[0] = (unsigned __int8 *)a1;
    v13[1] = 0;
    v13[2] = v4;
    for (v13[3] = (unsigned __int8 *)0x8000000000000000; !sub_207D23444(&v14, v13); ++a2)
    {
      v6 = (uint64_t *)sub_207D21398((uint64_t)&v14);
      *a2 = sub_2081FA584(v6);
      v7 = *v14;
      if (v7 == 2)
      {
        v16 += 16;
      }
      else if (v7 == 1)
      {
        v8 = v15;
        v9 = (_QWORD *)v15[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v8[2];
            v11 = *v10 == (_QWORD)v8;
            v8 = v10;
          }
          while (!v11);
        }
        v15 = v10;
      }
      else
      {
        ++v17;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_2081FA740(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_2081F6C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F6C74(unint64_t a1, double *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[3];
  unsigned __int8 *v13[4];
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v14 = (unsigned __int8 *)a1;
    v15 = 0;
    v16 = v5;
    v17 = 0x8000000000000000;
    v13[0] = (unsigned __int8 *)a1;
    v13[1] = 0;
    v13[2] = v4;
    for (v13[3] = (unsigned __int8 *)0x8000000000000000; !sub_207D23444(&v14, v13); ++a2)
    {
      v6 = (uint64_t *)sub_207D21398((uint64_t)&v14);
      *a2 = sub_2081FA664(v6);
      v7 = *v14;
      if (v7 == 2)
      {
        v16 += 16;
      }
      else if (v7 == 1)
      {
        v8 = v15;
        v9 = (_QWORD *)v15[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v8[2];
            v11 = *v10 == (_QWORD)v8;
            v8 = v10;
          }
          while (!v11);
        }
        v15 = v10;
      }
      else
      {
        ++v17;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_2081FA740(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_2081F6D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081F6DA4(uint64_t a1, char *a2, void **a3)
{
  void **v4;
  void **v5;
  void *v6;
  double result;
  __int128 v8;
  void *v9;

  v8 = 0uLL;
  v9 = 0;
  sub_207D20FDC(a2, (void **)&v8);
  v4 = (void **)*a3;
  if (*a3)
  {
    v5 = (void **)a3[1];
    v6 = *a3;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *a3;
    }
    a3[1] = v4;
    operator delete(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  a3[2] = v9;
  return result;
}

void sub_2081F6E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2081F6E98(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *exception;
  void *__p;
  _QWORD *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_2081F8788(a1, (uint64_t)&__p);
  v3 = __p;
  v4 = v8;
  if (__p != v8)
  {
    v5 = *(_BYTE **)(a2 + 8);
    do
    {
      if (*v3 != (char)*v3)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v3++;
    }
    while (v3 != v4);
    v3 = __p;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void sub_2081F6F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F6F54(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_2081F6204(a1);
  ++a1[14];
  sub_2081F631C(v4, a2);
}

void sub_2081F6F88(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F8788(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (__int16)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F7024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F7044(uint64_t *a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)sub_2081F6204(a1);
  ++a1[14];
  sub_2081F7078(v4, a2);
}

void sub_2081F7078(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _WORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F8AC4(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_WORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 >= 0x10000uLL)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F7114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F7134(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F8788(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (*v6 != (int)*v6)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F71D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F71F0(char *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2081F8AC4(a1, (uint64_t)&v8);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = *(_DWORD **)(a2 + 8);
    v6 = v8;
    do
    {
      if (HIDWORD(*v6))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *v5++ = *v6++;
    }
    while (v6 != v4);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_2081F728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F72AC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_2081F6204(a1);
  ++a1[14];
  sub_2081F72E0(v4, *(_WORD **)(a2 + 8));
}

void sub_2081F72E0(unint64_t a1, _WORD *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int v11;
  int v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  __int16 v26;
  void *v27[3];
  unsigned __int8 *v28[4];
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *__p[2];
  uint64_t v34;
  char *v35;
  double v36;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v29 = (unsigned __int8 *)a1;
    v30 = 0;
    v31 = v5;
    v32 = 0x8000000000000000;
    v28[0] = (unsigned __int8 *)a1;
    v28[1] = 0;
    v28[2] = v4;
    v28[3] = (unsigned __int8 *)0x8000000000000000;
    if (!sub_208098050(&v29, v28))
    {
      v6 = *MEMORY[0x24BEDB7F0];
      v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v9 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v10 = (void **)sub_208098150((uint64_t)&v29);
        v11 = *(unsigned __int8 *)v10;
        if ((v11 - 5) > 2)
        {
          if (v11 == 3)
          {
            __p[0] = 0;
            __p[1] = 0;
            v34 = 0;
            sub_208097C8C(v10, (uint64_t)__p);
            v18 = SHIBYTE(v34);
            v19 = (char *)__p[0];
            v20 = (char *)operator new(0x118uLL);
            v21 = v20;
            if (v18 >= 0)
              v22 = (char *)__p;
            else
              v22 = v19;
            sub_208215780((uint64_t)v20, v22);
            v35 = v21;
            v36 = 0.0;
            v23 = (_QWORD *)MEMORY[0x20BD02224](v21, &v36);
            _S0 = v36;
            __asm { FCVT            H0, S0 }
            _ZF = (*(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 32) & 5) == 0;
            *(_QWORD *)v21 = v6;
            *(_QWORD *)&v21[*(_QWORD *)(v6 - 24)] = v7;
            if (_ZF)
              v26 = _H0;
            else
              v26 = 0;
            *((_QWORD *)v21 + 3) = v9;
            *((_QWORD *)v21 + 2) = v8;
            if (v21[111] < 0)
              operator delete(*((void **)v21 + 11));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x20BD027B8](v21 + 128);
            operator delete(v21);
            if (SHIBYTE(v34) < 0)
              operator delete(__p[0]);
            *a2 = v26;
            v17 = *v29;
            if (v17 != 2)
            {
LABEL_21:
              if (v17 == 1)
                v30 += 40;
              else
                ++v32;
              goto LABEL_5;
            }
          }
          else
          {
            *a2 = 0x7FFF;
            v17 = *v29;
            if (v17 != 2)
              goto LABEL_21;
          }
        }
        else
        {
          __p[0] = 0;
          sub_208097A1C((uint64_t *)v10, (double *)__p);
          _S0 = *(double *)__p;
          __asm { FCVT            H0, S0 }
          *a2 = LOWORD(_S0);
          v17 = *v29;
          if (v17 != 2)
            goto LABEL_21;
        }
        v31 += 16;
LABEL_5:
        ++a2;
      }
      while (!sub_208098050(&v29, v28));
    }
  }
  else
  {
    memset(v27, 0, sizeof(v27));
    sub_2081FAEE8(a1, (uint64_t)v27);
    if (v27[0])
      operator delete(v27[0]);
  }
}

void sub_2081F7548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F75A8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_2081F6204(a1);
  ++a1[14];
  sub_2081F75DC(v4, *(float **)(a2 + 8));
}

void sub_2081F75DC(unint64_t a1, float *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  void *__p[3];
  unsigned __int8 *v9[4];
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v10 = (unsigned __int8 *)a1;
    v11 = 0;
    v12 = v5;
    v13 = 0x8000000000000000;
    v9[0] = (unsigned __int8 *)a1;
    v9[1] = 0;
    v9[2] = v4;
    for (v9[3] = (unsigned __int8 *)0x8000000000000000; !sub_208098050(&v10, v9); ++a2)
    {
      v6 = (uint64_t *)sub_208098150((uint64_t)&v10);
      *a2 = sub_2081FAD2C(v6);
      v7 = *v10;
      if (v7 == 2)
      {
        v12 += 16;
      }
      else if (v7 == 1)
      {
        v11 += 40;
      }
      else
      {
        ++v13;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_2081FAEE8(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_2081F76CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081F76E4(unint64_t a1, double *a2)
{
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  void *__p[3];
  unsigned __int8 *v9[4];
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (*(_BYTE *)a1 == 2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v5 = *v3;
    v4 = (unsigned __int8 *)v3[1];
    v10 = (unsigned __int8 *)a1;
    v11 = 0;
    v12 = v5;
    v13 = 0x8000000000000000;
    v9[0] = (unsigned __int8 *)a1;
    v9[1] = 0;
    v9[2] = v4;
    for (v9[3] = (unsigned __int8 *)0x8000000000000000; !sub_208098050(&v10, v9); ++a2)
    {
      v6 = (uint64_t *)sub_208098150((uint64_t)&v10);
      *a2 = sub_2081FAE0C(v6);
      v7 = *v10;
      if (v7 == 2)
      {
        v12 += 16;
      }
      else if (v7 == 1)
      {
        v11 += 40;
      }
      else
      {
        ++v13;
      }
    }
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    sub_2081FAEE8(a1, (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
}

void sub_2081F77D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081F77EC(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  void **v4;
  void **v5;
  void *v6;
  double result;
  __int128 v8;
  void *v9;

  v8 = 0uLL;
  v9 = 0;
  sub_2081F8E00(a2, (void **)&v8);
  v4 = (void **)*a3;
  if (*a3)
  {
    v5 = (void **)a3[1];
    v6 = *a3;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *a3;
    }
    a3[1] = v4;
    operator delete(v6);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  a3[2] = v9;
  return result;
}

void sub_2081F788C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2081F78E0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_207CA40D8(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2081F79C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207CA57C8(&a9);
  _Unwind_Resume(a1);
}

void sub_2081F79D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_207CA57C8(&a9);
  _Unwind_Resume(a1);
}

double sub_2081F7A10(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770(a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("type must be array, but is ", &v6, &v7);
    sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_2081F7B14((unsigned __int8 *)a1, a2);
}

void sub_2081F7AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_2081F7B14(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  double result;
  unsigned __int8 *v17;
  _QWORD *v18;
  __int128 v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;

  v24 = 0uLL;
  v25 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v20 = a1;
        v21 = 0;
        v22 = 0;
        v23 = 1;
        goto LABEL_17;
      }
      v6 = 1;
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_207CA420C();
LABEL_11:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v24 = v5;
      *((_QWORD *)&v24 + 1) = v5;
      v25 = &v5[8 * v6];
      v20 = a1;
      v21 = 0;
      v22 = 0;
      v23 = 0x8000000000000000;
      goto LABEL_12;
    }
  }
  v5 = 0;
  v20 = a1;
  v21 = 0;
  v22 = 0;
  v23 = 0x8000000000000000;
LABEL_12:
  if (v4 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)a1 + 1);
    v22 = *v8;
    v17 = a1;
    v18 = 0;
    *((_QWORD *)&v19 + 1) = 0x8000000000000000;
    *(_QWORD *)&v19 = v8[1];
    goto LABEL_19;
  }
  if (v4 == 1)
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 1);
    v21 = (_QWORD *)*v7;
    v19 = xmmword_208233370;
    v17 = a1;
    v18 = v7 + 1;
    goto LABEL_19;
  }
  v23 = 0;
LABEL_17:
  v17 = a1;
  v18 = 0;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = 1;
LABEL_19:
  while (!sub_207D23444(&v20, &v17))
  {
    v9 = sub_207D21398((uint64_t)&v20);
    v26 = 0;
    sub_2080973D0(v9, &v26);
    v5 = sub_2081F7D5C((void **)&v24, v5, &v26) + 8;
    v10 = *v20;
    if (v10 == 2)
    {
      v22 += 16;
    }
    else if (v10 == 1)
    {
      v11 = v21;
      v12 = (_QWORD *)v21[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v21 = v13;
    }
    else
    {
      ++v23;
    }
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v24;
  *(_OWORD *)a2 = v24;
  *(_QWORD *)(a2 + 16) = v25;
  return result;
}

void sub_2081F7D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_2081F7D5C(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_207CA420C();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_207CA3AB8();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_207CA3AB8();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *a3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *a3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_2081F80B4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double sub_2081F80CC(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770(a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("type must be array, but is ", &v6, &v7);
    sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_2081F81D0((unsigned __int8 *)a1, a2);
}

void sub_2081F8170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_2081F81D0(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  double result;
  unsigned __int8 *v17;
  _QWORD *v18;
  __int128 v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;

  v24 = 0uLL;
  v25 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v20 = a1;
        v21 = 0;
        v22 = 0;
        v23 = 1;
        goto LABEL_17;
      }
      v6 = 1;
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_207CA420C();
LABEL_11:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v24 = v5;
      *((_QWORD *)&v24 + 1) = v5;
      v25 = &v5[8 * v6];
      v20 = a1;
      v21 = 0;
      v22 = 0;
      v23 = 0x8000000000000000;
      goto LABEL_12;
    }
  }
  v5 = 0;
  v20 = a1;
  v21 = 0;
  v22 = 0;
  v23 = 0x8000000000000000;
LABEL_12:
  if (v4 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)a1 + 1);
    v22 = *v8;
    v17 = a1;
    v18 = 0;
    *((_QWORD *)&v19 + 1) = 0x8000000000000000;
    *(_QWORD *)&v19 = v8[1];
    goto LABEL_19;
  }
  if (v4 == 1)
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 1);
    v21 = (_QWORD *)*v7;
    v19 = xmmword_208233370;
    v17 = a1;
    v18 = v7 + 1;
    goto LABEL_19;
  }
  v23 = 0;
LABEL_17:
  v17 = a1;
  v18 = 0;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = 1;
LABEL_19:
  while (!sub_207D23444(&v20, &v17))
  {
    v9 = sub_207D21398((uint64_t)&v20);
    v26 = 0;
    sub_208097288(v9, &v26);
    v5 = sub_2081F8418((void **)&v24, v5, &v26) + 8;
    v10 = *v20;
    if (v10 == 2)
    {
      v22 += 16;
    }
    else if (v10 == 1)
    {
      v11 = v21;
      v12 = (_QWORD *)v21[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v21 = v13;
    }
    else
    {
      ++v23;
    }
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v24;
  *(_OWORD *)a2 = v24;
  *(_QWORD *)(a2 + 16) = v25;
  return result;
}

void sub_2081F83F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_2081F8418(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_207CA420C();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_207CA3AB8();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_207CA3AB8();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *a3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *a3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_2081F8770(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double sub_2081F8788(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20809655C(a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("type must be array, but is ", &v6, &v7);
    sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_2081F888C((unsigned __int8 *)a1, a2);
}

void sub_2081F882C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_2081F888C(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  int v11;
  void *v12;
  double result;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v21 = 0uLL;
  v22 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v17 = a1;
        v18 = 0;
        v19 = 0;
        v20 = 0x8000000000000000;
        v20 = 1;
        goto LABEL_18;
      }
      v6 = 1;
      goto LABEL_12;
    }
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_207CA420C();
LABEL_12:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v21 = v5;
      *((_QWORD *)&v21 + 1) = v5;
      v22 = &v5[8 * v6];
      v17 = a1;
      v18 = 0;
      v19 = 0;
      v20 = 0x8000000000000000;
      goto LABEL_13;
    }
  }
  v5 = 0;
  v17 = a1;
  v18 = 0;
  v19 = 0;
  v20 = 0x8000000000000000;
LABEL_13:
  if (v4 == 2)
  {
    v9 = (uint64_t *)*((_QWORD *)a1 + 1);
    v19 = *v9;
    v14 = a1;
    v15 = 0;
    *((_QWORD *)&v16 + 1) = 0x8000000000000000;
    *(_QWORD *)&v16 = v9[1];
    goto LABEL_20;
  }
  if (v4 == 1)
  {
    v7 = (uint64_t *)*((_QWORD *)a1 + 1);
    v18 = *v7;
    v16 = xmmword_208233370;
    v8 = v7[1];
    v14 = a1;
    v15 = v8;
    goto LABEL_20;
  }
  v20 = 0;
LABEL_18:
  v14 = a1;
  v15 = 0;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 1;
LABEL_20:
  while (!sub_208098050(&v17, &v14))
  {
    v10 = sub_208098150((uint64_t)&v17);
    v23 = 0;
    sub_2080978D4(v10, &v23);
    v5 = sub_2081F7D5C((void **)&v21, v5, &v23) + 8;
    v11 = *v17;
    if (v11 == 2)
    {
      v19 += 16;
    }
    else if (v11 == 1)
    {
      v18 += 40;
    }
    else
    {
      ++v20;
    }
  }
  v12 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v12;
    operator delete(v12);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v21;
  *(_OWORD *)a2 = v21;
  *(_QWORD *)(a2 + 16) = v22;
  return result;
}

void sub_2081F8AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081F8AC4(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20809655C(a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("type must be array, but is ", &v6, &v7);
    sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_2081F8BC8((unsigned __int8 *)a1, a2);
}

void sub_2081F8B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_2081F8BC8(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  int v11;
  void *v12;
  double result;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v21 = 0uLL;
  v22 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v17 = a1;
        v18 = 0;
        v19 = 0;
        v20 = 0x8000000000000000;
        v20 = 1;
        goto LABEL_18;
      }
      v6 = 1;
      goto LABEL_12;
    }
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3);
    if (v6)
    {
LABEL_6:
      if (v6 >> 61)
        sub_207CA420C();
LABEL_12:
      v5 = (char *)operator new(8 * v6);
      *(_QWORD *)&v21 = v5;
      *((_QWORD *)&v21 + 1) = v5;
      v22 = &v5[8 * v6];
      v17 = a1;
      v18 = 0;
      v19 = 0;
      v20 = 0x8000000000000000;
      goto LABEL_13;
    }
  }
  v5 = 0;
  v17 = a1;
  v18 = 0;
  v19 = 0;
  v20 = 0x8000000000000000;
LABEL_13:
  if (v4 == 2)
  {
    v9 = (uint64_t *)*((_QWORD *)a1 + 1);
    v19 = *v9;
    v14 = a1;
    v15 = 0;
    *((_QWORD *)&v16 + 1) = 0x8000000000000000;
    *(_QWORD *)&v16 = v9[1];
    goto LABEL_20;
  }
  if (v4 == 1)
  {
    v7 = (uint64_t *)*((_QWORD *)a1 + 1);
    v18 = *v7;
    v16 = xmmword_208233370;
    v8 = v7[1];
    v14 = a1;
    v15 = v8;
    goto LABEL_20;
  }
  v20 = 0;
LABEL_18:
  v14 = a1;
  v15 = 0;
  *(_QWORD *)&v16 = 0;
  *((_QWORD *)&v16 + 1) = 1;
LABEL_20:
  while (!sub_208098050(&v17, &v14))
  {
    v10 = sub_208098150((uint64_t)&v17);
    v23 = 0;
    sub_20809778C(v10, &v23);
    v5 = sub_2081F8418((void **)&v21, v5, &v23) + 8;
    v11 = *v17;
    if (v11 == 2)
    {
      v19 += 16;
    }
    else if (v11 == 1)
    {
      v18 += 40;
    }
    else
    {
      ++v20;
    }
  }
  v12 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v12;
    operator delete(v12);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v21;
  *(_OWORD *)a2 = v21;
  *(_QWORD *)(a2 + 16) = v22;
  return result;
}

void sub_2081F8DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081F8E00(unsigned __int8 *a1, void **a2)
{
  int v4;
  std::string::size_type *v5;
  std::string::size_type v6;
  std::string::size_type *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void **v13;
  void *v14;
  double result;
  void *exception;
  char *v17;
  unsigned __int8 *v18;
  std::string::size_type v19;
  __int128 v20;
  std::string v21;
  unint64_t v22;
  __int128 v23;
  void *v24;
  __n128 v25;
  uint64_t v26;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v17 = (char *)sub_20809655C((char *)a1);
    sub_207C96EE8(&v18, v17);
    sub_207C96E8C("type must be array, but is ", (std::string *)&v18, &v21);
    sub_207D1E5F8(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  v24 = 0;
  v23 = 0uLL;
  sub_207CA44DC((char **)&v23, (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4);
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v21.__r_.__value_.__r.__words[2] = 0;
  v22 = 0x8000000000000000;
  v4 = *a1;
  if (*a1)
  {
    if (v4 == 2)
    {
      v7 = (std::string::size_type *)*((_QWORD *)a1 + 1);
      v21.__r_.__value_.__r.__words[2] = *v7;
      v18 = a1;
      v19 = 0;
      *((_QWORD *)&v20 + 1) = 0x8000000000000000;
      *(_QWORD *)&v20 = v7[1];
      goto LABEL_10;
    }
    if (v4 == 1)
    {
      v5 = (std::string::size_type *)*((_QWORD *)a1 + 1);
      v21.__r_.__value_.__l.__size_ = *v5;
      v20 = xmmword_208233370;
      v6 = v5[1];
      v18 = a1;
      v19 = v6;
      goto LABEL_10;
    }
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  v18 = a1;
  v19 = 0;
  *(_QWORD *)&v20 = 0;
  *((_QWORD *)&v20 + 1) = 1;
LABEL_10:
  v8 = *((_QWORD *)&v23 + 1);
  while (!sub_208098050((unsigned __int8 **)&v21, &v18))
  {
    v9 = (void **)sub_208098150((uint64_t)&v21);
    v25 = 0uLL;
    v26 = 0;
    sub_208097C8C(v9, (uint64_t)&v25);
    v10 = sub_207D21500((void ***)&v23, v8, &v25);
    if (SHIBYTE(v26) < 0)
    {
      operator delete((void *)v25.n128_u64[0]);
      v11 = *v21.__r_.__value_.__l.__data_;
      if (v11 != 2)
      {
LABEL_13:
        if (v11 == 1)
          v21.__r_.__value_.__l.__size_ += 40;
        else
          ++v22;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = *v21.__r_.__value_.__l.__data_;
      if (v11 != 2)
        goto LABEL_13;
    }
    v21.__r_.__value_.__r.__words[2] += 16;
LABEL_18:
    v8 = v10 + 24;
  }
  v12 = (void **)*a2;
  if (*a2)
  {
    v13 = (void **)a2[1];
    v14 = *a2;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = *a2;
    }
    a2[1] = v12;
    operator delete(v14);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  a2[2] = v24;
  return result;
}

void sub_2081F9064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_2081F90A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2081F9114(_QWORD *a1, char *a2, char *a3)
{
  unint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F91B4(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F9204(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F92A4(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F92F4(_QWORD *a1, __int16 *a2, __int16 *a3)
{
  uint64_t v4;
  __int16 *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9398(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F93E8(_QWORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v4;
  unsigned __int16 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F948C(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F94DC(_QWORD *a1, int *a2, int *a3)
{
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9584(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F95D4(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_DWORD *)v6;
      v6 += 4;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F967C(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F96CC(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9774(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F97C4(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F986C(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2081F98BC(uint64_t a1, char *a2)
{
  void **v4;
  char *v5;
  char *result;
  void *exception;
  char *v8;
  std::string v9;
  std::string v10;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = (char *)sub_207D1E770((char *)a1);
      sub_207C96EE8(&v9, v8);
      sub_207C96E8C("cannot use push_back() with ", &v9, &v10);
      sub_207D1E5F8(308, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v4 = *(void ***)(a1 + 8);
    v5 = (char *)v4[1];
    if (v5 < v4[2])
      goto LABEL_3;
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (void **)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = (char *)v4[1];
    if (v5 < v4[2])
    {
LABEL_3:
      *v5 = *a2;
      *((_QWORD *)v5 + 1) = *((_QWORD *)a2 + 1);
      *a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      result = v5 + 16;
      v4[1] = v5 + 16;
      return result;
    }
  }
  result = sub_207D1D328(v4, a2);
  v4[1] = result;
  return result;
}

void sub_2081F99E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2081F9A54(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_207D159B0();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9AFC(_Unwind_Exception *exception_object)
{
  uint64_t **v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F9B4C(_QWORD *a1, char *a2, char *a3)
{
  unint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9BEC(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F9C3C(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unsigned __int8 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 >> 60)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(16 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * v4]; v6 != a3; v7 += 2)
    {
      *(_BYTE *)v7 = 0;
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9CDC(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F9D2C(_QWORD *a1, __int16 *a2, __int16 *a3)
{
  uint64_t v4;
  __int16 *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9DD0(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F9E20(_QWORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v4;
  unsigned __int16 *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(8 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 1)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9EC4(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081F9F14(_QWORD *a1, int *a2, int *a3)
{
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *v6++;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081F9FBC(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081FA00C(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  unsigned int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(4 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 2)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_DWORD *)v6;
      v6 += 4;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081FA0B4(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081FA104(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 5;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081FA1AC(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081FA1FC(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 6;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081FA2A4(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2081FA2F4(uint64_t a1, char *a2)
{
  void **v4;
  char *v5;
  char *result;
  void *exception;
  char *v8;
  std::string v9;
  std::string v10;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = (char *)sub_20809655C((char *)a1);
      sub_207C96EE8(&v9, v8);
      sub_207C96E8C("cannot use push_back() with ", &v9, &v10);
      sub_207D1E5F8(308, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v4 = *(void ***)(a1 + 8);
    v5 = (char *)v4[1];
    if (v5 < v4[2])
      goto LABEL_3;
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (void **)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = (char *)v4[1];
    if (v5 < v4[2])
    {
LABEL_3:
      *v5 = *a2;
      *((_QWORD *)v5 + 1) = *((_QWORD *)a2 + 1);
      *a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      result = v5 + 16;
      v4[1] = v5 + 16;
      return result;
    }
  }
  result = sub_20806E340(v4, a2);
  v4[1] = result;
  return result;
}

void sub_2081FA41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2081FA48C(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFF9)
      sub_20806DC18();
    v6 = a2;
    v7 = operator new(2 * v4);
    *a1 = v7;
    a1[1] = v7;
    for (a1[2] = &v7[2 * (v4 >> 3)]; v6 != a3; v7 += 2)
    {
      v7[1] = 0;
      v8 = *(_QWORD *)v6;
      v6 += 8;
      *(_BYTE *)v7 = 7;
      v7[1] = v8;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_2081FA534(_Unwind_Exception *exception_object)
{
  void ****v1;
  void ***v3;
  void ***v4;
  void ***v5;
  void ***v6;
  void ***v7;

  v3 = *v1;
  if (*v1)
  {
    v4 = v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = v4 - 1;
      do
      {
        v7 = v6 - 1;
        sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
        v6 -= 2;
      }
      while (v7 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

float sub_2081FA584(uint64_t *a1)
{
  int v1;
  float v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_208097518(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_207D21A34((void **)a1, (uint64_t)&__str);
  v2 = std::stof(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_2081FA644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081FA664(uint64_t *a1)
{
  int v1;
  double v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_208097518(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_207D21A34((void **)a1, (uint64_t)&__str);
  v2 = std::stod(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_2081FA720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081FA740(unint64_t a1, uint64_t a2)
{
  std::string::size_type *v4;
  std::string::size_type v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  uint64_t *v9;
  int v10;
  std::string::size_type size;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  double result;
  void *exception;
  char *v18;
  std::string v19;
  unint64_t v20;
  std::string v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t v25;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v18 = (char *)sub_207D1E770((char *)a1);
    sub_207C96EE8(&v19, v18);
    sub_207C96E8C("type must be array, but is ", &v19, &v21);
    sub_207D1E5F8(302, (uint64_t)&v21, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  v24 = 0;
  v23 = 0uLL;
  v4 = *(std::string::size_type **)(a1 + 8);
  v5 = v4[1];
  v6 = v5 - *v4;
  if (v5 == *v4)
  {
    v7 = 0;
    v8 = v4[1];
  }
  else
  {
    if (v6 < 0)
      sub_207CA420C();
    v7 = (char *)operator new((unint64_t)v6 >> 1);
    *(_QWORD *)&v23 = v7;
    *((_QWORD *)&v23 + 1) = v7;
    v24 = &v7[8 * (v6 >> 4)];
    v8 = *v4;
    v5 = v4[1];
  }
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = a1;
  v21.__r_.__value_.__r.__words[2] = v8;
  v22 = 0x8000000000000000;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = a1;
  v19.__r_.__value_.__r.__words[2] = v5;
  v20 = 0x8000000000000000;
  while (!sub_207D23444((unsigned __int8 **)&v21, (unsigned __int8 **)&v19))
  {
    v9 = (uint64_t *)sub_207D21398((uint64_t)&v21);
    v25 = 0;
    sub_208097518(v9, (double *)&v25);
    v7 = sub_2081FA9BC((void **)&v23, v7, &v25) + 8;
    v10 = *v21.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v21.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      size = v21.__r_.__value_.__l.__size_;
      v12 = *(_QWORD **)(v21.__r_.__value_.__l.__size_ + 8);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = *(_QWORD **)(size + 16);
          v14 = *v13 == size;
          size = (std::string::size_type)v13;
        }
        while (!v14);
      }
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    }
    else
    {
      ++v22;
    }
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v23;
  *(_OWORD *)a2 = v23;
  *(_QWORD *)(a2 + 16) = v24;
  return result;
}

void sub_2081FA92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2081FA984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

char *sub_2081FA9BC(void **a1, _BYTE *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 8);
    v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = v14 + v6 + 8;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x58)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v45 = (v16 >> 3) + 1;
          v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v46);
          v17 = (_QWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(8 * v12 + 8 * v8 + v6 + 16);
          v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 4;
          }
          while (v49);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v12), v9, v11);
    *(_QWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v18 >> 61)
    sub_207CA420C();
  v20 = v10 - v6;
  if (v20 >> 2 > v18)
    v18 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 61)
      sub_207CA3AB8();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v8];
    v24 = &v22[8 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 2;
    if (v44 >> 61)
      sub_207CA3AB8();
    v23 = (char *)operator new(8 * v44);
    v24 = &v23[8 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[8 * v44];
      v26 = (char *)*a1;
      *(_QWORD *)v23 = *a3;
      v27 = v23 + 8;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 8 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_QWORD *)v23 = *a3;
  v27 = v23 + 8;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v26 - 8;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x58)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_2081FAD14(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float sub_2081FAD2C(uint64_t *a1)
{
  int v1;
  float v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_208097A1C(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_208097C8C((void **)a1, (uint64_t)&__str);
  v2 = std::stof(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_2081FADEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081FAE0C(uint64_t *a1)
{
  int v1;
  double v2;
  std::string __str;

  v1 = *(unsigned __int8 *)a1;
  if ((v1 - 5) <= 2)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_208097A1C(a1, (double *)&__str);
    return *(double *)&__str.__r_.__value_.__l.__data_;
  }
  if (v1 != 3)
    return NAN;
  memset(&__str, 0, sizeof(__str));
  sub_208097C8C((void **)a1, (uint64_t)&__str);
  v2 = std::stod(&__str, 0);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v2;
  operator delete(__str.__r_.__value_.__l.__data_);
  return v2;
}

void sub_2081FAEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_2081FAEE8(unint64_t a1, uint64_t a2)
{
  std::string::size_type *v4;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  double result;
  void *exception;
  char *v14;
  std::string v15;
  unint64_t v16;
  std::string v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v14 = (char *)sub_20809655C((char *)a1);
    sub_207C96EE8(&v15, v14);
    sub_207C96E8C("type must be array, but is ", &v15, &v17);
    sub_207D1E5F8(302, (uint64_t)&v17, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  v20 = 0;
  v19 = 0uLL;
  v4 = *(std::string::size_type **)(a1 + 8);
  v6 = *v4;
  v5 = v4[1];
  v7 = v5 - *v4;
  if (v5 == *v4)
  {
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      sub_207CA420C();
    v8 = (char *)operator new((unint64_t)v7 >> 1);
    *(_QWORD *)&v19 = v8;
    *((_QWORD *)&v19 + 1) = v8;
    v20 = &v8[8 * (v7 >> 4)];
  }
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = a1;
  v17.__r_.__value_.__r.__words[2] = v6;
  v18 = 0x8000000000000000;
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = a1;
  v15.__r_.__value_.__r.__words[2] = v5;
  v16 = 0x8000000000000000;
  while (!sub_208098050((unsigned __int8 **)&v17, (unsigned __int8 **)&v15))
  {
    v9 = (uint64_t *)sub_208098150((uint64_t)&v17);
    v21 = 0;
    sub_208097A1C(v9, (double *)&v21);
    v8 = sub_2081FA9BC((void **)&v19, v8, &v21) + 8;
    v10 = *v17.__r_.__value_.__l.__data_;
    if (v10 == 2)
    {
      v17.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v10 == 1)
    {
      v17.__r_.__value_.__l.__size_ += 40;
    }
    else
    {
      ++v18;
    }
  }
  v11 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v11;
    operator delete(v11);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  *(_QWORD *)(a2 + 16) = v20;
  return result;
}

void sub_2081FB0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2081FB0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v14);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

_QWORD *sub_2081FB134(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *result;
  _QWORD *v16;
  std::string __p;
  unsigned int v18;
  uint64_t v19;

  sub_2081FB2AC();
  v4 = qword_2545309A8;
  if (!qword_2545309A8)
    goto LABEL_12;
  v5 = *a2;
  v6 = &qword_2545309A8;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = (uint64_t *)v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != &qword_2545309A8 && v5 >= *((_DWORD *)v6 + 8))
  {
    sub_2081FB2AC();
    return sub_207CBAB98(a1, v6[5], v6[6]);
  }
  else
  {
LABEL_12:
    sub_2081FB2AC();
    v18 = *a2;
    v10 = sub_207CBAB98(a1, (uint64_t)"Unknown pixel format '", 22);
    sub_2081FBD2C((uint64_t)&v19, (uint64_t)&v18, 0, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v13 = sub_207CBAB98(v10, (uint64_t)p_p, size);
    sub_207CBAB98(v13, (uint64_t)"' (=", 4);
    v14 = (_QWORD *)std::ostream::operator<<();
    result = sub_207CBAB98(v14, (uint64_t)")", 1);
    v16 = result;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      return v16;
    }
  }
  return result;
}

void sub_2081FB290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081FB2AC()
{
  unsigned __int8 v0;
  uint64_t v1[3];
  int v2;
  const char *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  int v59;
  const char *v60;
  uint64_t v61;
  int v62;
  const char *v63;
  uint64_t v64;
  int v65;
  const char *v66;
  uint64_t v67;
  int v68;
  const char *v69;
  uint64_t v70;
  int v71;
  const char *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  uint64_t v76;
  int v77;
  const char *v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  int v83;
  const char *v84;
  uint64_t v85;
  int v86;
  const char *v87;
  uint64_t v88;
  int v89;
  const char *v90;
  uint64_t v91;
  int v92;
  const char *v93;
  uint64_t v94;
  int v95;
  const char *v96;
  uint64_t v97;
  int v98;
  const char *v99;
  uint64_t v100;
  int v101;
  const char *v102;
  uint64_t v103;
  int v104;
  const char *v105;
  uint64_t v106;
  int v107;
  const char *v108;
  uint64_t v109;
  int v110;
  const char *v111;
  uint64_t v112;
  int v113;
  const char *v114;
  uint64_t v115;
  int v116;
  const char *v117;
  uint64_t v118;
  int v119;
  const char *v120;
  uint64_t v121;
  int v122;
  const char *v123;
  uint64_t v124;
  int v125;
  const char *v126;
  uint64_t v127;
  int v128;
  const char *v129;
  uint64_t v130;
  int v131;
  const char *v132;
  uint64_t v133;
  int v134;
  const char *v135;
  uint64_t v136;
  int v137;
  const char *v138;
  uint64_t v139;
  int v140;
  const char *v141;
  uint64_t v142;
  int v143;
  const char *v144;
  uint64_t v145;
  int v146;
  const char *v147;
  uint64_t v148;
  int v149;
  const char *v150;
  uint64_t v151;
  int v152;
  const char *v153;
  uint64_t v154;
  int v155;
  const char *v156;
  uint64_t v157;
  int v158;
  const char *v159;
  uint64_t v160;
  int v161;
  const char *v162;
  uint64_t v163;
  int v164;
  const char *v165;
  uint64_t v166;
  int v167;
  const char *v168;
  uint64_t v169;
  int v170;
  const char *v171;
  uint64_t v172;
  int v173;
  const char *v174;
  uint64_t v175;
  int v176;
  const char *v177;
  uint64_t v178;
  int v179;
  const char *v180;
  uint64_t v181;
  int v182;
  const char *v183;
  uint64_t v184;
  int v185;
  const char *v186;
  uint64_t v187;
  int v188;
  const char *v189;
  uint64_t v190;
  int v191;
  const char *v192;
  uint64_t v193;
  int v194;
  const char *v195;
  uint64_t v196;
  int v197;
  const char *v198;
  uint64_t v199;
  int v200;
  const char *v201;
  uint64_t v202;
  int v203;
  const char *v204;
  uint64_t v205;
  int v206;
  const char *v207;
  uint64_t v208;
  int v209;
  const char *v210;
  uint64_t v211;
  int v212;
  const char *v213;
  uint64_t v214;
  int v215;
  const char *v216;
  uint64_t v217;
  int v218;
  const char *v219;
  uint64_t v220;
  int v221;
  const char *v222;
  uint64_t v223;
  int v224;
  const char *v225;
  uint64_t v226;
  int v227;
  const char *v228;
  uint64_t v229;
  int v230;
  const char *v231;
  uint64_t v232;
  int v233;
  const char *v234;
  uint64_t v235;
  int v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254530848);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254530848))
    {
      LODWORD(v1[0]) = 1278226488;
      v1[1] = (uint64_t)"OneComponent8";
      v1[2] = 13;
      v2 = 24;
      v3 = "24RGB";
      v4 = 5;
      v5 = 32;
      v6 = "32ARGB";
      v7 = 6;
      v8 = 1111970369;
      v9 = "32BGRA";
      v10 = 6;
      v11 = 1647719521;
      v12 = "64ARGB";
      v13 = 6;
      v14 = 1647589490;
      v15 = "48RGB";
      v16 = 5;
      v17 = 1647392359;
      v18 = "16Gray";
      v19 = 6;
      v20 = 875704438;
      v21 = "420YpCbCr8BiPlanarVideoRange";
      v22 = 28;
      v23 = 875704422;
      v24 = "420YpCbCr8BiPlanarFullRange";
      v25 = 27;
      v26 = 875836534;
      v27 = "444YpCbCr8BiPlanarVideoRange";
      v28 = 28;
      v29 = 875836518;
      v30 = "444YpCbCr8BiPlanarFullRange";
      v31 = 27;
      v32 = 843264056;
      v33 = "TwoComponent8";
      v34 = 13;
      v35 = 1278226536;
      v36 = "OneComponent16Half";
      v37 = 18;
      v38 = 1278226534;
      v39 = "OneComponent32Float";
      v40 = 19;
      v41 = 843264104;
      v42 = "TwoComponent16Half";
      v43 = 18;
      v44 = 843264102;
      v45 = "TwoComponent32Float";
      v46 = 19;
      v47 = 1380411457;
      v48 = "64RGBAHalf";
      v49 = 10;
      v50 = 1380410945;
      v51 = "128RGBAFloat";
      v52 = 12;
      v53 = 1751411059;
      v54 = "DisparityFloat16";
      v55 = 16;
      v56 = 1717856627;
      v57 = "DisparityFloat32";
      v58 = 16;
      v59 = 1751410032;
      v60 = "DepthFloat16";
      v61 = 12;
      v62 = 1717855600;
      v63 = "DepthFloat32";
      v64 = 12;
      v65 = 842285639;
      v66 = "24BGR";
      v67 = 5;
      v68 = 1380401729;
      v69 = "32RGBA";
      v70 = 6;
      v71 = 1094862674;
      v72 = "32ABGR";
      v73 = 6;
      v74 = 1278226742;
      v75 = "OneComponent16";
      v76 = 14;
      v77 = 843264310;
      v78 = "TwoComponent16";
      v79 = 14;
      v80 = 1;
      v81 = "1Monochrome";
      v82 = 11;
      v83 = 2;
      v84 = "2Indexed";
      v85 = 8;
      v86 = 4;
      v87 = "4Indexed";
      v88 = 8;
      v89 = 8;
      v90 = "8Indexed";
      v91 = 8;
      v92 = 33;
      v93 = "1IndexedGray_WhiteIsZero";
      v94 = 24;
      v95 = 34;
      v96 = "2IndexedGray_WhiteIsZero";
      v97 = 24;
      v98 = 36;
      v99 = "4IndexedGray_WhiteIsZero";
      v100 = 24;
      v101 = 40;
      v102 = "8IndexedGray_WhiteIsZero";
      v103 = 24;
      v104 = 16;
      v105 = "16BE555";
      v106 = 7;
      v107 = 1278555445;
      v108 = "16LE555";
      v109 = 7;
      v110 = 892679473;
      v111 = "16LE5551";
      v112 = 8;
      v113 = 1110783541;
      v114 = "16BE565";
      v115 = 7;
      v116 = 1278555701;
      v117 = "16LE565";
      v118 = 7;
      v119 = 1815491698;
      v120 = "64RGBALE";
      v121 = 8;
      v122 = 1647522401;
      v123 = "32AlphaGray";
      v124 = 11;
      v125 = 1378955371;
      v126 = "30RGB";
      v127 = 5;
      v128 = 846624121;
      v129 = "422YpCbCr8";
      v130 = 10;
      v131 = 1983131704;
      v132 = "4444YpCbCrA8";
      v133 = 12;
      v134 = 1916022840;
      v135 = "4444YpCbCrA8R";
      v136 = 13;
      v137 = 2033463352;
      v138 = "4444AYpCbCr8";
      v139 = 12;
      v140 = 2033463606;
      v141 = "4444AYpCbCr16";
      v142 = 13;
      v143 = 1983066168;
      v144 = "444YpCbCr8";
      v145 = 10;
      v146 = 1983000886;
      v147 = "422YpCbCr16";
      v148 = 11;
      v149 = 1983000880;
      v150 = "422YpCbCr10";
      v151 = 11;
      v152 = 1983131952;
      v153 = "444YpCbCr10";
      v154 = 11;
      v155 = 2033463856;
      v156 = "420YpCbCr8Planar";
      v157 = 16;
      v158 = 1714696752;
      v159 = "420YpCbCr8PlanarFullRange";
      v160 = 25;
      v161 = 1630697081;
      v162 = "422YpCbCr_4A_8BiPlanar";
      v163 = 22;
      v164 = 875704950;
      v165 = "422YpCbCr8BiPlanarVideoRange";
      v166 = 28;
      v167 = 875704934;
      v168 = "422YpCbCr8BiPlanarFullRange";
      v169 = 27;
      v170 = 2037741171;
      v171 = "422YpCbCr8_yuvs";
      v172 = 15;
      v173 = 2037741158;
      v174 = "422YpCbCr8FullRange";
      v175 = 19;
      v176 = 1999843442;
      v177 = "30RGBLEPackedWideGamut";
      v178 = 22;
      v179 = 1815162994;
      v180 = "ARGB2101010LEPacked";
      v181 = 19;
      v182 = 1999908961;
      v183 = "40ARGBLEWideGamut";
      v184 = 17;
      v185 = 1999908973;
      v186 = "40ARGBLEWideGamutPremultiplied";
      v187 = 30;
      v188 = 1278226736;
      v189 = "OneComponent10";
      v190 = 14;
      v191 = 1278226738;
      v192 = "OneComponent12";
      v193 = 14;
      v194 = 1735549492;
      v195 = "14Bayer_GRBG";
      v196 = 12;
      v197 = 1919379252;
      v198 = "14Bayer_RGGB";
      v199 = 12;
      v200 = 1650943796;
      v201 = "14Bayer_BGGR";
      v202 = 12;
      v203 = 1734505012;
      v204 = "14Bayer_GBRG";
      v205 = 12;
      v206 = 1751411059;
      v207 = "DisparityFloat16";
      v208 = 16;
      v209 = 1717856627;
      v210 = "DisparityFloat32";
      v211 = 16;
      v212 = 2016686640;
      v213 = "420YpCbCr10BiPlanarVideoRange";
      v214 = 29;
      v215 = 2016686642;
      v216 = "422YpCbCr10BiPlanarVideoRange";
      v217 = 29;
      v218 = 2016687156;
      v219 = "444YpCbCr10BiPlanarVideoRange";
      v220 = 29;
      v221 = 2019963440;
      v222 = "420YpCbCr10BiPlanarFullRange";
      v223 = 28;
      v224 = 2019963442;
      v225 = "422YpCbCr10BiPlanarFullRange";
      v226 = 28;
      v227 = 2019963956;
      v228 = "444YpCbCr10BiPlanarFullRange";
      v229 = 28;
      v230 = 1982882104;
      v231 = "420YpCbCr8VideoRange_8A_TriPlanar";
      v232 = 33;
      v233 = 1651519798;
      v234 = "16VersatileBayer";
      v235 = 16;
      v236 = 1651521076;
      v237 = "64RGBA_DownscaledProResRAW";
      v238 = 26;
      sub_2081FBB98(v1, 80);
      __cxa_atexit((void (*)(void *))sub_2081FBB70, &qword_2545309A0, &dword_207C77000);
      __cxa_guard_release(&qword_254530848);
    }
  }
}

void sub_2081FBB58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530848);
  _Unwind_Resume(a1);
}

uint64_t sub_2081FBB70(uint64_t a1)
{
  sub_207F04340(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *sub_2081FBB98(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  __int128 v14;

  qword_2545309B0 = 0;
  qword_2545309A8 = 0;
  qword_2545309A0 = (uint64_t)&qword_2545309A8;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[3 * a2];
LABEL_6:
    v6 = &qword_2545309A8;
LABEL_10:
    if (v3)
    {
      v10 = v6 + 1;
      if (v6[1])
        goto LABEL_24;
    }
    else
    {
LABEL_20:
      v10 = &qword_2545309A8;
      v6 = &qword_2545309A8;
    }
LABEL_21:
    v13 = operator new(0x38uLL);
    v14 = *(_OWORD *)v2;
    v13[6] = v2[2];
    *((_OWORD *)v13 + 2) = v14;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v6;
    *v10 = (uint64_t)v13;
    if (*(_QWORD *)qword_2545309A0)
    {
      qword_2545309A0 = *(_QWORD *)qword_2545309A0;
      v13 = (_QWORD *)*v10;
    }
    result = sub_207CC24B4((uint64_t *)qword_2545309A8, v13);
    ++qword_2545309B0;
LABEL_24:
    while (1)
    {
      v2 += 3;
      if (v2 == v4)
        break;
      v3 = qword_2545309A8;
      if ((uint64_t *)qword_2545309A0 == &qword_2545309A8)
        goto LABEL_6;
      v5 = qword_2545309A8;
      if (qword_2545309A8)
      {
        do
        {
          v6 = (uint64_t *)v5;
          v5 = *(_QWORD *)(v5 + 8);
        }
        while (v5);
      }
      else
      {
        v7 = &qword_2545309A8;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      v9 = *(_DWORD *)v2;
      if (*((_DWORD *)v6 + 8) < *(_DWORD *)v2)
        goto LABEL_10;
      if (!qword_2545309A8)
        goto LABEL_20;
      v11 = qword_2545309A8;
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t *)v11;
          v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v9)
            break;
          v11 = *v6;
          v10 = v6;
          if (!*v6)
            goto LABEL_21;
        }
        if (v12 >= v9)
          break;
        v11 = v6[1];
        if (!v11)
        {
          v10 = v6 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_2081FBD18(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207F04340(v1);
  _Unwind_Resume(a1);
}

void sub_2081FBD2C(uint64_t a1@<X0>, uint64_t a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  std::string::value_type __s[8];
  char v17;

  v10 = a1 - a2;
  if (a1 == a2)
    v11 = 0;
  else
    v11 = a1 - a2;
  if (v10 <= 1)
    v12 = 1;
  else
    v12 = a1 - a2;
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v11 + (v12 - 1) * a4);
  if (v10 >= 1)
  {
    v14 = *(unsigned __int8 *)(a1 - 1);
    v13 = a1 - 1;
    *(_QWORD *)__s = v14;
    v17 = 1;
    std::string::append(a5, __s, 1uLL);
    if (v17 < 0)
    {
      operator delete(*(void **)__s);
      if ((unint64_t)v10 < 2)
        return;
    }
    else if ((unint64_t)v10 < 2)
    {
      return;
    }
    while (v13 != a2)
    {
      std::string::append(a5, a3, a4);
      v15 = *(unsigned __int8 *)--v13;
      *(_QWORD *)__s = v15;
      v17 = 1;
      std::string::append(a5, __s, 1uLL);
      if (v17 < 0)
        operator delete(*(void **)__s);
    }
  }
}

void sub_2081FBE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081FBE78(uint64_t *a1, void **a2, unsigned int a3, unsigned int a4)
{
  int v7;
  size_t v8;
  void *v10;
  _BYTE *v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;

  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v8
    && (v7 >= 0 ? (v10 = a2) : (v10 = *a2),
        (v11 = memchr(v10, 46, v8), v12 = v11 - (_BYTE *)v10, v11) ? (v13 = v12 == -1) : (v13 = 1),
        !v13 ? (v14 = a4 > v12) : (v14 = 0),
        v14))
  {
    v21 = a4 - v12;
    *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = v21;
    sub_207CBAB98(a1, (uint64_t)&unk_20822A0DF, 0);
    v15 = a3 - v21;
  }
  else
  {
    v15 = a3;
  }
  v16 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = v15;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v16 - 24) + 8) & 0xFFFFFF4F | 0x20;
  v17 = *((char *)a2 + 23);
  if (v17 >= 0)
    v18 = (uint64_t)a2;
  else
    v18 = (uint64_t)*a2;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)a2 + 23);
  else
    v19 = (uint64_t)a2[1];
  return sub_207CBAB98(a1, v18, v19);
}

void sub_2081FBF78(int a1, unint64_t a2, unint64_t a3)
{
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v3 = " (ENOMEM)";
  if (a1 != 12)
    v3 = (const char *)&unk_20822A141;
  v6 = v3;
  sub_2081FC044("posix_memalign failed to allocate ", &v9, (std::string *)" bytes with alignment ", &v8, (std::string *)": error code ", &v10, (std::string *)&v6);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v7;
  else
    v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  else
    size = v7.__r_.__value_.__l.__size_;
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/src/ArrayBuffer.cpp", 37, (uint64_t)&unk_20822A141, 0, (uint64_t)v4, size, (void (*)(void **))sub_208216974);
  std::string::~string(&v7);
  abort();
}

void sub_2081FC028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081FC044(char *__s, unint64_t *a2, std::string *a3, unint64_t *a4, std::string *a5, int *a6, std::string *a7)
{
  uint64_t result;
  _DWORD v14[6];
  int v15;
  std::string v16;
  std::string **v17;
  std::string *v18;
  std::string *v19;
  _DWORD *v20;
  std::string *v21;
  std::string *v22;

  v15 = 0;
  sub_207F1173C(v14, __s);
  std::to_string(&v16, *a2);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_207CA9F48();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C08DC18[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a3;
  v20 = v14;
  v21 = a3;
  v22 = a3;
  if (v15 == -1)
    sub_207CA9F48();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C08DC30[v15])(&v16, v14);
  std::to_string(&v16, *a4);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_207CA9F48();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C08DC18[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a5;
  v20 = v14;
  v21 = a5;
  v22 = a5;
  if (v15 == -1)
    sub_207CA9F48();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C08DC48[v15])(&v16, v14);
  std::to_string(&v16, *a6);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_207CA9F48();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C08DC18[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (a7->__r_.__value_.__r.__words[0])
    {
LABEL_12:
      v18 = (std::string *)v14;
      v19 = a7;
      v20 = v14;
      v21 = a7;
      v22 = a7;
      if (v15 != -1)
      {
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
        ((void (*)(std::string *, _DWORD *))off_24C08DC60[v15])(&v16, v14);
        goto LABEL_17;
      }
LABEL_26:
      sub_207CA9F48();
    }
  }
  else if (a7->__r_.__value_.__r.__words[0])
  {
    goto LABEL_12;
  }
  v18 = (std::string *)v14;
  v19 = (std::string *)"nullptr";
  v20 = v14;
  v21 = (std::string *)"nullptr";
  v22 = (std::string *)"nullptr";
  if (v15 == -1)
    goto LABEL_26;
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C08DC00[v15])(&v16, v14);
LABEL_17:
  if (v15 == -1)
    sub_207CA9F48();
  v18 = &v16;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C08DC78[v15])(&v18, v14);
  if (v15 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C08DBE8[v15])(&v18, v14);
  return result;
}

void sub_2081FC348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2081FC3A4@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[3];
  _QWORD v22[2];
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  void *__p;
  char v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE v31[9];

  sub_207CA2878((uint64_t)v20);
  v4 = (char *)v21 + *(_QWORD *)(v21[0] - 24);
  v5 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 3) = 0;
  v31[0] = 91;
  sub_207CBAB98(v21, (uint64_t)v31, 1);
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    if (v6)
      v9 = (int)v6;
    else
      v9 = 4;
    do
    {
      if (a1[1])
      {
        v10 = 0;
        do
        {
          *(_QWORD *)((char *)v22 + *(_QWORD *)(v21[0] - 24)) = v9;
          std::ostream::operator<<();
          v11 = a1[1];
          if (v10 != v11 - 1)
          {
            v31[0] = 44;
            sub_207CBAB98(v21, (uint64_t)v31, 1);
            v11 = a1[1];
          }
          ++v10;
        }
        while (v10 < v11);
        v7 = *a1;
      }
      if (v8 != v7 - 1)
      {
        sub_207CBAB98(v21, (uint64_t)";\n ", 3);
        v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  sub_207CBAB98(v21, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)&v21[1] + *(_QWORD *)(v21[0] - 24)) = v5;
  if ((v29 & 0x10) != 0)
  {
    v13 = v28;
    if (v28 < v25)
    {
      v28 = v25;
      v13 = v25;
    }
    v14 = v24;
    v12 = v13 - (_QWORD)v24;
    if (v13 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v12 = 0;
      a2[23] = 0;
      goto LABEL_27;
    }
    v14 = (const void *)v22[0];
    v12 = v23 - v22[0];
    if ((unint64_t)(v23 - v22[0]) >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_207C95C50();
  }
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    *((_QWORD *)a2 + 1) = v12;
    *((_QWORD *)a2 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)a2 = v17;
    a2 = v17;
    goto LABEL_26;
  }
  a2[23] = v12;
  if (v12)
LABEL_26:
    memmove(a2, v14, v12);
LABEL_27:
  a2[v12] = 0;
  v20[0] = *MEMORY[0x24BEDB7F0];
  v18 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v21[0] = v18;
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD027B8](&v30);
}

void sub_2081FC650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081FC664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2081FC678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081FC68C@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  char v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *__dst;
  int v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  void *__p;
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void **v58;
  size_t v59;
  int64_t v60;
  std::string __b;
  std::string v62;
  __int128 v63;
  int64_t v64;

  sub_207CA2878((uint64_t)v46);
  v4 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  v45 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v7 = v6 + 2;
    else
      v7 = v5;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 + ~v6;
    v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v11 = v8;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v6);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v6 >= 0x17)
  {
    v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v18 = v6 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    v59 = v6;
    v60 = v19 | 0x8000000000000000;
    v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v60) = v6;
  v17 = (void **)&v58;
  if (v6)
LABEL_21:
    memset(v17, 32, v6);
  *((_BYTE *)v17 + v6) = 0;
  if (v60 >= 0)
    v20 = (const std::string::value_type *)&v58;
  else
    v20 = (const std::string::value_type *)v58;
  if (v60 >= 0)
    v21 = HIBYTE(v60);
  else
    v21 = v59;
  v22 = std::string::append(&v62, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v64 = v22->__r_.__value_.__r.__words[2];
  v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_30:
  __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
LABEL_31:
  *(_QWORD *)((char *)v49 + *(_QWORD *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_207CBAB98(&v47, (uint64_t)&v62, 1);
  v24 = *a1;
  if (!*a1)
    goto LABEL_54;
  v25 = 0;
  v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1])
      goto LABEL_52;
    v27 = 0;
    do
    {
      v28 = *(float *)(*((_QWORD *)a1 + 2) + 4 * (v25 + a1[2] * v27));
      v29 = v47;
      v30 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
      if ((v30[9] & 1) != 0)
      {
        if (v28 != 0.0)
        {
          *((_QWORD *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
          *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((_QWORD *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) = *(_DWORD *)((_BYTE *)v48 + *(_QWORD *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
        *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0)
        v31 = &v63;
      else
        v31 = (__int128 *)v63;
      if (v64 >= 0)
        v32 = HIBYTE(v64);
      else
        v32 = *((_QWORD *)&v63 + 1);
      sub_207CBAB98(&v47, (uint64_t)v31, v32);
LABEL_49:
      v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_207CBAB98(&v47, (uint64_t)&v62, 1);
        v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_207CBAB98(&v47, (uint64_t)";\n ", 3);
      v24 = *a1;
    }
    if (++v25 < v24)
      continue;
    break;
  }
LABEL_54:
  sub_207CBAB98(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(_QWORD *)(v47 - 24)) = v45;
  v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    v35 = v56;
    if ((v56 & 0x10) != 0)
      goto LABEL_62;
LABEL_56:
    if ((v35 & 8) == 0)
    {
      v36 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_72;
    }
    v38 = (const void *)v49[0];
    v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_65;
LABEL_76:
    sub_207C95C50();
  }
  v35 = v56;
  if ((v56 & 0x10) == 0)
    goto LABEL_56;
LABEL_62:
  v37 = v55;
  if (v55 < v52)
  {
    v55 = v52;
    v37 = v52;
  }
  v38 = v51;
  v36 = v37 - (_QWORD)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_76;
LABEL_65:
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *__dst = v41;
    v34 = v41;
    goto LABEL_71;
  }
  *((_BYTE *)__dst + 23) = v36;
  if (v36)
LABEL_71:
    memmove(v34, v38, v36);
LABEL_72:
  *((_BYTE *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47 = v42;
  v48[0] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD027B8](&v57);
}

void sub_2081FCC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2081FCCD8@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  double v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  char v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *__dst;
  int v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  void *__p;
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void **v58;
  size_t v59;
  int64_t v60;
  std::string __b;
  std::string v62;
  __int128 v63;
  int64_t v64;

  sub_207CA2878((uint64_t)v46);
  v4 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  v45 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v7 = v6 + 2;
    else
      v7 = v5;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 + ~v6;
    v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v11 = v8;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v6);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v6 >= 0x17)
  {
    v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v18 = v6 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    v59 = v6;
    v60 = v19 | 0x8000000000000000;
    v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v60) = v6;
  v17 = (void **)&v58;
  if (v6)
LABEL_21:
    memset(v17, 32, v6);
  *((_BYTE *)v17 + v6) = 0;
  if (v60 >= 0)
    v20 = (const std::string::value_type *)&v58;
  else
    v20 = (const std::string::value_type *)v58;
  if (v60 >= 0)
    v21 = HIBYTE(v60);
  else
    v21 = v59;
  v22 = std::string::append(&v62, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v64 = v22->__r_.__value_.__r.__words[2];
  v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_30:
  __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
LABEL_31:
  *(_QWORD *)((char *)v49 + *(_QWORD *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_207CBAB98(&v47, (uint64_t)&v62, 1);
  v24 = *a1;
  if (!*a1)
    goto LABEL_54;
  v25 = 0;
  v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1])
      goto LABEL_52;
    v27 = 0;
    do
    {
      v28 = *(double *)(*((_QWORD *)a1 + 2) + 8 * (v25 + a1[2] * v27));
      v29 = v47;
      v30 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
      if ((v30[9] & 1) != 0)
      {
        if (v28 != 0.0)
        {
          *((_QWORD *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
          *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((_QWORD *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) = *(_DWORD *)((_BYTE *)v48 + *(_QWORD *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
        *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0)
        v31 = &v63;
      else
        v31 = (__int128 *)v63;
      if (v64 >= 0)
        v32 = HIBYTE(v64);
      else
        v32 = *((_QWORD *)&v63 + 1);
      sub_207CBAB98(&v47, (uint64_t)v31, v32);
LABEL_49:
      v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_207CBAB98(&v47, (uint64_t)&v62, 1);
        v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_207CBAB98(&v47, (uint64_t)";\n ", 3);
      v24 = *a1;
    }
    if (++v25 < v24)
      continue;
    break;
  }
LABEL_54:
  sub_207CBAB98(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(_QWORD *)(v47 - 24)) = v45;
  v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    v35 = v56;
    if ((v56 & 0x10) != 0)
      goto LABEL_62;
LABEL_56:
    if ((v35 & 8) == 0)
    {
      v36 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_72;
    }
    v38 = (const void *)v49[0];
    v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_65;
LABEL_76:
    sub_207C95C50();
  }
  v35 = v56;
  if ((v56 & 0x10) == 0)
    goto LABEL_56;
LABEL_62:
  v37 = v55;
  if (v55 < v52)
  {
    v55 = v52;
    v37 = v52;
  }
  v38 = v51;
  v36 = v37 - (_QWORD)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_76;
LABEL_65:
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *__dst = v41;
    v34 = v41;
    goto LABEL_71;
  }
  *((_BYTE *)__dst + 23) = v36;
  if (v36)
LABEL_71:
    memmove(v34, v38, v36);
LABEL_72:
  *((_BYTE *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47 = v42;
  v48[0] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD027B8](&v57);
}

void sub_2081FD25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));
  sub_207CA29B0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2081FD320(double *a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v5;
  unint64_t v6;
  mach_timebase_info info;

  v2 = mach_absolute_time();
  v3 = atomic_load((unsigned __int8 *)&qword_2545308B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
  {
    mach_timebase_info(&info);
    LODWORD(v5) = info.numer;
    LODWORD(v6) = info.denom;
    *(double *)&qword_2545308A8 = (double)v5 / (double)v6;
    __cxa_guard_release(&qword_2545308B0);
  }
  return (double)(uint64_t)round(*(double *)&qword_2545308A8 * (double)v2) * 0.000000001 >= *a1;
}

void sub_2081FD3D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545308B0);
  _Unwind_Resume(a1);
}

_QWORD *sub_2081FD3EC(_QWORD *a1, char *a2, int a3, int a4, uint64_t *a5)
{
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v10 = operator new(0x28uLL);
  v11 = v10;
  v12 = a5[1];
  v19 = *a5;
  v20 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_2081FD838((uint64_t)v10, a2, 0, a3, a4, &v19);
  *a1 = v11;
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_2081FD4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_2081FD504(_QWORD *a1, char *a2, unsigned int a3, int a4, int a5, uint64_t *a6)
{
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v12 = operator new(0x28uLL);
  v13 = v12;
  v14 = a6[1];
  v21 = *a6;
  v22 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_2081FD838((uint64_t)v12, a2, a3 | 0x100000000, a5, a4, &v21);
  *a1 = v13;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_2081FD5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void sub_2081FD62C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::recursive_mutex *v5;
  uint64_t v6;

  if (*((_DWORD *)a1 + 6))
  {
    v4 = *a1;
    if (*a1)
    {
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
      return;
    }
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 78, (uint64_t)"work_queue_", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      v4 = *a1;
      goto LABEL_5;
    }
LABEL_11:
    abort();
  }
  v5 = (std::recursive_mutex *)a1[4];
  if (!v5)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 74, (uint64_t)"mtx_", 4, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_11;
    }
    v5 = (std::recursive_mutex *)a1[4];
  }
  std::recursive_mutex::lock(v5);
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
    sub_207CA408C();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  std::recursive_mutex::unlock(v5);
}

void sub_2081FD724(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2081FD738(uint64_t a1)
{
  std::recursive_mutex *v2;
  std::recursive_mutex *v3;

  if (*(_DWORD *)(a1 + 24) == 1)
  {
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 8));
      return;
    }
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 86, (uint64_t)"work_queue_", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 8));
      return;
    }
LABEL_11:
    abort();
  }
  v2 = *(std::recursive_mutex **)(a1 + 32);
  if (v2)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 32));
    std::recursive_mutex::unlock(v2);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 89, (uint64_t)"mtx_", 4, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_11;
    }
    v3 = *(std::recursive_mutex **)(a1 + 32);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

uint64_t sub_2081FD838(uint64_t a1, char *a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::recursive_mutex **v10;
  std::recursive_mutex *v11;
  std::recursive_mutex *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = *a6;
  v7 = a6[1];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = 0;
  v10 = (std::recursive_mutex **)(a1 + 32);
  *(_DWORD *)(a1 + 24) = a5;
  if (a5 == 1)
  {
    switch(a4)
    {
      case 0:
        sub_2081FDAE0(&v18, a2, 0, -10, *a6, 1, a3, SBYTE4(a3));
        goto LABEL_14;
      case 1:
        sub_2081FDAE0(&v18, a2, 0, -11, *a6, 1, a3, SBYTE4(a3));
        goto LABEL_14;
      case 2:
        sub_2081FDAE0(&v18, a2, 1u, -1, *a6, *a6 != 0, a3, SBYTE4(a3));
        goto LABEL_14;
      case 3:
        sub_2081FDAE0(&v18, a2, 2u, -1, *a6, *a6 != 0, a3, SBYTE4(a3));
        goto LABEL_14;
      case 4:
        sub_2081FDAE0(&v18, a2, 3u, -1, *a6, *a6 != 0, a3, SBYTE4(a3));
        goto LABEL_14;
      case 5:
        sub_2081FDAE0(&v18, a2, 4u, -1, *a6, *a6 != 0, a3, SBYTE4(a3));
LABEL_14:
        v14 = *(_QWORD **)a1;
        *(_QWORD *)a1 = v18;
        if (!v14)
          return a1;
        v15 = v14[1];
        v14[1] = 0;
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v16 = v14[1];
          v14[1] = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        v13 = v14;
        break;
      default:
        return a1;
    }
    goto LABEL_19;
  }
  v11 = (std::recursive_mutex *)operator new(0x40uLL);
  MEMORY[0x20BD023EC]();
  v12 = *v10;
  *v10 = v11;
  if (v12)
  {
    std::recursive_mutex::~recursive_mutex(v12);
LABEL_19:
    operator delete(v13);
  }
  return a1;
}

void sub_2081FD9F8(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;
  std::recursive_mutex **v3;

  sub_2081FDAAC(v3);
  sub_207C99D78(v2);
  sub_2081FDA48(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_2081FDA48(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[1];
    v2[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = v2[1];
      v2[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(v2);
  }
  return a1;
}

std::recursive_mutex **sub_2081FDAAC(std::recursive_mutex **a1)
{
  std::recursive_mutex *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::recursive_mutex::~recursive_mutex(v2);
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_2081FDAE0(_QWORD *a1, char *a2, unsigned int a3, int a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;

  if (a8)
  {
    sub_2081FE83C(a2, a5, &v12);
    v9 = v12;
    v10 = operator new(0x10uLL);
    *v10 = &off_24C082BF0;
    result = operator new(0x10uLL);
  }
  else
  {
    if (a6)
      sub_2081FE628(a2, 0, a3, a4, 1, a5, &v12);
    else
      sub_2081FE628(a2, 0, a3, a4, 0, a5, &v12);
    v9 = v12;
    v10 = operator new(0x10uLL);
    *v10 = &off_24C082BF0;
    result = operator new(0x10uLL);
  }
  *result = &off_24C08DD30;
  result[1] = v9;
  v10[1] = result;
  *a1 = v10;
  return result;
}

void sub_2081FDC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  sub_2081FEDF4(&a10);
  _Unwind_Resume(a1);
}

void sub_2081FDC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081FEDF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2081FDC68(int a1, _QWORD *__p)
{
  std::recursive_mutex *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (__p)
  {
    v3 = (std::recursive_mutex *)__p[4];
    __p[4] = 0;
    if (v3)
    {
      std::recursive_mutex::~recursive_mutex(v3);
      operator delete(v4);
    }
    v5 = (std::__shared_weak_count *)__p[2];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (_QWORD *)*__p;
    *__p = 0;
    if (v8)
    {
      v9 = v8[1];
      v8[1] = 0;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v10 = v8[1];
        v8[1] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      operator delete(v8);
    }
    operator delete(__p);
  }
}

void sub_2081FDD20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v4;
  int v5;
  const char *v6;
  size_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  void **p_dst;
  const char *v12;
  size_t v13;
  size_t v14;
  int v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  char *__dst;
  size_t v60;
  int64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  v2 = *a2;
  v58 = a2[1];
  if (*a2 != v58)
  {
    v4 = (uint64_t **)(a1 + 8);
    v57 = (uint64_t *)(a1 + 16);
    while (1)
    {
      v5 = *(char *)(v2 + 23);
      if (*(_BYTE *)(v2 + 32))
      {
        v6 = (const char *)v2;
        if (v5 < 0)
          v6 = *(const char **)v2;
        v7 = strlen(v6);
        if (v7 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_81;
        v8 = v7;
        v10 = *(_DWORD *)(v2 + 24);
        v9 = *(_DWORD *)(v2 + 28);
        if (v7 >= 0x17)
        {
          v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v17 = v7 | 7;
          v18 = v17 + 1;
          p_dst = (void **)operator new(v17 + 1);
          v60 = v8;
          v61 = v18 | 0x8000000000000000;
          __dst = (char *)p_dst;
        }
        else
        {
          HIBYTE(v61) = v7;
          p_dst = (void **)&__dst;
          if (!v7)
          {
LABEL_21:
            *((_BYTE *)p_dst + v8) = 0;
            if (v57 != sub_207D23544((uint64_t)v4, (const void **)&__dst))
            {
              sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/src/Channel/NodeTaskSchedulerPool.cpp", 70, (uint64_t)"", 0, (uint64_t)"Named scheduler already exists.", 31, (void (*)(void **))sub_208216974);
              abort();
            }
            if (v61 >= 0)
              v19 = (char *)&__dst;
            else
              v19 = __dst;
            v20 = operator new(0x20uLL);
            v21 = v20;
            v22 = *(_DWORD *)a1;
            v23 = *(_QWORD *)(a1 + 32);
            v24 = *(std::__shared_weak_count **)(a1 + 40);
            v20[1] = 0;
            v20[2] = 0;
            *v20 = off_24C08DCA0;
            v62 = v23;
            v63 = v24;
            if (v24)
            {
              p_shared_owners = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldxr(p_shared_owners);
              while (__stxr(v26 + 1, p_shared_owners));
            }
            sub_2081FD504(v20 + 3, v19, v9, v22, v10, &v62);
            if (v24)
            {
              v27 = (unint64_t *)&v24->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            v29 = sub_2081FE434(v4, (const void **)&__dst, (uint64_t)&__dst);
            v30 = (std::__shared_weak_count *)v29[8];
            v29[7] = (uint64_t)(v21 + 3);
            v29[8] = (uint64_t)v21;
            if (v30)
            {
              v31 = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            v33 = (std::__shared_weak_count *)sub_2081FE434(v4, (const void **)&__dst, (uint64_t)&__dst)[8];
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            if (SHIBYTE(v61) < 0)
            {
              operator delete(__dst);
              if (v33)
              {
LABEL_45:
                v36 = (unint64_t *)&v33->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
LABEL_78:
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
                goto LABEL_3;
              }
            }
            else if (v33)
            {
              goto LABEL_45;
            }
            goto LABEL_3;
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_21;
      }
      v12 = (const char *)v2;
      if (v5 < 0)
        v12 = *(const char **)v2;
      v13 = strlen(v12);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_81:
        sub_207C95C50();
      v14 = v13;
      v15 = *(_DWORD *)(v2 + 24);
      if (v13 >= 0x17)
        break;
      HIBYTE(v61) = v13;
      v16 = (void **)&__dst;
      if (v13)
        goto LABEL_51;
LABEL_52:
      *((_BYTE *)v16 + v14) = 0;
      if (v57 != sub_207D23544((uint64_t)v4, (const void **)&__dst))
      {
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/src/Channel/NodeTaskSchedulerPool.cpp", 56, (uint64_t)"", 0, (uint64_t)"Named scheduler already exists.", 31, (void (*)(void **))sub_208216974);
        abort();
      }
      if (v61 >= 0)
        v40 = (char *)&__dst;
      else
        v40 = __dst;
      v41 = operator new(0x20uLL);
      v42 = v41;
      v43 = *(_DWORD *)a1;
      v44 = *(_QWORD *)(a1 + 32);
      v45 = *(std::__shared_weak_count **)(a1 + 40);
      v41[1] = 0;
      v41[2] = 0;
      *v41 = off_24C08DCA0;
      v62 = v44;
      v63 = v45;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      sub_2081FD3EC(v41 + 3, v40, v15, v43, &v62);
      if (v45)
      {
        v48 = (unint64_t *)&v45->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v50 = sub_2081FE434(v4, (const void **)&__dst, (uint64_t)&__dst);
      v51 = (std::__shared_weak_count *)v50[8];
      v50[7] = (uint64_t)(v42 + 3);
      v50[8] = (uint64_t)v42;
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v33 = (std::__shared_weak_count *)sub_2081FE434(v4, (const void **)&__dst, (uint64_t)&__dst)[8];
      if (v33)
      {
        v54 = (unint64_t *)&v33->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      if (SHIBYTE(v61) < 0)
      {
        operator delete(__dst);
        if (v33)
        {
LABEL_76:
          v56 = (unint64_t *)&v33->__shared_owners_;
          do
            v37 = __ldaxr(v56);
          while (__stlxr(v37 - 1, v56));
          goto LABEL_78;
        }
      }
      else if (v33)
      {
        goto LABEL_76;
      }
LABEL_3:
      v2 += 40;
      if (v2 == v58)
        return;
    }
    v38 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v38 = v13 | 7;
    v39 = v38 + 1;
    v16 = (void **)operator new(v38 + 1);
    v60 = v14;
    v61 = v39 | 0x8000000000000000;
    __dst = (char *)v16;
LABEL_51:
    memmove(v16, v12, v14);
    goto LABEL_52;
  }
}

void sub_2081FE220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2081FE31C(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];

  v8 = operator new(8uLL);
  v9 = v8;
  v10 = *(_DWORD *)a1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(std::__shared_weak_count **)(a1 + 40);
  v17[0] = v11;
  v17[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  sub_2081FD3EC(v8, a2, a3, v10, v17);
  *a4 = v9;
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2081FE3EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2081FE434(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return (uint64_t *)v10;
        }
        else if (v16 >= v9)
        {
          return (uint64_t *)v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = (uint64_t *)operator new(0x48uLL);
          v21 = v20 + 4;
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)v21 = *(_OWORD *)a3;
          v21[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = (uint64_t *)operator new(0x48uLL);
  v21 = v20 + 4;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  sub_207CA40D8(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  v20[7] = 0;
  v20[8] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = (uint64_t)v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_207CC24B4(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v20;
}

void sub_2081FE5B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2081FE5C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2081FE5D8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2081FE5F8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 24);
  v1 = (_QWORD *)(a1 + 24);
  v2 = v3;
  *v1 = 0;
  if (v3)
    sub_2081FDC68((int)v1, v2);
}

void sub_2081FE614(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

uint64_t sub_2081FE628@<X0>(char *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v13;
  void *v14;
  const char *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  OS_os_workgroup *v23;
  uint64_t v24;
  dispatch_group_t v25;
  uint64_t result;
  unsigned int v27;
  NSObject *v29[2];

  v13 = operator new(0x40uLL);
  *v13 = off_24C08DD78;
  v14 = v13 + 1;
  if (a1)
    v15 = a1;
  else
    v15 = "dispatch_queue";
  v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v27 = a3;
    v18 = a4;
    v19 = a5;
    v20 = a7;
    v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v21 = v16 | 7;
    v22 = v21 + 1;
    v14 = operator new(v21 + 1);
    v13[2] = v17;
    v13[3] = v22 | 0x8000000000000000;
    v13[1] = v14;
    a7 = v20;
    a5 = v19;
    a4 = v18;
    a3 = v27;
    goto LABEL_11;
  }
  *((_BYTE *)v13 + 31) = v16;
  if (v16)
LABEL_11:
    memcpy(v14, v15, v17);
  *((_BYTE *)v14 + v17) = 0;
  v13[4] = 0;
  v13[5] = sub_2081FF354;
  v13[6] = 0;
  v13[7] = sub_2081FF360;
  *a7 = v13;
  if (a6)
    v23 = *(OS_os_workgroup **)(*(_QWORD *)a6 + 24);
  else
    v23 = 0;
  sub_2081FF73C(a1, a4, a2, a3, a5, v23, v29);
  v24 = v13[4];
  v13[4] = v29[0];
  if (v24)
    ((void (*)(void))v13[5])();
  v13[5] = v29[1];
  v25 = dispatch_group_create();
  result = v13[6];
  v13[6] = v25;
  if (result)
    result = ((uint64_t (*)(void))v13[7])();
  v13[7] = sub_2081FF360;
  return result;
}

void sub_2081FE7E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_2081FE808(v1);
  _Unwind_Resume(a1);
}

void sub_2081FE7F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2081FE808(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)sub_2081FEA18(v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_2081FE83C@<X0>(const char *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  void *v7;
  const char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  OS_os_workgroup *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  dispatch_group_t v17;
  uint64_t result;

  v6 = operator new(0x40uLL);
  *v6 = off_24C08DD78;
  v7 = v6 + 1;
  if (a1)
    v8 = a1;
  else
    v8 = "dispatch_queue";
  v9 = strlen(v8);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v7 = operator new(v11 + 1);
    v6[2] = v10;
    v6[3] = v12 | 0x8000000000000000;
    v6[1] = v7;
    goto LABEL_11;
  }
  *((_BYTE *)v6 + 31) = v9;
  if (v9)
LABEL_11:
    memcpy(v7, v8, v10);
  *((_BYTE *)v7 + v10) = 0;
  v6[4] = 0;
  v6[5] = sub_2081FF354;
  v6[6] = 0;
  v6[7] = sub_2081FF360;
  *a3 = v6;
  if (a2)
    v13 = *(OS_os_workgroup **)(*(_QWORD *)a2 + 24);
  else
    v13 = 0;
  v14 = dispatch_queue_create(a1, 0);
  v15 = sub_2081FF86C(a1);
  dispatch_workloop_set_scheduler_priority();
  if (v13)
    dispatch_workloop_set_os_workgroup(v15, v13);
  dispatch_activate(v15);
  dispatch_set_target_queue(v14, v15);
  dispatch_release(v15);
  v16 = v6[4];
  v6[4] = v14;
  if (v16)
    ((void (*)(void))v6[5])();
  v6[5] = sub_2081FF354;
  v17 = dispatch_group_create();
  result = v6[6];
  v6[6] = v17;
  if (result)
    result = ((uint64_t (*)(void))v6[7])();
  v6[7] = sub_2081FF360;
  return result;
}

void sub_2081FE9F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_2081FE808(v1);
  _Unwind_Resume(a1);
}

void sub_2081FEA04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2081FEA18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Dispatch/src/DispatchQueue.cpp", 90, (uint64_t)"error == 0", 10, (uint64_t)"dispatch_group_wait failed", 26, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 56))();
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(void))(a1 + 40))();
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

intptr_t sub_2081FEAD8(uint64_t a1)
{
  intptr_t result;

  result = dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  if (result)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Dispatch/src/DispatchQueue.cpp", 90, (uint64_t)"error == 0", 10, (uint64_t)"dispatch_group_wait failed", 26, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      abort();
  }
  return result;
}

void sub_2081FEB34(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_2081FEA18(a1);
  operator delete(v1);
}

uint64_t sub_2081FEB48(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *sub_2081FEB64(uint64_t a1, _QWORD *a2)
{
  return sub_2081FF400(*(dispatch_queue_t *)(a1 + 32), a2);
}

void sub_2081FEB6C(uint64_t a1, _QWORD *a2)
{
  sub_2081FF664(*(NSObject **)(a1 + 48), *(NSObject **)(a1 + 32), a2);
}

void sub_2081FEB80(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl **v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DE80;
  v4[1].__vftable = *a2;
  *a2 = 0;
  v6 = (std::__shared_weak_count_vtbl **)a2[4];
  if (v6)
  {
    if (v6 == a2 + 1)
    {
      v4[2].__shared_owners_ = (uint64_t)&v4[1].__shared_owners_;
      ((void (*)(std::__shared_weak_count_vtbl **))(*v6)->__get_deleter)(v6);
    }
    else
    {
      v4[2].__shared_owners_ = (uint64_t)v6;
      a2[4] = 0;
    }
  }
  else
  {
    v4[2].__shared_owners_ = 0;
  }
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(NSObject **)(a1 + 48);
  v9 = *(NSObject **)(a1 + 32);
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v16[0] = &off_24C08DED0;
  v16[1] = v4 + 1;
  v16[2] = v4;
  v17 = v16;
  sub_2081FF664(v8, v9, v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
  do
LABEL_14:
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2081FED3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2081FED9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C08DE38;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

_QWORD *sub_2081FEDF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  if (v2)
  {
    a1[1] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    *a1 = &off_24C08DE38;
    a1[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = a1[1];
      a1[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    return a1;
  }
  else
  {
    *a1 = &off_24C08DE38;
    a1[1] = 0;
    return a1;
  }
}

void sub_2081FEE80(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = __p[1];
  if (v2)
  {
    __p[1] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = __p[1];
    *__p = &off_24C08DE38;
    __p[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = __p[1];
      __p[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  operator delete(__p);
}

uint64_t sub_2081FEEF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2081FEF00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2081FEF10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2081FEF20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2081FEF30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

void sub_2081FEF40(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;

  v2 = __p[1];
  *__p = &off_24C08DE38;
  __p[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = __p[1];
    __p[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  operator delete(__p);
}

void sub_2081FEF98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DE80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2081FEFA8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DE80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2081FEFC8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 56);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0277CLL);
}

_QWORD *sub_2081FF01C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C08DED0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2081FF090(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C08DED0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_2081FF104(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C08DED0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2081FF154(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C08DED0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2081FF184(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2081FF1DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_2081FF244(uint64_t a1)
{
  std::promise<void> *v1;
  std::__assoc_sub_state *state;

  v1 = *(std::promise<void> **)(a1 + 8);
  state = v1[4].__state_;
  if (!state)
    sub_207CA408C();
  ((void (*)(std::__assoc_sub_state *))state->__vftable[1].__on_zero_shared)(state);
  std::promise<void>::set_value(v1);
}

void sub_2081FF28C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::promise<void> *v14;
  std::exception_ptr v15;
  std::exception_ptr v16[5];

  __cxa_begin_catch(a1);
  std::current_exception();
  v15.__ptr_ = v16;
  std::promise<void>::set_exception(v14, v15);
  std::exception_ptr::~exception_ptr(v16);
  __cxa_end_catch();
}

void sub_2081FF2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2081FF2DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTaskINSt3__18"
                     "functionIFvvEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTa"
                                "skINSt3__18functionIFvvEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTaskINSt3__18functionIFvvEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3esn6thread6detail24GenericDispatchQueueImpl17DispatchAsyncImplEONS1_12PackagedTaskINSt3__18functionIFvvEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2081FF348()
{
  return &unk_24C08DF30;
}

void sub_2081FF354(dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
}

void sub_2081FF360(dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
}

uint64_t sub_2081FF36C(uint64_t a1)
{
  uint64_t v1;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 24);
    if (!v1)
      sub_207CA408C();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Dispatch/src/GrandCentralDispatchUtil.cpp", 83, (uint64_t)"context != nullptr", 18, (uint64_t)"Context may not be nullptr", 26, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    if (!MEMORY[0x18])
      sub_207CA408C();
    return (*(uint64_t (**)(_QWORD))(*MEMORY[0x18] + 48))(MEMORY[0x18]);
  }
}

_QWORD *sub_2081FF400(dispatch_queue_t queue, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE context[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = context;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, context);
    }
    else
    {
      v7 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  if (!v7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Dispatch/src/GrandCentralDispatchUtil.cpp", 63, (uint64_t)"_f", 2, (uint64_t)"Function should contain valid target", 36, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  dispatch_sync_f(queue, context, (dispatch_function_t)sub_2081FF36C);
  result = v7;
  if (v7 == context)
  {
    v5 = 4;
    result = context;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_2081FF528(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void sub_2081FF538(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!a1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Dispatch/src/GrandCentralDispatchUtil.cpp", 94, (uint64_t)"context", 7, (uint64_t)"Context may not be nullptr", 26, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v2 = a1[3];
  if (!v2)
    sub_207CA408C();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_8;
  }
  if (v3)
  {
    v4 = 5;
LABEL_8:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  operator delete(a1);
}

void sub_2081FF5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081FF604((_QWORD **)va);
  _Unwind_Resume(a1);
}

_QWORD **sub_2081FF604(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3 == v2)
    {
      v4 = 4;
      v3 = v2;
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        operator delete(v2);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

void sub_2081FF664(NSObject *a1, NSObject *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = operator new(0x20uLL);
  v7 = v6;
  v8 = a3 + 3;
  v9 = (_QWORD *)a3[3];
  if (v9)
  {
    if (v9 == a3)
    {
      v6[3] = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v6);
      goto LABEL_7;
    }
    v6[3] = v9;
  }
  else
  {
    v8 = v6 + 3;
  }
  *v8 = 0;
LABEL_7:
  if (!v7[3]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Dispatch/src/GrandCentralDispatchUtil.cpp", 63, (uint64_t)"_f", 2, (uint64_t)"Function should contain valid target", 36, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  dispatch_group_async_f(a1, a2, v7, (dispatch_function_t)sub_2081FF538);
}

void sub_2081FF73C(char *label@<X0>, int relative_priority@<W3>, int a3@<W1>, unsigned int a4@<W2>, int a5@<W4>, OS_os_workgroup *a6@<X5>, NSObject **a7@<X8>)
{
  dispatch_qos_class_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;

  if (a3)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Dispatch/src/DispatchQueueTypeUtil.cpp", 81, (uint64_t)&unk_20822A397, 0, (uint64_t)"queue_type has unexpected value.", 32, (void (*)(void **))sub_208216974);
    abort();
  }
  if (a4 >= 6)
  {
    v10 = QOS_CLASS_DEFAULT;
    if (!a5)
      goto LABEL_4;
  }
  else
  {
    v10 = *(_DWORD *)&asc_208286838[4 * a4];
    if (!a5)
    {
LABEL_4:
      v11 = dispatch_queue_attr_make_with_qos_class(0, v10, relative_priority);
      v12 = dispatch_queue_create(label, v11);
      goto LABEL_9;
    }
  }
  v12 = dispatch_queue_create(label, 0);
  v13 = sub_2081FF86C(label);
  dispatch_workloop_set_qos_class_floor();
  if (a6)
    dispatch_workloop_set_os_workgroup(v13, a6);
  dispatch_activate(v13);
  dispatch_set_target_queue(v12, v13);
  dispatch_release(v13);
LABEL_9:
  *a7 = v12;
  a7[1] = sub_2081FF354;
}

dispatch_workloop_t sub_2081FF86C(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  dispatch_workloop_t result;
  dispatch_workloop_t v11;
  std::string __dst;
  void *__p[2];
  int64_t v14;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_8:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  v7 = std::string::append(&__dst, ".workloop", 9uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v14 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v14 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  result = dispatch_workloop_create_inactive((const char *)v9);
  v11 = result;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__p[0]);
    return v11;
  }
  return result;
}

void sub_2081FF994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2081FF9B0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_2081FF9DC()
{
  _QWORD *v0;
  uint64_t result;

  v0 = operator new(0x58uLL);
  v0[2] = 0;
  *v0 = &unk_24C070B78;
  v0[1] = 0;
  result = MEMORY[0x20BD023EC](v0 + 3);
  qword_253E52CA8 = result;
  unk_253E52CB0 = v0;
  return result;
}

void sub_2081FFA24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2081FFA3C(uint64_t a1)
{
  std::recursive_mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_QWORD *)a1)
  {
    v2 = ***(std::recursive_mutex ****)a1;
    std::recursive_mutex::lock(v2);
    v3 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    std::recursive_mutex::unlock(v2);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2081FFB10(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  void *v13;

  sub_208200F78(*(_QWORD **)(*a1 + 88), (uint64_t **)(*a1 + 152));
  v2 = *(_QWORD *)(*a1 + 80);
  v6 = *(_QWORD *)(*a1 + 96);
  v7 = v2;
  sub_208200EC4(&v7, &v6);
  v3 = *(_QWORD *)(*a1 + 80);
  v4 = *(_QWORD **)(*a1 + 104);
  sub_207CBDE48((uint64_t)v4);
  sub_207CBE2F8(v4, 6);
  sub_207CBEBB4((uint64_t)v4, (uint64_t)v9);
  v8 = v3;
  sub_2082012A4(&v8, (uint64_t)v9);
  sub_208201210(&v13);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v9[0]);
LABEL_3:
  sub_208200F78(*(_QWORD **)(*a1 + 88), (uint64_t **)(*a1 + 152));
  sub_207CBE2F8(*(_QWORD **)(*a1 + 88), *(_DWORD *)(*a1 + 136));
  sub_207CBE2F8(*(_QWORD **)(*a1 + 96), *(_DWORD *)(*a1 + 140));
  v5 = *a1;
  if (*(_BYTE *)(*a1 + 148))
    sub_207CBE2F8(*(_QWORD **)(v5 + 104), *(_DWORD *)(v5 + 144));
  else
    sub_207CBE7D8(*(_QWORD **)(v5 + 104));
}

void sub_2081FFC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  sub_208201210((void **)(v24 + 56));
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_2081FFC84(uint64_t *a1@<X8>)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  std::recursive_mutex *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count_vtbl *v10;
  char *v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t (***v18)();
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void (__cdecl *v28)(std::__shared_weak_count *__hidden);
  void **v29;
  char *v30;
  char *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void (__cdecl *v36)(std::__shared_weak_count *__hidden);
  uint64_t (***v37)();
  uint64_t (***v38)();
  char *v39;
  char *v40;
  uint64_t (**v41)();
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const char *v45;
  const char *v46;
  const char *v47;
  int v48;
  size_t v49;
  const char *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t (***v70)();
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  void (__cdecl *v76)(std::__shared_weak_count *__hidden);
  void **v77;
  char *v78;
  char *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t (***v88)();
  uint64_t v89;
  uint64_t (***v90)();
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t *p_shared_weak_owners;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  std::recursive_mutex *v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void *__p;
  char v110;
  _QWORD *v111;
  uint64_t (**v112)();
  char v113;
  uint64_t (***v114)();
  uint64_t (**v115)();
  char v116;
  uint64_t (***v117)();
  uint64_t (**v118)();
  std::__shared_weak_count *v119;
  uint64_t (***v120)();
  __int128 v121;
  uint64_t v122;
  __int128 *v123;
  char v124;
  uint64_t v125;
  void *v126[5];

  v126[3] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253E52C90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C90))
  {
    sub_2081FF9DC();
    __cxa_atexit((void (*)(void *))sub_207CDE84C, &xmmword_253E52CA8, &dword_207C77000);
    __cxa_guard_release(&qword_253E52C90);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_253E52CA8 + 1);
  v4 = (std::recursive_mutex *)xmmword_253E52CA8;
  v121 = xmmword_253E52CA8;
  if (*((_QWORD *)&xmmword_253E52CA8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&xmmword_253E52CA8 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::recursive_mutex::lock(v4);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_253E52C88);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C88))
  {
    __cxa_atexit((void (*)(void *))sub_2081FF9B0, &qword_253E52C98, &dword_207C77000);
    __cxa_guard_release(&qword_253E52C88);
  }
  v108 = 0;
  if (qword_253E52CA0)
  {
    v108 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253E52CA0);
    if (v108)
    {
      v107 = qword_253E52C98;
      if (qword_253E52C98)
        goto LABEL_173;
    }
  }
  v102 = a1;
  v103 = v4;
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v116 = 0;
  v117 = &v115;
  v112 = &off_24C08E030;
  v113 = 0;
  v114 = &v112;
  v115 = &off_24C08DFA0;
  v104 = v10;
  v11 = (char *)operator new(0x118uLL);
  v123 = &v121;
  *(_QWORD *)&v121 = &off_24C08DFA0;
  BYTE8(v121) = 0;
  v120 = &v118;
  v118 = &off_24C08E030;
  LOBYTE(v119) = 0;
  v12 = atomic_load((unsigned __int8 *)&qword_253E52C90);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C90))
  {
    sub_2081FF9DC();
    __cxa_atexit((void (*)(void *))sub_207CDE84C, &xmmword_253E52CA8, &dword_207C77000);
    __cxa_guard_release(&qword_253E52C90);
  }
  v13 = *((_QWORD *)&xmmword_253E52CA8 + 1);
  *(_QWORD *)v11 = xmmword_253E52CA8;
  *((_QWORD *)v11 + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v123)
  {
    if (v123 == &v121)
    {
      *((_QWORD *)v11 + 5) = v11 + 16;
      (*(void (**)(uint64_t, uint64_t))(v121 + 24))((uint64_t)&v121, (uint64_t)(v11 + 16));
    }
    else
    {
      *((_QWORD *)v11 + 5) = v123;
      v123 = 0;
    }
  }
  else
  {
    *((_QWORD *)v11 + 5) = 0;
  }
  if (v120)
  {
    if (v120 == &v118)
    {
      *((_QWORD *)v11 + 9) = v11 + 48;
      ((void (*)(uint64_t, uint64_t))v118[3])((uint64_t)&v118, (uint64_t)(v11 + 48));
    }
    else
    {
      *((_QWORD *)v11 + 9) = v120;
      v120 = 0;
    }
  }
  else
  {
    *((_QWORD *)v11 + 9) = 0;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_253E52D70);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D70))
  {
    sub_207CBAA44(&qword_253E52D68);
    __cxa_guard_release(&qword_253E52D70);
  }
  *((_QWORD *)v11 + 10) = qword_253E52D68;
  v110 = 0;
  LOBYTE(__p) = 0;
  v17 = atomic_load((unsigned __int8 *)&qword_253E52D70);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D70))
  {
    sub_207CBAA44(&qword_253E52D68);
    __cxa_guard_release(&qword_253E52D70);
  }
  v111 = (_QWORD *)qword_253E52D68;
  sub_207CBEFE0(&v111, (uint64_t)&__p, (_QWORD *)v11 + 11);
  if (v110 < 0)
    operator delete(__p);
  sub_208201A7C((_QWORD *)v11 + 12);
  sub_208201988((_QWORD *)v11 + 13);
  v11[120] = 0;
  v11[124] = 0;
  v11[128] = 0;
  v11[132] = 0;
  v11[144] = 0;
  v11[148] = 0;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *((_QWORD *)v11 + 27) = 850045863;
  *((_OWORD *)v11 + 14) = 0u;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_QWORD *)v11 + 34) = 0;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v18 = v120;
  if (v120 == &v118)
  {
    v19 = 4;
    v18 = &v118;
  }
  else
  {
    if (!v120)
      goto LABEL_37;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_37:
  v20 = v123;
  if (v123 == &v121)
  {
    v21 = 4;
    v20 = &v121;
    goto LABEL_41;
  }
  if (v123)
  {
    v21 = 5;
LABEL_41:
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  }
  v22 = *((_QWORD *)v10->~__shared_weak_count + 11);
  v23 = *((_QWORD *)v10->~__shared_weak_count + 12);
  v24 = *((_QWORD *)v10->~__shared_weak_count + 13);
  if ((!*(_QWORD *)(v22 + 48) || !*(_QWORD *)(v23 + 48))
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Log/src/APILogging.cpp", 324, (uint64_t)"root_logger.get().hasLogLevel() && api_logger.get().hasLogLevel()", 65, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_194;
  }
  if (*(_QWORD *)(v24 + 48)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Log/src/APILogging.cpp", 325, (uint64_t)"!internal_logger.get().hasLogLevel()", 36, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_194;
  }
  v25 = **(_DWORD **)(v23 + 56);
  if (v25 != 1
    && v25 != 6
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Log/src/APILogging.cpp", 336, (uint64_t)"api_log_level == tlog::LEVEL_FATAL || api_log_level == tlog::LEVEL_TRACE", 72, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_194;
  }
  sub_207CBEBB4(v23, (uint64_t)&v121);
  v26 = v125;
  sub_208201210(v126);
  if (v124 < 0)
  {
    operator delete(v123);
    if ((SHIBYTE(v122) & 0x80000000) == 0)
    {
LABEL_52:
      if (!v26)
        goto LABEL_57;
      goto LABEL_56;
    }
  }
  else if ((SHIBYTE(v122) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete((void *)v121);
  if (!v26)
    goto LABEL_57;
LABEL_56:
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Log/src/APILogging.cpp", 340, (uint64_t)"api_logger.get().getInfoTree().numAppenders == 0", 48, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_194;
  }
LABEL_57:
  sub_207CBEBB4(v24, (uint64_t)&v121);
  v27 = v125;
  sub_208201210(v126);
  if ((v124 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v122) & 0x80000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v121);
    if (!v27)
      goto LABEL_64;
LABEL_63:
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Log/src/APILogging.cpp", 341, (uint64_t)"internal_logger.get().getInfoTree().numAppenders == 0", 53, (uint64_t)"", 0, (void (*)(void **))sub_208216974))goto LABEL_64;
LABEL_194:
    abort();
  }
  operator delete(v123);
  if (SHIBYTE(v122) < 0)
    goto LABEL_62;
LABEL_59:
  if (v27)
    goto LABEL_63;
LABEL_64:
  sub_207CBDEF0(v22, &v121);
  v105 = v22;
  v28 = v10->~__shared_weak_count;
  v29 = (void **)((char *)v10->~__shared_weak_count + 152);
  v30 = (char *)*v29;
  if (*v29)
  {
    v31 = (char *)*((_QWORD *)v28 + 20);
    v32 = (void *)*((_QWORD *)v10->~__shared_weak_count + 19);
    if (v31 != v30)
    {
      do
      {
        v33 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v31 -= 16;
      }
      while (v31 != v30);
      v32 = *v29;
      v10 = v104;
    }
    *((_QWORD *)v28 + 20) = v30;
    operator delete(v32);
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
  }
  *(_OWORD *)((char *)v28 + 152) = v121;
  *((_QWORD *)v28 + 21) = v122;
  v36 = v10->~__shared_weak_count;
  *((_DWORD *)v36 + 34) = **(_DWORD **)(v105 + 56);
  *((_DWORD *)v36 + 35) = **(_DWORD **)(v23 + 56);
  if (*(_QWORD *)(v24 + 48))
  {
    *((_DWORD *)v36 + 36) = **(_DWORD **)(v24 + 56);
    *((_BYTE *)v36 + 148) = 1;
  }
  else if (*((_BYTE *)v36 + 148))
  {
    *((_BYTE *)v36 + 148) = 0;
  }
  sub_207CBE2F8((_QWORD *)v105, 6);
  sub_207CBE2F8((_QWORD *)v23, 6);
  sub_207CBE2F8((_QWORD *)v24, 6);
  *((_QWORD *)v10->~__shared_weak_count + 14) = 0;
  sub_207CBDEF0(v105, &v121);
  v37 = (uint64_t (***)())*((_QWORD *)&v121 + 1);
  v38 = (uint64_t (***)())v121;
  if ((_QWORD)v121 != *((_QWORD *)&v121 + 1))
  {
    v39 = 0;
    v40 = 0;
    v106 = 0;
    while (1)
    {
      v41 = *v38;
      v42 = (std::__shared_weak_count *)v38[1];
      v118 = *v38;
      v119 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = sub_207CC0218();
      v46 = (const char *)(*((uint64_t (**)(uint64_t (**)()))*v41 + 3))(v41);
      v47 = v46;
      v48 = v45[23];
      if (v48 >= 0)
        v49 = *((unsigned __int8 *)v45 + 23);
      else
        v49 = *((_QWORD *)v45 + 1);
      if (v49 == strlen(v46) && (v48 >= 0 ? (v50 = v45) : (v50 = *(const char **)v45), !memcmp(v50, v47, v49)))
      {
        if (v40 >= v106)
        {
          v53 = (v40 - v39) >> 3;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61)
            sub_207CA420C();
          if ((v106 - v39) >> 2 > v54)
            v54 = (v106 - v39) >> 2;
          if ((unint64_t)(v106 - v39) >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v54;
          if (v55)
          {
            if (v55 >> 61)
              sub_207CA3AB8();
            v56 = operator new(8 * v55);
            v57 = &v56[8 * v53];
            *(_QWORD *)v57 = v41;
            v58 = (uint64_t)(v57 + 8);
            v59 = v40 - v39;
            if (v40 == v39)
            {
LABEL_115:
              v106 = &v56[8 * v55];
              if (v39)
                operator delete(v39);
              v39 = v57;
              v42 = v119;
              v40 = (char *)v58;
              if (!v119)
                goto LABEL_81;
LABEL_94:
              v51 = (unint64_t *)&v42->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
              goto LABEL_81;
            }
          }
          else
          {
            v56 = 0;
            v57 = (char *)(8 * v53);
            *(_QWORD *)(8 * v53) = v41;
            v58 = 8 * v53 + 8;
            v59 = v40 - v39;
            if (v40 == v39)
              goto LABEL_115;
          }
          v60 = v59 - 8;
          if (v60 >= 0x168)
          {
            v63 = (v40 - 8 - v39) & 0xFFFFFFFFFFFFFFF8;
            if (&v56[v40 - v39 - 8 - v63] > &v56[v40 - v39 - 8])
            {
              v61 = v40;
            }
            else if (&v40[-v63 - 8] > v40 - 8)
            {
              v61 = v40;
            }
            else if ((unint64_t)(v39 - v56) >= 0x20)
            {
              v64 = (v60 >> 3) + 1;
              v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              v61 = &v40[-v65];
              v57 -= v65;
              v66 = &v56[8 * v53 - 16];
              v67 = v40 - 16;
              v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v69 = *(_OWORD *)v67;
                *(v66 - 1) = *((_OWORD *)v67 - 1);
                *v66 = v69;
                v66 -= 2;
                v67 -= 32;
                v68 -= 4;
              }
              while (v68);
              if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_115;
            }
            else
            {
              v61 = v40;
            }
          }
          else
          {
            v61 = v40;
          }
          do
          {
            v62 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *((_QWORD *)v57 - 1) = v62;
            v57 -= 8;
          }
          while (v61 != v39);
          goto LABEL_115;
        }
        *(_QWORD *)v40 = v41;
        v40 += 8;
        v42 = v119;
        if (v119)
          goto LABEL_94;
      }
      else if (v42)
      {
        goto LABEL_94;
      }
LABEL_81:
      v38 += 2;
      if (v38 == v37)
      {
        v38 = (uint64_t (***)())v121;
        v10 = v104;
        if ((_QWORD)v121)
          goto LABEL_130;
LABEL_142:
        v71 = v105;
        if (v39 != v40)
        {
LABEL_143:
          v75 = (unint64_t *)v39;
          do
            sub_207CBDB40(v71, *v75++);
          while (v75 != (unint64_t *)v40);
        }
        goto LABEL_145;
      }
    }
  }
  v39 = 0;
  v40 = 0;
  if (!(_QWORD)v121)
    goto LABEL_142;
LABEL_130:
  v70 = (uint64_t (***)())*((_QWORD *)&v121 + 1);
  if (*((uint64_t (****)())&v121 + 1) == v38)
  {
    *((_QWORD *)&v121 + 1) = v38;
    operator delete(v38);
    v71 = v105;
    if (v39 != v40)
      goto LABEL_143;
  }
  else
  {
    do
    {
      v72 = (std::__shared_weak_count *)*(v70 - 1);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v70 -= 2;
    }
    while (v70 != v38);
    *((_QWORD *)&v121 + 1) = v38;
    operator delete((void *)v121);
    v71 = v105;
    if (v39 != v40)
      goto LABEL_143;
  }
LABEL_145:
  sub_207CBDEF0(v71, &v121);
  v76 = v10->~__shared_weak_count;
  v77 = (void **)((char *)v10->~__shared_weak_count + 176);
  v78 = (char *)*v77;
  if (*v77)
  {
    v79 = (char *)*((_QWORD *)v76 + 23);
    v80 = (void *)*((_QWORD *)v10->~__shared_weak_count + 22);
    if (v79 != v78)
    {
      do
      {
        v81 = (std::__shared_weak_count *)*((_QWORD *)v79 - 1);
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v79 -= 16;
      }
      while (v79 != v78);
      v80 = *v77;
    }
    *((_QWORD *)v76 + 23) = v78;
    operator delete(v80);
    *v77 = 0;
    v77[1] = 0;
    v77[2] = 0;
  }
  *((_OWORD *)v76 + 11) = v121;
  *((_QWORD *)v76 + 24) = v122;
  if (v39)
    operator delete(v39);
  v84 = (std::__shared_weak_count *)operator new(0x20uLL);
  v84->__vftable = (std::__shared_weak_count_vtbl *)&off_24C08E0B0;
  v84->__shared_owners_ = 0;
  v84->__shared_weak_owners_ = 0;
  v84[1].__vftable = v10;
  v85 = v108;
  v107 = (uint64_t)v10;
  v108 = v84;
  a1 = v102;
  if (!v85)
    goto LABEL_162;
  v86 = (unint64_t *)&v85->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (v87)
  {
LABEL_162:
    v88 = v114;
    if (v114 != &v112)
      goto LABEL_163;
LABEL_166:
    v89 = 4;
    v88 = &v112;
    v4 = v103;
    goto LABEL_167;
  }
  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
  std::__shared_weak_count::__release_weak(v85);
  v88 = v114;
  if (v114 == &v112)
    goto LABEL_166;
LABEL_163:
  v4 = v103;
  if (v88)
  {
    v89 = 5;
LABEL_167:
    (*v88)[v89]();
  }
  v90 = v117;
  if (v117 == &v115)
  {
    v91 = 4;
    v90 = &v115;
    goto LABEL_172;
  }
  if (v117)
  {
    v91 = 5;
LABEL_172:
    (*v90)[v91]();
  }
LABEL_173:
  v92 = atomic_load((unsigned __int8 *)&qword_253E52C88);
  if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_253E52C88))
  {
    __cxa_atexit((void (*)(void *))sub_2081FF9B0, &qword_253E52C98, &dword_207C77000);
    __cxa_guard_release(&qword_253E52C88);
  }
  if (v108)
  {
    p_shared_weak_owners = (unint64_t *)&v108->__shared_weak_owners_;
    do
      v94 = __ldxr(p_shared_weak_owners);
    while (__stxr(v94 + 1, p_shared_weak_owners));
  }
  v95 = (std::__shared_weak_count *)qword_253E52CA0;
  qword_253E52C98 = v107;
  qword_253E52CA0 = (uint64_t)v108;
  if (v95)
    std::__shared_weak_count::__release_weak(v95);
  if (v108)
  {
    v96 = (unint64_t *)&v108->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    *a1 = v107;
    a1[1] = (uint64_t)v108;
    do
      v98 = __ldxr(v96);
    while (__stxr(v98 + 1, v96));
    do
      v99 = __ldaxr(v96);
    while (__stlxr(v99 - 1, v96));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  else
  {
    *a1 = v107;
    a1[1] = 0;
  }
  if (v108)
  {
    v100 = (unint64_t *)&v108->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  std::recursive_mutex::unlock(v4);
}

void sub_2082009C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,char *a35)
{
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  __cxa_guard_abort(&qword_253E52D70);
  if (a22 < 0)
    operator delete(__p);
  v40 = (_QWORD *)v35[9];
  if (v40 == v37)
  {
    v41 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_8;
    v41 = 5;
    v37 = (_QWORD *)v35[9];
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v41))(v37);
LABEL_8:
  v42 = (_QWORD *)v35[5];
  if (v42 == v36)
  {
    v43 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_13;
    v43 = 5;
    v36 = (_QWORD *)v35[5];
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v43))(v36);
LABEL_13:
  sub_207CDE84C((uint64_t)v35);
  v44 = a35;
  if (a35 == &a32)
  {
    v45 = 4;
    v44 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_18;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_18:
  v46 = *(_QWORD **)(v38 - 152);
  if (v46 == (_QWORD *)(v38 - 176))
  {
    v47 = 4;
    v46 = (_QWORD *)(v38 - 176);
  }
  else
  {
    if (!v46)
      goto LABEL_23;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_23:
  operator delete(v35);
  v48 = a27;
  if (a27 == &a24)
  {
    v49 = 4;
    v48 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_28;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_28:
  v50 = a31;
  if (a31 == &a28)
  {
    v51 = 4;
    v50 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_33;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_33:
  operator delete(a12);
  sub_207C99D78((uint64_t)&a15);
  std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_208200C60(std::recursive_mutex ***a1, int a2)
{
  std::recursive_mutex *v4;
  std::recursive_mutex **v5;
  std::recursive_mutex *v6;
  std::recursive_mutex *v7;
  _QWORD *v8;
  std::recursive_mutex *v9;
  uint64_t v10;
  std::recursive_mutex **v11;
  std::recursive_mutex *v12;
  std::recursive_mutex **v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::recursive_mutex *v20;
  void *__p;
  char *v22;
  std::recursive_mutex *v23;
  uint64_t v24;

  v4 = **a1;
  std::recursive_mutex::lock(v4);
  sub_207CBDEF0((uint64_t)(*a1)[11], &__p);
  v5 = *a1;
  v7 = (*a1)[22];
  v6 = (*a1)[23];
  v8 = __p;
  if ((char *)v6 - (char *)v7 == v22 - (_BYTE *)__p)
  {
    if (v7 == v6)
    {
LABEL_5:
      if (*((_DWORD *)v5 + 28) != 2)
        goto LABEL_12;
      goto LABEL_9;
    }
    while (v7->__m_.__sig == *v8)
    {
      v7 = (std::recursive_mutex *)((char *)v7 + 16);
      v8 += 2;
      if (v7 == v6)
        goto LABEL_5;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Log/src/APILogging.cpp", 426, (uint64_t)"priv().initialized_root_appenders_ == current_root_appenders", 60, (uint64_t)"root appenders have been illegally modified between Initialize() and Enable() of APILogging", 91, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v5 = *a1;
  if (*((_DWORD *)*a1 + 28) == 2)
  {
LABEL_9:
    v9 = *v5;
    std::recursive_mutex::lock(*v5);
    v10 = (uint64_t)(*a1)[10];
    v23 = (*a1)[12];
    v24 = v10;
    sub_208200EC4(&v24, (uint64_t *)&v23);
    v11 = *a1;
    if (*((_BYTE *)*a1 + 124))
      *((_BYTE *)v11 + 124) = 0;
    *((_DWORD *)v11 + 28) = 1;
    std::recursive_mutex::unlock(v9);
    v5 = *a1;
  }
LABEL_12:
  v20 = v5[12];
  v12 = v5[5];
  if (!v12)
    sub_207CA408C();
  (*(void (**)(std::recursive_mutex *, std::recursive_mutex **))(v12->__m_.__sig + 48))(v12, &v20);
  sub_207CBE2F8((*a1)[12], a2);
  v13 = *a1;
  *((_DWORD *)v13 + 30) = a2;
  *((_BYTE *)v13 + 124) = 1;
  *((_DWORD *)*a1 + 28) = 2;
  v14 = (char *)__p;
  if (__p)
  {
    v15 = v22;
    v16 = __p;
    if (v22 != __p)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = __p;
    }
    v22 = v14;
    operator delete(v16);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_208200E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::recursive_mutex *v10;
  std::recursive_mutex *v11;

  std::recursive_mutex::unlock(v11);
  sub_207CBE108(&a10);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_208200E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_207CBE108((void **)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_208200EC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  void *v9;

  sub_207CBDE48(*a2);
  sub_207CBE2F8((_QWORD *)*a2, 6);
  sub_207CBEBB4(*a2, (uint64_t)v5);
  v4 = *a1;
  sub_2082012A4(&v4, (uint64_t)v5);
  sub_208201210(&v9);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5[0]);
    return;
  }
  operator delete(__p);
  if (v6 < 0)
    goto LABEL_5;
}

void sub_208200F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CBB72C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208200F78(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  sub_207CBDE48((uint64_t)a1);
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    v6 = (std::__shared_weak_count *)v4[1];
    v12 = *v4;
    v13 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_207CBD72C((uint64_t)a1, &v12);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4 += 2;
  }
  sub_207CBE2F8(a1, 6);
}

void sub_208201034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208201048(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  std::mutex::~mutex((std::mutex *)(a1 + 216));
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(_QWORD *)(a1 + 176);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 184);
    v5 = *(void **)(a1 + 176);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v5);
  }
  v9 = *(_QWORD *)(a1 + 152);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 160);
    v11 = *(void **)(a1 + 152);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v9;
    operator delete(v11);
  }
  v15 = *(_QWORD **)(a1 + 72);
  if (v15 == (_QWORD *)(a1 + 48))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v15)
      goto LABEL_30;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_30:
  v17 = *(_QWORD **)(a1 + 40);
  if (v17 == (_QWORD *)(a1 + 16))
  {
    v18 = 4;
    v17 = (_QWORD *)(a1 + 16);
    goto LABEL_34;
  }
  if (v17)
  {
    v18 = 5;
LABEL_34:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  v19 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v19)
    return a1;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void **sub_208201210(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      sub_208201210(v3 - 3);
      if (*((char *)v3 - 33) < 0)
      {
        operator delete(*(v3 - 7));
        if (*((char *)v3 - 57) < 0)
LABEL_9:
          operator delete(*(v3 - 10));
      }
      else if (*((char *)v3 - 57) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 10;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_2082012A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 56);
  for (i = *(_QWORD *)(a2 + 64); v2 != i; v2 += 80)
  {
    v6 = (_QWORD *)*a1;
    sub_2082012A4(&v6, v2);
    v7 = (_QWORD *)*a1;
    sub_207CBEFE0(&v7, v2, &v8);
    v5 = v8;
    sub_207CBE7D8(v8);
    sub_207CBDE48((uint64_t)v5);
  }
}

void sub_208201328(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208201338(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DF50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_208201358(uint64_t a1)
{
  return sub_208202538((_QWORD *)(a1 + 24));
}

_BYTE *sub_20820136C(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C08DFA0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_2082013A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C08DFA0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void sub_2082013C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22[2];
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v2 = *a2;
  if (*(unsigned __int8 *)(a1 + 8) - 1 <= 1)
  {
    sub_2081FFC84(v22);
    v3 = *(_QWORD *)v22[0];
    v4 = (std::mutex *)(*(_QWORD *)v22[0] + 216);
    std::mutex::lock(v4);
    v5 = *(std::__shared_weak_count **)(v3 + 208);
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      v7 = v6;
      if (v6 && *(_QWORD *)(v3 + 200))
      {
        v23 = *(_QWORD **)(v3 + 200);
        v24 = v6;
LABEL_21:
        std::mutex::unlock(v4);
        sub_207CBD72C(v2, &v23);
        v19 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        sub_2081FFA3C((uint64_t)v22);
        return;
      }
    }
    else
    {
      v7 = 0;
    }
    v13 = (std::__shared_weak_count *)operator new(0x48uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DF50;
    sub_208201E70(&v13[1].__vftable, 1);
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v16 = *(std::__shared_weak_count **)(v3 + 208);
    *(_QWORD *)(v3 + 200) = v13 + 1;
    *(_QWORD *)(v3 + 208) = v13;
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
    v23 = &v13[1].__vftable;
    v24 = v13;
    if (v7)
    {
      v17 = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    goto LABEL_21;
  }
  v8 = (std::__shared_weak_count *)operator new(0x48uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_24C08DF50;
  sub_208201E70(&v8[1].__vftable, 0);
  v23 = v9;
  v24 = v8;
  sub_207CBD72C(v2, &v23);
  v10 = v24;
  if (v24)
  {
    v11 = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_2082015C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::mutex::unlock(v12);
  sub_2081FFA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2082016CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_208201738()
{
  return &unk_24C08E010;
}

_BYTE *sub_20820174C(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C08E030;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_208201784(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C08E030;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_2082017A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_208201814()
{
  return &unk_24C08E090;
}

void sub_208201824(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208201838(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v1 = *(uint64_t **)(a1 + 24);
  if (v1)
  {
    sub_2081FFB10(*(uint64_t **)(a1 + 24));
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      v3 = (void *)sub_208201048(v2);
      operator delete(v3);
    }
    operator delete(v1);
  }
}

uint64_t sub_208201888(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2082018F8(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_253E52D70);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_253E52D70))
  {
    *a1 = qword_253E52D68;
  }
  else
  {
    sub_207CBAA44(&qword_253E52D68);
    __cxa_guard_release(&qword_253E52D70);
    *a1 = qword_253E52D68;
  }
}

void sub_208201970(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52D70);
  _Unwind_Resume(a1);
}

void sub_208201988(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  _QWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_253E52D80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D80))
  {
    sub_2082018F8(&v5);
    sub_207C96EE8(__p, "cv3d");
    sub_207CBEFE0(&v5, (uint64_t)__p, &qword_253E52D78);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_253E52D80);
  }
  *a1 = qword_253E52D78;
}

void sub_208201A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_253E52D80);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_253E52D80);
  _Unwind_Resume(a1);
}

void sub_208201A7C(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  _QWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_253E52D90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D90))
  {
    sub_2082018F8(&v5);
    sub_207C96EE8(__p, "cv3dapi");
    sub_207CBEFE0(&v5, (uint64_t)__p, &qword_253E52D88);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_253E52D90);
  }
  *a1 = qword_253E52D88;
}

void sub_208201B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_253E52D90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_253E52D90);
  _Unwind_Resume(a1);
}

_QWORD *sub_208201B70(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[1];
  *a1 = &off_24C08E100;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2[1];
    *v2 = &off_24C08E188;
    v2[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = v2[1];
      v2[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_208201BE4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[1];
  *a1 = &off_24C08E100;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2[1];
    *v2 = &off_24C08E188;
    v2[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = v2[1];
      v2[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_208201C58(_QWORD *__p)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)__p[1];
  *__p = &off_24C08E100;
  __p[1] = 0;
  if (v2)
  {
    v3 = v2[1];
    *v2 = &off_24C08E188;
    v2[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = v2[1];
      v2[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *sub_208201CCC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C08E188;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void sub_208201D24(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;

  v2 = __p[1];
  *__p = &off_24C08E188;
  __p[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = __p[1];
    __p[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  operator delete(__p);
}

uint64_t sub_208201D7C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_208201D8C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_208201D9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_208201DAC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_208201DBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_208201DCC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_208201DF8(uint64_t *a1)
{
  std::mutex *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;

  v2 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  v4 = *a1;
  for (i = a1[1]; v4 != i; v4 += 8)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  std::mutex::unlock(v2);
}

void sub_208201E5C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_208201E70(_QWORD *a1, int a2)
{
  char *v4;
  char *v5;
  std::__thread_struct *v6;
  int v7;
  _QWORD *v8;
  char ***v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char **v24;
  std::mutex *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;

  sub_207CBAFEC((uint64_t)a1, 0);
  if (!a2)
  {
    *a1 = &off_24C08E1D0;
    a1[2] = &unk_24C08E200;
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    return;
  }
  v48 = operator new(0x10uLL);
  v4 = (char *)operator new(0x8000uLL);
  bzero(v4, 0x8000uLL);
  v5 = (char *)operator new(0x140uLL);
  *((_QWORD *)v5 + 1) = &unk_24C08E300;
  strcpy(v5 + 16, "OSLogAppender");
  *(_QWORD *)v5 = off_24C08E2B8;
  v5[39] = 13;
  *((_QWORD *)v5 + 5) = 850045863;
  *((_QWORD *)v5 + 13) = v4;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_QWORD *)v5 + 12) = 0;
  *((_QWORD *)v5 + 14) = v4 + 0x8000;
  *((_QWORD *)v5 + 15) = v4 + 0x8000;
  *((_QWORD *)v5 + 26) = 1018212795;
  *((_OWORD *)v5 + 8) = 0u;
  *((_QWORD *)v5 + 20) = 1018212795;
  *((_QWORD *)v5 + 18) = 0;
  *(_QWORD *)(v5 + 150) = 0;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *((_QWORD *)v5 + 25) = 0;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *((_QWORD *)v5 + 31) = 0;
  *((_QWORD *)v5 + 32) = 1018212795;
  v5[312] = 0;
  *(_OWORD *)(v5 + 289) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  v6 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v6);
  v49 = operator new(0x18uLL);
  *v49 = v6;
  v49[1] = sub_208202804;
  v49[2] = v5;
  v7 = pthread_create((pthread_t *)v5 + 38, 0, (void *(__cdecl *)(void *))sub_2082035B4, v49);
  if (!v7)
  {
    v8 = a1 + 2;
    v5[312] = 1;
    *v48 = &off_24C08E258;
    v48[1] = v5 + 8;
    *a1 = &off_24C08E1D0;
    a1[2] = &unk_24C08E200;
    a1[3] = v48;
    a1[4] = 0;
    v9 = (char ***)(a1 + 4);
    a1[5] = 0;
    v10 = atomic_load((unsigned __int8 *)&qword_253E52CB8);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253E52CB8))
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254530738, &dword_207C77000);
      __cxa_guard_release(&qword_253E52CB8);
    }
    std::mutex::lock(&stru_254530738);
    v11 = atomic_load((unsigned __int8 *)&qword_253E52CC0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E52CC0))
    {
      __cxa_atexit((void (*)(void *))sub_208201DCC, &qword_253E52CC8, &dword_207C77000);
      __cxa_guard_release(&qword_253E52CC0);
    }
    if (qword_253E52CD0)
    {
      v12 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253E52CD0);
      v13 = v12;
      if (v12)
      {
        v14 = qword_253E52CC8;
        v15 = (char *)v12;
        if (qword_253E52CC8)
          goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v15 = (char *)operator new(0x70uLL);
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = off_24C08E390;
    *((_QWORD *)v15 + 3) = 0;
    v14 = (uint64_t)(v15 + 24);
    *((_QWORD *)v15 + 6) = 850045863;
    *((_QWORD *)v15 + 4) = 0;
    *((_QWORD *)v15 + 5) = 0;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *((_QWORD *)v15 + 13) = 0;
    sub_2082165D4((uint64_t)sub_208201DF8, (uint64_t)(v15 + 24));
    v16 = (unint64_t *)(v15 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (std::__shared_weak_count *)qword_253E52CD0;
    qword_253E52CC8 = (uint64_t)(v15 + 24);
    qword_253E52CD0 = (uint64_t)v15;
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
LABEL_20:
    std::mutex::unlock(&stru_254530738);
    v21 = (std::__shared_weak_count *)a1[5];
    a1[4] = v14;
    a1[5] = v15;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *v9;
    v25 = (std::mutex *)(*v9 + 3);
    std::mutex::lock(v25);
    v27 = v24[1];
    v26 = (unint64_t)v24[2];
    if ((unint64_t)v27 < v26)
    {
      *(_QWORD *)v27 = v8;
      v28 = (uint64_t)(v27 + 8);
LABEL_38:
      v24[1] = (char *)v28;
      std::mutex::unlock(v25);
      return;
    }
    v29 = *v24;
    v30 = v27 - *v24;
    v31 = v30 >> 3;
    v32 = (v30 >> 3) + 1;
    if (v32 >> 61)
      sub_207CA420C();
    v33 = v26 - (_QWORD)v29;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        sub_207CA3AB8();
      v35 = operator new(8 * v34);
      v36 = &v35[8 * v31];
      v37 = &v35[8 * v34];
      *(_QWORD *)v36 = v8;
      v28 = (uint64_t)(v36 + 8);
      v38 = (char *)(v27 - v29);
      if (v27 == v29)
      {
LABEL_36:
        *v24 = v36;
        v24[1] = (char *)v28;
        v24[2] = v37;
        if (!v27)
          goto LABEL_38;
LABEL_37:
        operator delete(v27);
        goto LABEL_38;
      }
    }
    else
    {
      v35 = 0;
      v36 = (char *)(8 * v31);
      v37 = 0;
      *(_QWORD *)(8 * v31) = v8;
      v28 = 8 * v31 + 8;
      v38 = (char *)(v27 - v29);
      if (v27 == v29)
        goto LABEL_36;
    }
    v39 = (unint64_t)(v38 - 8);
    if (v39 < 0x58)
      goto LABEL_57;
    if ((unint64_t)(v27 - v35 - v30) < 0x20)
      goto LABEL_57;
    v40 = (v39 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v27[-v41];
    v36 -= v41;
    v43 = &v35[8 * v31 - 16];
    v44 = v27 - 16;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    v27 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v47 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *((_QWORD *)v36 - 1) = v47;
        v36 -= 8;
      }
      while (v27 != v29);
    }
    v27 = *v24;
    *v24 = v36;
    v24[1] = (char *)v28;
    v24[2] = v37;
    if (!v27)
      goto LABEL_38;
    goto LABEL_37;
  }
  std::__throw_system_error(v7, "thread constructor failed");
  __break(1u);
}

void sub_2082023D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void **v21;
  std::mutex *v22;
  void *v24;
  void *v25;

  std::mutex::~mutex(v22);
  v24 = *v21;
  if (*v21)
  {
    v20[1].__shared_owners_ = (uint64_t)v24;
    operator delete(v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v25);
  sub_207C99D78((uint64_t)&a17);
  std::mutex::unlock(&stru_254530738);
  sub_207C99D78(v19);
  sub_208201B70(v18);
  nullsub_31(v17);
  _Unwind_Resume(a1);
}

void sub_2082024AC()
{
  uint64_t v0;

  sub_2080A83A4((uint64_t **)(v0 - 96));
  JUMPOUT(0x2082024B8);
}

uint64_t sub_208202538(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[4];
  if (v2)
  {
    std::mutex::lock((std::mutex *)(v2 + 24));
    v3 = a1 + 2;
    v4 = *(_QWORD **)(v2 + 8);
    v5 = *(_QWORD **)v2;
    if (*(_QWORD **)v2 != v4)
    {
      while ((_QWORD *)*v5 != v3)
      {
        if (++v5 == v4)
        {
          v5 = *(_QWORD **)(v2 + 8);
          break;
        }
      }
    }
    if (v5 != v4)
    {
      v6 = v5 + 1;
      if (v5 + 1 != v4)
      {
        do
        {
          if ((_QWORD *)*v6 != v3)
            *v5++ = *v6;
          ++v6;
        }
        while (v6 != v4);
        v4 = *(_QWORD **)(v2 + 8);
      }
    }
    if (v5 != v4)
      *(_QWORD *)(v2 + 8) = v5;
    std::mutex::unlock((std::mutex *)(v2 + 24));
  }
  v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (_QWORD *)a1[3];
  a1[2] = &off_24C08E100;
  a1[3] = 0;
  if (v10)
  {
    v11 = v10[1];
    *v10 = &off_24C08E188;
    v10[1] = 0;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v10[1];
      v10[1] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    operator delete(v10);
  }
  return nullsub_31(a1);
}

uint64_t sub_2082026B8(uint64_t a1)
{
  return sub_208202538((_QWORD *)(a1 - 16));
}

void sub_2082026C0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_208202538(a1);
  operator delete(v1);
}

void sub_2082026D4(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_208202538((_QWORD *)(a1 - 16));
  operator delete(v1);
}

const char *sub_2082026F0()
{
  return "OSLogSurrogateAppender";
}

_QWORD *sub_2082026FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C08E188;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void sub_208202754(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;

  v2 = __p[1];
  *__p = &off_24C08E188;
  __p[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = __p[1];
    __p[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  operator delete(__p);
}

void **sub_2082027AC(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_2082037C0(v3 - 32);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_208202804(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _BYTE *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  const void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  const char *v53;
  void *__p;
  char v55;
  std::promise<void> v56;
  char v57;
  std::unique_lock<std::mutex> __lk;
  uint64_t v59;
  void *object;
  void *v61[2];
  unint64_t v62;
  char v63;
  void *v64[2];
  unint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  while (1)
  {
    v2 = atomic_load((unsigned __int8 *)(a1 + 156));
    v3 = *(_QWORD *)(a1 + 144);
    if ((v2 & 1) != 0)
    {
      if (!v3)
      {
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        return;
      }
LABEL_9:
      *(_BYTE *)(a1 + 157) = 1;
      goto LABEL_14;
    }
    if (v3)
      goto LABEL_9;
    while (1)
    {
      v4 = atomic_load((unsigned __int8 *)(a1 + 156));
      if ((v4 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 160), &__lk);
      if (*(_QWORD *)(a1 + 144))
        goto LABEL_9;
    }
    v5 = *(_QWORD *)(a1 + 144);
    *(_BYTE *)(a1 + 157) = 1;
    if (v5)
      break;
LABEL_2:
    *(_BYTE *)(a1 + 157) = 0;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 256));
  }
  while (1)
  {
LABEL_14:
    v6 = *(_QWORD *)(a1 + 128);
    v7 = *(_QWORD *)(a1 + 104);
    v8 = v7 + 32 * v6;
    LOBYTE(__p) = 0;
    v55 = 0;
    if (*(_BYTE *)(v8 + 8))
    {
      v9 = *(void **)v8;
      *(_QWORD *)v8 = 0;
      __p = v9;
      v55 = 1;
    }
    LOBYTE(v56.__state_) = 0;
    v57 = 0;
    if (*(_BYTE *)(v8 + 24))
    {
      v10 = v7 + 32 * v6;
      v56.__state_ = *(std::__assoc_sub_state **)(v10 + 16);
      *(_QWORD *)(v10 + 16) = 0;
      v57 = 1;
    }
    v67 = 0u;
    v68 = 0u;
    v11 = *(_QWORD *)(a1 + 104) + 32 * v6;
    v12 = *(unsigned __int8 *)(v11 + 8);
    if (*(_BYTE *)(v11 + 8))
    {
      v13 = *(_QWORD **)v11;
      *(_QWORD *)v11 = 0;
      if (!v13)
      {
        v12 = 0;
LABEL_32:
        *(_BYTE *)(v11 + 8) = 0;
        goto LABEL_33;
      }
      v14 = (std::__shared_weak_count *)v13[4];
      if (!v14)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v17 = (std::__shared_weak_count *)v13[2];
        if (v17)
          goto LABEL_25;
      }
      else
      {
LABEL_24:
        v17 = (std::__shared_weak_count *)v13[2];
        if (v17)
        {
LABEL_25:
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      operator delete(v13);
      v12 = BYTE8(v68);
      goto LABEL_32;
    }
LABEL_33:
    v22 = *(unsigned __int8 *)(v11 + 24);
    v21 = (_BYTE *)(v11 + 24);
    v20 = v22;
    v23 = (uint64_t *)(v21 - 8);
    if (v22 != v12)
    {
      if (v20)
      {
        MEMORY[0x20BD0277C](v23);
        *v21 = 0;
        if (!BYTE8(v68))
          goto LABEL_37;
      }
      else
      {
        *v23 = v68;
        *(_QWORD *)&v68 = 0;
        *v21 = 1;
        if (!BYTE8(v68))
          goto LABEL_37;
      }
LABEL_36:
      MEMORY[0x20BD0277C](&v68);
      goto LABEL_37;
    }
    if (v20)
    {
      v24 = v68;
      *(_QWORD *)&v68 = 0;
      v59 = *v23;
      *v23 = v24;
      MEMORY[0x20BD0277C](&v59);
      if (BYTE8(v68))
        goto LABEL_36;
    }
LABEL_37:
    if (BYTE8(v67))
    {
      v25 = (_QWORD *)v67;
      *(_QWORD *)&v67 = 0;
      if (v25)
      {
        v26 = (std::__shared_weak_count *)v25[4];
        if (!v26)
          goto LABEL_43;
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v29 = (std::__shared_weak_count *)v25[2];
          if (v29)
            goto LABEL_44;
        }
        else
        {
LABEL_43:
          v29 = (std::__shared_weak_count *)v25[2];
          if (v29)
          {
LABEL_44:
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        operator delete(v25);
      }
    }
    v32 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5;
    v33 = *(_QWORD *)(a1 + 128) + 1;
    if (v33 < v32)
      v32 = 0;
    *(_QWORD *)(a1 + 128) = v33 - v32;
    --*(_QWORD *)(a1 + 144);
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 208));
    if (!__lk.__owns_)
    {
      v52 = 1;
      v53 = "unique_lock::unlock: not locked";
      goto LABEL_123;
    }
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    if (v55)
    {
      if (!__p)
      {
LABEL_91:
        if (v57)
          std::promise<void>::set_value(&v56);
        goto LABEL_93;
      }
      v34 = atomic_load((unsigned __int8 *)&qword_25452B590);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_25452B590))
      {
        sub_207CF696C((uint64_t)&v67);
        sub_207CCBD54("com.apple.cv3d", (unint64_t)&v67, &qword_25452B578);
        if (BYTE8(v68) && SBYTE7(v68) < 0)
          operator delete((void *)v67);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25452B578, &dword_207C77000);
        __cxa_guard_release(&qword_25452B590);
      }
      if (byte_25452B58F >= 0)
        v35 = (const char *)&qword_25452B578;
      else
        v35 = (const char *)qword_25452B578;
      if (byte_25452B58F >= 0)
        v36 = byte_25452B58F;
      else
        v36 = unk_25452B580;
      object = os_log_create(v35, *((const char **)__p + 5));
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_207C95C50();
      if (v36 >= 0x17)
      {
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = operator new(v38 + 1);
        v61[1] = (void *)v36;
        v62 = v39 | 0x8000000000000000;
        v61[0] = v37;
      }
      else
      {
        HIBYTE(v62) = v36;
        v37 = v61;
        if (!v36)
        {
LABEL_75:
          *((_BYTE *)v37 + v36) = 0;
          v63 = 1;
          v40 = *((_QWORD *)__p + 6);
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            sub_207C95C50();
          v41 = (const void *)*((_QWORD *)__p + 5);
          if (v40 >= 0x17)
          {
            v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v43 = v40 | 7;
            v44 = v43 + 1;
            v42 = operator new(v43 + 1);
            v64[1] = (void *)v40;
            v65 = v44 | 0x8000000000000000;
            v64[0] = v42;
          }
          else
          {
            HIBYTE(v65) = *((_QWORD *)__p + 6);
            v42 = v64;
            if (!v40)
            {
              LOBYTE(v64[0]) = 0;
              v66 = 1;
              if ((SHIBYTE(v65) & 0x80000000) == 0)
                goto LABEL_79;
              goto LABEL_85;
            }
          }
          memmove(v42, v41, v40);
          *((_BYTE *)v42 + v40) = 0;
          v66 = 1;
          if ((SHIBYTE(v65) & 0x80000000) == 0)
          {
LABEL_79:
            if (!v63)
              goto LABEL_88;
            goto LABEL_86;
          }
LABEL_85:
          operator delete(v64[0]);
          if (!v63)
          {
LABEL_88:
            if (object)
              os_release(object);
            os_log_pack_send();
            goto LABEL_91;
          }
LABEL_86:
          if (SHIBYTE(v62) < 0)
            operator delete(v61[0]);
          goto LABEL_88;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_75;
    }
LABEL_93:
    if (!__lk.__m_)
    {
      v52 = 1;
      v53 = "unique_lock::lock: references null mutex";
      goto LABEL_123;
    }
    if (__lk.__owns_)
      break;
    std::mutex::lock(__lk.__m_);
    __lk.__owns_ = 1;
    if (v57)
      MEMORY[0x20BD0277C](&v56);
    if (!v55)
      goto LABEL_13;
    v45 = __p;
    __p = 0;
    if (!v45)
      goto LABEL_13;
    v46 = (std::__shared_weak_count *)v45[4];
    if (!v46)
      goto LABEL_103;
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v49 = (std::__shared_weak_count *)v45[2];
      if (v49)
      {
LABEL_104:
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    else
    {
LABEL_103:
      v49 = (std::__shared_weak_count *)v45[2];
      if (v49)
        goto LABEL_104;
    }
    operator delete(v45);
LABEL_13:
    if (!*(_QWORD *)(a1 + 144))
      goto LABEL_2;
  }
  v52 = 11;
  v53 = "unique_lock::lock: already locked";
LABEL_123:
  std::__throw_system_error(v52, v53);
  __break(1u);
}

void sub_208202F68(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_208203884(a1);
  operator delete(v1);
}

uint64_t sub_208202F7C(uint64_t a1)
{
  uint64_t result;

  result = a1 + 16;
  if (*(char *)(a1 + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_208202F98(uint64_t a1)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  while (*(_BYTE *)(a1 + 157) || *(_QWORD *)(a1 + 144))
    std::condition_variable::wait((std::condition_variable *)(a1 + 256), &v2);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

void sub_208203004(uint64_t a1, uint64_t *a2)
{
  std::__assoc_sub_state *v4;
  std::promise<void> v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
    sub_2082039C4(a1, &__lk);
  std::promise<void>::promise(&v5);
  std::promise<void>::get_future(&v5);
  sub_208203D30((_QWORD *)(a1 + 104), a2, (uint64_t *)&v5);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    std::__assoc_sub_state::wait(v4);
    std::future<void>::~future((std::future<void> *)&v4);
    MEMORY[0x20BD0277C](&v5);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_2082030EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::mutex *a11, char a12)
{
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(exception_object);
}

void sub_208203130(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
    sub_2082039C4(a1, &v4);
  sub_208203E64((_QWORD *)(a1 + 104), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_2082031C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_2082031DC(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
    sub_2082039C4(a1, &v4);
  sub_208203F80((_QWORD *)(a1 + 104), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_20820326C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208203288(uint64_t a1)
{
  return sub_208203884(a1 - 8);
}

void sub_208203290(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_208203884(a1 - 8);
  operator delete(v1);
}

uint64_t sub_2082032A8(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_2082032C4(uint64_t a1)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  while (*(_BYTE *)(a1 + 149) || *(_QWORD *)(a1 + 136))
    std::condition_variable::wait((std::condition_variable *)(a1 + 248), &v2);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

void sub_208203330(uint64_t a1, uint64_t *a2)
{
  std::__assoc_sub_state *v4;
  std::promise<void> v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (*(_QWORD *)(a1 + 136) == (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5)
    sub_2082039C4(a1 - 8, &__lk);
  std::promise<void>::promise(&v5);
  std::promise<void>::get_future(&v5);
  sub_208203D30((_QWORD *)(a1 + 96), a2, (uint64_t *)&v5);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    std::__assoc_sub_state::wait(v4);
    std::future<void>::~future((std::future<void> *)&v4);
    MEMORY[0x20BD0277C](&v5);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_208203418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::mutex *a11, char a12)
{
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(exception_object);
}

void sub_20820345C(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (*(_QWORD *)(a1 + 136) == (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5)
    sub_2082039C4(a1 - 8, &v4);
  sub_208203E64((_QWORD *)(a1 + 96), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_2082034EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_208203508(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (*(_QWORD *)(a1 + 136) == (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5)
    sub_2082039C4(a1 - 8, &v4);
  sub_208203F80((_QWORD *)(a1 + 96), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_208203598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2082035B4(void (**a1)(_QWORD))
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  void (*v3)(_QWORD);
  void (*v4)(_QWORD);
  void *v5;

  v2 = std::__thread_local_data();
  v3 = *a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  a1[1](a1[2]);
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    v5 = (void *)MEMORY[0x20BD023A4]();
    operator delete(v5);
  }
  operator delete(a1);
  return 0;
}

void sub_208203618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2080A83A4((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20820362C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v3;
      if (v4)
      {
        v5 = (std::__shared_weak_count *)v4[4];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v8 = (std::__shared_weak_count *)v4[2];
        if (!v8)
          goto LABEL_13;
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
          operator delete(v4);
        }
        else
        {
LABEL_13:
          operator delete(v4);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v11 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
    {
      v12 = (std::__shared_weak_count *)v11[4];
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v11[2];
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      operator delete(v11);
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v18 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v18;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

uint64_t sub_2082037C0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_BYTE *)(a1 + 24))
    MEMORY[0x20BD0277C](a1 + 16);
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
    {
      v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = (std::__shared_weak_count *)v2[2];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_208203884(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::unique_lock<std::mutex> v7;

  *(_QWORD *)a1 = off_24C08E2B8;
  *(_QWORD *)(a1 + 8) = &unk_24C08E300;
  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  atomic_store(1u, (unsigned __int8 *)(a1 + 156));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  std::mutex::unlock(v2);
  v7.__m_ = v2;
  v7.__owns_ = 1;
  std::mutex::lock(v2);
  while (*(_BYTE *)(a1 + 157) || *(_QWORD *)(a1 + 144))
    std::condition_variable::wait((std::condition_variable *)(a1 + 256), &v7);
  if (v7.__owns_)
    std::mutex::unlock(v7.__m_);
  std::thread::join((std::thread *)(a1 + 304));
  if (*(_BYTE *)(a1 + 312))
    std::thread::~thread((std::thread *)(a1 + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 256));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 208));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 160));
  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 112);
    v5 = *(void **)(a1 + 104);
    if (v4 != v3)
    {
      do
        v4 = sub_2082037C0(v4 - 32);
      while (v4 != v3);
      v5 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v5);
  }
  std::mutex::~mutex(v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_2082039C4(uint64_t a1, std::unique_lock<std::mutex> *__lk)
{
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  _BYTE *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = *(_DWORD *)(a1 + 152);
  switch(v3)
  {
    case 2:
      v43 = 0u;
      v44 = 0u;
      v31 = *(_QWORD *)(a1 + 104) + 32 * *(_QWORD *)(a1 + 128);
      sub_20820362C(v31, (uint64_t *)&v43);
      v34 = *(unsigned __int8 *)(v31 + 24);
      v33 = (_BYTE *)(v31 + 24);
      v32 = v34;
      v35 = (uint64_t *)(v33 - 8);
      if (v34 == BYTE8(v44))
      {
        if (v32)
        {
          v36 = v44;
          *(_QWORD *)&v44 = 0;
          v45 = *v35;
          *v35 = v36;
          MEMORY[0x20BD0277C](&v45);
        }
      }
      else if (v32)
      {
        MEMORY[0x20BD0277C](v35);
        *v33 = 0;
      }
      else
      {
        *v35 = v44;
        *(_QWORD *)&v44 = 0;
        *v33 = 1;
      }
      sub_2082037C0((uint64_t)&v43);
      v40 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5;
      v41 = *(_QWORD *)(a1 + 128) + 1;
      if (v41 < v40)
        v40 = 0;
      *(_QWORD *)(a1 + 128) = v41 - v40;
      --*(_QWORD *)(a1 + 144);
      break;
    case 1:
      while (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
        std::condition_variable::wait((std::condition_variable *)(a1 + 208), __lk);
      break;
    case 0:
      v5 = *(_BYTE **)(a1 + 104);
      v4 = *(_BYTE **)(a1 + 112);
      v6 = v4 - v5;
      if (v4 == v5)
      {
        v11 = 0;
        v8 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v10 = 0;
        if (v4)
          goto LABEL_40;
      }
      else
      {
        if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF1)
          sub_207CA420C();
        v7 = v6 >> 4;
        v8 = *(_QWORD *)(a1 + 144);
        v9 = 2 * v6;
        v10 = (char *)operator new(2 * v6);
        v11 = &v10[32 * v7];
        bzero(v10, v9);
        v12 = &v10[v9];
        if (v8)
        {
          v42 = v11;
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v8 = 0;
          v16 = v9 >> 5;
          do
          {
            while (1)
            {
              v17 = *(_QWORD *)(a1 + 104);
              v18 = (v13 + *(_QWORD *)(a1 + 128)) % (unint64_t)((*(_QWORD *)(a1 + 112) - v17) >> 5);
              v19 = (uint64_t *)(v17 + 32 * v18);
              LOBYTE(v43) = 0;
              BYTE8(v43) = 0;
              if (*((_BYTE *)v19 + 8))
              {
                v20 = *v19;
                *v19 = 0;
                *(_QWORD *)&v43 = v20;
                BYTE8(v43) = 1;
              }
              LOBYTE(v44) = 0;
              BYTE8(v44) = 0;
              if (*((_BYTE *)v19 + 24))
              {
                v21 = v17 + 32 * v18;
                *(_QWORD *)&v44 = *(_QWORD *)(v21 + 16);
                *(_QWORD *)(v21 + 16) = 0;
                BYTE8(v44) = 1;
              }
              sub_20820362C((uint64_t)&v10[32 * v15], (uint64_t *)&v43);
              v22 = &v10[32 * v15];
              v25 = v22[24];
              v24 = v22 + 24;
              v23 = v25;
              v26 = (uint64_t *)(v24 - 8);
              if (v25 == BYTE8(v44))
              {
                if (v23)
                {
                  v27 = v44;
                  *(_QWORD *)&v44 = 0;
                  v45 = *v26;
                  *v26 = v27;
                  MEMORY[0x20BD0277C](&v45);
                }
              }
              else if (v23)
              {
                MEMORY[0x20BD0277C](v26);
                *v24 = 0;
              }
              else
              {
                *v26 = v44;
                *(_QWORD *)&v44 = 0;
                *v24 = 1;
              }
              sub_2082037C0((uint64_t)&v43);
              v28 = v15 + 1;
              v29 = v15 + 1 >= v16 ? v16 : 0;
              if (v8 == v16)
                break;
              ++v8;
              v15 = v28 - v29;
              if (++v13 == *(_QWORD *)(a1 + 144))
                goto LABEL_27;
            }
            if (v14 + 1 >= v16)
              v30 = v16;
            else
              v30 = 0;
            v14 = v14 + 1 - v30;
            v8 = v16;
            v15 = v28 - v29;
            ++v13;
          }
          while (v13 != *(_QWORD *)(a1 + 144));
LABEL_27:
          v4 = *(_BYTE **)(a1 + 104);
          v11 = v42;
          if (!v4)
            goto LABEL_44;
          goto LABEL_40;
        }
        v15 = 0;
        v14 = 0;
        v4 = v5;
        if (v5)
        {
LABEL_40:
          v38 = *(_QWORD *)(a1 + 112);
          v39 = v4;
          if ((_BYTE *)v38 != v4)
          {
            do
              v38 = sub_2082037C0(v38 - 32);
            while ((_BYTE *)v38 != v4);
            v39 = *(void **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 112) = v4;
          operator delete(v39);
        }
      }
LABEL_44:
      *(_QWORD *)(a1 + 104) = v10;
      *(_QWORD *)(a1 + 112) = v12;
      *(_QWORD *)(a1 + 120) = v11;
      *(_QWORD *)(a1 + 128) = v14;
      *(_QWORD *)(a1 + 136) = v15;
      *(_QWORD *)(a1 + 144) = v8;
      break;
  }
}

uint64_t sub_208203D30(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;

  v4 = *a1 + 32 * a1[4];
  v5 = *a3;
  *a3 = 0;
  v19 = 1;
  v6 = *a2;
  *a2 = 0;
  v20 = v6;
  v21 = 1;
  v22 = v5;
  v18 = 0;
  v23 = 1;
  sub_20820362C(v4, &v20);
  v9 = *(unsigned __int8 *)(v4 + 24);
  v8 = (_BYTE *)(v4 + 24);
  v7 = v9;
  v10 = (uint64_t *)(v8 - 8);
  if (v9 == v23)
  {
    if (v7)
    {
      v11 = v22;
      v22 = 0;
      v24 = *v10;
      *v10 = v11;
      MEMORY[0x20BD0277C](&v24);
    }
  }
  else if (v7)
  {
    MEMORY[0x20BD0277C](v10);
    *v8 = 0;
  }
  else
  {
    *v10 = v22;
    v22 = 0;
    *v8 = 1;
  }
  sub_2082037C0((uint64_t)&v20);
  result = MEMORY[0x20BD0277C](&v18);
  v13 = (uint64_t)(a1[1] - *a1) >> 5;
  v14 = a1[5];
  v15 = a1[4] + 1;
  if (v15 >= v13)
    v16 = (uint64_t)(a1[1] - *a1) >> 5;
  else
    v16 = 0;
  a1[4] = v15 - v16;
  if (v14 == v13)
  {
    v17 = a1[3] + 1;
    if (v17 < v13)
      v13 = 0;
    a1[3] = v17 - v13;
  }
  else
  {
    a1[5] = v14 + 1;
  }
  return result;
}

uint64_t sub_208203E64(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v3 = *a1 + 32 * a1[4];
  v4 = *a2;
  *a2 = 0;
  v17 = v4;
  v18 = 1;
  LOBYTE(v19) = 0;
  v20 = 0;
  sub_20820362C(v3, &v17);
  v7 = *(unsigned __int8 *)(v3 + 24);
  v6 = (_BYTE *)(v3 + 24);
  v5 = v7;
  v8 = (uint64_t *)(v6 - 8);
  if (v7 == v20)
  {
    if (v5)
    {
      v9 = v19;
      v19 = 0;
      v21 = *v8;
      *v8 = v9;
      MEMORY[0x20BD0277C](&v21);
    }
  }
  else if (v5)
  {
    MEMORY[0x20BD0277C](v8);
    *v6 = 0;
  }
  else
  {
    *v8 = v19;
    v19 = 0;
    *v6 = 1;
  }
  result = sub_2082037C0((uint64_t)&v17);
  v11 = a1[5];
  v12 = a1[1];
  v13 = (v12 - *a1) >> 5;
  v14 = a1[4] + 1;
  if (v14 >= v13)
    v15 = (v12 - *a1) >> 5;
  else
    v15 = 0;
  a1[4] = v14 - v15;
  if (v11 == v13)
  {
    v16 = a1[3] + 1;
    if (v16 < v11)
      v11 = 0;
    a1[3] = v16 - v11;
  }
  else
  {
    a1[5] = v11 + 1;
  }
  return result;
}

uint64_t sub_208203F80(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;

  v3 = *a1 + 32 * a1[4];
  v4 = *a2;
  v16 = a2[1];
  v17 = 1;
  v18 = v4;
  *a2 = 0;
  a2[1] = 0;
  v19 = 1;
  sub_20820362C(v3, &v16);
  v7 = *(unsigned __int8 *)(v3 + 24);
  v6 = (_BYTE *)(v3 + 24);
  v5 = v7;
  v8 = (uint64_t *)(v6 - 8);
  if (v7 == v19)
  {
    if (v5)
    {
      v9 = v18;
      v18 = 0;
      v20 = *v8;
      *v8 = v9;
      MEMORY[0x20BD0277C](&v20);
    }
  }
  else if (v5)
  {
    MEMORY[0x20BD0277C](v8);
    *v6 = 0;
  }
  else
  {
    *v8 = v18;
    v18 = 0;
    *v6 = 1;
  }
  result = sub_2082037C0((uint64_t)&v16);
  v11 = (uint64_t)(a1[1] - *a1) >> 5;
  v12 = a1[5];
  v13 = a1[4] + 1;
  if (v13 >= v11)
    v14 = (uint64_t)(a1[1] - *a1) >> 5;
  else
    v14 = 0;
  a1[4] = v13 - v14;
  if (v12 == v11)
  {
    v15 = a1[3] + 1;
    if (v15 < v11)
      v11 = 0;
    a1[3] = v15 - v11;
  }
  else
  {
    a1[5] = v12 + 1;
  }
  return result;
}

void sub_20820409C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2082040AC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2082040CC(uint64_t a1)
{
  void *v2;

  sub_2082167E8((uint64_t)sub_208201DF8);
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

std::__fs::filesystem::path *sub_208204124@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__absolute(a2, a1, 0);
}

std::__fs::filesystem::path *sub_208204130@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__canonical(a2, a1, 0);
}

std::__fs::filesystem::path *sub_20820413C@<X0>(std::__fs::filesystem::path *__p@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__weakly_canonical(a2, __p, 0);
}

void sub_208204148(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::path v4;

  std::__fs::filesystem::__current_path(&v4, 0);
  sub_2082041C8(a2, a1, &v4);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
}

void sub_2082041AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2082041C8(std::__fs::filesystem::path *a1, std::__fs::filesystem::path *__p, const std::__fs::filesystem::path *a3)
{
  std::__fs::filesystem::path __pa;
  std::__fs::filesystem::path v6;

  std::__fs::filesystem::__weakly_canonical(&v6, __p, 0);
  std::__fs::filesystem::__weakly_canonical(&__pa, a3, 0);
  std::__fs::filesystem::path::lexically_relative(a1, &v6, &__pa);
  if ((SHIBYTE(__pa.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__pa.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_208204258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_2082042A4(std::__fs::filesystem::path *a1@<X1>, const std::__fs::filesystem::path *a2@<X2>, std::__fs::filesystem::path *a3@<X8>)
{
  sub_2082041C8(a3, a1, a2);
}

void sub_2082042AC(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::path v4;

  std::__fs::filesystem::__current_path(&v4, 0);
  sub_20820432C(a2, a1, &v4);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
}

void sub_208204310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20820432C(std::__fs::filesystem::path *a1, std::__fs::filesystem::path *__p, const std::__fs::filesystem::path *a3)
{
  std::string::size_type size;
  char v6;
  std::__fs::filesystem::path __base;
  std::__fs::filesystem::path v8;
  std::__fs::filesystem::path v9;

  std::__fs::filesystem::__weakly_canonical(&v8, __p, 0);
  std::__fs::filesystem::__weakly_canonical(&__base, a3, 0);
  std::__fs::filesystem::path::lexically_relative(&v9, &v8, &__base);
  size = HIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]);
  if ((v9.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v9.__pn_.__r_.__value_.__l.__size_;
  if (size)
  {
    *a1 = v9;
    goto LABEL_8;
  }
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *a1 = v8;
    if ((v6 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  sub_207CA40D8(a1, v8.__pn_.__r_.__value_.__l.__data_, v8.__pn_.__r_.__value_.__l.__size_);
  if ((*((_BYTE *)&v9.__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_7:
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
LABEL_8:
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
}

void sub_208204424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
  {
    operator delete(*(void **)(v21 - 40));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_208204498(std::__fs::filesystem::path *a1@<X1>, const std::__fs::filesystem::path *a2@<X2>, std::__fs::filesystem::path *a3@<X8>)
{
  sub_20820432C(a3, a1, a2);
}

void sub_2082044A0(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
  std::__fs::filesystem::__copy(__from, __to, (std::__fs::filesystem::copy_options)0, 0);
}

void sub_2082044B4(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt)
{
  std::__fs::filesystem::__copy(__from, __to, __opt, 0);
}

BOOL sub_2082044C8(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
  return std::__fs::filesystem::__copy_file(__from, __to, (std::__fs::filesystem::copy_options)0, 0);
}

BOOL sub_2082044DC(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt)
{
  return std::__fs::filesystem::__copy_file(__from, __to, __opt, 0);
}

void sub_2082044F0(int a1, std::__fs::filesystem::path *__existing_symlink, std::__fs::filesystem::path *__new_symlink)
{
  std::__fs::filesystem::__copy_symlink(__existing_symlink, __new_symlink, 0);
}

BOOL sub_208204500(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__create_directory(a2, 0);
}

BOOL sub_20820450C(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *__attributes)
{
  return std::__fs::filesystem::__create_directory(a2, __attributes, 0);
}

BOOL sub_20820451C(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__create_directories(a2, 0);
}

void sub_208204528(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_hard_link)
{
  std::__fs::filesystem::__create_hard_link(__to, __new_hard_link, 0);
}

void sub_208204538(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_symlink)
{
  std::__fs::filesystem::__create_symlink(__to, __new_symlink, 0);
}

void sub_208204548(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_symlink)
{
  std::__fs::filesystem::__create_directory_symlink(__to, __new_symlink, 0);
}

std::__fs::filesystem::path *sub_208204558@<X0>(std::__fs::filesystem::path *a1@<X8>)
{
  return std::__fs::filesystem::__current_path(a1, 0);
}

void sub_208204560(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__current_path(a2, 0);
}

BOOL sub_20820456C(int a1, std::__fs::filesystem::path *a2)
{
  BOOL v2;
  unsigned __int8 v4;

  std::__fs::filesystem::__status(a2, 0);
  if (v4)
    v2 = v4 == 255;
  else
    v2 = 1;
  return !v2;
}

BOOL sub_2082045A8(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *a3)
{
  return std::__fs::filesystem::__equivalent(a2, a3, 0);
}

uintmax_t sub_2082045B8(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__file_size(a2, 0);
}

uintmax_t sub_2082045C4(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__hard_link_count(a2, 0);
}

uint64_t sub_2082045D0(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__last_write_time(a2, 0).__d_.__rep_;
}

void sub_2082045DC(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::perms a3, std::__fs::filesystem::perm_options a4)
{
  std::__fs::filesystem::__permissions(a2, a3, a4, 0);
}

std::__fs::filesystem::path *sub_2082045F0@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__read_symlink(a2, a1, 0);
}

BOOL sub_2082045FC(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__remove(a2, 0);
}

uintmax_t sub_208204608(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__remove_all(a2, 0);
}

void sub_208204614(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
  std::__fs::filesystem::__rename(__from, __to, 0);
}

void sub_208204624(int a1, std::__fs::filesystem::path *a2, uintmax_t __size)
{
  std::__fs::filesystem::__resize_file(a2, __size, 0);
}

std::__fs::filesystem::space_info *sub_208204634@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::space_info *a2@<X8>)
{
  return std::__fs::filesystem::__space(a2, a1, 0);
}

std::__fs::filesystem::file_status sub_208204640(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__status(a2, 0);
}

std::__fs::filesystem::file_status sub_20820464C(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__symlink_status(a2, 0);
}

std::__fs::filesystem::path *sub_208204658@<X0>(std::__fs::filesystem::path *a1@<X8>)
{
  return std::__fs::filesystem::__temp_directory_path(a1, 0);
}

BOOL sub_208204660(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 4;
}

BOOL sub_208204698(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 5;
}

BOOL sub_2082046D0(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 2;
}

BOOL sub_208204708(int a1, std::__fs::filesystem::path *__p)
{
  return std::__fs::filesystem::__fs_is_empty(__p, 0);
}

BOOL sub_208204714(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 1;
}

BOOL sub_20820474C(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 6;
}

BOOL sub_208204784(int a1, std::__fs::filesystem::path *a2)
{
  unsigned __int8 v3;

  std::__fs::filesystem::__status(a2, 0);
  if (!v3)
    return 0;
  if (v3 == 255)
    return 0;
  return v3 - 4 < 0xFFFFFFFD;
}

BOOL sub_2082047DC(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 7;
}

BOOL sub_208204814(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__symlink_status(a2, 0);
  return v3 == 3;
}

void sub_20820484C(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = operator new(0x240uLL);
  v3 = MEMORY[0x24BEDB838];
  v4 = MEMORY[0x24BEDB838] + 64;
  v2[53] = MEMORY[0x24BEDB838] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *v2 = v5;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v5 - 24)) = v6;
  v2[1] = 0;
  v7 = (std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24));
  std::ios_base::init(v7, v2 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *v2 = v3 + 24;
  v2[53] = v4;
  MEMORY[0x20BD021B8](v2 + 2);
  std::ifstream::open();
  if (v2[17])
  {
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E3E0;
    v10 = operator new(0x20uLL);
    *v10 = &off_24C08E430;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v2;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08E7A8;
    v8[1].__shared_owners_ = (uint64_t)v2;
    v8[1].__shared_weak_owners_ = (uint64_t)v10;
    *a1 = &off_24C08E6E8;
    a1[1] = v8 + 1;
    a1[2] = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08E6E8;
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  }
}

void sub_208204A14(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_208204A3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_208204A5C(_Unwind_Exception *a1)
{
  char *v1;

  std::istream::~istream();
  MEMORY[0x20BD027B8](v1 + 424);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208204AA0(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = operator new(0x238uLL);
  v3 = MEMORY[0x24BEDB840];
  v4 = MEMORY[0x24BEDB840] + 64;
  v2[52] = MEMORY[0x24BEDB840] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *v2 = v5;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24));
  std::ios_base::init(v7, v2 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *v2 = v3 + 24;
  v2[52] = v4;
  MEMORY[0x20BD021B8](v2 + 1);
  std::ofstream::open();
  if (v2[16])
  {
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E480;
    v10 = operator new(0x20uLL);
    *v10 = &off_24C08E4D0;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = v2;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08E7D0;
    v8[1].__shared_owners_ = (uint64_t)v2;
    v8[1].__shared_weak_owners_ = (uint64_t)v10;
    *a1 = &off_24C08E710;
    a1[1] = v8 + 1;
    a1[2] = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_24C08E710;
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  }
}

void sub_208204C64(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_208204C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_208204CAC(_Unwind_Exception *a1)
{
  char *v1;

  std::ostream::~ostream();
  MEMORY[0x20BD027B8](v1 + 416);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208204CF0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *p_shared_owners;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  const std::__fs::filesystem::directory_entry *v8;
  const std::__fs::filesystem::directory_entry *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  void **v22;
  std::__shared_weak_count *cntrl;
  uint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;
  unint64_t v28;
  void *v29;
  std::__fs::filesystem::directory_iterator v30;
  std::__fs::filesystem::directory_iterator v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  MEMORY[0x20BD02608](&v31, a1, 0, a2);
  v30 = v31;
  if (v31.__imp_.__cntrl_)
  {
    p_shared_owners = &v31.__imp_.__cntrl_->__shared_owners_;
    do
      v5 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v5 + 1, (unint64_t *)p_shared_owners));
  }
  while (v30.__imp_.__ptr_)
  {
    v8 = std::__fs::filesystem::directory_iterator::__dereference(&v30);
    v9 = std::__fs::filesystem::directory_iterator::__dereference(&v30);
    if (((1 << v9->__data_.__cache_type_) & 0x17) != 0)
    {
      std::__fs::filesystem::__status(&v9->__p_, 0);
      v11 = (void **)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
        goto LABEL_14;
    }
    else
    {
      LOBYTE(v29) = v9->__data_.__type_;
      HIDWORD(v29) = v9->__data_.__non_sym_perms_;
      v11 = (void **)a3[1];
      v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
LABEL_14:
        v12 = (void **)*a3;
        v13 = ((uint64_t)v11 - *a3) >> 5;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 59)
          sub_207CA420C();
        v15 = v10 - (_QWORD)v12;
        if (v15 >> 4 > v14)
          v14 = v15 >> 4;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
          v16 = 0x7FFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        v36 = a3 + 2;
        if (v16)
        {
          if (v16 >> 59)
            sub_207CA3AB8();
          v17 = operator new(32 * v16);
          v18 = (uint64_t)&v17[4 * v13];
          v32 = v17;
          v33 = v18;
          v34 = v18;
          v35 = (char *)&v17[4 * v16];
          if ((SHIBYTE(v8->__p_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_23:
            v19 = *(_OWORD *)&v8->__p_.__pn_.__r_.__value_.__l.__data_;
            *(_QWORD *)(v18 + 16) = *((_QWORD *)&v8->__p_.__pn_.__r_.__value_.__l + 2);
            *(_OWORD *)v18 = v19;
            v17[4 * v13 + 3] = v29;
            v7 = v18 + 32;
            if (v11 == v12)
            {
LABEL_34:
              *a3 = v18;
              a3[1] = v7;
              a3[2] = (uint64_t)v35;
LABEL_35:
              if (v12)
                operator delete(v12);
              goto LABEL_8;
            }
            do
            {
LABEL_28:
              v21 = *((_OWORD *)v11 - 2);
              *(_QWORD *)(v18 - 16) = *(v11 - 2);
              *(_OWORD *)(v18 - 32) = v21;
              *(v11 - 3) = 0;
              *(v11 - 2) = 0;
              *(v11 - 4) = 0;
              *(_QWORD *)(v18 - 8) = *(v11 - 1);
              v18 -= 32;
              v11 -= 4;
            }
            while (v11 != v12);
            v12 = (void **)*a3;
            v22 = (void **)a3[1];
            *a3 = v18;
            a3[1] = v7;
            a3[2] = (uint64_t)v35;
            while (v22 != v12)
            {
              if (*((char *)v22 - 9) < 0)
                operator delete(*(v22 - 4));
              v22 -= 4;
            }
            goto LABEL_35;
          }
        }
        else
        {
          v17 = 0;
          v18 = 32 * v13;
          v32 = 0;
          v33 = 32 * v13;
          v34 = 32 * v13;
          v35 = 0;
          if ((SHIBYTE(v8->__p_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
        }
        sub_207CA40D8((_BYTE *)v18, v8->__p_.__pn_.__r_.__value_.__l.__data_, v8->__p_.__pn_.__r_.__value_.__l.__size_);
        v12 = (void **)*a3;
        v11 = (void **)a3[1];
        v18 = v33;
        v20 = v34;
        v17[4 * v13 + 3] = v29;
        v7 = v20 + 32;
        if (v11 == v12)
          goto LABEL_34;
        goto LABEL_28;
      }
    }
    if (SHIBYTE(v8->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(v11, v8->__p_.__pn_.__r_.__value_.__l.__data_, v8->__p_.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v6 = *(_OWORD *)&v8->__p_.__pn_.__r_.__value_.__l.__data_;
      v11[2] = (void *)v8->__p_.__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)v11 = v6;
    }
    v11[3] = v29;
    v7 = (uint64_t)(v11 + 4);
    a3[1] = (uint64_t)(v11 + 4);
LABEL_8:
    a3[1] = v7;
    std::__fs::filesystem::directory_iterator::__increment(&v30, 0);
  }
  cntrl = v30.__imp_.__cntrl_;
  if (v30.__imp_.__cntrl_)
  {
    v24 = &v30.__imp_.__cntrl_->__shared_owners_;
    do
      v25 = __ldaxr((unint64_t *)v24);
    while (__stlxr(v25 - 1, (unint64_t *)v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v26 = v31.__imp_.__cntrl_;
  if (v31.__imp_.__cntrl_)
  {
    v27 = &v31.__imp_.__cntrl_->__shared_owners_;
    do
      v28 = __ldaxr((unint64_t *)v27);
    while (__stlxr(v28 - 1, (unint64_t *)v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_208205014(_Unwind_Exception *a1)
{
  void **v1;

  sub_207D391C4(v1);
  _Unwind_Resume(a1);
}

void sub_208205028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  *(_QWORD *)(v2 + 8) = v3;
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va2);
  sub_207D391C4((void **)v2);
  _Unwind_Resume(a1);
}

_UNKNOWN **sub_20820507C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530850);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530850))
    return &off_253E50C88;
  __cxa_atexit((void (*)(void *))nullsub_156, &off_253E50C88, &dword_207C77000);
  __cxa_guard_release(&qword_254530850);
  return &off_253E50C88;
}

void sub_2082050EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2082050FC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20820511C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20820517C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_208205190(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2082051A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000208286EB0)
    return a1 + 24;
  if (((v3 & 0x8000000208286EB0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000208286EB0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208286EB0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_208205228(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208205238(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C08E480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208205258(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2082052B8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2082052CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2082052E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000208286FBALL)
    return a1 + 24;
  if (((v3 & 0x8000000208286FBALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000208286FBALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208286FBALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t sub_208205364(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2082053CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208205434(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_208205444(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2082054AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208205514(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_208205524(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20820558C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2082055F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_2082055FC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208205664(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2082056CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_2082056D4(unsigned __int8 a1)
{
  std::logic_error *exception;
  unsigned __int8 v3;
  std::string v4;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  v3 = a1;
  sub_2082057A0("Invalid ArithmeticType value '", &v3, (std::string *)"'");
  std::logic_error::logic_error(exception, &v4);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
}

void sub_208205758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
      goto LABEL_3;
  }
  else if (!v16)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_20820578C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2082057A0(char *__s, unsigned __int8 *a2, std::string *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  std::string v8;
  std::string **v9;
  std::string *v10;
  std::string *v11;
  _DWORD *v12;
  std::string *v13;
  std::string *v14;

  v7 = 0;
  sub_207DFF650(v6, __s);
  std::to_string(&v8, *a2);
  v10 = (std::string *)v6;
  v11 = &v8;
  v12 = v6;
  v13 = &v8;
  v14 = &v8;
  if (v7 == -1)
    sub_207CA9F48();
  v9 = &v10;
  ((void (*)(std::string ***, _DWORD *))off_24C08E818[v7])(&v9, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v10 = (std::string *)v6;
  v11 = a3;
  v12 = v6;
  v13 = a3;
  v14 = a3;
  if (v7 == -1)
    sub_207CA9F48();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _DWORD *))off_24C08E860[v7])(&v8, v6);
  if (v7 == -1)
    sub_207CA9F48();
  v10 = &v8;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C08E848[v7])(&v10, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C08E830[v7])(&v10, v6);
  return result;
}

void sub_2082058EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20820590C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2082058FCLL);
}

_QWORD *sub_208205930(_QWORD *a1, _BYTE *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "u8";
      v3 = 2;
      break;
    case 1:
      v2 = "u16";
      v3 = 3;
      break;
    case 2:
      v2 = "u32";
      v3 = 3;
      break;
    case 3:
      v2 = "u64";
      v3 = 3;
      break;
    case 5:
      v2 = "i8";
      v3 = 2;
      break;
    case 6:
      v2 = "i16";
      v3 = 3;
      break;
    case 7:
      v2 = "i32";
      v3 = 3;
      break;
    case 8:
      v2 = "i64";
      v3 = 3;
      break;
    case 0xB:
      v2 = "f32";
      v3 = 3;
      break;
    case 0xC:
      v2 = "f64";
      v3 = 3;
      break;
    default:
      v2 = "unknown arithmetic type";
      v3 = 23;
      break;
  }
  return sub_207CBAB98(a1, (uint64_t)v2, v3);
}

uint64_t *sub_208205A04(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  std::logic_error *exception;
  std::string v23;
  std::string v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  v4 = atomic_load((unsigned __int8 *)&qword_253E52CD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E52CD8))
  {
    sub_208205CA4();
    __cxa_atexit((void (*)(void *))sub_208206060, &qword_253E52CE0, &dword_207C77000);
    __cxa_guard_release(&qword_253E52CD8);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_207EFCDF4(a1, (uint64_t)&v25);
  v5 = qword_253E52CE8;
  if (!qword_253E52CE8)
    goto LABEL_41;
  v6 = SHIBYTE(v27);
  v7 = v25;
  if (v27 >= 0)
    v8 = &v25;
  else
    v8 = (void **)v25;
  if (v27 >= 0)
    v9 = HIBYTE(v27);
  else
    v9 = v26;
  v10 = &qword_253E52CE8;
  do
  {
    while (1)
    {
      v11 = *(char *)(v5 + 55);
      v12 = v11 >= 0 ? (const void *)(v5 + 32) : *(const void **)(v5 + 32);
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v5 + 55) : *(_QWORD *)(v5 + 40);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = (uint64_t *)v5;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
LABEL_25:
  if (v10 == &qword_253E52CE8)
    goto LABEL_41;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_207C96E30(", expected [u|i|f][{size}]", &v23, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  if (v9 < v18)
    goto LABEL_41;
LABEL_37:
  *a2 = *((_BYTE *)v10 + 56);
  if (v6 < 0)
    operator delete(v7);
  return a1;
}

void sub_208205C14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52CD8);
  _Unwind_Resume(a1);
}

void sub_208205C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_208205CA4()
{
  uint64_t v0;
  char *v1;
  void *v2;
  size_t v3;
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  int v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  void *v27;
  _BYTE v28[15];
  unsigned __int8 v29;
  _BYTE v30[24];
  int v31;
  char v32;
  _QWORD v33[2];
  uint64_t v34;
  __int16 v35;
  _QWORD v36[3];

  v0 = 0;
  v36[2] = *MEMORY[0x24BDAC8D0];
  v34 = 0x807060503020100;
  qword_253E52CE8 = 0;
  v35 = 3083;
  qword_253E52CF0 = 0;
  qword_253E52CE0 = (uint64_t)&qword_253E52CE8;
  v1 = (_BYTE *)(&xmmword_253E51FF8 + 8);
  do
  {
    while (1)
    {
      v31 = 0;
      sub_207E393A8((uint64_t)v33, (uint64_t)v30, (_BYTE *)&v34 + v0);
      if (v31 == -1)
        sub_207CA9F48();
      v33[0] = &v32;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C08E848[v31])(&v27, v33, v30);
      if (v31 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C08E830[v31])(v33, v30);
      v2 = v27;
      v36[0] = *(_QWORD *)v28;
      *(_QWORD *)((char *)v36 + 7) = *(_QWORD *)&v28[7];
      v3 = v29;
      v4 = (char)v29;
      v5 = operator new(0x40uLL);
      v5[4] = v2;
      v5[5] = v36[0];
      *(_QWORD *)((char *)v5 + 47) = *(_QWORD *)((char *)v36 + 7);
      *((_BYTE *)v5 + 55) = v4;
      v36[0] = 0;
      *(_QWORD *)((char *)v36 + 7) = 0;
      *((_BYTE *)v5 + 56) = *((_BYTE *)&v34 + v0);
      v6 = (uint64_t *)*((_QWORD *)v1 + 412);
      v8 = &qword_253E52CE8;
      v7 = qword_253E52CE8;
      if (v6 == &qword_253E52CE8)
        goto LABEL_52;
      v9 = qword_253E52CE8;
      if (qword_253E52CE8)
      {
        do
        {
          v8 = (uint64_t *)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        v10 = &qword_253E52CE8;
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *((char *)v8 + 55);
      if (v12 >= 0)
        v13 = v8 + 4;
      else
        v13 = (const void *)v8[4];
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v8 + 55);
      else
        v14 = v8[5];
      if (v4 >= 0)
        v15 = v5 + 4;
      else
        v15 = v2;
      if (v4 >= 0)
        v16 = v3;
      else
        v16 = v5[5];
      if (v16 >= v14)
        v17 = v14;
      else
        v17 = v16;
      v18 = memcmp(v13, v15, v17);
      if (!v18)
      {
        if (v14 < v16)
          goto LABEL_52;
LABEL_29:
        if (!v7)
        {
LABEL_58:
          v8 = &qword_253E52CE8;
          v19 = &qword_253E52CE8;
          goto LABEL_59;
        }
        while (1)
        {
          v8 = (uint64_t *)v7;
          v20 = *(unsigned __int8 *)(v7 + 55);
          v21 = *(_QWORD *)(v7 + 40);
          if ((v20 & 0x80u) == 0)
            v22 = (const void *)(v7 + 32);
          else
            v22 = *(const void **)(v7 + 32);
          if ((v20 & 0x80u) == 0)
            v23 = v20;
          else
            v23 = v21;
          if (v23 >= v16)
            v24 = v16;
          else
            v24 = v23;
          v25 = memcmp(v15, v22, v24);
          if (v25)
          {
            if (v25 < 0)
              goto LABEL_31;
LABEL_45:
            v26 = memcmp(v22, v15, v24);
            if (v26)
            {
              if ((v26 & 0x80000000) == 0)
                goto LABEL_54;
            }
            else if (v23 >= v16)
            {
              goto LABEL_54;
            }
            v7 = v8[1];
            if (!v7)
            {
              v19 = v8 + 1;
              goto LABEL_59;
            }
          }
          else
          {
            if (v16 >= v23)
              goto LABEL_45;
LABEL_31:
            v7 = *v8;
            v19 = v8;
            if (!*v8)
              goto LABEL_59;
          }
        }
      }
      if ((v18 & 0x80000000) == 0)
        goto LABEL_29;
LABEL_52:
      if (!v7)
        goto LABEL_58;
      v19 = v8 + 1;
      if (v8[1])
        break;
LABEL_59:
      *v5 = 0;
      v5[1] = 0;
      v5[2] = v8;
      *v19 = (uint64_t)v5;
      v1 = (char *)&xmmword_253E51FF8 + 8;
      if (*(_QWORD *)qword_253E52CE0)
      {
        qword_253E52CE0 = *(_QWORD *)qword_253E52CE0;
        v5 = (_QWORD *)*v19;
      }
      sub_207CC24B4((uint64_t *)qword_253E52CE8, v5);
      ++qword_253E52CF0;
      if (++v0 == 10)
        return;
    }
LABEL_54:
    if (v4 < 0)
      operator delete(v2);
    operator delete(v5);
    v1 = (_BYTE *)(&xmmword_253E51FF8 + 8);
    ++v0;
  }
  while (v0 != 10);
}

void sub_208205FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208206060(uint64_t a1)
{
  sub_207DC9BDC(*(char **)(a1 + 8));
  return a1;
}

void sub_208206088(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  char v11;
  char v12;

  LOBYTE(__p[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v5 = 0;
    if (*(_BYTE *)(a1 + 24))
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v4 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      v5 = 1;
    }
    LOBYTE(v6) = 0;
    v11 = 0;
    if (*(_BYTE *)(a1 + 88))
    {
      v2 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 48);
      v6 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v8 = v2;
      *(_OWORD *)v9 = *(_OWORD *)(a1 + 64);
      v10 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v11 = 1;
    }
    v12 = 1;
  }
  sub_207CCAFD0(0x16u, (__int128 *)__p, a2);
  if (v12)
  {
    if (!v11)
      goto LABEL_11;
    if (SHIBYTE(v10) < 0)
    {
      operator delete(v9[0]);
      if ((SHIBYTE(v7) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v5)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v6);
    if (!v5)
      return;
LABEL_12:
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
}

void sub_2082061A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2082061BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  char v11;
  char v12;

  LOBYTE(__p[0]) = 0;
  v12 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v5 = 0;
    if (*(_BYTE *)(a1 + 24))
    {
      *(_OWORD *)__p = *(_OWORD *)a1;
      v4 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      v5 = 1;
    }
    LOBYTE(v6) = 0;
    v11 = 0;
    if (*(_BYTE *)(a1 + 88))
    {
      v2 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 48);
      v6 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v8 = v2;
      *(_OWORD *)v9 = *(_OWORD *)(a1 + 64);
      v10 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v11 = 1;
    }
    v12 = 1;
  }
  sub_207CCAFD0(0x66u, (__int128 *)__p, a2);
  if (v12)
  {
    if (!v11)
      goto LABEL_11;
    if (SHIBYTE(v10) < 0)
    {
      operator delete(v9[0]);
      if ((SHIBYTE(v7) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v5)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v6);
    if (!v5)
      return;
LABEL_12:
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
}

void sub_2082062DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2082062F0(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 0;
  if (*(_BYTE *)a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_2082063D0(const char *a1, _BYTE *a2, uint64_t a3, _BYTE *a4)
{
  size_t v8;
  size_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  _QWORD __dst[2];
  unint64_t v16;
  int v17;
  _QWORD v18[5];
  _QWORD *v19;

  v17 = -1;
  v8 = strlen(a1);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __dst[1] = v9;
    v16 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v16) = v8;
  v10 = __dst;
  if (v8)
LABEL_8:
    memcpy(v10, a1, v9);
  *((_BYTE *)v10 + v9) = 0;
  v17 = 1;
  sub_207E393A8((uint64_t)&v14, (uint64_t)__dst, a2);
  v18[0] = __dst;
  v18[1] = a3;
  v18[2] = __dst;
  v18[3] = a3;
  v18[4] = a3;
  if (v17 == -1)
    sub_207CA9F48();
  v19 = v18;
  ((void (*)(_QWORD **, _QWORD *))off_24C08E890[v17])(&v19, __dst);
  sub_207E393A8((uint64_t)v18, (uint64_t)__dst, a4);
  if (v17 == -1)
    sub_207CA9F48();
  v18[0] = &v19;
  result = ((uint64_t (*)(_QWORD *, _QWORD *))off_24C08E8A8[v17])(v18, __dst);
  if (v17 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_24C08E878[v17])(v18, __dst);
  return result;
}

void sub_20820656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208206580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208206594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2082065A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2082065BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2082065D0(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 1;
  if (*(_BYTE *)a1 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_2082066B8(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 2;
  if (*(_BYTE *)a1 != 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_2082067A0(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 3;
  if (*(_BYTE *)a1 != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_208206888(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 5;
  if (*(_BYTE *)a1 != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_208206970(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 6;
  if (*(_BYTE *)a1 != 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_208206A58(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 7;
  if (*(_BYTE *)a1 != 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_208206B40(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 8;
  if (*(_BYTE *)a1 != 8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_208206C28(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 11;
  if (*(_BYTE *)a1 != 11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_208206D10(uint64_t a1)
{
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = 12;
  if (*(_BYTE *)a1 != 12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208206DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_208206DF8(unsigned __int8 *a1, _BYTE *a2)
{
  int v3;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  __int16 *v15;
  int v16;
  int *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  double v23;
  unint64_t v24;
  unint64_t *v25;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD *v29;
  float v30;
  float v31;
  double v32;
  double v33;
  _QWORD *v34;
  unsigned int *v35;
  _QWORD *v36;
  BOOL v37;
  _BOOL4 v38;
  BOOL v39;
  _BOOL4 v40;
  uint64_t v41;
  double v42;
  double v43;
  float v44;
  int8x8_t v45;
  int16x4_t v46;
  float v47;
  int16x4_t v48;
  uint64_t v49;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      sub_2082062F0((uint64_t)a1);
      v5 = (unsigned __int8 *)sub_2082062F0((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v5;
      switch(*a2)
      {
        case 0:
          goto LABEL_4;
        case 1:
          goto LABEL_38;
        case 2:
          goto LABEL_23;
        case 3:
          goto LABEL_20;
        case 5:
          goto LABEL_26;
        case 6:
          goto LABEL_27;
        case 7:
          goto LABEL_28;
        case 8:
          goto LABEL_31;
        case 0xB:
          goto LABEL_34;
        case 0xC:
          goto LABEL_35;
        default:
          goto LABEL_130;
      }
    case 1:
      sub_2082065D0((uint64_t)a1);
      v7 = (unsigned __int16 *)sub_2082065D0((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v7;
      switch(*a2)
      {
        case 0:
LABEL_4:
          sub_2082062F0((uint64_t)a2);
          v8 = *(unsigned __int8 *)sub_2082062F0((uint64_t)a2);
          goto LABEL_53;
        case 1:
LABEL_38:
          sub_2082065D0((uint64_t)a2);
          v8 = *(unsigned __int16 *)sub_2082065D0((uint64_t)a2);
          goto LABEL_53;
        case 2:
          goto LABEL_23;
        case 3:
          goto LABEL_20;
        case 5:
          goto LABEL_26;
        case 6:
          goto LABEL_27;
        case 7:
          goto LABEL_28;
        case 8:
          goto LABEL_31;
        case 0xB:
          goto LABEL_34;
        case 0xC:
          goto LABEL_35;
        default:
          goto LABEL_130;
      }
    case 2:
      sub_2082066B8((uint64_t)a1);
      v9 = (unsigned int *)sub_2082066B8((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v9;
      switch(*a2)
      {
        case 0:
          sub_2082062F0((uint64_t)a2);
          v10 = *(unsigned __int8 *)sub_2082062F0((uint64_t)a2);
          goto LABEL_48;
        case 1:
          sub_2082065D0((uint64_t)a2);
          v10 = *(unsigned __int16 *)sub_2082065D0((uint64_t)a2);
          goto LABEL_48;
        case 2:
          goto LABEL_43;
        case 3:
          goto LABEL_20;
        case 5:
          sub_208206888((uint64_t)a2);
          v10 = *(char *)sub_208206888((uint64_t)a2);
          goto LABEL_48;
        case 6:
          sub_208206970((uint64_t)a2);
          v10 = *(__int16 *)sub_208206970((uint64_t)a2);
LABEL_48:
          if (v6 < v10)
            return 0xFFFFFFFFLL;
          else
            return v6 > v10;
        case 7:
          sub_208206A58((uint64_t)a2);
          v35 = (unsigned int *)sub_208206A58((uint64_t)a2);
          goto LABEL_52;
        case 8:
          goto LABEL_31;
        case 0xB:
LABEL_34:
          sub_208206C28((uint64_t)a2);
          v30 = *(float *)sub_208206C28((uint64_t)a2);
          v31 = (float)v6;
          goto LABEL_92;
        case 0xC:
LABEL_35:
          sub_208206D10((uint64_t)a2);
          v32 = *(double *)sub_208206D10((uint64_t)a2);
          v33 = (double)v6;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 3:
      sub_2082067A0((uint64_t)a1);
      v11 = (uint64_t *)sub_2082067A0((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v12 = *v11;
      switch(*a2)
      {
        case 0:
          sub_2082062F0((uint64_t)a2);
          v13 = *(unsigned __int8 *)sub_2082062F0((uint64_t)a2);
          goto LABEL_61;
        case 1:
          sub_2082065D0((uint64_t)a2);
          v13 = *(unsigned __int16 *)sub_2082065D0((uint64_t)a2);
          goto LABEL_61;
        case 2:
          sub_2082066B8((uint64_t)a2);
          v13 = *(unsigned int *)sub_2082066B8((uint64_t)a2);
          goto LABEL_61;
        case 3:
          goto LABEL_44;
        case 5:
          sub_208206888((uint64_t)a2);
          v13 = *(char *)sub_208206888((uint64_t)a2);
          goto LABEL_61;
        case 6:
          sub_208206970((uint64_t)a2);
          v13 = *(__int16 *)sub_208206970((uint64_t)a2);
          goto LABEL_61;
        case 7:
          sub_208206A58((uint64_t)a2);
          v13 = *(int *)sub_208206A58((uint64_t)a2);
LABEL_61:
          v37 = v12 >= v13;
          v38 = v12 > v13;
          if (v37)
            return v38;
          else
            return 0xFFFFFFFFLL;
        case 8:
          sub_208206B40((uint64_t)a2);
          v36 = (_QWORD *)sub_208206B40((uint64_t)a2);
          goto LABEL_65;
        case 0xB:
          sub_208206C28((uint64_t)a2);
          v30 = *(float *)sub_208206C28((uint64_t)a2);
          v31 = (float)(unint64_t)v12;
          goto LABEL_92;
        case 0xC:
          sub_208206D10((uint64_t)a2);
          v32 = *(double *)sub_208206D10((uint64_t)a2);
          v33 = (double)(unint64_t)v12;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 5:
      sub_208206888((uint64_t)a1);
      v14 = (char *)sub_208206888((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v14;
      switch(*a2)
      {
        case 0:
          goto LABEL_11;
        case 1:
          goto LABEL_39;
        case 2:
          goto LABEL_23;
        case 3:
          goto LABEL_20;
        case 5:
          goto LABEL_26;
        case 6:
          goto LABEL_27;
        case 7:
          goto LABEL_28;
        case 8:
          goto LABEL_40;
        case 0xB:
          goto LABEL_36;
        case 0xC:
          goto LABEL_37;
        default:
          goto LABEL_130;
      }
    case 6:
      sub_208206970((uint64_t)a1);
      v15 = (__int16 *)sub_208206970((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v15;
      switch(*a2)
      {
        case 0:
LABEL_11:
          sub_2082062F0((uint64_t)a2);
          v16 = *(unsigned __int8 *)sub_2082062F0((uint64_t)a2);
          goto LABEL_77;
        case 1:
LABEL_39:
          sub_2082065D0((uint64_t)a2);
          v16 = *(unsigned __int16 *)sub_2082065D0((uint64_t)a2);
          goto LABEL_77;
        case 2:
LABEL_23:
          sub_2082066B8((uint64_t)a2);
          v27 = (_DWORD *)sub_2082066B8((uint64_t)a2);
          if (*v27 > v6)
            return 0xFFFFFFFFLL;
          else
            return *v27 < v6;
        case 3:
          goto LABEL_20;
        case 5:
LABEL_26:
          sub_208206888((uint64_t)a2);
          v16 = *(char *)sub_208206888((uint64_t)a2);
          goto LABEL_77;
        case 6:
LABEL_27:
          sub_208206970((uint64_t)a2);
          v16 = *(__int16 *)sub_208206970((uint64_t)a2);
          goto LABEL_77;
        case 7:
LABEL_28:
          sub_208206A58((uint64_t)a2);
          v28 = (_DWORD *)sub_208206A58((uint64_t)a2);
          if (*v28 > (int)v6)
            return 0xFFFFFFFFLL;
          else
            return *v28 < (int)v6;
        case 8:
LABEL_40:
          sub_208206B40((uint64_t)a2);
          v34 = (_QWORD *)sub_208206B40((uint64_t)a2);
          if (*v34 > (int)v6)
            return 0xFFFFFFFFLL;
          else
            return *v34 < (int)v6;
        case 0xB:
          goto LABEL_36;
        case 0xC:
          goto LABEL_37;
        default:
          goto LABEL_130;
      }
    case 7:
      sub_208206A58((uint64_t)a1);
      v17 = (int *)sub_208206A58((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v6 = *v17;
      switch(*a2)
      {
        case 0:
          sub_2082062F0((uint64_t)a2);
          v18 = *(unsigned __int8 *)sub_2082062F0((uint64_t)a2);
          goto LABEL_73;
        case 1:
          sub_2082065D0((uint64_t)a2);
          v18 = *(unsigned __int16 *)sub_2082065D0((uint64_t)a2);
          goto LABEL_73;
        case 2:
LABEL_43:
          sub_2082066B8((uint64_t)a2);
          v35 = (unsigned int *)sub_2082066B8((uint64_t)a2);
LABEL_52:
          v8 = *v35;
LABEL_53:
          if (v6 < v8)
            return 0xFFFFFFFFLL;
          else
            return v8 < v6;
        case 3:
LABEL_20:
          sub_2082067A0((uint64_t)a2);
          v25 = (unint64_t *)sub_2082067A0((uint64_t)a2);
          if (*v25 > v6)
            return 0xFFFFFFFFLL;
          else
            return *v25 < v6;
        case 5:
          sub_208206888((uint64_t)a2);
          v18 = *(char *)sub_208206888((uint64_t)a2);
          goto LABEL_73;
        case 6:
          sub_208206970((uint64_t)a2);
          v18 = *(__int16 *)sub_208206970((uint64_t)a2);
LABEL_73:
          if ((int)v6 < v18)
            return 0xFFFFFFFFLL;
          else
            return (int)v6 > v18;
        case 7:
          sub_208206A58((uint64_t)a2);
          v16 = *(_DWORD *)sub_208206A58((uint64_t)a2);
LABEL_77:
          if ((int)v6 < v16)
            return 0xFFFFFFFFLL;
          else
            return v16 < (int)v6;
        case 8:
LABEL_31:
          sub_208206B40((uint64_t)a2);
          v29 = (_QWORD *)sub_208206B40((uint64_t)a2);
          if (*v29 > (int64_t)v6)
            return 0xFFFFFFFFLL;
          else
            return *v29 < (uint64_t)v6;
        case 0xB:
LABEL_36:
          sub_208206C28((uint64_t)a2);
          v30 = *(float *)sub_208206C28((uint64_t)a2);
          v31 = (float)(int)v6;
          goto LABEL_92;
        case 0xC:
LABEL_37:
          sub_208206D10((uint64_t)a2);
          v32 = *(double *)sub_208206D10((uint64_t)a2);
          v33 = (double)(int)v6;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 8:
      sub_208206B40((uint64_t)a1);
      v19 = (uint64_t *)sub_208206B40((uint64_t)a1);
      LOBYTE(v3) = *a2;
      v12 = *v19;
      switch(*a2)
      {
        case 0:
          sub_2082062F0((uint64_t)a2);
          v20 = *(unsigned __int8 *)sub_2082062F0((uint64_t)a2);
          goto LABEL_85;
        case 1:
          sub_2082065D0((uint64_t)a2);
          v20 = *(unsigned __int16 *)sub_2082065D0((uint64_t)a2);
          goto LABEL_85;
        case 2:
          sub_2082066B8((uint64_t)a2);
          v20 = *(unsigned int *)sub_2082066B8((uint64_t)a2);
          goto LABEL_85;
        case 3:
LABEL_44:
          sub_2082067A0((uint64_t)a2);
          v36 = (_QWORD *)sub_2082067A0((uint64_t)a2);
LABEL_65:
          if ((unint64_t)v12 < *v36)
            return 0xFFFFFFFFLL;
          else
            return *v36 < (unint64_t)v12;
        case 5:
          sub_208206888((uint64_t)a2);
          v20 = *(char *)sub_208206888((uint64_t)a2);
          goto LABEL_85;
        case 6:
          sub_208206970((uint64_t)a2);
          v20 = *(__int16 *)sub_208206970((uint64_t)a2);
          goto LABEL_85;
        case 7:
          sub_208206A58((uint64_t)a2);
          v20 = *(int *)sub_208206A58((uint64_t)a2);
LABEL_85:
          v39 = v12 < v20;
          v40 = v12 > v20;
          if (v39)
            return 0xFFFFFFFFLL;
          else
            return v40;
        case 8:
          sub_208206B40((uint64_t)a2);
          v41 = *(_QWORD *)sub_208206B40((uint64_t)a2);
          if (v12 < v41)
            return 0xFFFFFFFFLL;
          else
            return v41 < v12;
        case 0xB:
          sub_208206C28((uint64_t)a2);
          v30 = *(float *)sub_208206C28((uint64_t)a2);
          v31 = (float)v12;
LABEL_92:
          if (v30 > v31)
            return 0xFFFFFFFFLL;
          else
            return v30 < v31;
        case 0xC:
          sub_208206D10((uint64_t)a2);
          v32 = *(double *)sub_208206D10((uint64_t)a2);
          v33 = (double)v12;
          goto LABEL_97;
        default:
          goto LABEL_130;
      }
    case 11:
      sub_208206C28((uint64_t)a1);
      v21 = *(float *)sub_208206C28((uint64_t)a1);
      LOBYTE(v3) = *a2;
      switch(*a2)
      {
        case 0:
          sub_2082062F0((uint64_t)a2);
          LOBYTE(v22) = *(_BYTE *)sub_2082062F0((uint64_t)a2);
          goto LABEL_106;
        case 1:
          sub_2082065D0((uint64_t)a2);
          LOWORD(v22) = *(_WORD *)sub_2082065D0((uint64_t)a2);
          goto LABEL_106;
        case 2:
          sub_2082066B8((uint64_t)a2);
          v22 = *(_DWORD *)sub_2082066B8((uint64_t)a2);
LABEL_106:
          v44 = (float)v22;
          goto LABEL_112;
        case 3:
          sub_2082067A0((uint64_t)a2);
          v44 = (float)*(unint64_t *)sub_2082067A0((uint64_t)a2);
          goto LABEL_112;
        case 5:
          sub_208206888((uint64_t)a2);
          v45.i8[0] = *(_BYTE *)sub_208206888((uint64_t)a2);
          v44 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v45)).i32[0];
          goto LABEL_112;
        case 6:
          sub_208206970((uint64_t)a2);
          v46.i16[0] = *(_WORD *)sub_208206970((uint64_t)a2);
          v44 = (float)vmovl_s16(v46).i32[0];
          goto LABEL_112;
        case 7:
          sub_208206A58((uint64_t)a2);
          v44 = (float)*(int *)sub_208206A58((uint64_t)a2);
          goto LABEL_112;
        case 8:
          sub_208206B40((uint64_t)a2);
          v44 = (float)*(uint64_t *)sub_208206B40((uint64_t)a2);
LABEL_112:
          if (v21 < v44)
            return 0xFFFFFFFFLL;
          else
            return v21 > v44;
        case 0xB:
          sub_208206C28((uint64_t)a2);
          v47 = *(float *)sub_208206C28((uint64_t)a2);
          if (v21 < v47)
            return 0xFFFFFFFFLL;
          else
            return v47 < v21;
        case 0xC:
          sub_208206D10((uint64_t)a2);
          v32 = *(double *)sub_208206D10((uint64_t)a2);
          v33 = v21;
LABEL_97:
          if (v32 > v33)
            return 0xFFFFFFFFLL;
          else
            return v32 < v33;
        default:
          goto LABEL_130;
      }
    case 12:
      sub_208206D10((uint64_t)a1);
      v23 = *(double *)sub_208206D10((uint64_t)a1);
      LOBYTE(v3) = *a2;
      switch(*a2)
      {
        case 0:
          sub_2082062F0((uint64_t)a2);
          LOBYTE(v24) = *(_BYTE *)sub_2082062F0((uint64_t)a2);
          goto LABEL_121;
        case 1:
          sub_2082065D0((uint64_t)a2);
          LOWORD(v24) = *(_WORD *)sub_2082065D0((uint64_t)a2);
          goto LABEL_121;
        case 2:
          sub_2082066B8((uint64_t)a2);
          LODWORD(v24) = *(_DWORD *)sub_2082066B8((uint64_t)a2);
          goto LABEL_121;
        case 3:
          sub_2082067A0((uint64_t)a2);
          v24 = *(_QWORD *)sub_2082067A0((uint64_t)a2);
LABEL_121:
          v42 = (double)v24;
          goto LABEL_127;
        case 5:
          sub_208206888((uint64_t)a2);
          v42 = (double)*(char *)sub_208206888((uint64_t)a2);
          goto LABEL_127;
        case 6:
          sub_208206970((uint64_t)a2);
          v48.i16[0] = *(_WORD *)sub_208206970((uint64_t)a2);
          v49 = vmovl_s16(v48).i32[0];
          goto LABEL_125;
        case 7:
          sub_208206A58((uint64_t)a2);
          v49 = *(int *)sub_208206A58((uint64_t)a2);
LABEL_125:
          v42 = (double)v49;
          goto LABEL_127;
        case 8:
          sub_208206B40((uint64_t)a2);
          v42 = (double)*(uint64_t *)sub_208206B40((uint64_t)a2);
          goto LABEL_127;
        case 0xB:
          sub_208206C28((uint64_t)a2);
          v42 = *(float *)sub_208206C28((uint64_t)a2);
LABEL_127:
          if (v23 < v42)
            return 0xFFFFFFFFLL;
          else
            return v23 > v42;
        case 0xC:
          sub_208206D10((uint64_t)a2);
          v43 = *(double *)sub_208206D10((uint64_t)a2);
          if (v23 < v43)
            return 0xFFFFFFFFLL;
          else
            return v43 < v23;
        default:
          goto LABEL_130;
      }
    default:
      break;
  }
LABEL_130:
  sub_2082056D4(v3);
}

_QWORD *sub_20820796C(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  std::string *v7;
  std::string::size_type size;
  unsigned __int16 *v9;
  unsigned int *v10;
  unint64_t *v11;
  char *v12;
  __int16 *v13;
  uint64_t *v14;
  int *v15;
  std::string v17;
  double v18;
  char v19;

  v4 = sub_207CBAB98(a1, (uint64_t)"{", 1);
  v17.__r_.__value_.__s.__data_[0] = *a2;
  v5 = sub_208205930(v4, &v17);
  sub_207CBAB98(v5, (uint64_t)",", 1);
  switch(*a2)
  {
    case 0u:
      v6 = (unsigned __int8 *)sub_2082062F0((uint64_t)a2);
      std::to_string(&v17, *v6);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 1u:
      v9 = (unsigned __int16 *)sub_2082065D0((uint64_t)a2);
      std::to_string(&v17, *v9);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 2u:
      v10 = (unsigned int *)sub_2082066B8((uint64_t)a2);
      std::to_string(&v17, *v10);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 3u:
      v11 = (unint64_t *)sub_2082067A0((uint64_t)a2);
      std::to_string(&v17, *v11);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 5u:
      v12 = (char *)sub_208206888((uint64_t)a2);
      std::to_string(&v17, *v12);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 6u:
      v13 = (__int16 *)sub_208206970((uint64_t)a2);
      std::to_string(&v17, *v13);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 7u:
      v15 = (int *)sub_208206A58((uint64_t)a2);
      std::to_string(&v17, *v15);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
      goto LABEL_52;
    case 8u:
      v14 = (uint64_t *)sub_208206B40((uint64_t)a2);
      std::to_string(&v17, *v14);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v17;
      else
        v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      else
        size = v17.__r_.__value_.__l.__size_;
LABEL_52:
      sub_207CBAB98(a1, (uint64_t)v7, size);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      break;
    case 0xBu:
      LODWORD(v18) = *(_DWORD *)sub_208206C28((uint64_t)a2);
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      sub_207E36B6C((uint64_t)&v19, &v17, (float *)&v18);
      break;
    case 0xCu:
      v18 = *(double *)sub_208206D10((uint64_t)a2);
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      sub_208080464((uint64_t)&v19, &v17, &v18);
      break;
    default:
      sub_2082056D4(*a2);
  }
  return sub_207CBAB98(a1, (uint64_t)"}", 1);
}

void sub_208207C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_208207C74(_DWORD ***a1)
{
  return sub_2080F2350(**a1, (char *)(*a1)[1]);
}

void sub_208207C80(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C08E878[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_207CAA110((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_208207E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208207E7C(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20820810C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_208208124(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_208208134()
{
  return std::__fs::filesystem::_FilesystemClock::now().__d_.__rep_;
}

uint64_t sub_20820814C()
{
  return std::__fs::filesystem::_FilesystemClock::now().__d_.__rep_;
}

uint64_t *sub_208208160(uint64_t *a1, _BYTE *a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  std::logic_error *exception;
  std::string v8;
  void *__p[2];
  uint64_t v10;

  v4 = atomic_load((unsigned __int8 *)&qword_2545309D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2545309D0))
  {
    sub_208208314();
    __cxa_atexit((void (*)(void *))sub_208208374, &qword_2545309B8, &dword_207C77000);
    __cxa_guard_release(&qword_2545309D0);
  }
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  sub_207EFCDF4(a1, (uint64_t)__p);
  v5 = sub_207D23544((uint64_t)&qword_2545309B8, (const void **)__p);
  if (v5 == &qword_2545309C0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  *a2 = *((_BYTE *)v5 + 56);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_2082082A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545309D0);
  _Unwind_Resume(a1);
}

void sub_2082082C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void sub_208208314()
{
  qword_2545309C8 = 0;
  qword_2545309C0 = 0;
  qword_2545309B8 = (uint64_t)&qword_2545309C0;
  sub_20820839C((_QWORD **)&qword_2545309B8, 0, 0, 7, 7);
}

void sub_20820835C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CFF9E4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_208208374(uint64_t a1)
{
  sub_207CFF9E4(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_20820839C(_QWORD **a1, int a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  size_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  int v33;
  _QWORD *v34;
  int v38;
  int v39;
  void *v40;
  _BYTE v41[15];
  unsigned __int8 v42;
  unsigned __int8 v43;
  _BYTE v44[24];
  int v45;
  char v46;
  _QWORD v47[2];
  _QWORD v48[4];

  v5 = a3;
  v6 = a2;
  v7 = a1;
  v48[2] = *MEMORY[0x24BDAC8D0];
  if (a2 != a4 || a3 != a5)
  {
    v8 = a1 + 1;
    while (1)
    {
      v43 = v6;
      v45 = 0;
      sub_207E0C834((uint64_t)v47, (uint64_t)v44, &v43);
      if (v45 == -1)
        sub_207CA9F48();
      v47[0] = &v46;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C08E9B0[v45])(&v40, v47, v44);
      if (v45 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C08E998[v45])(v47, v44);
      v9 = v40;
      v48[0] = *(_QWORD *)v41;
      *(_QWORD *)((char *)v48 + 7) = *(_QWORD *)&v41[7];
      v10 = v42;
      v11 = (char)v42;
      v12 = operator new(0x40uLL);
      v38 = v6;
      v39 = v5;
      v12[4] = v9;
      v12[5] = v48[0];
      *(_QWORD *)((char *)v12 + 47) = *(_QWORD *)((char *)v48 + 7);
      *((_BYTE *)v12 + 55) = v11;
      v48[0] = 0;
      *(_QWORD *)((char *)v48 + 7) = 0;
      *((_BYTE *)v12 + 56) = v5;
      v13 = v8;
      v14 = v7[1];
      if ((_QWORD *)*v7 == v8)
        goto LABEL_52;
      v15 = (_QWORD *)v7[1];
      v16 = v8;
      if (v14)
      {
        do
        {
          v13 = v15;
          v15 = (_QWORD *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v16[2];
          v17 = *v13 == (_QWORD)v16;
          v16 = v13;
        }
        while (v17);
      }
      v18 = *((char *)v13 + 55);
      if (v18 >= 0)
        v19 = v13 + 4;
      else
        v19 = (const void *)v13[4];
      if (v18 >= 0)
        v20 = *((unsigned __int8 *)v13 + 55);
      else
        v20 = v13[5];
      if (v11 >= 0)
        v21 = v12 + 4;
      else
        v21 = v9;
      if (v11 >= 0)
        v22 = v10;
      else
        v22 = v12[5];
      if (v22 >= v20)
        v23 = v20;
      else
        v23 = v22;
      v24 = memcmp(v19, v21, v23);
      if (v24)
      {
        if ((v24 & 0x80000000) == 0)
          goto LABEL_29;
LABEL_52:
        v25 = v13 + 1;
        if (v14)
          v26 = v13;
        else
          v26 = v8;
        if (!v14)
          v25 = v8;
        if (!*v25)
          goto LABEL_62;
LABEL_58:
        if (v11 < 0)
          operator delete(v9);
        operator delete(v12);
        v7 = a1;
        v6 = v38 + 1;
        v5 = v39 + 1;
        if (v38 + 1 == a4)
          goto LABEL_65;
      }
      else
      {
        if (v20 < v22)
          goto LABEL_52;
LABEL_29:
        v25 = v8;
        v26 = v8;
        if (v14)
        {
          while (1)
          {
            v26 = (_QWORD *)v14;
            v27 = *(unsigned __int8 *)(v14 + 55);
            v28 = *(_QWORD *)(v14 + 40);
            if ((v27 & 0x80u) == 0)
              v29 = (const void *)(v14 + 32);
            else
              v29 = *(const void **)(v14 + 32);
            if ((v27 & 0x80u) == 0)
              v30 = v27;
            else
              v30 = v28;
            if (v30 >= v22)
              v31 = v22;
            else
              v31 = v30;
            v32 = memcmp(v21, v29, v31);
            if (v32)
            {
              if (v32 < 0)
                goto LABEL_31;
LABEL_45:
              v33 = memcmp(v29, v21, v31);
              if (v33)
              {
                if ((v33 & 0x80000000) == 0)
                  goto LABEL_58;
              }
              else if (v30 >= v22)
              {
                goto LABEL_58;
              }
              v14 = v26[1];
              if (!v14)
              {
                v25 = v26 + 1;
                break;
              }
            }
            else
            {
              if (v22 >= v30)
                goto LABEL_45;
LABEL_31:
              v14 = *v26;
              v25 = v26;
              if (!*v26)
                break;
            }
          }
        }
LABEL_62:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v26;
        *v25 = v12;
        v7 = a1;
        v34 = (_QWORD *)**a1;
        if (v34)
        {
          *a1 = v34;
          v12 = (_QWORD *)*v25;
        }
        sub_207CC24B4(a1[1], v12);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
        v6 = v38 + 1;
        v5 = v39 + 1;
        if (v38 + 1 == a4)
        {
LABEL_65:
          if (v5 == a5)
            return;
        }
      }
    }
  }
}

void sub_2082086EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,int a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

_QWORD *sub_208208754(_QWORD *a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  void *__p[2];
  unsigned __int8 v10;
  _BYTE v11[24];
  int v12;
  char v13;
  char *v14;

  v7 = *a2;
  v8 = *((_BYTE *)a2 + 8);
  v12 = 0;
  sub_208208890((uint64_t)&v14, (uint64_t)v11, (uint64_t)&v7);
  if (v12 == -1)
    sub_207CA9F48();
  v14 = &v13;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C08EA10[v12])(__p, &v14, v11);
  if (v12 != -1)
    ((void (*)(char **, _BYTE *))off_24C08E9E0[v12])(&v14, v11);
  if ((v10 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v4 = v10;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20820884C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208208868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20820887C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208208890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  std::string::size_type v15;
  std::string v16;
  const char *v17;
  const char *v18;
  void *v19[2];
  unsigned __int8 v20;
  uint64_t v21;
  std::string v22;

  v16.__r_.__value_.__r.__words[0] = a2;
  v16.__r_.__value_.__l.__size_ = (std::string::size_type)"{";
  v16.__r_.__value_.__r.__words[2] = a2;
  v17 = "{";
  v18 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_20;
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *))off_24C08E9C8[v3])(&v22);
  v21 = *(_QWORD *)a3;
  sub_207EFE018(&v21);
  std::string::push_back(&v22, 32);
  v16 = v22;
  memset(&v22, 0, sizeof(v22));
  sub_208214C68(1, 1000000000, v19);
  if ((v20 & 0x80u) == 0)
    v6 = v19;
  else
    v6 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v7 = v20;
  else
    v7 = (std::string::size_type)v19[1];
  v8 = std::string::append(&v16, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (((char)v20 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_18:
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
  operator delete(v19[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_10:
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_19:
  operator delete(v22.__r_.__value_.__l.__data_);
LABEL_11:
  v16.__r_.__value_.__r.__words[0] = a2;
  v16.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v16.__r_.__value_.__r.__words[2] = a2;
  v17 = (const char *)__p;
  v18 = (const char *)__p;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
    sub_207CA9F48();
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24C08E9F8[v10])(&v22, a2);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  v16.__r_.__value_.__r.__words[0] = a2;
  v16.__r_.__value_.__l.__size_ = (std::string::size_type)",";
  v16.__r_.__value_.__r.__words[2] = a2;
  v17 = ",";
  v18 = ",";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_20;
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24C08E9C8[v11])(&v22, a2);
  sub_207E0C834((uint64_t)&v16, a2, (unsigned __int8 *)(a3 + 8));
  v16.__r_.__value_.__r.__words[0] = a2;
  v16.__r_.__value_.__l.__size_ = (std::string::size_type)"}";
  v16.__r_.__value_.__r.__words[2] = a2;
  v17 = "}";
  v18 = "}";
  v12 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v12 == -1)
LABEL_20:
    sub_207CA9F48();
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C08E9C8[v12])(&v22, a2);
}

void sub_208208AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v29 - 33) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)(v29 - 56));
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v29 - 33) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_208208B24(uint64_t a1, char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  sub_208208BE0(a2);
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_208208BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208208BE0(char *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_207CAB414)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C08EB10[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C08EAF8[v3])(v5, v2);
  return result;
}

void sub_208208CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208208CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_208208D08(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  sub_207F1FE34(a2);
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_208208DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208208DC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10[2];
  unsigned __int8 v11;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v4, (uint64_t)&__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v6 = sub_207CBAB98(v5, (uint64_t)&__p, 1);
  if (*(char *)(a2 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_2082144D8(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v11 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (void **)v10[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)v10[1];
  v9 = sub_207CBAB98(v6, (uint64_t)v7, v8);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_207CBAB98(v9, (uint64_t)&__p, 1);
  if ((char)v11 < 0)
    operator delete(v10[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_208208EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208208F18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;

  if (*a2)
  {
    v2 = result;
    v3 = a2[1];
    v4 = *(_QWORD *)(result + 40);
    v5 = 2 * *a2;
    do
    {
      if (v4)
      {
        v6 = *(_QWORD **)(v2 + 24);
        v7 = *(_BYTE *)(v2 + 32);
        sub_207CBAB98(v6, (uint64_t)&v7, 1);
      }
      v3 += 2;
      result = std::ostream::operator<<();
      v4 = *(_QWORD *)(v2 + 40) + 1;
      *(_QWORD *)(v2 + 40) = v4;
      v5 -= 2;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_208208F9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;

  if (*a2)
  {
    v2 = result;
    v3 = a2[1];
    v4 = *(_QWORD *)(result + 40);
    v5 = 4 * *a2;
    do
    {
      if (v4)
      {
        v6 = *(_QWORD **)(v2 + 24);
        v7 = *(_BYTE *)(v2 + 32);
        sub_207CBAB98(v6, (uint64_t)&v7, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v2 + 24) + *(_QWORD *)(**(_QWORD **)(v2 + 24) - 24) + 16) = 9;
      v3 += 4;
      result = std::ostream::operator<<();
      v4 = *(_QWORD *)(v2 + 40) + 1;
      *(_QWORD *)(v2 + 40) = v4;
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

void sub_208209034(uint64_t a1, std::string::size_type *a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16[2];
  unsigned __int8 v17;
  std::string __dst;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v4, (uint64_t)&__p, 1);
  }
  v5 = *a2;
  if (*a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = (const void *)a2[1];
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v11 = sub_207CBAB98(v10, (uint64_t)&__p, 1);
  v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_207CA40D8(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  sub_2082144D8(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v17 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v14 = v17;
  else
    v14 = (uint64_t)v16[1];
  v15 = sub_207CBAB98(v11, (uint64_t)v13, v14);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_207CBAB98(v15, (uint64_t)&__p, 1);
  if ((char)v17 < 0)
  {
    operator delete(v16[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_26:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  if (v12 < 0)
    goto LABEL_26;
LABEL_24:
  ++*(_QWORD *)(a1 + 40);
}

void sub_2082091EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  char v26;

  if (v26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20820923C(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const char *p_p;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v14 = strtol(p_p, 0, 10);
    v15 = 127;
    if (v14 < 127)
      v15 = v14;
    if (v15 <= -128)
      LODWORD(v15) = -128;
    *a2 = v15;
    if (!(_DWORD)v15)
    {
      v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        v18 = MEMORY[0x24BDAC740];
        while (1)
        {
          v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500))
            break;
          v16 = (void **)((char *)v16 + 1);
          if (!--v17)
            goto LABEL_35;
        }
        *(_BYTE *)(a1 + 130) = 1;
      }
    }
LABEL_35:
    if ((char)v23 < 0)
      operator delete(__p);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = __p;
    sub_207F1C430(v5, (uint64_t)&__p);
    v7 = v23;
    if ((v23 & 0x80u) == 0)
      v8 = (unsigned __int8 *)&__p;
    else
      v8 = (unsigned __int8 *)__p;
    if ((v23 & 0x80u) != 0)
      v7 = v22;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *v8++;
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_208209468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208209484(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const char *p_p;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v14 = strtol(p_p, 0, 10);
    v15 = 255;
    if (v14 < 255)
      v15 = v14;
    *a2 = v15 & ~(v15 >> 63);
    if (v15 <= 0)
    {
      v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        v18 = MEMORY[0x24BDAC740];
        while (1)
        {
          v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500))
            break;
          v16 = (void **)((char *)v16 + 1);
          if (!--v17)
            goto LABEL_33;
        }
        *(_BYTE *)(a1 + 130) = 1;
      }
    }
LABEL_33:
    if ((char)v23 < 0)
      operator delete(__p);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = __p;
    sub_207F1C430(v5, (uint64_t)&__p);
    v7 = v23;
    if ((v23 & 0x80u) == 0)
      v8 = (unsigned __int8 *)&__p;
    else
      v8 = (unsigned __int8 *)__p;
    if ((v23 & 0x80u) != 0)
      v7 = v22;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *v8++;
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_2082096B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2082096CC(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD02254](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_2082098F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_208209920(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD02260](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_208209B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_208209B74(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD0223C](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_208209D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_208209DC8(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD02248](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_208209FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20820A01C(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD0226C](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20820A244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20820A270(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD02278](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20820A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20820A4C4(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  _QWORD *v13;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[56];
  void *__p;
  char v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  double v28;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v26);
    sub_207CBD0A8((uint64_t)v19, &v26, 24);
    v28 = 0.0;
    v13 = (_QWORD *)MEMORY[0x20BD02224](v19, &v28);
    if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) == 0)
    {
      _S0 = v28;
      __asm { FCVT            H0, S0 }
      *a2 = LOWORD(_S0);
    }
    if ((v22[*((_QWORD *)v19[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v19[0] = *(void **)MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v19 + *((_QWORD *)v19[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v20 = v18;
    v21 = MEMORY[0x24BEDB848] + 16;
    if (v24 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v25);
    if (v27 < 0)
      operator delete((void *)v26);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v19[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v19[0]);
    sub_207F1C430(v5, (uint64_t)v19);
    v7 = (char *)HIBYTE(v20);
    if (v20 >= 0)
      v8 = v19;
    else
      v8 = (void **)v19[0];
    if (v20 < 0)
      v7 = (char *)v19[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v20) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v19[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20820A714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_207CA29B0((uint64_t)va);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_20820A740(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD02230](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20820A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20820A994(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    sub_20820B068(a1, (uint64_t)&v21);
    sub_207CBD0A8((uint64_t)v14, &v21, 24);
    MEMORY[0x20BD02224](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_207F1C430(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20820ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA29B0((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20820ABE8(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  BOOL v11;
  std::string *p_p;
  int v14;
  std::string::size_type v15;
  std::string::size_type size;
  std::string::value_type v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::value_type v20;
  std::string::size_type v21;
  std::string *v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  std::string __p;
  std::string v27;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20820AF44(a1, v4))
  {
    p_p = &__p;
    sub_20820B068(a1, (uint64_t)&__p);
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v15 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    memset(&v27, 0, sizeof(v27));
    std::string::reserve(&v27, size);
    if (v14 < 0)
      p_p = (std::string *)v15;
    for (; size; --size)
    {
      v17 = __tolower(p_p->__r_.__value_.__s.__data_[0]);
      std::string::push_back(&v27, v17);
      p_p = (std::string *)((char *)p_p + 1);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      v18 = v27.__r_.__value_.__l.__size_;
    if (v18)
    {
      if (v18 == 1)
      {
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v27;
        else
          v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if (v19->__r_.__value_.__s.__data_[0] == 48)
          goto LABEL_68;
      }
      else if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v19 = &v27;
      }
      else
      {
        v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      memset(&__p, 0, sizeof(__p));
      std::string::reserve(&__p, v18);
      do
      {
        v20 = __tolower(v19->__r_.__value_.__s.__data_[0]);
        std::string::push_back(&__p, v20);
        v19 = (std::string *)((char *)v19 + 1);
        --v18;
      }
      while (v18);
      v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = __p.__r_.__value_.__l.__size_;
      if (v21 == 5)
      {
        v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &__p;
        v23 = bswap32(v22->__r_.__value_.__l.__data_);
        if (v23 == 1717660787)
        {
          v24 = v22->__r_.__value_.__s.__data_[4] - 101;
        }
        else if (v23 < 0x66616C73)
        {
          v24 = -1;
        }
        else
        {
          v24 = 1;
        }
        v25 = v24 == 0;
      }
      else
      {
        v25 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v25)
      {
        *a2 = 1;
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_71;
      }
    }
LABEL_68:
    *a2 = 0;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_71:
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    v27.__r_.__value_.__s.__data_[0] = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = v27.__r_.__value_.__s.__data_[0];
    sub_207F1C430(v5, (uint64_t)&v27);
    v7 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v27;
    else
      v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = v27.__r_.__value_.__l.__size_;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = v8->__r_.__value_.__s.__data_[0];
        v8 = (std::string *)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20820AEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20820AF44(uint64_t a1, unsigned __int8 a2)
{
  const char *v3;
  int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _BOOL8 v11;
  const char *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  int v17;
  void **v19;
  uint64_t v20;
  unsigned __int8 v21;

  v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v3 = *(const char **)v3;
  v4 = a2;
  sub_207F1C430(v3, (uint64_t)&v19);
  v5 = v21;
  if ((v21 & 0x80u) == 0)
    v6 = (void **)&v19;
  else
    v6 = v19;
  if ((v21 & 0x80u) != 0)
    v5 = v20;
  if (!v5)
  {
    v9 = 0;
    if (((char)v21 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_20:
    operator delete(v19);
    if (v9)
      return 1;
    goto LABEL_21;
  }
  v7 = v5 - 1;
  do
  {
    v8 = *(unsigned __int8 *)v6;
    v6 = (void **)((char *)v6 + 1);
    v9 = v8 == v4;
  }
  while (v8 != v4 && v7-- != 0);
  if ((char)v21 < 0)
    goto LABEL_20;
LABEL_16:
  if (v9)
    return 1;
LABEL_21:
  v13 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v13 = *(const char **)v13;
  sub_207F1C430(v13, (uint64_t)&v19);
  v14 = v21;
  if ((v21 & 0x80u) == 0)
    v15 = (void **)&v19;
  else
    v15 = v19;
  if ((v21 & 0x80u) != 0)
    v14 = v20;
  if (v14)
  {
    v16 = v14 - 1;
    do
    {
      v17 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v11 = v17 == v4;
    }
    while (v17 != v4 && v16-- != 0);
    if (((char)v21 & 0x80000000) == 0)
      return v11;
  }
  else
  {
    v11 = 0;
    if (((char)v21 & 0x80000000) == 0)
      return v11;
  }
  operator delete(v19);
  return v11;
}

void sub_20820B068(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  char v6;
  unsigned __int8 v7;
  const char *v8;
  unint64_t v9;
  void **v10;
  char *v11;
  int v12;
  BOOL v13;
  void *v15[2];
  unsigned __int8 v16;

  v4 = (std::string *)(a1 + 136);
  std::string::reserve((std::string *)(a1 + 136), 0x20uLL);
  if (*(char *)(a1 + 159) < 0)
  {
    v5 = *(std::string **)(a1 + 136);
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 159) = 0;
    v5 = v4;
  }
  v5->__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v15[0]) = 0;
  std::istream::read();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    v6 = 0;
    v7 = v15[0];
    while (1)
    {
      if ((v6 & 1) != 0)
      {
        if (v7 == 34)
        {
          if (std::istream::peek() != 34)
          {
            v6 = 0;
            goto LABEL_8;
          }
          std::istream::seekg();
          v7 = 34;
        }
      }
      else
      {
        if (sub_20820AF44(a1, v7))
        {
          v8 = (const char *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v8 = *(const char **)v8;
          sub_207F1C430(v8, (uint64_t)v15);
          v9 = v16;
          if ((v16 & 0x80u) == 0)
            v10 = v15;
          else
            v10 = (void **)v15[0];
          if ((v16 & 0x80u) != 0)
            v9 = (unint64_t)v15[1];
          if (v9)
          {
            v11 = (char *)(v9 - 1);
            do
            {
              v12 = *(unsigned __int8 *)v10;
              v10 = (void **)((char *)v10 + 1);
              v13 = v12 == v7;
            }
            while (v12 != v7 && v11-- != 0);
            if (((char)v16 & 0x80000000) == 0)
              goto LABEL_35;
LABEL_38:
            operator delete(v15[0]);
            *(_BYTE *)(a1 + 131) = v13;
            if ((*(char *)(a1 + 159) & 0x80000000) == 0)
              goto LABEL_19;
          }
          else
          {
            v13 = 0;
            if ((char)v16 < 0)
              goto LABEL_38;
LABEL_35:
            *(_BYTE *)(a1 + 131) = v13;
            if ((*(char *)(a1 + 159) & 0x80000000) == 0)
              goto LABEL_19;
          }
LABEL_36:
          sub_207CA40D8((_BYTE *)a2, *(void **)(a1 + 136), *(_QWORD *)(a1 + 144));
          return;
        }
        if (v7 == 34)
        {
          v6 = 1;
          goto LABEL_8;
        }
      }
      std::string::push_back(v4, v7);
LABEL_8:
      LOBYTE(v15[0]) = 0;
      std::istream::read();
      v7 = 0;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
      {
        if ((v6 & 1) != 0)
          *(_BYTE *)(a1 + 129) = 1;
        break;
      }
    }
  }
  if (*(char *)(a1 + 159) < 0)
    goto LABEL_36;
LABEL_19:
  *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
}

void sub_20820B268(uint64_t a1, uint64_t a2)
{
  size_t v4;
  const void *p_src;
  std::runtime_error *exception;
  void *__src;
  size_t v8;
  unsigned __int8 v9;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  sub_20820B068(a1, (uint64_t)&__src);
  if ((char)v9 < 0)
  {
    v4 = v8;
    if (v8 == *(_QWORD *)a2)
    {
      p_src = __src;
      if (!v8 || __src)
      {
        if (!v8)
        {
LABEL_15:
          operator delete(__src);
          goto LABEL_16;
        }
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        p_src = 0;
      }
      goto LABEL_14;
    }
LABEL_17:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "loaded binary data size does not match given data blob size");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v4 = v9;
  if (*(_QWORD *)a2 != v9)
    goto LABEL_17;
  if (!v9)
    goto LABEL_16;
  p_src = &__src;
LABEL_14:
  memmove(*(void **)(a2 + 8), p_src, v4);
  if ((char)v9 < 0)
    goto LABEL_15;
LABEL_16:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20820B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20820B3F0(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;

  v2 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v9 = (uint64_t *)(v2 + 16);
    v3 = *a2;
    if (*a2)
    {
      v4 = (char *)a2[1];
      do
      {
        v5 = *v4++;
        result = (uint64_t)sub_2082100A4(&v9, v5);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = (char *)a2[1];
      do
      {
        while (1)
        {
          v8 = *v7;
          if ((v8 & 0x80000000) == 0)
            break;
          v10 = -52;
          v11 = v8;
          result = std::ostream::write();
          ++v7;
          if (!--v6)
            return result;
        }
        v12 = *v7;
        result = std::ostream::write();
        ++v7;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_20820B4B0(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned int v4;
  _WORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  char v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;

  if (*(_BYTE *)(result + 40))
  {
    v8 = (uint64_t *)(result + 16);
    if (*a2)
    {
      v2 = (unsigned __int16 *)a2[1];
      v3 = 2 * *a2;
      do
      {
        v4 = *v2++;
        result = (uint64_t)sub_2082105A8(&v8, v4);
        v3 -= 2;
      }
      while (v3);
    }
  }
  else if (*a2)
  {
    v5 = (_WORD *)a2[1];
    v6 = 2 * *a2;
    do
    {
      v7 = (unsigned __int16)*v5;
      if (v7 <= 0x7F)
      {
        v13 = *v5;
      }
      else if (v7 > 0xFF)
      {
        v9 = -51;
        v10 = __rev16(v7);
      }
      else
      {
        v11 = -52;
        v12 = v7;
      }
      result = std::ostream::write();
      ++v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20820B5A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE v9[2];
  unsigned int v10;

  v2 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v8 = (uint64_t *)(v2 + 16);
    if (*a2)
    {
      v3 = (unsigned int *)a2[1];
      v4 = 4 * *a2;
      do
      {
        result = (uint64_t)sub_208211A6C((uint64_t)v9, &v8, v3++);
        v4 -= 4;
      }
      while (v4);
    }
  }
  else if (*a2)
  {
    v5 = (unsigned int *)a2[1];
    v6 = 4 * *a2;
    do
    {
      v7 = *v5++;
      v9[1] = -54;
      v10 = bswap32(v7);
      result = std::ostream::write();
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

void sub_20820B648(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20820CA98(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_2082122C8((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820B6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820B6F8(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;

  sub_20820CA98(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x100)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v10, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820B7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820B7DC(uint64_t a1, _WORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20820CA98(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20821232C((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820B874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820B88C(uint64_t a1, _WORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;

  sub_20820CA98(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x10000)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v10, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820B958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820B970(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20820CA98(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_208212394((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820BA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820BA20(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;

  sub_20820CA98(a1, (uint64_t)&v12);
  if (v12 != 2 || HIDWORD(v13) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v11, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v13;
  v4 = v14;
  v14 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20820BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820BB04(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20820CA98(a1, (uint64_t)&v11);
  if (v11 != 3 && (v11 != 2 || v12 < 0))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v10, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820BBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820BBEC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20820CA98(a1, (uint64_t)&v11);
  if (v11 != 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v10, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  v3 = v13;
  *a2 = v12;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820BCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820BCC8(uint64_t a1, float *a2)
{
  float v3;
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  sub_20820CA98(a1, (uint64_t)&v12);
  if (v12 == 2)
  {
    *a2 = (float)(unint64_t)v13;
    v4 = v14;
    v14 = 0;
    if (!v4)
      return;
    goto LABEL_9;
  }
  if (v12 == 3)
  {
    *a2 = (float)v13;
    v4 = v14;
    v14 = 0;
    if (!v4)
      return;
    goto LABEL_9;
  }
  if (v12 != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v11, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  v3 = *(double *)&v13;
  *a2 = v3;
  v4 = v14;
  v14 = 0;
  if (v4)
  {
LABEL_9:
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20820BDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820BDF8(uint64_t a1, double *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20820CA98(a1, (uint64_t)&v11);
  if (v11 == 2)
  {
    *a2 = (double)(unint64_t)v12;
    v3 = v13;
    v13 = 0;
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v11 == 3)
  {
    *a2 = (double)v12;
    v3 = v13;
    v13 = 0;
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v11 != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v10, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
LABEL_9:
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820BF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820BF24(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  char v12;
  _QWORD *v13;

  sub_20820CA98(a1, (uint64_t)&v11);
  if (v11 != 1)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v10, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20820BFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820C000(uint64_t a1, void **a2)
{
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  size_t __len;
  void *__src;
  _QWORD *v15;

  sub_20820CA98(a1, (uint64_t)&v12);
  if (v12 != 8 && v12 != 5)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v11, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  sub_207CCB6CC(a2, __src, __len);
  v4 = v15;
  v15 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20820C0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20820C0E8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  char *result;
  char *v10;
  std::bad_alloc *exception;
  std::bad_alloc *v12;

  v4 = a1[2];
  v5 = *a1;
  if ((unint64_t)(v4 - *a1) >= 9)
  {
    result = (char *)a1[1];
  }
  else
  {
    if (v4)
      v6 = 2 * v4;
    else
      v6 = 0x2000;
    v7 = v5 + 9;
    while (v6 < v7)
    {
      v8 = (uint64_t)v6 <= 0;
      v6 *= 2;
      if (v8)
      {
        v6 = v7;
        break;
      }
    }
    result = (char *)malloc_type_realloc((void *)a1[1], v6, 0xAD6A59EEuLL);
    if (!result)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v12 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v12, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    a1[1] = (uint64_t)result;
    a1[2] = v6;
    v5 = *a1;
  }
  v10 = &result[v5];
  *v10 = -49;
  *(_QWORD *)(v10 + 1) = bswap64(a2);
  *a1 += 9;
  return result;
}

void sub_20820C1BC(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  _DWORD v12[4];
  uint64_t v13;
  _QWORD *v14;

  sub_20820CA98(a1, (uint64_t)v12);
  if (v12[0] != 8)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v11, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  v3 = v12[2];
  v4 = v14;
  *(_QWORD *)(a2 + 8) = v13;
  *(_DWORD *)a2 = v3;
  v14 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20820C284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20820EE04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::bad_cast *sub_20820C29C(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
  return result;
}

char *sub_20820C2C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  std::bad_alloc *exception;
  std::bad_alloc *v30;

  if (*(_BYTE *)(a1 + 40))
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_6;
LABEL_11:
    v6 = *(_QWORD *)(a1 + 16);
    v8 = *(char **)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v8 >= v7)
      goto LABEL_14;
    goto LABEL_12;
  }
  v2 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v2)
    goto LABEL_34;
  v3 = v2;
  if (*(_BYTE *)(a1 + 40))
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = 0x2000;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = 0x2000;
  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_11;
LABEL_6:
  v4 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v4)
  {
LABEL_34:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v30 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v30, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v5 = v4;
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = 0x2000;
    *(_BYTE *)(a1 + 72) = 1;
    v6 = *(_QWORD *)(a1 + 16);
    v8 = *(char **)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v8 >= v7)
      goto LABEL_14;
LABEL_12:
    *(_QWORD *)v8 = v6;
    v9 = (uint64_t)(v8 + 8);
    goto LABEL_33;
  }
  free(*(void **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = 0x2000;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(char **)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v8 < v7)
    goto LABEL_12;
LABEL_14:
  v10 = *(char **)(a1 + 80);
  v11 = (v8 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_207CA420C();
  v13 = v7 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_207CA3AB8();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v6;
    v9 = (uint64_t)(v16 + 1);
    v18 = v8 - v10;
    if (v8 == v10)
      goto LABEL_31;
    goto LABEL_25;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v6;
  v9 = 8 * v11 + 8;
  v18 = v8 - v10;
  if (v8 != v10)
  {
LABEL_25:
    v19 = v18 - 8;
    if (v19 < 0x58)
      goto LABEL_39;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_39;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v8[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v8 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v8 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        v27 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v16 = v27;
      }
      while (v8 != v10);
    }
  }
LABEL_31:
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v17;
  if (v10)
    operator delete(v10);
LABEL_33:
  *(_QWORD *)(a1 + 88) = v9;
  return sub_20820C0E8((uint64_t *)(a1 + 16), 0);
}

void sub_20820C520(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

void sub_20820C534(void *a1)
{
  unsigned int v1;
  unsigned int v2;

  do
  {
    v1 = __ldaxr((unsigned int *)a1);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, (unsigned int *)a1));
  if (!v2)
    free(a1);
}

void sub_20820C550(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  BOOL v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  BOOL v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;
  std::bad_alloc *v30;
  std::bad_alloc *v31;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  if (v3 == v4)
  {
    v5 = atomic_load(*(unsigned int **)(a1 + 56));
    if (v5 == 1 && *(_BYTE *)(a1 + 232))
    {
      v6 = *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 72) - 4;
      v3 = 4;
      *(_QWORD *)(a1 + 64) = 4;
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = 4;
      if (v6 >= a2)
        return;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 64);
  }
  if (v4 == 4)
  {
    v6 = *(_QWORD *)(a1 + 72);
LABEL_9:
    v7 = v3 + v6;
    v8 = v3 + a2;
    while (1)
    {
      v7 *= 2;
      if (v7 >= v8)
        break;
      if (v7 <= 0)
      {
        v7 = v8;
        break;
      }
    }
    v9 = malloc_type_realloc(*(void **)(a1 + 56), v7, 0x6311493AuLL);
    if (v9)
    {
      *(_QWORD *)(a1 + 56) = v9;
      *(_QWORD *)(a1 + 72) = v7 - *(_QWORD *)(a1 + 64);
      return;
    }
LABEL_34:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v29 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v29, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v10 = *(_QWORD *)(a1 + 96);
  v11 = v3 - v4;
  v12 = a2 + v3 - v4 + 4;
  while (v10 < v12)
  {
    v13 = (uint64_t)v10 <= 0;
    v10 *= 2;
    if (v13)
    {
      v10 = v12;
      break;
    }
  }
  v14 = malloc_type_malloc(v10, 0x355C421CuLL);
  if (!v14)
    goto LABEL_34;
  v15 = v14;
  *v14 = 1;
  memcpy(v14 + 1, (const void *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 80)), v11);
  if (*(_BYTE *)(a1 + 232))
  {
    v16 = *(_QWORD *)(a1 + 56);
    v17 = **(_QWORD ***)(a1 + 104);
    v18 = (char *)v17[4];
    if (v18 == (char *)v17[5])
    {
      v19 = (char *)v17[6];
      v21 = v18 - v19;
      v20 = v18 == v19;
      v22 = (v18 - v19) >> 3;
      if (v20)
        v23 = 4;
      else
        v23 = v22;
      v24 = (char *)malloc_type_realloc(v19, 16 * v23, 0x80040803F642BuLL);
      if (!v24)
      {
        v30 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v31 = std::bad_alloc::bad_alloc(v30);
        __cxa_throw(v31, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v17[5] = &v24[16 * v23];
      v17[6] = v24;
      v18 = &v24[v21];
    }
    *(_QWORD *)v18 = sub_20820C534;
    *((_QWORD *)v18 + 1) = v16;
    v17[4] = v18 + 16;
    *(_BYTE *)(a1 + 232) = 0;
  }
  else
  {
    v25 = *(unsigned int **)(a1 + 56);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      free(v25);
  }
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v11 + 4;
  *(_QWORD *)(a1 + 72) = v10 - (v11 + 4);
  *(_QWORD *)(a1 + 80) = 4;
}

void sub_20820C7A8()
{
  __break(1u);
}

void sub_20820C7C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20820C7D4(_QWORD *result)
{
  std::ios_base::failure *exception;
  std::error_code __ec;
  std::string __msg;
  const char *v4;
  const char *v5;

  v5 = "RefillBuffer";
  v4 = "";
  if (*(_DWORD *)((char *)result + *(_QWORD *)(*result - 24) + 32))
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_20820C8B8((uint64_t)&__msg, &v4, (const char *)&v5);
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  return result;
}

void sub_20820C880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_20820C8B8(uint64_t a1, const char **a2, const char *a3)
{
  uint64_t result;
  _DWORD v5[6];
  int v6;
  _QWORD **v7;
  const char *v8;
  _DWORD *v9;
  const char *v10;
  const char *v11;
  _QWORD *v12;

  v6 = 0;
  if (*a2)
    sub_207CB7878(v5, a2);
  else
    sub_207CAA238(v5, "nullptr");
  v7 = (_QWORD **)v5;
  v8 = "Input stream not in good state, in ";
  v9 = v5;
  v10 = "Input stream not in good state, in ";
  v11 = "Input stream not in good state, in ";
  if (v6 == -1)
    sub_207CA9F48();
  v12 = &v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C08EC80[v6])(&v12, v5);
  if (*(_QWORD *)a3)
  {
    v7 = (_QWORD **)v5;
    v8 = a3;
    v9 = v5;
    v10 = a3;
    v11 = a3;
    if (v6 != -1)
    {
      v12 = &v7;
      ((void (*)(_QWORD **, _DWORD *))off_24C08EC38[v6])(&v12, v5);
      goto LABEL_10;
    }
LABEL_15:
    sub_207CA9F48();
  }
  v7 = (_QWORD **)v5;
  v8 = "nullptr";
  v9 = v5;
  v10 = "nullptr";
  v11 = "nullptr";
  if (v6 == -1)
    goto LABEL_15;
  v12 = &v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C08EC68[v6])(&v12, v5);
LABEL_10:
  if (v6 == -1)
    sub_207CA9F48();
  v7 = &v12;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C08EC98[v6])(&v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C08EC50[v6])(&v7, v5);
  return result;
}

void sub_20820CA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820CA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820CA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20820CA98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  void **v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  void *v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  void *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  void *v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  void *v94;
  int v95;
  int v96;
  int v97;
  void *v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  void *v103;
  int v104;
  int v105;
  int v106;
  double v107;
  uint64_t v108;
  void *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  void *v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  int v131;
  int v132;
  int v133;
  void *v134;
  int v135;
  int v136;
  int v137;
  void *v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  void *v144;
  int v145;
  int v146;
  int v147;
  void *v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  void *v154;
  int v155;
  int v156;
  int v157;
  void *v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  void *v166;
  int v167;
  int v168;
  int v169;
  void *v170;
  int v171;
  int v172;
  int v173;
  void *v174;
  int v175;
  int v176;
  int v177;
  void *v178;
  int v179;
  int v180;
  int v181;
  void *v182;
  int v183;
  int v184;
  int v185;
  void *v186;
  int v187;
  int v188;
  int v189;
  void *v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  void *v195;
  int v196;
  int v197;
  int v198;
  void *v199;
  int v200;
  int v201;
  int v202;
  void *v203;
  int v204;
  int v205;
  int v206;
  uint64_t v207;
  void *v208;
  int v209;
  int v210;
  int v211;
  void *v212;
  int v213;
  int v214;
  int v215;
  unint64_t v216;
  int v217;
  BOOL v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  unint64_t v221;
  unsigned __int8 *v222;
  _QWORD *v223;
  void (**v224)(void *);
  unsigned int *v225;
  void (**v226)(void *);
  unsigned int **v227;
  unsigned int *v228;
  _QWORD *v229;
  char *i;
  uint64_t v231;
  void (*v232)(uint64_t);
  _QWORD *v233;
  _QWORD *v234;
  BOOL v235;
  int64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  unsigned int v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  char *j;
  uint64_t v247;
  void (*v248)(uint64_t);
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _BYTE *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  size_t v261;
  char *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  std::bad_alloc *exception;
  std::bad_alloc *v268;
  std::bad_alloc *v269;
  std::bad_alloc *v270;
  std::bad_alloc *v271;
  std::bad_alloc *v272;
  _QWORD *v273;
  uint64_t v274;
  void **v275;
  _QWORD *v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t *v279;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 72);
  v276 = (_QWORD *)(a1 + 8);
  v277 = *(_QWORD *)(a1 + 96) - v4 + v5;
  v6 = (uint64_t *)(a1 + 216);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v273 = (_QWORD *)(a1 + 120);
  v274 = a2;
  v7 = (void **)(a1 + 40);
  v8 = (uint64_t *)(a1 + 48);
  v278 = a1 + 184;
  v279 = (uint64_t *)(a1 + 16);
  v275 = (void **)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = (unsigned __int8 *)(v9 + v4);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v9 + v4;
  if (v4 == v5)
    goto LABEL_476;
LABEL_2:
  v11 = 0;
  v12 = 0;
  v13 = (unsigned __int8 *)(v9 + v5);
  v14 = *(_DWORD *)(a1 + 32);
  do
  {
LABEL_3:
    while (v14)
    {
      if ((v11 & 1) == 0)
      {
        v12 = v10;
        v15 = *(_QWORD *)(a1 + 24);
        if (v13 - v10 < v15)
        {
LABEL_467:
          v217 = 0;
          v220 = &v12[-*v276];
          a2 = v274;
          *(_QWORD *)(a1 + 88) = v220;
          v218 = (unint64_t)v220 > v4;
          v219 = &v220[-v4];
          if (!v218)
            goto LABEL_479;
          goto LABEL_478;
        }
        goto LABEL_20;
      }
LABEL_5:
      v12 = v10 + 1;
      *v279 = (uint64_t)(v10 + 1);
      v15 = *(_QWORD *)(a1 + 24);
      if (v13 - (v10 + 1) < v15)
        goto LABEL_467;
LABEL_20:
      v10 = &v12[v15 - 1];
      *v279 = (uint64_t)v10;
      switch(v14)
      {
        case 4:
          v25 = *v12;
          *(_QWORD *)(a1 + 24) = v25;
          if (v25)
            goto LABEL_159;
          sub_20820F1CC((uint64_t)v273, v12, 0);
          v19 = *v279 + 1;
          *v279 = v19;
          v26 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v33 = *(_DWORD *)(v21 - 8);
            if (v33)
            {
              if (v33 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v32 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v32;
                if (v32)
                  goto LABEL_388;
LABEL_39:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v26 = *v7;
LABEL_40:
                if (v26 == (void *)v21)
                  goto LABEL_463;
                continue;
              }
              if (v33 != 1)
                goto LABEL_40;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v34 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v34;
          if (!v34)
            goto LABEL_39;
          goto LABEL_318;
        case 5:
          v92 = *(unsigned __int16 *)v12;
          v93 = __rev16(v92);
          *(_QWORD *)(a1 + 24) = v93;
          if (v92)
            goto LABEL_159;
          sub_20820F1CC((uint64_t)v273, v12, v93);
          v19 = *v279 + 1;
          *v279 = v19;
          v178 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v180 = *(_DWORD *)(v21 - 8);
            if (v180)
            {
              if (v180 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v179 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v179;
                if (v179)
                  goto LABEL_388;
LABEL_359:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v178 = *v7;
LABEL_360:
                if (v178 == (void *)v21)
                  goto LABEL_463;
                continue;
              }
              if (v180 != 1)
                goto LABEL_360;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v181 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v181;
          if (!v181)
            goto LABEL_359;
          goto LABEL_318;
        case 6:
          v73 = *(_DWORD *)v12;
          v74 = bswap32(*(_DWORD *)v12);
          *(_QWORD *)(a1 + 24) = v74;
          if (!v73)
          {
            sub_20820F1CC((uint64_t)v273, v12, v74);
            v19 = *v279 + 1;
            *v279 = v19;
            v75 = *v7;
            v21 = *v8;
            if (*v7 == (void *)*v8)
              goto LABEL_464;
            while (1)
            {
              v77 = *(_DWORD *)(v21 - 8);
              if (!v77)
                break;
              if (v77 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v76 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v76;
                if (v76)
                  goto LABEL_388;
LABEL_124:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v75 = *v7;
                goto LABEL_125;
              }
              if (v77 == 1)
                goto LABEL_446;
LABEL_125:
              if (v75 == (void *)v21)
                goto LABEL_463;
            }
            *(_QWORD *)(*v6 - 8) += 24;
            v78 = *(_DWORD *)(v21 - 4) - 1;
            *(_DWORD *)(v21 - 4) = v78;
            if (v78)
              goto LABEL_318;
            goto LABEL_124;
          }
LABEL_159:
          v11 = 1;
          v14 = 33;
          *(_DWORD *)(a1 + 32) = 33;
          v10 = *(unsigned __int8 **)(a1 + 16);
          if (v10 == v13)
            goto LABEL_473;
          continue;
        case 7:
          v56 = *v12;
          goto LABEL_173;
        case 8:
          v56 = bswap32(*(unsigned __int16 *)v12) >> 16;
          goto LABEL_173;
        case 9:
          v56 = bswap32(*(_DWORD *)v12);
LABEL_173:
          *(_QWORD *)(a1 + 24) = v56 + 1;
          v11 = 1;
          v14 = 34;
          *(_DWORD *)(a1 + 32) = 34;
          v10 = *(unsigned __int8 **)(a1 + 16);
          if (v10 == v13)
            goto LABEL_473;
          continue;
        case 10:
          v107 = COERCE_FLOAT(bswap32(*(_DWORD *)v12));
          v108 = *(_QWORD *)(*v6 - 8);
          *(_DWORD *)v108 = 4;
          *(double *)(v108 + 8) = v107;
          v19 = *v279 + 1;
          *v279 = v19;
          v109 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v111 = *(_DWORD *)(v21 - 8);
            if (v111)
            {
              if (v111 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v110 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v110;
                if (v110)
                  goto LABEL_388;
LABEL_201:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v109 = *v7;
              }
              else if (v111 == 1)
              {
                goto LABEL_446;
              }
              if (v109 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v112 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v112;
          if (!v112)
            goto LABEL_201;
          goto LABEL_318;
        case 11:
          v86 = bswap64(*(_QWORD *)v12);
          v87 = *(_QWORD *)(*v6 - 8);
          *(_DWORD *)v87 = 4;
          *(_QWORD *)(v87 + 8) = v86;
          v19 = *v279 + 1;
          *v279 = v19;
          v88 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v90 = *(_DWORD *)(v21 - 8);
            if (v90)
            {
              if (v90 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v89 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v89;
                if (v89)
                  goto LABEL_388;
LABEL_150:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v88 = *v7;
              }
              else if (v90 == 1)
              {
                goto LABEL_446;
              }
              if (v88 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v91 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v91;
          if (!v91)
            goto LABEL_150;
          goto LABEL_318;
        case 12:
          v122 = *v12;
          v123 = *(_QWORD *)(*v6 - 8);
          *(_DWORD *)v123 = 2;
          *(_QWORD *)(v123 + 8) = v122;
          v19 = *v279 + 1;
          *v279 = v19;
          v124 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v126 = *(_DWORD *)(v21 - 8);
            if (v126)
            {
              if (v126 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v125 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v125;
                if (v125)
                  goto LABEL_388;
LABEL_226:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v124 = *v7;
              }
              else if (v126 == 1)
              {
                goto LABEL_446;
              }
              if (v124 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v127 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v127;
          if (!v127)
            goto LABEL_226;
          goto LABEL_318;
        case 13:
          v64 = bswap32(*(unsigned __int16 *)v12);
          v65 = *(_QWORD *)(*v6 - 8);
          *(_DWORD *)v65 = 2;
          *(_QWORD *)(v65 + 8) = HIWORD(v64);
          v19 = *v279 + 1;
          *v279 = v19;
          v66 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v68 = *(_DWORD *)(v21 - 8);
            if (v68)
            {
              if (v68 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v67 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v67;
                if (v67)
                  goto LABEL_388;
LABEL_107:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v66 = *v7;
LABEL_108:
                if (v66 == (void *)v21)
                  goto LABEL_463;
                continue;
              }
              if (v68 != 1)
                goto LABEL_108;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v69 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v69;
          if (!v69)
            goto LABEL_107;
          goto LABEL_318;
        case 14:
          v128 = bswap32(*(_DWORD *)v12);
          v129 = *(_QWORD *)(*v6 - 8);
          *(_DWORD *)v129 = 2;
          *(_QWORD *)(v129 + 8) = v128;
          v19 = *v279 + 1;
          *v279 = v19;
          v130 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v132 = *(_DWORD *)(v21 - 8);
            if (v132)
            {
              if (v132 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v131 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v131;
                if (v131)
                  goto LABEL_388;
LABEL_237:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v130 = *v7;
              }
              else if (v132 == 1)
              {
                goto LABEL_446;
              }
              if (v130 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v133 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v133;
          if (!v133)
            goto LABEL_237;
          goto LABEL_318;
        case 15:
          v50 = bswap64(*(_QWORD *)v12);
          v51 = *(_QWORD *)(*v6 - 8);
          *(_DWORD *)v51 = 2;
          *(_QWORD *)(v51 + 8) = v50;
          v19 = *v279 + 1;
          *v279 = v19;
          v52 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v54 = *(_DWORD *)(v21 - 8);
            if (v54)
            {
              if (v54 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v53 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v53;
                if (v53)
                  goto LABEL_388;
LABEL_81:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v52 = *v7;
LABEL_82:
                if (v52 == (void *)v21)
                  goto LABEL_463;
                continue;
              }
              if (v54 != 1)
                goto LABEL_82;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v55 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v55;
          if (!v55)
            goto LABEL_81;
          goto LABEL_318;
        case 16:
          v57 = (char)*v12;
          v58 = *(_QWORD *)(*v6 - 8);
          if ((int)v57 >= 0)
            v59 = 2;
          else
            v59 = 3;
          *(_DWORD *)v58 = v59;
          *(_QWORD *)(v58 + 8) = v57;
          v19 = *v279 + 1;
          *v279 = v19;
          v60 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v62 = *(_DWORD *)(v21 - 8);
            if (v62)
            {
              if (v62 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v61 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v61;
                if (v61)
                  goto LABEL_388;
LABEL_96:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v60 = *v7;
LABEL_97:
                if (v60 == (void *)v21)
                  goto LABEL_463;
                continue;
              }
              if (v62 != 1)
                goto LABEL_97;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v63 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v63;
          if (!v63)
            goto LABEL_96;
          goto LABEL_318;
        case 17:
          v113 = bswap32(*(unsigned __int16 *)v12);
          v114 = v113 >> 16;
          v115 = SHIWORD(v113);
          v116 = *(_QWORD *)(*v6 - 8);
          if (v114 >= 0)
            v117 = 2;
          else
            v117 = 3;
          *(_DWORD *)v116 = v117;
          *(_QWORD *)(v116 + 8) = v115;
          v19 = *v279 + 1;
          *v279 = v19;
          v118 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v120 = *(_DWORD *)(v21 - 8);
            if (v120)
            {
              if (v120 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v119 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v119;
                if (v119)
                  goto LABEL_388;
LABEL_215:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v118 = *v7;
              }
              else if (v120 == 1)
              {
                goto LABEL_446;
              }
              if (v118 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v121 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v121;
          if (!v121)
            goto LABEL_215;
          goto LABEL_318;
        case 18:
          v42 = bswap32(*(_DWORD *)v12);
          v43 = v42;
          v44 = *(_QWORD *)(*v6 - 8);
          if (v42 >= 0)
            v45 = 2;
          else
            v45 = 3;
          *(_DWORD *)v44 = v45;
          *(_QWORD *)(v44 + 8) = v43;
          v19 = *v279 + 1;
          *v279 = v19;
          v46 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v48 = *(_DWORD *)(v21 - 8);
            if (v48)
            {
              if (v48 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v47 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v47;
                if (v47)
                  goto LABEL_388;
LABEL_70:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v46 = *v7;
LABEL_71:
                if (v46 == (void *)v21)
                  goto LABEL_463;
                continue;
              }
              if (v48 != 1)
                goto LABEL_71;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v49 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v49;
          if (!v49)
            goto LABEL_70;
          goto LABEL_318;
        case 19:
          v79 = bswap64(*(_QWORD *)v12);
          v80 = *(_QWORD *)(*v6 - 8);
          if (v79 >= 0)
            v81 = 2;
          else
            v81 = 3;
          *(_DWORD *)v80 = v81;
          *(_QWORD *)(v80 + 8) = v79;
          v19 = *v279 + 1;
          *v279 = v19;
          v82 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v84 = *(_DWORD *)(v21 - 8);
            if (v84)
            {
              if (v84 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v83 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v83;
                if (v83)
                  goto LABEL_388;
LABEL_138:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v82 = *v7;
              }
              else if (v84 == 1)
              {
LABEL_446:
                v14 = 0;
                v11 = 0;
                v165 = *v6;
                goto LABEL_447;
              }
              if (v82 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v85 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v85;
          if (!v85)
            goto LABEL_138;
          goto LABEL_318;
        case 20:
          sub_20820F048((uint64_t)v273, v12, 2u);
          v19 = *v279 + 1;
          *v279 = v19;
          v38 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v40 = *(_DWORD *)(v21 - 8);
            if (v40)
            {
              if (v40 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v39 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v39;
                if (v39)
                  goto LABEL_388;
LABEL_56:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v38 = *v7;
LABEL_57:
                if (v38 == (void *)v21)
                  goto LABEL_463;
                continue;
              }
              if (v40 != 1)
                goto LABEL_57;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v41 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v41;
          if (!v41)
            goto LABEL_56;
          goto LABEL_318;
        case 21:
          sub_20820F048((uint64_t)v273, v12, 3u);
          v19 = *v279 + 1;
          *v279 = v19;
          v94 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v96 = *(_DWORD *)(v21 - 8);
            if (v96)
            {
              if (v96 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v95 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v95;
                if (v95)
                  goto LABEL_388;
LABEL_164:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v94 = *v7;
              }
              else if (v96 == 1)
              {
                goto LABEL_446;
              }
              if (v94 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v97 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v97;
          if (!v97)
            goto LABEL_164;
          goto LABEL_318;
        case 22:
          sub_20820F048((uint64_t)v273, v12, 5u);
          v19 = *v279 + 1;
          *v279 = v19;
          v134 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v136 = *(_DWORD *)(v21 - 8);
            if (v136)
            {
              if (v136 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v135 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v135;
                if (v135)
                  goto LABEL_388;
LABEL_248:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v134 = *v7;
              }
              else if (v136 == 1)
              {
                goto LABEL_446;
              }
              if (v134 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v137 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v137;
          if (!v137)
            goto LABEL_248;
          goto LABEL_318;
        case 23:
          sub_20820F048((uint64_t)v273, v12, 9u);
          v19 = *v279 + 1;
          *v279 = v19;
          v148 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v150 = *(_DWORD *)(v21 - 8);
            if (v150)
            {
              if (v150 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v149 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v149;
                if (v149)
                  goto LABEL_388;
LABEL_282:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v148 = *v7;
              }
              else if (v150 == 1)
              {
                goto LABEL_446;
              }
              if (v148 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v151 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v151;
          if (!v151)
            goto LABEL_282;
          goto LABEL_318;
        case 24:
          sub_20820F048((uint64_t)v273, v12, 0x11u);
          v19 = *v279 + 1;
          *v279 = v19;
          v98 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v100 = *(_DWORD *)(v21 - 8);
            if (v100)
            {
              if (v100 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v99 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v99;
                if (v99)
                  goto LABEL_388;
LABEL_178:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v98 = *v7;
              }
              else if (v100 == 1)
              {
                goto LABEL_446;
              }
              if (v98 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v101 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v101;
          if (!v101)
            goto LABEL_178;
          goto LABEL_318;
        case 25:
          v102 = *v12;
          *(_QWORD *)(a1 + 24) = v102;
          if (v102)
            goto LABEL_291;
          sub_20820EE80((uint64_t)v273, v12, 0);
          v19 = *v279 + 1;
          *v279 = v19;
          v103 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v105 = *(_DWORD *)(v21 - 8);
            if (v105)
            {
              if (v105 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v104 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v104;
                if (v104)
                  goto LABEL_388;
LABEL_190:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v103 = *v7;
              }
              else if (v105 == 1)
              {
                goto LABEL_446;
              }
              if (v103 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v106 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v106;
          if (!v106)
            goto LABEL_190;
          goto LABEL_318;
        case 26:
          v142 = *(unsigned __int16 *)v12;
          v143 = __rev16(v142);
          *(_QWORD *)(a1 + 24) = v143;
          if (v142)
            goto LABEL_291;
          sub_20820EE80((uint64_t)v273, v12, v143);
          v19 = *v279 + 1;
          *v279 = v19;
          v144 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v146 = *(_DWORD *)(v21 - 8);
            if (v146)
            {
              if (v146 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v145 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v145;
                if (v145)
                  goto LABEL_388;
LABEL_271:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v144 = *v7;
              }
              else if (v146 == 1)
              {
                goto LABEL_446;
              }
              if (v144 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v147 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v147;
          if (!v147)
            goto LABEL_271;
          goto LABEL_318;
        case 27:
          v152 = *(_DWORD *)v12;
          v153 = bswap32(*(_DWORD *)v12);
          *(_QWORD *)(a1 + 24) = v153;
          if (!v152)
          {
            sub_20820EE80((uint64_t)v273, v12, v153);
            v19 = *v279 + 1;
            *v279 = v19;
            v182 = *v7;
            v21 = *v8;
            if (*v7 == (void *)*v8)
              goto LABEL_464;
            while (1)
            {
              v184 = *(_DWORD *)(v21 - 8);
              if (!v184)
                break;
              if (v184 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v183 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v183;
                if (v183)
                  goto LABEL_388;
LABEL_370:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v182 = *v7;
                goto LABEL_371;
              }
              if (v184 == 1)
                goto LABEL_446;
LABEL_371:
              if (v182 == (void *)v21)
                goto LABEL_463;
            }
            *(_QWORD *)(*v6 - 8) += 24;
            v185 = *(_DWORD *)(v21 - 4) - 1;
            *(_DWORD *)(v21 - 4) = v185;
            if (v185)
              goto LABEL_318;
            goto LABEL_370;
          }
LABEL_291:
          v11 = 1;
          v14 = 32;
          *(_DWORD *)(a1 + 32) = 32;
          v10 = *(unsigned __int8 **)(a1 + 16);
          if (v10 == v13)
            goto LABEL_473;
          continue;
        case 28:
          v72 = *(unsigned __int16 *)v12;
          *v279 = (uint64_t)&v12[v15];
          if (v72)
          {
            v71 = __rev16(v72);
            sub_20820F38C(v7, 0, v71);
            goto LABEL_119;
          }
          sub_20820F500(v273, 0);
          v165 = *v6 - 8;
          *v6 = v165;
          v174 = *v7;
          v21 = *v8;
          while (1)
          {
            while (1)
            {
              if (v174 == (void *)v21)
                goto LABEL_470;
              v176 = *(_DWORD *)(v21 - 8);
              if (v176)
                break;
              *(_QWORD *)(v165 - 8) += 24;
              v177 = *(_DWORD *)(v21 - 4) - 1;
              *(_DWORD *)(v21 - 4) = v177;
              if (v177)
                goto LABEL_318;
LABEL_348:
              v21 = *v8 - 8;
              *v8 = v21;
              v165 = *v6 - 8;
              *v6 = v165;
              v174 = *v7;
            }
            if (v176 == 2)
            {
              *(_QWORD *)(v165 - 8) += 24;
              v175 = *(_DWORD *)(v21 - 4) - 1;
              *(_DWORD *)(v21 - 4) = v175;
              if (v175)
                goto LABEL_388;
              goto LABEL_348;
            }
            if (v176 == 1)
              goto LABEL_462;
          }
        case 29:
          v70 = *(_DWORD *)v12;
          *v279 = (uint64_t)&v12[v15];
          if (!v70)
          {
            sub_20820F500(v273, 0);
            v165 = *v6 - 8;
            *v6 = v165;
            v170 = *v7;
            v21 = *v8;
            while (1)
            {
              while (1)
              {
                if (v170 == (void *)v21)
                  goto LABEL_470;
                v172 = *(_DWORD *)(v21 - 8);
                if (v172)
                  break;
                *(_QWORD *)(v165 - 8) += 24;
                v173 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v173;
                if (v173)
                  goto LABEL_318;
LABEL_338:
                v21 = *v8 - 8;
                *v8 = v21;
                v165 = *v6 - 8;
                *v6 = v165;
                v170 = *v7;
              }
              if (v172 == 2)
              {
                *(_QWORD *)(v165 - 8) += 24;
                v171 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v171;
                if (v171)
                  goto LABEL_388;
                goto LABEL_338;
              }
              if (v172 == 1)
                goto LABEL_462;
            }
          }
          v71 = bswap32(v70);
          sub_20820F38C(v7, 0, v71);
LABEL_119:
          sub_20820F500(v273, v71);
LABEL_318:
          v14 = 0;
          v11 = 0;
          *(_DWORD *)(a1 + 32) = 0;
          v10 = *(unsigned __int8 **)(a1 + 16);
          if (v10 == v13)
            goto LABEL_473;
          continue;
        case 30:
          v162 = *(unsigned __int16 *)v12;
          *v279 = (uint64_t)&v12[v15];
          if (v162)
          {
            v37 = __rev16(v162);
            sub_20820F38C(v7, 1u, v37);
            goto LABEL_317;
          }
          sub_20820F870(v273, 0);
          v165 = *v6 - 8;
          *v6 = v165;
          v186 = *v7;
          v21 = *v8;
          while (1)
          {
            while (1)
            {
              if (v186 == (void *)v21)
                goto LABEL_470;
              v188 = *(_DWORD *)(v21 - 8);
              if (v188)
                break;
              *(_QWORD *)(v165 - 8) += 24;
              v189 = *(_DWORD *)(v21 - 4) - 1;
              *(_DWORD *)(v21 - 4) = v189;
              if (v189)
                goto LABEL_318;
LABEL_380:
              v21 = *v8 - 8;
              *v8 = v21;
              v165 = *v6 - 8;
              *v6 = v165;
              v186 = *v7;
            }
            if (v188 == 2)
            {
              *(_QWORD *)(v165 - 8) += 24;
              v187 = *(_DWORD *)(v21 - 4) - 1;
              *(_DWORD *)(v21 - 4) = v187;
              if (v187)
                goto LABEL_388;
              goto LABEL_380;
            }
            if (v188 == 1)
              goto LABEL_462;
          }
        case 31:
          v36 = *(_DWORD *)v12;
          *v279 = (uint64_t)&v12[v15];
          if (v36)
          {
            v37 = bswap32(v36);
            sub_20820F38C(v7, 1u, v37);
LABEL_317:
            sub_20820F870(v273, v37);
            goto LABEL_318;
          }
          sub_20820F870(v273, 0);
          v165 = *v6 - 8;
          *v6 = v165;
          v166 = *v7;
          v21 = *v8;
          while (1)
          {
            while (1)
            {
              if (v166 == (void *)v21)
                goto LABEL_470;
              v168 = *(_DWORD *)(v21 - 8);
              if (v168)
                break;
              *(_QWORD *)(v165 - 8) += 24;
              v169 = *(_DWORD *)(v21 - 4) - 1;
              *(_DWORD *)(v21 - 4) = v169;
              if (v169)
                goto LABEL_318;
LABEL_328:
              v21 = *v8 - 8;
              *v8 = v21;
              v165 = *v6 - 8;
              *v6 = v165;
              v166 = *v7;
            }
            if (v168 == 2)
            {
              *(_QWORD *)(v165 - 8) += 24;
              v167 = *(_DWORD *)(v21 - 4) - 1;
              *(_DWORD *)(v21 - 4) = v167;
              if (v167)
                goto LABEL_388;
              goto LABEL_328;
            }
            if (v168 == 1)
              goto LABEL_462;
          }
        case 32:
          sub_20820EE80((uint64_t)v273, v12, v15);
          v19 = *v279 + 1;
          *v279 = v19;
          v154 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v156 = *(_DWORD *)(v21 - 8);
            if (v156)
            {
              if (v156 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v155 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v155;
                if (v155)
                  goto LABEL_388;
LABEL_296:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v154 = *v7;
              }
              else if (v156 == 1)
              {
                goto LABEL_446;
              }
              if (v154 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v157 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v157;
          if (!v157)
            goto LABEL_296;
          goto LABEL_318;
        case 33:
          sub_20820F1CC((uint64_t)v273, v12, v15);
          v19 = *v279 + 1;
          *v279 = v19;
          v158 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v160 = *(_DWORD *)(v21 - 8);
            if (v160)
            {
              if (v160 == 2)
              {
                *(_QWORD *)(*v6 - 8) += 24;
                v159 = *(_DWORD *)(v21 - 4) - 1;
                *(_DWORD *)(v21 - 4) = v159;
                if (v159)
                  goto LABEL_388;
LABEL_307:
                v21 = *v8 - 8;
                *v8 = v21;
                *v6 -= 8;
                v158 = *v7;
              }
              else if (v160 == 1)
              {
                goto LABEL_446;
              }
              if (v158 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v161 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v161;
          if (!v161)
            goto LABEL_307;
          goto LABEL_318;
        case 34:
          sub_20820F048((uint64_t)v273, v12, v15);
          v19 = *v279 + 1;
          *v279 = v19;
          v138 = *v7;
          v21 = *v8;
          if (*v7 == (void *)*v8)
            goto LABEL_464;
          while (2)
          {
            v140 = *(_DWORD *)(v21 - 8);
            if (!v140)
            {
              *(_QWORD *)(*v6 - 8) += 24;
              v141 = *(_DWORD *)(v21 - 4) - 1;
              *(_DWORD *)(v21 - 4) = v141;
              if (v141)
                goto LABEL_318;
LABEL_259:
              v21 = *v8 - 8;
              *v8 = v21;
              *v6 -= 8;
              v138 = *v7;
LABEL_260:
              if (v138 == (void *)v21)
                goto LABEL_463;
              continue;
            }
            break;
          }
          if (v140 != 2)
          {
            if (v140 == 1)
              goto LABEL_446;
            goto LABEL_260;
          }
          *(_QWORD *)(*v6 - 8) += 24;
          v139 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v139;
          if (!v139)
            goto LABEL_259;
LABEL_388:
          v14 = 0;
          v11 = 0;
          *(_DWORD *)(v21 - 8) = 1;
          *(_DWORD *)(a1 + 32) = 0;
          v10 = *(unsigned __int8 **)(a1 + 16);
          if (v10 == v13)
            goto LABEL_473;
          break;
        default:
          goto LABEL_537;
      }
    }
    v16 = (char)*v10;
    v17 = *v10;
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = *(_QWORD *)(*v6 - 8);
      *(_DWORD *)v18 = 2;
      *(_QWORD *)(v18 + 8) = v17;
      v19 = *v279 + 1;
      *v279 = v19;
      v20 = *v7;
      v21 = *v8;
      if (*v7 == (void *)*v8)
        goto LABEL_464;
      while (1)
      {
        v23 = *(_DWORD *)(v21 - 8);
        if (!v23)
          break;
        if (v23 == 2)
        {
          *(_QWORD *)(*v6 - 8) += 24;
          v22 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v22;
          if (v22)
            goto LABEL_460;
LABEL_11:
          v21 = *v8 - 8;
          *v8 = v21;
          *v6 -= 8;
          v20 = *v7;
          goto LABEL_12;
        }
        if (v23 == 1)
          goto LABEL_446;
LABEL_12:
        if (v20 == (void *)v21)
          goto LABEL_463;
      }
      *(_QWORD *)(*v6 - 8) += 24;
      v24 = *(_DWORD *)(v21 - 4) - 1;
      *(_DWORD *)(v21 - 4) = v24;
      if (v24)
        goto LABEL_318;
      goto LABEL_11;
    }
    if (v16 >= 0xFFFFFFE0)
    {
      v27 = *(_QWORD *)(*v6 - 8);
      *(_DWORD *)v27 = 3;
      *(_QWORD *)(v27 + 8) = v16;
      v19 = *v279 + 1;
      *v279 = v19;
      v28 = *v7;
      v21 = *v8;
      if (*v7 == (void *)*v8)
        goto LABEL_464;
      while (1)
      {
        v30 = *(_DWORD *)(v21 - 8);
        if (!v30)
          break;
        if (v30 == 2)
        {
          *(_QWORD *)(*v6 - 8) += 24;
          v29 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v29;
          if (v29)
            goto LABEL_460;
LABEL_28:
          v21 = *v8 - 8;
          *v8 = v21;
          *v6 -= 8;
          v28 = *v7;
          goto LABEL_29;
        }
        if (v30 == 1)
          goto LABEL_446;
LABEL_29:
        if (v28 == (void *)v21)
          goto LABEL_463;
      }
      *(_QWORD *)(*v6 - 8) += 24;
      v31 = *(_DWORD *)(v21 - 4) - 1;
      *(_DWORD *)(v21 - 4) = v31;
      if (v31)
        goto LABEL_318;
      goto LABEL_28;
    }
    if (v17 >= 0xC4)
    {
      *(_QWORD *)(a1 + 24) = dword_2082875B4[(v17 - 196)];
      v14 = *v10 & 0x1F;
LABEL_50:
      *(_DWORD *)(a1 + 32) = v14;
      goto LABEL_5;
    }
    if ((v17 & 0xE0) == 0xA0)
    {
      v35 = v17 & 0x1F;
      *(_QWORD *)(a1 + 24) = v35;
      if ((_DWORD)v35)
      {
        v14 = 32;
        goto LABEL_50;
      }
      sub_20820EE80((uint64_t)v273, v12, 0);
      v19 = *v279 + 1;
      *v279 = v19;
      v190 = *v7;
      v21 = *v8;
      if (*v7 == (void *)*v8)
      {
LABEL_464:
        v216 = v19 - *v276;
        v217 = 1;
        a2 = v274;
        *(_QWORD *)(a1 + 88) = v216;
        v218 = v216 > v4;
        v219 = (unsigned __int8 *)(v216 - v4);
        if (!v218)
          goto LABEL_479;
        goto LABEL_478;
      }
      while (1)
      {
        v192 = *(_DWORD *)(v21 - 8);
        if (!v192)
          break;
        if (v192 == 2)
        {
          *(_QWORD *)(*v6 - 8) += 24;
          v191 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v191;
          if (v191)
            goto LABEL_460;
LABEL_393:
          v21 = *v8 - 8;
          *v8 = v21;
          *v6 -= 8;
          v190 = *v7;
          goto LABEL_394;
        }
        if (v192 == 1)
          goto LABEL_446;
LABEL_394:
        if (v190 == (void *)v21)
          goto LABEL_463;
      }
      *(_QWORD *)(*v6 - 8) += 24;
      v193 = *(_DWORD *)(v21 - 4) - 1;
      *(_DWORD *)(v21 - 4) = v193;
      if (v193)
        goto LABEL_318;
      goto LABEL_393;
    }
    if ((v16 & 0xFFFFFFF0) == 0xFFFFFF90)
    {
      *v279 = (uint64_t)(v10 + 1);
      v163 = v17 & 0xF;
      if ((v17 & 0xF) != 0)
      {
        sub_20820F38C(v7, 0, v17 & 0xF);
        sub_20820F500(v273, v163);
        goto LABEL_318;
      }
      sub_20820F500(v273, 0);
      v165 = *v6 - 8;
      *v6 = v165;
      v199 = *v7;
      v21 = *v8;
      while (1)
      {
        while (1)
        {
          if (v199 == (void *)v21)
            goto LABEL_470;
          v201 = *(_DWORD *)(v21 - 8);
          if (v201)
            break;
          *(_QWORD *)(v165 - 8) += 24;
          v202 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v202;
          if (v202)
            goto LABEL_318;
LABEL_417:
          v21 = *v8 - 8;
          *v8 = v21;
          v165 = *v6 - 8;
          *v6 = v165;
          v199 = *v7;
        }
        if (v201 == 2)
        {
          *(_QWORD *)(v165 - 8) += 24;
          v200 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v200;
          if (v200)
            goto LABEL_460;
          goto LABEL_417;
        }
        if (v201 == 1)
          goto LABEL_462;
      }
    }
    if (v17 <= 0x8F)
    {
      *v279 = (uint64_t)(v10 + 1);
      v164 = v16 & 0xF;
      if ((v16 & 0xF) != 0)
      {
        sub_20820F38C(v7, 1u, v16 & 0xF);
        sub_20820F870(v273, v164);
        goto LABEL_318;
      }
      sub_20820F870(v273, 0);
      v165 = *v6 - 8;
      *v6 = v165;
      v203 = *v7;
      v21 = *v8;
      while (1)
      {
        while (1)
        {
          if (v203 == (void *)v21)
          {
LABEL_470:
            v221 = *v279 - *v276;
            v217 = 1;
            a2 = v274;
            *(_QWORD *)(a1 + 88) = v221;
            v218 = v221 > v4;
            v219 = (unsigned __int8 *)(v221 - v4);
            if (!v218)
              goto LABEL_479;
LABEL_478:
            *(_QWORD *)(a1 + 96) += v219;
            goto LABEL_479;
          }
          v205 = *(_DWORD *)(v21 - 8);
          if (v205)
            break;
          *(_QWORD *)(v165 - 8) += 24;
          v206 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v206;
          if (v206)
            goto LABEL_318;
LABEL_427:
          v21 = *v8 - 8;
          *v8 = v21;
          v165 = *v6 - 8;
          *v6 = v165;
          v203 = *v7;
        }
        if (v205 == 2)
        {
          *(_QWORD *)(v165 - 8) += 24;
          v204 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v204;
          if (v204)
            goto LABEL_460;
          goto LABEL_427;
        }
        if (v205 == 1)
          goto LABEL_462;
      }
    }
    if ((_DWORD)v17 != 192)
    {
      if ((_DWORD)v17 != 195)
      {
        if ((_DWORD)v17 != 194)
        {
LABEL_537:
          *(_QWORD *)(a1 + 88) = &v10[-*(_QWORD *)(a1 + 8)];
          sub_20820F000();
        }
        v194 = *(_QWORD *)(*v6 - 8);
        *(_DWORD *)v194 = 1;
        *(_BYTE *)(v194 + 8) = 0;
        v19 = *v279 + 1;
        *v279 = v19;
        v195 = *v7;
        v21 = *v8;
        if (*v7 == (void *)*v8)
          goto LABEL_464;
        while (1)
        {
          v197 = *(_DWORD *)(v21 - 8);
          if (!v197)
            break;
          if (v197 == 2)
          {
            *(_QWORD *)(*v6 - 8) += 24;
            v196 = *(_DWORD *)(v21 - 4) - 1;
            *(_DWORD *)(v21 - 4) = v196;
            if (v196)
              goto LABEL_460;
LABEL_407:
            v21 = *v8 - 8;
            *v8 = v21;
            *v6 -= 8;
            v195 = *v7;
            goto LABEL_408;
          }
          if (v197 == 1)
            goto LABEL_446;
LABEL_408:
          if (v195 == (void *)v21)
            goto LABEL_463;
        }
        *(_QWORD *)(*v6 - 8) += 24;
        v198 = *(_DWORD *)(v21 - 4) - 1;
        *(_DWORD *)(v21 - 4) = v198;
        if (v198)
          goto LABEL_318;
        goto LABEL_407;
      }
      v207 = *(_QWORD *)(*v6 - 8);
      *(_DWORD *)v207 = 1;
      *(_BYTE *)(v207 + 8) = 1;
      v19 = *v279 + 1;
      *v279 = v19;
      v208 = *v7;
      v21 = *v8;
      if (*v7 == (void *)*v8)
        goto LABEL_464;
      while (1)
      {
        v210 = *(_DWORD *)(v21 - 8);
        if (!v210)
          break;
        if (v210 == 2)
        {
          *(_QWORD *)(*v6 - 8) += 24;
          v209 = *(_DWORD *)(v21 - 4) - 1;
          *(_DWORD *)(v21 - 4) = v209;
          if (v209)
            goto LABEL_460;
LABEL_438:
          v21 = *v8 - 8;
          *v8 = v21;
          *v6 -= 8;
          v208 = *v7;
          goto LABEL_439;
        }
        if (v210 == 1)
          goto LABEL_446;
LABEL_439:
        if (v208 == (void *)v21)
          goto LABEL_463;
      }
      *(_QWORD *)(*v6 - 8) += 24;
      v211 = *(_DWORD *)(v21 - 4) - 1;
      *(_DWORD *)(v21 - 4) = v211;
      if (v211)
        goto LABEL_318;
      goto LABEL_438;
    }
    v165 = *v6;
    **(_DWORD **)(*v6 - 8) = 0;
    v19 = (uint64_t)(v10 + 1);
    *v279 = (uint64_t)(v10 + 1);
    v212 = *v7;
    v21 = *v8;
    if (*v7 == (void *)*v8)
      goto LABEL_464;
    while (1)
    {
      v214 = *(_DWORD *)(v21 - 8);
      if (v214)
        break;
      *(_QWORD *)(v165 - 8) += 24;
      v215 = *(_DWORD *)(v21 - 4) - 1;
      *(_DWORD *)(v21 - 4) = v215;
      if (v215)
        goto LABEL_318;
LABEL_452:
      v21 = *v8 - 8;
      *v8 = v21;
      v165 = *v6 - 8;
      *v6 = v165;
      v212 = *v7;
LABEL_453:
      if (v212 == (void *)v21)
      {
LABEL_463:
        v19 = *v279;
        goto LABEL_464;
      }
    }
    if (v214 == 2)
    {
      *(_QWORD *)(v165 - 8) += 24;
      v213 = *(_DWORD *)(v21 - 4) - 1;
      *(_DWORD *)(v21 - 4) = v213;
      if (v213)
      {
LABEL_460:
        v14 = 0;
        v11 = 0;
        *(_DWORD *)(v21 - 8) = 1;
        *(_DWORD *)(a1 + 32) = 0;
        v10 = *(unsigned __int8 **)(a1 + 16);
        if (v10 == v13)
          break;
        goto LABEL_3;
      }
      goto LABEL_452;
    }
    if (v214 != 1)
      goto LABEL_453;
LABEL_462:
    v14 = 0;
    v11 = 0;
LABEL_447:
    *(_QWORD *)(v165 - 8) += 24;
    *(_DWORD *)(v21 - 8) = 2;
    *(_DWORD *)(a1 + 32) = 0;
    v10 = *(unsigned __int8 **)(a1 + 16);
  }
  while (v10 != v13);
LABEL_473:
  v217 = 0;
  v222 = &v13[-*v276];
  a2 = v274;
  *(_QWORD *)(a1 + 88) = v222;
  v218 = (unint64_t)v222 > v4;
  v219 = &v222[-v4];
  if (v218)
    goto LABEL_478;
LABEL_479:
  while (!v217)
  {
    v229 = *(_QWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v229)
    {
      for (i = (char *)v229[4]; i != (char *)v229[6]; i -= 16)
      {
        v232 = (void (*)(uint64_t))*((_QWORD *)i - 2);
        v231 = *((_QWORD *)i - 1);
        v232(v231);
      }
      free(i);
      v233 = (_QWORD *)v229[3];
      if (v233)
      {
        do
        {
          v234 = (_QWORD *)*v233;
          free(v233);
          v233 = v234;
        }
        while (v234);
      }
      free(v229);
    }
    *(_DWORD *)a2 = 0;
    sub_20820C7D4(*(_QWORD **)a1);
    if (*(_QWORD *)(a1 + 264) >= 0x400uLL)
      v263 = 1024;
    else
      v263 = *(_QWORD *)(a1 + 264);
    if (*(_QWORD *)(a1 + 80) < v263)
      sub_20820C550((uint64_t)v276, v263);
    std::istream::read();
    v264 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v5 = *(_QWORD *)(a1 + 72) + v264;
    v265 = *(_QWORD *)(a1 + 80) - v264;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v265;
    v4 = *(_QWORD *)(a1 + 88);
    v277 = *(_QWORD *)(a1 + 96) + v5 - v4;
    v7 = v275;
    v9 = *(_QWORD *)(a1 + 64);
    v10 = (unsigned __int8 *)(v9 + v4);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v9 + v4;
    if (v4 != v5)
      goto LABEL_2;
LABEL_476:
    v217 = 0;
    *(_QWORD *)(a1 + 88) = v5;
    v218 = v5 > v4;
    v219 = (unsigned __int8 *)(v5 - v4);
    if (v218)
      goto LABEL_478;
  }
  v223 = *(_QWORD **)(a1 + 248);
  v224 = (void (**)(void *))v223[6];
  if (v224)
  {
    if (*(_BYTE *)(a1 + 240))
    {
      v225 = *(unsigned int **)(a1 + 64);
      v226 = (void (**)(void *))v223[4];
      if (v226 == (void (**)(void *))v223[5])
      {
        v236 = (char *)v226 - (char *)v224;
        v235 = v226 == v224;
        v237 = v226 - v224;
        if (v235)
          v238 = 4;
        else
          v238 = v237;
        v239 = (char *)malloc_type_realloc(v224, 16 * v238, 0x80040803F642BuLL);
        if (!v239)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v268 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v268, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        v223[5] = &v239[16 * v238];
        v223[6] = v239;
        v226 = (void (**)(void *))&v239[v236];
        *(_QWORD *)&v239[v236] = sub_20820C534;
        v227 = (unsigned int **)&v239[v236 + 8];
        v228 = *(unsigned int **)(a1 + 64);
      }
      else
      {
        *v226 = sub_20820C534;
        v227 = (unsigned int **)(v226 + 1);
        v228 = v225;
      }
      *v227 = v225;
      v223[4] = v226 + 2;
      *(_BYTE *)(a1 + 240) = 0;
      do
        v240 = __ldaxr(v228);
      while (__stlxr(v240 + 1, v228));
    }
    v241 = malloc_type_malloc(0x38uLL, 0x2A498C84uLL);
    v242 = v241;
    if (!v241)
    {
      v271 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v272 = std::bad_alloc::bad_alloc(v271);
      __cxa_throw(v272, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    *v241 = 0x2000;
    v243 = malloc_type_malloc(0x2008uLL, 0x1DB03DE0uLL);
    if (!v243)
    {
      v269 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v270 = std::bad_alloc::bad_alloc(v269);
      __cxa_throw(v270, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v242[3] = v243;
    *v243 = 0;
    v242[1] = 0x2000;
    v242[2] = v243 + 1;
    v242[4] = 0;
    v242[5] = 0;
    v242[6] = 0;
    v244 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 232) = v242;
    *(_QWORD *)(a1 + 248) = v242;
    *(_QWORD *)(a1 + 256) = v242;
    v245 = *(_QWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v244;
    if (v245)
    {
      for (j = (char *)v245[4]; j != (char *)v245[6]; j -= 16)
      {
        v248 = (void (*)(uint64_t))*((_QWORD *)j - 2);
        v247 = *((_QWORD *)j - 1);
        v248(v247);
      }
      free(j);
      v249 = (_QWORD *)v245[3];
      if (v249)
      {
        do
        {
          v250 = (_QWORD *)*v249;
          free(v249);
          v249 = v250;
        }
        while (v250);
      }
      free(v245);
    }
  }
  *(_OWORD *)a2 = *(_OWORD *)v278;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v278 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  v251 = *(_QWORD **)(a1 + 208);
  v252 = *(_BYTE **)(a1 + 216);
  v253 = v252 - (_BYTE *)v251;
  if (v252 != (_BYTE *)v251)
  {
    if ((unint64_t)v253 >= 9)
    {
      *v6 = (uint64_t)(v251 + 1);
      *(_DWORD *)(a1 + 184) = 0;
      *v251 = v278;
      *(_QWORD *)(a1 + 96) = 0;
      goto LABEL_533;
    }
LABEL_521:
    *(_DWORD *)(a1 + 184) = 0;
    *v251 = v278;
    *(_QWORD *)(a1 + 96) = 0;
    goto LABEL_533;
  }
  v254 = v253 >> 3;
  v255 = 1 - (v253 >> 3);
  v256 = *(_QWORD *)(a1 + 224);
  if (v255 > (v256 - (uint64_t)v252) >> 3)
  {
    v257 = v256 - (_QWORD)v251;
    v258 = v257 >> 2;
    if ((unint64_t)(v257 >> 2) <= 1)
      v258 = 1;
    if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8)
      v259 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v259 = v258;
    if (v259 >> 61)
      sub_207CA3AB8();
    v260 = (char *)operator new(8 * v259);
    v261 = 8 * v255;
    v262 = &v260[8 * v254];
    bzero(v262, v261);
    *(_QWORD *)(a1 + 208) = v262;
    *(_QWORD *)(a1 + 216) = &v262[v261];
    *(_QWORD *)(a1 + 224) = &v260[8 * v259];
    if (v252)
      operator delete(v252);
    v251 = *(_QWORD **)(a1 + 208);
    goto LABEL_521;
  }
  if (v253 != 8)
  {
    bzero(*(void **)(a1 + 216), 8 * v255);
    v252 += 8 * v255;
  }
  *v6 = (uint64_t)v252;
  v266 = *(_QWORD **)(a1 + 208);
  *(_DWORD *)(a1 + 184) = 0;
  *v266 = v278;
  *(_QWORD *)(a1 + 96) = 0;
LABEL_533:
  *(_QWORD *)(a1 + 280) += v277 + *(_QWORD *)(a1 + 88) - (*(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 72));
}

void sub_20820EDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_20820EE04(a11);
  _Unwind_Resume(a1);
}

void sub_20820EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_20820EE04(a11);
  _Unwind_Resume(a1);
}

void sub_20820EDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20820EE04(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20820EE04(uint64_t a1)
{
  _QWORD *v2;
  char *i;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    for (i = (char *)v2[4]; i != (char *)v2[6]; i -= 16)
    {
      v5 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v4 = *((_QWORD *)i - 1);
      v5(v4);
    }
    free(i);
    v6 = (_QWORD *)v2[3];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        free(v6);
        v6 = v7;
      }
      while (v7);
    }
    free(v2);
  }
  return a1;
}

void *sub_20820EE80(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 32) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20820F34C(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C08ECE0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 5;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(5, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_20820EFEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20820F000()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_20820FBA0(exception);
  __cxa_throw(exception, (struct type_info *)&unk_24C08EDE0, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_20820F034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20820F048(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 48) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20820FBE0(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C08EE20, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 9;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(9, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3 - 1;
  return result;
}

void sub_20820F1B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20820F1CC(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 40) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20820FC20(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C08EE60, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 8;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(8, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_20820F338(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20820F34C(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "str size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08ED08;
  return result;
}

void sub_20820F378(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

void sub_20820F38C(void **a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;

  v7 = (unint64_t *)a1[1];
  v6 = (unint64_t)a1[2];
  v8 = (char *)v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = (char *)*a1;
    v11 = (char *)v7 - (_BYTE *)*a1;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      sub_207CA420C();
    v14 = v6 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_207CA3AB8();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (unint64_t *)&v16[8 * v12];
    *v17 = a2 | (unint64_t)(a3 << 32);
    v9 = v17 + 1;
    if (v7 != (unint64_t *)v10)
    {
      v18 = (char *)v7 - v10 - 8;
      if (v18 < 0x58)
        goto LABEL_28;
      if ((unint64_t)((char *)v7 - v16 - v11) < 0x20)
        goto LABEL_28;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (char *)&v7[v20 / 0xFFFFFFFFFFFFFFF8];
      v17 = (unint64_t *)((char *)v17 - v20);
      v21 = &v16[8 * v12 - 16];
      v22 = (__int128 *)(v7 - 2);
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v25 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v17 = v25;
        }
        while (v8 != v10);
      }
      v8 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = &v16[8 * v15];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v7 = a2 | (unint64_t)(a3 << 32);
    v9 = v7 + 1;
  }
  a1[1] = v9;
}

void sub_20820F500(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  std::bad_alloc *v40;
  std::bad_alloc *v41;

  if (a1[2] < (unint64_t)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20820F7F0(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C08ED20, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20820F81C(v39);
    __cxa_throw(v39, (struct type_info *)&unk_24C08ED38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v4 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)v4 = 6;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    v9 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v5 = (uint64_t *)a1[14];
  v6 = 24 * a2;
  v8 = v5[1];
  v7 = v5[2];
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 - v7 + v6;
  v11 = v8 >= v10;
  v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(_QWORD *)(v4 + 16) = v9;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
LABEL_14:
    *v18 = v9;
    v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  v13 = v6 | 7;
  v14 = *v5;
  while (v14 < v13)
  {
    v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      v14 = v6 | 7;
      break;
    }
  }
  v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  v5[3] = (uint64_t)v16;
  v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 16) = v9;
  v18 = (unint64_t *)a1[12];
  v17 = a1[13];
  if ((unint64_t)v18 < v17)
    goto LABEL_14;
LABEL_16:
  v20 = (char *)a1[11];
  v21 = ((char *)v18 - v20) >> 3;
  v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61)
    sub_207CA420C();
  v23 = v17 - (_QWORD)v20;
  if (v23 >> 2 > v22)
    v22 = v23 >> 2;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
    v24 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 >> 61)
      sub_207CA3AB8();
    v25 = (char *)operator new(8 * v24);
    v26 = (unint64_t *)&v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v9;
    v19 = (uint64_t)(v26 + 1);
    v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20)
      goto LABEL_34;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = (unint64_t *)(8 * v21);
  v27 = 0;
  *(_QWORD *)(8 * v21) = v9;
  v19 = 8 * v21 + 8;
  v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v20 - v25) < 0x20)
      goto LABEL_44;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    v26 = (unint64_t *)((char *)v26 - v31);
    v33 = &v25[8 * v21 - 16];
    v34 = v18 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v37 = *--v18;
        *--v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18)
    operator delete(v18);
LABEL_36:
  a1[12] = v19;
}

void sub_20820F7C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20820F7DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20820F7F0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "array size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08ED60;
  return result;
}

std::runtime_error *sub_20820F81C(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "depth size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08ED88;
  return result;
}

void sub_20820F848(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

void sub_20820F85C(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

void sub_20820F870(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  std::bad_alloc *v40;
  std::bad_alloc *v41;

  if (a1[3] < (unint64_t)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20820FB60(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C08EDA0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20820F81C(v39);
    __cxa_throw(v39, (struct type_info *)&unk_24C08ED38, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v4 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)v4 = 7;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    v9 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v5 = (uint64_t *)a1[14];
  v6 = 48 * a2;
  v8 = v5[1];
  v7 = v5[2];
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 - v7 + v6;
  v11 = v8 >= v10;
  v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(_QWORD *)(v4 + 16) = v9;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
LABEL_14:
    *v18 = v9;
    v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  v13 = v6 | 7;
  v14 = *v5;
  while (v14 < v13)
  {
    v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      v14 = v6 | 7;
      break;
    }
  }
  v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  v5[3] = (uint64_t)v16;
  v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 16) = v9;
  v18 = (unint64_t *)a1[12];
  v17 = a1[13];
  if ((unint64_t)v18 < v17)
    goto LABEL_14;
LABEL_16:
  v20 = (char *)a1[11];
  v21 = ((char *)v18 - v20) >> 3;
  v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61)
    sub_207CA420C();
  v23 = v17 - (_QWORD)v20;
  if (v23 >> 2 > v22)
    v22 = v23 >> 2;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
    v24 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 >> 61)
      sub_207CA3AB8();
    v25 = (char *)operator new(8 * v24);
    v26 = (unint64_t *)&v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v9;
    v19 = (uint64_t)(v26 + 1);
    v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20)
      goto LABEL_34;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = (unint64_t *)(8 * v21);
  v27 = 0;
  *(_QWORD *)(8 * v21) = v9;
  v19 = 8 * v21 + 8;
  v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v20 - v25) < 0x20)
      goto LABEL_44;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    v26 = (unint64_t *)((char *)v26 - v31);
    v33 = &v25[8 * v21 - 16];
    v34 = v18 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v37 = *--v18;
        *--v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18)
    operator delete(v18);
LABEL_36:
  a1[12] = v19;
}

void sub_20820FB38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20820FB4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20820FB60(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "map size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08EDC8;
  return result;
}

void sub_20820FB8C(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

std::runtime_error *sub_20820FBA0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "parse error");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08EE08;
  return result;
}

void sub_20820FBCC(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

std::runtime_error *sub_20820FBE0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "ext size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08EE48;
  return result;
}

void sub_20820FC0C(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

std::runtime_error *sub_20820FC20(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "bin size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08EE88;
  return result;
}

void sub_20820FC4C(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

uint64_t **sub_20820FC60(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  const void *v5;
  size_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  char *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v16;

  sub_20820FD54(a2, *a3);
  v5 = (const void *)*((_QWORD *)a3 + 1);
  v6 = *a3;
  v7 = *a2;
  v8 = (*a2)[2];
  v9 = **a2;
  if (v8 - v9 >= v6)
  {
    v13 = (char *)v7[1];
  }
  else
  {
    if (v8)
      v10 = 2 * v8;
    else
      v10 = 0x2000;
    v11 = v9 + v6;
    while (v10 < v11)
    {
      v12 = (uint64_t)v10 <= 0;
      v10 *= 2;
      if (v12)
      {
        v10 = v11;
        break;
      }
    }
    v13 = (char *)malloc_type_realloc((void *)v7[1], v10, 0xAD6A59EEuLL);
    if (!v13)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v16 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v16, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v7[1] = (uint64_t)v13;
    v7[2] = v10;
    v9 = *v7;
  }
  memcpy(&v13[v9], v5, v6);
  *v7 += v6;
  return a2;
}

uint64_t **sub_20820FD54(uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  std::bad_alloc *exception;
  std::bad_alloc *v27;

  if (a2 > 0xFF)
  {
    if (!HIWORD(a2))
    {
      v4 = *a1;
      v11 = (*a1)[2];
      v12 = **a1;
      if ((unint64_t)(v11 - v12) >= 3)
      {
        v15 = (char *)v4[1];
      }
      else
      {
        if (v11)
          v13 = 2 * v11;
        else
          v13 = 0x2000;
        v14 = v12 + 3;
        while (v13 < v14)
        {
          v9 = (uint64_t)v13 <= 0;
          v13 *= 2;
          if (v9)
          {
            v13 = v14;
            break;
          }
        }
        v15 = (char *)malloc_type_realloc((void *)v4[1], v13, 0xAD6A59EEuLL);
        if (!v15)
          goto LABEL_43;
        v4[1] = (uint64_t)v15;
        v4[2] = v13;
        v12 = *v4;
      }
      v23 = &v15[v12];
      *v23 = -59;
      *(_WORD *)(v23 + 1) = bswap32(a2) >> 16;
      v17 = 3;
      goto LABEL_42;
    }
    v4 = *a1;
    v18 = (*a1)[2];
    v19 = **a1;
    if ((unint64_t)(v18 - v19) >= 5)
    {
      v22 = (char *)v4[1];
    }
    else
    {
      if (v18)
        v20 = 2 * v18;
      else
        v20 = 0x2000;
      v21 = v19 + 5;
      while (v20 < v21)
      {
        v9 = (uint64_t)v20 <= 0;
        v20 *= 2;
        if (v9)
        {
          v20 = v21;
          break;
        }
      }
      v22 = (char *)malloc_type_realloc((void *)v4[1], v20, 0xAD6A59EEuLL);
      if (!v22)
        goto LABEL_43;
      v4[1] = (uint64_t)v22;
      v4[2] = v20;
      v19 = *v4;
    }
    v24 = &v22[v19];
    *v24 = -58;
    *(_DWORD *)(v24 + 1) = bswap32(a2);
    v17 = 5;
    goto LABEL_42;
  }
  v4 = *a1;
  v5 = (*a1)[2];
  v6 = **a1;
  if ((unint64_t)(v5 - v6) >= 2)
  {
    v10 = (char *)v4[1];
    goto LABEL_26;
  }
  if (v5)
    v7 = 2 * v5;
  else
    v7 = 0x2000;
  v8 = v6 + 2;
  while (v7 < v8)
  {
    v9 = (uint64_t)v7 <= 0;
    v7 *= 2;
    if (v9)
    {
      v7 = v8;
      break;
    }
  }
  v10 = (char *)malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
  if (!v10)
  {
LABEL_43:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v27 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v27, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v4[1] = (uint64_t)v10;
  v4[2] = v7;
  v6 = *v4;
LABEL_26:
  v16 = &v10[v6];
  *v16 = -60;
  v16[1] = a2;
  v17 = 2;
LABEL_42:
  *v4 += v17;
  return a1;
}

char *sub_20820FF5C(uint64_t **a1, int a2)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  char *result;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v2 = a2;
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > -33)
  {
    if (v4 == v5)
    {
      if (v4)
        v10 = 2 * v4;
      else
        v10 = 0x2000;
      while (v10 < v4 + 1)
      {
        v8 = (uint64_t)v10 <= 0;
        v10 *= 2;
        if (v8)
        {
          v10 = v4 + 1;
          break;
        }
      }
      result = (char *)malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_28;
      v3[1] = (uint64_t)result;
      v3[2] = v10;
      v5 = *v3;
    }
    else
    {
      result = (char *)v3[1];
    }
    v12 = &result[v5];
    v13 = 1;
    goto LABEL_27;
  }
  if ((unint64_t)(v4 - v5) >= 2)
  {
    result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  v7 = v5 + 2;
  while (v6 < v7)
  {
    v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      v6 = v7;
      break;
    }
  }
  result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_24:
  v11 = &result[v5];
  *v11 = -48;
  v12 = v11 + 1;
  v13 = 2;
LABEL_27:
  *v12 = v2;
  *v3 += v13;
  return result;
}

char *sub_2082100A4(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  char *result;
  size_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 < 0)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (char *)v3[1];
    }
    else
    {
      if (v4)
        v9 = 2 * v4;
      else
        v9 = 0x2000;
      v10 = v5 + 2;
      while (v9 < v10)
      {
        v7 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v7)
        {
          v9 = v10;
          break;
        }
      }
      result = (char *)malloc_type_realloc((void *)v3[1], v9, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_28;
      v3[1] = (uint64_t)result;
      v3[2] = v9;
      v5 = *v3;
    }
    v13 = &result[v5];
    *v13 = -52;
    v11 = v13 + 1;
    v12 = 2;
    goto LABEL_27;
  }
  if (v4 != v5)
  {
    result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_24:
  v11 = &result[v5];
  v12 = 1;
LABEL_27:
  *v11 = a2;
  *v3 += v12;
  return result;
}

_BYTE *sub_2082101E8(uint64_t **a1, signed int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  BOOL v9;
  _BYTE *result;
  size_t v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  unsigned int v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char v22;
  size_t v23;
  size_t v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 <= -33)
  {
    v6 = v4 - v5;
    if (a2 <= 0xFFFFFF7F)
    {
      if (v6 >= 3)
      {
        result = (_BYTE *)v3[1];
        goto LABEL_49;
      }
      if (v4)
        v7 = 2 * v4;
      else
        v7 = 0x2000;
      v8 = v5 + 3;
      while (v7 < v8)
      {
        v9 = (uint64_t)v7 <= 0;
        v7 *= 2;
        if (v9)
        {
          v7 = v8;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v7, 0xAD6A59EEuLL);
      if (result)
      {
        v3[1] = (uint64_t)result;
        v3[2] = v7;
        v5 = *v3;
LABEL_49:
        v17 = bswap32(a2) >> 16;
        v18 = &result[v5];
        v19 = -47;
LABEL_70:
        *v18 = v19;
        *(_WORD *)(v18 + 1) = v17;
        v20 = 3;
        goto LABEL_71;
      }
LABEL_72:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    if (v6 >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v12 = 2 * v4;
      else
        v12 = 0x2000;
      v13 = v5 + 2;
      while (v12 < v13)
      {
        v9 = (uint64_t)v12 <= 0;
        v12 *= 2;
        if (v9)
        {
          v12 = v13;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_72;
      v3[1] = (uint64_t)result;
      v3[2] = v12;
      v5 = *v3;
    }
    v21 = &result[v5];
    v22 = -48;
LABEL_67:
    *v21 = v22;
    v21[1] = a2;
    v20 = 2;
    goto LABEL_71;
  }
  if (a2 > 127)
  {
    v14 = v4 - v5;
    if (a2 > 0xFF)
    {
      if (v14 >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v4)
          v23 = 2 * v4;
        else
          v23 = 0x2000;
        v24 = v5 + 3;
        while (v23 < v24)
        {
          v9 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v9)
          {
            v23 = v24;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_72;
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        v5 = *v3;
      }
      v17 = bswap32(a2) >> 16;
      v18 = &result[v5];
      v19 = -51;
      goto LABEL_70;
    }
    if (v14 >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v15 = 2 * v4;
      else
        v15 = 0x2000;
      v16 = v5 + 2;
      while (v15 < v16)
      {
        v9 = (uint64_t)v15 <= 0;
        v15 *= 2;
        if (v9)
        {
          v15 = v16;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_72;
      v3[1] = (uint64_t)result;
      v3[2] = v15;
      v5 = *v3;
    }
    v21 = &result[v5];
    v22 = -52;
    goto LABEL_67;
  }
  if (v4 == v5)
  {
    if (v4)
      v11 = 2 * v4;
    else
      v11 = 0x2000;
    while (v11 < v4 + 1)
    {
      v9 = (uint64_t)v11 <= 0;
      v11 *= 2;
      if (v9)
      {
        v11 = v4 + 1;
        break;
      }
    }
    result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
    if (!result)
      goto LABEL_72;
    v3[1] = (uint64_t)result;
    v3[2] = v11;
    v5 = *v3;
  }
  else
  {
    result = (_BYTE *)v3[1];
  }
  result[v5] = a2;
  v20 = 1;
LABEL_71:
  *v3 += v20;
  return result;
}

uint64_t sub_2082104AC()
{
  return std::ostream::write();
}

_BYTE *sub_2082105A8(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  std::bad_alloc *exception;
  std::bad_alloc *v18;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    v9 = v4 - v5;
    if (a2 <= 0xFF)
    {
      if (v9 >= 2)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v4)
          v10 = 2 * v4;
        else
          v10 = 0x2000;
        v11 = v5 + 2;
        while (v10 < v11)
        {
          v7 = (uint64_t)v10 <= 0;
          v10 *= 2;
          if (v7)
          {
            v10 = v11;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_42;
        v3[1] = (uint64_t)result;
        v3[2] = v10;
        v5 = *v3;
      }
      v15 = &result[v5];
      *v15 = -52;
      v15[1] = a2;
      v12 = 2;
      goto LABEL_41;
    }
    if (v9 >= 3)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 3;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_42;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v16 = &result[v5];
    *v16 = -51;
    *(_WORD *)(v16 + 1) = __rev16(a2);
    v12 = 3;
    goto LABEL_41;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_25;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_42:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_25:
  result[v5] = a2;
  v12 = 1;
LABEL_41:
  *v3 += v12;
  return result;
}

_BYTE *sub_208210774(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  unsigned int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  std::bad_alloc *exception;
  std::bad_alloc *v43;

  if ((int)a2 > -33)
  {
    if ((int)a2 <= 127)
    {
      v3 = *a1;
      v10 = (*a1)[2];
      v11 = **a1;
      if (v10 == v11)
      {
        if (v10)
          v12 = 2 * v10;
        else
          v12 = 0x2000;
        while (v12 < v10 + 1)
        {
          v8 = (uint64_t)v12 <= 0;
          v12 *= 2;
          if (v8)
          {
            v12 = v10 + 1;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v12;
        v11 = *v3;
      }
      else
      {
        result = (_BYTE *)v3[1];
      }
      result[v11] = a2;
      v24 = 1;
      goto LABEL_98;
    }
    if (a2 > 0xFF)
    {
      if (HIWORD(a2))
      {
        v3 = *a1;
        v38 = (*a1)[2];
        v39 = **a1;
        if ((unint64_t)(v38 - v39) >= 5)
        {
          result = (_BYTE *)v3[1];
        }
        else
        {
          if (v38)
            v40 = 2 * v38;
          else
            v40 = 0x2000;
          v41 = v39 + 5;
          while (v40 < v41)
          {
            v8 = (uint64_t)v40 <= 0;
            v40 *= 2;
            if (v8)
            {
              v40 = v41;
              break;
            }
          }
          result = malloc_type_realloc((void *)v3[1], v40, 0xAD6A59EEuLL);
          if (!result)
            goto LABEL_101;
          v3[1] = (uint64_t)result;
          v3[2] = v40;
          v39 = *v3;
        }
        v21 = bswap32(a2);
        v22 = &result[v39];
        v23 = -50;
        goto LABEL_51;
      }
      v3 = *a1;
      v29 = (*a1)[2];
      v30 = **a1;
      if ((unint64_t)(v29 - v30) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v29)
          v31 = 2 * v29;
        else
          v31 = 0x2000;
        v32 = v30 + 3;
        while (v31 < v32)
        {
          v8 = (uint64_t)v31 <= 0;
          v31 *= 2;
          if (v8)
          {
            v31 = v32;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v31, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v31;
        v30 = *v3;
      }
      v33 = bswap32(a2) >> 16;
      v34 = &result[v30];
      v35 = -51;
LABEL_97:
      *v34 = v35;
      *(_WORD *)(v34 + 1) = v33;
      v24 = 3;
      goto LABEL_98;
    }
    v3 = *a1;
    v17 = (*a1)[2];
    v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v17)
        v19 = 2 * v17;
      else
        v19 = 0x2000;
      v20 = v18 + 2;
      while (v19 < v20)
      {
        v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          v19 = v20;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_101;
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      v18 = *v3;
    }
    v36 = &result[v18];
    v37 = -52;
LABEL_83:
    *v36 = v37;
    v36[1] = a2;
    v24 = 2;
    goto LABEL_98;
  }
  if (a2 > 0xFFFF7FFF)
  {
    if (a2 <= 0xFFFFFF7F)
    {
      v3 = *a1;
      v13 = (*a1)[2];
      v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v13)
          v15 = 2 * v13;
        else
          v15 = 0x2000;
        v16 = v14 + 3;
        while (v15 < v16)
        {
          v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            v15 = v16;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        v14 = *v3;
      }
      v33 = bswap32(a2) >> 16;
      v34 = &result[v14];
      v35 = -47;
      goto LABEL_97;
    }
    v3 = *a1;
    v25 = (*a1)[2];
    v26 = **a1;
    if ((unint64_t)(v25 - v26) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v25)
        v27 = 2 * v25;
      else
        v27 = 0x2000;
      v28 = v26 + 2;
      while (v27 < v28)
      {
        v8 = (uint64_t)v27 <= 0;
        v27 *= 2;
        if (v8)
        {
          v27 = v28;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v27, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_101;
      v3[1] = (uint64_t)result;
      v3[2] = v27;
      v26 = *v3;
    }
    v36 = &result[v26];
    v37 = -48;
    goto LABEL_83;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if ((unint64_t)(v4 - v5) >= 5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_50;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  v7 = v5 + 5;
  while (v6 < v7)
  {
    v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      v6 = v7;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_101:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v43 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v43, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_50:
  v21 = bswap32(a2);
  v22 = &result[v5];
  v23 = -46;
LABEL_51:
  *v22 = v23;
  *(_DWORD *)(v22 + 1) = v21;
  v24 = 5;
LABEL_98:
  *v3 += v24;
  return result;
}

uint64_t sub_208210B90()
{
  return std::ostream::write();
}

_BYTE *sub_208210C8C(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  std::bad_alloc *exception;
  std::bad_alloc *v24;

  if (a2 > 0xFF)
  {
    if (!HIWORD(a2))
    {
      v3 = *a1;
      v9 = (*a1)[2];
      v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v9)
          v11 = 2 * v9;
        else
          v11 = 0x2000;
        v12 = v10 + 3;
        while (v11 < v12)
        {
          v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            v11 = v12;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_56;
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        v10 = *v3;
      }
      v20 = &result[v10];
      *v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      v19 = 3;
      goto LABEL_55;
    }
    v3 = *a1;
    v15 = (*a1)[2];
    v16 = **a1;
    if ((unint64_t)(v15 - v16) >= 5)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v15)
        v17 = 2 * v15;
      else
        v17 = 0x2000;
      v18 = v16 + 5;
      while (v17 < v18)
      {
        v7 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v7)
        {
          v17 = v18;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_56;
      v3[1] = (uint64_t)result;
      v3[2] = v17;
      v16 = *v3;
    }
    v22 = &result[v16];
    *v22 = -50;
    *(_DWORD *)(v22 + 1) = bswap32(a2);
    v19 = 5;
    goto LABEL_55;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 2;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_56;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v21 = &result[v5];
    *v21 = -52;
    v21[1] = a2;
    v19 = 2;
    goto LABEL_55;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_48;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_56:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v24 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v24, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_48:
  result[v5] = a2;
  v19 = 1;
LABEL_55:
  *v3 += v19;
  return result;
}

uint64_t sub_208210F00(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  return a2;
}

_BYTE *sub_208210FF0(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  char v36;
  unsigned int v37;
  char *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  unsigned int v44;
  char *v45;
  char v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  size_t v52;
  std::bad_alloc *exception;
  std::bad_alloc *v54;

  if ((uint64_t)a2 <= -33)
  {
    if (a2 <= 0xFFFFFFFFFFFF7FFFLL)
    {
      if (a2 <= 0xFFFFFFFF7FFFFFFFLL)
      {
        v3 = *a1;
        v4 = (*a1)[2];
        v5 = **a1;
        if ((unint64_t)(v4 - v5) >= 9)
        {
          result = (_BYTE *)v3[1];
          goto LABEL_88;
        }
        if (v4)
          v6 = 2 * v4;
        else
          v6 = 0x2000;
        v7 = v5 + 9;
        while (v6 < v7)
        {
          v8 = (uint64_t)v6 <= 0;
          v6 *= 2;
          if (v8)
          {
            v6 = v7;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
        if (result)
        {
          v3[1] = (uint64_t)result;
          v3[2] = v6;
          v5 = *v3;
LABEL_88:
          v34 = bswap64(a2);
          v35 = &result[v5];
          v36 = -45;
LABEL_128:
          *v35 = v36;
          *(_QWORD *)(v35 + 1) = v34;
          v25 = 9;
          goto LABEL_129;
        }
LABEL_130:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v54 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v54, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v3 = *a1;
      v21 = (*a1)[2];
      v22 = **a1;
      if ((unint64_t)(v21 - v22) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v21)
          v23 = 2 * v21;
        else
          v23 = 0x2000;
        v24 = v22 + 5;
        while (v23 < v24)
        {
          v8 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v8)
          {
            v23 = v24;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        v22 = *v3;
      }
      v44 = bswap32(a2);
      v45 = &result[v22];
      v46 = -46;
LABEL_122:
      *v45 = v46;
      *(_DWORD *)(v45 + 1) = v44;
      v25 = 5;
      goto LABEL_129;
    }
    if (a2 <= 0xFFFFFFFFFFFFFF7FLL)
    {
      v3 = *a1;
      v13 = (*a1)[2];
      v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v13)
          v15 = 2 * v13;
        else
          v15 = 0x2000;
        v16 = v14 + 3;
        while (v15 < v16)
        {
          v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            v15 = v16;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        v14 = *v3;
      }
      v37 = bswap32(a2) >> 16;
      v38 = &result[v14];
      v39 = -47;
LABEL_125:
      *v38 = v39;
      *(_WORD *)(v38 + 1) = v37;
      v25 = 3;
      goto LABEL_129;
    }
    v3 = *a1;
    v26 = (*a1)[2];
    v27 = **a1;
    if ((unint64_t)(v26 - v27) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v26)
        v28 = 2 * v26;
      else
        v28 = 0x2000;
      v29 = v27 + 2;
      while (v28 < v29)
      {
        v8 = (uint64_t)v28 <= 0;
        v28 *= 2;
        if (v8)
        {
          v28 = v29;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v28, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_130;
      v3[1] = (uint64_t)result;
      v3[2] = v28;
      v27 = *v3;
    }
    v47 = &result[v27];
    v48 = -48;
LABEL_119:
    *v47 = v48;
    v47[1] = a2;
    v25 = 2;
    goto LABEL_129;
  }
  if ((uint64_t)a2 > 127)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        v3 = *a1;
        v49 = (*a1)[2];
        v50 = **a1;
        if ((unint64_t)(v49 - v50) >= 9)
        {
          result = (_BYTE *)v3[1];
        }
        else
        {
          if (v49)
            v51 = 2 * v49;
          else
            v51 = 0x2000;
          v52 = v50 + 9;
          while (v51 < v52)
          {
            v8 = (uint64_t)v51 <= 0;
            v51 *= 2;
            if (v8)
            {
              v51 = v52;
              break;
            }
          }
          result = malloc_type_realloc((void *)v3[1], v51, 0xAD6A59EEuLL);
          if (!result)
            goto LABEL_130;
          v3[1] = (uint64_t)result;
          v3[2] = v51;
          v50 = *v3;
        }
        v34 = bswap64(a2);
        v35 = &result[v50];
        v36 = -49;
        goto LABEL_128;
      }
      v3 = *a1;
      v30 = (*a1)[2];
      v31 = **a1;
      if ((unint64_t)(v30 - v31) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v30)
          v32 = 2 * v30;
        else
          v32 = 0x2000;
        v33 = v31 + 5;
        while (v32 < v33)
        {
          v8 = (uint64_t)v32 <= 0;
          v32 *= 2;
          if (v8)
          {
            v32 = v33;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v32, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v32;
        v31 = *v3;
      }
      v44 = bswap32(a2);
      v45 = &result[v31];
      v46 = -50;
      goto LABEL_122;
    }
    if (a2 > 0xFF)
    {
      v3 = *a1;
      v40 = (*a1)[2];
      v41 = **a1;
      if ((unint64_t)(v40 - v41) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v40)
          v42 = 2 * v40;
        else
          v42 = 0x2000;
        v43 = v41 + 3;
        while (v42 < v43)
        {
          v8 = (uint64_t)v42 <= 0;
          v42 *= 2;
          if (v8)
          {
            v42 = v43;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v42, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v42;
        v41 = *v3;
      }
      v37 = bswap32(a2) >> 16;
      v38 = &result[v41];
      v39 = -51;
      goto LABEL_125;
    }
    v3 = *a1;
    v17 = (*a1)[2];
    v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v17)
        v19 = 2 * v17;
      else
        v19 = 0x2000;
      v20 = v18 + 2;
      while (v19 < v20)
      {
        v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          v19 = v20;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_130;
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      v18 = *v3;
    }
    v47 = &result[v18];
    v48 = -52;
    goto LABEL_119;
  }
  v3 = *a1;
  v10 = (*a1)[2];
  v11 = **a1;
  if (v10 == v11)
  {
    if (v10)
      v12 = 2 * v10;
    else
      v12 = 0x2000;
    while (v12 < v10 + 1)
    {
      v8 = (uint64_t)v12 <= 0;
      v12 *= 2;
      if (v8)
      {
        v12 = v10 + 1;
        break;
      }
    }
    result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
    if (!result)
      goto LABEL_130;
    v3[1] = (uint64_t)result;
    v3[2] = v12;
    v11 = *v3;
  }
  else
  {
    result = (_BYTE *)v3[1];
  }
  result[v11] = a2;
  v25 = 1;
LABEL_129:
  *v3 += v25;
  return result;
}

uint64_t sub_20821152C()
{
  return std::ostream::write();
}

_BYTE *sub_20821166C(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;

  if (a2 > 0xFF)
  {
    if (!(a2 >> 16))
    {
      v3 = *a1;
      v9 = (*a1)[2];
      v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v9)
          v11 = 2 * v9;
        else
          v11 = 0x2000;
        v12 = v10 + 3;
        while (v11 < v12)
        {
          v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            v11 = v12;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_70;
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        v10 = *v3;
      }
      v20 = &result[v10];
      *v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      v19 = 3;
      goto LABEL_69;
    }
    if (!HIDWORD(a2))
    {
      v3 = *a1;
      v15 = (*a1)[2];
      v16 = **a1;
      if ((unint64_t)(v15 - v16) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v15)
          v17 = 2 * v15;
        else
          v17 = 0x2000;
        v18 = v16 + 5;
        while (v17 < v18)
        {
          v7 = (uint64_t)v17 <= 0;
          v17 *= 2;
          if (v7)
          {
            v17 = v18;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_70;
        v3[1] = (uint64_t)result;
        v3[2] = v17;
        v16 = *v3;
      }
      v26 = &result[v16];
      *v26 = -50;
      *(_DWORD *)(v26 + 1) = bswap32(a2);
      v19 = 5;
      goto LABEL_69;
    }
    v3 = *a1;
    v22 = (*a1)[2];
    v23 = **a1;
    if ((unint64_t)(v22 - v23) >= 9)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v22)
        v24 = 2 * v22;
      else
        v24 = 0x2000;
      v25 = v23 + 9;
      while (v24 < v25)
      {
        v7 = (uint64_t)v24 <= 0;
        v24 *= 2;
        if (v7)
        {
          v24 = v25;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v24, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_70;
      v3[1] = (uint64_t)result;
      v3[2] = v24;
      v23 = *v3;
    }
    v27 = &result[v23];
    *v27 = -49;
    *(_QWORD *)(v27 + 1) = bswap64(a2);
    v19 = 9;
    goto LABEL_69;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 2;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_70;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v21 = &result[v5];
    *v21 = -52;
    v21[1] = a2;
    v19 = 2;
    goto LABEL_69;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_49;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_70:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v29 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v29, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_49:
  result[v5] = a2;
  v19 = 1;
LABEL_69:
  *v3 += v19;
  return result;
}

uint64_t sub_208211974()
{
  return std::ostream::write();
}

uint64_t **sub_208211A6C(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v4 = *a3;
  v5 = *a2;
  v6 = (*a2)[2];
  v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 5)
  {
    v11 = (char *)v5[1];
  }
  else
  {
    if (v6)
      v8 = 2 * v6;
    else
      v8 = 0x2000;
    v9 = v7 + 5;
    while (v8 < v9)
    {
      v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        v8 = v9;
        break;
      }
    }
    v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    v7 = *v5;
  }
  v12 = &v11[v7];
  *v12 = -54;
  *(_DWORD *)(v12 + 1) = bswap32(v4);
  *v5 += 5;
  return a2;
}

uint64_t **sub_208211B48(uint64_t a1, uint64_t **a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v4 = *a3;
  v5 = *a2;
  v6 = (*a2)[2];
  v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 9)
  {
    v11 = (char *)v5[1];
  }
  else
  {
    if (v6)
      v8 = 2 * v6;
    else
      v8 = 0x2000;
    v9 = v7 + 9;
    while (v8 < v9)
    {
      v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        v8 = v9;
        break;
      }
    }
    v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    v7 = *v5;
  }
  v12 = &v11[v7];
  *v12 = -53;
  *(_QWORD *)(v12 + 1) = bswap64(v4);
  *v5 += 9;
  return a2;
}

uint64_t **sub_208211C24(uint64_t a1, uint64_t **a2, _BYTE *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  size_t v9;
  _BYTE *v10;
  char v11;
  std::bad_alloc *exception;
  std::bad_alloc *v14;

  v4 = *a2;
  v5 = (*a2)[2];
  v6 = **a2;
  if (!*a3)
  {
    if (v5 == v6)
    {
      if (v5)
        v9 = 2 * v5;
      else
        v9 = 0x2000;
      while (v9 < v5 + 1)
      {
        v8 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v8)
        {
          v9 = v5 + 1;
          break;
        }
      }
      v10 = malloc_type_realloc((void *)v4[1], v9, 0xAD6A59EEuLL);
      if (!v10)
        goto LABEL_26;
      v4[1] = (uint64_t)v10;
      v4[2] = v9;
      v6 = *v4;
    }
    else
    {
      v10 = (_BYTE *)v4[1];
    }
    v11 = -62;
    goto LABEL_25;
  }
  if (v5 == v6)
  {
    if (v5)
      v7 = 2 * v5;
    else
      v7 = 0x2000;
    while (v7 < v5 + 1)
    {
      v8 = (uint64_t)v7 <= 0;
      v7 *= 2;
      if (v8)
      {
        v7 = v5 + 1;
        break;
      }
    }
    v10 = malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
    if (v10)
    {
      v4[1] = (uint64_t)v10;
      v4[2] = v7;
      v6 = *v4;
      v11 = -61;
      goto LABEL_25;
    }
LABEL_26:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v14, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v10 = (_BYTE *)v4[1];
  v11 = -61;
LABEL_25:
  v10[v6] = v11;
  ++*v4;
  return a2;
}

uint64_t **sub_208211D5C(uint64_t a1, uint64_t **a2, const void **a3)
{
  size_t v5;
  int v6;
  const void **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  BOOL v13;
  char *v14;
  const void **v15;
  std::bad_alloc *v17;
  std::bad_alloc *v18;
  std::runtime_error *exception;

  if (*((char *)a3 + 23) < 0)
  {
    v5 = (size_t)a3[1];
    if (HIDWORD(v5))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20821214C(exception, "container size overflow");
      __cxa_throw(exception, (struct type_info *)&unk_24C08EEA0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v5 = *((unsigned __int8 *)a3 + 23);
  }
  sub_208211EBC(a2, v5);
  v6 = *((char *)a3 + 23);
  v7 = (const void **)*a3;
  v8 = *a2;
  v9 = (*a2)[2];
  v10 = **a2;
  if (v9 - v10 >= v5)
  {
    v14 = (char *)v8[1];
  }
  else
  {
    if (v9)
      v11 = 2 * v9;
    else
      v11 = 0x2000;
    v12 = v10 + v5;
    while (v11 < v12)
    {
      v13 = (uint64_t)v11 <= 0;
      v11 *= 2;
      if (v13)
      {
        v11 = v12;
        break;
      }
    }
    v14 = (char *)malloc_type_realloc((void *)v8[1], v11, 0xAD6A59EEuLL);
    if (!v14)
    {
      v17 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v18 = std::bad_alloc::bad_alloc(v17);
      __cxa_throw(v18, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v8[1] = (uint64_t)v14;
    v8[2] = v11;
    v10 = *v8;
  }
  if (v6 >= 0)
    v15 = a3;
  else
    v15 = v7;
  memcpy(&v14[v10], v15, v5);
  *v8 += v5;
  return a2;
}

void sub_208211EA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_208211EBC(uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  std::bad_alloc *exception;
  std::bad_alloc *v31;

  if (a2 > 0x1F)
  {
    if (a2 <= 0xFF)
    {
      v4 = *a1;
      v10 = (*a1)[2];
      v11 = **a1;
      if ((unint64_t)(v10 - v11) >= 2)
      {
        v14 = (char *)v4[1];
      }
      else
      {
        if (v10)
          v12 = 2 * v10;
        else
          v12 = 0x2000;
        v13 = v11 + 2;
        while (v12 < v13)
        {
          v8 = (uint64_t)v12 <= 0;
          v12 *= 2;
          if (v8)
          {
            v12 = v13;
            break;
          }
        }
        v14 = (char *)malloc_type_realloc((void *)v4[1], v12, 0xAD6A59EEuLL);
        if (!v14)
          goto LABEL_56;
        v4[1] = (uint64_t)v14;
        v4[2] = v12;
        v11 = *v4;
      }
      v21 = &v14[v11];
      *v21 = -39;
      v21[1] = a2;
      v15 = 2;
      goto LABEL_55;
    }
    if (!HIWORD(a2))
    {
      v4 = *a1;
      v16 = (*a1)[2];
      v17 = **a1;
      if ((unint64_t)(v16 - v17) >= 3)
      {
        v20 = (char *)v4[1];
      }
      else
      {
        if (v16)
          v18 = 2 * v16;
        else
          v18 = 0x2000;
        v19 = v17 + 3;
        while (v18 < v19)
        {
          v8 = (uint64_t)v18 <= 0;
          v18 *= 2;
          if (v8)
          {
            v18 = v19;
            break;
          }
        }
        v20 = (char *)malloc_type_realloc((void *)v4[1], v18, 0xAD6A59EEuLL);
        if (!v20)
          goto LABEL_56;
        v4[1] = (uint64_t)v20;
        v4[2] = v18;
        v17 = *v4;
      }
      v27 = &v20[v17];
      *v27 = -38;
      *(_WORD *)(v27 + 1) = bswap32(a2) >> 16;
      v15 = 3;
      goto LABEL_55;
    }
    v4 = *a1;
    v22 = (*a1)[2];
    v23 = **a1;
    if ((unint64_t)(v22 - v23) >= 5)
    {
      v26 = (char *)v4[1];
    }
    else
    {
      if (v22)
        v24 = 2 * v22;
      else
        v24 = 0x2000;
      v25 = v23 + 5;
      while (v24 < v25)
      {
        v8 = (uint64_t)v24 <= 0;
        v24 *= 2;
        if (v8)
        {
          v24 = v25;
          break;
        }
      }
      v26 = (char *)malloc_type_realloc((void *)v4[1], v24, 0xAD6A59EEuLL);
      if (!v26)
        goto LABEL_56;
      v4[1] = (uint64_t)v26;
      v4[2] = v24;
      v23 = *v4;
    }
    v28 = &v26[v23];
    *v28 = -37;
    *(_DWORD *)(v28 + 1) = bswap32(a2);
    v15 = 5;
    goto LABEL_55;
  }
  v4 = *a1;
  v5 = (*a1)[2];
  v6 = **a1;
  if (v5 != v6)
  {
    v9 = (_BYTE *)v4[1];
    goto LABEL_25;
  }
  if (v5)
    v7 = 2 * v5;
  else
    v7 = 0x2000;
  while (v7 < v5 + 1)
  {
    v8 = (uint64_t)v7 <= 0;
    v7 *= 2;
    if (v8)
    {
      v7 = v5 + 1;
      break;
    }
  }
  v9 = malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
  if (!v9)
  {
LABEL_56:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v31 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v31, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v4[1] = (uint64_t)v9;
  v4[2] = v7;
  v6 = *v4;
LABEL_25:
  v9[v6] = a2 | 0xA0;
  v15 = 1;
LABEL_55:
  *v4 += v15;
  return a1;
}

std::runtime_error *sub_20821214C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_24C08EEC8;
  return result;
}

void sub_208212170(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

uint64_t sub_208212184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::runtime_error *exception;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (HIDWORD(v4))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20821214C(exception, "container size overflow");
      __cxa_throw(exception, (struct type_info *)&unk_24C08EEA0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  std::ostream::write();
  std::ostream::write();
  return a2;
}

void sub_2082122B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2082122C8(uint64_t a1)
{
  uint64_t v1;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1 <= -129)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (v1 = *(_QWORD *)(a1 + 8), (unint64_t)v1 >= 0x80))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20820C29C(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  return (char)v1;
}

uint64_t sub_20821232C(uint64_t a1)
{
  uint64_t v1;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1 <= -32769)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (v1 = *(_QWORD *)(a1 + 8), (unint64_t)v1 >= 0x8000))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20820C29C(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  return (__int16)v1;
}

int64_t sub_208212394(uint64_t a1)
{
  int64_t result;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    result = *(_QWORD *)(a1 + 8);
    if (result <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (result = *(_QWORD *)(a1 + 8), (unint64_t)result >> 31))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20820C29C(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void sub_2082123F8(std::string *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;

  v16 = a3;
  v17 = a2;
  sub_20821254C("Failed to load sample ", a1, (std::string *)". Minimum version required is ", &v17, (std::string *)" but current sample version is ", &v16, (std::string *)".");
  if (SHIBYTE(v6) < 0)
  {
    sub_207CA40D8(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v8 = v6;
  }
  v9 = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_207CCB1D4(a4, 5u, (__int128 *)__p);
  if (!v15)
    goto LABEL_11;
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v10);
      if (!v9)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v12);
    if (v11 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v9)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_208212520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20821254C(char *__s, std::string *a2, std::string *a3, unsigned int *a4, std::string *a5, unsigned int *a6, std::string *a7)
{
  uint64_t result;
  _DWORD v14[6];
  int v15;
  std::string v16;
  std::string **v17;
  std::string *v18;
  std::string *v19;
  _DWORD *v20;
  std::string *v21;
  std::string *v22;

  v15 = 0;
  sub_20806BC00(v14, __s);
  v18 = (std::string *)v14;
  v19 = a2;
  v20 = v14;
  v21 = a2;
  v22 = a2;
  if (v15 == -1)
    sub_207CA9F48();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C08EEF8[v15])(&v16, v14);
  v18 = (std::string *)v14;
  v19 = a3;
  v20 = v14;
  v21 = a3;
  v22 = a3;
  if (v15 == -1)
    sub_207CA9F48();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C08EF10[v15])(&v16, v14);
  std::to_string(&v16, *a4);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_207CA9F48();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C08EF28[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a5;
  v20 = v14;
  v21 = a5;
  v22 = a5;
  if (v15 == -1)
    sub_207CA9F48();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C08EF40[v15])(&v16, v14);
  std::to_string(&v16, *a6);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_207CA9F48();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C08EF28[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a7;
  v20 = v14;
  v21 = a7;
  v22 = a7;
  if (v15 == -1)
    sub_207CA9F48();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C08EF58[v15])(&v16, v14);
  if (v15 == -1)
    sub_207CA9F48();
  v18 = &v16;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C08EF70[v15])(&v18, v14);
  if (v15 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C08EEE0[v15])(&v18, v14);
  return result;
}

void sub_2082127E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_208212838(std::string *a1, unsigned int a2, unsigned int a3)
{
  _BYTE v3[120];

  sub_2082123F8(a1, a2, a3, (uint64_t)v3);
  sub_207F09168((uint64_t)v3);
}

void sub_20821285C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if ((_BYTE)a34)
  {
    if (a32)
    {
      if (a31 < 0)
        operator delete(__p);
      if (a24 < 0)
        operator delete(a19);
    }
    if (a18)
    {
      if (a17 < 0)
        operator delete(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2082128B0(_DWORD ***a1)
{
  return sub_2081E2E34(**a1, (char *)(*a1)[1]);
}

void sub_2082128BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C08EEE0[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_207CAA110((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_208212A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208212AB8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_208212D48(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_208212D60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_208212D68(uint64_t a1, _OWORD *a2)
{
  std::string v5;

  sub_208212E0C((uint64_t)a2, &v5);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_24C08EFA8;
  *(_OWORD *)(a1 + 16) = *a2;
  sub_207CCB3BC((_BYTE *)(a1 + 32), a2 + 1);
  return a1;
}

void sub_208212DDC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_208212DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208212E0C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const char *v4;
  void **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type size;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void **p_dst;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  const char *v25;
  const char *v26;
  void **__dst;
  const char *v28;
  int64_t v29;
  void *v30[2];
  unsigned __int8 v31;
  std::string v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  const void *v36;
  unint64_t v37;
  void *__p;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  std::string v43;
  const char *v44[4];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 112))
  {
    v44[0] = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
    LODWORD(v43.__r_.__value_.__l.__data_) = *(_DWORD *)a1;
    std::error_condition::message(&v32, (const std::error_condition *)a1);
    sub_2082140F8((uint64_t)a2, v44, (int *)&v43, &v32);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v9 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  v43.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  LODWORD(__dst) = *(_DWORD *)a1;
  std::error_condition::message(&v32, (const std::error_condition *)a1);
  sub_2082140F8((uint64_t)v30, (const char **)&v43.__r_.__value_.__l.__data_, (int *)&__dst, &v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v4 = (const char *)v31;
  v5 = v30;
  if ((v31 & 0x80u) != 0)
  {
    v5 = (void **)v30[0];
    v4 = (const char *)v30[1];
  }
  v44[0] = (const char *)v5;
  v44[1] = v4;
  sub_207CA2878((uint64_t)&v32);
  if (*(_BYTE *)(a1 + 40))
  {
    sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)"detail", 6);
    sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
    v6 = *(char *)(a1 + 39);
    if (v6 >= 0)
      v7 = a1 + 16;
    else
      v7 = *(_QWORD *)(a1 + 16);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 39);
    else
      v8 = *(_QWORD *)(a1 + 24);
    sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], v7, v8);
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_39;
    sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)", ", 2);
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_39;
  }
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)"location", 8);
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)": ", 2);
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)"{", 1);
  v10 = *(char *)(a1 + 71);
  if (v10 >= 0)
    v11 = a1 + 48;
  else
    v11 = *(_QWORD *)(a1 + 48);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 71);
  else
    v12 = *(_QWORD *)(a1 + 56);
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], v11, v12);
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  std::to_string(&v43, *(_QWORD *)(a1 + 72));
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v43;
  else
    v13 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    size = v43.__r_.__value_.__l.__size_;
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)v13, size);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
  v15 = *(char *)(a1 + 103);
  if (v15 >= 0)
    v16 = a1 + 80;
  else
    v16 = *(_QWORD *)(a1 + 80);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 103);
  else
    v17 = *(_QWORD *)(a1 + 88);
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], v16, v17);
  sub_207CBAB98(&v32.__r_.__value_.__r.__words[2], (uint64_t)"}", 1);
LABEL_39:
  if ((v41 & 0x10) != 0)
  {
    v20 = v40;
    if (v40 < v37)
    {
      v40 = v37;
      v20 = v37;
    }
    v21 = v36;
    v18 = v20 - (_QWORD)v36;
    if (v20 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_64;
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      v18 = 0;
      HIBYTE(v29) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_52;
    }
    v21 = v34;
    v18 = v35 - (_QWORD)v34;
    if ((unint64_t)(v35 - (_QWORD)v34) >= 0x7FFFFFFFFFFFFFF8)
LABEL_64:
      sub_207C95C50();
  }
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (void **)operator new(v22 + 1);
    v28 = (const char *)v18;
    v29 = v23 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = v18;
    p_dst = (void **)&__dst;
    if (!v18)
      goto LABEL_52;
  }
  memmove(p_dst, v21, v18);
LABEL_52:
  *((_BYTE *)p_dst + v18) = 0;
  v32.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + *(_QWORD *)(v32.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v32.__r_.__value_.__r.__words[2] = v24;
  v33 = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](&v42);
  v25 = (const char *)HIBYTE(v29);
  v26 = (const char *)&__dst;
  if (v29 < 0)
  {
    v26 = (const char *)__dst;
    v25 = v28;
  }
  v44[2] = v26;
  v44[3] = v25;
  sub_207CAC8F4((uint64_t)v44, (uint64_t)&v45, "; ", 2uLL, a2);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__dst);
    if (((char)v31 & 0x80000000) == 0)
      return;
  }
  else if (((char)v31 & 0x80000000) == 0)
  {
    return;
  }
  v9 = v30[0];
LABEL_61:
  operator delete(v9);
}

void sub_20821325C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2082132E0(std::runtime_error *this)
{
  if (!LOBYTE(this[8].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[3].__imp_.__imp_))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::runtime_error::~runtime_error(this);
    return;
  }
LABEL_7:
  std::runtime_error::~runtime_error(this);
}

void sub_20821336C(std::runtime_error *this)
{
  void *v2;

  if (!LOBYTE(this[8].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[7].__imp_.__imp_))
    goto LABEL_5;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if (SHIBYTE(this[5].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[3].__imp_.__imp_))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[4].__vftable);
  if (!LOBYTE(this[3].__imp_.__imp_))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::runtime_error::~runtime_error(this);
    goto LABEL_8;
  }
LABEL_7:
  std::runtime_error::~runtime_error(this);
LABEL_8:
  operator delete(v2);
}

void sub_208213400(uint64_t a1, uint64_t a2, void **a3, int a4, const std::string::value_type *a5)
{
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  std::string::size_type v15;
  void *v16;
  void *v17;
  std::string::size_type v18;
  void *v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  std::string __p;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 __dst;
  void *v50;
  unsigned __int8 v51;
  __int128 v52;
  void *v53;
  _QWORD v54[2];
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  _BYTE v59[15];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 96))
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v7 = (void *)*(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
      {
        if (*(_QWORD *)(a2 + 8))
        {
LABEL_5:
          if (a4)
          {
            if ((v7 & 0x80) != 0)
            {
              v8 = *(void **)a2;
              v7 = *(void **)(a2 + 8);
            }
            else
            {
              v8 = (void *)a2;
            }
            v55 = v8;
            v56 = v7;
            v16 = (void *)*((unsigned __int8 *)a3 + 23);
            if ((char)v16 >= 0)
              v17 = a3;
            else
              v17 = *a3;
            if ((char)v16 < 0)
              v16 = a3[1];
            v57 = v17;
            v58 = v16;
            if (a5[23] < 0)
            {
              v25 = a5;
              a5 = *(const std::string::value_type **)a5;
              v18 = *((_QWORD *)v25 + 1);
            }
            else
            {
              v18 = *((unsigned __int8 *)a5 + 23);
            }
            sub_207CAC8F4((uint64_t)&v55, (uint64_t)v59, a5, v18, &__p);
            *(_QWORD *)v59 = __p.__r_.__value_.__l.__size_;
            v26 = __p.__r_.__value_.__r.__words[0];
            *(_QWORD *)&v59[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
            v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            memset(&__p, 0, sizeof(__p));
            sub_207CCB474((char *)&v36, (__int128 *)(a2 + 32));
            v28 = *(_QWORD *)v59;
            *(_QWORD *)a1 = v26;
            *(_QWORD *)(a1 + 8) = v28;
            *(_QWORD *)(a1 + 15) = *(_QWORD *)&v59[7];
            *(_BYTE *)(a1 + 23) = v27;
            *(_BYTE *)(a1 + 24) = 1;
            *(_BYTE *)(a1 + 32) = 0;
            *(_BYTE *)(a1 + 88) = 0;
            if (!v41)
              goto LABEL_47;
            v29 = v38;
            *(_QWORD *)(a1 + 48) = v37;
            *(_OWORD *)(a1 + 32) = v36;
            v36 = 0uLL;
            *(_QWORD *)(a1 + 56) = v29;
            *(_OWORD *)(a1 + 64) = v39;
            *(_QWORD *)(a1 + 80) = v40;
            v37 = 0;
            v39 = 0uLL;
            v40 = 0;
            goto LABEL_46;
          }
          v12 = (void *)*((unsigned __int8 *)a3 + 23);
          if ((char)v12 >= 0)
            v13 = a3;
          else
            v13 = *a3;
          if ((char)v12 < 0)
            v12 = a3[1];
          v55 = v13;
          v56 = v12;
          if ((v7 & 0x80) != 0)
          {
            v19 = *(void **)(a2 + 8);
            v57 = *(void **)a2;
            v58 = v19;
            v14 = a5[23];
            if ((v14 & 0x80000000) == 0)
              goto LABEL_30;
          }
          else
          {
            v57 = (void *)a2;
            v58 = v7;
            v14 = a5[23];
            if ((v14 & 0x80000000) == 0)
            {
LABEL_30:
              v15 = v14;
LABEL_41:
              sub_207CAC8F4((uint64_t)&v55, (uint64_t)v59, a5, v15, &__p);
              v54[0] = __p.__r_.__value_.__l.__size_;
              v21 = __p.__r_.__value_.__r.__words[0];
              *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
              v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              memset(&__p, 0, sizeof(__p));
              sub_207CCB474((char *)&v30, (__int128 *)(a2 + 32));
              v23 = v54[0];
              *(_QWORD *)a1 = v21;
              *(_QWORD *)(a1 + 8) = v23;
              *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v54 + 7);
              *(_BYTE *)(a1 + 23) = v22;
              *(_BYTE *)(a1 + 24) = 1;
              *(_BYTE *)(a1 + 32) = 0;
              *(_BYTE *)(a1 + 88) = 0;
              if (!v35)
              {
LABEL_47:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                v11 = (void *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_49;
              }
              v24 = v32;
              *(_QWORD *)(a1 + 48) = v31;
              *(_OWORD *)(a1 + 32) = v30;
              v30 = 0uLL;
              *(_QWORD *)(a1 + 56) = v24;
              *(_OWORD *)(a1 + 64) = v33;
              *(_QWORD *)(a1 + 80) = v34;
              v31 = 0;
              v33 = 0uLL;
              v34 = 0;
LABEL_46:
              *(_BYTE *)(a1 + 88) = 1;
              goto LABEL_47;
            }
          }
          v20 = a5;
          a5 = *(const std::string::value_type **)a5;
          v15 = *((_QWORD *)v20 + 1);
          goto LABEL_41;
        }
      }
      else if (*(_BYTE *)(a2 + 23))
      {
        goto LABEL_5;
      }
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_207CA40D8(&__dst, *a3, (unint64_t)a3[1]);
    }
    else
    {
      __dst = *(_OWORD *)a3;
      v50 = a3[2];
    }
    v51 = 1;
    sub_207CCB474((char *)&v43, (__int128 *)(a2 + 32));
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v9 = v51;
    if (v51)
    {
      *(_OWORD *)a1 = __dst;
      *(_QWORD *)(a1 + 16) = v50;
      v50 = 0;
      __dst = 0uLL;
      *(_BYTE *)(a1 + 24) = 1;
    }
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    if (v48)
    {
      v10 = v45;
      *(_QWORD *)(a1 + 48) = v44;
      *(_OWORD *)(a1 + 32) = v43;
      v43 = 0uLL;
      *(_QWORD *)(a1 + 56) = v10;
      *(_OWORD *)(a1 + 64) = v46;
      *(_QWORD *)(a1 + 80) = v47;
      v44 = 0;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (v9 && SHIBYTE(v50) < 0)
    {
      v11 = (void *)__dst;
LABEL_49:
      operator delete(v11);
    }
  }
  else
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_207CA40D8(&v52, *a3, (unint64_t)a3[1]);
    }
    else
    {
      v52 = *(_OWORD *)a3;
      v53 = a3[2];
    }
    *(_OWORD *)a1 = v52;
    *(_QWORD *)(a1 + 16) = v53;
    *(_BYTE *)(a1 + 24) = 1;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 88) = 0;
  }
}

void sub_2082137A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  int v32;

  if (v32 < 0)
    operator delete(v31);
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_208213800(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 __dst;
  uint64_t v14;
  unsigned __int8 v15;

  LOBYTE(__dst) = 0;
  v15 = 0;
  if (*((_BYTE *)a1 + 24))
  {
    if (*((char *)a1 + 23) < 0)
    {
      sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      __dst = *a1;
      v14 = *((_QWORD *)a1 + 2);
    }
    v15 = 1;
  }
  sub_207CCB474((char *)&v7, a2);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  v5 = v15;
  if (v15)
  {
    *(_OWORD *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = v14;
    v14 = 0;
    __dst = 0uLL;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  if (v12)
  {
    v6 = v9;
    *(_QWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 32) = v7;
    v7 = 0uLL;
    *(_QWORD *)(a3 + 56) = v6;
    *(_OWORD *)(a3 + 64) = v10;
    *(_QWORD *)(a3 + 80) = v11;
    v8 = 0;
    v10 = 0uLL;
    v11 = 0;
    *(_BYTE *)(a3 + 88) = 1;
  }
  if (v5)
  {
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__dst);
  }
}

void sub_208213908(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 24))
  {
    if (*(char *)(v1 - 25) < 0)
      operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_208213930(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  std::logic_error *v4;
  std::runtime_error *v5;
  void *v6;
  std::logic_error *v7;
  std::logic_error *exception;

  v2 = atomic_load((unsigned __int8 *)&qword_2545309E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2545309E0))
  {
    qword_2545309D8 = (uint64_t)std::generic_category();
    __cxa_guard_release(&qword_2545309E0);
  }
  if (*(_QWORD *)(a1 + 8) == qword_2545309D8)
  {
    v3 = *(_DWORD *)a1;
    if (*(int *)a1 > 33)
    {
      if (v3 == 34)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_208213CA0(exception, a1);
        __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
      }
      if (v3 == 84)
      {
        v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_208213D74(v5, a1);
        __cxa_throw(v5, (struct type_info *)off_24C06DDB8, MEMORY[0x24BEDAB78]);
      }
    }
    else
    {
      if (v3 == 22)
      {
        v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_208213AF8(v7, a1);
        __cxa_throw(v7, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
      }
      if (v3 == 33)
      {
        v4 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_208213BCC(v4, a1);
        __cxa_throw(v4, (struct type_info *)off_24C06DD98, MEMORY[0x24BEDAAE0]);
      }
    }
  }
  v6 = __cxa_allocate_exception(0x88uLL);
  sub_2082132DC(v6, a1);
  __cxa_throw(v6, (struct type_info *)&unk_24C08EFC0, (void (*)(void *))sub_2082132E0);
}

void sub_208213A94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_208213AA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_208213ABC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_208213AD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_208213AE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_208213AF8(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_208287788;
  if (*((_BYTE *)v3 + 24))
  {
    sub_208214340(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, (const char *)&unk_20822A99B);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
}

void sub_208213BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208213BCC(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_208287788;
  if (*((_BYTE *)v3 + 24))
  {
    sub_208214340(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, (const char *)&unk_20822A99B);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  }
}

void sub_208213C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208213CA0(std::logic_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_208287788;
  if (*((_BYTE *)v3 + 24))
  {
    sub_208214340(v3);
    std::logic_error::logic_error(this, &v4);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::logic_error::logic_error(this, (const char *)&unk_20822A99B);
    this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  }
}

void sub_208213D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208213D74(std::runtime_error *this, uint64_t a2)
{
  __int128 *v3;
  std::string v4;

  if (*(_BYTE *)(a2 + 112))
    v3 = (__int128 *)(a2 + 16);
  else
    v3 = (__int128 *)&unk_208287788;
  if (*((_BYTE *)v3 + 24))
  {
    sub_208214340(v3);
    std::runtime_error::runtime_error(this, &v4);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    std::runtime_error::runtime_error(this, (const char *)&unk_20822A99B);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
  }
}

void sub_208213E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208213E48(void **a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *__dst[2];
  char v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  void *__p;
  __int128 v30;
  unsigned __int8 v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  unsigned __int8 v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  sub_207CCB3BC(__dst, a2 + 1);
  v19 = 0;
  LOBYTE(v18) = 0;
  sub_208213400((uint64_t)&__p, (uint64_t)__dst, a1, 0, (const std::string::value_type *)&v18);
  v12 = v31;
  if (v31)
  {
    v13 = __p;
    v40[0] = v30;
    *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v30 + 7);
    v7 = HIBYTE(v30);
    v30 = 0uLL;
    __p = 0;
    v14 = v37;
    if (v37)
      goto LABEL_3;
  }
  else
  {
    v13 = 0;
    v14 = v37;
    if (v37)
    {
LABEL_3:
      v15 = v32;
      v39[0] = v33;
      *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)&v33 + 7);
      v9 = HIBYTE(v33);
      v32 = 0;
      v33 = 0uLL;
      v10 = v34;
      v8 = v35;
      v38[0] = v36;
      *(_QWORD *)((char *)v38 + 7) = *(_QWORD *)((char *)&v36 + 7);
      v11 = HIBYTE(v36);
      v35 = 0;
      v36 = 0uLL;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (!v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v15 = 0;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (v12)
  {
LABEL_4:
    v16 = v40[0];
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a3 + 39) = v7;
    v40[0] = 0;
    *(_QWORD *)((char *)v40 + 7) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    v13 = 0;
    v7 = 0;
  }
LABEL_5:
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v14)
  {
    v17 = v39[0];
    *(_QWORD *)(a3 + 48) = v15;
    *(_QWORD *)(a3 + 56) = v17;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)((char *)v39 + 7);
    *(_BYTE *)(a3 + 71) = v9;
    v39[0] = 0;
    *(_QWORD *)((char *)v39 + 7) = 0;
    *(_QWORD *)(a3 + 72) = v10;
    *(_QWORD *)(a3 + 80) = v8;
    *(_QWORD *)(a3 + 88) = v38[0];
    *(_QWORD *)(a3 + 95) = *(_QWORD *)((char *)v38 + 7);
    *(_BYTE *)(a3 + 103) = v11;
    v38[0] = 0;
    *(_QWORD *)((char *)v38 + 7) = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    v14 = v37;
  }
  if (v14)
  {
    if ((SHIBYTE(v36) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_30:
      operator delete(v32);
      if (!v31)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v35);
    if (SHIBYTE(v33) < 0)
      goto LABEL_30;
  }
LABEL_13:
  if (!v31)
    goto LABEL_16;
LABEL_14:
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
LABEL_16:
  if (v19 < 0)
    operator delete(v18);
  if (v28)
  {
    if (!v27)
      goto LABEL_22;
    if (v26 < 0)
    {
      operator delete(v25);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v22)
          return;
        goto LABEL_23;
      }
    }
    else if ((v24 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v23);
    if (!v22)
      return;
LABEL_23:
    if (v21 < 0)
      operator delete(__dst[0]);
  }
}

void sub_2082140D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_207CCB148((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2082140F8(uint64_t a1, const char **a2, int *a3, std::string *a4)
{
  uint64_t result;
  _DWORD v7[6];
  int v8;
  std::string v9;
  std::string **v10;
  std::string *v11;
  std::string *v12;
  _DWORD *v13;
  std::string *v14;
  std::string *v15;

  v8 = 0;
  if (*a2)
    sub_207CB7878(v7, a2);
  else
    sub_207CAA238(v7, "nullptr");
  v11 = (std::string *)v7;
  v12 = (std::string *)" error ";
  v13 = v7;
  v14 = (std::string *)" error ";
  v15 = (std::string *)" error ";
  if (v8 == -1)
    sub_207CA9F48();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24C08EFF0[v8])(&v9, v7);
  std::to_string(&v9, *a3);
  v11 = (std::string *)v7;
  v12 = &v9;
  v13 = v7;
  v14 = &v9;
  v15 = &v9;
  if (v8 == -1)
    sub_207CA9F48();
  v10 = &v11;
  ((void (*)(std::string ***, _DWORD *))off_24C08F008[v8])(&v10, v7);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v11 = (std::string *)v7;
  v12 = (std::string *)": ";
  v13 = v7;
  v14 = (std::string *)": ";
  v15 = (std::string *)": ";
  if (v8 == -1)
    sub_207CA9F48();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24C08F020[v8])(&v9, v7);
  v11 = (std::string *)v7;
  v12 = a4;
  v13 = v7;
  v14 = a4;
  v15 = a4;
  if (v8 == -1)
    sub_207CA9F48();
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  ((void (*)(std::string *, _DWORD *))off_24C08F038[v8])(&v9, v7);
  if (v8 == -1)
    sub_207CA9F48();
  v11 = &v9;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C08F050[v8])(&v11, v7);
  if (v8 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C08EFD8[v8])(&v11, v7);
  return result;
}

void sub_2082142F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_208214340(__int128 *a1)
{
  int v1;
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  if (*((_BYTE *)a1 + 24))
  {
    v5 = -1;
    if (*((char *)a1 + 23) < 0)
    {
      sub_207CA40D8(&v3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v3 = *a1;
      v4 = *((_QWORD *)a1 + 2);
    }
    v1 = 1;
    v5 = 1;
  }
  else
  {
    sub_207CAA238(&v3, "nullopt");
    v1 = v5;
    if (v5 == -1)
      sub_207CA9F48();
  }
  v7 = &v6;
  result = ((uint64_t (*)(char **, __int128 *))off_24C08F050[v1])(&v7, &v3);
  if (v5 != -1)
    return ((uint64_t (*)(char **, __int128 *))off_24C08EFD8[v5])(&v7, &v3);
  return result;
}

void sub_208214414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20821442C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208214444(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

void sub_208214458(unsigned __int8 *a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v3;
  std::string::value_type v6;

  v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, a2);
  for (; v3; --v3)
  {
    v6 = __toupper(*a1);
    std::string::push_back(a3, v6);
    ++a1;
  }
}

void sub_2082144B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_2082144D8@<Q0>(std::string *__s@<X0>, char *a2@<X1>, int64_t a3@<X2>, const std::string::value_type *a4@<X3>, std::string::size_type a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int64_t size;
  BOOL v15;
  uint64_t v16;
  std::string *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  int v21;
  std::string *v22;
  int64_t v23;
  char *v24;
  char *v25;
  __n128 result;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char *v31;
  char *v32;
  int64_t v33;
  int v34;
  int64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s->__r_.__value_.__l.__size_;
    if (size)
      v18 = a3 == 0;
    else
      v18 = 1;
    if (v18)
      goto LABEL_24;
    v19 = a7 ? a6 : -1;
    v38 = v19;
    v17 = (std::string *)__s->__r_.__value_.__r.__words[0];
    if (size < a3)
      goto LABEL_24;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__s->__r_.__value_.__s + 23))
      v15 = a3 == 0;
    else
      v15 = 1;
    if (v15)
      goto LABEL_24;
    v16 = a7 ? a6 : -1;
    v38 = v16;
    v17 = __s;
    if (size < a3)
      goto LABEL_24;
  }
  v20 = (char *)v17 + size;
  v21 = *a2;
  v22 = v17;
  do
  {
    v23 = size - a3;
    if (v23 == -1)
      break;
    v24 = (char *)memchr(v22, v21, v23 + 1);
    if (!v24)
      break;
    v25 = v24;
    if (!memcmp(v24, a2, a3))
    {
      if (v38)
      {
        if (v25 != v20)
        {
          v27 = v25 - (char *)v17;
          if (v25 - (char *)v17 != -1)
          {
LABEL_28:
            std::string::replace(__s, v27, a3, a4, a5);
            if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
            {
              v29 = (std::string *)__s->__r_.__value_.__r.__words[0];
              v28 = __s->__r_.__value_.__l.__size_;
            }
            else
            {
              v28 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
              v29 = __s;
            }
            v30 = v27 + a5;
            if (v28 >= v27 + a5)
            {
              v31 = (char *)v29 + v30;
              v32 = (char *)v29 + v28;
              v33 = v28 - v30;
              if (v33 >= a3)
              {
                --v38;
                v34 = *a2;
                while (1)
                {
                  v35 = v33 - a3;
                  if (v35 == -1)
                    break;
                  v36 = (char *)memchr(v31, v34, v35 + 1);
                  if (!v36)
                    break;
                  v37 = v36;
                  if (!memcmp(v36, a2, a3))
                  {
                    if (v38)
                    {
                      if (v37 != v32)
                      {
                        v27 = v37 - (char *)v29;
                        if (v37 - (char *)v29 != -1)
                          goto LABEL_28;
                      }
                    }
                    goto LABEL_24;
                  }
                  v31 = v37 + 1;
                  v33 = v32 - (v37 + 1);
                  if (v33 < a3)
                    goto LABEL_24;
                }
              }
            }
          }
        }
      }
      break;
    }
    v22 = (std::string *)(v25 + 1);
    size = v20 - (v25 + 1);
  }
  while (size >= a3);
LABEL_24:
  result = *(__n128 *)&__s->__r_.__value_.__l.__data_;
  *(_OWORD *)a8 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  *(_QWORD *)(a8 + 16) = *((_QWORD *)&__s->__r_.__value_.__l + 2);
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t *sub_2082146C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (!a3)
    return a1;
  v5 = a2;
  v6 = 0;
  v7 = 0;
  v8 = &a2[3 * a3];
  v9 = a1 + 2;
  do
  {
    v10 = *v5;
    v11 = v5[1];
    v12 = (v11 + 2654435769 + ((unint64_t)(*v5 + 2654435769) >> 2) + ((*v5 + 2654435769) << 6)) ^ (*v5 + 2654435769);
    if (v7)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v3 = (v11 + 2654435769 + ((unint64_t)(*v5 + 2654435769) >> 2) + ((*v5 + 2654435769) << 6)) ^ (*v5 + 2654435769);
        if (v12 >= v7)
          v3 = v12 % v7;
      }
      else
      {
        v3 = v12 & (v7 - 1);
      }
      v14 = *(_QWORD **)(*a1 + 8 * v3);
      if (v14)
      {
        v15 = (_QWORD *)*v14;
        if (v15)
        {
          if (v13.u32[0] < 2uLL)
          {
            while (1)
            {
              v19 = v15[1];
              if (v19 == v12)
              {
                if (v15[2] == v10 && v15[3] == v11)
                  goto LABEL_102;
              }
              else if ((v19 & (v7 - 1)) != v3)
              {
                goto LABEL_29;
              }
              v15 = (_QWORD *)*v15;
              if (!v15)
                goto LABEL_29;
            }
          }
          do
          {
            v17 = v15[1];
            if (v17 == v12)
            {
              if (v15[2] == v10 && v15[3] == v11)
                goto LABEL_102;
            }
            else
            {
              if (v17 >= v7)
                v17 %= v7;
              if (v17 != v3)
                break;
            }
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
      }
    }
LABEL_29:
    v20 = operator new(0x28uLL);
    *v20 = 0;
    v20[1] = v12;
    v21 = *(_OWORD *)v5;
    v20[4] = v5[2];
    *((_OWORD *)v20 + 1) = v21;
    v22 = (float)(unint64_t)(v6 + 1);
    v23 = *((float *)a1 + 8);
    if (!v7 || (float)(v23 * (float)v7) < v22)
    {
      v26 = (v7 & (v7 - 1)) != 0;
      if (v7 < 3)
        v26 = 1;
      v27 = v26 | (2 * v7);
      v28 = vcvtps_u32_f32(v22 / v23);
      if (v27 <= v28)
        prime = v28;
      else
        prime = v27;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v7 = a1[1];
      }
      if (prime <= v7)
      {
        if (prime >= v7)
          goto LABEL_79;
        v40 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
        if (v7 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
        {
          v40 = std::__next_prime(v40);
        }
        else
        {
          v42 = 1 << -(char)__clz(v40 - 1);
          if (v40 >= 2)
            v40 = v42;
        }
        if (prime <= v40)
          prime = v40;
        if (prime >= v7)
        {
          v7 = a1[1];
          v45 = v7 - 1;
          if ((v7 & (v7 - 1)) == 0)
            goto LABEL_80;
LABEL_92:
          if (v12 >= v7)
          {
            v3 = v12 % v7;
            v24 = *a1;
            v25 = *(_QWORD **)(*a1 + 8 * (v12 % v7));
            if (!v25)
              goto LABEL_81;
          }
          else
          {
            v3 = v12;
            v24 = *a1;
            v25 = *(_QWORD **)(*a1 + 8 * v12);
            if (!v25)
              goto LABEL_81;
          }
LABEL_32:
          *v20 = *v25;
LABEL_100:
          *v25 = v20;
          goto LABEL_101;
        }
        if (!prime)
        {
          v44 = (void *)*a1;
          *a1 = 0;
          if (v44)
            operator delete(v44);
          v7 = 0;
          a1[1] = 0;
          v45 = -1;
          goto LABEL_80;
        }
      }
      if (prime >> 61)
        sub_207CA3AB8();
      v30 = operator new(8 * prime);
      v31 = (void *)*a1;
      *a1 = (uint64_t)v30;
      if (v31)
        operator delete(v31);
      v32 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v32++) = 0;
      while (prime != v32);
      v33 = (_QWORD *)*v9;
      if (!*v9)
      {
LABEL_91:
        v7 = prime;
        v45 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_92;
LABEL_80:
        v3 = v45 & v12;
        v24 = *a1;
        v25 = *(_QWORD **)(*a1 + 8 * (v45 & v12));
        if (!v25)
          goto LABEL_81;
        goto LABEL_32;
      }
      v34 = v33[1];
      v35 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v36 = v34 & v35;
        *(_QWORD *)(*a1 + 8 * v36) = v9;
        for (i = (_QWORD *)*v33; *v33; i = (_QWORD *)*v33)
        {
          v38 = i[1] & v35;
          if (v38 == v36)
          {
            v33 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v38))
          {
            *v33 = *i;
            v39 = 8 * v38;
            *i = **(_QWORD **)(*a1 + v39);
            **(_QWORD **)(*a1 + v39) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v38) = v33;
            v33 = i;
            v36 = v38;
          }
        }
        goto LABEL_91;
      }
      if (v34 < prime)
      {
        *(_QWORD *)(*a1 + 8 * v34) = v9;
        v43 = (_QWORD *)*v33;
        if (*v33)
          goto LABEL_86;
        goto LABEL_78;
      }
      v34 %= prime;
      *(_QWORD *)(*a1 + 8 * v34) = v9;
      v43 = (_QWORD *)*v33;
      if (!*v33)
      {
LABEL_78:
        v7 = prime;
LABEL_79:
        v45 = v7 - 1;
        if ((v7 & (v7 - 1)) != 0)
          goto LABEL_92;
        goto LABEL_80;
      }
      while (1)
      {
LABEL_86:
        v48 = v43[1];
        if (v48 >= prime)
          v48 %= prime;
        if (v48 == v34)
          goto LABEL_85;
        if (*(_QWORD *)(*a1 + 8 * v48))
        {
          *v33 = *v43;
          v47 = 8 * v48;
          *v43 = **(_QWORD **)(*a1 + v47);
          **(_QWORD **)(*a1 + v47) = v43;
          v43 = v33;
LABEL_85:
          v33 = v43;
          v43 = (_QWORD *)*v43;
          if (!v43)
            goto LABEL_91;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v48) = v33;
          v33 = v43;
          v43 = (_QWORD *)*v43;
          v34 = v48;
          if (!v43)
            goto LABEL_91;
        }
      }
    }
    v24 = *a1;
    v25 = *(_QWORD **)(*a1 + 8 * v3);
    if (v25)
      goto LABEL_32;
LABEL_81:
    *v20 = *v9;
    *v9 = v20;
    *(_QWORD *)(v24 + 8 * v3) = v9;
    if (*v20)
    {
      v46 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v46 >= v7)
          v46 %= v7;
      }
      else
      {
        v46 &= v7 - 1;
      }
      v25 = (_QWORD *)(*a1 + 8 * v46);
      goto LABEL_100;
    }
LABEL_101:
    v6 = a1[3] + 1;
    a1[3] = v6;
LABEL_102:
    v5 += 3;
  }
  while (v5 != v8);
  return a1;
}

void sub_208214BD8(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;
  _QWORD **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  operator delete(v2);
  v5 = *v3;
  if (*v3)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v1;
  *v1 = 0;
  if (v7)
    operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_208214C20(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_208214C68(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v16;
  unsigned __int8 v17;
  uint8x8_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v23;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  const char *v28;
  size_t v29;
  size_t v30;
  const char *v31;
  size_t v32;
  std::string::size_type v33;
  _BYTE *p_dst;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  std::string __dst;
  _DWORD v41[6];
  int v42;
  std::string v43;
  int64x2_t *v44;
  int64x2_t v45;
  const char *v46;
  __int128 v47;
  const char *v48;
  __int128 v49;
  const char *v50;
  __int128 v51;
  const char *v52;
  __int128 v53;
  const char *v54;
  __int128 v55;
  const char *v56;
  __int128 v57;
  const char *v58;
  __int128 v59;
  const char *v60;
  __int128 v61;
  const char *v62;
  __int128 v63;
  const char *v64;
  __int128 v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  __int128 v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  __int128 v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_253E52D00);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D00))
  {
    v45 = vdupq_n_s64(1uLL);
    v46 = "seconds";
    v47 = xmmword_2082877E0;
    v49 = xmmword_2082877F0;
    v48 = "minutes";
    v50 = "hours";
    v51 = xmmword_208287800;
    v53 = xmmword_208287810;
    v52 = "days";
    v54 = "weeks";
    v55 = xmmword_208287820;
    v57 = xmmword_208287830;
    v56 = "months";
    v58 = "years";
    sub_2082146C8(&qword_253E52D30, v45.i64, 7);
    __cxa_atexit((void (*)(void *))sub_208214C20, &qword_253E52D30, &dword_207C77000);
    __cxa_guard_release(&qword_253E52D00);
  }
  v7 = a2 + ((unint64_t)(a1 + 2654435769) >> 2) + ((a1 + 2654435769) << 6);
  v8 = (v7 + 2654435769u) ^ (a1 + 2654435769);
  if (qword_253E52D38)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)qword_253E52D38);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = (v7 + 2654435769u) ^ (a1 + 2654435769);
      if (v8 >= qword_253E52D38)
        v10 = v8 % qword_253E52D38;
    }
    else
    {
      v10 = (qword_253E52D38 - 1) & v8;
    }
    v11 = *(_QWORD **)(qword_253E52D30 + 8 * v10);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v12[1];
            if (v8 == v16)
            {
              if (v12[2] == a1 && v12[3] == a2)
                goto LABEL_69;
            }
            else if ((v16 & (qword_253E52D38 - 1)) != v10)
            {
              goto LABEL_28;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_28;
          }
        }
        do
        {
          v14 = v12[1];
          if (v8 == v14)
          {
            if (v12[2] == a1 && v12[3] == a2)
            {
LABEL_69:
              v28 = (const char *)v12[4];
              v29 = strlen(v28);
              if (v29 > 0x7FFFFFFFFFFFFFF7)
                sub_207C95C50();
              v30 = v29;
              if (v29 >= 0x17)
              {
                v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17)
                  v35 = v29 | 7;
                v36 = v35 + 1;
                v37 = operator new(v35 + 1);
                a3[1] = v30;
                a3[2] = v36 | 0x8000000000000000;
                *a3 = v37;
                a3 = v37;
              }
              else
              {
                *((_BYTE *)a3 + 23) = v29;
                if (!v29)
                {
LABEL_81:
                  *((_BYTE *)a3 + v30) = 0;
                  return;
                }
              }
              memmove(a3, v28, v30);
              goto LABEL_81;
            }
          }
          else
          {
            if (v14 >= qword_253E52D38)
              v14 %= (unint64_t)qword_253E52D38;
            if (v14 != v10)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  v17 = atomic_load((unsigned __int8 *)&qword_253E52CF8);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_253E52CF8))
  {
    v45 = (int64x2_t)xmmword_208287840;
    v46 = "atto";
    v47 = xmmword_208287850;
    v49 = xmmword_208287860;
    v48 = "femto";
    v50 = "pico";
    v51 = xmmword_208287870;
    v53 = xmmword_208287880;
    v52 = "nano";
    v54 = "micro";
    v55 = xmmword_208287890;
    v57 = xmmword_2082878A0;
    v56 = "milli";
    v58 = "centi";
    v59 = xmmword_2082878B0;
    v61 = xmmword_2082878C0;
    v60 = "deci";
    v62 = "deca";
    v63 = xmmword_2082878D0;
    v65 = xmmword_2082878E0;
    v64 = "hecto";
    v66 = "kilo";
    v67 = 1000000;
    v70 = xmmword_2082878F0;
    v68 = 1;
    v69 = "mega";
    v71 = "giga";
    v72 = 1000000000000;
    v73 = 1;
    v75 = xmmword_208287900;
    v74 = "tera";
    v76 = "peta";
    v77 = 1000000000000000000;
    v78 = 1;
    v79 = "exa";
    sub_2082146C8(&qword_253E52D08, v45.i64, 16);
    __cxa_atexit((void (*)(void *))sub_208214C20, &qword_253E52D08, &dword_207C77000);
    __cxa_guard_release(&qword_253E52CF8);
  }
  if (qword_253E52D10)
  {
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)qword_253E52D10);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      v19 = v8;
      if (v8 >= qword_253E52D10)
        v19 = v8 % qword_253E52D10;
    }
    else
    {
      v19 = (qword_253E52D10 - 1) & v8;
    }
    v20 = *(_QWORD **)(qword_253E52D08 + 8 * v19);
    if (v20)
    {
      v21 = (_QWORD *)*v20;
      if (v21)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            v25 = v21[1];
            if (v8 == v25)
            {
              if (v21[2] == a1 && v21[3] == a2)
                goto LABEL_73;
            }
            else if ((v25 & (qword_253E52D10 - 1)) != v19)
            {
              goto LABEL_55;
            }
            v21 = (_QWORD *)*v21;
            if (!v21)
              goto LABEL_55;
          }
        }
        do
        {
          v23 = v21[1];
          if (v8 == v23)
          {
            if (v21[2] == a1 && v21[3] == a2)
            {
LABEL_73:
              v31 = (const char *)v21[4];
              v32 = strlen(v31);
              if (v32 > 0x7FFFFFFFFFFFFFF7)
                sub_207C95C50();
              v33 = v32;
              if (v32 >= 0x17)
              {
                v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v32 | 7) != 0x17)
                  v38 = v32 | 7;
                v39 = v38 + 1;
                p_dst = operator new(v38 + 1);
                __dst.__r_.__value_.__l.__size_ = v33;
                __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32;
                p_dst = &__dst;
                if (!v32)
                {
LABEL_86:
                  p_dst[v33] = 0;
                  goto LABEL_66;
                }
              }
              memmove(p_dst, v31, v33);
              goto LABEL_86;
            }
          }
          else
          {
            if (v23 >= qword_253E52D10)
              v23 %= (unint64_t)qword_253E52D10;
            if (v23 != v19)
              break;
          }
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
    }
  }
LABEL_55:
  v42 = 0;
  sub_207F13A28(v41, "ratio<");
  std::to_string(&v43, a1);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)&v43;
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = &v43;
  *((_QWORD *)&v47 + 1) = &v43;
  if (v42 == -1)
    sub_207CA9F48();
  v44 = &v45;
  ((void (*)(int64x2_t **, _DWORD *))off_24C08F0C0[v42])(&v44, v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)",";
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = ",";
  *((_QWORD *)&v47 + 1) = ",";
  if (v42 == -1)
    sub_207CA9F48();
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  ((void (*)(std::string *, _DWORD *))off_24C08F0D8[v42])(&v43, v41);
  std::to_string(&v43, a2);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)&v43;
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = &v43;
  *((_QWORD *)&v47 + 1) = &v43;
  if (v42 == -1)
    sub_207CA9F48();
  v44 = &v45;
  ((void (*)(int64x2_t **, _DWORD *))off_24C08F0C0[v42])(&v44, v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v45.i64[0] = (uint64_t)v41;
  v45.i64[1] = (uint64_t)">";
  v46 = (const char *)v41;
  *(_QWORD *)&v47 = ">";
  *((_QWORD *)&v47 + 1) = ">";
  if (v42 == -1)
    sub_207CA9F48();
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  ((void (*)(std::string *, _DWORD *))off_24C08F0D8[v42])(&v43, v41);
  if (v42 == -1)
    sub_207CA9F48();
  v45.i64[0] = (uint64_t)&v43;
  ((void (*)(std::string *__return_ptr, int64x2_t *, _DWORD *))off_24C08F0F0[v42])(&__dst, &v45, v41);
  if (v42 != -1)
    ((void (*)(int64x2_t *, _DWORD *))off_24C08F0A8[v42])(&v45, v41);
LABEL_66:
  v26 = std::string::append(&__dst, "seconds", 7uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  a3[2] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_2082154B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52CF8);
  _Unwind_Resume(a1);
}

void sub_2082154D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E52D00);
  _Unwind_Resume(a1);
}

void sub_2082154EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208215530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208215544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x208215534);
}

_QWORD *sub_208215568(_QWORD *a1)
{
  _OWORD *v2;

  v2 = operator new(0x118uLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[16] = 0u;
  *((_QWORD *)v2 + 34) = 0;
  sub_207CA2878((uint64_t)v2);
  *a1 = v2;
  return a1;
}

void sub_2082155C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_2082155DC(void **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (char *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x24BEDB7F0];
    v4 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v2 = *MEMORY[0x24BEDB7F0];
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)&v2[*(_QWORD *)(v4 - 24)] = *(_QWORD *)(v3 + 64);
    *((_QWORD *)v2 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v2 + 2) = v5;
    if (v2[111] < 0)
      operator delete(*((void **)v2 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v2 + 128);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_208215678(_QWORD *a1)
{
  return *a1 + 16;
}

void *sub_208215684@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  v3 = *(_QWORD **)result;
  v4 = *(_DWORD *)(*(_QWORD *)result + 120);
  if ((v4 & 0x10) != 0)
  {
    v5 = v3[14];
    v6 = v3[9];
    if (v5 < v6)
    {
      v3[14] = v6;
      v5 = v6;
    }
    v7 = (const void *)v3[8];
    v8 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v4 & 8) == 0)
    {
      a2[23] = 0;
LABEL_4:
      *a2 = 0;
      return result;
    }
    v7 = (const void *)v3[5];
    v8 = v3[7] - (_QWORD)v7;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      sub_207C95C50();
  }
  if (v8 >= 0x17)
  {
    v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v9 = v8 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    *((_QWORD *)a2 + 1) = v8;
    *((_QWORD *)a2 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a2 = v11;
    a2 = v11;
  }
  else
  {
    a2[23] = v8;
    if (!v8)
      goto LABEL_4;
  }
  result = memmove(a2, v7, v8);
  a2[v8] = 0;
  return result;
}

uint64_t sub_208215780(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  sub_208215874(a1, &__dst, 24);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_208215858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208215874(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = a1 + 24;
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + *(_QWORD *)(v10 - 24)) = v11;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v12, (void *)(a1 + 24));
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  v16 = *a2;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v16;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a3;
  sub_207CC2D08(v8);
  return a1;
}

void sub_2082159A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v1);
  _Unwind_Resume(a1);
}

size_t sub_2082159F8@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  size_t result;
  size_t v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v4 = strstr(a1, "T = ");
  if (v4)
  {
    v5 = v4;
    result = strlen(v4);
    v7 = result - 5;
    if (result - 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v7 >= 0x17)
      {
        v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v11 = v7 | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v7;
        if (result == 5)
          goto LABEL_15;
      }
      result = (size_t)memmove(a2, v5 + 4, v7);
LABEL_15:
      *((_BYTE *)a2 + v7) = 0;
      return result;
    }
LABEL_40:
    sub_207C95C50();
  }
  v8 = strstr(a1, "= ");
  if (v8)
  {
    v9 = v8;
    result = strlen(v8);
    v10 = result - 3;
    if (result - 3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v10 >= 0x17)
    {
      v17 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v17 = v10 | 7;
      v18 = v17 + 1;
      v19 = operator new(v17 + 1);
      a2[1] = v10;
      a2[2] = v18 | 0x8000000000000000;
      *a2 = v19;
      a2 = v19;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v10;
      if (result == 3)
        goto LABEL_25;
    }
    result = (size_t)memmove(a2, v9 + 2, v10);
LABEL_25:
    *((_BYTE *)a2 + v10) = 0;
    return result;
  }
  v14 = strchr(a1, 61);
  if (v14)
  {
    v15 = v14;
    result = strlen(v14);
    v16 = result - 2;
    if (result - 2 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v23 = operator new(v21 + 1);
      a2[1] = v16;
      a2[2] = v22 | 0x8000000000000000;
      *a2 = v23;
      a2 = v23;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v16;
      if (result == 2)
        goto LABEL_34;
    }
    result = (size_t)memmove(a2, v15 + 1, v16);
LABEL_34:
    *((_BYTE *)a2 + v16) = 0;
    return result;
  }
  result = strlen(a1);
  if (result > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v20 = result;
  if (result >= 0x17)
  {
    v24 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v24 = result | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    a2[1] = v20;
    a2[2] = v25 | 0x8000000000000000;
    *a2 = v26;
    a2 = v26;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_39;
  }
  result = (size_t)memcpy(a2, a1, v20);
LABEL_39:
  *((_BYTE *)a2 + v20) = 0;
  return result;
}

void sub_208215C6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_208215D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208215D20(char *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>, int64x2_t a4@<Q3>, int8x16_t a5@<Q5>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string *p_p;
  std::string __p;
  _QWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  if (v7 == v8)
  {
    if (a1[23] < 0)
    {
      sub_207CA40D8(a3, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
    }
  }
  else
  {
    v9 = a1[23];
    v10 = *((_QWORD *)a1 + 1);
    if ((v9 & 0x80u) != 0)
    {
      a1 = *(char **)a1;
      v9 = v10;
    }
    v14[0] = a1;
    v14[1] = v9;
    v14[2] = "<";
    v14[3] = 1;
    sub_207CAB69C(v7, v8, ",", 1uLL, &__p, a4, a5);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    v14[4] = p_p;
    v14[5] = size;
    v14[6] = ">";
    v14[7] = 1;
    sub_207CAC8F4((uint64_t)v14, (uint64_t)&v15, 0, 0, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_208215E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_208215E98(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  std::string v22;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v22, 0, sizeof(v22));
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1;
    v11 = MEMORY[0x24BDAC740];
    while (1)
    {
      v13 = (char)*v4;
      if ((v13 & 0x80000000) == 0 && (*(_DWORD *)(v11 + 4 * v13 + 60) & 0x400) != 0)
        break;
      if (v13 == 76)
      {
        if (!v6)
          goto LABEL_49;
        std::string::push_back(&v22, 76);
        if (v8)
        {
          if (v7)
          {
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v14 = &v22;
            else
              v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
            if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
            else
              size = v22.__r_.__value_.__l.__size_;
            goto LABEL_34;
          }
          v8 = 1;
          v7 = 1;
          v6 = 1;
        }
        else
        {
          v8 = 1;
          v6 = 1;
        }
      }
      else
      {
        if (*v4 != 85)
        {
          if ((v13 & 0x80000000) != 0)
            v17 = __maskrune((char)*v4, 0x500uLL);
          else
            v17 = *(_DWORD *)(v11 + 4 * v13 + 60) & 0x500;
          if (v17)
          {
            if (v6)
            {
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v18 = &v22;
              else
                v18 = (std::string *)v22.__r_.__value_.__r.__words[0];
              if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v19 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
              else
                v19 = v22.__r_.__value_.__l.__size_;
              std::string::append(a2, (const std::string::value_type *)v18, v19);
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
                v20 = &v22;
              }
              v9 = 0;
              v8 = 0;
              v7 = 0;
              v6 = 0;
              v10 = 0;
              v20->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
LABEL_49:
              v6 = 0;
              v10 = 0;
            }
          }
          else
          {
            if (v6)
            {
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              {
                v22.__r_.__value_.__l.__size_ = 0;
                v21 = (std::string *)v22.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
                v21 = &v22;
              }
              v9 = 0;
              v8 = 0;
              v7 = 0;
              v6 = 0;
              v21->__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
              v6 = 0;
            }
            v10 = 1;
          }
LABEL_11:
          std::string::push_back(a2, v13);
          goto LABEL_12;
        }
        if (!v6)
          goto LABEL_49;
        std::string::push_back(&v22, 85);
        if (v9)
        {
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = &v22;
          else
            v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
          else
            size = v22.__r_.__value_.__l.__size_;
LABEL_34:
          std::string::append(a2, (const std::string::value_type *)v14, size);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          {
            v22.__r_.__value_.__l.__size_ = 0;
            v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
            v16 = &v22;
          }
          v9 = 0;
          v8 = 0;
          v7 = 0;
          v6 = 0;
          v16->__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_12;
        }
        v9 = 1;
        v6 = 1;
      }
LABEL_12:
      ++v4;
      if (!--v5)
      {
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        return;
      }
    }
    v12 = (v10 & 1) == 0;
    v10 = 0;
    if (!v12)
      v6 = 1;
    goto LABEL_11;
  }
}

void sub_20821613C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_208216178(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v17;
  int v18;

  sub_2082162D0(a1, a2, a3, a4, a5, a6, a7);
  v11 = atomic_load((unsigned __int8 *)&qword_254530A20);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
  {
    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
    __cxa_guard_release(&qword_254530A20);
  }
  if (byte_254530A10)
    v12 = byte_254530A18 == 0;
  else
    v12 = 0;
  if (!v12)
  {
    v13 = qword_2545309E8;
    v14 = qword_2545309F0;
    while (v13 != v14)
    {
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v13;
      v15 = *(_QWORD *)(v13 + 8);
      v13 += 16;
      v16(v15, a3, a4, a5, a6);
    }
  }
  v17 = atomic_load((unsigned __int8 *)&qword_254530A20);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
  {
    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
    __cxa_guard_release(&qword_254530A20);
  }
  v18 = byte_254530A10;
  if (byte_254530A10)
    qword_254530A00(*(_QWORD *)algn_254530A08, a3, a4, a5, a6);
  return v18 == 0;
}

void sub_2082162D0(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void **))
{
  unsigned __int8 v13;
  const char *v14;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  void *v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28[2];
  int64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];
  const void *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  void *__p;
  char v37;
  unint64_t v38;
  int v39;
  uint64_t v40;

  v13 = atomic_load((unsigned __int8 *)&qword_254530A20);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
  {
    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
    __cxa_guard_release(&qword_254530A20);
  }
  if (!byte_254530A10)
  {
    sub_207CA2878((uint64_t)v30);
    if (a4)
      v14 = "Assert: ";
    else
      v14 = "Abort: ";
    if (a4)
      v15 = 8;
    else
      v15 = 7;
    sub_207CBAB98(v31, (uint64_t)v14, v15);
    v16 = strlen(a1);
    v17 = sub_207CBAB98(v31, (uint64_t)a1, v16);
    sub_207CBAB98(v17, (uint64_t)":", 1);
    std::ostream::operator<<();
    if (a4)
    {
      v18 = sub_207CBAB98(v31, (uint64_t)" : ", 3);
      sub_207CBAB98(v18, a3, a4);
    }
    if (a6)
    {
      v19 = sub_207CBAB98(v31, (uint64_t)" : ", 3);
      sub_207CBAB98(v19, a5, a6);
    }
    sub_207CBAB98(v31, (uint64_t)"\n", 1);
    if ((v39 & 0x10) != 0)
    {
      v22 = v38;
      if (v38 < v35)
      {
        v38 = v35;
        v22 = v35;
      }
      v23 = v34;
      v20 = v22 - (_QWORD)v34;
      if (v22 - (unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_35;
    }
    else
    {
      if ((v39 & 8) == 0)
      {
        v20 = 0;
        HIBYTE(v29) = 0;
        v21 = v28;
        goto LABEL_26;
      }
      v23 = v32;
      v20 = v33 - (_QWORD)v32;
      if ((unint64_t)(v33 - (_QWORD)v32) >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
        sub_207C95C50();
    }
    if (v20 >= 0x17)
    {
      v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v24 = v20 | 7;
      v25 = v24 + 1;
      v21 = operator new(v24 + 1);
      v28[1] = (void *)v20;
      v29 = v25 | 0x8000000000000000;
      v28[0] = v21;
    }
    else
    {
      HIBYTE(v29) = v20;
      v21 = v28;
      if (!v20)
        goto LABEL_26;
    }
    memmove(v21, v23, v20);
LABEL_26:
    *((_BYTE *)v21 + v20) = 0;
    v30[0] = *MEMORY[0x24BEDB7F0];
    v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v31[0] = v26;
    v31[1] = MEMORY[0x24BEDB848] + 16;
    if (v37 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](&v40);
    if (v29 >= 0)
      v27 = v28;
    else
      v27 = (void **)v28[0];
    a7(v27);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
  }
}

void sub_2082165A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2082165D4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = atomic_load((unsigned __int8 *)&qword_254530A28);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254530A28))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254530778, &dword_207C77000);
    __cxa_guard_release(&qword_254530A28);
  }
  std::mutex::lock(&stru_254530778);
  v5 = atomic_load((unsigned __int8 *)&qword_254530A20);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
  {
    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
    __cxa_guard_release(&qword_254530A20);
  }
  v6 = (_QWORD *)qword_2545309F0;
  if (qword_2545309F0 < (unint64_t)qword_2545309F8)
  {
    *(_QWORD *)qword_2545309F0 = a1;
    v6[1] = a2;
    v7 = (uint64_t)(v6 + 2);
    goto LABEL_16;
  }
  v8 = qword_2545309E8;
  v9 = (qword_2545309F0 - qword_2545309E8) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_208216B24();
  v11 = qword_2545309F8 - qword_2545309E8;
  if ((qword_2545309F8 - qword_2545309E8) >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_207CA3AB8();
    v13 = (char *)operator new(16 * v12);
    v14 = &v13[16 * v9];
    v15 = (uint64_t)&v13[16 * v12];
    *(_QWORD *)v14 = a1;
    *((_QWORD *)v14 + 1) = a2;
    v7 = (uint64_t)(v14 + 16);
    if (v6 == (_QWORD *)v8)
    {
LABEL_14:
      qword_2545309E8 = (uint64_t)v14;
      qword_2545309F0 = v7;
      qword_2545309F8 = v15;
      if (!v6)
        goto LABEL_16;
LABEL_15:
      operator delete(v6);
      goto LABEL_16;
    }
  }
  else
  {
    v14 = (char *)(16 * v9);
    v15 = 0;
    *(_QWORD *)v14 = a1;
    *((_QWORD *)v14 + 1) = a2;
    v7 = 16 * v9 + 16;
    if (v6 == (_QWORD *)v8)
      goto LABEL_14;
  }
  do
  {
    *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
    v14 -= 16;
    v6 -= 2;
  }
  while (v6 != (_QWORD *)v8);
  v6 = (_QWORD *)qword_2545309E8;
  qword_2545309E8 = (uint64_t)v14;
  qword_2545309F0 = v7;
  qword_2545309F8 = v15;
  if (v6)
    goto LABEL_15;
LABEL_16:
  qword_2545309F0 = v7;
  std::mutex::unlock(&stru_254530778);
}

void sub_2082167D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254530778);
  _Unwind_Resume(a1);
}

void sub_2082167E8(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;

  v2 = atomic_load((unsigned __int8 *)&qword_254530A28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530A28))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254530778, &dword_207C77000);
    __cxa_guard_release(&qword_254530A28);
  }
  std::mutex::lock(&stru_254530778);
  v3 = atomic_load((unsigned __int8 *)&qword_254530A20);
  if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_254530A20))
  {
    v5 = (_QWORD *)qword_2545309E8;
    v4 = qword_2545309F0;
    if (qword_2545309E8 != qword_2545309F0)
      goto LABEL_4;
  }
  else
  {
    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
    __cxa_guard_release(&qword_254530A20);
    v5 = (_QWORD *)qword_2545309E8;
    v4 = qword_2545309F0;
    if (qword_2545309E8 != qword_2545309F0)
    {
LABEL_4:
      while (*v5 != a1)
      {
        v5 += 2;
        if (v5 == (_QWORD *)v4)
          goto LABEL_6;
      }
      if (v5 != (_QWORD *)v4)
      {
        v6 = v5 + 2;
        if (v5 + 2 != (_QWORD *)v4)
        {
          do
          {
            if (*(_QWORD *)v6 != a1)
            {
              *(_OWORD *)v5 = *v6;
              v5 += 2;
            }
            ++v6;
          }
          while (v6 != (_OWORD *)v4);
          v4 = qword_2545309F0;
        }
      }
      if (v5 != (_QWORD *)v4)
      {
        qword_2545309F0 = (uint64_t)v5;
        std::mutex::unlock(&stru_254530778);
        return;
      }
    }
  }
LABEL_6:
  std::mutex::unlock(&stru_254530778);
}

uint64_t sub_208216974(char *__s)
{
  unsigned __int8 v2;
  size_t v3;
  uint64_t *v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254530A30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530A30))
  {
    __cxa_atexit((void (*)(void *))sub_208216B38, &off_253E50CA0, &dword_207C77000);
    __cxa_guard_release(&qword_254530A30);
  }
  v3 = strlen(__s);
  sub_207CCB6CC((void **)&qword_253E50CA8, __s, v3);
  if (byte_253E50CBF >= 0)
    v4 = &qword_253E50CA8;
  else
    v4 = (uint64_t *)qword_253E50CA8;
  qword_2545307C0 = (uint64_t)v4;
  v5 = atomic_load((unsigned __int8 *)&qword_253E52D60);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D60))
  {
    qword_253E52D58 = (uint64_t)os_log_create("cv3d", "");
    __cxa_guard_release(&qword_253E52D60);
  }
  v6 = qword_253E52D58;
  if (os_log_type_enabled((os_log_t)qword_253E52D58, OS_LOG_TYPE_FAULT))
  {
    v8 = 136315138;
    v9 = __s;
    _os_log_impl(&dword_207C77000, v6, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v8, 0xCu);
  }
  return fputs(__s, (FILE *)*MEMORY[0x24BDAC8D8]);
}

uint64_t sub_208216AF4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_208216B24()
{
  sub_207C95C64("vector");
}

uint64_t sub_208216B38(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &off_24C08F118;
  qword_2545307C0 = 0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_208216B8C(void **__p)
{
  void **v1;

  v1 = __p;
  *__p = &off_24C08F118;
  qword_2545307C0 = 0;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

void sub_208216BE0()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2ModelInstance.mm", 101, (uint64_t)"", 0, (uint64_t)"Datatype not supported", 22, (void (*)(void **))sub_208216974);
  abort();
}

void sub_208216C1C(uint64_t a1, std::__shared_weak_count **a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  nullsub_31(a1);
  v5 = *a2;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  nullsub_31(a3);
  sub_207CB8540();
}

void sub_208216C7C(void **a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void *v6;

  v3 = (void **)*a1;
  if (*a1)
  {
    sub_207CB8534();
    v5 = *(void ***)(v4 + 96);
    v6 = v3;
    if (v5 != v3)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v3);
      v6 = *v2;
    }
    *(_QWORD *)(v1 + 96) = v3;
    sub_207CB851C(v6);
  }
}

void sub_208216CE4()
{
  uint64_t v0;
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  sub_207CB8534();
  v4 = *v3;
  v6 = v5;
  if (v4 != v5)
  {
    v7 = v2;
    v8 = (uint64_t)v4 - 80;
    while (1)
    {
      if (!*(_BYTE *)(v8 + 72))
        goto LABEL_9;
      v9 = *(_QWORD **)(v8 + 64);
      if ((_QWORD *)(v8 + 40) == v9)
      {
        v9 = (_QWORD *)(v8 + 40);
        v10 = 4;
      }
      else
      {
        if (!v9)
          goto LABEL_9;
        v10 = 5;
      }
      sub_207CB8528(v9, v10);
LABEL_9:
      if (!*(_BYTE *)(v8 + 32))
        goto LABEL_15;
      v11 = *(_QWORD **)(v8 + 24);
      if ((_QWORD *)v8 == v11)
      {
        v11 = (_QWORD *)v8;
        v12 = 4;
      }
      else
      {
        if (!v11)
          goto LABEL_15;
        v12 = 5;
      }
      sub_207CB8528(v11, v12);
LABEL_15:
      if (*(_BYTE *)(v8 - 64) && *(char *)(v8 - 65) < 0)
        operator delete(*(void **)(v8 - 88));
      v13 = v8 - 88;
      v8 -= 168;
      if (v13 == v0)
      {
        v6 = *v7;
        break;
      }
    }
  }
  *v1 = v0;
  sub_207CB851C(v6);
}

void sub_208216DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1 - 80;
  do
  {
    if (!*(_BYTE *)(v3 + 72))
      goto LABEL_8;
    v4 = *(_QWORD **)(v3 + 64);
    if ((_QWORD *)(v3 + 40) == v4)
    {
      v4 = (_QWORD *)(v3 + 40);
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_8;
      v5 = 5;
    }
    sub_207CB8528(v4, v5);
LABEL_8:
    if (*(_BYTE *)(v3 + 32))
    {
      v6 = *(_QWORD **)(v3 + 24);
      if ((_QWORD *)v3 == v6)
      {
        v6 = (_QWORD *)v3;
        v7 = 4;
        goto LABEL_13;
      }
      if (v6)
      {
        v7 = 5;
LABEL_13:
        sub_207CB8528(v6, v7);
      }
    }
    if (*(_BYTE *)(v3 - 64) && *(char *)(v3 - 65) < 0)
      operator delete(*(void **)(v3 - 88));
    v8 = v3 - 88;
    v3 -= 168;
  }
  while (v8 != a2);
  sub_207CB8540();
}

uint64_t sub_208216E44(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 152);
  if (v2 == a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 152) + 40))(*(_QWORD *)(result + 152));
  return result;
}

void sub_208216E78()
{
  void **v0;
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;

  sub_207CB8534();
  v4 = (void **)*v3;
  v6 = v5;
  if (v4 != v5)
  {
    v7 = v2;
    do
    {
      if (*((_BYTE *)v4 - 8) && *((char *)v4 - 9) < 0)
        operator delete(*(v4 - 4));
      v4 -= 4;
    }
    while (v4 != v0);
    v6 = *v7;
  }
  *v1 = v0;
  sub_207CB851C(v6);
}

void sub_208216ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 != a2)
  {
    sub_207CB8534();
    do
    {
      if (*(_BYTE *)(v3 - 8))
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
      }
      v3 -= 32;
    }
    while (v3 != v2);
  }
}

void sub_208216F1C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_208216F30(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
  sub_207CB8540();
}

void sub_208216F6C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_208216F8C(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
  sub_207CB8540();
}

void sub_208216FD4(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 -= 16;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x24BDBB7A8]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x24BDBBA40](bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x24BDBBA98](allocator, bundleURL);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x24BDBBAD8]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x24BDBBAE0](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x24BDBBC58](cf);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x24BDBBC80](type_id);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBE80](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x24BDBBE98](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x24BDBC110](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC160](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC188](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC190](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x24BDBC7D8](anURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB80]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x24BDBDC10](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x24BDBDC20](space);
}

CGDataConsumerRef CGDataConsumerCreate(void *info, const CGDataConsumerCallbacks *cbks)
{
  return (CGDataConsumerRef)MEMORY[0x24BDBE140](info, cbks);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x24BDBE168](provider);
}

CGDataProviderRef CGDataProviderCreateSequential(void *info, const CGDataProviderSequentialCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE178](info, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE180](data);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x24BDBE5E0](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithDataConsumer(CGDataConsumerRef consumer, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9080](consumer, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE620](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE628](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x24BDBE630](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x24BDBE638](image);
}

CGImageByteOrderInfo CGImageGetByteOrderInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE640](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x24BDBE648](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBE658](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE668](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

CGImagePixelFormatInfo CGImageGetPixelFormatInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE6B0](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithDataProvider(CGDataProviderRef provider, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9178](provider, options);
}

CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEF98]((__n128)point, *(__n128 *)&point.y);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEFD0]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x24BDC01E0](target, key, attachmentModeOut);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5250](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC5298](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52B8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D8](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x24BDC52F0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x24BDC5318](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5320](allocator, pixelBufferPool, pixelBufferOut);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x24BDD8B50](properties);
}

uint64_t IOSurfaceCreateChildSurface()
{
  return MEMORY[0x24BDD8B58]();
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x24BDD8B80](buffer);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDD8BA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8BC0](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BC8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8BD0](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BE0](buffer, planeIndex);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C48](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C58](buffer, planeIndex);
}

uint64_t IOSurfaceGetOffsetOfPlane()
{
  return MEMORY[0x24BDD8C78]();
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C80](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C88](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8CD0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8CE0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8D08](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8DD0](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x24BED8490]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x24BED84A0]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x24BED84B0]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x24BDF9168](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x24BDF9170](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x24BDF9178](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDF91A8](session, propertyKey, propertyValue);
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x24BDAC770](buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x24BEDA978](this);
}

std::string *__cdecl std::error_condition::message(std::string *__return_ptr retstr, const std::error_condition *this)
{
  return (std::string *)MEMORY[0x24BEDA9E8](retstr, this);
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x24BEDA9F0](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA08](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA10](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::lexically_relative(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__base)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDAA28](retstr, this, __base);
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x24BEDAA48](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x24BEDAA88](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAA90](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB0](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB8](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x24BEDAB18](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
  MEMORY[0x24BEDAB20](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB40](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB60](this);
}

{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

void std::string::~string(std::string *this)
{
  MEMORY[0x24BEDACF0](this);
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x24BEDAD78](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

void std::future_error::~future_error(std::future_error *this)
{
  MEMORY[0x24BEDAD80](this);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x24BEDAE10]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE30]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE68]();
}

{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE80]();
}

{
  return MEMORY[0x24BEDAE88]();
}

{
  return MEMORY[0x24BEDAE90]();
}

{
  return MEMORY[0x24BEDAE98]();
}

{
  return MEMORY[0x24BEDAEB0]();
}

{
  return MEMORY[0x24BEDAEB8]();
}

{
  return MEMORY[0x24BEDAEC0]();
}

{
  return MEMORY[0x24BEDAEC8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF08]();
}

{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF18]();
}

{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF68]();
}

{
  return MEMORY[0x24BEDAF70]();
}

{
  return MEMORY[0x24BEDAF78]();
}

{
  return MEMORY[0x24BEDAF80]();
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
  MEMORY[0x24BEDAFF8](this);
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x24BEDB000]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x24BEDB018]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB080]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B8]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB0C0](this, __lk);
}

void std::__assoc_sub_state::set_exception(std::__assoc_sub_state *this, std::exception_ptr __p)
{
  MEMORY[0x24BEDB0C8](this, __p.__ptr_);
}

void std::__assoc_sub_state::__on_zero_shared(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0D0](this);
}

void std::__assoc_sub_state::wait(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0D8](this);
}

void std::__assoc_sub_state::set_value(std::__assoc_sub_state *this)
{
  MEMORY[0x24BEDB0E0](this);
}

const std::error_category *std::iostream_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0E8]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB110](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB148](this);
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB150](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB160](this);
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB168](this);
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x24BEDB178](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__absolute(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB1E0](retstr, a2, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB1E8](retstr, a2, __ec);
}

BOOL std::__fs::filesystem::__copy_file(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  return MEMORY[0x24BEDB1F0](__from, __to, __opt, __ec);
}

uintmax_t std::__fs::filesystem::__file_size(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB1F8](a1, __ec);
}

BOOL std::__fs::filesystem::__equivalent(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return MEMORY[0x24BEDB200](a1, a2, __ec);
}

uintmax_t std::__fs::filesystem::__remove_all(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB208](a1, __ec);
}

BOOL std::__fs::filesystem::__fs_is_empty(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BEDB210](__p, __ec);
}

void std::__fs::filesystem::__permissions(const std::__fs::filesystem::path *a1, std::__fs::filesystem::perms a2, std::__fs::filesystem::perm_options a3, std::error_code *a4)
{
  MEMORY[0x24BEDB218](a1, *(_QWORD *)&a2, a3, a4);
}

void std::__fs::filesystem::__resize_file(const std::__fs::filesystem::path *a1, uintmax_t __size, std::error_code *a3)
{
  MEMORY[0x24BEDB220](a1, __size, a3);
}

void std::__fs::filesystem::__copy_symlink(const std::__fs::filesystem::path *__existing_symlink, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  MEMORY[0x24BEDB228](__existing_symlink, __new_symlink, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__current_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB230](retstr, __ec);
}

void std::__fs::filesystem::__current_path(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  MEMORY[0x24BEDB238](a1, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__read_symlink(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB240](retstr, a2, __ec);
}

std::__fs::filesystem::_FilesystemClock::time_point std::__fs::filesystem::_FilesystemClock::now(void)
{
  uint64_t v0;
  uint64_t v1;
  std::__fs::filesystem::_FilesystemClock::time_point result;

  v0 = MEMORY[0x24BEDB248]();
  *((_QWORD *)&result.__d_.__rep_ + 1) = v1;
  *(_QWORD *)&result.__d_.__rep_ = v0;
  return result;
}

void std::__fs::filesystem::__create_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  MEMORY[0x24BEDB250](__to, __new_symlink, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__symlink_status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB258](a1, __ec);
}

uintmax_t std::__fs::filesystem::__hard_link_count(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB270](a1, __ec);
}

std::__fs::filesystem::file_time_type std::__fs::filesystem::__last_write_time(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  uint64_t v2;
  uint64_t v3;
  std::__fs::filesystem::file_time_type result;

  v2 = MEMORY[0x24BEDB278](a1, __ec);
  *((_QWORD *)&result.__d_.__rep_ + 1) = v3;
  *(_QWORD *)&result.__d_.__rep_ = v2;
  return result;
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x24BEDB280](a1, a2);
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *__attributes, std::error_code *a3)
{
  return MEMORY[0x24BEDB288](a1, __attributes, a3);
}

void std::__fs::filesystem::__create_hard_link(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_hard_link, std::error_code *__ec)
{
  MEMORY[0x24BEDB290](__to, __new_hard_link, __ec);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__weakly_canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB298](retstr, __p, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x24BEDB2A0](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x24BEDB2A8](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x24BEDB2B0](a1, a2);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__temp_directory_path(std::__fs::filesystem::path *__return_ptr retstr, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB2B8](retstr, __ec);
}

void std::__fs::filesystem::__create_directory_symlink(const std::__fs::filesystem::path *__to, const std::__fs::filesystem::path *__new_symlink, std::error_code *__ec)
{
  MEMORY[0x24BEDB2C0](__to, __new_symlink, __ec);
}

void std::__fs::filesystem::__copy(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt, std::error_code *__ec)
{
  MEMORY[0x24BEDB2E8](__from, __to, __opt, __ec);
}

std::__fs::filesystem::space_info *__cdecl std::__fs::filesystem::__space(std::__fs::filesystem::space_info *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::space_info *)MEMORY[0x24BEDB2F0](retstr, a2, __ec);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x24BEDB2F8](a1, __ec);
}

void std::__fs::filesystem::__rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x24BEDB300](__from, __to, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB308](a1, __ec);
}

double std::stod(const std::string *__str, size_t *__idx)
{
  double result;

  MEMORY[0x24BEDB320](__str, __idx);
  return result;
}

float std::stof(const std::string *__str, size_t *__idx)
{
  float result;

  MEMORY[0x24BEDB328](__str, __idx);
  return result;
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x24BEDB3A0]();
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x24BEDB3B0]();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x24BEDB3B8]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x24BEDB3F8](__t);
}

std::future<void> *__cdecl std::future<void>::future(std::future<void> *this, std::__assoc_sub_state *__state)
{
  return (std::future<void> *)MEMORY[0x24BEDB408](this, __state);
}

void std::future<void>::~future(std::future<void> *this)
{
  MEMORY[0x24BEDB410](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x24BEDB468](this);
}

void std::thread::detach(std::thread *this)
{
  MEMORY[0x24BEDB470](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

std::future<void> std::promise<void>::get_future(std::promise<void> *this)
{
  return (std::future<void>)MEMORY[0x24BEDB4C0](this);
}

void std::promise<void>::set_exception(std::promise<void> *this, std::exception_ptr __p)
{
  MEMORY[0x24BEDB4C8](this, __p.__ptr_);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
  MEMORY[0x24BEDB4D0](this);
}

std::promise<void> *__cdecl std::promise<void>::promise(std::promise<void> *this)
{
  return (std::promise<void> *)MEMORY[0x24BEDB4D8](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
  MEMORY[0x24BEDB4E0](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

std::ios_base::failure *__cdecl std::ios_base::failure::failure(std::ios_base::failure *this, const std::string *__msg, const std::error_code *__ec)
{
  return (std::ios_base::failure *)MEMORY[0x24BEDB558](this, __msg, __ec);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x24BEDB5F8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x24BEDB600](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB618](retstr, __val);
}

{
  return (std::string *)MEMORY[0x24BEDB628](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x24BEDB648](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
  MEMORY[0x24BEDB658](this);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x24BEDB660](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x24BEDB6A0]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
  MEMORY[0x24BEDB6A8](a1.__ptr_);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete[](void *__p)
{
  off_24C06DE98(__p);
}

void operator delete(void *__p)
{
  off_24C06DEA0(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_24C06DEA8(__p, a2);
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_24C06DEB0(__sz);
}

void *__cdecl operator new[](size_t __sz, std::align_val_t a2)
{
  return (void *)off_24C06DEB8(__sz, a2);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C06DEC0(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24C06DEC8(__sz, a2);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x24BEDB900]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

simd_double2x2 __invert_d2(simd_double2x2 a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  simd_double2x2 result;

  MEMORY[0x24BDAC800]((__n128)a1.columns[0], (__n128)a1.columns[1]);
  result.columns[1].f64[1] = v4;
  result.columns[1].f64[0] = v3;
  result.columns[0].f64[1] = v2;
  result.columns[0].f64[0] = v1;
  return result;
}

uint64_t __invert_d3()
{
  return MEMORY[0x24BDAC808]();
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x24BDAC820]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

uint64_t _get_cpu_capabilities()
{
  return MEMORY[0x24BDACAD0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x24BDACB98]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x24BDACBA0]();
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x24BDACBA8]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x24BE1A1F8]();
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x24BDAD188](__x);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int cblas_errprn(int __ierr, int __info, char *__form, ...)
{
  return MEMORY[0x24BDB2B68](*(_QWORD *)&__ierr, *(_QWORD *)&__info, __form);
}

void cblas_scopy(const int __N, const float *__X, const int __incX, float *__Y, const int __incY)
{
  MEMORY[0x24BDB2BA8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
}

float cblas_sdot(const int __N, const float *__X, const int __incX, const float *__Y, const int __incY)
{
  float result;

  MEMORY[0x24BDB2BB8](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY);
  return result;
}

void cblas_sgemm(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const CBLAS_TRANSPOSE __TransB, const int __M, const int __N, const int __K, const float __alpha, const float *__A, const int __lda, const float *__B, const int __ldb, const float __beta, float *__C, const int __ldc)
{
  MEMORY[0x24BDB2BC8](*(_QWORD *)&__Order, *(_QWORD *)&__TransA, *(_QWORD *)&__TransB, *(_QWORD *)&__M, *(_QWORD *)&__N, *(_QWORD *)&__K, __A, *(_QWORD *)&__lda, __alpha, __beta);
}

uint64_t cblas_sgemv_NEWLAPACK()
{
  return MEMORY[0x24BDB2BE8]();
}

void cblas_sger(const CBLAS_ORDER __Order, const int __M, const int __N, const float __alpha, const float *__X, const int __incX, const float *__Y, const int __incY, float *__A, const int __lda)
{
  MEMORY[0x24BDB2BF8](*(_QWORD *)&__Order, *(_QWORD *)&__M, *(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __Y, *(_QWORD *)&__incY, __A, __alpha);
}

void cblas_sscal(const int __N, const float __alpha, float *__X, const int __incX)
{
  MEMORY[0x24BDB2C18](*(_QWORD *)&__N, __X, *(_QWORD *)&__incX, __alpha);
}

void cblas_strsm(const CBLAS_ORDER __Order, const CBLAS_SIDE __Side, const CBLAS_UPLO __Uplo, const CBLAS_TRANSPOSE __TransA, const CBLAS_DIAG __Diag, const int __M, const int __N, const float __alpha, const float *__A, const int __lda, float *__B, const int __ldb)
{
  MEMORY[0x24BDB2C38](*(_QWORD *)&__Order, *(_QWORD *)&__Side, *(_QWORD *)&__Uplo, *(_QWORD *)&__TransA, *(_QWORD *)&__Diag, *(_QWORD *)&__M, *(_QWORD *)&__N, __A, __alpha);
}

void cblas_strsv(const CBLAS_ORDER __Order, const CBLAS_UPLO __Uplo, const CBLAS_TRANSPOSE __TransA, const CBLAS_DIAG __Diag, const int __N, const float *__A, const int __lda, float *__X, const int __incX)
{
  MEMORY[0x24BDB2C48](*(_QWORD *)&__Order, *(_QWORD *)&__Uplo, *(_QWORD *)&__TransA, *(_QWORD *)&__Diag, *(_QWORD *)&__N, __A, *(_QWORD *)&__lda, __X);
}

void cblas_xerbla(int __p, char *__rout, char *__form, ...)
{
  MEMORY[0x24BDB2C58](*(_QWORD *)&__p, __rout, __form);
}

long double cbrt(long double __x)
{
  long double result;

  MEMORY[0x24BDAD330](__x);
  return result;
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADDC0](group, queue, context, work);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x24BDADF60](object, queue);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADFF0](queue, context, work);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x24BDAE018](label);
}

void dispatch_workloop_set_os_workgroup(dispatch_workloop_t workloop, os_workgroup_t workgroup)
{
  MEMORY[0x24BDAE038](workloop, workgroup);
}

uint64_t dispatch_workloop_set_qos_class_floor()
{
  return MEMORY[0x24BDAE040]();
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x24BDAE048]();
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x24BDAE058](a1, a2);
}

uint64_t dsysv_NEWLAPACK()
{
  return MEMORY[0x24BDB2E38]();
}

uint64_t e5rt_buffer_object_alloc()
{
  return MEMORY[0x24BE2F6E8]();
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x24BE2F700]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x24BE2F720]();
}

uint64_t e5rt_e5_compiler_compile()
{
  return MEMORY[0x24BE2F738]();
}

uint64_t e5rt_e5_compiler_config_options_create()
{
  return MEMORY[0x24BE2F740]();
}

uint64_t e5rt_e5_compiler_config_options_set_cache_bundle_location()
{
  return MEMORY[0x24BE2F750]();
}

uint64_t e5rt_e5_compiler_create()
{
  return MEMORY[0x24BE2F758]();
}

uint64_t e5rt_e5_compiler_create_with_config()
{
  return MEMORY[0x24BE2F760]();
}

uint64_t e5rt_e5_compiler_is_new_compile_required()
{
  return MEMORY[0x24BE2F768]();
}

uint64_t e5rt_e5_compiler_options_create()
{
  return MEMORY[0x24BE2F770]();
}

uint64_t e5rt_error_code_get_string()
{
  return MEMORY[0x24BE2F798]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x24BE2F7A0]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x24BE2F7B0]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x24BE2F7C0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options()
{
  return MEMORY[0x24BE2F7E0]();
}

uint64_t e5rt_execution_stream_operation_get_input_names()
{
  return MEMORY[0x24BE2F7F0]();
}

uint64_t e5rt_execution_stream_operation_get_num_inputs()
{
  return MEMORY[0x24BE2F800]();
}

uint64_t e5rt_execution_stream_operation_get_num_outputs()
{
  return MEMORY[0x24BE2F808]();
}

uint64_t e5rt_execution_stream_operation_get_output_names()
{
  return MEMORY[0x24BE2F820]();
}

uint64_t e5rt_execution_stream_operation_prepare_op_for_encode()
{
  return MEMORY[0x24BE2F828]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x24BE2F830]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x24BE2F840]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x24BE2F850]();
}

uint64_t e5rt_execution_stream_prewire_in_use_allocations()
{
  return MEMORY[0x24BE2F860]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x24BE2F870]();
}

uint64_t e5rt_execution_stream_reset()
{
  return MEMORY[0x24BE2F888]();
}

uint64_t e5rt_get_last_error_message()
{
  return MEMORY[0x24BE2F8A0]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x24BE2F8A8]();
}

uint64_t e5rt_io_port_bind_surface_object()
{
  return MEMORY[0x24BE2F8C0]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x24BE2F8E8]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x24BE2F908]();
}

uint64_t e5rt_precompiled_compute_op_create_options_create_with_program_function()
{
  return MEMORY[0x24BE2F910]();
}

uint64_t e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffers()
{
  return MEMORY[0x24BE2F920]();
}

uint64_t e5rt_program_library_create()
{
  return MEMORY[0x24BE2F958]();
}

uint64_t e5rt_program_library_get_function_names()
{
  return MEMORY[0x24BE2F978]();
}

uint64_t e5rt_program_library_get_num_functions()
{
  return MEMORY[0x24BE2F980]();
}

uint64_t e5rt_program_library_release()
{
  return MEMORY[0x24BE2F998]();
}

uint64_t e5rt_program_library_retain_program_function()
{
  return MEMORY[0x24BE2F9A0]();
}

uint64_t e5rt_surface_object_create_from_iosurface()
{
  return MEMORY[0x24BE2FA08]();
}

uint64_t e5rt_tensor_desc_create()
{
  return MEMORY[0x24BE2FA30]();
}

uint64_t e5rt_tensor_desc_dtype_create()
{
  return MEMORY[0x24BE2FA38]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x24BE2FA40]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_size()
{
  return MEMORY[0x24BE2FA50]();
}

uint64_t e5rt_tensor_desc_dtype_get_element_size()
{
  return MEMORY[0x24BE2FA58]();
}

uint64_t e5rt_tensor_desc_dtype_get_num_components()
{
  return MEMORY[0x24BE2FA60]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x24BE2FA88]();
}

uint64_t e5rt_tensor_desc_get_size()
{
  return MEMORY[0x24BE2FA90]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x24BE2FA98]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x24BE2FAA8]();
}

uint64_t e5rt_tensor_desc_retain_dtype()
{
  return MEMORY[0x24BE2FAB8]();
}

uint64_t e5rt_tensor_utils_cast_from_fp16_to_fp32()
{
  return MEMORY[0x24BE2FAC0]();
}

uint64_t e5rt_tensor_utils_dequantize_from_u8_to_fp32()
{
  return MEMORY[0x24BE2FAD8]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x24BE2FB00]();
}

uint64_t espresso_context_set_low_precision_accumulation()
{
  return MEMORY[0x24BE2FB10]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x24BE2FB18]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x24BE2FB38]();
}

uint64_t espresso_get_last_error()
{
  return MEMORY[0x24BE2FB60]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x24BE2FB88]();
}

uint64_t espresso_network_bind_direct_cvpixelbuffer()
{
  return MEMORY[0x24BE2FBA8]();
}

uint64_t espresso_network_bind_input_cvpixelbuffer()
{
  return MEMORY[0x24BE2FBB8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8()
{
  return MEMORY[0x24BE2FBD0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8()
{
  return MEMORY[0x24BE2FBE8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8()
{
  return MEMORY[0x24BE2FBF8]();
}

uint64_t espresso_network_declare_input()
{
  return MEMORY[0x24BE2FC10]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x24BE2FC18]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x24BE2FC38]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x24BE2FC50]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x24BE2FC70]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x24BE2FC80]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x24BE2FC88]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x24BE2FC90]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x24BE2FCA0]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x24BE2FCB0]();
}

uint64_t espresso_set_image_preprocessing_params()
{
  return MEMORY[0x24BE2FCE0]();
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

float expm1f(float a1)
{
  float result;

  MEMORY[0x24BDAE298](a1);
  return result;
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x24BDAEA30](*(_QWORD *)&__e, __x);
  return result;
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x24BDAEA90]();
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x24BDAEAA0](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

long double log1p(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAC0](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x24BDAEB48]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED68](alignment, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

uint64_t os_log_pack_send()
{
  return MEMORY[0x24BDAF378]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x24BDAF3F0](object);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x24BDAF4B0]();
}

uint64_t os_variant_allows_security_research()
{
  return MEMORY[0x24BDAF4B8]();
}

uint64_t os_variant_check()
{
  return MEMORY[0x24BDAF4C0]();
}

uint64_t os_variant_has_factory_content()
{
  return MEMORY[0x24BDAF4C8]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x24BDAF4D0]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x24BDAF4D8]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x24BDAF4E0]();
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x24BDAF4E8]();
}

uint64_t os_variant_is_recovery()
{
  return MEMORY[0x24BDAF4F0]();
}

uint64_t os_variant_uses_ephemeral_storage()
{
  return MEMORY[0x24BDAF4F8]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x24BDAF928]();
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x24BDAFA10]();
}

int sched_yield(void)
{
  return MEMORY[0x24BDAFC68]();
}

uint64_t sgesvd_NEWLAPACK()
{
  return MEMORY[0x24BDB2F98]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

uint64_t spotrf_NEWLAPACK()
{
  return MEMORY[0x24BDB30A0]();
}

uint64_t ssytrf_NEWLAPACK()
{
  return MEMORY[0x24BDB30D8]();
}

uint64_t ssytrs_NEWLAPACK()
{
  return MEMORY[0x24BDB30E8]();
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x24BDAFFD0](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x24BDAFFE0](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0010](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0040](__str, __endptr, *(_QWORD *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x24BDB0138](__x);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x24BDB0180](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x24BDB3630](buf, height, width, *(_QWORD *)&pixelBits, *(_QWORD *)&flags);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x24BDB0380](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x24BDB0390](*(_QWORD *)&target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x24BDB08D0]();
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x24BDB09A8](xdict, key, value);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x24BDB09D0](xdict, key, value);
}

