_QWORD *sub_207D874A4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_207D874E4(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t **v78;
  unint64_t *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *(a2 - 1);
        v68 = *v8;
        if (v67 < *v8)
        {
          *v8 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3:
        v69 = *v8;
        v70 = v8[1];
        v71 = *(a2 - 1);
        if (v70 >= *v8)
        {
          if (v71 < v70)
          {
            v8[1] = v71;
            *(a2 - 1) = v70;
            v113 = *v8;
            v112 = v8[1];
            if (v112 < *v8)
            {
              *v8 = v112;
              v8[1] = v113;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            *v8 = v70;
            v8[1] = v69;
            v120 = *(a2 - 1);
            if (v120 >= v69)
              return result;
            v8[1] = v120;
          }
          else
          {
            *v8 = v71;
          }
          *(a2 - 1) = v69;
        }
        return result;
      case 4:
        v72 = v8 + 1;
        v73 = (unint64_t *)v8[1];
        v74 = v8 + 2;
        v75 = v8[2];
        v76 = (unint64_t *)*v8;
        if ((unint64_t)v73 >= *v8)
        {
          if (v75 >= (unint64_t)v73)
          {
LABEL_181:
            v73 = (unint64_t *)v75;
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
LABEL_182:
            *v74 = v114;
            *(a2 - 1) = (unint64_t)v73;
            v117 = *v74;
            v118 = *v72;
            if (v117 < v118)
            {
              v8[1] = v117;
              v8[2] = v118;
              v119 = *v8;
              if (v117 < *v8)
              {
                *v8 = v117;
                v8[1] = v119;
              }
            }
            return result;
          }
          *v72 = v75;
          *v74 = (unint64_t)v73;
          v77 = v8;
          v78 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v73;
          if (v75 >= (unint64_t)v76)
          {
LABEL_173:
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
            goto LABEL_182;
          }
        }
        else
        {
          v77 = v8;
          v78 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v75 >= (unint64_t)v73)
          {
            *v8 = (unint64_t)v73;
            v8[1] = (unint64_t)v76;
            v77 = v8 + 1;
            v78 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v76;
            if (v75 >= (unint64_t)v76)
              goto LABEL_181;
          }
        }
        *v77 = v75;
        *v78 = v76;
        v73 = (unint64_t *)result;
        goto LABEL_173;
      case 5:
        return (uint64_t)sub_207D88150(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v89 = (unint64_t)(v10 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = &v8[v92];
                  if (2 * v90 + 2 >= v10)
                  {
                    v94 = *v93;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (*v93 >= *v96)
                      goto LABEL_147;
                  }
                  else
                  {
                    v94 = v93[1];
                    v95 = *v93 >= v94;
                    if (*v93 < v94)
                      ++v93;
                    else
                      v94 = *v93;
                    if (!v95)
                      v92 = 2 * v90 + 2;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (v94 >= *v96)
                    {
LABEL_147:
                      while (1)
                      {
                        *v96 = v94;
                        v96 = v93;
                        if (v89 < v92)
                          break;
                        v98 = (2 * v92) | 1;
                        v93 = &v8[v98];
                        v92 = 2 * v92 + 2;
                        if (v92 < v10)
                        {
                          v94 = *v93;
                          result = (uint64_t)(v93 + 1);
                          if (*v93 >= v93[1])
                          {
                            v92 = v98;
                          }
                          else
                          {
                            v94 = v93[1];
                            ++v93;
                          }
                          if (v94 < v97)
                            break;
                        }
                        else
                        {
                          v94 = *v93;
                          v92 = v98;
                          if (*v93 < v97)
                            break;
                        }
                      }
                      *v96 = v97;
                    }
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v9 >> 3;
              do
              {
                v100 = 0;
                v101 = *v8;
                v102 = (unint64_t)(v99 - 2) >> 1;
                v103 = v8;
                do
                {
                  while (1)
                  {
                    v105 = &v103[v100 + 1];
                    v106 = (2 * v100) | 1;
                    v100 = 2 * v100 + 2;
                    if (v100 < v99)
                      break;
                    v100 = v106;
                    *v103 = *v105;
                    v103 = v105;
                    if (v106 > v102)
                      goto LABEL_161;
                  }
                  v104 = *v105;
                  if (*v105 >= v105[1])
                  {
                    v100 = v106;
                  }
                  else
                  {
                    v104 = v105[1];
                    ++v105;
                  }
                  *v103 = v104;
                  v103 = v105;
                }
                while (v100 <= v102);
LABEL_161:
                if (v105 == --a2)
                {
                  *v105 = v101;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v101;
                  v107 = (char *)v105 - (char *)v8 + 8;
                  if (v107 >= 9)
                  {
                    v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                    v109 = &v8[v108];
                    v110 = *v109;
                    v111 = *v105;
                    if (*v109 < *v105)
                    {
                      do
                      {
                        *v105 = v110;
                        v105 = v109;
                        if (!v108)
                          break;
                        v108 = (v108 - 1) >> 1;
                        v109 = &v8[v108];
                        v110 = *v109;
                      }
                      while (*v109 < v111);
                      *v105 = v111;
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = *v8;
                *v8 = v40;
                *v12 = v42;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v43 = *v8;
            *v8 = v39;
            *v12 = v43;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v59 = v8 + 1;
              do
              {
                v8 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v58 = v8[1];
                ++v8;
              }
              while (v20 >= v58);
            }
            v60 = a2;
            if (v8 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v20 < v61);
            }
            if (v8 < v60)
            {
              v62 = *v8;
              v63 = *v60;
              do
              {
                *v8 = v63;
                *v60 = v62;
                do
                {
                  v64 = v8[1];
                  ++v8;
                  v62 = v64;
                }
                while (v20 >= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v20 < v65);
              }
              while (v8 < v60);
            }
            v66 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v66;
            a4 = 0;
            *v66 = v20;
            continue;
          }
          v57 = *v8;
          *v8 = v41;
          *v12 = v57;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v44 = 0;
          do
            v45 = v8[++v44];
          while (v45 < v20);
          v46 = &v8[v44];
          v47 = a2;
          if (v44 == 1)
          {
            v47 = a2;
            do
            {
              if (v46 >= v47)
                break;
              v49 = *--v47;
            }
            while (v49 >= v20);
          }
          else
          {
            do
              v48 = *--v47;
            while (v48 >= v20);
          }
          if (v46 >= v47)
          {
            v55 = v46 - 1;
            if (v46 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v50 = *v47;
            v51 = &v8[v44];
            v52 = v47;
            do
            {
              *v51 = v50;
              *v52 = v45;
              do
              {
                v53 = v51[1];
                ++v51;
                v45 = v53;
              }
              while (v53 < v20);
              do
              {
                v54 = *--v52;
                v50 = v54;
              }
              while (v54 >= v20);
            }
            while (v51 < v52);
            v55 = v51 - 1;
            if (v51 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v55;
          }
LABEL_74:
          *v55 = v20;
          if (v46 < v47)
            goto LABEL_77;
          v56 = sub_207D87E4C(v8, v55);
          v8 = v55 + 1;
          result = sub_207D87E4C(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_77:
            result = sub_207D874E4(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v79 = v8 + 1;
        v81 = v8 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 8;
            v83 = v8;
            do
            {
              v86 = *v83;
              v85 = v83[1];
              v83 = v79;
              if (v85 < v86)
              {
                v87 = v82;
                do
                {
                  *(unint64_t *)((char *)v8 + v87) = v86;
                  v88 = v87 - 8;
                  if (v87 == 8)
                  {
                    v84 = v8;
                    goto LABEL_121;
                  }
                  v86 = *(unint64_t *)((char *)v8 + v87 - 16);
                  v87 -= 8;
                }
                while (v85 < v86);
                v84 = (unint64_t *)((char *)v8 + v88);
LABEL_121:
                *v84 = v85;
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v116 = *v7;
            v115 = v7[1];
            v7 = v79;
            if (v115 < v116)
            {
              do
              {
                *v79 = v116;
                v116 = *(v79 - 2);
                --v79;
              }
              while (v115 < v116);
              *v79 = v115;
            }
            v79 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_207D87E4C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_207D88150(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

unint64_t *sub_207D88150(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *a2;
  v6 = *result;
  v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= v7)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    v8 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v8;
      v5 = *a3;
      v9 = *a4;
      if (*a4 >= *a3)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v5;
      *a2 = v6;
      v5 = *a3;
      if (*a3 >= v6)
        goto LABEL_11;
      *a2 = v5;
    }
    else
    {
      *result = v7;
    }
    *a3 = v6;
    v5 = v6;
  }
LABEL_11:
  v9 = *a4;
  if (*a4 >= v5)
    goto LABEL_17;
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    v11 = *result;
    if (*a2 < *result)
    {
      *result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        v15 = *result;
        if (*a2 < *result)
        {
          *result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_207D8828C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C074308;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C074368;
  sub_207CC46C8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_207D88330(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C074308;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C074368;
  sub_207CC46C8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  operator delete(a1);
}

void sub_207D883D4(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  a1[1] = 0;
  v2 = (void **)a1[6];
  v3 = a1[7];
  a1[10] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[7];
      v2 = (void **)(a1[6] + 8);
      a1[6] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  a1[9] = v6;
LABEL_8:
  a1[3] = a1[2];
  v8 = a1[11];
  v7 = a1[12];
  if (v7 != v8)
  {
    v9 = a1[12];
    do
    {
      v11 = *(void **)(v9 - 24);
      v9 -= 24;
      v10 = v11;
      if (v11)
      {
        *(_QWORD *)(v7 - 16) = v10;
        operator delete(v10);
      }
      v7 = v9;
    }
    while (v9 != v8);
  }
  a1[12] = v8;
}

void sub_207D88494(uint64_t a1, int a2, unsigned int a3)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;

  if (*(_DWORD *)(a1 + 12) != a3)
  {
    v6 = a3;
    v8 = *(_QWORD **)(a1 + 88);
    v7 = *(_QWORD **)(a1 + 96);
    v9 = 0xAAAAAAAAAAAAAAABLL * (v7 - v8);
    v10 = a3 - v9;
    if (a3 <= v9)
    {
      if (a3 < v9)
      {
        v24 = &v8[3 * a3];
        if (v7 != v24)
        {
          v25 = *(_QWORD **)(a1 + 96);
          do
          {
            v27 = (void *)*(v25 - 3);
            v25 -= 3;
            v26 = v27;
            if (v27)
            {
              *(v7 - 2) = v26;
              operator delete(v26);
            }
            v7 = v25;
          }
          while (v25 != v24);
        }
        *(_QWORD *)(a1 + 96) = v24;
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 104);
      if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3) >= v10)
      {
        bzero(*(void **)(a1 + 96), 24 * ((24 * v10 - 24) / 0x18) + 24);
        *(_QWORD *)(a1 + 96) = &v7[3 * ((24 * v10 - 24) / 0x18) + 3];
      }
      else
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 3);
        v13 = 0x5555555555555556 * ((v11 - (uint64_t)v8) >> 3);
        if (v13 > a3)
          v6 = v13;
        if (v12 >= 0x555555555555555)
          v6 = 0xAAAAAAAAAAAAAAALL;
        if (v6 > 0xAAAAAAAAAAAAAAALL)
          sub_207CA3AB8();
        v14 = 24 * v6;
        v15 = (char *)operator new(24 * v6);
        v16 = &v15[8 * (v7 - v8)];
        v17 = &v15[v14];
        bzero(v16, 24 * ((24 * v10 - 24) / 0x18) + 24);
        v18 = &v16[24 * ((24 * v10 - 24) / 0x18) + 24];
        if (v7 == v8)
        {
          *(_QWORD *)(a1 + 88) = v16;
          *(_QWORD *)(a1 + 96) = v18;
          *(_QWORD *)(a1 + 104) = v17;
        }
        else
        {
          do
          {
            v19 = *(_OWORD *)(v7 - 3);
            v7 -= 3;
            *(_OWORD *)(v16 - 24) = v19;
            v16 -= 24;
            *((_QWORD *)v16 + 2) = v7[2];
            *v7 = 0;
            v7[1] = 0;
            v7[2] = 0;
          }
          while (v7 != v8);
          v7 = *(_QWORD **)(a1 + 88);
          v20 = *(_QWORD **)(a1 + 96);
          *(_QWORD *)(a1 + 88) = v16;
          *(_QWORD *)(a1 + 96) = v18;
          *(_QWORD *)(a1 + 104) = v17;
          if (v20 != v7)
          {
            v21 = v20;
            do
            {
              v23 = (void *)*(v21 - 3);
              v21 -= 3;
              v22 = v23;
              if (v23)
              {
                *(v20 - 2) = v22;
                operator delete(v22);
              }
              v20 = v21;
            }
            while (v21 != v7);
          }
        }
        if (v7)
          operator delete(v7);
      }
    }
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
}

BOOL sub_207D886A8(_QWORD *a1, unsigned int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 2;
  v5 = a2;
  v6 = a3 * a2;
  if (v4 >= a2 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 4 * v6;
  v12 = (char *)operator new(4 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFFCLL];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 4) < 0x2C)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_14:
        v24 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v15 - 1) = v24;
        v15 -= 4;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v10 - &v12[v13 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 2;
    v17 = ((unint64_t)(v13 - 4) >> 2) + 1;
    v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[4 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_207D887CC(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_207D887E4()
{
  return 1;
}

uint64_t sub_207D887EC()
{
  return 1;
}

uint64_t sub_207D887F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v8 = *((_QWORD *)v6 + 1);
          v9 = *v6;
          v6 += 4;
          *(_DWORD *)(*(_QWORD *)a2 + 4 * (v9 + a3 + *(_DWORD *)(a2 + 16) * (i + HIDWORD(a3)))) = *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * v8);
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_207D88868(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(uint64_t **)(result + 88);
    v6 = *v5;
    v7 = v5[1];
    if (v6 != v7)
      goto LABEL_8;
LABEL_6:
    while (++v4 < v3)
    {
      v11 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
      v6 = *v11;
      v7 = v11[1];
      if (v6 != v7)
      {
LABEL_8:
        while (v4 != *(_DWORD *)v6)
        {
          v6 += 16;
          if (v6 == v7)
            goto LABEL_6;
        }
        v8 = (_DWORD *)(*(_QWORD *)(result + 16) + 4 * *(_QWORD *)(v6 + 8));
        v9 = (v4 + a3);
        v10 = (_DWORD *)*a2;
        if (v8 == (_DWORD *)*a2)
        {
          v10[v9] = *v8;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          v10[v9] = *v8;
        }
      }
    }
  }
  return result;
}

void sub_207D88918(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_207D88A58(a1);
  operator delete(v1);
}

void sub_207D8892C(uint64_t a1, int a2, double a3, double a4, int32x4_t a5, int32x4_t a6, float32x2_t a7, double a8, float32x2_t a9, float32x4_t a10)
{
  _QWORD *v10;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[5];
  int v27;
  std::mutex v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD **)(a1 + 560);
  __asm { FMOV            V0.2S, #1.0 }
  v20 = _D0;
  v16 = v10[1];
  v26[0] = *v10;
  v26[1] = v10 + 6;
  v26[2] = &v20;
  v26[3] = v16;
  v26[4] = 0;
  v27 = a2;
  v17 = 0uLL;
  memset(v28.__m_.__opaque, 0, sizeof(v28.__m_.__opaque));
  v28.__m_.__sig = 850045863;
  v23 = v16;
  v24 = v16;
  v18 = *(_QWORD *)(v26[0] + 96);
  v19 = *(_QWORD *)(v26[0] + 104);
  v21[0] = v26;
  v21[1] = &v22;
  v21[2] = &v20;
  v21[3] = &v25;
  v21[4] = &v24;
  for (v21[5] = &v23; v18 != v19; v18 += 104)
    *(double *)v17.i64 = sub_207D88C18((uint64_t)v21, v18, v17, a4, a5, a6, a7, a8, a9, a10);
  std::mutex::~mutex(&v28);
}

void sub_207D88A18(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D88A2C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_207D88A38(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_207D88A44(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8);
}

_QWORD *sub_207D88A58(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  *a1 = off_24C074430;
  v2 = (void *)a1[67];
  if (v2)
  {
    a1[68] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[64];
  if (v3)
    operator delete[](v3);
  v4 = (void *)a1[61];
  if (v4)
    operator delete[](v4);
  v5 = (void *)a1[58];
  if (v5)
    operator delete[](v5);
  v6 = (void *)a1[55];
  if (v6)
    operator delete[](v6);
  v7 = (void *)a1[52];
  if (v7)
    operator delete[](v7);
  v8 = (void *)a1[49];
  if (v8)
    operator delete[](v8);
  v9 = (void *)a1[46];
  if (v9)
  {
    a1[47] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[43];
  if (v10)
  {
    a1[44] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[40];
  if (v11)
  {
    a1[41] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[37];
  if (v12)
  {
    a1[38] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[34];
  if (v13)
  {
    a1[35] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[31];
  if (v14)
  {
    a1[32] = v14;
    operator delete(v14);
  }
  v15 = (_QWORD *)a1[30];
  if (v15 == a1 + 27)
  {
    v16 = 4;
    v15 = a1 + 27;
  }
  else
  {
    if (!v15)
      goto LABEL_32;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_32:
  v17 = (void *)a1[23];
  if (v17)
  {
    a1[24] = v17;
    operator delete(v17);
  }
  a1[8] = off_24C074308;
  v18 = a1[19];
  if (v18)
  {
    v19 = a1[20];
    v20 = (void *)a1[19];
    if (v19 != v18)
    {
      v21 = a1[20];
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v19 - 16) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = (void *)a1[19];
    }
    a1[20] = v18;
    operator delete(v20);
  }
  a1[8] = off_24C074368;
  sub_207CC46C8((uint64_t)(a1 + 13));
  v24 = (void *)a1[10];
  if (v24)
  {
    a1[11] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[4];
  if (v25)
    operator delete[](v25);
  v26 = (void *)a1[1];
  if (v26)
    operator delete[](v26);
  return a1;
}

double sub_207D88C18(uint64_t a1, uint64_t a2, float32x4_t a3, double a4, int32x4_t a5, int32x4_t a6, float32x2_t a7, double a8, float32x2_t a9, float32x4_t a10)
{
  float32x4_t v10;
  unsigned int *v11;
  int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  float32x2_t *v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x2_t *v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float v44;
  float32x2_t v45;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t *v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unsigned __int32 *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v71;

  v11 = *(unsigned int **)(a2 + 48);
  if ((v11[1] & 4) != 0)
    v12 = 1;
  else
    v12 = 2;
  if ((v12 & *(_DWORD *)(*(_QWORD *)a1 + 40)) != 0)
  {
    if (*((_BYTE *)v11 + 20))
    {
      v15 = *v11;
      if ((_DWORD)v15 == -1)
        return *(double *)a3.i64;
      v17 = a1 + 8;
      v16 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      *(_BYTE *)v16 = 1;
      v19 = *(_DWORD *)(*v18 + 4 * v15);
    }
    else
    {
      v17 = a1 + 8;
      v16 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)v16 = 0;
      v19 = -1;
    }
    *(_DWORD *)(v16 + 4) = v19;
    v20 = *(float32x2_t **)(a2 + 48);
    a5.i32[0] = v20[5].i32[0];
    a7.i32[0] = v20[7].i32[0];
    v21 = v20[8];
    a9.i32[0] = v20[9].i32[0];
    *(float32x2_t *)a10.f32 = v20[10];
    a10.i32[2] = v20[11].i32[0];
    *(float32x2_t *)a3.f32 = v20[12];
    a3.i32[2] = v20[13].i32[0];
    v22 = *(float32x2_t *)(a2 + 16);
    v10.i32[0] = *(_DWORD *)(a2 + 24);
    *(float32x2_t *)v23.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v20[4], v22.f32[0]), v20[6], v22, 1), v21, v10.f32[0]);
    *(float32x2_t *)&v23.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.i8, v22), a7, v22, 1), *(float32x2_t *)v10.f32, a9);
    v24 = vmlaq_n_f32(a10, a3, v20[17].f32[0]);
    v25 = *(_QWORD *)&v20[14] + (*(_QWORD *)(a2 + 40) << 6);
    a5.i64[0] = *(_QWORD *)v25;
    a6.i64[0] = *(_QWORD *)(v25 + 16);
    v26 = (float32x2_t)vzip1_s32(*(int32x2_t *)v25, *(int32x2_t *)a6.i8);
    a5.i32[2] = *(_DWORD *)(v25 + 8);
    a6.i32[2] = *(_DWORD *)(v25 + 24);
    v21.i32[0] = *(_DWORD *)(v25 + 40);
    v27 = *(float32x2_t *)(v25 + 32);
    v28 = (float32x2_t)vtrn2q_s32(a5, a6).u64[0];
    v29 = (float32x2_t)vzip2q_s32(a5, a6).u64[0];
    v30 = (int8x16_t)vdupq_lane_s32((int32x2_t)v28, 1);
    v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)v28, 0);
    v10.i64[0] = *(_QWORD *)(v25 + 48);
    v10.i32[2] = *(_DWORD *)(v25 + 56);
    v32 = (int8x16_t)vnegq_f32(v10);
    *(float32x2_t *)v33.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v26, *(float *)v32.i32), v28, *(float32x2_t *)v10.f32, 1), v29, v10, 2);
    v34 = vmla_f32(vmls_lane_f32(vmul_f32(v27, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), *(float32x2_t *)v10.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), v21);
    v35 = vextq_s8(v31, v30, 0xCuLL);
    *(float32x2_t *)&v33.u32[2] = v34;
    v36 = (int8x16_t)vaddq_f32(v24, v23);
    *(float32x2_t *)v37.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v26, *(float *)v36.i32), *(float32x2_t *)v35.i8, *(float32x2_t *)v36.i8, 1), v29, (float32x4_t)v36, 2);
    *(float32x2_t *)&v37.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v27, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), v27, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), v21);
    v38 = vaddq_f32(v37, v33);
    if (v38.f32[2] <= 0.0)
    {
      *(_BYTE *)(a2 + 76) = 0;
      *(_DWORD *)(a2 + 72) = 0;
      return *(double *)a3.i64;
    }
    v39 = *(_QWORD *)(a1 + 16);
    v40 = *(float32x2_t **)(a1 + 24);
    v35.i64[0] = *(_QWORD *)v25;
    v37.i64[0] = *(_QWORD *)(v25 + 16);
    v41 = (float32x2_t)vzip1_s32(*(int32x2_t *)v25, *(int32x2_t *)v37.f32);
    v35.i32[2] = *(_DWORD *)(v25 + 8);
    v37.i32[2] = *(_DWORD *)(v25 + 24);
    v42 = (float32x2_t *)(a2 + 64);
    v34.i32[0] = *(_DWORD *)(v25 + 40);
    v37.i64[0] = vtrn2q_s32((int32x4_t)v35, (int32x4_t)v37).u64[0];
    v35.i32[3] = v37.i32[2];
    v43 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v41, a3.f32[0]), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1), 0xCuLL), *(float32x2_t *)a3.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), a3, 2);
    LODWORD(v44) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v25 + 32), *(float32x2_t *)a3.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3.f32, 1), *(float32x2_t *)(v25 + 32), 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL), v34).u32[0];
    *(float32x2_t *)v38.f32 = vmul_n_f32(*(float32x2_t *)v38.f32, 1.0 / v38.f32[2]);
    v45 = vmul_n_f32(vneg_f32(*(float32x2_t *)v38.f32), 1.0 / v38.f32[2]);
    *(float32x2_t *)(a2 + 64) = vsub_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)(a2 + 28));
    v38.i32[0] = 0;
    v38.f32[1] = 1.0 / v38.f32[2];
    *(float32x2_t *)a3.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(1.0 / v38.f32[2]), v43.f32[0]), *(float32x2_t *)v38.f32, v43, 1), v45, v44);
    *v40 = *(float32x2_t *)a3.f32;
    *(_BYTE *)(a2 + 76) = 1;
    v47 = *(_QWORD *)(a2 + 80);
    if (v47)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 24))(v47, a2 + 64);
      v48 = *(_QWORD *)(a2 + 80);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + 20))
      {
        switch(v49)
        {
          case 0:
            a3.i64[0] = *(_QWORD *)(v48 + 12);
            v38.i64[0] = *(_QWORD *)(v48 + 20);
            goto LABEL_18;
          case 1:
            v38.i64[0] = *(_QWORD *)(v48 + 12);
            *(float32x2_t *)a3.f32 = vmul_f32(*v40, *(float32x2_t *)v38.f32);
            goto LABEL_19;
          case 2:
            *(float32x2_t *)v38.f32 = *v40;
            *(float32x2_t *)a3.f32 = vmul_n_f32(*v40, *(float *)(v48 + 12));
            goto LABEL_19;
          case 4:
            (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v48 + 56))(&v71, v48);
            v38.i64[0] = *((_QWORD *)&v71 + 1);
            a3.i64[0] = v71;
LABEL_18:
            *(float32x2_t *)a3.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a3.f32, COERCE_FLOAT(*v40)), *(float32x2_t *)v38.f32, *v40, 1);
LABEL_19:
            *v40 = *(float32x2_t *)a3.f32;
            break;
          default:
            break;
        }
      }
    }
    v50 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 56) = v50;
    v38.i32[0] = HIDWORD(v50);
    a3.i32[0] = v50;
    *(float32x2_t *)a3.f32 = vmla_f32(vmul_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)a3.f32), *(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
    a3.f32[0] = *(float *)(v39 + 4) * a3.f32[0];
    *(_DWORD *)(a2 + 72) = a3.i32[0];
    v51 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)v51)
    {
      v52 = *(float32x2_t **)(a1 + 24);
      v53 = **(unint64_t ***)(a1 + 32);
      v54 = *(_DWORD *)(v51 + 4);
      v55 = v53[15] + 24 * v54;
      v56 = *(char **)v55;
      v57 = *(char **)(v55 + 8);
      if (*(char **)v55 != v57)
      {
        while (*(_DWORD *)v56 < v54)
        {
          v56 += 16;
          if (v56 == v57)
            goto LABEL_29;
        }
      }
      if (v56 != v57)
      {
        if (*(_DWORD *)v56 == v54)
        {
          v58 = (unsigned __int32 *)(v53[6] + 4 * *((_QWORD *)v56 + 1));
LABEL_36:
          a3.i32[0] = *v58;
          *(float32x2_t *)a3.f32 = vadd_f32(*(float32x2_t *)a3.f32, vmla_lane_f32(vmul_f32(*v52, *v52), (float32x2_t)vdup_lane_s32((int32x2_t)*v52, 1), *v52, 1));
          *v58 = a3.i32[0];
          if (**(_BYTE **)v17)
          {
            v66 = **(uint64_t ***)(a1 + 40);
            v67 = *((_DWORD *)v66 + 7);
            v68 = *v66;
            v69 = 4 * (v67 + *(_DWORD *)(*(_QWORD *)v17 + 4));
            a3.i32[0] = *(_DWORD *)(v68 + v69);
            *(float32x2_t *)a3.f32 = vsub_f32(*(float32x2_t *)a3.f32, vmla_lane_f32(vmul_f32(**(float32x2_t **)(a1 + 24), *v42), (float32x2_t)vdup_lane_s32((int32x2_t)*v42, 1), **(float32x2_t **)(a1 + 24), 1));
            *(_DWORD *)(v68 + v69) = a3.i32[0];
          }
          return *(double *)a3.i64;
        }
        v57 = v56;
      }
LABEL_29:
      v59 = v53[14];
      if (v59)
      {
        v61 = v53[10];
        v60 = v53[11];
        v62 = ((v60 - v61) << 6) - 1;
        v63 = v53[13];
        if (v60 == v61)
          v62 = 0;
        v58 = (unsigned __int32 *)(v53[6]
                                 + 4
                                 * *(_QWORD *)(*(_QWORD *)(v61 + (((v63 + v59 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                             + 8 * ((v63 + v59 - 1) & 0x1FF)));
        v53[14] = v59 - 1;
        if (v62 - (v59 + v63) + 1 >= 0x400)
        {
          operator delete(*(void **)(v60 - 8));
          v53[11] -= 8;
        }
      }
      else
      {
        v64 = (void *)v53[7];
        LODWORD(v71) = 0;
        sub_207D89350(v53 + 6, v64, 1uLL, (const float *)&v71);
        v58 = (unsigned __int32 *)(v53[7] - 4);
      }
      v65 = (uint64_t)((uint64_t)v58 - v53[6]) >> 2;
      LODWORD(v71) = v54;
      *((_QWORD *)&v71 + 1) = v65;
      sub_207D89100((char **)v55, v57, &v71);
      goto LABEL_36;
    }
  }
  return *(double *)a3.i64;
}

void sub_207D89100(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  char *v30;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      v10 = v8 + 16;
      v11 = (__int128 *)(v5 - 16);
      v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v13 = *v11++;
          *(_OWORD *)v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10)
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (_QWORD)v10) >> 4)), v8, v5 - (_QWORD)v10);
      *(_OWORD *)v8 = *a3;
    }
    return;
  }
  v14 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v14 >> 60)
    sub_207CA420C();
  v16 = v9 - (_QWORD)v6;
  if (v16 >> 3 > v14)
    v14 = v16 >> 3;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v14;
  if (v17)
  {
    if (v17 >> 60)
      sub_207CA3AB8();
    v18 = (char *)operator new(16 * v17);
    v19 = v7 >> 4;
    v20 = &v18[16 * (v7 >> 4)];
    v21 = &v18[16 * v17];
    if (v7 >> 4 != v17)
      goto LABEL_31;
    goto LABEL_20;
  }
  v18 = 0;
  v19 = v7 >> 4;
  v20 = (char *)(16 * (v7 >> 4));
  v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2)
        v23 = 1;
      else
        v23 = v7 >> 3;
      if (v23 >> 60)
        sub_207CA3AB8();
      v20 = (char *)operator new(16 * v23);
      v21 = &v20[16 * v23];
      if (v18)
      {
        operator delete(v18);
        v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1)
        v22 = v19 + 1;
      else
        v22 = v19 + 2;
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v20 = *a3;
  v24 = v20;
  if (v6 != v8)
  {
    v25 = v8;
    v26 = v20;
    do
    {
      v24 = v26 - 16;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v25 - 1);
      v25 -= 16;
      v26 -= 16;
    }
    while (v25 != v6);
  }
  v27 = v20 + 16;
  v28 = a1[1];
  v29 = v28 - v8;
  if (v28 != v8)
    memmove(v27, v8, v28 - v8);
  v30 = *a1;
  *a1 = v24;
  a1[1] = &v27[v29];
  a1[2] = v21;
  if (v30)
    operator delete(v30);
}

void sub_207D89338(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float32_t sub_207D89350(unint64_t *a1, void *a2, unint64_t a3, const float *a4)
{
  const float *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  float *v37;
  int64_t v38;
  uint64_t v39;
  int *v40;
  _DWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  uint64_t v50;
  __int32 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  float32x4_t *v62;
  unint64_t v63;

  v4 = a4;
  v7 = *a1;
  v8 = a1[1];
  v9 = (uint64_t)a2 - *a1;
  v10 = v9 >> 2;
  v11 = (float *)(*a1 + (v9 & 0xFFFFFFFFFFFFFFFCLL));
  v12 = a1[2];
  if (a3 <= (uint64_t)(v12 - v8) >> 2)
  {
    v19 = (uint64_t)(v8 - (_QWORD)v11) >> 2;
    v20 = a3;
    if (a3 <= v19)
    {
      v21 = a1[1];
      v19 = a3;
      goto LABEL_33;
    }
    v21 = v8 + 4 * (a3 - v19);
    v22 = v20 * 4 - (v8 - (_QWORD)v11) - 4;
    if (v22 >= 0x4C)
    {
      if (v8 >= (unint64_t)(a4 + 1)
        || (v23 = (_DWORD *)a1[1], (v22 & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4 <= (unint64_t)a4))
      {
        v34 = (v22 >> 2) + 1;
        v23 = (_DWORD *)(v8 + 4 * (v34 & 0x7FFFFFFFFFFFFFF8));
        v30 = vld1q_dup_f32(a4);
        v35 = (float32x4_t *)(v8 + 16);
        v36 = v34 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v35[-1] = v30;
          *v35 = v30;
          v35 += 2;
          v36 -= 8;
        }
        while (v36);
        if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_32:
          a1[1] = v21;
          if ((float *)v8 == v11)
            return v30.f32[0];
LABEL_33:
          v37 = &v11[v20];
          v38 = v21 - (_QWORD)&v11[v20];
          v39 = v38 >> 2;
          v40 = (int *)(v21 - v20 * 4);
          v41 = (_DWORD *)v21;
          if ((unint64_t)v40 >= v8)
            goto LABEL_52;
          v42 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + v38;
          v43 = v42 + v7 + 4;
          if (v8 > v43)
            v43 = v8;
          v44 = v43 + ~v7 - v42;
          if (v44 >= 0x2C)
          {
            v41 = (_DWORD *)v21;
            if (v21 - ((v9 & 0xFFFFFFFFFFFFFFFCLL) + v7) - v38 >= 0x20)
            {
              v53 = (v44 >> 2) + 1;
              v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
              v40 = (int *)((char *)v40 + v54);
              v41 = (_DWORD *)(v21 + v54);
              v55 = (_OWORD *)(v21 + 16);
              v56 = (__int128 *)(4 * v39 + 4 * v10 + v7 + 16);
              v57 = v53 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v58 = *v56;
                *(v55 - 1) = *(v56 - 1);
                *v55 = v58;
                v55 += 2;
                v56 += 2;
                v57 -= 8;
              }
              while (v57);
              if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_52:
                a1[1] = (unint64_t)v41;
                if ((float *)v21 != v37)
                  memmove((void *)(v21 - 4 * v39), v11, v38);
                if (v11 <= v4)
                {
                  if (a1[1] <= (unint64_t)v4)
                    v60 = 0;
                  else
                    v60 = a3;
                  v4 += v60;
                }
                if (v19 >= 0xC)
                {
                  if (v11 >= v4 + 1 || (unint64_t)v4 >= v7 + (v9 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v19)
                  {
                    v11 += v19 & 0xFFFFFFFFFFFFFFF8;
                    v61 = v19 & 7;
                    v30 = vld1q_dup_f32(v4);
                    v62 = (float32x4_t *)(v7 + 4 * v10 + 16);
                    v63 = v19 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v62[-1] = v30;
                      *v62 = v30;
                      v62 += 2;
                      v63 -= 8;
                    }
                    while (v63);
                    if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
                      return v30.f32[0];
                  }
                  else
                  {
                    v61 = v19;
                  }
                }
                else
                {
                  v61 = v19;
                }
                do
                {
                  v30.f32[0] = *v4;
                  *v11++ = *v4;
                  --v61;
                }
                while (v61);
                return v30.f32[0];
              }
            }
          }
          else
          {
            v41 = (_DWORD *)v21;
          }
          do
          {
            v59 = *v40++;
            *v41++ = v59;
          }
          while ((unint64_t)v40 < v8);
          goto LABEL_52;
        }
      }
    }
    else
    {
      v23 = (_DWORD *)a1[1];
    }
    do
    {
      v30.f32[0] = *a4;
      *v23++ = *(_DWORD *)a4;
    }
    while (v23 != (_DWORD *)v21);
    goto LABEL_32;
  }
  v13 = a3 + ((uint64_t)(v8 - v7) >> 2);
  if (v13 >> 62)
    sub_207D0CD58();
  v15 = v12 - v7;
  if (v15 >> 1 > v13)
    v13 = v15 >> 1;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
    v16 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v16 = v13;
  if (v16)
  {
    if (v16 >> 62)
      sub_207CA3AB8();
    v17 = v16;
    v18 = operator new(4 * v16);
    v16 = v17;
  }
  else
  {
    v18 = 0;
  }
  v24 = v9 >> 2;
  v25 = (unint64_t)&v18[4 * v10];
  v26 = (char *)(v25 + 4 * a3);
  v27 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v28 = (char *)v25;
  if (v27 < 0x13)
    goto LABEL_74;
  if (v25 < (unint64_t)(v4 + 1))
  {
    v28 = (char *)v25;
    if (&v18[4 * a3 + (v9 & 0xFFFFFFFFFFFFFFFCLL)] > (_BYTE *)v4)
      goto LABEL_74;
  }
  v29 = v27 + 1;
  v28 = (char *)(v25 + 4 * (v29 & 0x7FFFFFFFFFFFFFF8));
  v30 = vld1q_dup_f32(v4);
  v31 = (float32x4_t *)&v18[4 * v24 + 16];
  v32 = v29 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v31[-1] = v30;
    *v31 = v30;
    v31 += 2;
    v32 -= 8;
  }
  while (v32);
  if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_74:
    do
    {
      v30.f32[0] = *v4;
      *(float *)v28 = *v4;
      v28 += 4;
    }
    while (v28 != v26);
  }
  if ((void *)v7 == a2)
    goto LABEL_43;
  if ((unint64_t)(v9 - 4) >= 0x3C)
  {
    v33 = v11;
    if ((v9 & 0xFFFFFFFFFFFFFFFCLL) + v7 - (unint64_t)&v18[v9 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
    {
      v45 = ((unint64_t)(v9 - 4) >> 2) + 1;
      v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      v33 = &v11[v46 / 0xFFFFFFFFFFFFFFFCLL];
      v25 -= v46;
      v47 = 4 * v24 - 16;
      v48 = (float32x4_t *)&v18[v47];
      v49 = (float32x4_t *)(v7 + v47);
      v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30 = *v49;
        v48[-1] = v49[-1];
        *v48 = v30;
        v48 -= 2;
        v49 -= 2;
        v50 -= 8;
      }
      while (v50);
      if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_43;
    }
  }
  else
  {
    v33 = v11;
  }
  do
  {
    v51 = *((_DWORD *)v33-- - 1);
    v30.i32[0] = v51;
    *(_DWORD *)(v25 - 4) = v51;
    v25 -= 4;
  }
  while (v33 != (float *)v7);
LABEL_43:
  v52 = &v18[4 * v16];
  if ((float *)v8 != v11)
    memmove(v26, v11, v8 - (_QWORD)v11);
  *a1 = v25;
  a1[1] = (unint64_t)&v26[v8 - (_QWORD)v11];
  a1[2] = (unint64_t)v52;
  if (v7)
    operator delete((void *)v7);
  return v30.f32[0];
}

uint64_t sub_207D897A8()
{
  return kdebug_trace();
}

uint64_t sub_207D897D8()
{
  return kdebug_trace();
}

uint64_t sub_207D89808()
{
  return kdebug_trace();
}

uint64_t sub_207D89838(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  unsigned int *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  unsigned int v57;
  __n128 *v58;
  __n128 *v59;
  __n128 *v60;
  uint64_t v61;
  const std::nothrow_t *v62;
  char *v63;
  BOOL v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  void **v74;

  if (!*(_BYTE *)(a1 + 146))
  {
    if (!*(_BYTE *)(a1 + 145))
      *(_BYTE *)(a1 + 145) = *(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 184);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 145))
    {
LABEL_81:
      *(_BYTE *)(a1 + 146) = 1;
      return a1 + 152;
    }
    v2 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 232) = v2;
    v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    v4 = v3 >> 4;
    if (v3 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 240) - (_QWORD)v2) >> 2))
    {
      if (v3 < 0)
        sub_207CA420C();
      v5 = (char *)operator new((unint64_t)v3 >> 2);
      *(_QWORD *)(a1 + 224) = v5;
      *(_QWORD *)(a1 + 232) = v5;
      *(_QWORD *)(a1 + 240) = &v5[4 * v4];
      if (v2)
        operator delete(v2);
    }
    v6 = *(_QWORD *)(a1 + 96);
    for (i = *(_QWORD *)(a1 + 104); v6 != i; v6 += 104)
    {
      v8 = *(_QWORD *)(v6 + 48);
      if (*(_BYTE *)(v6 + 96) || (*(_BYTE *)(v8 + 4) & 6) != 0)
      {
        *(_BYTE *)(v6 + 96) = 1;
        sub_207D8B464(a1 + 224, v8);
      }
    }
    v9 = *(_QWORD *)(a1 + 176);
    v10 = *(_QWORD *)(a1 + 184);
    v74 = (void **)(a1 + 176);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v12 = *(unsigned int **)(a1 + 224);
    v11 = *(unsigned int **)(a1 + 232);
    v71 = v9;
    v72 = (v10 - v9) >> 2;
    v13 = v72 + v11 - v12;
    v14 = *(_BYTE **)(a1 + 176);
    v70 = v10;
    if (v13 <= (uint64_t)(*(_QWORD *)(a1 + 192) - (_QWORD)v14) >> 2)
    {
LABEL_28:
      if (v12 != v11)
      {
        v73 = v11;
        while (1)
        {
          v30 = *v12;
          v32 = *(unsigned int **)a1;
          v31 = *(unsigned int **)(a1 + 8);
          if (v31 != *(unsigned int **)a1)
          {
            v33 = ((uint64_t)v31 - *(_QWORD *)a1) >> 4;
            do
            {
              v34 = v33 >> 1;
              v35 = &v32[4 * (v33 >> 1)];
              v37 = *v35;
              v36 = v35 + 4;
              v33 += ~(v33 >> 1);
              if (v37 < v30)
                v32 = v36;
              else
                v33 = v34;
            }
            while (v33);
          }
          if (v32 == v31 || *v32 != v30)
          {
            v30 = *v31;
            v32 = *(unsigned int **)(a1 + 8);
          }
          if ((*(_BYTE *)(*((_QWORD *)v32 + 1) + 4) & 6) != 0)
            goto LABEL_32;
          v39 = *(char **)(a1 + 184);
          v38 = *(_QWORD *)(a1 + 192);
          if ((unint64_t)v39 >= v38)
            break;
          *(_DWORD *)v39 = v30;
          v29 = (uint64_t)(v39 + 4);
LABEL_31:
          *(_QWORD *)(a1 + 184) = v29;
          *(_BYTE *)(*((_QWORD *)v32 + 1) + 4) ^= 2u;
LABEL_32:
          if (++v12 == v11)
            goto LABEL_64;
        }
        v40 = (char *)*v74;
        v41 = v39 - (_BYTE *)*v74;
        v42 = v41 >> 2;
        v43 = (v41 >> 2) + 1;
        if (v43 >> 62)
          goto LABEL_83;
        v44 = v38 - (_QWORD)v40;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 62)
            sub_207CA3AB8();
          v46 = operator new(4 * v45);
          v47 = (unsigned int *)&v46[4 * v42];
          *v47 = v30;
          v29 = (uint64_t)(v47 + 1);
          v48 = v39 - v40;
          if (v39 == v40)
            goto LABEL_61;
        }
        else
        {
          v46 = 0;
          v47 = (unsigned int *)(4 * v42);
          *(_DWORD *)(4 * v42) = v30;
          v29 = 4 * v42 + 4;
          v48 = v39 - v40;
          if (v39 == v40)
          {
LABEL_61:
            *(_QWORD *)(a1 + 176) = v47;
            *(_QWORD *)(a1 + 184) = v29;
            *(_QWORD *)(a1 + 192) = &v46[4 * v45];
            if (v40)
              operator delete(v40);
            v11 = v73;
            goto LABEL_31;
          }
        }
        v49 = v48 - 4;
        if (v49 < 0x2C)
          goto LABEL_88;
        if ((unint64_t)(v39 - v46 - v41) < 0x20)
          goto LABEL_88;
        v50 = (v49 >> 2) + 1;
        v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        v52 = &v39[-v51];
        v47 = (unsigned int *)((char *)v47 - v51);
        v53 = &v46[4 * v42 - 16];
        v54 = v39 - 16;
        v55 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v56 = *(_OWORD *)v54;
          *(v53 - 1) = *((_OWORD *)v54 - 1);
          *v53 = v56;
          v53 -= 2;
          v54 -= 32;
          v55 -= 8;
        }
        while (v55);
        v39 = v52;
        if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_88:
          do
          {
            v57 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *--v47 = v57;
          }
          while (v39 != v40);
        }
        goto LABEL_61;
      }
LABEL_64:
      if (v70 != v71)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v58 = *(__n128 **)(a1 + 176);
        v59 = *(__n128 **)(a1 + 184);
        v60 = (__n128 *)((char *)v58 + 4 * v72);
        if (((char *)v59 - (char *)v60) >> 2 >= v72)
          v61 = v72;
        else
          v61 = ((char *)v59 - (char *)v60) >> 2;
        if (v61 < 1)
        {
LABEL_72:
          sub_207D8B5FC(v58, v60, v59, v72, ((char *)v59 - (char *)v60) >> 2, 0, 0);
        }
        else
        {
          v62 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v63 = (char *)operator new(4 * v61, v62);
            if (v63)
              break;
            v64 = (unint64_t)v61 > 1;
            v61 = (unint64_t)v61 >> 1;
            if (!v64)
              goto LABEL_72;
          }
          v65 = v63;
          sub_207D8B5FC(v58, v60, v59, v72, ((char *)v59 - (char *)v60) >> 2, v63, v61);
          operator delete(v65);
        }
      }
      v66 = *(_QWORD *)(a1 + 96);
      v67 = *(_QWORD *)(a1 + 104);
      while (v66 != v67)
      {
        v68 = *(_QWORD *)(v66 + 48);
        if (*(_BYTE *)(v66 + 96) || (*(_BYTE *)(v68 + 4) & 6) != 0)
          ++*(_DWORD *)(v68 + 8);
        v66 += 104;
      }
      goto LABEL_81;
    }
    if (v13 >> 62)
LABEL_83:
      sub_207CA420C();
    v15 = *(_BYTE **)(a1 + 184);
    v16 = (char *)operator new(4 * v13);
    v17 = v15 - v14;
    v18 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFFCLL];
    v19 = v18;
    if (v15 != v14)
    {
      if ((unint64_t)(v17 - 4) < 0x2C)
      {
        v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_25:
          v28 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v19 - 1) = v28;
          v19 -= 4;
        }
        while (v15 != v14);
        goto LABEL_26;
      }
      v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v15[-(v17 & 0xFFFFFFFFFFFFFFFCLL)] - v16) < 0x20)
        goto LABEL_25;
      v20 = v17 >> 2;
      v21 = ((unint64_t)(v17 - 4) >> 2) + 1;
      v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      v23 = &v15[-v22];
      v19 = &v18[-v22];
      v24 = &v16[4 * v20 - 16];
      v25 = (__int128 *)(v15 - 16);
      v26 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *v25;
        *((_OWORD *)v24 - 1) = *(v25 - 1);
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 2;
        v26 -= 8;
      }
      while (v26);
      v15 = v23;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_25;
    }
LABEL_26:
    *(_QWORD *)(a1 + 176) = v19;
    *(_QWORD *)(a1 + 184) = v18;
    *(_QWORD *)(a1 + 192) = &v16[4 * v13];
    if (v14)
    {
      operator delete(v14);
      v12 = *(unsigned int **)(a1 + 224);
      v11 = *(unsigned int **)(a1 + 232);
    }
    goto LABEL_28;
  }
  return a1 + 152;
}

char **sub_207D89D94(char **a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  _BOOL4 v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (*a1 == v5)
  {
    v7 = a1[1];
    v9 = *a2;
  }
  else
  {
    v7 = *a1;
    v8 = *a1;
    v9 = *a2;
    while (v9 != v6)
    {
      if (*(_DWORD *)v9 < *(_DWORD *)v8)
        goto LABEL_9;
      v9 += 4 * (*(_DWORD *)v8 >= *(_DWORD *)v9);
      v8 += 4;
      v7 += 4;
      if (v8 == v5)
      {
        v7 = a1[1];
        goto LABEL_9;
      }
    }
    v7 = a1[1];
    v9 = a2[1];
  }
LABEL_9:
  v10 = (v7 - v4) >> 2;
  v11 = v5 - v4;
  v12 = v11 >> 2;
  v13 = ((v6 - *a2) >> 2) + (v11 >> 1) - v10;
  if (v13 <= v11 >> 2)
  {
    if (v13 < v11 >> 2)
      a1[1] = &v4[4 * v13];
  }
  else
  {
    sub_207CB9B90((uint64_t)a1, v13 - (v11 >> 2));
    v4 = *a1;
  }
  v14 = &v4[4 * v12];
  v15 = a2[1];
  if (v10 != v12)
  {
    v17 = &v4[4 * v10];
    v16 = &v4[4 * v12];
    while (v9 != v15)
    {
      v18 = *(_DWORD *)v9;
      v19 = *(_DWORD *)v9 >= *(_DWORD *)v17;
      if (*(_DWORD *)v9 >= *(_DWORD *)v17)
        v18 = *(_DWORD *)v17;
      v9 += 4 * (*(_DWORD *)v17 >= *(_DWORD *)v9);
      v17 += 4 * v19;
      *(_DWORD *)v16 = v18;
      v16 += 4;
      if (v17 == v14)
        goto LABEL_20;
    }
    v20 = v14 - v17;
    v21 = v16;
    goto LABEL_23;
  }
  v16 = &v4[4 * v12];
LABEL_20:
  v20 = v15 - v9;
  if (v15 != v9)
  {
    v21 = v16;
    v17 = v9;
LABEL_23:
    memmove(v21, v17, v20);
  }
  v22 = &v16[v20];
  v23 = *a1;
  if (&v16[v20] != a1[1])
    a1[1] = v22;
  if (v10 != v12)
  {
    v24 = &v23[4 * v10];
    v25 = &v23[4 * v12];
    v26 = v22 - v25;
    if (v26)
      memmove(&v23[4 * v10], v25, v26);
    a1[1] = &v24[v26];
  }
  return a1;
}

uint64_t sub_207D89F58(uint64_t a1, char **a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t result;

  sub_207D8BBF8(a1, 0);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v4 = *(_BYTE **)(a1 + 152);
  if (*(_QWORD *)(a1 + 168) - (_QWORD)v4 > 0xFFuLL)
    goto LABEL_12;
  v5 = *(_BYTE **)(a1 + 160);
  v6 = (char *)operator new(0x100uLL);
  v7 = v5 - v4;
  v8 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
  v9 = v8;
  if (v5 != v4)
  {
    if ((unint64_t)(v7 - 4) < 0x2C)
    {
      v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v18 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v9 - 1) = v18;
        v9 -= 4;
      }
      while (v5 != v4);
      goto LABEL_10;
    }
    v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
    if (v5 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v10 = v7 >> 2;
    v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
    v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    v13 = &v5[-v12];
    v9 = &v8[-v12];
    v14 = &v6[4 * v10 - 16];
    v15 = (__int128 *)(v5 - 16);
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    v5 = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 168) = v6 + 256;
  if (v4)
    operator delete(v4);
LABEL_12:
  if ((char **)(a1 + 152) != a2)
    sub_207CB9D2C((_QWORD *)(a1 + 152), *a2, a2[1], (a2[1] - *a2) >> 2);
  v19 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32, v19, v19);
  *(_QWORD *)(a1 + 24) = v19;
  *(_DWORD *)(a1 + 16) = v19;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)v19)
  {
    if (*(_QWORD *)a1)
      operator delete[](*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = ((4 * v19 + 31) & 0x7FFFFFFE0uLL) >> 2;
    result = MEMORY[0x20BD028B4]();
    *(_QWORD *)a1 = result;
  }
  return result;
}

uint64_t sub_207D8A108(uint64_t result, uint64_t a2, char **a3, _QWORD *a4)
{
  uint64_t v6;
  unsigned int **v7;
  char *v9;
  char *v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  _DWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t **v72;
  void *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  uint64_t v85;
  unint64_t **v86;
  unint64_t *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;

  v6 = a2;
  v7 = (unsigned int **)(result + 152);
  v92 = result;
  if ((char **)(result + 152) != a3)
  {
    sub_207CB9D2C(a3, *(char **)(result + 152), *(char **)(result + 160), (uint64_t)(*(_QWORD *)(result + 160) - *(_QWORD *)(result + 152)) >> 2);
    v6 = a2;
    result = v92;
  }
  v9 = *a3;
  v10 = a3[1];
  v11 = *(unsigned int **)(v6 + 152);
  v12 = *(unsigned int **)(v6 + 160);
  v13 = *a3 == v10 || v11 == v12;
  v14 = *a3;
  if (!v13)
  {
    v14 = *a3;
    v15 = *a3;
    do
    {
      v16 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 >= *v11)
      {
        if (*v11 >= v16)
        {
          *(_DWORD *)v14 = v16;
          v14 += 4;
          v15 += 4;
        }
        ++v11;
        if (v15 == v10)
          break;
      }
      else
      {
        v15 += 4;
        if (v15 == v10)
          break;
      }
    }
    while (v11 != v12);
  }
  if (v14 != v10)
  {
    v10 = v14;
    a3[1] = v14;
  }
  v17 = (unsigned int *)*a4;
  a4[1] = *a4;
  v86 = (unint64_t **)a4;
  if (v9 == v10)
  {
LABEL_53:
    v54 = (unsigned int *)*a4;
    if ((unsigned int *)*a4 == v17)
      return result;
  }
  else
  {
    v18 = v10 - v9;
    v19 = v18 >> 2;
    if (v18 >> 2 > (unint64_t)((uint64_t)(a4[2] - (_QWORD)v17) >> 3))
    {
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_207CA420C();
      v20 = v17;
      v21 = v6;
      v22 = (char *)operator new(2 * v18);
      *a4 = v22;
      a4[1] = v22;
      a4[2] = &v22[8 * v19];
      result = v92;
      v6 = v21;
      if (v20)
      {
        operator delete(v20);
        v6 = v21;
        result = v92;
      }
    }
    v24 = *a3;
    v23 = a3[1];
    if (*a3 != v23)
    {
      v25 = 0;
      v26 = 0;
      v27 = *(_DWORD **)(v6 + 152);
      v28 = *v7;
      v88 = a3[1];
      v29 = *(_DWORD *)v24;
      if (*v27 < *(_DWORD *)v24)
        goto LABEL_27;
      while (1)
      {
        if (*v28 < v29)
        {
          do
          {
            v31 = v28[1];
            ++v28;
            v25 = (v25 + 1);
          }
          while (v31 < v29);
        }
        v33 = (char *)a4[1];
        v32 = a4[2];
        if ((unint64_t)v33 < v32)
        {
          *(_QWORD *)v33 = v26 | (unint64_t)(v25 << 32);
          v17 = (unsigned int *)(v33 + 8);
          a4[1] = v33 + 8;
          v24 += 4;
          if (v24 == v23)
            goto LABEL_53;
          goto LABEL_26;
        }
        v34 = (char *)*a4;
        v35 = (uint64_t)&v33[-*a4];
        v36 = v35 >> 3;
        v37 = (v35 >> 3) + 1;
        if (v37 >> 61)
          sub_207CA420C();
        v38 = v6;
        v39 = v32 - (_QWORD)v34;
        if (v39 >> 2 > v37)
          v37 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        v90 = v37;
        if (v37)
        {
          if (v37 >> 61)
            sub_207CA3AB8();
          v40 = operator new(8 * v37);
        }
        else
        {
          v40 = 0;
        }
        v41 = (unint64_t *)&v40[8 * v36];
        *v41 = v26 | (unint64_t)(v25 << 32);
        v17 = (unsigned int *)(v41 + 1);
        if (v33 != v34)
          break;
        v6 = v38;
        a4 = v86;
        *v86 = v41;
        v86[1] = (unint64_t *)v17;
        v86[2] = (unint64_t *)&v40[8 * v90];
        if (v33)
          goto LABEL_51;
LABEL_52:
        result = v92;
        v23 = v88;
        a4[1] = v17;
        v24 += 4;
        if (v24 == v88)
          goto LABEL_53;
LABEL_26:
        v29 = *(_DWORD *)v24;
        if (*v27 < *(_DWORD *)v24)
        {
          do
          {
LABEL_27:
            v30 = v27[1];
            ++v27;
            ++v26;
          }
          while (v30 < v29);
        }
      }
      v42 = v33 - v34 - 8;
      if (v42 >= 0x58)
      {
        v43 = v33 - v40 - v35;
        v6 = v38;
        a4 = v86;
        if (v43 >= 0x20)
        {
          v44 = (v42 >> 3) + 1;
          v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v33[-v45];
          v41 = (unint64_t *)((char *)v41 - v45);
          v47 = &v40[8 * v36 - 16];
          v48 = v33 - 16;
          v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 4;
          }
          while (v49);
          v33 = v46;
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            v33 = (char *)*a4;
            *a4 = v41;
            a4[1] = v17;
            a4[2] = &v40[8 * v90];
            if (!v33)
              goto LABEL_52;
LABEL_51:
            v52 = v6;
            v53 = v17;
            operator delete(v33);
            v17 = v53;
            v6 = v52;
            goto LABEL_52;
          }
        }
      }
      else
      {
        v6 = v38;
        a4 = v86;
      }
      do
      {
        v51 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v41 = v51;
      }
      while (v33 != v34);
      goto LABEL_50;
    }
    v54 = (unsigned int *)*a4;
    v17 = (unsigned int *)a4[1];
    if ((unsigned int *)*a4 == v17)
      return result;
  }
  v87 = (unint64_t *)(result + 48);
  v84 = v17;
  v85 = v6;
  do
  {
    v56 = (unsigned int *)*a4;
    v55 = (unsigned int *)a4[1];
    if ((unsigned int *)*a4 != v55)
    {
      v57 = (uint64_t *)(*(_QWORD *)(v6 + 120) + 24 * *v54);
      v58 = *(_QWORD *)(result + 120) + 24 * v54[1];
      v59 = *v57;
      v60 = v57[1];
      while (1)
      {
        if (v59 == v60)
          goto LABEL_55;
        v61 = *v56;
        while (*(_DWORD *)v59 != v61)
        {
          if (*(_DWORD *)v59 > v61)
            goto LABEL_83;
          v59 += 16;
          if (v59 == v60)
            goto LABEL_55;
        }
        v62 = v56[1];
        v63 = *(char **)v58;
        v64 = *(char **)(v58 + 8);
        if (*(char **)v58 != v64)
        {
          while (*(_DWORD *)v63 < v62)
          {
            v63 += 16;
            if (v63 == v64)
              goto LABEL_73;
          }
        }
        if (v63 == v64)
          goto LABEL_73;
        if (*(_DWORD *)v63 != v62)
          break;
        v65 = (_DWORD *)(*v87 + 4 * *((_QWORD *)v63 + 1));
        v66 = (_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * *(_QWORD *)(v59 + 8));
        if (v66 != v65)
          goto LABEL_82;
LABEL_83:
        if (v59 != v60)
        {
          v56 += 2;
          if (v56 != v55)
            continue;
        }
        goto LABEL_55;
      }
      v64 = v63;
LABEL_73:
      v67 = *(_QWORD *)(result + 112);
      v89 = *(_QWORD *)(v6 + 48);
      v91 = *(_QWORD *)(v59 + 8);
      if (v67)
      {
        v69 = *(_QWORD *)(result + 80);
        v68 = *(_QWORD *)(result + 88);
        v70 = ((v68 - v69) << 6) - 1;
        v71 = *(_QWORD *)(result + 104);
        if (v68 == v69)
          v70 = 0;
        v65 = (_DWORD *)(*(_QWORD *)(result + 48)
                       + 4
                       * *(_QWORD *)(*(_QWORD *)(v69 + (((unint64_t)(v71 + v67 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v71 + v67 - 1) & 0x1FF)));
        *(_QWORD *)(result + 112) = v67 - 1;
        if ((unint64_t)(v70 - (v67 + v71) + 1) >= 0x400)
        {
          v76 = result;
          v77 = v58;
          operator delete(*(void **)(v68 - 8));
          v58 = v77;
          *(_QWORD *)(v76 + 88) -= 8;
          v72 = v86;
        }
        else
        {
          v72 = (unint64_t **)a4;
        }
        v74 = v87;
      }
      else
      {
        v72 = (unint64_t **)a4;
        v73 = *(void **)(result + 56);
        LODWORD(v93) = 0;
        v74 = v87;
        v75 = v58;
        sub_207D89350(v87, v73, 1uLL, (const float *)&v93);
        v58 = v75;
        v65 = (_DWORD *)(*(_QWORD *)(v92 + 56) - 4);
      }
      v78 = (uint64_t)((uint64_t)v65 - *v74) >> 2;
      LODWORD(v93) = v62;
      *((_QWORD *)&v93 + 1) = v78;
      v79 = v58;
      sub_207D89100((char **)v58, v64, &v93);
      v58 = v79;
      result = v92;
      v17 = v84;
      v6 = v85;
      a4 = v72;
      v66 = (_DWORD *)(v89 + 4 * v91);
      if (v66 == v65)
        goto LABEL_83;
LABEL_82:
      *v65 = *v66;
      goto LABEL_83;
    }
LABEL_55:
    v54 += 2;
  }
  while (v54 != v17);
  v80 = (unsigned int *)*a4;
  v81 = (unsigned int *)a4[1];
  if ((unsigned int *)*a4 != v81)
  {
    do
    {
      v82 = *v80;
      v83 = v80[1];
      v80 += 2;
      *(_DWORD *)(*(_QWORD *)result + 4 * (*(_DWORD *)(result + 28) + v83)) = *(_DWORD *)(*(_QWORD *)v6
                                                                                          + 4
                                                                                          * (*(_DWORD *)(v6 + 28) + v82));
    }
    while (v80 != v81);
  }
  return result;
}

float sub_207D8A71C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  float result;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;

  v28 = 1;
  sub_207D8C3F4(a2, a1 + 152, &v28, (uint64_t)a5);
  v10 = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v10;
  v11 = v10 * (unint64_t)v10;
  v12 = v10;
  if (*(_QWORD *)(a3 + 8) < v11)
  {
    if (*(_QWORD *)a3)
      operator delete[](*(void **)a3);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = ((4 * v11 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
    *(_QWORD *)a3 = MEMORY[0x20BD028B4]();
    v12 = *(_DWORD *)(a3 + 16);
    LODWORD(v10) = *(_DWORD *)(a3 + 20);
  }
  v13 = v12 * v10;
  if (v13)
    bzero(*(void **)a3, 4 * v13);
  v15 = *a5;
  v14 = a5[1];
  if (*a5 == v14)
  {
    v21 = *a5;
    v22 = 0;
    LODWORD(v23) = 0;
    if (!*(_DWORD *)(a4 + 16))
      goto LABEL_29;
    goto LABEL_25;
  }
  do
  {
    v16 = *a5;
    v17 = a5[1];
    if (*a5 != v17)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v15);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v15 + 8);
      do
      {
        if (v19 == v18)
          break;
        v20 = *v16;
        while (*(_DWORD *)v19 < v20)
        {
          v19 += 16;
          if (v19 == v18)
            goto LABEL_9;
        }
        if (*(_DWORD *)v19 == v20)
        {
          result = *(float *)(*(_QWORD *)(a1 + 48) + 4 * *(_QWORD *)(v19 + 8));
          *(float *)(*(_QWORD *)a3 + 4 * (v16[1] + *(_DWORD *)(a3 + 16) * v15[1])) = result;
        }
        if (v19 == v18)
          break;
        v16 += 2;
      }
      while (v16 != v17);
    }
LABEL_9:
    v15 += 2;
  }
  while (v15 != v14);
  v15 = *a5;
  v21 = a5[1];
  v22 = (char *)v21 - (char *)*a5;
  v23 = v22 >> 3;
  if (*(_DWORD *)(a4 + 16) != (v22 >> 3))
  {
LABEL_25:
    *(_DWORD *)(a4 + 16) = v23;
    v24 = (v22 >> 3);
    if (*(_QWORD *)(a4 + 8) < v24)
    {
      if (*(_QWORD *)a4)
      {
        operator delete[](*(void **)a4);
        v15 = *a5;
        v21 = a5[1];
      }
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = ((4 * v24 + 31) & 0x7FFFFFFE0) >> 2;
      *(_QWORD *)a4 = MEMORY[0x20BD028B4]();
    }
  }
LABEL_29:
  if (v15 != v21)
  {
    v25 = *(_DWORD *)(a1 + 28);
    do
    {
      v26 = *v15;
      v27 = v15[1];
      v15 += 2;
      result = *(float *)(*(_QWORD *)a1 + 4 * (v26 + v25));
      *(float *)(*(_QWORD *)a4 + 4 * v27) = result;
    }
    while (v15 != v21);
  }
  return result;
}

void sub_207D8A92C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int **a4)
{
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;

  v18 = 1;
  sub_207D8C3F4(a2, a1 + 152, &v18, (uint64_t)a4);
  v7 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 3;
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v7;
  v8 = v7 * (unint64_t)v7;
  v9 = v7;
  if (*(_QWORD *)(a3 + 8) < v8)
  {
    if (*(_QWORD *)a3)
      operator delete[](*(void **)a3);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = ((4 * v8 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
    *(_QWORD *)a3 = MEMORY[0x20BD028B4]();
    v9 = *(_DWORD *)(a3 + 16);
    LODWORD(v7) = *(_DWORD *)(a3 + 20);
  }
  v10 = v9 * v7;
  if (v10)
    bzero(*(void **)a3, 4 * v10);
  v11 = *a4;
  v12 = a4[1];
  if (*a4 != v12)
  {
    do
    {
      v13 = *a4;
      v14 = a4[1];
      if (*a4 != v14)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v11);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v11 + 8);
        do
        {
          if (v16 == v15)
            break;
          v17 = *v13;
          while (*(_DWORD *)v16 < v17)
          {
            v16 += 16;
            if (v16 == v15)
              goto LABEL_9;
          }
          if (*(_DWORD *)v16 == v17)
            *(_DWORD *)(*(_QWORD *)a3 + 4 * (v13[1] + *(_DWORD *)(a3 + 16) * v11[1])) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * *(_QWORD *)(v16 + 8));
          if (v16 == v15)
            break;
          v13 += 2;
        }
        while (v13 != v14);
      }
LABEL_9:
      v11 += 2;
    }
    while (v11 != v12);
  }
}

BOOL sub_207D8AA88(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  int v30;
  size_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  float32x4_t *v36;
  unint64_t v37;
  float *v38;
  float *v39;
  unint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t *v43;
  uint64_t v44;
  float32x4_t v45;
  float *v46;
  float v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  float *v54;
  unint64_t v55;
  float *v56;
  float *v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t *v62;
  uint64_t v63;
  float32x4_t v64;
  float *v65;
  float v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *__p;
  unint64_t v72;
  int v73;
  int v74;
  _BYTE v75[8];
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v12 = sub_207CC4B4C();
  if (v12)
    return v12 == 0;
  v69 = a6;
  v14 = *(unsigned int *)(a1 + 16);
  v16 = *(unsigned int *)(a3 + 16);
  v15 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v14 == (_DWORD)v16)
  {
    sub_207CC4A30(0, 0, 1, 1, v14, v15, *(float **)a1, v14, 1.0, *(float **)a3, *(_DWORD *)(a1 + 16));
    goto LABEL_12;
  }
  v68 = a5;
  v17 = (void *)MEMORY[0x20BD028B4]();
  v18 = v17;
  v19 = (v15 * v16);
  if (((4 * (v15 * v14) + 31) & 0x7FFFFFFE0uLL) >> 2 >= v19)
  {
    v67 = ((4 * (v15 * v14) + 31) & 0x7FFFFFFE0uLL) >> 2;
    v21 = v15 << 32;
    if (!(_DWORD)v19)
      goto LABEL_10;
    v20 = 4 * v19;
  }
  else
  {
    operator delete[](v17);
    v20 = 4 * v19;
    v18 = (void *)MEMORY[0x20BD028B4]((v20 + 31) & 0x7FFFFFFE0, 32);
    v67 = ((v20 + 31) & 0x7FFFFFFE0) >> 2;
    v16 = *(unsigned int *)(a3 + 16);
    v15 = *(unsigned int *)(a3 + 20);
    LODWORD(v14) = *(_DWORD *)(a1 + 16);
    v21 = v15 << 32;
  }
  memcpy(v18, *(const void **)a3, v20);
LABEL_10:
  sub_207CC4A30(0, 0, 1, 1, v16, v15, *(float **)a1, v14, 1.0, (float *)v18, v16);
  v12 = 0;
  v22 = *(float **)a3;
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v67;
  *(_DWORD *)(a3 + 16) = v16 | v21;
  *(_DWORD *)(a3 + 20) = HIDWORD(v21);
  a5 = v68;
  if (v22)
    operator delete[](v22);
LABEL_12:
  if ((a4 & 1) != 0)
    goto LABEL_39;
  v23 = *(unsigned int *)(a1 + 16);
  v24 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v23 == (_DWORD)v24)
  {
    sub_207CC4ACC(0, 1, 1, *(_DWORD *)(a1 + 16), *(const float **)a1, *(_DWORD *)(a1 + 16), *(float **)a2, 1);
    v25 = v69;
    goto LABEL_22;
  }
  v26 = a5;
  v27 = ((4 * v23 + 31) & 0x7FFFFFFE0uLL) >> 2;
  v28 = (void *)MEMORY[0x20BD028B4]();
  v29 = v28;
  if (v27 >= v24)
  {
    if (!(_DWORD)v24)
      goto LABEL_20;
    v30 = v12;
    v31 = 4 * v24;
  }
  else
  {
    v30 = v12;
    operator delete[](v28);
    v31 = 4 * v24;
    v29 = (void *)MEMORY[0x20BD028B4]((4 * v24 + 31) & 0x7FFFFFFE0, 32);
    v27 = ((4 * v24 + 31) & 0x7FFFFFFE0) >> 2;
    LODWORD(v24) = *(_DWORD *)(a2 + 16);
    LODWORD(v23) = *(_DWORD *)(a1 + 16);
  }
  memcpy(v29, *(const void **)a2, v31);
  v12 = v30;
LABEL_20:
  sub_207CC4ACC(0, 1, 1, v24, *(const float **)a1, v23, (float *)v29, 1);
  v32 = *(float **)a2;
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = v27;
  *(_DWORD *)(a2 + 16) = v24;
  a5 = v26;
  v25 = v69;
  if (v32)
    operator delete[](v32);
LABEL_22:
  v70 = a3;
  v76 = &v70;
  v77 = a2;
  v78 = 1065353216;
  if (*(_QWORD *)a3 != *(_QWORD *)v25 && *(_QWORD *)a2 != *(_QWORD *)v25)
  {
    if (*(_DWORD *)(a3 + 16) * *(_DWORD *)(a3 + 20) && *(_DWORD *)(a2 + 16))
      sub_207CC49DC();
    goto LABEL_39;
  }
  v33 = *(unsigned int *)(a3 + 20);
  v72 = ((4 * v33 + 31) & 0x7FFFFFFE0uLL) >> 2;
  __p = (void *)MEMORY[0x20BD028B4]();
  v73 = v33;
  sub_207D8CFA0((uint64_t)&__p, (uint64_t)v75);
  v34 = *(unsigned int *)(v25 + 16);
  v35 = __p;
  if ((_DWORD)v34)
  {
    v36 = *(float32x4_t **)v25;
    v37 = (v34 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v37 < 0xB)
    {
      v38 = (float *)__p;
      v39 = *(float **)v25;
LABEL_35:
      v46 = &v36->f32[v34];
      do
      {
        v47 = *v38++;
        *v39 = *v39 - v47;
        ++v39;
      }
      while (v39 != v46);
      goto LABEL_37;
    }
    if (v36 < (float32x4_t *)((char *)__p + 4 * v34))
    {
      v38 = (float *)__p;
      v39 = *(float **)v25;
      if (__p < &v36->f32[v34])
        goto LABEL_35;
    }
    v40 = v37 + 1;
    v41 = v40 & 0x7FFFFFFFFFFFFFF8;
    v38 = (float *)((char *)__p + v41 * 4);
    v39 = &v36->f32[v41];
    v42 = v36 + 1;
    v43 = (float32x4_t *)((char *)__p + 16);
    v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = vsubq_f32(*v42, *v43);
      v42[-1] = vsubq_f32(v42[-1], v43[-1]);
      *v42 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_35;
  }
LABEL_37:
  if (v35)
    operator delete[](v35);
LABEL_39:
  v70 = a3;
  v76 = &v70;
  v77 = a3;
  v78 = 1065353216;
  if (*(_QWORD *)a3 != *(_QWORD *)a5)
  {
    v49 = *(_DWORD *)(a3 + 16);
    v48 = *(_DWORD *)(a3 + 20);
    if (v49 * v48)
      sub_207CC4964(1, 0, v48, v48, v49, *(const float **)a3, v49, *(float **)a3, -1.0, 1.0, v49, *(float **)a5, *(_DWORD *)(a5 + 16));
    return v12 == 0;
  }
  v50 = *(_DWORD *)(a3 + 20);
  v51 = (4 * (v50 * v50) + 31) & 0x7FFFFFFE0;
  v72 = v51 >> 2;
  __p = (void *)MEMORY[0x20BD028B4](v51);
  v73 = v50;
  v74 = v50;
  sub_207D8D0CC((uint64_t)&__p, (uint64_t)v75);
  v52 = (*(_DWORD *)(a5 + 20) * *(_DWORD *)(a5 + 16));
  v53 = __p;
  if ((_DWORD)v52)
  {
    v54 = *(float **)a5;
    v55 = (v52 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v55 < 0xB)
    {
      v56 = (float *)__p;
      v57 = *(float **)a5;
LABEL_53:
      v65 = &v54[v52];
      do
      {
        v66 = *v56++;
        *v57 = *v57 - v66;
        ++v57;
      }
      while (v57 != v65);
      goto LABEL_55;
    }
    v58 = v54 >= (float *)((char *)__p + 4 * v52) || __p >= &v54[v52];
    v56 = (float *)__p;
    v57 = *(float **)a5;
    if (!v58)
      goto LABEL_53;
    v59 = v55 + 1;
    v60 = v59 & 0x7FFFFFFFFFFFFFF8;
    v56 = (float *)((char *)__p + v60 * 4);
    v57 = &v54[v60];
    v61 = (float32x4_t *)(v54 + 4);
    v62 = (float32x4_t *)((char *)__p + 16);
    v63 = v59 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v64 = vsubq_f32(*v61, *v62);
      v61[-1] = vsubq_f32(v61[-1], v62[-1]);
      *v61 = v64;
      v61 += 2;
      v62 += 2;
      v63 -= 8;
    }
    while (v63);
    if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_53;
  }
LABEL_55:
  if (v53)
    operator delete[](v53);
  return v12 == 0;
}

void sub_207D8B020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_207D8B034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  if (__p)
  {
    operator delete[](__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D8B07C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  char *v18;
  const void *v19;
  char *v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  char *v47;
  int v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  char *v53;
  char *v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;

  v3 = *(void **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = (_DWORD *)*a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a3;
    v9 = v5 - (_QWORD)v4;
    v10 = (v5 - (uint64_t)v4) >> 2;
    if (v10 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v3) >> 2)
    {
      if ((v9 & 0x8000000000000000) != 0)
        sub_207CA420C();
      v11 = (char *)operator new(v9);
      *(_QWORD *)v6 = v11;
      *(_QWORD *)(v6 + 8) = v11;
      *(_QWORD *)(v6 + 16) = &v11[4 * v10];
      if (v3)
        operator delete(v3);
    }
    v12 = *(_DWORD **)(a1 + 152);
    v13 = *(_DWORD **)(a1 + 160);
    v15 = (_DWORD *)*a2;
    v14 = (_DWORD *)a2[1];
    if (v12 == v13)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      while (*v12 < *v15)
      {
        ++v12;
        ++v16;
        if (v12 == v13)
          goto LABEL_45;
      }
    }
    if (v15 != v14 && v12 != v13)
    {
      v58 = (_DWORD *)a2[1];
      v59 = v6;
      while (1)
      {
        if (*v15 != *v12)
        {
          ++v12;
          if (++v15 == v14)
            goto LABEL_45;
          goto LABEL_22;
        }
        v18 = *(char **)(v6 + 8);
        v17 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v18 < v17)
        {
          *(_DWORD *)v18 = v16;
          *(_QWORD *)(v6 + 8) = v18 + 4;
          v19 = v12 + 1;
          v20 = *(char **)(a1 + 160);
          v21 = v20 - (char *)(v12 + 1);
          if (v20 == (char *)(v12 + 1))
            goto LABEL_19;
LABEL_18:
          memmove(v12, v19, v21);
          goto LABEL_19;
        }
        v22 = (void **)v6;
        v23 = a1;
        v24 = (char *)*v22;
        v25 = v18 - (_BYTE *)*v22;
        v26 = v25 >> 2;
        v27 = (v25 >> 2) + 1;
        if (v27 >> 62)
          sub_207CA420C();
        v28 = v17 - (_QWORD)v24;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        v60 = v27;
        if (v27)
        {
          if (v27 >> 62)
            sub_207CA3AB8();
          v29 = operator new(4 * v27);
          v30 = &v29[4 * v26];
          *v30 = v16;
          v31 = (uint64_t)(v30 + 1);
          v32 = v18 - v24;
          if (v18 == v24)
          {
LABEL_35:
            a1 = v23;
            v6 = v59;
            goto LABEL_41;
          }
        }
        else
        {
          v29 = 0;
          v30 = (_DWORD *)(4 * v26);
          *(_DWORD *)(4 * v26) = v16;
          v31 = 4 * v26 + 4;
          v32 = v18 - v24;
          if (v18 == v24)
            goto LABEL_35;
        }
        v33 = v32 - 4;
        if (v33 < 0x2C)
          break;
        v34 = v18 - &v29[v25];
        a1 = v23;
        v6 = v59;
        if (v34 < 0x20)
          goto LABEL_40;
        v35 = (v33 >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v37 = &v18[-v36];
        v30 = (_DWORD *)((char *)v30 - v36);
        v38 = &v29[4 * v26 - 16];
        v39 = v18 - 16;
        v40 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        v18 = v37;
        if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_40;
LABEL_41:
        *(_QWORD *)v6 = v30;
        *(_QWORD *)(v6 + 8) = v31;
        *(_QWORD *)(v6 + 16) = &v29[4 * v60];
        if (v24)
          operator delete(v24);
        v14 = v58;
        *(_QWORD *)(v6 + 8) = v31;
        v19 = v12 + 1;
        v43 = *(char **)(a1 + 160);
        v21 = v43 - (char *)(v12 + 1);
        if (v43 != (char *)(v12 + 1))
          goto LABEL_18;
LABEL_19:
        *(_QWORD *)(a1 + 160) = (char *)v12 + v21;
        --v13;
        if (++v15 == v14)
          goto LABEL_45;
LABEL_22:
        ++v16;
        if (v12 == v13)
          goto LABEL_45;
      }
      a1 = v23;
      v6 = v59;
      do
      {
LABEL_40:
        v42 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v30 = v42;
      }
      while (v18 != v24);
      goto LABEL_41;
    }
LABEL_45:
    v44 = *(unsigned int **)(v6 + 8);
    if (*(unsigned int **)v6 != v44)
    {
      sub_207D8D208(a1 + 32, *(unsigned int **)v6, v44);
      sub_207D8D3AC(a1 + 32, *(_QWORD *)v6, *(_QWORD *)(v6 + 8));
      v45 = *(unsigned int **)v6;
      v46 = *(unsigned int **)(v6 + 8);
      if (*(unsigned int **)v6 == v46)
      {
        LODWORD(v56) = 0;
      }
      else
      {
        v47 = *(char **)a1;
        v48 = *(_DWORD *)(a1 + 28);
        v49 = *(char **)a1;
        v50 = *(char **)a1;
        v51 = *(char **)a1;
        do
        {
          while (1)
          {
            v52 = *v45 + v48;
            v53 = &v47[4 * v52];
            if (v50 != v53)
              break;
            v50 += 4;
            if (++v45 == v46)
              goto LABEL_53;
          }
          v54 = &v47[4 * v52];
          if (v49 != v50)
          {
            v55 = v53 - v50;
            memmove(v51, v50, v53 - v50);
            v54 = &v51[v55];
            v47 = *(char **)a1;
          }
          v50 = &v47[4 * (v52 + 1)];
          v51 = v54;
          v49 = v53;
          ++v45;
        }
        while (v45 != v46);
LABEL_53:
        v56 = (*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2;
        *(_DWORD *)(a1 + 24) -= v56;
        if (v49 != v50)
        {
          v57 = &v47[4 * *(unsigned int *)(a1 + 16)];
          if (v57 != v50)
            memmove(v51, v50, v57 - v50);
        }
      }
      sub_207D8BBF8(a1, *(_DWORD *)(a1 + 16) - v56);
    }
  }
}

void sub_207D8B464(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = *(char **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      *(_QWORD *)(a1 + 8) = v7;
      return;
    }
    v8 = *(char **)a1;
    v9 = (uint64_t)&v6[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      sub_207CA420C();
    v12 = v5 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        sub_207CA3AB8();
      v14 = operator new(4 * v13);
      v15 = &v14[4 * v10];
      v16 = &v14[4 * v13];
      *v15 = v4;
      v7 = (uint64_t)(v15 + 1);
      v17 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v14 = 0;
      v15 = (_DWORD *)(4 * v10);
      v16 = 0;
      *(_DWORD *)(4 * v10) = v4;
      v7 = 4 * v10 + 4;
      v17 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v16;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v18 = v17 - 4;
    if (v18 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v6 - &v14[v9]) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v21 = &v6[-v20];
    v15 = (_DWORD *)((char *)v15 - v20);
    v22 = &v14[4 * v10 - 16];
    v23 = v6 - 16;
    v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    v6 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v26 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v15 = v26;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

__n128 sub_207D8B5FC(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  __n128 *v16;
  uint64_t v17;
  char *v18;
  __n128 *v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  __n128 *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  __n128 *v27;
  char *v28;
  uint64_t v29;
  __int32 v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unsigned __int32 v36;
  __n128 *v37;
  unsigned __int32 v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 *v43;
  int v44;
  __int32 v45;
  __n128 *v46;
  __n128 *v47;
  __n128 *v48;
  uint64_t v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __n128 *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  __n128 *v58;
  __n128 result;
  __n128 *v60;
  __n128 *v61;
  __n128 *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __n128 *v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  __n128 *v74;
  __n128 *v75;
  uint64_t v76;
  __n128 v77;
  unint64_t v78;
  char *v79;
  __n128 *v80;
  uint64_t v81;
  uint64_t v82;
  __n128 *v83;
  __n128 *v84;
  uint64_t v85;
  __n128 v86;
  unsigned __int32 v87;
  unsigned __int32 v88;
  _BOOL4 v89;
  unsigned __int32 v90;
  __n128 *v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unint64_t v95;
  __n128 *v96;
  char *v97;
  unsigned __int32 *v98;
  unsigned __int32 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  unsigned __int32 v105;
  unsigned __int32 v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;

  if (!a5)
    return result;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    v12 = 0;
    v13 = a2->n128_u32[0];
    v14 = -a4;
    while (1)
    {
      v15 = a1->n128_u32[v12 / 4];
      if (v13 < v15)
        break;
      --a4;
      v12 += 4;
      v94 = __CFADD__(v14++, 1);
      if (v94)
        return result;
    }
    v16 = (__n128 *)((char *)a1 + v12);
    if (-v14 >= v7)
    {
      if (v14 == -1)
      {
        a1->n128_u32[v12 / 4] = v13;
        a2->n128_u32[0] = v15;
        return result;
      }
      v19 = (__n128 *)((char *)a1 + 4 * ((unint64_t)a4 >> 1) + v12);
      v18 = (char *)a2;
      if (a2 != a3)
      {
        v32 = ((char *)a3 - (char *)a2) >> 2;
        v18 = (char *)a2;
        do
        {
          v33 = v32 >> 1;
          v34 = &v18[4 * (v32 >> 1)];
          v36 = *(_DWORD *)v34;
          v35 = v34 + 4;
          v32 += ~(v32 >> 1);
          if (v36 < v19->n128_u32[0])
            v18 = v35;
          else
            v32 = v33;
        }
        while (v32);
      }
      v25 = (unint64_t)-v14 >> 1;
      v17 = (v18 - (char *)a2) >> 2;
      if (v19 != a2)
      {
LABEL_18:
        v26 = v18 - (char *)a2;
        if (v18 == (char *)a2)
        {
          a2 = v19;
        }
        else
        {
          v27 = (__n128 *)&v19->n128_u8[4];
          if (&v19->n128_u8[4] == (unsigned __int8 *)a2)
          {
            v105 = v19->n128_u32[0];
            v109 = a6;
            v111 = a7;
            v37 = a3;
            v107 = v17;
            memmove(v19, a2, v18 - (char *)a2);
            v17 = v107;
            a6 = v109;
            v16 = (__n128 *)((char *)a1 + v12);
            a7 = v111;
            a3 = v37;
            a2 = (__n128 *)((char *)v19 + v26);
            *(unsigned __int32 *)((char *)v19->n128_u32 + v26) = v105;
          }
          else
          {
            v28 = &a2->n128_i8[4];
            if (&a2->n128_u8[4] == (unsigned __int8 *)v18)
            {
              v38 = *((_DWORD *)v18 - 1);
              a2 = (__n128 *)&v19->n128_u8[4];
              if (v18 - 4 != (char *)v19)
              {
                v110 = a6;
                v112 = a7;
                v39 = a3;
                v108 = v17;
                v106 = *((_DWORD *)v18 - 1);
                memmove(&v19->n128_u8[4], v19, v18 - 4 - (char *)v19);
                v38 = v106;
                v17 = v108;
                a6 = v110;
                v16 = (__n128 *)((char *)a1 + v12);
                a7 = v112;
                a3 = v39;
              }
              v19->n128_u32[0] = v38;
            }
            else
            {
              v29 = ((char *)a2 - (char *)v19) >> 2;
              if (v29 == v26 >> 2)
              {
                do
                {
                  v30 = v27[-1].n128_i32[3];
                  v27[-1].n128_u32[3] = *((_DWORD *)v28 - 1);
                  *((_DWORD *)v28 - 1) = v30;
                  if (v27 == a2)
                    break;
                  v27 = (__n128 *)((char *)v27 + 4);
                  v31 = v28 == v18;
                  v28 += 4;
                }
                while (!v31);
              }
              else
              {
                v40 = v26 >> 2;
                v41 = ((char *)a2 - (char *)v19) >> 2;
                do
                {
                  v42 = v41;
                  v41 = v40;
                  v40 = v42 % v40;
                }
                while (v40);
                if (v41)
                {
                  v43 = (__n128 *)((char *)v19 + 4 * v41);
                  do
                  {
                    v45 = v43[-1].n128_i32[3];
                    v43 = (__n128 *)((char *)v43 - 4);
                    v44 = v45;
                    v46 = (__n128 *)((char *)v43 + 4 * v29);
                    v47 = v43;
                    do
                    {
                      v48 = v46;
                      v47->n128_u32[0] = v46->n128_u32[0];
                      v49 = (v18 - (char *)v46) >> 2;
                      v50 = __OFSUB__(v29, v49);
                      v52 = v29 - v49;
                      v51 = (v52 < 0) ^ v50;
                      v46 = (__n128 *)((char *)v19 + 4 * v52);
                      if (v51)
                        v46 = (__n128 *)((char *)v48 + 4 * v29);
                      v47 = v48;
                    }
                    while (v46 != v43);
                    v48->n128_u32[0] = v44;
                  }
                  while (v43 != v19);
                }
                a2 = (__n128 *)((char *)v19 + 4 * (v26 >> 2));
              }
            }
          }
        }
        goto LABEL_50;
      }
    }
    else
    {
      v17 = (unint64_t)v7 >> 1;
      v18 = (char *)a2 + 4 * ((unint64_t)v7 >> 1);
      v19 = a2;
      if ((char *)a2 - (char *)a1 != v12)
      {
        v20 = (uint64_t)((char *)a2 - (char *)a1 - v12) >> 2;
        v19 = (__n128 *)((char *)a1 + v12);
        do
        {
          v21 = v20 >> 1;
          v22 = (_DWORD *)v19 + (v20 >> 1);
          v24 = *v22;
          v23 = (__n128 *)(v22 + 1);
          v20 += ~(v20 >> 1);
          if (*(_DWORD *)v18 < v24)
            v20 = v21;
          else
            v19 = v23;
        }
        while (v20);
      }
      v25 = (uint64_t)((char *)v19 - (char *)a1 - v12) >> 2;
      if (v19 != a2)
        goto LABEL_18;
    }
    a2 = (__n128 *)v18;
LABEL_50:
    a4 = -(uint64_t)(v25 + v14);
    v53 = v7 - v17;
    if ((uint64_t)(v25 + v17) >= (uint64_t)(v7 - (v25 + v17) - v14))
    {
      v61 = a2;
      v62 = a2;
      v63 = v18;
      v64 = v17;
      v65 = a6;
      v66 = a7;
      v67 = v16;
      sub_207D8B5FC(v62, v63, a3, -(uint64_t)(v25 + v14), v53);
      a7 = v66;
      a6 = v65;
      a2 = v19;
      a4 = v25;
      a3 = v61;
      v7 = v64;
      a1 = v67;
      if (!v64)
        return result;
    }
    else
    {
      v54 = (__n128 *)((char *)a1 + v12);
      v55 = v25;
      v56 = a6;
      v57 = a7;
      v58 = a3;
      sub_207D8B5FC(v54, v19, a2, v55, v17);
      a7 = v57;
      a3 = v58;
      a6 = v56;
      v60 = a2;
      a2 = (__n128 *)v18;
      v7 = v53;
      a1 = v60;
      if (!v53)
        return result;
    }
  }
  if (a4 <= v7)
  {
    if (a1 != a2)
    {
      v78 = (char *)a2 - (char *)a1 - 4;
      v79 = a6;
      v80 = a1;
      if (v78 < 0x1C)
        goto LABEL_101;
      v79 = a6;
      v80 = a1;
      if ((unint64_t)(a6 - (char *)a1) < 0x20)
        goto LABEL_101;
      v81 = (v78 >> 2) + 1;
      v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
      v79 = &a6[v82];
      v80 = (__n128 *)((char *)a1 + v82);
      v83 = a1 + 1;
      v84 = (__n128 *)(a6 + 16);
      v85 = v81 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        result = v83[-1];
        v86 = *v83;
        v84[-1] = result;
        *v84 = v86;
        v83 += 2;
        v84 += 2;
        v85 -= 8;
      }
      while (v85);
      if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_101:
        do
        {
          v87 = v80->n128_u32[0];
          v80 = (__n128 *)((char *)v80 + 4);
          *(_DWORD *)v79 = v87;
          v79 += 4;
        }
        while (v80 != a2);
      }
      if (v79 != a6)
      {
        while (a2 != a3)
        {
          v88 = a2->n128_u32[0];
          v89 = a2->n128_u32[0] >= *(_DWORD *)a6;
          if (a2->n128_u32[0] >= *(_DWORD *)a6)
            v88 = *(_DWORD *)a6;
          a2 = (__n128 *)((char *)a2 + 4 * (a2->n128_u32[0] < *(_DWORD *)a6));
          a6 += 4 * v89;
          a1->n128_u32[0] = v88;
          a1 = (__n128 *)((char *)a1 + 4);
          if (a6 == v79)
            return result;
        }
        memmove(a1, a6, v79 - a6);
      }
    }
    return result;
  }
  v68 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v69 = v68 - 4;
  if ((unint64_t)(v68 - 4) < 0x1C)
  {
    v70 = a6;
    v71 = a2;
    do
    {
LABEL_79:
      v90 = v71->n128_u32[0];
      v71 = (__n128 *)((char *)v71 + 4);
      *(_DWORD *)v70 = v90;
      v70 += 4;
    }
    while (v71 != a3);
    goto LABEL_80;
  }
  v70 = a6;
  v71 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20)
    goto LABEL_79;
  v72 = (v69 >> 2) + 1;
  v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
  v70 = &a6[v73];
  v71 = (__n128 *)((char *)a2 + v73);
  v74 = a2 + 1;
  v75 = (__n128 *)(a6 + 16);
  v76 = v72 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    result = v74[-1];
    v77 = *v74;
    v75[-1] = result;
    *v75 = v77;
    v74 += 2;
    v75 += 2;
    v76 -= 8;
  }
  while (v76);
  if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_79;
LABEL_80:
  if (v70 != a6)
  {
    v91 = a3;
    while (a2 != a1)
    {
      v92 = *((_DWORD *)v70 - 1);
      v93 = a2[-1].n128_u32[3];
      v94 = v92 >= v93;
      if (v92 <= v93)
        v92 = a2[-1].n128_u32[3];
      if (v94)
        v70 -= 4;
      else
        a2 = (__n128 *)((char *)a2 - 4);
      a3[-1].n128_u32[3] = v92;
      a3 = (__n128 *)((char *)a3 - 4);
      v91 = (__n128 *)((char *)v91 - 4);
      if (v70 == a6)
        return result;
    }
    v95 = v70 - a6 - 4;
    if (v95 < 0x2C || (unint64_t)(v70 - (char *)v91) < 0x20)
    {
      v96 = a3;
      v97 = v70;
      goto LABEL_93;
    }
    v100 = 0;
    v101 = (v95 >> 2) + 1;
    v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
    v96 = (__n128 *)((char *)a3 - v102);
    v97 = &v70[-v102];
    v103 = v101 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      result = *(__n128 *)&v70[v100 * 16 - 16];
      v104 = &a3[v100];
      v104[-2] = *(__n128 *)&v70[v100 * 16 - 32];
      v104[-1] = result;
      v100 -= 2;
      v103 -= 8;
    }
    while (v103);
    if (v101 != (v101 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_93:
      v98 = &v96[-1].n128_u32[3];
      do
      {
        v99 = *((_DWORD *)v97 - 1);
        v97 -= 4;
        *v98-- = v99;
      }
      while (v97 != a6);
    }
  }
  return result;
}

void sub_207D8BBF8(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  void *v5;
  const void *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;

  if (*(_QWORD *)(a1 + 8) >= (unint64_t)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    return;
  }
  v4 = (4 * a2 + 31) & 0x7FFFFFFE0;
  v5 = (void *)MEMORY[0x20BD028B4](v4, 32);
  v6 = v5;
  if (*(_DWORD *)(a1 + 16) >= a2)
    v7 = a2;
  else
    v7 = *(_DWORD *)(a1 + 16);
  v8 = *(void **)a1;
  if (*(void **)a1 != v5)
  {
    if (v7)
      memmove(v5, *(const void **)a1, 4 * v7);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v4 >> 2;
    *(_DWORD *)(a1 + 16) = a2;
    if (!v8)
      return;
LABEL_14:
    operator delete[](v8);
    return;
  }
  v9 = (void *)MEMORY[0x20BD028B4]((4 * v7 + 31) & 0x7FFFFFFE0, 32);
  v10 = v9;
  if (v7)
    memcpy(v9, v6, 4 * v7);
  operator delete[](v10);
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v4 >> 2;
  *(_DWORD *)(a1 + 16) = a2;
  if (v8)
    goto LABEL_14;
}

void sub_207D8BD18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_207D8BD2C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_207CA3AB8();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_207CA3AB8();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_207CA3AB8();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_207D8C394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D8C3B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D8C3C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D8C3DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D8C3F4(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t v42;

  v4 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - (_QWORD)v4) >> 3))
    {
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_35:
        sub_207CA420C();
      v12 = (char *)operator new(2 * v10);
      *(_QWORD *)a4 = v12;
      *(_QWORD *)(a4 + 8) = v12;
      *(_QWORD *)(a4 + 16) = &v12[8 * v11];
      if (v4)
        operator delete(v4);
    }
    v14 = *(_DWORD **)a2;
    v13 = *(_DWORD **)(a2 + 8);
    if (*(_DWORD **)a2 != v13)
    {
      v15 = 0;
      v16 = 0;
      v18 = (_DWORD *)*a1;
      v17 = (_DWORD *)a1[1];
      v40 = v17;
      v41 = *(_DWORD **)(a2 + 8);
      do
      {
        if (*v14 == *v18)
        {
          v20 = *(char **)(a4 + 8);
          v19 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v20 >= v19)
          {
            v21 = *(char **)a4;
            v22 = (uint64_t)&v20[-*(_QWORD *)a4];
            v23 = v22 >> 3;
            v24 = (v22 >> 3) + 1;
            if (v24 >> 61)
              goto LABEL_35;
            v25 = v19 - (_QWORD)v21;
            if (v25 >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            v42 = v24;
            if (v24)
            {
              if (v24 >> 61)
                sub_207CA3AB8();
              v26 = v16;
              v27 = operator new(8 * v24);
              v16 = v26;
            }
            else
            {
              v27 = 0;
            }
            v28 = (unint64_t *)&v27[8 * v23];
            *v28 = v15 | (unint64_t)(v16 << 32);
            v29 = v28 + 1;
            if (v20 != v21)
            {
              v30 = v20 - v21 - 8;
              if (v30 < 0x58)
                goto LABEL_39;
              if ((unint64_t)(v20 - &v27[v22]) < 0x20)
                goto LABEL_39;
              v31 = (v30 >> 3) + 1;
              v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
              v33 = &v20[-v32];
              v28 = (unint64_t *)((char *)v28 - v32);
              v34 = &v27[8 * v23 - 16];
              v35 = v20 - 16;
              v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v37 = *(_OWORD *)v35;
                *(v34 - 1) = *((_OWORD *)v35 - 1);
                *v34 = v37;
                v34 -= 2;
                v35 -= 32;
                v36 -= 4;
              }
              while (v36);
              v20 = v33;
              if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_39:
                do
                {
                  v38 = *((_QWORD *)v20 - 1);
                  v20 -= 8;
                  *--v28 = v38;
                }
                while (v20 != v21);
              }
              v20 = *(char **)a4;
            }
            *(_QWORD *)a4 = v28;
            *(_QWORD *)(a4 + 8) = v29;
            *(_QWORD *)(a4 + 16) = &v27[8 * v42];
            if (v20)
            {
              v39 = v16;
              operator delete(v20);
              LODWORD(v16) = v39;
            }
            v17 = v40;
            v13 = v41;
            *(_QWORD *)(a4 + 8) = v29;
            if (++v18 == v40)
              return;
          }
          else
          {
            *(_QWORD *)v20 = v15 | (unint64_t)(v16 << 32);
            *(_QWORD *)(a4 + 8) = v20 + 8;
            if (++v18 == v17)
              return;
          }
          v16 = (*a3 + v16);
        }
        ++v14;
        ++v15;
      }
      while (v14 != v13);
    }
  }
}

void sub_207D8C65C(uint64_t a1, uint64_t *a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  float32x4_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  int32x4_t v54;
  int32x4_t v55;
  unsigned int v56;
  unint64_t v57;
  __int32 *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  int v66;
  int v67;
  unsigned int v68;
  int32x4_t v69;
  int32x4_t v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int32x4_t *v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t *v79;
  int32x4_t v80;
  int32x4_t v81;
  __int8 *v82;
  int32x4_t *v83;
  __int128 v84;
  __int128 v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t *v88;
  int32x4_t v89;
  int32x4_t v90;
  __int8 *v91;
  __int128 v92;
  __int128 v93;
  __int8 *v94;
  __int128 v95;
  __int8 *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int32x4_t v102;
  __int128 v103;
  __int128 v104;
  _OWORD *v105;
  __int128 v106;
  _OWORD *v107;
  _OWORD *v108;
  int32x4_t *v109;
  int32x4_t *v110;
  _OWORD *v111;
  _OWORD *v112;
  int32x4_t *v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int v125;
  int v126;
  unsigned int v127;
  unint64_t v128;
  int32x4_t v129;
  int32x4_t v130;
  unsigned int v131;
  unint64_t v132;
  __int32 *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  int v141;
  int v142;
  unsigned int v143;
  int32x4_t v144;
  int32x4_t v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  float *v151;
  float *v152;
  BOOL v153;
  unint64_t v154;
  uint64_t v155;
  float32x4_t *v156;
  float32x4_t *v157;
  uint64_t v158;
  float32x4_t v159;
  float *v160;
  float v161;
  uint64_t v162;
  uint64_t *v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;

  v4 = *(float **)a1;
  v5 = *a2;
  if (*a2 == *(_QWORD *)a1)
  {
    v15 = *((_DWORD *)a2 + 4);
    v14 = *((unsigned int *)a2 + 5);
    v16 = (float32x4_t *)MEMORY[0x20BD028B4]((4 * v15 * v14 + 31) & 0x7FFFFFFE0, 32);
    v17 = v15 * (unint64_t)v14;
    v162 = a1;
    v163 = a2;
    if (v17 > ((4 * v15 * v14 + 31) & 0x7FFFFFFE0uLL) >> 2)
    {
      operator delete[](v16);
      v16 = (float32x4_t *)MEMORY[0x20BD028B4]((4 * v17 + 31) & 0xFFFFFFFFFFFFFFE0, 32);
    }
    if (v15)
    {
      v18 = 0;
      v19 = 0;
      v20 = v14 & 7;
      v167 = v14 & 0xFFFFFFF8;
      v169 = 2 * v20;
      v168 = -2 * v20;
      v21 = 2 * v14;
      v22 = 3 * v14;
      v23 = v14;
      v24 = 5 * v14;
      v25 = 6 * v14;
      v26.i64[0] = -1;
      v26.i64[1] = -1;
      v27 = v15;
      v164 = v15;
      while (1)
      {
        v28 = v27 <= 1 ? 1 : v27;
        v165 = v19 + 8;
        v166 = v27;
        if (v19 + 8 <= v15 || v15 - v19 == 8)
          break;
        if ((_DWORD)v14)
        {
          v29 = 0;
          v30 = *v163;
          v31 = *((_DWORD *)v163 + 4);
          while (1)
          {
            v32 = v25;
            v33 = v29 + 8;
            v34 = v29 + 8 <= v14 ? 8 : v14 - v29;
            if (v34)
              break;
LABEL_20:
            v29 += 8;
            v153 = v33 >= v14;
            v25 = v32;
            if (v153)
              goto LABEL_12;
          }
          v35 = 0;
          v36 = 0;
          if (v34 >= 0)
            v37 = v34;
          else
            v37 = -v34;
          v38 = 2 * v34;
          v39 = -2 * v34;
          while (1)
          {
            v43 = HIDWORD(v36);
            if (v37 >> 4 >= 0x271)
            {
              v46 = v34 + v36 + v34 * HIDWORD(v36);
              v47 = (v46 / v34);
              v48 = (v46 % v34);
              v45 = v48 | (v47 << 32);
              v49 = (v48 + v34) | ((unint64_t)(v47 - 1) << 32);
              if ((int)v48 < 0)
                v45 = v49;
              goto LABEL_53;
            }
            v44 = (v34 + v36);
            if (v34 + (int)v36 >= 0)
            {
              v45 = v36 & 0xFFFFFFFF00000000 | v44;
              if ((int)v44 >= v34)
                goto LABEL_50;
              goto LABEL_53;
            }
            v50 = v39 + ((v38 + v36) & ~((v38 + (int)v36) >> 31));
            v51 = v50 == (_DWORD)v36 ? 1 : 2;
            v52 = v51 + (v50 - (v50 != (_DWORD)v36) - v36) / v34;
            if (v52 < 8)
              break;
            LODWORD(v44) = v44 + (v52 & 0xFFFFFFF8) * v34;
            v54 = 0uLL;
            v55 = (int32x4_t)HIDWORD(v36);
            v56 = v52 & 0xFFFFFFF8;
            do
            {
              v55 = vaddq_s32(v55, v26);
              v54 = vaddq_s32(v54, v26);
              v56 -= 8;
            }
            while (v56);
            v53 = vaddvq_s32(vaddq_s32(v54, v55));
            if (v52 != (v52 & 0xFFFFFFF8))
              goto LABEL_48;
LABEL_49:
            v45 = v44 | (v53 << 32);
            if ((int)v44 >= v34)
            {
LABEL_50:
              v57 = HIDWORD(v45);
              do
              {
                v44 = (v44 - v34);
                v57 = (v57 + 1);
              }
              while ((int)v44 >= v34);
              v45 = v44 | (v57 << 32);
            }
LABEL_53:
            if ((_DWORD)v36 != (_DWORD)v45 || HIDWORD(v36) != HIDWORD(v45))
            {
              v59 = &v16->i32[(v29 + (v19 + v35) * v14)];
              LODWORD(v60) = v36;
              v61 = v36;
              do
              {
                *v59++ = *(_DWORD *)(v30
                                   + 4 * (v19 + v31 * v29)
                                   + 4 * (HIDWORD(v61) + v60 * v31));
                v62 = (v60 + 1);
                v63 = v61 & 0xFFFFFFFF00000000;
                v64 = v61 & 0xFFFFFFFF00000000 | v62;
                v60 = v63 + 0x100000000;
                if (v34 > (int)v62)
                  v60 = v64;
                v65 = (_DWORD)v60 == (_DWORD)v45 && HIDWORD(v60) == HIDWORD(v45);
                v61 = v60;
              }
              while (!v65);
            }
            if (v37 >> 4 >= 0x271)
            {
              v40 = v34 + v36 + v34 * HIDWORD(v36);
              v41 = (v40 / v34);
              v42 = (v40 % v34);
              if ((v42 & 0x80000000) != 0)
              {
                v42 = (v42 + v34);
                v41 = (v41 - 1);
              }
            }
            else
            {
              v42 = (v34 + v36);
              if (v34 + (int)v36 < 0)
              {
                v66 = v39 + ((v38 + v36) & ~((v38 + (int)v36) >> 31));
                if (v66 == (_DWORD)v36)
                  v67 = 1;
                else
                  v67 = 2;
                v68 = v67 + (v66 - (v66 != (_DWORD)v36) - v36) / v34;
                if (v68 < 8)
                  goto LABEL_150;
                LODWORD(v42) = v42 + (v68 & 0xFFFFFFF8) * v34;
                v69 = 0uLL;
                v70 = (int32x4_t)HIDWORD(v36);
                v71 = v68 & 0xFFFFFFF8;
                do
                {
                  v70 = vaddq_s32(v70, v26);
                  v69 = vaddq_s32(v69, v26);
                  v71 -= 8;
                }
                while (v71);
                v43 = vaddvq_s32(vaddq_s32(v69, v70));
                if (v68 != (v68 & 0xFFFFFFF8))
                {
LABEL_150:
                  do
                  {
                    LODWORD(v42) = v42 + v34;
                    v43 = (v43 - 1);
                  }
                  while ((v42 & 0x80000000) != 0);
                }
                v36 = v42 | (v43 << 32);
                if ((int)v42 < v34)
                  goto LABEL_32;
              }
              else
              {
                v36 = v36 & 0xFFFFFFFF00000000 | v42;
                if ((int)v42 < v34)
                  goto LABEL_32;
              }
              v41 = HIDWORD(v36);
              do
              {
                v42 = (v42 - v34);
                v41 = (v41 + 1);
              }
              while ((int)v42 >= v34);
            }
            v36 = v42 | (v41 << 32);
LABEL_32:
            if (++v35 == v28)
              goto LABEL_20;
          }
          v53 = HIDWORD(v36);
          do
          {
LABEL_48:
            LODWORD(v44) = v44 + v34;
            v53 = (v53 - 1);
          }
          while ((v44 & 0x80000000) != 0);
          goto LABEL_49;
        }
LABEL_12:
        v27 = v166 - 8;
        v18 += 8 * v14;
        v19 += 8;
        v21 = 2 * v14;
        v15 = v164;
        v23 = v14;
        v22 = 3 * v14;
        v24 = 5 * v14;
        if (v165 >= v164)
          goto LABEL_134;
      }
      if (v14 >= 8)
      {
        v72 = 0;
        v73 = *((unsigned int *)v163 + 4);
        v74 = *v163;
        v75 = v19;
        do
        {
          v76 = (int32x4_t *)(v74 + 4 * v75);
          v78 = *v76;
          v77 = v76[1];
          v79 = (int32x4_t *)((char *)v76 + 4 * v73);
          v81 = *v79;
          v80 = v79[1];
          v82 = &v76->i8[8 * v73];
          v83 = &v76[v73];
          v85 = *(_OWORD *)v82;
          v84 = *((_OWORD *)v82 + 1);
          v87 = *v83;
          v86 = v83[1];
          v88 = (int32x4_t *)((char *)v76 + 20 * v73);
          v90 = *v88;
          v89 = v88[1];
          v91 = &v76->i8[24 * v73];
          *(_QWORD *)&v92 = vzip1q_s32(*v76, v81).u64[0];
          DWORD2(v92) = v85;
          *(_QWORD *)&v93 = vzip1q_s32(v87, *v88).u64[0];
          DWORD2(v93) = *(_OWORD *)v91;
          v94 = &v76->i8[12 * v73];
          *(_QWORD *)&v95 = vtrn2q_s32(*v76, v81).u64[0];
          DWORD2(v95) = DWORD1(v85);
          v96 = &v76->i8[28 * v73];
          LODWORD(v97) = vdupq_lane_s32(*(int32x2_t *)v87.i8, 1).u32[0];
          DWORD1(v97) = v90.i32[1];
          v98 = *(_OWORD *)v96;
          *(_QWORD *)&v99 = vzip2q_s32(v78, v81).u64[0];
          DWORD2(v99) = DWORD2(v85);
          HIDWORD(v92) = *(_OWORD *)v94;
          LODWORD(v100) = vdupq_laneq_s32(v87, 2).u32[0];
          DWORD1(v100) = v90.i32[2];
          HIDWORD(v93) = *(_OWORD *)v96;
          v78.i64[0] = vuzp2q_s32(vuzp2q_s32(v78, v81), v78).u64[0];
          v78.i32[2] = HIDWORD(v85);
          HIDWORD(v95) = HIDWORD(*(_QWORD *)v94);
          v81.i32[0] = vdupq_laneq_s32(v87, 3).u32[0];
          v81.i32[1] = v90.i32[3];
          HIDWORD(v99) = *((_QWORD *)v94 + 1);
          v87.i64[0] = vzip1q_s32(v77, v80).u64[0];
          v87.i32[2] = v84;
          v87.i32[3] = *((_OWORD *)v94 + 1);
          v101 = *((_OWORD *)v96 + 1);
          v102.i64[0] = vzip1q_s32(v86, v89).u64[0];
          v102.i32[2] = *((_OWORD *)v91 + 1);
          v78.i32[3] = HIDWORD(*(_OWORD *)v94);
          v102.i32[3] = v101;
          *(_QWORD *)&v103 = vtrn2q_s32(v77, v80).u64[0];
          DWORD2(v97) = HIDWORD(*(_QWORD *)v91);
          DWORD2(v103) = DWORD1(v84);
          HIDWORD(v103) = HIDWORD(*((_QWORD *)v94 + 2));
          DWORD2(v100) = *((_QWORD *)v91 + 1);
          LODWORD(v104) = vdupq_lane_s32(*(int32x2_t *)v86.i8, 1).u32[0];
          DWORD1(v104) = v89.i32[1];
          v81.i32[2] = HIDWORD(*(_OWORD *)v91);
          v105 = (_OWORD *)&v16->f32[v18 + v72];
          *(_QWORD *)&v106 = vzip2q_s32(v77, v80).u64[0];
          DWORD2(v106) = DWORD2(v84);
          DWORD2(v104) = HIDWORD(*((_QWORD *)v91 + 2));
          HIDWORD(v106) = *((_QWORD *)v94 + 3);
          v77.i64[0] = vuzp2q_s32(vuzp2q_s32(v77, v80), v77).u64[0];
          HIDWORD(v97) = DWORD1(v98);
          v80.i32[0] = vdupq_laneq_s32(v86, 2).u32[0];
          v80.i32[1] = v89.i32[2];
          HIDWORD(v100) = DWORD2(v98);
          v80.i32[2] = *((_QWORD *)v91 + 3);
          v77.i32[2] = HIDWORD(v84);
          v81.i32[3] = HIDWORD(v98);
          v77.i32[3] = HIDWORD(*((_OWORD *)v94 + 1));
          v86.i32[0] = vdupq_laneq_s32(v86, 3).u32[0];
          HIDWORD(v104) = DWORD1(v101);
          v86.i32[1] = v89.i32[3];
          v86.i32[2] = HIDWORD(*((_OWORD *)v91 + 1));
          v86.i32[3] = HIDWORD(v101);
          v80.i32[3] = DWORD2(v101);
          *v105 = v92;
          v105[1] = v93;
          v107 = (_OWORD *)((char *)v105 + 4 * v14);
          *v107 = v95;
          v107[1] = v97;
          v108 = (_OWORD *)((char *)v105 + 4 * v21);
          *v108 = v99;
          v108[1] = v100;
          v109 = (int32x4_t *)((char *)v105 + 4 * v22);
          *v109 = v78;
          v109[1] = v81;
          v110 = (int32x4_t *)&v105[v23];
          *v110 = v87;
          v110[1] = v102;
          v111 = (_OWORD *)((char *)v105 + 4 * v24);
          *v111 = v103;
          v111[1] = v104;
          v112 = (_OWORD *)((char *)v105 + 4 * v25);
          v113 = (int32x4_t *)((char *)v105 + 28 * v14);
          v75 += 8 * v73;
          *v112 = v106;
          v112[1] = v80;
          LODWORD(v112) = v72 + 16;
          v72 += 8;
          *v113 = v77;
          v113[1] = v86;
        }
        while (v112 <= v14);
      }
      if ((v14 & 7) == 0)
        goto LABEL_12;
      v114 = 0;
      v115 = 0;
      v116 = *((_DWORD *)v163 + 4);
      v117 = *v163 + 4 * (v19 + v116 * v167);
      while (1)
      {
        v118 = HIDWORD(v115);
        v119 = (v20 + v115);
        v120 = v115 & 0xFFFFFFFF00000000 | v119;
        v121 = v120;
        LODWORD(v122) = v20 + v115;
        if (v20 + (int)v115 >= 0)
        {
          if ((int)v122 < v20)
            goto LABEL_89;
          goto LABEL_105;
        }
        v125 = v168 + ((v169 + v115) & ~((v169 + (int)v115) >> 31));
        v126 = v125 == (_DWORD)v115 ? 1 : 2;
        v127 = v126 + (v125 - (v125 != (_DWORD)v115) - v115) / v20;
        if (v127 < 8)
          break;
        LODWORD(v122) = v119 + (v127 & 0xFFFFFFF8) * v20;
        v129 = 0uLL;
        v130 = (int32x4_t)HIDWORD(v115);
        v131 = v127 & 0xFFFFFFF8;
        do
        {
          v130 = vaddq_s32(v130, v26);
          v129 = vaddq_s32(v129, v26);
          v131 -= 8;
        }
        while (v131);
        v128 = vaddvq_s32(vaddq_s32(v129, v130));
        if (v127 != (v127 & 0xFFFFFFF8))
          goto LABEL_103;
LABEL_104:
        v121 = v122 | (v128 << 32);
        if ((int)v122 < v20)
        {
LABEL_89:
          v123 = HIDWORD(v121);
          if ((_DWORD)v115 == (_DWORD)v121 && HIDWORD(v115) == HIDWORD(v121))
            goto LABEL_119;
          goto LABEL_111;
        }
LABEL_105:
        v132 = HIDWORD(v121);
        do
        {
          v122 = (v122 - v20);
          v132 = (v132 + 1);
        }
        while ((int)v122 >= v20);
        v121 = v122 | (v132 << 32);
        v123 = HIDWORD(v121);
        if ((_DWORD)v115 == (_DWORD)v121 && HIDWORD(v115) == HIDWORD(v121))
          goto LABEL_119;
LABEL_111:
        v134 = &v16->i32[(v167 + (v19 + v114) * v14)];
        LODWORD(v135) = v115;
        v136 = v115;
        do
        {
          *v134++ = *(_DWORD *)(v117 + 4 * (HIDWORD(v136) + v135 * v116));
          v137 = (v135 + 1);
          v138 = v136 & 0xFFFFFFFF00000000;
          v135 = v138 | v137;
          v139 = v138 + 0x100000000;
          if (v20 <= (int)v137)
            v135 = v139;
          v140 = (_DWORD)v135 == (_DWORD)v121 && HIDWORD(v135) == (_DWORD)v123;
          v136 = v135;
        }
        while (!v140);
LABEL_119:
        if ((v119 & 0x80000000) != 0)
        {
          v141 = v168 + ((v169 + v115) & ~((v169 + (int)v115) >> 31));
          if (v141 == (_DWORD)v115)
            v142 = 1;
          else
            v142 = 2;
          v143 = v142 + (v141 - (v141 != (_DWORD)v115) - v115) / v20;
          if (v143 < 8)
            goto LABEL_151;
          LODWORD(v119) = v119 + (v143 & 0xFFFFFFF8) * v20;
          v144 = 0uLL;
          v145 = (int32x4_t)HIDWORD(v115);
          v146 = v143 & 0xFFFFFFF8;
          do
          {
            v145 = vaddq_s32(v145, v26);
            v144 = vaddq_s32(v144, v26);
            v146 -= 8;
          }
          while (v146);
          v118 = vaddvq_s32(vaddq_s32(v144, v145));
          if (v143 != (v143 & 0xFFFFFFF8))
          {
LABEL_151:
            do
            {
              LODWORD(v119) = v119 + v20;
              v118 = (v118 - 1);
            }
            while ((v119 & 0x80000000) != 0);
          }
          v120 = v119 | (v118 << 32);
          if ((int)v119 < v20)
            goto LABEL_86;
LABEL_131:
          v147 = HIDWORD(v120);
          do
          {
            v119 = (v119 - v20);
            v147 = (v147 + 1);
          }
          while ((int)v119 >= v20);
          v120 = v119 | (v147 << 32);
          goto LABEL_86;
        }
        if ((int)v119 >= v20)
          goto LABEL_131;
LABEL_86:
        ++v114;
        v115 = v120;
        if (v114 == 8)
          goto LABEL_12;
      }
      v128 = HIDWORD(v115);
      LODWORD(v122) = v20 + v115;
      do
      {
LABEL_103:
        LODWORD(v122) = v122 + v20;
        v128 = (v128 - 1);
      }
      while ((v122 & 0x80000000) != 0);
      goto LABEL_104;
    }
LABEL_134:
    v148 = (*(_DWORD *)(v162 + 20) * *(_DWORD *)(v162 + 16));
    if ((_DWORD)v148)
    {
      v149 = *(_QWORD *)v162;
      v150 = (v148 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v150 >= 0xB)
      {
        v153 = v149 >= (unint64_t)v16->u64 + 4 * v148 || (unint64_t)v16 >= v149 + 4 * v148;
        v151 = (float *)v16;
        v152 = *(float **)v162;
        if (v153)
        {
          v154 = v150 + 1;
          v155 = v154 & 0x7FFFFFFFFFFFFFF8;
          v151 = &v16->f32[v155];
          v152 = (float *)(v149 + v155 * 4);
          v156 = (float32x4_t *)(v149 + 16);
          v157 = v16 + 1;
          v158 = v154 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v159 = vaddq_f32(*v157, *v156);
            v156[-1] = vaddq_f32(v157[-1], v156[-1]);
            *v156 = v159;
            v156 += 2;
            v157 += 2;
            v158 -= 8;
          }
          while (v158);
          if (v154 == (v154 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_147;
        }
      }
      else
      {
        v151 = (float *)v16;
        v152 = *(float **)v162;
      }
      v160 = (float *)(v149 + 4 * v148);
      do
      {
        v161 = *v151++;
        *v152 = v161 + *v152;
        ++v152;
      }
      while (v152 != v160);
    }
LABEL_147:
    operator delete[](v16);
    return;
  }
  v6 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *((_DWORD *)a2 + 4);
    v9 = *((_DWORD *)a2 + 5);
    v10 = 4 * v6;
    do
    {
      *v4 = *(float *)(v5 + 4 * (HIDWORD(v7) + v8 * v7)) + *v4;
      ++v4;
      v11 = (v7 + 1);
      v12 = v7 & 0xFFFFFFFF00000000;
      v13 = v12 | v11;
      v7 = v12 + 0x100000000;
      if (v9 > (int)v11)
        v7 = v13;
      v10 -= 4;
    }
    while (v10);
  }
}

void sub_207D8CFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  v4 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1 || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)v5 == *(_QWORD *)a1))
  {
    v6 = *(unsigned int *)(v4 + 20);
    v11 = ((4 * v6 + 31) & 0x7FFFFFFE0uLL) >> 2;
    v10 = MEMORY[0x20BD028B4]();
    v12 = v6;
    sub_207D8CFA0(&v10, a2);
    v7 = *(void **)a1;
    v8 = v11;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 16) = v12;
    if (v7)
      operator delete[](v7);
  }
  else if (*(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20) && *(_DWORD *)(v5 + 16))
  {
    sub_207CC49DC();
  }
  else
  {
    v9 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v9)
      bzero(*(void **)a1, 4 * v9);
  }
}

void sub_207D8D0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

void sub_207D8D0CC(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  const float *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  float *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v4 = *(float **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const float **)v6;
  if (*(float **)v6 == v4 || *(float **)v5 == v4)
  {
    v12 = *(_DWORD *)(v6 + 20);
    v13 = *(_DWORD *)(v5 + 20);
    v18 = ((4 * v13 * v12 + 31) & 0x7FFFFFFE0uLL) >> 2;
    v17 = MEMORY[0x20BD028B4]();
    v19 = __PAIR64__(v13, v12);
    sub_207D8D0CC(&v17, a2);
    v14 = *(float **)a1;
    v15 = v18;
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v19;
    if (v14)
      operator delete[](v14);
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 16);
    v8 = *(_DWORD *)(v6 + 20);
    if (v9 * v8 && (v11 = *(_DWORD *)(v5 + 16), v10 = *(_DWORD *)(v5 + 20), v10 * v11))
    {
      sub_207CC4964(1, 0, v8, v10, v9, v7, v9, *(float **)v5, *(float *)(a2 + 24), 0.0, v11, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 20);
      if (v16 * *(_DWORD *)(a1 + 16))
        bzero(v4, 4 * (v16 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_207D8D1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

void sub_207D8D208(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v3;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;

  if (a3 != a2)
  {
    v3 = a3;
    v6 = (_QWORD *)(a1 + 40);
    do
    {
      v8 = *--v3;
      v7 = v8;
      v9 = *(_QWORD *)(a1 + 88);
      v10 = (uint64_t *)(v9 + 24 * v8);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        v13 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 80);
        do
        {
          v16 = ((v14 - v13) << 6) - 1;
          if (v14 == v13)
            v16 = 0;
          v17 = *(_QWORD *)(a1 + 72) + v15;
          if (v16 == v17)
          {
            sub_207D8BD2C(v6);
            v13 = *(_QWORD *)(a1 + 48);
            v14 = *(_QWORD *)(a1 + 56);
            v17 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v13 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF)) = *(_QWORD *)(v11 + 8);
          v15 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v15;
          v11 += 16;
        }
        while (v11 != v12);
        v9 = *(_QWORD *)(a1 + 88);
        v7 = *v3;
      }
      v18 = v9 + 24 * v7;
      v19 = v18 + 24;
      v20 = *(_QWORD *)(a1 + 96);
      if (v18 + 24 != v20)
      {
        v18 = v9 + 24 * v7;
        v21 = v18 + 8;
        do
        {
          v23 = v21 - 8;
          v22 = *(void **)(v21 - 8);
          if (v22)
          {
            *(_QWORD *)v21 = v22;
            operator delete(v22);
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
          }
          *(_OWORD *)(v21 - 8) = *(_OWORD *)(v21 + 16);
          *(_QWORD *)(v21 + 8) = *(_QWORD *)(v21 + 32);
          *(_QWORD *)(v21 + 24) = 0;
          *(_QWORD *)(v21 + 32) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          v18 += 24;
          v21 += 24;
        }
        while (v23 + 48 != v20);
        v19 = *(_QWORD *)(a1 + 96);
      }
      if (v19 != v18)
      {
        v24 = v19;
        do
        {
          v26 = *(void **)(v24 - 24);
          v24 -= 24;
          v25 = v26;
          if (v26)
          {
            *(_QWORD *)(v19 - 16) = v25;
            operator delete(v25);
          }
          v19 = v24;
        }
        while (v24 != v18);
      }
      *(_QWORD *)(a1 + 96) = v18;
      --*(_DWORD *)(a1 + 12);
    }
    while (v3 != a2);
  }
}

void sub_207D8D3AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const double *v5;
  const double *v6;
  uint64_t v7;
  size_t v10;
  double *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  const double *v18;
  double *v19;
  const double *v20;
  const double *v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  const double *v47;
  int32x2_t v48;
  int32x2_t v49;
  int64x2_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  uint64_t v55;
  float64x2x2_t v56;
  float64x2x2_t v57;
  float64x2x3_t v58;
  float64x2x3_t v59;

  v3 = a3 - a2;
  if (a3 == a2)
    return;
  v6 = *(const double **)(a1 + 88);
  v5 = *(const double **)(a1 + 96);
  v7 = (char *)v5 - (char *)v6;
  if (v5 == v6)
  {
    *(_DWORD *)(a1 + 8) -= (unint64_t)v3 >> 2;
    return;
  }
  if ((0xAAAAAAAAAAAAAAABLL * (v7 >> 3)) >> 60)
    sub_207CA420C();
  v55 = v3 >> 2;
  v10 = 0xAAAAAAAAAAAAAAB0 * (v7 >> 3);
  v11 = (double *)operator new(v10);
  bzero(v11, v10);
  if ((unint64_t)(v7 - 24) >= 0x1B0
    && ((v12 = (v7 - 24) / 0x18uLL, v11 < &v6[3 * v12 + 2]) ? (v13 = v6 >= &v11[2 * v12 + 2]) : (v13 = 1), v13))
  {
    v14 = v12 + 1;
    v15 = v14 & 3;
    if ((v14 & 3) == 0)
      v15 = 4;
    v16 = v14 - v15;
    v17 = &v11[2 * (v14 - v15)];
    v18 = &v6[3 * v16];
    v19 = v11 + 4;
    do
    {
      v20 = v6 + 12;
      v58 = vld3q_f64(v6);
      v21 = v6 + 6;
      v59 = vld3q_f64(v21);
      v22 = v19 - 4;
      vst2q_f64(v22, *(float64x2x2_t *)v58.val[0].f64);
      vst2q_f64(v19, *(float64x2x2_t *)v59.val[0].f64);
      v19 += 8;
      v6 = v20;
      v16 -= 4;
    }
    while (v16);
  }
  else
  {
    v17 = v11;
    v18 = v6;
  }
  v52 = v3;
  do
  {
    *v17 = *v18;
    v17[1] = v18[1];
    v18 += 3;
    v17 += 2;
  }
  while (v18 != v5);
  v23 = v11;
  v24 = &v11[0xF555555555555556 * (v7 >> 3)];
  v53 = (char *)v23;
  v54 = (_DWORD *)(a3 - 4);
  if (a3 - 4 < a2)
  {
    if (v10 - 16 < 0x30)
    {
      do
      {
LABEL_62:
        v51 = *((_QWORD *)v23 + 1);
        if (v51 != *(_QWORD *)v23)
          *((_QWORD *)v23 + 1) = v51 - 16;
        v23 += 2;
      }
      while (v23 != v24);
      goto LABEL_60;
    }
    v44 = ((v10 - 16) >> 4) + 1;
    v23 += 2 * (v44 & 0x1FFFFFFFFFFFFFFCLL);
    v45 = v53 + 32;
    v46 = v44 & 0x1FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v47 = (const double *)(v45 - 32);
      v56 = vld2q_f64(v47);
      v48 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v56.val[1], (int64x2_t)v56.val[0])));
      if ((v48.i8[0] & 1) != 0)
      {
        *((_QWORD *)v45 - 3) = *(_QWORD *)&v56.val[1].f64[0] - 16;
        if ((v48.i8[4] & 1) == 0)
        {
LABEL_52:
          v57 = vld2q_f64((const double *)v45);
          v49 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v57.val[1], (int64x2_t)v57.val[0])));
          if ((v49.i8[0] & 1) == 0)
            goto LABEL_53;
          goto LABEL_57;
        }
      }
      else if ((v48.i8[4] & 1) == 0)
      {
        goto LABEL_52;
      }
      *((_QWORD *)v45 - 1) = *(_QWORD *)&v56.val[1].f64[1] - 16;
      v57 = vld2q_f64((const double *)v45);
      v49 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v57.val[1], v50)));
      if ((v49.i8[0] & 1) == 0)
      {
LABEL_53:
        if ((v49.i8[4] & 1) != 0)
          goto LABEL_58;
        goto LABEL_49;
      }
LABEL_57:
      *((_QWORD *)v45 + 1) = *(_QWORD *)&v57.val[1].f64[0] - 16;
      if ((v49.i8[4] & 1) != 0)
LABEL_58:
        *((_QWORD *)v45 + 3) = *(_QWORD *)&v57.val[1].f64[1] - 16;
LABEL_49:
      v45 += 64;
      v46 -= 4;
      if (!v46)
      {
        if (v44 == (v44 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_60;
        goto LABEL_62;
      }
    }
  }
  v25 = 0;
  while (2)
  {
    v26 = *(_QWORD *)v23;
    v27 = *((_QWORD *)v23 + 1);
    if (v27 == *(_QWORD *)v23)
      goto LABEL_22;
    v28 = v27 - 16;
    *((_QWORD *)v23 + 1) = v27 - 16;
    if (v27 - 16 < v26)
      goto LABEL_21;
    v29 = v54;
    v30 = v55;
    while (1)
    {
      v32 = *(_DWORD *)v28;
      if (*(_DWORD *)v28 <= *v29)
        break;
      *(_DWORD *)v28 = v32 - v30;
      v28 -= 16;
      *((_QWORD *)v23 + 1) = v28;
LABEL_27:
      if (v28 < v26 || (unint64_t)v29 < a2)
        goto LABEL_21;
    }
    if (v32 != *v29)
    {
      --v29;
      --v30;
      goto LABEL_27;
    }
    v33 = *(_QWORD *)(a1 + 56);
    v34 = *(_QWORD *)(a1 + 48);
    v35 = ((v33 - v34) << 6) - 1;
    if (v33 == v34)
      v35 = 0;
    v36 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
    v37 = v28;
    if (v35 == v36)
    {
      sub_207D8BD2C((_QWORD *)(a1 + 40));
      v34 = *(_QWORD *)(a1 + 48);
      v36 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      v26 = *(_QWORD *)v23;
      v37 = *((_QWORD *)v23 + 1);
    }
    *(_QWORD *)(*(_QWORD *)(v34 + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF)) = *(_QWORD *)(v28 + 8);
    v38 = *(_QWORD *)(a1 + 88);
    ++*(_QWORD *)(a1 + 80);
    v39 = v38 + 24 * v25;
    if (v26 < v37)
    {
      *((_QWORD *)v23 + 1) = v37 - 16;
      v40 = *(_QWORD *)(v39 + 8);
      v41 = v40 - (v37 + 16);
      if (v40 != v37 + 16)
      {
        memmove((void *)v37, (const void *)(v37 + 16), v40 - (v37 + 16));
        v26 = *(_QWORD *)v23;
      }
      *(_QWORD *)(v39 + 8) = v37 + v41;
      --v29;
      --v30;
      v28 = *((_QWORD *)v23 + 1);
      goto LABEL_27;
    }
    v42 = *(_QWORD *)(v39 + 8);
    v43 = v42 - (v37 + 16);
    if (v42 != v37 + 16)
      memmove((void *)v37, (const void *)(v37 + 16), v42 - (v37 + 16));
    *(_QWORD *)(v39 + 8) = v37 + v43;
LABEL_21:
    ++v25;
LABEL_22:
    v23 += 2;
    if (v23 != v24)
      continue;
    break;
  }
LABEL_60:
  *(_DWORD *)(a1 + 8) -= v52 >> 2;
  operator delete(v53);
}

void sub_207D8D7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

char *sub_207D8D7DC(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  int v51;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *(_DWORD *)a3;
      a1[1] = v9 + 4;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = v14 + v6 + 4;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x2C)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v6] >= 0x20)
        {
          v45 = (v16 >> 2) + 1;
          v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v46);
          v17 = (_DWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
          v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 4)
      memmove((void *)(v5 - 4 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 4 * (a1[1] > v3);
    *(_DWORD *)v9 = *(_DWORD *)v3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v18 >> 62)
    sub_207CA420C();
  v20 = v10 - v6;
  if (v20 >> 1 > v18)
    v18 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 62)
      sub_207CA3AB8();
    v22 = (char *)operator new(4 * v21);
    v23 = &v22[4 * v8];
    v24 = &v22[4 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(4 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 1;
    if (v44 >> 62)
      sub_207CA3AB8();
    v23 = (char *)operator new(4 * v44);
    v24 = &v23[4 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[4 * v44];
      v26 = (char *)*a1;
      *(_DWORD *)v23 = *(_DWORD *)v3;
      v27 = v23 + 4;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 4 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_DWORD *)v23 = *(_DWORD *)v3;
  v27 = v23 + 4;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v30 = v29 - v26 - 4;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x2C)
      goto LABEL_60;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_60;
    v32 = (v30 >> 2) + 1;
    v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 4 * v8 - 16);
    v36 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 8;
    }
    while (v36);
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_60:
      do
      {
        v38 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v28 - 1) = v38;
        v28 -= 4;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_207D8DB4C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_207D8DB64(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *i;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;

  if (a2 != a3)
  {
    v6 = a2;
    while (1)
    {
      v8 = *v6;
      v10 = *(_QWORD *)(a1 + 88);
      v9 = *(char **)(a1 + 96);
      v11 = (char *)(v10 + 24 * v8);
      v12 = *(_QWORD *)(a1 + 104);
      if ((unint64_t)v9 >= v12)
        break;
      v13 = v11 + 24;
      if (v11 != v9)
      {
        v14 = v9 - 24;
        for (i = *(_QWORD **)(a1 + 96); v14 < v9; v14 += 24)
        {
          *i = 0;
          i[1] = 0;
          i[2] = 0;
          *(_OWORD *)i = *(_OWORD *)v14;
          i[2] = *((_QWORD *)v14 + 2);
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = 0;
          i += 3;
        }
        *(_QWORD *)(a1 + 96) = i;
        if (v9 != v13)
        {
          v16 = v9 - 24;
          v17 = 8 * ((v9 - v13) >> 3);
          do
          {
            v19 = *(void **)v16;
            if (*(_QWORD *)v16)
            {
              *((_QWORD *)v16 + 1) = v19;
              operator delete(v19);
              *(_QWORD *)v16 = 0;
              *((_QWORD *)v16 + 1) = 0;
              *((_QWORD *)v16 + 2) = 0;
            }
            v18 = (uint64_t)&v11[v17 - 24];
            *(_OWORD *)v16 = *(_OWORD *)v18;
            *((_QWORD *)v16 + 2) = *(_QWORD *)&v11[v17 - 8];
            *(_QWORD *)v18 = 0;
            *(_QWORD *)(v18 + 8) = 0;
            *(_QWORD *)(v18 + 16) = 0;
            v16 -= 24;
            v17 -= 24;
          }
          while (v17);
        }
        v25 = *(void **)v11;
        if (*(_QWORD *)v11)
        {
          *((_QWORD *)v11 + 1) = v25;
          operator delete(v25);
          *(_QWORD *)v11 = 0;
          *((_QWORD *)v11 + 1) = 0;
          *((_QWORD *)v11 + 2) = 0;
        }
        v26 = 0;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = 0;
        v27 = *(unsigned int *)(a1 + 8) + a4;
        if (!v27)
          goto LABEL_3;
LABEL_50:
        if (v27 >> 60)
          sub_207CA420C();
        v38 = (_BYTE *)*((_QWORD *)v11 + 1);
        v39 = 16 * v27;
        v40 = (char *)operator new(16 * v27);
        v41 = &v40[(v38 - v26) & 0xFFFFFFFFFFFFFFF0];
        v42 = v41;
        if (v38 != v26)
        {
          v43 = &v40[(v38 - v26) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v42 = v43 - 16;
            *((_OWORD *)v43 - 1) = *((_OWORD *)v38 - 1);
            v38 -= 16;
            v43 -= 16;
          }
          while (v38 != v26);
        }
        *(_QWORD *)v11 = v42;
        *((_QWORD *)v11 + 1) = v41;
        *((_QWORD *)v11 + 2) = &v40[v39];
        if (v26)
          operator delete(v26);
        goto LABEL_3;
      }
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      v24 = (uint64_t)v11;
      *(_QWORD *)(a1 + 96) = v13;
LABEL_49:
      v26 = *(_BYTE **)v24;
      v27 = *(unsigned int *)(a1 + 8) + a4;
      if (v27 > (uint64_t)(*((_QWORD *)v11 + 2) - (_QWORD)v26) >> 4)
        goto LABEL_50;
LABEL_3:
      ++*(_DWORD *)(a1 + 12);
      if (++v6 == a3)
        return;
    }
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v9[-v10] >> 3) + 1;
    if (v20 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA420C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v10) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 > 0xAAAAAAAAAAAAAAALL)
        sub_207CA3AB8();
      v23 = (char *)operator new(24 * v22);
      v24 = (uint64_t)&v23[24 * v8];
      v44 = &v23[24 * v22];
      if (v22 != v8)
        goto LABEL_33;
    }
    else
    {
      v23 = 0;
      v24 = 24 * v8;
      v44 = 0;
      if (*v6)
      {
LABEL_33:
        v28 = (_QWORD *)(v24 + 24);
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        *(_QWORD *)(v24 + 16) = 0;
        v29 = *(char **)(a1 + 88);
        v30 = v24;
        if (v29 != v11)
        {
          v31 = v11;
          do
          {
            v32 = *(_OWORD *)(v31 - 24);
            v31 -= 24;
            *(_OWORD *)(v30 - 24) = v32;
            v30 -= 24;
            *(_QWORD *)(v30 + 16) = *((_QWORD *)v31 + 2);
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_QWORD *)v31 + 2) = 0;
          }
          while (v31 != v29);
          v28 = (_QWORD *)(v24 + 24);
        }
        v33 = *(char **)(a1 + 96);
        if (v33 != v11)
        {
          do
          {
            *v28 = 0;
            v28[1] = 0;
            v28[2] = 0;
            *(_OWORD *)v28 = *(_OWORD *)v11;
            v28[2] = *((_QWORD *)v11 + 2);
            *(_QWORD *)v11 = 0;
            *((_QWORD *)v11 + 1) = 0;
            *((_QWORD *)v11 + 2) = 0;
            v28 += 3;
            v11 += 24;
          }
          while (v11 != v33);
          v11 = *(char **)(a1 + 96);
        }
        v34 = *(char **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v30;
        *(_QWORD *)(a1 + 96) = v28;
        *(_QWORD *)(a1 + 104) = v44;
        if (v11 != v34)
        {
          v35 = v11;
          do
          {
            v37 = (void *)*((_QWORD *)v35 - 3);
            v35 -= 24;
            v36 = v37;
            if (v37)
            {
              *((_QWORD *)v11 - 2) = v36;
              operator delete(v36);
            }
            v11 = v35;
          }
          while (v35 != v34);
          v11 = v34;
        }
        if (v11)
          operator delete(v11);
        v11 = (char *)v24;
        goto LABEL_49;
      }
    }
    if ((_DWORD)v8)
    {
      v24 -= 24 * ((unint64_t)(v8 + 1) >> 1);
    }
    else
    {
      v24 = (uint64_t)operator new(0x18uLL);
      v44 = (char *)(v24 + 24);
      if (v23)
        operator delete(v23);
    }
    goto LABEL_33;
  }
}

void sub_207D8DF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D22788((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D8DF94(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3;
  const double *v5;
  const double *v6;
  uint64_t v7;
  double *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  const double *v17;
  double *v18;
  const double *v19;
  const double *v20;
  double *v21;
  double *v22;
  unsigned int v23;
  double *v24;
  unsigned int *v25;
  unsigned int *v26;
  int v27;
  double *v28;
  unsigned int *v29;
  unsigned int *v30;
  int v31;
  char *v32;
  unsigned int v33;
  float64x2x3_t v34;
  float64x2x3_t v35;

  v3 = a3 - a2;
  if (a3 != a2)
  {
    v6 = *(const double **)(a1 + 88);
    v5 = *(const double **)(a1 + 96);
    v7 = (char *)v5 - (char *)v6;
    if (v5 != v6)
    {
      if ((0xAAAAAAAAAAAAAAABLL * (v7 >> 3)) >> 60)
        sub_207CA420C();
      v10 = (double *)operator new(0xAAAAAAAAAAAAAAB0 * (v7 >> 3));
      bzero(v10, 0xAAAAAAAAAAAAAAB0 * (v7 >> 3));
      if ((unint64_t)(v7 - 24) >= 0x1B0
        && ((v11 = (v7 - 24) / 0x18uLL, v10 < &v6[3 * v11 + 2]) ? (v12 = v6 >= &v10[2 * v11 + 2]) : (v12 = 1), v12))
      {
        v13 = v11 + 1;
        v14 = v13 & 3;
        if ((v13 & 3) == 0)
          v14 = 4;
        v15 = v13 - v14;
        v16 = &v10[2 * (v13 - v14)];
        v17 = &v6[3 * v15];
        v18 = v10 + 4;
        do
        {
          v19 = v6 + 12;
          v34 = vld3q_f64(v6);
          v20 = v6 + 6;
          v35 = vld3q_f64(v20);
          v21 = v18 - 4;
          vst2q_f64(v21, *(float64x2x2_t *)v34.val[0].f64);
          vst2q_f64(v18, *(float64x2x2_t *)v35.val[0].f64);
          v18 += 8;
          v6 = v19;
          v15 -= 4;
        }
        while (v15);
      }
      else
      {
        v16 = v10;
        v17 = v6;
      }
      do
      {
        *v16 = *v17;
        v16[1] = v17[1];
        v17 += 3;
        v16 += 2;
      }
      while (v17 != v5);
      v22 = &v10[0xF555555555555556 * (v7 >> 3)];
      v23 = *(_DWORD *)a2;
      v24 = v10;
      v25 = *(unsigned int **)v10;
      v26 = (unsigned int *)*((_QWORD *)v10 + 1);
      if (*(unsigned int **)v10 != v26)
        goto LABEL_20;
      while (1)
      {
        do
        {
          v24 += 2;
          if (v24 == v22)
          {
            v27 = *(_DWORD *)(a1 + 8);
            v28 = v10;
            while (1)
            {
              v30 = *(unsigned int **)v28;
              v29 = (unsigned int *)*((_QWORD *)v28 + 1);
              if (*(unsigned int **)v28 != v29)
              {
                v31 = 0;
                v32 = a2;
                if (a2 != a3)
                {
LABEL_28:
                  v33 = *v30;
                  while (*(_DWORD *)v32 <= v33)
                  {
                    *v30 = ++v33;
                    ++v31;
                    v32 += 4;
                    if (v32 == a3)
                      goto LABEL_31;
                  }
                  goto LABEL_32;
                }
LABEL_31:
                while (1)
                {
                  v32 = a3;
LABEL_32:
                  v30 += 4;
                  if (v30 == v29)
                    break;
                  *v30 += v31;
                  if (v32 != a3)
                    goto LABEL_28;
                }
                *(_QWORD *)v28 = v29;
              }
              v28 += 2;
              if (v28 == v22)
              {
                *(_DWORD *)(a1 + 8) = v27 + (v3 >> 2);
                operator delete(v10);
                return;
              }
            }
          }
          v25 = *(unsigned int **)v24;
          v26 = (unsigned int *)*((_QWORD *)v24 + 1);
        }
        while (*(unsigned int **)v24 == v26);
        do
        {
LABEL_20:
          if (*v25 >= v23)
            break;
          v25 += 4;
          *(_QWORD *)v24 = v25;
        }
        while (v25 != v26);
      }
    }
    *(_DWORD *)(a1 + 8) += v3 >> 2;
  }
}

unint64_t sub_207D8E1E8(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_207D8F8B0(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_207D8FAB0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_207D8F41C(v7, v10 - 3);
          result = sub_207D8F41C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_207D8E1E8(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_207D8F41C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_207D8F8B0(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_207D8FAB0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

unsigned int *sub_207D8F8B0(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL4 v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a2 < *result;
  if (*a2 == *result)
    v6 = v5 < result[1];
  v7 = a3[1] < v5;
  v8 = *a3 == v4;
  v9 = *a3 < v4;
  if (v8)
    v9 = v7;
  if (v6)
  {
    if (v9)
    {
      v10 = result[2];
      v11 = *(_QWORD *)result;
      v12 = a3[2];
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = v12;
LABEL_17:
      *(_QWORD *)a3 = v11;
      a3[2] = v10;
      goto LABEL_18;
    }
    v20 = result[2];
    v21 = *(_QWORD *)result;
    v22 = a2[2];
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = v22;
    *(_QWORD *)a2 = v21;
    a2[2] = v20;
    v23 = *a3 < *a2;
    if (*a3 == *a2)
      v23 = a3[1] < a2[1];
    if (v23)
    {
      v10 = a2[2];
      v11 = *(_QWORD *)a2;
      v24 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v24;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    v15 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v15;
    *(_QWORD *)a3 = v14;
    a3[2] = v13;
    v16 = *a2 < *result;
    if (*a2 == *result)
      v16 = a2[1] < result[1];
    if (v16)
    {
      v17 = result[2];
      v18 = *(_QWORD *)result;
      v19 = a2[2];
      *(_QWORD *)result = *(_QWORD *)a2;
      result[2] = v19;
      *(_QWORD *)a2 = v18;
      a2[2] = v17;
    }
  }
LABEL_18:
  v25 = *a4 < *a3;
  if (*a4 == *a3)
    v25 = a4[1] < a3[1];
  if (v25)
  {
    v26 = a3[2];
    v27 = *(_QWORD *)a3;
    v28 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v28;
    *(_QWORD *)a4 = v27;
    a4[2] = v26;
    v29 = *a3 < *a2;
    if (*a3 == *a2)
      v29 = a3[1] < a2[1];
    if (v29)
    {
      v30 = a2[2];
      v31 = *(_QWORD *)a2;
      v32 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v32;
      *(_QWORD *)a3 = v31;
      a3[2] = v30;
      v33 = *a2 < *result;
      if (*a2 == *result)
        v33 = a2[1] < result[1];
      if (v33)
      {
        v34 = result[2];
        v35 = *(_QWORD *)result;
        v36 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v36;
        *(_QWORD *)a2 = v35;
        a2[2] = v34;
      }
    }
  }
  return result;
}

unsigned int *sub_207D8FAB0(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  _BOOL4 v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  result = sub_207D8F8B0(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] < a4[1];
  if (v11)
  {
    v12 = a4[2];
    v13 = *(_QWORD *)a4;
    v14 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v14;
    *(_QWORD *)a5 = v13;
    a5[2] = v12;
    v15 = *a4 < *a3;
    if (*a4 == *a3)
      v15 = a4[1] < a3[1];
    if (v15)
    {
      v16 = a3[2];
      v17 = *(_QWORD *)a3;
      v18 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v18;
      *(_QWORD *)a4 = v17;
      a4[2] = v16;
      v19 = *a3 < *a2;
      if (*a3 == *a2)
        v19 = a3[1] < a2[1];
      if (v19)
      {
        v20 = a2[2];
        v21 = *(_QWORD *)a2;
        v22 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v22;
        *(_QWORD *)a3 = v21;
        a3[2] = v20;
        v23 = *a2 < *a1;
        if (*a2 == *a1)
          v23 = a2[1] < a1[1];
        if (v23)
        {
          v24 = a1[2];
          v25 = *(_QWORD *)a1;
          v26 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v26;
          *(_QWORD *)a2 = v25;
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_207D8FC08(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_207D912D0(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_207D914D0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_207D90E3C(v7, v10 - 3);
          result = sub_207D90E3C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_207D8FC08(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_207D90E3C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_207D912D0(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_207D914D0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

_DWORD *sub_207D912D0(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  int v46;

  v4 = a2[1];
  v5 = result[1];
  v6 = v4 == v5;
  v7 = v4 < v5;
  if (v6)
    v7 = *a2 < *result;
  v8 = a3[1];
  v6 = v8 == v4;
  v9 = v8 < v4;
  if (v6)
    v9 = *a3 < *a2;
  if (v7)
  {
    if (v9)
    {
      v10 = result[2];
      v11 = *(_QWORD *)result;
      v12 = a3[2];
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = v12;
LABEL_17:
      *(_QWORD *)a3 = v11;
      a3[2] = v10;
      goto LABEL_18;
    }
    v22 = result[2];
    v23 = *(_QWORD *)result;
    v24 = a2[2];
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = v24;
    *(_QWORD *)a2 = v23;
    a2[2] = v22;
    v25 = a3[1];
    v26 = a2[1];
    v6 = v25 == v26;
    v27 = v25 < v26;
    if (v6)
      v27 = *a3 < *a2;
    if (v27)
    {
      v10 = a2[2];
      v11 = *(_QWORD *)a2;
      v28 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v28;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    v15 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v15;
    *(_QWORD *)a3 = v14;
    a3[2] = v13;
    v16 = a2[1];
    v17 = result[1];
    v6 = v16 == v17;
    v18 = v16 < v17;
    if (v6)
      v18 = *a2 < *result;
    if (v18)
    {
      v19 = result[2];
      v20 = *(_QWORD *)result;
      v21 = a2[2];
      *(_QWORD *)result = *(_QWORD *)a2;
      result[2] = v21;
      *(_QWORD *)a2 = v20;
      a2[2] = v19;
    }
  }
LABEL_18:
  v29 = a4[1];
  v30 = a3[1];
  v6 = v29 == v30;
  v31 = v29 < v30;
  if (v6)
    v31 = *a4 < *a3;
  if (v31)
  {
    v32 = a3[2];
    v33 = *(_QWORD *)a3;
    v34 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v34;
    *(_QWORD *)a4 = v33;
    a4[2] = v32;
    v35 = a3[1];
    v36 = a2[1];
    v6 = v35 == v36;
    v37 = v35 < v36;
    if (v6)
      v37 = *a3 < *a2;
    if (v37)
    {
      v38 = a2[2];
      v39 = *(_QWORD *)a2;
      v40 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v40;
      *(_QWORD *)a3 = v39;
      a3[2] = v38;
      v41 = a2[1];
      v42 = result[1];
      v6 = v41 == v42;
      v43 = v41 < v42;
      if (v6)
        v43 = *a2 < *result;
      if (v43)
      {
        v44 = result[2];
        v45 = *(_QWORD *)result;
        v46 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v46;
        *(_QWORD *)a2 = v45;
        a2[2] = v44;
      }
    }
  }
  return result;
}

_DWORD *sub_207D914D0(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _DWORD *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int v35;

  result = sub_207D912D0(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  v13 = v11 == v12;
  v14 = v11 < v12;
  if (v13)
    v14 = *a5 < *a4;
  if (v14)
  {
    v15 = a4[2];
    v16 = *(_QWORD *)a4;
    v17 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v17;
    *(_QWORD *)a5 = v16;
    a5[2] = v15;
    v18 = a4[1];
    v19 = a3[1];
    v13 = v18 == v19;
    v20 = v18 < v19;
    if (v13)
      v20 = *a4 < *a3;
    if (v20)
    {
      v21 = a3[2];
      v22 = *(_QWORD *)a3;
      v23 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v23;
      *(_QWORD *)a4 = v22;
      a4[2] = v21;
      v24 = a3[1];
      v25 = a2[1];
      v13 = v24 == v25;
      v26 = v24 < v25;
      if (v13)
        v26 = *a3 < *a2;
      if (v26)
      {
        v27 = a2[2];
        v28 = *(_QWORD *)a2;
        v29 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v29;
        *(_QWORD *)a3 = v28;
        a3[2] = v27;
        v30 = a2[1];
        v31 = a1[1];
        v13 = v30 == v31;
        v32 = v30 < v31;
        if (v13)
          v32 = *a2 < *a1;
        if (v32)
        {
          v33 = a1[2];
          v34 = *(_QWORD *)a1;
          v35 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v35;
          *(_QWORD *)a2 = v34;
          a2[2] = v33;
        }
      }
    }
  }
  return result;
}

uint64_t sub_207D91628(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  unsigned int i;
  int v9;
  int32x4_t *v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  __int8 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int8 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int32x4_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  __int8 *v31;
  uint64_t v32;
  __int8 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD *v46;
  _OWORD *v47;
  int32x4_t *v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _OWORD *v56;
  int32x4_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unsigned int v61;
  int32x4_t *v62;
  int32x4_t v63;
  __int128 v64;
  int32x4_t v65;
  __int128 v66;
  int32x4_t v67;
  __int128 v68;
  __int128 v69;
  int32x4_t v70;
  __int128 v71;
  uint64_t v72;
  int32x4_t v73;
  int32x4_t *v74;
  _OWORD *v75;
  _OWORD *v76;
  int32x4_t *v77;
  int32x4_t *v78;
  _OWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int32x4_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  int32x4_t v122;
  int32x4_t v123;
  unsigned int v124;
  unint64_t v125;
  int *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  BOOL v134;
  int v135;
  int v136;
  unsigned int v137;
  int32x4_t v138;
  int32x4_t v139;
  unsigned int v140;
  int *p_src;
  int *v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int v150;
  size_t v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int *v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int __src;
  int v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  unsigned int v182;

  v1 = result;
  v2 = *(_DWORD *)(result + 16);
  LODWORD(v3) = v2;
  if (v2 >= 8)
  {
    v6 = 0;
    v3 = v2 & 7;
    v7 = v2 & 0xFFFFFFF8;
    for (i = 8; i <= v2; i += 8)
    {
      v9 = 0;
      do
      {
        v53 = *(unsigned int *)(v1 + 16);
        v54 = v53 * v6;
        v55 = *(_QWORD *)v1;
        v56 = (_OWORD *)(*(_QWORD *)v1 + 4 * (v6 + v9 + v53 * v6));
        if (v9)
        {
          v10 = (int32x4_t *)(v55 + 4 * (v6 + v53 * (v6 + v9)));
          v12 = *v10;
          v11 = v10[1];
          v13 = 4 * v53;
          v14 = (int32x4_t *)((char *)v10 + 4 * v53);
          v16 = *v14;
          v15 = v14[1];
          v17 = 8 * v53;
          v18 = &v10->i8[8 * v53];
          v20 = *(_OWORD *)v18;
          v19 = *((_OWORD *)v18 + 1);
          v21 = 12 * v53;
          v22 = &v10->i8[12 * v53];
          v24 = *(_OWORD *)v22;
          v23 = *((_OWORD *)v22 + 1);
          v25 = v53;
          v26 = &v10[v53];
          v28 = *v26;
          v27 = v26[1];
          v29 = 20 * v53;
          result = (uint64_t)v10->i64 + 20 * v53;
          v30 = 24 * v53;
          v31 = &v10->i8[24 * v53];
          v32 = 7 * v53;
          v33 = &v10->i8[4 * v32];
          *(_QWORD *)&v34 = vzip1q_s32(v12, v16).u64[0];
          *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v20);
          *(_QWORD *)&v35 = vzip1q_s32(v28, *(int32x4_t *)result).u64[0];
          DWORD2(v35) = *(_OWORD *)v31;
          HIDWORD(v35) = *(_OWORD *)v33;
          *(_QWORD *)&v36 = vtrn2q_s32(v12, v16).u64[0];
          *((_QWORD *)&v36 + 1) = __PAIR64__(DWORD1(v24), DWORD1(v20));
          LODWORD(v37) = vdupq_lane_s32(*(int32x2_t *)v28.i8, 1).u32[0];
          DWORD1(v37) = HIDWORD(*(_QWORD *)result);
          DWORD2(v37) = HIDWORD(*(_QWORD *)v31);
          HIDWORD(v37) = HIDWORD(*(_QWORD *)v33);
          *(_QWORD *)&v38 = vzip2q_s32(v12, v16).u64[0];
          *((_QWORD *)&v38 + 1) = __PAIR64__(DWORD2(v24), DWORD2(v20));
          LODWORD(v39) = vdupq_laneq_s32(v28, 2).u32[0];
          DWORD1(v39) = *(_QWORD *)(result + 8);
          DWORD2(v39) = *((_QWORD *)v31 + 1);
          HIDWORD(v39) = *((_QWORD *)v33 + 1);
          v12.i64[0] = vuzp2q_s32(vuzp2q_s32(v12, v16), v12).u64[0];
          v12.i64[1] = __PAIR64__(HIDWORD(v24), HIDWORD(v20));
          v16.i32[0] = vdupq_laneq_s32(v28, 3).u32[0];
          v16.i32[1] = HIDWORD(*(_OWORD *)result);
          v16.i32[2] = HIDWORD(*(_OWORD *)v31);
          v16.i32[3] = HIDWORD(*(_OWORD *)v33);
          *(_QWORD *)&v24 = vzip1q_s32(v11, v15).u64[0];
          *((_QWORD *)&v24 + 1) = __PAIR64__(v23, v19);
          v28.i64[0] = vzip1q_s32(v27, *(int32x4_t *)(result + 16)).u64[0];
          v28.i32[2] = *((_OWORD *)v31 + 1);
          v28.i32[3] = *((_OWORD *)v33 + 1);
          *(_QWORD *)&v40 = vtrn2q_s32(v11, v15).u64[0];
          *((_QWORD *)&v40 + 1) = __PAIR64__(DWORD1(v23), DWORD1(v19));
          LODWORD(v41) = vdupq_lane_s32(*(int32x2_t *)v27.i8, 1).u32[0];
          DWORD1(v41) = HIDWORD(*(_QWORD *)(result + 16));
          DWORD2(v41) = HIDWORD(*((_QWORD *)v31 + 2));
          HIDWORD(v41) = HIDWORD(*((_QWORD *)v33 + 2));
          *(_QWORD *)&v42 = vzip2q_s32(v11, v15).u64[0];
          *((_QWORD *)&v42 + 1) = __PAIR64__(DWORD2(v23), DWORD2(v19));
          LODWORD(v43) = vdupq_laneq_s32(v27, 2).u32[0];
          DWORD1(v43) = *(_QWORD *)(result + 24);
          DWORD2(v43) = *((_QWORD *)v31 + 3);
          HIDWORD(v43) = *((_QWORD *)v33 + 3);
          *(_QWORD *)&v44 = vuzp2q_s32(vuzp2q_s32(v11, v15), v11).u64[0];
          *((_QWORD *)&v44 + 1) = __PAIR64__(HIDWORD(v23), HIDWORD(v19));
          LODWORD(v45) = vdupq_laneq_s32(v27, 3).u32[0];
          DWORD1(v45) = HIDWORD(*(_OWORD *)(result + 16));
          DWORD2(v45) = HIDWORD(*((_OWORD *)v31 + 1));
          HIDWORD(v45) = HIDWORD(*((_OWORD *)v33 + 1));
          *v56 = v34;
          v56[1] = v35;
          v46 = (_OWORD *)((char *)v56 + v13);
          *v46 = v36;
          v46[1] = v37;
          v47 = (_OWORD *)((char *)v56 + v17);
          *v47 = v38;
          v47[1] = v39;
          v48 = (int32x4_t *)((char *)v56 + v21);
          *v48 = v12;
          v48[1] = v16;
          v49 = &v56[v25];
          *v49 = v24;
          v49[1] = v28;
          v50 = (_OWORD *)((char *)v56 + v29);
          *v50 = v40;
          v50[1] = v41;
          v51 = (_OWORD *)((char *)v56 + v30);
          *v51 = v42;
          v51[1] = v43;
        }
        else
        {
          v57 = *(int32x4_t *)(v55 + 4 * (v54 + v6 + v53));
          v58 = *(_OWORD *)(v55 + 4 * (v54 + v6 + 2 * v53));
          v59 = *(_OWORD *)(v55 + 4 * (v54 + v6 + 3 * v53));
          *(_QWORD *)&v60 = vzip1q_s32(*(int32x4_t *)(v55 + 4 * (v54 + v6)), v57).u64[0];
          v57.i32[2] = HIDWORD(*(_QWORD *)(v55 + 4 * (v54 + v6 + 2 * v53)));
          v57.i32[3] = HIDWORD(*(_QWORD *)(v55 + 4 * (v54 + v6 + 3 * v53)));
          *((_QWORD *)&v60 + 1) = __PAIR64__(v59, v58);
          HIDWORD(v58) = *(_QWORD *)(v55 + 4 * (v54 + v6 + 3 * v53) + 8);
          v61 = v54 + v6 + 4 * v53;
          v62 = (int32x4_t *)(v55 + 4 * v61);
          v63 = *(int32x4_t *)((char *)v62 + 4 * v53);
          v64 = *(__int128 *)((char *)v62 + 8 * v53);
          result = 12 * v53;
          v44 = *(__int128 *)((char *)v62 + 12 * v53);
          v65 = *v62;
          *(_QWORD *)&v66 = vzip1q_s32(*v62, v63).u64[0];
          *((_QWORD *)&v66 + 1) = __PAIR64__(v44, v64);
          v67.i64[0] = vtrn2q_s32(*v62, v63).u64[0];
          v67.i32[2] = HIDWORD(v62->i64[v53]);
          v67.i32[3] = HIDWORD(*(unint64_t *)((char *)v62->i64 + 12 * v53));
          *(_QWORD *)&v68 = vzip2q_s32(*v62, v63).u64[0];
          DWORD2(v68) = v62->i64[v53 + 1];
          HIDWORD(v68) = *(uint64_t *)((char *)&v62->i64[1] + 12 * v53);
          *(_QWORD *)&v69 = vuzp2q_s32(vuzp2q_s32(*v62, v63), *v62).u64[0];
          *((_QWORD *)&v69 + 1) = __PAIR64__(HIDWORD(v44), HIDWORD(v64));
          v61 += 4;
          v70 = *(int32x4_t *)(v55 + 4 * (v61 + v53));
          v71 = *(_OWORD *)(v55 + 4 * (v61 + 2 * (_DWORD)v53));
          v72 = 4 * (v61 + 3 * (_DWORD)v53);
          v45 = *(_OWORD *)(v55 + v72);
          v73.i64[0] = vzip1q_s32(*(int32x4_t *)(v55 + 4 * v61), v70).u64[0];
          v70.i32[2] = HIDWORD(*(_QWORD *)(v55 + 4 * (v61 + 2 * (_DWORD)v53)));
          v70.i32[3] = HIDWORD(*(_QWORD *)(v55 + v72));
          v73.i64[1] = __PAIR64__(v45, v71);
          HIDWORD(v71) = *(_QWORD *)(v55 + v72 + 8);
          *v56 = v60;
          v56[1] = v66;
          v74 = (int32x4_t *)((char *)v56 + 4 * v53);
          *v74 = v57;
          v74[1] = v67;
          v75 = (_OWORD *)((char *)v56 + 8 * v53);
          *v75 = v58;
          v75[1] = v68;
          v76 = (_OWORD *)((char *)v56 + 12 * v53);
          *v76 = v59;
          v76[1] = v69;
          v77 = (int32x4_t *)&v56[v53];
          *v77 = v65;
          v77[1] = v73;
          v78 = (int32x4_t *)((char *)v56 + 20 * v53);
          *v78 = v63;
          v78[1] = v70;
          v79 = (_OWORD *)((char *)v56 + 24 * v53);
          *v79 = v64;
          v79[1] = v71;
          v32 = 7 * v53;
        }
        v52 = (_OWORD *)((char *)v56 + 4 * v32);
        *v52 = v44;
        v52[1] = v45;
        v9 += 8;
      }
      while (v6 + v9 + 8 <= v2);
      if ((_DWORD)v3)
      {
        v80 = *(_DWORD *)(v1 + 16);
        v81 = *(_QWORD *)v1;
        __src = v3;
        v168 = 8;
        v169 = v80;
        v170 = v81 + 4 * (v7 + v80 * v6);
        v171 = v7 + v80 * v6;
        v178 = 8;
        v179 = v3;
        v180 = v80;
        v181 = v81 + 4 * (v6 + v80 * v7);
        v182 = v6 + v80 * v7;
        v82 = v3;
        result = sub_207D9203C((uint64_t)&__src, (uint64_t)&v178);
        v3 = v82;
      }
      v6 += 8;
    }
  }
  v4 = v2 & 0xFFFFFFF8;
  if ((_DWORD)v3)
    v5 = v4 >= v2;
  else
    v5 = 1;
  if (!v5)
  {
    v83 = 0;
    if (v3 <= 1)
      v84 = 1;
    else
      v84 = v3;
    v154 = v4 + 8;
    v152 = v2 >> 3;
    v85.i64[0] = -1;
    v85.i64[1] = -1;
    v86 = v2 & 0xFFFFFFF8;
    v158 = &__src + (8 * v3);
    v160 = v3;
    v155 = v2 & 0xFFFFFFF8;
    v156 = v2;
    while (1)
    {
      v88 = v154 + 8 * v83;
      if (v2 < v88)
        v88 = v2;
      v157 = v86 + 8;
      v89 = v86 + 8 <= v2 ? 8 : v2 - v86;
      v90 = *(_DWORD *)(v1 + 16);
      v91 = *(_QWORD *)v1;
      v178 = v89;
      v179 = v3;
      v180 = v90;
      result = v91 + 4 * (v86 + v90 * v4);
      v181 = result;
      v161 = v86 + v90 * v4;
      v182 = v161;
      if (v4 != v86)
        break;
      v159 = v91;
      if (v89)
      {
        v92 = 0;
        v93 = 0;
        v153 = v83;
        v94 = v88 - 8 * (v152 + v83);
        v162 = v89;
        do
        {
          v95 = v93 + 8;
          if (v93 + 8 >= v94)
            v96 = v94;
          else
            v96 = v93 + 8;
          if (v95 >= v94)
            v97 = v94;
          else
            v97 = v93 + 8;
          if (v95 >= v94)
            v98 = v94;
          else
            v98 = v93 + 8;
          if (v95 >= v94)
            v99 = v94;
          else
            v99 = v93 + 8;
          v100 = v89 - v93;
          if (v95 <= v89)
            v100 = 8;
          if (v93)
          {
            if (v100)
            {
              v101 = 0;
              v102 = 0;
              v103 = 16 * v92;
              v104 = 2 * v97;
              v166 = v97 - 8 * v92;
              v163 = v98 - 8 * v92;
              v164 = v96 - 8 * v92;
              v105 = 2 * v99;
              v165 = v99 - 8 * v92;
              if (v100 >= 0)
                v106 = v100;
              else
                v106 = -v100;
              while (1)
              {
                v110 = HIDWORD(v102);
                if (v106 >> 4 > 0x270)
                {
                  v113 = v100 + v102 + v100 * HIDWORD(v102);
                  v114 = (v113 / v100);
                  v115 = (v113 % v100);
                  v116 = v115 | (v114 << 32);
                  v117 = (v115 + v100) | ((unint64_t)(v114 - 1) << 32);
                  if ((int)v115 < 0)
                    v112 = v117;
                  else
                    v112 = v116;
                  goto LABEL_76;
                }
                v111 = (v100 + v102);
                if (v100 + (int)v102 >= 0)
                {
                  v112 = v102 & 0xFFFFFFFF00000000 | v111;
                  if ((int)v111 >= v100)
                    goto LABEL_73;
                  goto LABEL_76;
                }
                v118 = (v104 - v103 + v102) & ~((v104 - v103 + (int)v102) >> 31);
                v119 = v103 + v118 == v104 + (_DWORD)v102 ? 1 : 2;
                v120 = v119 + (v103 - v104 + v118 - (v103 + v118 != v104 + (_DWORD)v102) - v102) / v166;
                if (v120 < 8)
                  break;
                LODWORD(v111) = v111 + (v120 & 0xFFFFFFF8) * v164;
                v122 = 0uLL;
                v123 = (int32x4_t)HIDWORD(v102);
                v124 = v120 & 0xFFFFFFF8;
                do
                {
                  v123 = vaddq_s32(v123, v85);
                  v122 = vaddq_s32(v122, v85);
                  v124 -= 8;
                }
                while (v124);
                v121 = vaddvq_s32(vaddq_s32(v122, v123));
                if (v120 != (v120 & 0xFFFFFFF8))
                  goto LABEL_71;
LABEL_72:
                v112 = v111 | (v121 << 32);
                if ((int)v111 >= v100)
                {
LABEL_73:
                  v125 = HIDWORD(v112);
                  do
                  {
                    v111 = (v111 - v100);
                    v125 = (v125 + 1);
                  }
                  while ((int)v111 >= v100);
                  v112 = v111 | (v125 << 32);
                }
LABEL_76:
                if ((_DWORD)v102 != (_DWORD)v112 || HIDWORD(v102) != HIDWORD(v112))
                {
                  v127 = &__src + 8 * (_DWORD)v101 + v93;
                  LODWORD(v128) = v102;
                  v129 = v102;
                  do
                  {
                    *v127++ = *(_DWORD *)(v159
                                        + 4 * (v161 + v93 * v90)
                                        + 4 * (HIDWORD(v129) + v128 * v90));
                    v130 = (v128 + 1);
                    v131 = v129 & 0xFFFFFFFF00000000;
                    v132 = v129 & 0xFFFFFFFF00000000 | v130;
                    v133 = v131 + 0x100000000;
                    if (v100 <= (int)v130)
                      v128 = v133;
                    else
                      v128 = v132;
                    v134 = (_DWORD)v128 == (_DWORD)v112 && HIDWORD(v128) == HIDWORD(v112);
                    v129 = v128;
                  }
                  while (!v134);
                }
                if (v106 >> 4 > 0x270)
                {
                  v107 = v100 + v102 + v100 * HIDWORD(v102);
                  v108 = (v107 / v100);
                  v109 = (v107 % v100);
                  if ((v109 & 0x80000000) != 0)
                  {
                    v109 = (v109 + v100);
                    v108 = (v108 - 1);
                  }
                }
                else
                {
                  v109 = (v100 + v102);
                  if (v100 + (int)v102 < 0)
                  {
                    v135 = (v105 - v103 + v102) & ~((v105 - v103 + (int)v102) >> 31);
                    if (v103 + v135 == v105 + (_DWORD)v102)
                      v136 = 1;
                    else
                      v136 = 2;
                    v137 = v136
                         + (v103 - v105 + v135 - (v103 + v135 != v105 + (_DWORD)v102) - v102) / v165;
                    if (v137 < 8)
                      goto LABEL_137;
                    LODWORD(v109) = v109 + (v137 & 0xFFFFFFF8) * v163;
                    v138 = 0uLL;
                    v139 = (int32x4_t)HIDWORD(v102);
                    v140 = v137 & 0xFFFFFFF8;
                    do
                    {
                      v139 = vaddq_s32(v139, v85);
                      v138 = vaddq_s32(v138, v85);
                      v140 -= 8;
                    }
                    while (v140);
                    v110 = vaddvq_s32(vaddq_s32(v138, v139));
                    if (v137 != (v137 & 0xFFFFFFF8))
                    {
LABEL_137:
                      do
                      {
                        LODWORD(v109) = v109 + v100;
                        v110 = (v110 - 1);
                      }
                      while ((v109 & 0x80000000) != 0);
                    }
                    v102 = v109 | (v110 << 32);
                    if ((int)v109 < v100)
                      goto LABEL_55;
                  }
                  else
                  {
                    v102 = v102 & 0xFFFFFFFF00000000 | v109;
                    if ((int)v109 < v100)
                      goto LABEL_55;
                  }
                  v108 = HIDWORD(v102);
                  do
                  {
                    v109 = (v109 - v100);
                    v108 = (v108 + 1);
                  }
                  while ((int)v109 >= v100);
                }
                v102 = v109 | (v108 << 32);
LABEL_55:
                if (++v101 == v84)
                  goto LABEL_32;
              }
              v121 = HIDWORD(v102);
              do
              {
LABEL_71:
                LODWORD(v111) = v111 + v100;
                v121 = (v121 - 1);
              }
              while ((v111 & 0x80000000) != 0);
              goto LABEL_72;
            }
          }
          else
          {
            if (v100 * v160)
              p_src = &__src;
            else
              p_src = 0;
            if (v100 * v160)
              v142 = v158;
            else
              v142 = 0;
            if (p_src != v142)
            {
              v143 = 0;
              v144 = 0;
              do
              {
                v145 = HIDWORD(v143);
                if (v143 <= HIDWORD(v143))
                  v146 = HIDWORD(v143);
                else
                  v146 = v143;
                if (v143 < HIDWORD(v143))
                  LODWORD(v145) = v143;
                *p_src = *(_DWORD *)(result + 4 * (v145 + v146 * v90));
                v147 = (v143 + 1);
                v148 = v143 & 0xFFFFFFFF00000000;
                v149 = v148 | v147;
                v143 = v148 + 0x100000000;
                if (v100 > (int)v147)
                  v143 = v149;
                if (v144 + 1 >= v100)
                  v150 = 8 - v100;
                else
                  v150 = 0;
                p_src += v150 + 1;
                if (v144 + 1 < v100)
                  ++v144;
                else
                  v144 = 0;
              }
              while (p_src != v142);
            }
          }
LABEL_32:
          ++v92;
          v93 = v95;
          v89 = v162;
        }
        while (v95 < v162);
        v151 = 4 * v162;
        result = (uint64_t)memmove((void *)result, &__src, v151);
        v85.i64[0] = -1;
        v85.i64[1] = -1;
        LODWORD(v3) = v160;
        v83 = v153;
        if (v160 != 1)
        {
          result = (uint64_t)memmove((void *)(v159 + 4 * (v90 + v161)), &v172, v151);
          v85.i64[0] = -1;
          v85.i64[1] = -1;
          v83 = v153;
          LODWORD(v3) = v160;
          if (v160 != 2)
          {
            result = (uint64_t)memmove((void *)(v159 + 4 * (v161 + 2 * v90)), &v173, v151);
            v85.i64[0] = -1;
            v85.i64[1] = -1;
            v83 = v153;
            LODWORD(v3) = v160;
            if (v160 != 3)
            {
              result = (uint64_t)memmove((void *)(v159 + 4 * (3 * v90 + v161)), &v174, v151);
              v85.i64[0] = -1;
              v85.i64[1] = -1;
              v83 = v153;
              LODWORD(v3) = v160;
              if (v160 != 4)
              {
                result = (uint64_t)memmove((void *)(v159 + 4 * (v161 + 4 * v90)), &v175, v151);
                v85.i64[0] = -1;
                v85.i64[1] = -1;
                v83 = v153;
                LODWORD(v3) = v160;
                if (v160 != 5)
                {
                  result = (uint64_t)memmove((void *)(v159 + 4 * (5 * v90 + v161)), &v176, v151);
                  v85.i64[0] = -1;
                  v85.i64[1] = -1;
                  v83 = v153;
                  LODWORD(v3) = v160;
                  if (v160 != 6)
                  {
                    result = (uint64_t)memmove((void *)(v159 + 4 * (v161 + 6 * v90)), &v177, v151);
                    v85.i64[0] = -1;
                    v85.i64[1] = -1;
                    v83 = v153;
                    goto LABEL_22;
                  }
                }
              }
            }
          }
        }
      }
LABEL_23:
      ++v83;
      v2 = v156;
      v86 = v157;
      v4 = v155;
      if (v157 >= v156)
        return result;
    }
    __src = v3;
    v168 = v89;
    v169 = v90;
    v170 = v91 + 4 * (v4 + v90 * v86);
    v171 = v4 + v90 * v86;
    v87 = v83;
    result = sub_207D9203C((uint64_t)&v178, (uint64_t)&__src);
    v85.i64[0] = -1;
    v85.i64[1] = -1;
    v83 = v87;
LABEL_22:
    LODWORD(v3) = v160;
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_207D9203C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  int v5;
  int32x4_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned int v40;
  unint64_t v41;
  _DWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int32x4_t v55;
  int32x4_t v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t v62;
  int32x4_t *v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t *v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t *v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int32x4_t v90;
  __int128 v91;
  __int128 v92;
  _OWORD *v93;
  _OWORD *v94;
  _OWORD *v95;
  _OWORD *v96;
  int32x4_t *v97;
  _OWORD *v98;
  _OWORD *v99;
  int32x4_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v116;
  int v117;
  unsigned int v118;
  unint64_t v119;
  int32x4_t v120;
  int32x4_t v121;
  unsigned int v122;
  unint64_t v123;
  _DWORD *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  BOOL v132;
  int v133;
  int v134;
  unsigned int v135;
  int32x4_t v136;
  int32x4_t v137;
  unsigned int v138;
  unint64_t v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    v3 = 0;
    v4 = *(unsigned int *)(a2 + 4);
    v5 = *(_DWORD *)(a2 + 4) & 7;
    v140 = v4 & 0xFFFFFFF8;
    v141 = *(_DWORD *)a2;
    v147 = 2 * v5;
    v146 = -2 * v5;
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = *(_DWORD *)a2;
    while (1)
    {
      v8 = v7 <= 1 ? 1 : v7;
      v142 = v3 + 8;
      v143 = v7;
      if (v3 + 8 <= v2 || v2 - v3 == 8)
        break;
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = *(unsigned int *)(result + 24);
        v11 = *(_QWORD *)(result + 16) - 4 * v10;
        v12 = *(_DWORD *)(result + 8);
        v13 = *(unsigned int *)(a2 + 24);
        v145 = *(_QWORD *)(a2 + 16) - 4 * v13;
        v14 = *(_DWORD *)(a2 + 8);
        v144 = v13 + v3;
        while (1)
        {
          v15 = v9 + 8;
          v16 = v9 + 8 <= v4 ? 8 : v4 - v9;
          if (v16)
            break;
LABEL_11:
          v9 = v15;
          if (v15 >= v4)
            goto LABEL_3;
        }
        v17 = 0;
        v18 = 0;
        v19 = v145 + 4 * (v144 + v14 * v9);
        v20 = v10 + v9;
        if (v16 >= 0)
          v21 = v16;
        else
          v21 = -v16;
        v22 = 2 * v16;
        v23 = -2 * v16;
        while (1)
        {
          v27 = HIDWORD(v18);
          if (v21 >> 4 >= 0x271)
          {
            v30 = v16 + v18 + v16 * HIDWORD(v18);
            v31 = (v30 / v16);
            v32 = (v30 % v16);
            v29 = v32 | (v31 << 32);
            v33 = (v32 + v16) | ((unint64_t)(v31 - 1) << 32);
            if ((int)v32 < 0)
              v29 = v33;
            goto LABEL_44;
          }
          v28 = (v16 + v18);
          if (v16 + (int)v18 >= 0)
          {
            v29 = v18 & 0xFFFFFFFF00000000 | v28;
            if ((int)v28 >= v16)
              goto LABEL_41;
            goto LABEL_44;
          }
          v34 = v23 + ((v22 + v18) & ~((v22 + (int)v18) >> 31));
          v35 = v34 == (_DWORD)v18 ? 1 : 2;
          v36 = v35 + (v34 - (v34 != (_DWORD)v18) - v18) / v16;
          if (v36 < 8)
            break;
          LODWORD(v28) = v28 + (v36 & 0xFFFFFFF8) * v16;
          v38 = 0uLL;
          v39 = (int32x4_t)HIDWORD(v18);
          v40 = v36 & 0xFFFFFFF8;
          do
          {
            v39 = vaddq_s32(v39, v6);
            v38 = vaddq_s32(v38, v6);
            v40 -= 8;
          }
          while (v40);
          v37 = vaddvq_s32(vaddq_s32(v38, v39));
          if (v36 != (v36 & 0xFFFFFFF8))
            goto LABEL_39;
LABEL_40:
          v29 = v28 | (v37 << 32);
          if ((int)v28 >= v16)
          {
LABEL_41:
            v41 = HIDWORD(v29);
            do
            {
              v28 = (v28 - v16);
              v41 = (v41 + 1);
            }
            while ((int)v28 >= v16);
            v29 = v28 | (v41 << 32);
          }
LABEL_44:
          if ((_DWORD)v18 != (_DWORD)v29 || HIDWORD(v18) != HIDWORD(v29))
          {
            v43 = (_DWORD *)(v11 + 4 * (v20 + (v3 + v17) * v12));
            LODWORD(v44) = v18;
            v45 = v18;
            do
            {
              *v43++ = *(_DWORD *)(v19 + 4 * (HIDWORD(v45) + v44 * v14));
              v46 = (v44 + 1);
              v47 = v45 & 0xFFFFFFFF00000000;
              v48 = v47 | v46;
              v49 = v47 + 0x100000000;
              if (v16 <= (int)v46)
                v44 = v49;
              else
                v44 = v48;
              v50 = (_DWORD)v44 == (_DWORD)v29 && HIDWORD(v44) == HIDWORD(v29);
              v45 = v44;
            }
            while (!v50);
          }
          if (v21 >> 4 >= 0x271)
          {
            v24 = v16 + v18 + v16 * HIDWORD(v18);
            v25 = (v24 / v16);
            v26 = (v24 % v16);
            if ((v26 & 0x80000000) != 0)
            {
              v26 = (v26 + v16);
              v25 = (v25 - 1);
            }
            v18 = v26 | (v25 << 32);
            goto LABEL_23;
          }
          v51 = (v16 + v18);
          if (v16 + (int)v18 < 0)
          {
            v52 = v23 + ((v22 + v18) & ~((v22 + (int)v18) >> 31));
            if (v52 == (_DWORD)v18)
              v53 = 1;
            else
              v53 = 2;
            v54 = v53 + (v52 - (v52 != (_DWORD)v18) - v18) / v16;
            if (v54 < 8)
              goto LABEL_129;
            LODWORD(v51) = v51 + (v54 & 0xFFFFFFF8) * v16;
            v55 = 0uLL;
            v56 = (int32x4_t)HIDWORD(v18);
            v57 = v54 & 0xFFFFFFF8;
            do
            {
              v56 = vaddq_s32(v56, v6);
              v55 = vaddq_s32(v55, v6);
              v57 -= 8;
            }
            while (v57);
            v27 = vaddvq_s32(vaddq_s32(v55, v56));
            if (v54 != (v54 & 0xFFFFFFF8))
            {
LABEL_129:
              do
              {
                LODWORD(v51) = v51 + v16;
                v27 = (v27 - 1);
              }
              while ((v51 & 0x80000000) != 0);
            }
            v18 = v51 | (v27 << 32);
            if ((int)v51 < v16)
              goto LABEL_23;
LABEL_70:
            v58 = HIDWORD(v18);
            do
            {
              v51 = (v51 - v16);
              v58 = (v58 + 1);
            }
            while ((int)v51 >= v16);
            v18 = v51 | (v58 << 32);
            goto LABEL_23;
          }
          v18 = v18 & 0xFFFFFFFF00000000 | v51;
          if ((int)v51 >= v16)
            goto LABEL_70;
LABEL_23:
          if (++v17 == v8)
            goto LABEL_11;
        }
        v37 = HIDWORD(v18);
        do
        {
LABEL_39:
          LODWORD(v28) = v28 + v16;
          v37 = (v37 - 1);
        }
        while ((v28 & 0x80000000) != 0);
        goto LABEL_40;
      }
LABEL_3:
      v7 = v143 - 8;
      v3 += 8;
      v2 = v141;
      if (v142 >= v141)
        return result;
    }
    if (v4 >= 8)
    {
      v59 = 0;
      do
      {
        v60 = *(unsigned int *)(a2 + 8);
        v61 = *(_QWORD *)(a2 + 16)
            - 4 * *(unsigned int *)(a2 + 24)
            + 4 * (*(_DWORD *)(a2 + 24) + v3 + v60 * v59);
        v62 = *(int32x4_t *)(v61 + 16);
        v63 = (int32x4_t *)(v61 + 4 * v60);
        v65 = *v63;
        v64 = v63[1];
        v66 = (int32x4_t *)(v61 + 8 * v60);
        v68 = *v66;
        v67 = v66[1];
        v69 = (int32x4_t *)(v61 + 16 * v60);
        v71 = *v69;
        v70 = v69[1];
        v72 = (int32x4_t *)(v61 + 20 * v60);
        v74 = *v72;
        v73 = v72[1];
        v75 = (__int128 *)(v61 + 24 * v60);
        v77 = *v75;
        v76 = v75[1];
        v78 = v61 + 12 * v60;
        *(_QWORD *)&v79 = vzip1q_s32(*(int32x4_t *)v61, v65).u64[0];
        DWORD2(v79) = v68.i32[0];
        *(_QWORD *)&v80 = vzip1q_s32(v71, v74).u64[0];
        *(_QWORD *)&v81 = vtrn2q_s32(*(int32x4_t *)v61, v65).u64[0];
        DWORD2(v81) = v68.i32[1];
        DWORD2(v80) = v77;
        LODWORD(v82) = vdupq_lane_s32(*(int32x2_t *)v71.i8, 1).u32[0];
        *(_QWORD *)&v83 = vzip2q_s32(*(int32x4_t *)v61, v65).u64[0];
        DWORD1(v82) = v74.i32[1];
        DWORD2(v83) = v68.i32[2];
        LODWORD(v84) = vdupq_laneq_s32(v71, 2).u32[0];
        DWORD1(v84) = v74.i32[2];
        *(_QWORD *)&v85 = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)v61, v65), *(int32x4_t *)v61).u64[0];
        DWORD2(v85) = v68.i32[3];
        HIDWORD(v79) = *(_OWORD *)v78;
        v86 = (__int128 *)(v61 + 28 * v60);
        v65.i32[0] = vdupq_laneq_s32(v71, 3).u32[0];
        v88 = *v86;
        v87 = v86[1];
        HIDWORD(v81) = HIDWORD(*(_QWORD *)v78);
        v65.i32[1] = v74.i32[3];
        v74.i64[0] = vzip1q_s32(v62, v64).u64[0];
        HIDWORD(v83) = *(_QWORD *)(v78 + 8);
        v74.i32[2] = v67.i32[0];
        v74.i32[3] = *(_OWORD *)(v78 + 16);
        HIDWORD(v80) = *v86;
        v89 = *(unsigned int *)(result + 8);
        v90.i64[0] = vzip1q_s32(v70, v73).u64[0];
        v90.i64[1] = __PAIR64__(v87, v76);
        HIDWORD(v85) = HIDWORD(*(_OWORD *)v78);
        *(_QWORD *)&v91 = vtrn2q_s32(v62, v64).u64[0];
        *((_QWORD *)&v82 + 1) = __PAIR64__(DWORD1(v88), DWORD1(v77));
        DWORD2(v91) = v67.i32[1];
        HIDWORD(v91) = HIDWORD(*(_QWORD *)(v78 + 16));
        *((_QWORD *)&v84 + 1) = __PAIR64__(DWORD2(v88), DWORD2(v77));
        LODWORD(v92) = vdupq_lane_s32(*(int32x2_t *)v70.i8, 1).u32[0];
        DWORD1(v92) = v73.i32[1];
        v65.i64[1] = __PAIR64__(HIDWORD(v88), HIDWORD(v77));
        *(_QWORD *)&v77 = vzip2q_s32(v62, v64).u64[0];
        DWORD2(v77) = v67.i32[2];
        *((_QWORD *)&v92 + 1) = __PAIR64__(DWORD1(v87), DWORD1(v76));
        HIDWORD(v77) = *(_QWORD *)(v78 + 24);
        v62.i64[0] = vuzp2q_s32(vuzp2q_s32(v62, v64), v62).u64[0];
        v64.i32[0] = vdupq_laneq_s32(v70, 2).u32[0];
        v64.i32[1] = v73.i32[2];
        v64.i64[1] = __PAIR64__(DWORD2(v87), DWORD2(v76));
        v62.i32[2] = v67.i32[3];
        v62.i32[3] = HIDWORD(*(_OWORD *)(v78 + 16));
        v67.i32[0] = vdupq_laneq_s32(v70, 3).u32[0];
        v67.i32[1] = v73.i32[3];
        v67.i64[1] = __PAIR64__(HIDWORD(v87), HIDWORD(v76));
        v93 = (_OWORD *)(*(_QWORD *)(result + 16)
                       - 4 * *(unsigned int *)(result + 24)
                       + 4 * (v59 + *(_DWORD *)(result + 24) + v3 * v89));
        v94 = (_OWORD *)((char *)v93 + 4 * v89);
        *v93 = v79;
        v93[1] = v80;
        *v94 = v81;
        v94[1] = v82;
        v95 = (_OWORD *)((char *)v93 + 8 * v89);
        v96 = (_OWORD *)((char *)v93 + 12 * v89);
        *v95 = v83;
        v95[1] = v84;
        *v96 = v85;
        v96[1] = v65;
        v97 = (int32x4_t *)&v93[v89];
        v98 = (_OWORD *)((char *)v93 + 20 * v89);
        *v97 = v74;
        v97[1] = v90;
        *v98 = v91;
        v98[1] = v92;
        v99 = (_OWORD *)((char *)v93 + 24 * v89);
        v100 = (int32x4_t *)((char *)v93 + 28 * v89);
        *v99 = v77;
        v99[1] = v64;
        *v100 = v62;
        v100[1] = v67;
        LODWORD(v100) = v59 + 16;
        v59 += 8;
      }
      while (v100 <= v4);
    }
    if (!v5)
      goto LABEL_3;
    v101 = 0;
    v102 = 0;
    v103 = *(unsigned int *)(result + 24);
    v104 = *(_QWORD *)(result + 16) - 4 * v103;
    v105 = *(_DWORD *)(result + 8);
    v106 = *(_DWORD *)(a2 + 8);
    v107 = *(_QWORD *)(a2 + 16)
         - 4 * *(unsigned int *)(a2 + 24)
         + 4 * (*(_DWORD *)(a2 + 24) + v3 + v106 * v140);
    v108 = v103 + v140;
    while (1)
    {
      v109 = HIDWORD(v102);
      v110 = (v5 + v102);
      v111 = v102 & 0xFFFFFFFF00000000 | v110;
      v112 = v111;
      LODWORD(v113) = v5 + v102;
      if (v5 + (int)v102 >= 0)
      {
        if ((int)v113 < v5)
          goto LABEL_81;
        goto LABEL_97;
      }
      v116 = v146 + ((v147 + v102) & ~((v147 + (int)v102) >> 31));
      v117 = v116 == (_DWORD)v102 ? 1 : 2;
      v118 = v117 + (v116 - (v116 != (_DWORD)v102) - v102) / v5;
      if (v118 < 8)
        break;
      LODWORD(v113) = v110 + (v118 & 0xFFFFFFF8) * v5;
      v120 = 0uLL;
      v121 = (int32x4_t)HIDWORD(v102);
      v122 = v118 & 0xFFFFFFF8;
      do
      {
        v121 = vaddq_s32(v121, v6);
        v120 = vaddq_s32(v120, v6);
        v122 -= 8;
      }
      while (v122);
      v119 = vaddvq_s32(vaddq_s32(v120, v121));
      if (v118 != (v118 & 0xFFFFFFF8))
        goto LABEL_95;
LABEL_96:
      v112 = v113 | (v119 << 32);
      if ((int)v113 < v5)
      {
LABEL_81:
        v114 = HIDWORD(v112);
        if ((_DWORD)v102 == (_DWORD)v112 && HIDWORD(v102) == HIDWORD(v112))
          goto LABEL_112;
        goto LABEL_103;
      }
LABEL_97:
      v123 = HIDWORD(v112);
      do
      {
        v113 = (v113 - v5);
        v123 = (v123 + 1);
      }
      while ((int)v113 >= v5);
      v112 = v113 | (v123 << 32);
      v114 = HIDWORD(v112);
      if ((_DWORD)v102 == (_DWORD)v112 && HIDWORD(v102) == HIDWORD(v112))
        goto LABEL_112;
LABEL_103:
      v125 = (_DWORD *)(v104 + 4 * (v108 + (v3 + v101) * v105));
      LODWORD(v126) = v102;
      v127 = v102;
      do
      {
        *v125++ = *(_DWORD *)(v107 + 4 * (HIDWORD(v127) + v126 * v106));
        v128 = (v126 + 1);
        v129 = v127 & 0xFFFFFFFF00000000;
        v130 = v129 | v128;
        v131 = v129 + 0x100000000;
        if (v5 <= (int)v128)
          v126 = v131;
        else
          v126 = v130;
        v132 = (_DWORD)v126 == (_DWORD)v112 && HIDWORD(v126) == (_DWORD)v114;
        v127 = v126;
      }
      while (!v132);
LABEL_112:
      if ((v110 & 0x80000000) != 0)
      {
        v133 = v146 + ((v147 + v102) & ~((v147 + (int)v102) >> 31));
        if (v133 == (_DWORD)v102)
          v134 = 1;
        else
          v134 = 2;
        v135 = v134 + (v133 - (v133 != (_DWORD)v102) - v102) / v5;
        if (v135 < 8)
          goto LABEL_130;
        LODWORD(v110) = v110 + (v135 & 0xFFFFFFF8) * v5;
        v136 = 0uLL;
        v137 = (int32x4_t)HIDWORD(v102);
        v138 = v135 & 0xFFFFFFF8;
        do
        {
          v137 = vaddq_s32(v137, v6);
          v136 = vaddq_s32(v136, v6);
          v138 -= 8;
        }
        while (v138);
        v109 = vaddvq_s32(vaddq_s32(v136, v137));
        if (v135 != (v135 & 0xFFFFFFF8))
        {
LABEL_130:
          do
          {
            LODWORD(v110) = v110 + v5;
            v109 = (v109 - 1);
          }
          while ((v110 & 0x80000000) != 0);
        }
        v111 = v110 | (v109 << 32);
        if ((int)v110 < v5)
          goto LABEL_78;
LABEL_124:
        v139 = HIDWORD(v111);
        do
        {
          v110 = (v110 - v5);
          v139 = (v139 + 1);
        }
        while ((int)v110 >= v5);
        v111 = v110 | (v139 << 32);
        goto LABEL_78;
      }
      if ((int)v110 >= v5)
        goto LABEL_124;
LABEL_78:
      ++v101;
      v102 = v111;
      if (v101 == 8)
        goto LABEL_3;
    }
    v119 = HIDWORD(v102);
    LODWORD(v113) = v5 + v102;
    do
    {
LABEL_95:
      LODWORD(v113) = v113 + v5;
      v119 = (v119 - 1);
    }
    while ((v113 & 0x80000000) != 0);
    goto LABEL_96;
  }
  return result;
}

_DWORD *sub_207D927E8(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 8);
  if ((_DWORD *)(*(_QWORD *)(v3 + 8) - 4 * *(unsigned int *)(v3 + 16)) == result
    || (v4 = *(_QWORD *)(a2 + 16), *(_DWORD **)v4 == result))
  {
    result = (_DWORD *)sub_207D927E8(&v5);
    *v2 = v5;
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)(v4 + 16))
  {
    return (_DWORD *)sub_207CC49DC();
  }
  else
  {
    *result = 0;
  }
  return result;
}

uint64_t sub_207D928A0()
{
  return kdebug_trace();
}

uint64_t sub_207D928D0()
{
  return kdebug_trace();
}

void sub_207D92900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  int v11;
  unint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  size_t v16;
  void *v17;

  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == *(_DWORD *)(a3 + 16))
    goto LABEL_7;
  v7 = *(void **)a3;
  if (*(_QWORD *)a2 != *(_QWORD *)a3)
  {
    *(_DWORD *)(a3 + 16) = v6;
    if (*(_QWORD *)(a3 + 8) < v6)
    {
      if (v7)
        operator delete[](v7);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = ((4 * v6 + 31) & 0x7FFFFFFE0) >> 2;
      *(_QWORD *)a3 = MEMORY[0x20BD028B4]();
    }
LABEL_7:
    if (a3 == a2)
      goto LABEL_16;
    v8 = *(unsigned int *)(a2 + 16);
    if (*(_QWORD *)(a3 + 8) >= v8)
    {
      if (!(_DWORD)v8)
      {
        v11 = 0;
        goto LABEL_15;
      }
      v10 = *(void **)a3;
      v9 = 4 * v8;
    }
    else
    {
      if (*(_QWORD *)a3)
        operator delete[](*(void **)a3);
      v9 = 4 * v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = ((v9 + 31) & 0x7FFFFFFE0) >> 2;
      v10 = (void *)MEMORY[0x20BD028B4]();
      *(_QWORD *)a3 = v10;
    }
    memcpy(v10, *(const void **)a2, v9);
    v11 = *(_DWORD *)(a2 + 16);
LABEL_15:
    *(_DWORD *)(a3 + 16) = v11;
LABEL_16:
    if (*(_DWORD *)(a1 + 28))
      sub_207CC4B9C();
    return;
  }
  v12 = ((4 * v6 + 31) & 0x7FFFFFFE0) >> 2;
  v13 = (void *)MEMORY[0x20BD028B4]();
  v14 = v13;
  v15 = *(unsigned int *)(a2 + 16);
  if (v12 < v15)
  {
    operator delete[](v13);
    v16 = 4 * v15;
    v15 = (4 * v15 + 31) & 0x7FFFFFFE0;
    v14 = (void *)MEMORY[0x20BD028B4](v15, 32);
    v12 = v15 >> 2;
    v7 = *(void **)a2;
    LODWORD(v15) = *(_DWORD *)(a2 + 16);
LABEL_23:
    memcpy(v14, v7, v16);
    goto LABEL_24;
  }
  if ((_DWORD)v15)
  {
    v16 = 4 * v15;
    goto LABEL_23;
  }
LABEL_24:
  if (*(_DWORD *)(a1 + 28))
    sub_207CC4B9C();
  v17 = *(void **)a3;
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 16) = v15;
  if (v17)
    operator delete[](v17);
}

void sub_207D92B10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_207D92B24()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  _BOOL4 v4;
  int v5;
  void *v6;

  v0 = MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v2 = *(unsigned int *)(v0 + 24);
  *(_DWORD *)(v0 + 48) = v2;
  if (*(_QWORD *)(v0 + 40) < v2)
  {
    v3 = *(void **)(v0 + 32);
    if (v3)
      operator delete[](v3);
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = ((4 * v2 + 31) & 0x7FFFFFFE0) >> 2;
    *(_QWORD *)(v1 + 32) = MEMORY[0x20BD028B4]();
  }
  if ((_DWORD)v2)
  {
    if (sub_207CC4BFC())
    {
      v4 = 1;
    }
    else
    {
      if ((int)0.0 > 0x400)
      {
        v6 = (void *)MEMORY[0x20BD028B4]((4 * (int)0.0 + 31) & 0x7FFFFFFE0, 32);
        v5 = sub_207CC4BFC();
        operator delete[](v6);
      }
      else
      {
        v5 = sub_207CC4BFC();
      }
      v4 = v5 != 0;
    }
    *(_DWORD *)v1 = v4;
  }
  else
  {
    *(_DWORD *)v1 = 0;
  }
}

void sub_207D92C74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_207D92C88(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_207D939DC(a1);
  operator delete(v1);
}

void sub_207D92C9C(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "LevenbergMarquardt");
}

uint64_t sub_207D92CC4()
{
  return 1;
}

float sub_207D92CCC(uint64_t a1)
{
  return *(float *)(a1 + 512);
}

uint64_t sub_207D92CD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 496);
}

float sub_207D92CDC(float *a1, float a2)
{
  float result;

  a1[128] = a1[122] * a2;
  result = a1[126];
  a1[129] = result;
  return result;
}

float sub_207D92CF4(uint64_t a1)
{
  float result;

  *(_DWORD *)(a1 + 512) = *(_DWORD *)(a1 + 492);
  result = *(float *)(a1 + 504);
  *(float *)(a1 + 516) = result;
  return result;
}

uint64_t sub_207D92D08(uint64_t result, float a2, double a3, double a4, float a5)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  std::locale v17;

  if (*(_BYTE *)(result + 16))
  {
    sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"[iter][old->new][delta < ptol][grad < gtol][delta < ctol][lambda][", 66);
    v7 = (_QWORD *)std::ostream::operator<<();
    sub_207CBAB98(v7, (uint64_t)"][", 2);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_207CBAB98(v8, (uint64_t)"->", 2);
    v9 = (_QWORD *)std::ostream::operator<<();
    sub_207CBAB98(v9, (uint64_t)"][", 2);
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_207CBAB98(v10, (uint64_t)" < ", 3);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_207CBAB98(v11, (uint64_t)"][", 2);
    if (a5 == 0.0)
      sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
    else
      std::ostream::operator<<();
    sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
    v12 = (_QWORD *)std::ostream::operator<<();
    sub_207CBAB98(v12, (uint64_t)"][", 2);
    if (a2 == 0.0)
      sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
    else
      std::ostream::operator<<();
    sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
    v13 = (_QWORD *)std::ostream::operator<<();
    sub_207CBAB98(v13, (uint64_t)"][", 2);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = sub_207CBAB98(v14, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v17, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_207D92F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_207D92F4C(uint64_t a1, uint64_t a2, float **a3, float a4)
{
  uint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  unint64_t v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float *v20;
  unint64_t v21;
  float *v22;
  unint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;

  v4 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v4)
  {
    v7 = 0.0;
    v8 = 0.0;
    goto LABEL_18;
  }
  v5 = *(float **)a2;
  v6 = **(float **)a2;
  v7 = v6 * v6;
  if ((_DWORD)v4 == 1)
  {
    v8 = v6 * **a3;
    goto LABEL_18;
  }
  v9 = &v5[v4];
  v10 = v5 + 1;
  v11 = (v4 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
  if (v11 < 7)
  {
    v12 = v5 + 1;
    do
    {
LABEL_10:
      v19 = *v12++;
      v7 = v7 + (float)(v19 * v19);
    }
    while (v12 != v9);
    goto LABEL_11;
  }
  v13 = v11 + 1;
  v14 = (v11 + 1) & 0x7FFFFFFFFFFFFFF8;
  v12 = &v10[v14];
  v15 = (float32x4_t *)(v5 + 5);
  v16 = v14;
  do
  {
    v17 = vmulq_f32(v15[-1], v15[-1]);
    v18 = vmulq_f32(*v15, *v15);
    v7 = (float)((float)((float)((float)((float)((float)((float)(v7 + v17.f32[0]) + v17.f32[1]) + v17.f32[2])
                                       + v17.f32[3])
                               + v18.f32[0])
                       + v18.f32[1])
               + v18.f32[2])
       + v18.f32[3];
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v13 != v14)
    goto LABEL_10;
LABEL_11:
  v20 = *a3;
  v8 = v6 * **a3;
  v21 = (v4 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
  if (v21 < 7)
  {
    v22 = *a3;
LABEL_16:
    v30 = v22 + 1;
    do
    {
      v31 = *v10++;
      v32 = v31;
      v33 = *v30++;
      v8 = v8 + (float)(v32 * v33);
    }
    while (v10 != v9);
    goto LABEL_18;
  }
  v23 = v21 + 1;
  v24 = (v21 + 1) & 0x7FFFFFFFFFFFFFF8;
  v10 += v24;
  v22 = &v20[v24];
  v25 = (float32x4_t *)(v20 + 5);
  v26 = (float32x4_t *)(v5 + 5);
  v27 = v24;
  do
  {
    v28 = vmulq_f32(v26[-1], v25[-1]);
    v29 = vmulq_f32(*v26, *v25);
    v8 = (float)((float)((float)((float)((float)((float)((float)(v8 + v28.f32[0]) + v28.f32[1]) + v28.f32[2])
                                       + v28.f32[3])
                               + v29.f32[0])
                       + v29.f32[1])
               + v29.f32[2])
       + v29.f32[3];
    v25 += 2;
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  if (v23 != v24)
    goto LABEL_16;
LABEL_18:
  v34 = *(float *)(a1 + 512);
  v35 = *(float *)(a1 + 456) - a4;
  if (v35 < 0.0)
  {
    v39 = *(float *)(a1 + 516);
    *(float *)(a1 + 512) = v34 * v39;
    *(float *)(a1 + 516) = v39 * *(float *)(a1 + 508);
    return 0;
  }
  else
  {
    v36 = *(float *)(a1 + 500) * (float)(fabsf(v34 * v7) + fabsf(v8));
    if (v36 <= 0.0)
    {
      v38 = 0.33333;
    }
    else
    {
      v37 = 1.0
          - (float)((float)((float)((float)(v35 / v36) + (float)(v35 / v36)) + -1.0)
                  * (float)((float)((float)((float)(v35 / v36) + (float)(v35 / v36)) + -1.0)
                          * (float)((float)((float)(v35 / v36) + (float)(v35 / v36)) + -1.0)));
      if (v37 > 0.66667)
        v37 = 0.66667;
      v38 = fmaxf(v37, 0.33333);
    }
    *(float *)(a1 + 512) = v34 * v38;
    *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 504);
    *(float *)(a1 + 456) = a4;
    return v35 >= 0.0;
  }
}

BOOL sub_207D931B8(uint64_t a1, uint64_t a2, float **a3, float **a4, float a5)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float *v12;
  unint64_t v13;
  float *v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;

  v5 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v5)
  {
    v9 = 0.0;
    v10 = 0.0;
    goto LABEL_19;
  }
  v6 = *(float **)a2;
  v7 = *a4;
  v8 = **(float **)a2;
  v9 = (float)(v8 * v8) * **a4;
  if ((_DWORD)v5 == 1)
  {
    v10 = v8 * **a3;
    goto LABEL_19;
  }
  v11 = &v6[v5];
  v12 = v6 + 1;
  v13 = (v5 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
  if (v13 < 7)
  {
    v14 = v6 + 1;
    v15 = *a4;
LABEL_10:
    v23 = v15 + 1;
    do
    {
      v24 = *v14++;
      v25 = v24 * v24;
      v26 = *v23++;
      v9 = v9 + (float)(v25 * v26);
    }
    while (v14 != v11);
    goto LABEL_12;
  }
  v16 = v13 + 1;
  v17 = (v13 + 1) & 0x7FFFFFFFFFFFFFF8;
  v14 = &v12[v17];
  v15 = &v7[v17];
  v18 = (float32x4_t *)(v7 + 5);
  v19 = (float32x4_t *)(v6 + 5);
  v20 = v17;
  do
  {
    v21 = vmulq_f32(vmulq_f32(v19[-1], v19[-1]), v18[-1]);
    v22 = vmulq_f32(vmulq_f32(*v19, *v19), *v18);
    v9 = (float)((float)((float)((float)((float)((float)((float)(v9 + v21.f32[0]) + v21.f32[1]) + v21.f32[2])
                                       + v21.f32[3])
                               + v22.f32[0])
                       + v22.f32[1])
               + v22.f32[2])
       + v22.f32[3];
    v18 += 2;
    v19 += 2;
    v20 -= 8;
  }
  while (v20);
  if (v16 != v17)
    goto LABEL_10;
LABEL_12:
  v27 = *a3;
  v10 = v8 * **a3;
  v28 = (v5 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
  if (v28 < 7)
  {
    v29 = *a3;
LABEL_17:
    v37 = v29 + 1;
    do
    {
      v38 = *v12++;
      v39 = v38;
      v40 = *v37++;
      v10 = v10 + (float)(v39 * v40);
    }
    while (v12 != v11);
    goto LABEL_19;
  }
  v30 = v28 + 1;
  v31 = (v28 + 1) & 0x7FFFFFFFFFFFFFF8;
  v12 += v31;
  v29 = &v27[v31];
  v32 = (float32x4_t *)(v27 + 5);
  v33 = (float32x4_t *)(v6 + 5);
  v34 = v31;
  do
  {
    v35 = vmulq_f32(v33[-1], v32[-1]);
    v36 = vmulq_f32(*v33, *v32);
    v10 = (float)((float)((float)((float)((float)((float)((float)(v10 + v35.f32[0]) + v35.f32[1]) + v35.f32[2])
                                        + v35.f32[3])
                                + v36.f32[0])
                        + v36.f32[1])
                + v36.f32[2])
        + v36.f32[3];
    v32 += 2;
    v33 += 2;
    v34 -= 8;
  }
  while (v34);
  if (v30 != v31)
    goto LABEL_17;
LABEL_19:
  v41 = *(float *)(a1 + 512);
  v42 = *(float *)(a1 + 456) - a5;
  if (v42 < 0.0)
  {
    v46 = *(float *)(a1 + 516);
    *(float *)(a1 + 512) = v41 * v46;
    *(float *)(a1 + 516) = v46 * *(float *)(a1 + 508);
    return 0;
  }
  else
  {
    v43 = *(float *)(a1 + 500) * (float)(fabsf(v41 * v9) + fabsf(v10));
    if (v43 <= 0.0)
    {
      v45 = 0.33333;
    }
    else
    {
      v44 = 1.0
          - (float)((float)((float)((float)(v42 / v43) + (float)(v42 / v43)) + -1.0)
                  * (float)((float)((float)((float)(v42 / v43) + (float)(v42 / v43)) + -1.0)
                          * (float)((float)((float)(v42 / v43) + (float)(v42 / v43)) + -1.0)));
      if (v44 > 0.66667)
        v44 = 0.66667;
      v45 = fmaxf(v44, 0.33333);
    }
    *(float *)(a1 + 512) = v41 * v45;
    *(_DWORD *)(a1 + 516) = *(_DWORD *)(a1 + 504);
    *(float *)(a1 + 456) = a5;
    return v42 >= 0.0;
  }
}

uint64_t sub_207D93464()
{
  return 0;
}

uint64_t sub_207D9346C()
{
  return 1;
}

uint64_t sub_207D93474(float a1, double a2, double a3, float a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"[iter][old->new][delta < ptol][grad < gtol][delta < ctol][", 58);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v6, (uint64_t)"][", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v7, (uint64_t)"->", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v8, (uint64_t)"][", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v9, (uint64_t)" < ", 3);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v10, (uint64_t)"][", 2);
  if (a4 == 0.0)
    sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
  else
    std::ostream::operator<<();
  sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v11, (uint64_t)"][", 2);
  if (a1 == 0.0)
    sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
  else
    std::ostream::operator<<();
  sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_207CBAB98(v12, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_207D93684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D93698(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_207D936D8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 288) = a1 + 32;
  *(_OWORD *)(a1 + 296) = xmmword_2082352F0;
  v5 = *(_QWORD *)(a2 + 288);
  v6 = *(_QWORD *)(a2 + 304);
  v7 = v6 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x3FFFFFFFFFFFFFFFuLL) < 0x41)
  {
    v8 = (char *)(a1 + 32);
    if (!v6)
      goto LABEL_15;
  }
  else
  {
    if (v7 <= 0x80)
      v7 = 128;
    *(_QWORD *)(a1 + 296) = v7;
    v8 = (char *)operator new[](4 * v7);
    *(_QWORD *)(a1 + 288) = v8;
  }
  v9 = 0;
  v10 = (v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v10 < 7)
  {
    v11 = (int *)v5;
  }
  else
  {
    v11 = (int *)v5;
    if ((unint64_t)&v8[-v5] >= 0x20)
    {
      v12 = v10 + 1;
      v9 = v12 & 0x7FFFFFFFFFFFFFF8;
      v11 = (int *)(v5 + 4 * (v12 & 0x7FFFFFFFFFFFFFF8));
      v13 = v8 + 16;
      v14 = (__int128 *)(v5 + 16);
      v15 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v12 == v9)
        goto LABEL_14;
    }
  }
  do
  {
    v17 = *v11++;
    *(_DWORD *)&v8[4 * v9++] = v17;
  }
  while (v11 != (int *)(v5 + 4 * v6));
LABEL_14:
  *(_QWORD *)(a1 + 304) = v9;
LABEL_15:
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  v18 = *(_QWORD *)(a2 + 344);
  if (!v18)
  {
LABEL_18:
    *(_QWORD *)(a1 + 344) = v18;
    goto LABEL_20;
  }
  if (v18 != a2 + 320)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 344) = a1 + 320;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 344) + 24))(*(_QWORD *)(a2 + 344), a1 + 320);
LABEL_20:
  v19 = *(_QWORD *)(a2 + 376);
  if (!v19)
  {
LABEL_23:
    *(_QWORD *)(a1 + 376) = v19;
    goto LABEL_25;
  }
  if (v19 != a2 + 352)
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    goto LABEL_23;
  }
  *(_QWORD *)(a1 + 376) = a1 + 352;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 376) + 24))(*(_QWORD *)(a2 + 376), a1 + 352);
LABEL_25:
  v20 = *(_QWORD *)(a2 + 408);
  if (!v20)
  {
LABEL_28:
    *(_QWORD *)(a1 + 408) = v20;
    goto LABEL_30;
  }
  if (v20 != a2 + 384)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    goto LABEL_28;
  }
  *(_QWORD *)(a1 + 408) = a1 + 384;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 408) + 24))(*(_QWORD *)(a2 + 408), a1 + 384);
LABEL_30:
  v21 = *(_QWORD *)(a2 + 440);
  if (!v21)
  {
LABEL_33:
    *(_QWORD *)(a1 + 440) = v21;
    return a1;
  }
  if (v21 != a2 + 416)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    goto LABEL_33;
  }
  *(_QWORD *)(a1 + 440) = a1 + 416;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 440) + 24))(*(_QWORD *)(a2 + 440));
  return a1;
}

void sub_207D93910(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;

  v7 = (_QWORD *)v1[51];
  if (v7 == v4)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
    v4 = (_QWORD *)v1[51];
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v8))(v4);
LABEL_6:
  v9 = (_QWORD *)v1[47];
  if (v9 == v3)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
    v3 = (_QWORD *)v1[47];
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v10))(v3);
LABEL_11:
  v11 = (_QWORD *)v1[43];
  if (v11 == v2)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_16;
    v12 = 5;
    v2 = (_QWORD *)v1[43];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v12))(v2);
LABEL_16:
  v1[38] = 0;
  v13 = (void *)v1[36];
  if (v13 != v5)
  {
    if (v13)
      operator delete[](v13);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207D939DC(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  *a1 = off_24C074500;
  v2 = (void *)a1[58];
  if (v2)
    operator delete[](v2);
  v3 = (_QWORD *)a1[56];
  if (v3 == a1 + 53)
  {
    v4 = 4;
    v3 = a1 + 53;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = (_QWORD *)a1[52];
  if (v5 == a1 + 49)
  {
    v6 = 4;
    v5 = a1 + 49;
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = (_QWORD *)a1[48];
  if (v7 == a1 + 45)
  {
    v8 = 4;
    v7 = a1 + 45;
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  v9 = (_QWORD *)a1[44];
  if (v9 == a1 + 41)
  {
    v10 = 4;
    v9 = a1 + 41;
    goto LABEL_22;
  }
  if (v9)
  {
    v10 = 5;
LABEL_22:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  a1[39] = 0;
  v11 = (_QWORD *)a1[37];
  if (v11 != a1 + 5 && v11)
    operator delete[](v11);
  return a1;
}

uint64_t sub_207D93AF0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_207D93B7C(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  unint64_t v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;

  v4 = a1[145];
  if (v4 < a2)
  {
    v7 = (char *)(a1 + 80);
    v8 = a1[146];
    v9 = 2 * v4;
    if (v9 <= a2)
      v9 = a2;
    a1[145] = v9;
    v10 = (char *)a1[144];
    v11 = (char *)operator new[](8 * v9);
    v12 = v11;
    if (v8)
    {
      v13 = 0;
      if (v8 < 4)
        goto LABEL_14;
      if ((unint64_t)(v11 - v10) < 0x20)
        goto LABEL_14;
      v13 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = v11 + 16;
      v15 = (__int128 *)(v10 + 16);
      v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v8 != v13)
      {
LABEL_14:
        v18 = v8 - v13;
        v19 = 8 * v13;
        v20 = &v10[8 * v13];
        v21 = &v11[v19];
        do
        {
          v22 = *(_QWORD *)v20;
          v20 += 8;
          *(_QWORD *)v21 = v22;
          v21 += 8;
          --v18;
        }
        while (v18);
      }
    }
    if (v10 != v7 && v10)
      operator delete[](v10);
    a1[144] = v12;
    if (a1[214])
    {
LABEL_3:
      v5 = a1[42];
      if (v5 >= a2)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if (a1[214])
  {
    goto LABEL_3;
  }
  v23 = a1[215];
  a1[214] = 1;
  v24 = (char *)a1[213];
  v25 = (char *)operator new[](8uLL);
  v26 = v25;
  if (v23)
  {
    v27 = 0;
    if (v23 < 4)
      goto LABEL_26;
    if ((unint64_t)(v25 - v24) < 0x20)
      goto LABEL_26;
    v27 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    v28 = v25 + 16;
    v29 = (__int128 *)(v24 + 16);
    v30 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *v29;
      *(v28 - 1) = *(v29 - 1);
      *v28 = v31;
      v28 += 2;
      v29 += 2;
      v30 -= 4;
    }
    while (v30);
    if (v23 != v27)
    {
LABEL_26:
      v32 = v23 - v27;
      v33 = 8 * v27;
      v34 = &v24[8 * v27];
      v35 = &v25[v33];
      do
      {
        v36 = *(_QWORD *)v34;
        v34 += 8;
        *(_QWORD *)v35 = v36;
        v35 += 8;
        --v32;
      }
      while (v32);
    }
  }
  if (v24 != (char *)(a1 + 149) && v24)
    operator delete[](v24);
  a1[213] = v26;
  v5 = a1[42];
  if (v5 >= a2)
  {
LABEL_4:
    v6 = a1[77];
    if (v6 >= a2)
      return;
    goto LABEL_46;
  }
LABEL_32:
  v37 = a1[43];
  v38 = 2 * v5;
  if (v38 <= a2)
    v38 = a2;
  a1[42] = v38;
  v39 = (char *)a1[41];
  v40 = (char *)operator new[](4 * v38);
  v41 = v40;
  if (v37)
  {
    v42 = 0;
    if (v37 < 8)
      goto LABEL_40;
    if ((unint64_t)(v40 - v39) < 0x20)
      goto LABEL_40;
    v42 = v37 & 0xFFFFFFFFFFFFFFF8;
    v43 = v40 + 16;
    v44 = (__int128 *)(v39 + 16);
    v45 = v37 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v46 = *v44;
      *(v43 - 1) = *(v44 - 1);
      *v43 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 8;
    }
    while (v45);
    if (v37 != v42)
    {
LABEL_40:
      v47 = v37 - v42;
      v48 = 4 * v42;
      v49 = &v39[4 * v42];
      v50 = &v40[v48];
      do
      {
        v51 = *(_DWORD *)v49;
        v49 += 4;
        *(_DWORD *)v50 = v51;
        v50 += 4;
        --v47;
      }
      while (v47);
    }
  }
  if (v39 != (char *)(a1 + 9) && v39)
    operator delete[](v39);
  a1[41] = v41;
  v6 = a1[77];
  if (v6 < a2)
  {
LABEL_46:
    v52 = a1[78];
    v53 = 2 * v6;
    if (v53 <= a2)
      v53 = a2;
    a1[77] = v53;
    v54 = (char *)a1[76];
    v55 = (char *)operator new[](4 * v53);
    v56 = v55;
    if (v52)
    {
      v57 = 0;
      if (v52 < 8)
        goto LABEL_54;
      if ((unint64_t)(v55 - v54) < 0x20)
        goto LABEL_54;
      v57 = v52 & 0xFFFFFFFFFFFFFFF8;
      v58 = v55 + 16;
      v59 = (__int128 *)(v54 + 16);
      v60 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v61 = *v59;
        *(v58 - 1) = *(v59 - 1);
        *v58 = v61;
        v58 += 2;
        v59 += 2;
        v60 -= 8;
      }
      while (v60);
      if (v52 != v57)
      {
LABEL_54:
        v62 = v52 - v57;
        v63 = 4 * v57;
        v64 = &v54[4 * v57];
        v65 = &v55[v63];
        do
        {
          v66 = *(_DWORD *)v64;
          v64 += 4;
          *(_DWORD *)v65 = v66;
          v65 += 4;
          --v62;
        }
        while (v62);
      }
    }
    if (v54 != (char *)(a1 + 44))
    {
      if (v54)
        operator delete[](v54);
    }
    a1[76] = v56;
  }
}

void sub_207D93EB4(uint64_t a1, float **a2, char a3, float32x4_t a4, float32x4_t a5, int32x4_t a6, double a7, float32x2_t a8, double a9, float32x2_t a10)
{
  float v12;
  float v13;
  float v14;

  sub_207D94D48(a1, &v14, a2, a4, a5, a6, a7, a8, a9, a10);
  v12 = 1.0;
  v13 = 1.0;
  if ((a3 & 1) == 0)
  {
    v12 = v14;
    if (v14 <= 0.0)
    {
      v13 = 1.0e20;
      v12 = 1.0e-10;
    }
    else
    {
      v13 = 1.0 / (float)(v14 * v14);
    }
  }
  *(float *)(a1 + 8) = v12;
  *(float *)(a1 + 12) = v13;
  *(_BYTE *)(a1 + 269) = 0;
  *(_DWORD *)(a1 + 264) = 0;
}

float sub_207D93F34(uint64_t a1, _QWORD *a2)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  int32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  _DWORD *v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float i;
  unint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  int32x2_t *v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x2_t v44;
  float32x2_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  uint64_t v51;

  kdebug_trace();
  if (!a2[34])
  {
    if (a2[33])
    {
      v13 = (_DWORD *)a2[32];
    }
    else
    {
      a2[33] = 1;
      v14 = (_QWORD *)a2[32];
      v15 = operator new[](4uLL);
      v13 = v15;
      if (v14 == a2 || !v14)
      {
        a2[32] = v15;
      }
      else
      {
        operator delete[](v14);
        v16 = a2[34];
        a2[32] = v13;
        if (v16)
          goto LABEL_10;
      }
    }
    *v13 = 0;
  }
LABEL_10:
  a2[34] = 1;
  v18 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  if (*(_BYTE *)(a1 + 268))
  {
    if (v18 == v17)
    {
      i = 0.0;
    }
    else if (*(_BYTE *)(a1 + 267))
    {
      v19 = v17 - v18 - 104;
      i = 0.0;
      if (v19 < 0x68)
        goto LABEL_35;
      v21 = v19 / 0x68 + 1;
      v22 = (float *)(v18 + 176);
      v23 = v21 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        v24 = *(v22 - 26);
        v25 = *v22;
        v22 += 52;
        i = (float)(i + v24) + v25;
        v23 -= 2;
      }
      while (v23);
      v18 += 104 * (v21 & 0x7FFFFFFFFFFFFFELL);
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          i = i + *(float *)(v18 + 72);
          v18 += 104;
        }
        while (v18 != v17);
      }
    }
    else
    {
      i = 0.0;
      do
      {
        if (*(_BYTE *)(v18 + 76))
        {
          v51 = *(_QWORD *)(v18 + 56);
          *(_QWORD *)(v18 + 64) = v51;
          v5.i32[0] = HIDWORD(v51);
          v4.i32[0] = v51;
          *(float32x2_t *)v4.f32 = vmla_f32(vmul_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), *(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32);
          v4.f32[0] = *(float *)(a1 + 12) * v4.f32[0];
          *(_DWORD *)(v18 + 72) = v4.i32[0];
          i = i + v4.f32[0];
        }
        v18 += 104;
      }
      while (v18 != v17);
    }
  }
  else
  {
    for (i = 0.0; v18 != v17; v18 += 104)
    {
      while (1)
      {
        v26 = *(float32x2_t **)(v18 + 48);
        *(float32x2_t *)v4.f32 = v26[10];
        v4.i32[2] = v26[11].i32[0];
        *(float32x2_t *)v5.f32 = v26[12];
        v5.i32[2] = v26[13].i32[0];
        v27 = v26[4];
        v6.i32[0] = v26[5].i32[0];
        v28 = v26[6];
        v7.i32[0] = v26[7].i32[0];
        v29 = v26[8];
        v8.i32[0] = v26[9].i32[0];
        v30 = vmlaq_n_f32(v4, v5, v26[17].f32[0]);
        v31 = *(float32x2_t *)(v18 + 16);
        v32 = (int32x2_t *)(*(_QWORD *)&v26[14] + (*(_QWORD *)(v18 + 40) << 6));
        *(int32x2_t *)v5.f32 = *v32;
        *(int32x2_t *)v9.i8 = v32[2];
        v33 = (float32x2_t)vzip1_s32(*v32, *(int32x2_t *)v9.i8);
        v5.i32[2] = v32[1].i32[0];
        v10.i32[0] = *(_DWORD *)(v18 + 24);
        v9.i32[2] = v32[3].i32[0];
        v11.i32[0] = v32[5].i32[0];
        v34 = (float32x2_t)v32[4];
        v35 = (float32x2_t)vtrn2q_s32((int32x4_t)v5, v9).u64[0];
        v36 = (int8x16_t)vdupq_lane_s32((int32x2_t)v35, 1);
        v37 = (int8x16_t)vdupq_lane_s32((int32x2_t)v35, 0);
        v9 = vzip2q_s32((int32x4_t)v5, v9);
        *(int32x2_t *)v12.f32 = v32[6];
        v12.i32[2] = v32[7].i32[0];
        v38 = (int8x16_t)vnegq_f32(v12);
        *(float32x2_t *)v39.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v33, *(float *)v38.i32), v35, *(float32x2_t *)v12.f32, 1), *(float32x2_t *)v9.i8, v12, 2);
        v40 = vmls_lane_f32(vmul_f32(v34, *(float32x2_t *)v38.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1), *(float32x2_t *)v12.f32, 1);
        v12 = (float32x4_t)vextq_s8(v38, v38, 8uLL);
        v41 = vmla_f32(v40, *(float32x2_t *)v12.f32, v11);
        *(float32x2_t *)v42.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v27, v31.f32[0]), v28, v31, 1), v29, v10.f32[0]);
        *(float32x2_t *)&v42.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v6, v31), v7, v31, 1), v10, v8);
        v43 = (int8x16_t)vaddq_f32(v30, v42);
        *(float32x2_t *)v42.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v33, *(float *)v43.i32), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v36, 0xCuLL), *(float32x2_t *)v43.i8, 1), *(float32x2_t *)v9.i8, (float32x4_t)v43, 2);
        v44 = vmla_lane_f32(vmul_f32(v34, *(float32x2_t *)v43.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), v34, 1);
        v4 = (float32x4_t)vextq_s8(v43, v43, 8uLL);
        v45 = vmla_f32(v44, *(float32x2_t *)v4.f32, v11);
        v6 = *(float32x2_t *)(v18 + 28);
        *(float32x2_t *)v4.f32 = vsub_f32(vdiv_f32(vadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v39.f32), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v45, v41), 0)), v6);
        *(_QWORD *)(v18 + 64) = v4.i64[0];
        *(float32x2_t *)&v39.u32[2] = v41;
        *(float32x2_t *)&v42.u32[2] = v45;
        v5 = vaddq_f32(v42, v39);
        *(_BYTE *)(v18 + 76) = v5.f32[2] > 0.0;
        if (v5.f32[2] > 0.0)
          break;
        *(_DWORD *)(v18 + 72) = 0;
        v18 += 104;
        if (v18 == v17)
          goto LABEL_28;
      }
      v46 = *(_QWORD *)(v18 + 80);
      if (v46)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 24))(v46, v18 + 64);
        v4.i64[0] = *(_QWORD *)(v18 + 64);
      }
      *(_QWORD *)(v18 + 56) = v4.i64[0];
      v47 = *(float *)(a1 + 12)
          * vmla_lane_f32(vmul_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.f32, 1), *(float32x2_t *)v4.f32, 1).f32[0];
      *(float *)(v18 + 72) = v47;
      i = i + v47;
    }
  }
LABEL_28:
  *(float *)a2[32] = i * 0.5;
  *(_WORD *)(a1 + 267) = 257;
  v48 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v49 = *(float *)a2[32];
  kdebug_trace();
  return v48 + v49;
}

void sub_207D942CC(_Unwind_Exception *a1)
{
  sub_207D95234();
  _Unwind_Resume(a1);
}

void sub_207D942E0(_Unwind_Exception *a1)
{
  sub_207D95234();
  _Unwind_Resume(a1);
}

void sub_207D942F0(_Unwind_Exception *a1)
{
  sub_207D95234();
  _Unwind_Resume(a1);
}

uint64_t sub_207D94300()
{
  return kdebug_trace();
}

void sub_207D94330(uint64_t a1, float *a2, int a3, float32x4_t a4, float32x4_t a5, int32x4_t a6, double a7, float32x2_t a8, double a9, float32x2_t a10)
{
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  float32x4_t *v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float32x4_t v21[16];
  void *__p;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  __p = v21;
  v23 = 64;
  v13 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3);
  if (v13 >= 0x41)
  {
    if (v13 <= 0x80)
      v13 = 128;
    v23 = v13;
    if (v13 >> 62)
      v14 = -1;
    else
      v14 = 4 * v13;
    __p = operator new[](v14);
  }
  v24 = 0;
  if (*(_BYTE *)(a1 + 268))
  {
    v25 = a1 + 16;
    sub_207D944C8((uint64_t)&v25, (char *)v21);
  }
  else
  {
    v25 = a1 + 16;
    sub_207D9467C((uint64_t)&v25, v21, a4, a5, a6, a7, a8, a9, a10);
  }
  v15 = v24;
  v16 = (float32x4_t *)__p;
  if (!v24)
  {
    *a2 = 1.0;
    v24 = 0;
    if (v16 == v21)
      return;
    goto LABEL_19;
  }
  v17 = *(float *)&a3;
  v18 = 4 * (v24 >> 1);
  sub_207D949A0((float *)__p, (float *)((char *)__p + v18), (float *)__p + v24);
  v16 = (float32x4_t *)__p;
  v19 = *(float *)((char *)__p + v18);
  if ((v15 & 1) == 0)
  {
    v20 = (v15 >> 1) - 1;
    if (v20 != v15)
    {
      sub_207D949A0((float *)__p, (float *)__p + v20, (float *)__p + v15);
      v16 = (float32x4_t *)__p;
    }
    v19 = (float)(v19 + v16->f32[v20]) * 0.5;
  }
  *a2 = sqrtf(v19) * v17;
  v24 = 0;
  if (v16 != v21)
  {
LABEL_19:
    if (v16)
      operator delete[](v16);
  }
}

void sub_207D944A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *__p,uint64_t a42,uint64_t a43)
{
  a43 = 0;
  if (__p != &a9)
  {
    if (__p)
      operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D944C8(uint64_t a1, char *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  float32x2_t *v26;
  float32x2_t *v27;
  char *v28;

  v4 = *((_QWORD *)a2 + 34);
  v5 = v4
     + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
  if (v4 >= v5)
    goto LABEL_23;
  v6 = *((_QWORD *)a2 + 33);
  if (v6 >= v5)
  {
    v22 = *((_QWORD *)a2 + 34);
    v23 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
    if (v5 <= v4)
      goto LABEL_23;
LABEL_22:
    bzero((void *)(*((_QWORD *)a2 + 32) + 4 * v22), 4 * v23);
    goto LABEL_23;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
  *((_QWORD *)a2 + 33) = v7;
  v8 = (char *)*((_QWORD *)a2 + 32);
  if (v7 >> 62)
    v9 = -1;
  else
    v9 = 4 * v7;
  v10 = (char *)operator new[](v9);
  v11 = v10;
  if (v4)
  {
    v12 = 0;
    if (v4 < 8)
      goto LABEL_14;
    if ((unint64_t)(v10 - v8) < 0x20)
      goto LABEL_14;
    v12 = v4 & 0xFFFFFFFFFFFFFFF8;
    v13 = v10 + 16;
    v14 = (__int128 *)(v8 + 16);
    v15 = v4 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v16 = *v14;
      *(v13 - 1) = *(v14 - 1);
      *v13 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v4 != v12)
    {
LABEL_14:
      v17 = v4 - v12;
      v18 = 4 * v12;
      v19 = &v8[4 * v12];
      v20 = &v10[v18];
      do
      {
        v21 = *(_DWORD *)v19;
        v19 += 4;
        *(_DWORD *)v20 = v21;
        v20 += 4;
        --v17;
      }
      while (v17);
    }
  }
  v22 = v4;
  if (v8 != a2 && v8)
  {
    operator delete[](v8);
    v22 = *((_QWORD *)a2 + 34);
  }
  *((_QWORD *)a2 + 32) = v11;
  v23 = v5 - v22;
  if (v5 > v22)
    goto LABEL_22;
LABEL_23:
  *((_QWORD *)a2 + 34) = v5;
  v24 = *((_QWORD *)a2 + 32);
  v25 = (char *)(v24 + 4 * v4);
  v26 = *(float32x2_t **)(*(_QWORD *)a1 + 96);
  v27 = *(float32x2_t **)(*(_QWORD *)a1 + 104);
  while (v26 != v27)
  {
    if (v26[9].i8[4])
    {
      *(_DWORD *)v25 = vmla_lane_f32(vmul_f32(v26[7], v26[7]), (float32x2_t)vdup_lane_s32((int32x2_t)v26[7], 1), v26[7], 1).u32[0];
      v25 += 4;
    }
    v26 += 13;
  }
  v28 = (char *)(v24 + 4 * v5);
  if (v25 != v28)
    *((_QWORD *)a2 + 34) = v5 + ~((unint64_t)(v28 - v25 - 4) >> 2);
}

void sub_207D9467C(uint64_t a1, float32x4_t *a2, float32x4_t a3, float32x4_t a4, int32x4_t a5, double a6, float32x2_t a7, double a8, float32x2_t a9)
{
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t *v18;
  size_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  float32x4_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int32 *v28;
  __n128 *v29;
  unsigned __int32 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x2_t v42;
  int32x2_t *v43;
  float32x2_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x2_t v53;
  uint64_t v54;
  char *v55;
  float32x2_t v56;
  BOOL v57;

  v14 = a2[17].u64[0];
  v15 = v14
      + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
  if (v14 >= v15)
    goto LABEL_23;
  v16 = a2[16].u64[1];
  if (v16 >= v15)
  {
    v31 = a2[17].u64[0];
    v32 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
    if (v15 <= v14)
      goto LABEL_23;
    goto LABEL_22;
  }
  v17 = 2 * v16;
  if (v17 <= v15)
    v17 = v14
        + 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
  a2[16].i64[1] = v17;
  v18 = (float32x4_t *)a2[16].i64[0];
  if (v17 >> 62)
    v19 = -1;
  else
    v19 = 4 * v17;
  v20 = (__n128 *)operator new[](v19);
  v21 = v20;
  if (v14)
  {
    v22 = 0;
    if (v14 < 8)
      goto LABEL_14;
    if ((unint64_t)((char *)v20 - (char *)v18) < 0x20)
      goto LABEL_14;
    v22 = v14 & 0xFFFFFFFFFFFFFFF8;
    v23 = v20 + 1;
    v24 = v18 + 1;
    v25 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      a3 = v24[-1];
      a4 = *v24;
      v23[-1] = (__n128)a3;
      *v23 = (__n128)a4;
      v23 += 2;
      v24 += 2;
      v25 -= 8;
    }
    while (v25);
    if (v14 != v22)
    {
LABEL_14:
      v26 = v14 - v22;
      v27 = 4 * v22;
      v28 = &v18->i32[v22];
      v29 = (__n128 *)((char *)v20 + v27);
      do
      {
        v30 = *v28++;
        v29->n128_u32[0] = v30;
        v29 = (__n128 *)((char *)v29 + 4);
        --v26;
      }
      while (v26);
    }
  }
  v31 = v14;
  if (v18 != a2 && v18)
  {
    operator delete[](v18);
    v31 = a2[17].u64[0];
  }
  a2[16].i64[0] = (uint64_t)v21;
  v32 = v15 - v31;
  if (v15 > v31)
LABEL_22:
    bzero((void *)(a2[16].i64[0] + 4 * v31), 4 * v32);
LABEL_23:
  a2[17].i64[0] = v15;
  v33 = a2[16].i64[0];
  v34 = (char *)(v33 + 4 * v14);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v36 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  if (v35 == v36)
    goto LABEL_32;
  do
  {
    v37 = *(float32x2_t **)(v35 + 48);
    *(float32x2_t *)a3.f32 = v37[10];
    a3.i32[2] = v37[11].i32[0];
    *(float32x2_t *)a4.f32 = v37[12];
    a4.i32[2] = v37[13].i32[0];
    v38 = v37[4];
    a7.i32[0] = v37[5].i32[0];
    v39 = v37[6];
    a9.i32[0] = v37[7].i32[0];
    v40 = v37[8];
    v9.i32[0] = v37[9].i32[0];
    v41 = vmlaq_n_f32(a3, a4, v37[17].f32[0]);
    v42 = *(float32x2_t *)(v35 + 16);
    v10.i32[0] = *(_DWORD *)(v35 + 24);
    v43 = (int32x2_t *)(*(_QWORD *)&v37[14] + (*(_QWORD *)(v35 + 40) << 6));
    *(int32x2_t *)a4.f32 = *v43;
    *(int32x2_t *)a5.i8 = v43[2];
    v44 = (float32x2_t)vzip1_s32(*v43, *(int32x2_t *)a5.i8);
    v45 = (int32x4_t)a4;
    v45.i32[2] = v43[1].i32[0];
    v46 = a5;
    v46.i32[2] = v43[3].i32[0];
    a4.i32[0] = v43[5].i32[0];
    v47 = (float32x2_t)v43[4];
    v48 = (float32x2_t)vtrn2q_s32(v45, v46).u64[0];
    v45.i64[0] = vzip2q_s32(v45, v46).u64[0];
    *(int32x2_t *)v11.f32 = v43[6];
    v11.i32[2] = v43[7].i32[0];
    v49 = (int8x16_t)vnegq_f32(v11);
    *(float32x2_t *)v50.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v44, *(float *)v49.i32), v48, *(float32x2_t *)v11.f32, 1), *(float32x2_t *)v45.i8, v11, 2);
    *(float32x2_t *)v51.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v38, v42.f32[0]), v39, v42, 1), v40, v10.f32[0]);
    *(float32x2_t *)&v51.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a7, v42), a9, v42, 1), v10, v9);
    v52 = (int8x16_t)vaddq_f32(v41, v51);
    *(float32x2_t *)v51.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v44, *(float *)v52.i32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v48, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v48, 1), 0xCuLL), *(float32x2_t *)v52.i8, 1), *(float32x2_t *)v45.i8, (float32x4_t)v52, 2);
    a7 = vadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v50.f32);
    *(float32x2_t *)&v50.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v47, *(float32x2_t *)v49.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1), *(float32x2_t *)v11.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), *(float32x2_t *)a4.f32);
    a9 = vmla_f32(vmla_lane_f32(vmul_f32(v47, *(float32x2_t *)v52.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1), v47, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), *(float32x2_t *)a4.f32);
    *(float32x2_t *)&v51.u32[2] = a9;
    a3 = vaddq_f32(v51, v50);
    a3.i32[0] = a3.i32[2];
    v53 = vsub_f32(vdiv_f32(a7, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(a9, *(float32x2_t *)&v50.u32[2]), 0)), *(float32x2_t *)(v35 + 28));
    v56 = v53;
    v57 = a3.f32[2] > 0.0;
    if (a3.f32[2] > 0.0)
    {
      v54 = *(_QWORD *)(v35 + 80);
      if (!v54)
        goto LABEL_25;
      (*(void (**)(uint64_t, float32x2_t *, float32x4_t))(*(_QWORD *)v54 + 24))(v54, &v56, a3);
      if (v57)
      {
        v53 = v56;
LABEL_25:
        *(_DWORD *)v34 = vmla_lane_f32(vmul_f32(v53, v53), (float32x2_t)vdup_lane_s32((int32x2_t)v53, 1), v53, 1).u32[0];
        v34 += 4;
      }
    }
    v35 += 104;
  }
  while (v35 != v36);
  v33 = a2[16].i64[0];
  v15 = a2[17].u64[0];
LABEL_32:
  v55 = (char *)(v33 + 4 * v15);
  if (v34 != v55)
    a2[17].i64[0] = v15 + ~((unint64_t)(v55 - v34 - 4) >> 2);
}

float *sub_207D949A0(float *result, float *a2, float *a3)
{
  unint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float *v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 31)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 > a2)
        a3 = v18;
      else
        result = v18 + 1;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

void sub_207D94D48(uint64_t a1, float *a2, float **a3, float32x4_t a4, float32x4_t a5, int32x4_t a6, double a7, float32x2_t a8, double a9, float32x2_t a10)
{
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float32x4_t v20[16];
  void *__p;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  __p = v20;
  v22 = 64;
  v13 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3);
  if (v13 >= 0x41)
  {
    if (v13 <= 0x80)
      v13 = 128;
    v22 = v13;
    if (v13 >> 62)
      v14 = -1;
    else
      v14 = 4 * v13;
    __p = operator new[](v14);
  }
  v23 = 0;
  if (*(_BYTE *)(a1 + 268))
  {
    v24 = a1 + 16;
    sub_207D944C8((uint64_t)&v24, (char *)v20);
  }
  else
  {
    v24 = a1 + 16;
    sub_207D9467C((uint64_t)&v24, v20, a4, a5, a6, a7, a8, a9, a10);
  }
  v15 = v23;
  v16 = (float32x4_t *)__p;
  if (!v23)
  {
    *a2 = 1.0;
    v23 = 0;
    if (v16 == v20)
      return;
    goto LABEL_19;
  }
  v17 = 4 * (v23 >> 1);
  sub_207D949A0((float *)__p, (float *)((char *)__p + v17), (float *)__p + v23);
  v16 = (float32x4_t *)__p;
  v18 = *(float *)((char *)__p + v17);
  if ((v15 & 1) == 0)
  {
    v19 = (v15 >> 1) - 1;
    if (v19 != v15)
    {
      sub_207D949A0((float *)__p, (float *)__p + v19, (float *)__p + v15);
      v16 = (float32x4_t *)__p;
    }
    v18 = (float)(v18 + v16->f32[v19]) * 0.5;
  }
  *a2 = sqrtf(v18) * **a3;
  v23 = 0;
  if (v16 != v20)
  {
LABEL_19:
    if (v16)
      operator delete[](v16);
  }
}

void sub_207D94EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *__p,uint64_t a42,uint64_t a43)
{
  a43 = 0;
  if (__p != &a9)
  {
    if (__p)
      operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D94EE4(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 160) || (v23 = *(_QWORD *)(a1 + 16), v24 = *(_QWORD *)(a1 + 24), v23 == v24))
  {
LABEL_2:
    v4 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3);
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v23 + 8) + 4) & 6) == 0)
    {
      v23 += 16;
      if (v23 == v24)
        goto LABEL_2;
    }
    v25 = *(_QWORD *)(a1 + 112);
    v26 = *(_QWORD *)(a1 + 120);
    if (v25 == v26)
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v27 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 48) + 4) & 6) == 0)
          v4 = ++v27;
        v25 += 104;
      }
      while (v25 != v26);
    }
  }
  *a3 += v4;
  v5 = *((_QWORD *)a2 + 66);
  v6 = v5 + 1;
  v7 = *((_QWORD *)a2 + 65);
  if (v5 + 1 <= v7)
  {
    v12 = (char *)*((_QWORD *)a2 + 64);
  }
  else
  {
    v8 = 2 * v7;
    if (v8 > v6)
      v6 = v8;
    *((_QWORD *)a2 + 65) = v6;
    v9 = (char *)*((_QWORD *)a2 + 64);
    if (v6 >> 61)
      v10 = -1;
    else
      v10 = 8 * v6;
    v11 = (char *)operator new[](v10);
    v12 = v11;
    if (v5)
    {
      v13 = 0;
      if (v5 < 4)
        goto LABEL_15;
      if ((unint64_t)(v11 - v9) < 0x20)
        goto LABEL_15;
      v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = v11 + 16;
      v15 = (__int128 *)(v9 + 16);
      v16 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v5 != v13)
      {
LABEL_15:
        v18 = v5 - v13;
        v19 = 8 * v13;
        v20 = &v9[8 * v13];
        v21 = &v11[v19];
        do
        {
          v22 = *(_QWORD *)v20;
          v20 += 8;
          *(_QWORD *)v21 = v22;
          v21 += 8;
          --v18;
        }
        while (v18);
      }
    }
    if (v9 != a2 && v9)
    {
      operator delete[](v9);
      v5 = *((_QWORD *)a2 + 66);
    }
    *((_QWORD *)a2 + 64) = v12;
  }
  *(_QWORD *)&v12[8 * v5] = v4;
  ++*((_QWORD *)a2 + 66);
}

uint64_t sub_207D95090(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *a1;
  v2 = a1[1];
  if (*((_BYTE *)a1 + 144))
  {
    v3 = 0;
    if (*a1 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v1 + 8);
        if ((*(_BYTE *)(v5 + 4) & 6) == 0)
          v3 = v3 + *(unsigned __int8 *)(v5 + 20);
        v1 += 16;
      }
      while (v1 != v2);
    }
    return v3;
  }
  if (*a1 != v2)
  {
    v7 = 0;
    LODWORD(v3) = 0;
    do
    {
      v8 = *(_QWORD *)(v1 + 8);
      if ((*(_BYTE *)(v8 + 4) & 6) != 0)
        v7 = 1;
      v3 = v3 + *(unsigned __int8 *)(v8 + 20);
      v1 += 16;
    }
    while (v1 != v2);
    if (v7)
    {
      a1[29] = a1[28];
      v9 = a1[12];
      v10 = a1[13];
      if (v9 != v10)
      {
        do
        {
          v11 = *(_QWORD *)(v9 + 48);
          if (*(_BYTE *)(v9 + 96) || (*(_BYTE *)(v11 + 4) & 6) != 0)
            sub_207D8B464((uint64_t)(a1 + 28), v11);
          v9 += 104;
        }
        while (v9 != v10);
        v12 = (a1[29] - a1[28]) >> 2;
        if (v12 <= v3)
          v3 = (v3 - v12);
        else
          v3 = 0;
        v13 = a1[12];
        v14 = a1[13];
        while (v13 != v14)
        {
          v15 = *(_QWORD *)(v13 + 48);
          if (*(_BYTE *)(v13 + 96) || (*(_BYTE *)(v15 + 4) & 6) != 0)
            ++*(_DWORD *)(v15 + 8);
          v13 += 104;
        }
      }
    }
    return v3;
  }
  return 0;
}

void sub_207D951F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (*(_BYTE *)(v2 + 96) || (*(_BYTE *)(v4 + 4) & 6) != 0)
      ++*(_DWORD *)(v4 + 8);
    v2 += 104;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207D95234()
{
  return kdebug_trace();
}

void sub_207D95264(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  sub_207D94EE4(*a1, (char *)(a1[1] + 640), (_QWORD *)(a1[1] + 632));
  v2 = a1[1];
  v3 = sub_207D95090((uint64_t *)(*a1 + 16));
  *(int64x2_t *)(v2 + 1176) = vaddq_s64(*(int64x2_t *)(v2 + 1176), vdupq_n_s64(v3));
  v4 = *(_QWORD *)(v2 + 1720);
  v5 = v4 + 1;
  v6 = *(_QWORD *)(v2 + 1712);
  if (v4 + 1 <= v6)
  {
    v11 = *(char **)(v2 + 1704);
  }
  else
  {
    v7 = 2 * v6;
    if (v7 > v5)
      v5 = v7;
    *(_QWORD *)(v2 + 1712) = v5;
    v8 = *(char **)(v2 + 1704);
    if (v5 >> 61)
      v9 = -1;
    else
      v9 = 8 * v5;
    v10 = (char *)operator new[](v9);
    v11 = v10;
    if (v4)
    {
      v12 = 0;
      if (v4 < 4)
        goto LABEL_13;
      if ((unint64_t)(v10 - v8) < 0x20)
        goto LABEL_13;
      v12 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = v10 + 16;
      v14 = (__int128 *)(v8 + 16);
      v15 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v4 != v12)
      {
LABEL_13:
        v17 = v4 - v12;
        v18 = 8 * v12;
        v19 = &v8[8 * v12];
        v20 = &v10[v18];
        do
        {
          v21 = *(_QWORD *)v19;
          v19 += 8;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          --v17;
        }
        while (v17);
      }
    }
    if (v8 != (char *)(v2 + 1192) && v8)
    {
      operator delete[](v8);
      v4 = *(_QWORD *)(v2 + 1720);
    }
    *(_QWORD *)(v2 + 1704) = v11;
  }
  *(_QWORD *)&v11[8 * v4] = v3;
  ++*(_QWORD *)(v2 + 1720);
}

uint64_t sub_207D953AC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v5;
  void *v7;
  void *v9;

  v2 = (void *)(a1 + 1192);
  *(_QWORD *)(a1 + 1720) = 0;
  v3 = *(void **)(a1 + 1704);
  if (v3 == v2 || v3 == 0)
  {
    *(_QWORD *)(a1 + 1168) = 0;
    v5 = *(void **)(a1 + 1152);
    if (v5 != (void *)(a1 + 640) && v5 != 0)
    {
LABEL_22:
      operator delete[](v5);
      *(_QWORD *)(a1 + 624) = 0;
      v7 = *(void **)(a1 + 608);
      if (v7 != (void *)(a1 + 352) && v7 != 0)
        goto LABEL_26;
LABEL_16:
      *(_QWORD *)(a1 + 344) = 0;
      v9 = *(void **)(a1 + 328);
      if (v9 == (void *)(a1 + 72))
        goto LABEL_29;
      goto LABEL_27;
    }
  }
  else
  {
    operator delete[](v3);
    *(_QWORD *)(a1 + 1168) = 0;
    v5 = *(void **)(a1 + 1152);
    if (v5 != (void *)(a1 + 640) && v5 != 0)
      goto LABEL_22;
  }
  *(_QWORD *)(a1 + 624) = 0;
  v7 = *(void **)(a1 + 608);
  if (v7 == (void *)(a1 + 352) || v7 == 0)
    goto LABEL_16;
LABEL_26:
  operator delete[](v7);
  *(_QWORD *)(a1 + 344) = 0;
  v9 = *(void **)(a1 + 328);
  if (v9 == (void *)(a1 + 72))
    goto LABEL_29;
LABEL_27:
  if (v9)
    operator delete[](v9);
LABEL_29:
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207D954BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8)
{
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0x3F747AE147AE147BLL;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v13 = *(const void **)a5;
  v12 = *(_QWORD *)(a5 + 8);
  v14 = v12 - *(_QWORD *)a5;
  if (v12 != *(_QWORD *)a5)
  {
    if (v14 < 0)
      sub_207CA420C();
    v15 = (char *)operator new(v12 - *(_QWORD *)a5);
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 48) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 40) = v16;
  }
  *(_BYTE *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 64) = xmmword_208235360;
  *(_OWORD *)(a1 + 80) = xmmword_208235370;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_QWORD *)(a1 + 112) = 0x3F1A36E2EB1C432DLL;
  if (a8 <= 0.00000001
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/P3PPreemptiveRansac.h", 75, (uint64_t)"average_focal_length_in_pixels > 1e-8", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(double *)(a1 + 24) = a7 / a8 * 0.5;
  return a1;
}

void sub_207D95608(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D95628(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_207CA420C();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_207D958B4(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_207D27A90(v10, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 2));
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_207D958B4(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_207D27A90(v10, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 2));
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_207D958A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_207D958AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_207D958B4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = v9 - *(_QWORD *)v6;
      if (v9 != *(_QWORD *)v6)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556)
          sub_207CA420C();
        v7 = (char *)operator new(v11);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[4 * (v11 >> 2)];
        v8 = 12 * ((v11 - 12) / 0xCuLL) + 12;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_207D959C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D15944((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D959DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_207D15944((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char ***sub_207D95A00(char ***a1, uint64_t *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v9 = *v4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      sub_207CA420C();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v9) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x1555555555555555)
        sub_207CA3AB8();
      v14 = (char *)operator new(12 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[12 * v10];
    *(_QWORD *)v15 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    v8 = v15 + 12;
    if (v6 != v9)
    {
      do
      {
        v16 = *(_QWORD *)(v6 - 12);
        v6 -= 12;
        v17 = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v6 != v9);
      v6 = *v4;
    }
    *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[12 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v6 = v7;
    v8 = v6 + 12;
  }
  v4[1] = v8;
  return a1;
}

uint64_t sub_207D95B40(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_24C074568;
  v2 = (void *)a1[161];
  if (v2)
    operator delete[](v2);
  v3 = (void *)a1[158];
  if (v3)
    operator delete[](v3);
  return sub_207D95B84((uint64_t)a1);
}

uint64_t sub_207D95B84(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;

  *(_QWORD *)a1 = off_24C074698;
  v2 = *(void **)(a1 + 1216);
  if (v2)
    operator delete[](v2);
  v3 = *(void **)(a1 + 1192);
  if (v3)
    operator delete[](v3);
  v4 = *(void **)(a1 + 1168);
  if (v4)
    operator delete[](v4);
  *(_QWORD *)a1 = &unk_24C074758;
  sub_207D9D4B8((_QWORD *)(a1 + 600));
  v5 = *(void **)(a1 + 576);
  if (v5)
  {
    *(_QWORD *)(a1 + 584) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 552);
  if (v6)
  {
    *(_QWORD *)(a1 + 560) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 520);
  if (v7)
  {
    *(_QWORD *)(a1 + 528) = v7;
    operator delete(v7);
  }
  *(_QWORD *)a1 = &unk_24C074810;
  v8 = *(void **)(a1 + 480);
  if (v8)
  {
    *(_QWORD *)(a1 + 488) = v8;
    operator delete(v8);
  }
  *(_QWORD *)(a1 + 360) = off_24C074308;
  v9 = *(_QWORD *)(a1 + 448);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 456);
    v11 = *(void **)(a1 + 448);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(a1 + 456);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 448);
    }
    *(_QWORD *)(a1 + 456) = v9;
    operator delete(v11);
  }
  *(_QWORD *)(a1 + 360) = off_24C074368;
  sub_207CC46C8(a1 + 400);
  v15 = *(void **)(a1 + 376);
  if (v15)
  {
    *(_QWORD *)(a1 + 384) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 328);
  if (v16)
    operator delete[](v16);
  *(_QWORD *)a1 = &unk_24C0748C8;
  v17 = *(void **)(a1 + 272);
  if (v17)
  {
    *(_QWORD *)(a1 + 280) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 248);
  if (v18)
  {
    *(_QWORD *)(a1 + 256) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 224);
  if (v19)
  {
    *(_QWORD *)(a1 + 232) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 200);
  if (v20)
  {
    *(_QWORD *)(a1 + 208) = v20;
    operator delete(v20);
  }
  sub_207D9BB34((void **)(a1 + 120));
  sub_207D9BD2C(a1 + 48);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v21 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = v21;
  if (v21)
    operator delete(v21);
  v22 = *(_QWORD **)(a1 + 56);
  if (v22)
  {
    v23 = *(_QWORD **)(a1 + 64);
    v24 = *(void **)(a1 + 56);
    if (v23 != v22)
    {
      v25 = *(_QWORD **)(a1 + 64);
      do
      {
        v26 = *(v25 - 2);
        v25 -= 2;
        *v25 = 0;
        if (v26)
          ((void (*)(void))*(v23 - 1))();
        v23 = v25;
      }
      while (v25 != v22);
      v24 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v22;
    operator delete(v24);
  }
  v27 = *(void **)(a1 + 24);
  if (v27)
  {
    *(_QWORD *)(a1 + 32) = v27;
    operator delete(v27);
  }
  return a1;
}

void sub_207D95D9C(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v5, "DenseHessian");
  v4 = 4;
  strcpy((char *)__p, "LDLt");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 4uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_207D95E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D95E9C(uint64_t a1)
{
  double v2;
  float32x4_t v3;
  __n128 v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unsigned int v30;
  int64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  int v48;
  float32x2_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  __float2 v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD **v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t i;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int **v91;
  uint64_t v92;
  void **v93;
  unsigned int v94;
  unsigned int v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t *v100;
  void *v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  __int128 v113;
  int v114;
  __int128 v115;
  unsigned int v116;
  __int128 v117;
  int v118;
  __int128 v119;
  unsigned int v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  __int128 v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned int *j;
  unsigned int *v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  __int128 v161;
  int v162;
  __int128 v163;
  unsigned int v164;
  __int128 v165;
  int v166;
  __int128 v167;
  unsigned int v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  __int128 v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  int v186;
  __int128 v187;
  __int128 v188;
  unsigned int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void **v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t k;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  int v229;
  unsigned int v230;
  unsigned __int32 v231;
  char **v232;
  unsigned int v233;
  uint64_t v234;
  __int128 *v235;
  uint64_t v236;
  __int128 v237;
  __int128 *v238;
  uint64_t v239;
  __int128 v240;
  __int128 *v241;
  uint64_t v242;
  __int128 v243;
  __int128 *v244;
  uint64_t v245;
  __int128 v246;
  __int128 *v247;
  uint64_t v248;
  __int128 v249;
  __int128 *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _BYTE *v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  _DWORD *v276;
  _OWORD *v277;
  char *v278;
  char *v279;
  unint64_t v280;
  uint64_t v281;
  _OWORD *v282;
  __int128 *v283;
  uint64_t v284;
  __int128 v285;
  int v286;
  _OWORD *v287;
  size_t v288;
  BOOL v289;
  uint64_t v290;
  float32x4_t *v291;
  float32x4_t v292;
  float32x4_t *v293;
  uint64_t v294;
  int64_t v295;
  uint64_t v296;
  int *v297;
  _DWORD *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _OWORD *v304;
  __int128 *v305;
  uint64_t v306;
  __int128 v307;
  int v308;
  float32x4_t *v309;
  uint64_t v310;
  unint64_t v311;
  float32x4_t v312;
  float32x4_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  size_t v322;
  unint64_t v323;
  char *v324;
  _BYTE *v325;
  _BYTE *v326;
  uint64_t v327;
  unint64_t v328;
  _BYTE *v329;
  char *v330;
  char *v331;
  unint64_t v332;
  int64_t v333;
  uint64_t v334;
  char *v335;
  char *v336;
  float32x2_t *v337;
  uint64_t v338;
  int64_t v339;
  unsigned int v340;
  uint64_t v341;
  float32x2_t *v342;
  float32x2_t *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  _OWORD *v347;
  __int128 *v348;
  uint64_t v349;
  __int128 v350;
  int v351;
  char *v352;
  char *v353;
  int v354;
  char *v355;
  char *v356;
  uint64_t v357;
  char *v358;
  unint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  _BYTE *v367;
  _DWORD *v368;
  int64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  _OWORD *v374;
  char *v375;
  uint64_t v376;
  __int128 v377;
  int v378;
  char *v379;
  char *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  char *v392;
  char *v393;
  _QWORD *v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  char *v399;
  __int128 *v400;
  uint64_t v401;
  __int128 v402;
  float32x2_t *v403;
  unint64_t v404;
  float32x2_t *v405;
  __int32 v406;
  uint64_t v407;
  int v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  char *v412;
  unsigned int v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  unsigned int v421;
  unsigned int v422;
  uint64_t v423;
  uint64_t v424;
  const void *v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  int64x2_t v432;
  _QWORD *v433;
  _QWORD *v434;
  uint64_t v435;
  __int128 v436;
  std::__shared_weak_count *v437;
  unint64_t *p_shared_owners;
  unint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  _QWORD *v448;
  int64x2_t v449;
  _QWORD *v450;
  _QWORD *v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  __int128 v462;
  __int128 v463;
  int v464;
  __int128 v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  _QWORD *v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  std::__shared_weak_count *v473;
  unint64_t *v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  void *v482;
  int v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char *v492;
  char *v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  char *v509;
  char *v510;
  uint64_t v511;
  __int128 v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  int v526;
  int **v527;
  _QWORD *v528;
  uint64_t v529;
  void *v530;
  char *v531;
  void *v532;
  unint64_t v533;
  char *v534;
  int *v535;
  int *v536;
  uint64_t v537;
  int v538;
  unint64_t v539;
  char *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  _BYTE *v547;
  _DWORD *v548;
  int64_t v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  _OWORD *v554;
  char *v555;
  uint64_t v556;
  __int128 v557;
  int v558;
  unsigned int *v559;
  unsigned int *v560;
  unsigned int *v561;
  uint64_t v562;
  unsigned int *v563;
  unsigned int v564;
  unint64_t v565;
  _DWORD *v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  char *v570;
  char *v571;
  char *v572;
  uint64_t v573;
  unsigned int v574;
  char *v575;
  char *v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unsigned int *v580;
  unsigned int *v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  unint64_t v588;
  int32x4_t *v589;
  int32x4_t *v590;
  unint64_t v591;
  uint64_t v592;
  int32x4_t *v593;
  uint64_t v594;
  int32x4_t v595;
  int32x4_t *v596;
  int32x4_t v597;
  int32x4_t v598;
  uint64_t v599;
  unint64_t v600;
  _DWORD *v601;
  unint64_t v602;
  _DWORD *v603;
  _DWORD *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unsigned int v608;
  uint64_t v609;
  void *v610;
  uint64_t v611;
  void **v612;
  uint64_t v613;
  unint64_t v614;
  void *v615;
  uint64_t *v616;
  _DWORD *v617;
  _DWORD *v618;
  unsigned int v619;
  uint64_t v620;
  float v621;
  float32x4_t v622;
  float32x4_t v623;
  int8x16_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  uint64_t v628;
  int v629;
  float32x2_t *v630;
  int8x16_t v631;
  int8x16_t v632;
  float v633;
  float v634;
  float v635;
  float v636;
  __float2 v637;
  char v638;
  unsigned int v639;
  unsigned int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  void **v646;
  uint64_t v647;
  int v648;
  unsigned int v649;
  int v650;
  unint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  BOOL v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  unsigned int v667;
  uint64_t *v668;
  void **v669;
  unint64_t v670;
  int v671;
  void *v672;
  unint64_t v673;
  _DWORD *v674;
  _DWORD *v675;
  unsigned int v676;
  uint64_t v677;
  uint64_t v678;
  float v679;
  float32x4_t *v680;
  float32x4_t v681;
  float32x4_t v682;
  int8x16_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  unint64_t v687;
  float32x4_t *v688;
  int v689;
  float32x2_t *v690;
  int8x16_t v691;
  int8x16_t v692;
  float v693;
  float v694;
  float v695;
  float v696;
  __float2 v697;
  unsigned int *v698;
  unsigned int *v699;
  int v700;
  int v701;
  unsigned int *v702;
  unsigned int v703;
  unsigned int v704;
  uint64_t v705;
  uint64_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  char v724;
  uint64_t v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  char **v736;
  char **v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  uint64_t v742;
  unsigned int v743;
  uint64_t v744;
  char **v745;
  int v746[2];
  unsigned int v747;
  unsigned int v748;
  int v749;
  int v750;
  int v751;
  _QWORD *v752;
  void **v753;
  float v754;
  int v755;
  int v756;
  unsigned int v757;
  uint64_t v758;
  int v759;
  float v760;
  float v761;
  float32x4_t v762;
  unsigned int v763;
  unsigned int v764;
  uint64_t v765;
  uint64_t v766;
  void **v767;
  uint64_t v768;
  char **v769;
  float32x4_t v770;
  float32x4_t v771;
  uint64_t v772;
  _QWORD v773[2];
  unsigned int v774;
  float32x4_t __p[2];
  float32x4_t v776;
  uint64_t v777;
  float32x2_t *v778;
  float32x2_t *v779;
  uint64_t v780;
  int v781;
  uint64_t v782;

  v782 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v744 = a1 + 600;
  v9 = *(_QWORD *)(a1 + 792);
  v10 = *(_QWORD *)(a1 + 784);
  v742 = a1 + 24;
  v772 = a1;
  if (*(_BYTE *)(a1 + 192))
    goto LABEL_625;
  v739 = *(_QWORD *)(a1 + 784);
  v740 = *(_QWORD *)(a1 + 792);
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 193))
    goto LABEL_397;
  if (*(_DWORD *)(a1 + 324) == 1)
    v11 = 3;
  else
    v11 = 1;
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 600) + 24))(v744) + 168))
    goto LABEL_7;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 600) + 24))(v744);
  v738 = sub_207D9F280(v12);
  v736 = (char **)(a1 + 848);
  if (a1 + 848 != v738)
    sub_207CB9D2C(v736, *(char **)v738, *(char **)(v738 + 8), (uint64_t)(*(_QWORD *)(v738 + 8) - *(_QWORD *)v738) >> 2);
  v13 = (char **)(v738 + 24);
  v14 = *(char **)(a1 + 848);
  v15 = *(char **)(a1 + 856);
  if (v14 != v15)
  {
    v737 = (char **)(a1 + 896);
    sub_207CB9D2C((_QWORD *)(a1 + 896), v14, v15, (v15 - v14) >> 2);
    sub_207D89D94((char **)(a1 + 896), v13);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
    v745 = (char **)(a1 + 872);
    if (a1 + 872 != v16 + 152)
      sub_207CB9D2C(v745, *(char **)(v16 + 152), *(char **)(v16 + 160), (uint64_t)(*(_QWORD *)(v16 + 160) - *(_QWORD *)(v16 + 152)) >> 2);
    v17 = *(char **)(a1 + 872);
    v18 = *(char **)(a1 + 880);
    if (v17 == v18)
    {
      v18 = *(char **)(a1 + 872);
    }
    else
    {
      v19 = *(char **)(a1 + 904);
      v20 = *v737;
      v21 = *(char **)(a1 + 872);
      v22 = v21;
      while (v20 != v19)
      {
        v23 = *(_DWORD *)v22;
        if (*(_DWORD *)v22 >= *(_DWORD *)v20)
        {
          v22 += 4 * (*(_DWORD *)v20 >= v23);
          v20 += 4;
          if (v22 == v18)
            goto LABEL_32;
        }
        else
        {
          *(_DWORD *)v21 = v23;
          v21 += 4;
          v22 += 4;
          if (v22 == v18)
            goto LABEL_32;
        }
      }
      if (v22 == v21)
        goto LABEL_34;
      v31 = v18 - v22;
      memmove(v21, v22, v18 - v22);
      v21 += v31;
      v18 = *(char **)(a1 + 880);
      v17 = *(char **)(a1 + 872);
LABEL_32:
      if (v21 != v18)
      {
        v18 = v21;
        *(_QWORD *)(a1 + 880) = v21;
      }
    }
LABEL_34:
    sub_207CB9D2C(v737, v17, v18, (v18 - v17) >> 2);
    sub_207D89D94(v737, v736);
    v32 = 6 * ((*(_QWORD *)(a1 + 880) - *(_QWORD *)(a1 + 872)) >> 2);
    *(_DWORD *)(v772 + 624) = v32;
    if (*(_QWORD *)(v772 + 616) < v32)
    {
      v33 = *(void **)(v772 + 608);
      if (v33)
        operator delete[](v33);
      *(_QWORD *)(v772 + 608) = 0;
      *(_QWORD *)(v772 + 616) = ((4 * v32 + 31) & 0x7FFFFFFE0) >> 2;
      *(_QWORD *)(v772 + 608) = MEMORY[0x20BD028B4]();
    }
    v34 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 24))(v744);
    v35 = v11;
    v36 = *(_DWORD **)(v772 + 872);
    v37 = *(_DWORD **)(v772 + 880);
    if (v36 != v37)
    {
      v38 = 0;
      v39 = *v34;
      do
      {
        v39 -= 16;
        do
        {
          v48 = *(_DWORD *)(v39 + 16);
          v39 += 16;
        }
        while (*v36 != v48);
        v49 = *(float32x2_t **)(v39 + 8);
        memset(__p, 0, 24);
        v778 = v49 + 4;
        v779 = 0;
        v776.i64[0] = (uint64_t)__p;
        v776.i64[1] = 0;
        sub_207DA0C70(&v778, (float **)&v776);
        v50 = (int8x16_t)__p[0];
        v51 = vextq_s8(v50, v50, 8uLL);
        v52 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)__p[0].f32, 1), *(float32x2_t *)__p[0].f32, 1), *(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8).f32[0];
        if (v52 >= 0.0061)
        {
          v55 = sqrtf(v52);
          v754 = v52;
          v762 = __p[0];
          v56 = __sincosf_stret(v55);
          v52 = v754;
          v50 = (int8x16_t)v762;
          v54 = v56.__sinval / v55;
          v53 = (float)(1.0 / v754) * (float)(1.0 - v56.__cosval);
          *(float *)v51.i32 = (float)(1.0 / v754) * (float)(1.0 - (float)(v56.__sinval / v55));
          if (v754 >= 0.00000149)
          {
LABEL_48:
            if (v52 <= 9.0)
              v40 = (float)((float)(v53 * 0.5) - *(float *)v51.i32) / v54;
            else
              v40 = (float)(v53 + (float)(v54 * -0.5)) / (float)(v52 * v53);
            goto LABEL_41;
          }
        }
        else
        {
          v53 = 0.5 - (float)(v52 * (float)((float)(v52 / -720.0) + 0.041667));
          *(float *)v51.i32 = 0.16667 - (float)(v52 * (float)((float)(v52 / -5040.0) + 0.0083333));
          v54 = 1.0 - (float)(v52 * *(float *)v51.i32);
          if (v52 >= 0.00000149)
            goto LABEL_48;
        }
        v40 = (float)(v52 * 0.000033069) + (float)((float)(v52 * 0.0013889) + 0.083333);
LABEL_41:
        *(float32x2_t *)v51.i8 = v49[10];
        v51.i32[2] = v49[11].i32[0];
        v41 = (float32x4_t)vextq_s8(vextq_s8(v50, v50, 0xCuLL), v50, 8uLL);
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), v50, 0xCuLL);
        v43 = (int8x16_t)vsubq_f32(vmulq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), v51, 0xCuLL)), vmulq_f32(v42, (float32x4_t)vextq_s8(vextq_s8(v51, v51, 0xCuLL), v51, 8uLL)));
        v44.i64[0] = 0xBF000000BF000000;
        v44.i64[1] = 0xBF000000BF000000;
        v45 = vaddq_f32(vaddq_f32((float32x4_t)v51, vmulq_f32((float32x4_t)v43, v44)), vmulq_n_f32(vsubq_f32(vmulq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), v43, 0xCuLL)), vmulq_f32(v42, (float32x4_t)vextq_s8(vextq_s8(v43, v43, 0xCuLL), v43, 8uLL))), v40));
        __p[1].i32[1] = v45.i32[2];
        *(uint64_t *)((char *)&__p[0].i64[1] + 4) = v45.i64[0];
        v46 = __p[0];
        v47 = *(_QWORD *)(v772 + 608) + 4 * v38;
        *(_QWORD *)(v47 + 16) = __p[1].i64[0];
        *(float32x4_t *)v47 = v46;
        v38 += 6;
        ++v36;
      }
      while (v36 != v37);
    }
    v57 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 24))(v744);
    v58 = v35;
    v60 = *v57;
    v59 = v57[1];
    v61 = *(_DWORD **)(v772 + 896);
    v62 = *(_DWORD **)(v772 + 904);
    v63 = *v57 == v59 || v61 == v62;
    if (!v63)
    {
      v64 = 0;
      do
      {
        v65 = *(_QWORD *)(v60 + 8);
        if (*v61 == *(_DWORD *)v60)
        {
          if (*(_BYTE *)(v65 + 20))
            v66 = v64;
          else
            v66 = -1;
          v64 += *(unsigned __int8 *)(v65 + 20);
          ++v61;
        }
        else
        {
          v66 = -1;
        }
        *(_DWORD *)v65 = v66;
        v60 += 16;
      }
      while (v60 != v59 && v61 != v62);
    }
    if (v60 != v59)
    {
      v67 = v59 - v60 - 16;
      if (v67 < 0x10)
      {
        v68 = v60;
        do
        {
LABEL_70:
          **(_DWORD **)(v68 + 8) = -1;
          v68 += 16;
        }
        while (v68 != v59);
        goto LABEL_71;
      }
      v69 = (v67 >> 4) + 1;
      v68 = v60 + 16 * (v69 & 0x1FFFFFFFFFFFFFFELL);
      v70 = (_DWORD **)(v60 + 24);
      v71 = v69 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v72 = *(v70 - 2);
        v73 = *v70;
        v70 += 4;
        *v72 = -1;
        *v73 = -1;
        v71 -= 2;
      }
      while (v71);
      if (v69 != (v69 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_70;
    }
LABEL_71:
    v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
    sub_207D9F868(v74, v737);
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
    v76 = *(unsigned int *)(v75 + 44);
    if ((_DWORD)v76)
    {
      for (i = 0; i < v76; ++i)
      {
        v79 = (uint64_t *)(*(_QWORD *)(v75 + 120) + 24 * i);
        v78 = *v79;
        v80 = v79[1];
        if (*v79 != v80)
        {
          v81 = *(_QWORD *)(v75 + 80);
          v82 = *(_QWORD *)(v75 + 88);
          v83 = *(_QWORD *)(v75 + 112);
          do
          {
            v84 = ((v82 - v81) << 6) - 1;
            if (v82 == v81)
              v84 = 0;
            v85 = *(_QWORD *)(v75 + 104) + v83;
            if (v84 == v85)
            {
              sub_207D8BD2C((_QWORD *)(v75 + 72));
              v81 = *(_QWORD *)(v75 + 80);
              v82 = *(_QWORD *)(v75 + 88);
              v85 = *(_QWORD *)(v75 + 112) + *(_QWORD *)(v75 + 104);
            }
            *(_QWORD *)(*(_QWORD *)(v81 + ((v85 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v85 & 0x1FF)) = *(_QWORD *)(v78 + 8);
            v83 = *(_QWORD *)(v75 + 112) + 1;
            *(_QWORD *)(v75 + 112) = v83;
            v78 += 16;
          }
          while (v78 != v80);
          v78 = *v79;
          v76 = *(unsigned int *)(v75 + 44);
        }
        v79[1] = v78;
      }
    }
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
    v87 = *(unsigned int *)(v86 + 16);
    if ((_DWORD)v87)
      bzero(*(void **)v86, 4 * v87);
    if (((*(_QWORD *)(v772 + 792) - *(_QWORD *)(v772 + 784)) & 0x3FFFFFFFCLL) != 0)
    {
      v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
      sub_207D9FA1C(v88, v772 + 632, (char **)(v772 + 920), (_QWORD *)(v772 + 944));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v744 + 16))(v744, v58);
    v89 = *(unsigned __int8 *)(v772 + 808);
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v772 + 600) + 40))(v744);
    v91 = (unsigned int **)(v772 + 944);
    if (v89)
      sub_207DA0498(v90, v736, v772 + 1016, (unsigned int **)(v772 + 944));
    else
      sub_207DA0064(v90, v736, v772 + 1016, v772 + 992, (unsigned int **)(v772 + 944));
    v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v772 + 600) + 40))(v744);
    __p[0].i32[0] = 6;
    sub_207D8C3F4(v736, v92 + 152, __p, (uint64_t)v91);
    sub_207D8C3F4(v745, v92 + 152, __p, v772 + 968);
    v93 = (void **)(v772 + 1040);
    v94 = 6 * ((*(_QWORD *)(v772 + 952) - *(_QWORD *)(v772 + 944)) >> 3);
    v95 = 6 * ((*(_QWORD *)(v772 + 976) - *(_QWORD *)(v772 + 968)) >> 3);
    *(_DWORD *)(v772 + 1056) = v94;
    *(_DWORD *)(v772 + 1060) = v95;
    v96 = v95 * (unint64_t)v94;
    v97 = v95;
    v98 = v94;
    if (*(_QWORD *)(v772 + 1048) < v96)
    {
      if (*v93)
        operator delete[](*v93);
      *(_QWORD *)(v772 + 1040) = 0;
      *(_QWORD *)(v772 + 1048) = ((4 * v96 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
      *(_QWORD *)(v772 + 1040) = MEMORY[0x20BD028B4]();
      v98 = *(_DWORD *)(v772 + 1056);
      v97 = *(_DWORD *)(v772 + 1060);
    }
    v99 = v98 * v97;
    if (v99)
      bzero(*v93, 4 * v99);
    v100 = (uint64_t *)(v772 + 1064);
    if (v95 == *(_DWORD *)(v772 + 1080) && v94 == *(_DWORD *)(v772 + 1084))
    {
      v101 = (void *)*v100;
    }
    else
    {
      *(_DWORD *)(v772 + 1080) = v95;
      *(_DWORD *)(v772 + 1084) = v94;
      v101 = *(void **)(v772 + 1064);
      if (*(_QWORD *)(v772 + 1072) < v96)
      {
        if (v101)
          operator delete[](v101);
        *(_QWORD *)(v772 + 1064) = 0;
        *(_QWORD *)(v772 + 1072) = ((4 * v96 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
        v101 = (void *)MEMORY[0x20BD028B4]();
        *(_QWORD *)(v772 + 1064) = v101;
        v95 = *(_DWORD *)(v772 + 1080);
        v94 = *(_DWORD *)(v772 + 1084);
      }
    }
    if (v95 * v94)
      bzero(v101, 4 * v95 * v94);
    v102 = *(unsigned int **)(v772 + 944);
    v103 = *(unsigned int **)(v772 + 952);
    if (*(_QWORD *)(v772 + 968) != *(_QWORD *)(v772 + 976))
    {
      if (v102 == v103)
        goto LABEL_143;
      do
      {
        v104 = *(unsigned int **)(v772 + 968);
        v105 = *(unsigned int **)(v772 + 976);
        if (v104 != v105)
        {
          v107 = *(_QWORD *)(*(_QWORD *)(v92 + 120) + 24 * *v102);
          v106 = *(_QWORD *)(*(_QWORD *)(v92 + 120) + 24 * *v102 + 8);
          do
          {
            if (v107 == v106)
              break;
            v108 = *v104;
            while (*(_DWORD *)v107 < v108)
            {
              v107 += 16;
              if (v107 == v106)
                goto LABEL_107;
            }
            if (*(_DWORD *)v107 == v108)
            {
              v109 = *(_QWORD *)(v92 + 48) + 4 * *(_QWORD *)(v107 + 8);
              v110 = *(_QWORD *)(v772 + 1064);
              if (v109 == v110)
              {
                v140 = *(_OWORD *)(v109 + 128);
                v755 = HIDWORD(v140);
                LODWORD(v137) = *(_QWORD *)(v109 + 136);
                v763 = HIDWORD(*(_QWORD *)(v109 + 128));
                v126 = *(_OWORD *)(v109 + 96);
                v125 = *(_OWORD *)(v109 + 112);
                v750 = HIDWORD(v125);
                LODWORD(v139) = *(_QWORD *)(v109 + 120);
                v138 = HIDWORD(*(_QWORD *)(v109 + 112));
                v747 = HIDWORD(v126);
                v141 = *(_QWORD *)(v109 + 104);
                v142 = HIDWORD(*(_QWORD *)(v109 + 96));
                v121 = *(_OWORD *)(v109 + 64);
                v132 = *(_OWORD *)(v109 + 80);
                v129 = HIDWORD(v132);
                LODWORD(v123) = *(_QWORD *)(v109 + 88);
                v131 = HIDWORD(*(_QWORD *)(v109 + 80));
                v133 = HIDWORD(v121);
                LODWORD(v124) = *(_QWORD *)(v109 + 72);
                v130 = HIDWORD(*(_QWORD *)(v109 + 64));
                v117 = *(_OWORD *)(v109 + 32);
                v122 = *(_OWORD *)(v109 + 48);
                v134 = HIDWORD(v122);
                v135 = *(_QWORD *)(v109 + 56);
                v136 = HIDWORD(*(_QWORD *)(v109 + 48));
                v112 = HIDWORD(v117);
                LODWORD(v111) = *(_QWORD *)(v109 + 40);
                v116 = HIDWORD(*(_QWORD *)(v109 + 32));
                v119 = *(_OWORD *)v109;
                v113 = *(_OWORD *)(v109 + 16);
                v118 = HIDWORD(v113);
                LODWORD(v115) = *(_QWORD *)(v109 + 24);
                v114 = HIDWORD(*(_QWORD *)(v109 + 16));
                v120 = HIDWORD(*(_OWORD *)v109);
                v127 = *(_QWORD *)(v109 + 8);
                v128 = HIDWORD(*(_QWORD *)v109);
              }
              else
              {
                v111 = *(_QWORD *)(v109 + 40);
                v112 = HIDWORD(v111);
                *(_QWORD *)&v113 = *(_QWORD *)(v109 + 16);
                v114 = DWORD1(v113);
                v115 = *(_OWORD *)(v109 + 24);
                v116 = HIDWORD(v115);
                LODWORD(v117) = *(_QWORD *)(v109 + 32);
                v118 = HIDWORD(*(_QWORD *)(v109 + 24));
                v119 = *(_OWORD *)v109;
                v120 = HIDWORD(*(_OWORD *)v109);
                *(_QWORD *)&v121 = *(_QWORD *)(v109 + 64);
                v122 = *(_OWORD *)(v109 + 48);
                v123 = *(_QWORD *)(v109 + 88);
                v124 = *(_OWORD *)(v109 + 72);
                *(_QWORD *)&v125 = *(_QWORD *)(v109 + 112);
                v126 = *(_OWORD *)(v109 + 96);
                v127 = *(_QWORD *)(v109 + 8);
                v128 = HIDWORD(*(_QWORD *)v109);
                v129 = HIDWORD(v123);
                v130 = DWORD1(v121);
                v131 = HIDWORD(v124);
                LODWORD(v132) = *(_QWORD *)(v109 + 80);
                v133 = HIDWORD(*(_QWORD *)(v109 + 72));
                v134 = HIDWORD(v122);
                v135 = *(_QWORD *)(v109 + 56);
                v136 = HIDWORD(*(_QWORD *)(v109 + 48));
                v137 = *(_QWORD *)(v109 + 136);
                v755 = HIDWORD(v137);
                v138 = DWORD1(v125);
                v139 = *(_OWORD *)(v109 + 120);
                v763 = HIDWORD(v139);
                LODWORD(v140) = *(_QWORD *)(v109 + 128);
                v750 = HIDWORD(*(_QWORD *)(v109 + 120));
                v747 = HIDWORD(v126);
                v141 = *(_QWORD *)(v109 + 104);
                v142 = HIDWORD(*(_QWORD *)(v109 + 96));
              }
              DWORD1(v113) = v114;
              DWORD1(v119) = v128;
              *((_QWORD *)&v119 + 1) = __PAIR64__(v120, v127);
              v143 = *(unsigned int *)(v772 + 1080);
              HIDWORD(v111) = v112;
              DWORD1(v115) = v118;
              *((_QWORD *)&v115 + 1) = __PAIR64__(v116, v117);
              DWORD1(v121) = v130;
              DWORD1(v122) = v136;
              *((_QWORD *)&v122 + 1) = __PAIR64__(v134, v135);
              HIDWORD(v123) = v129;
              DWORD1(v124) = v133;
              *((_QWORD *)&v124 + 1) = __PAIR64__(v131, v132);
              DWORD1(v125) = v138;
              DWORD1(v126) = v142;
              *((_QWORD *)&v126 + 1) = __PAIR64__(v747, v141);
              HIDWORD(v137) = v755;
              DWORD1(v139) = v750;
              *((_QWORD *)&v139 + 1) = __PAIR64__(v763, v140);
              v144 = v110 + 4 * (v104[1] + (_DWORD)v143 * v102[1]);
              *(_OWORD *)v144 = v119;
              *(_QWORD *)(v144 + 16) = v113;
              v145 = v144 + 4 * v143;
              *(_OWORD *)v145 = v115;
              *(_QWORD *)(v145 + 16) = v111;
              v146 = v144 + 8 * v143;
              *(_OWORD *)v146 = v122;
              *(_QWORD *)(v146 + 16) = v121;
              v147 = v144 + 12 * v143;
              *(_OWORD *)v147 = v124;
              *(_QWORD *)(v147 + 16) = v123;
              v148 = v144 + 16 * v143;
              *(_OWORD *)v148 = v126;
              *(_QWORD *)(v148 + 16) = v125;
              v149 = v144 + 20 * v143;
              *(_OWORD *)v149 = v139;
              *(_QWORD *)(v149 + 16) = v137;
            }
            if (v107 == v106)
              break;
            v104 += 2;
          }
          while (v104 != v105);
        }
LABEL_107:
        v102 += 2;
      }
      while (v102 != v103);
      v102 = *(unsigned int **)(v772 + 944);
      v103 = *(unsigned int **)(v772 + 952);
    }
    if (v102 != v103)
    {
      v150 = *(unsigned int **)(v772 + 968);
      for (j = *(unsigned int **)(v772 + 976); v150 != j; v150 += 2)
      {
        v152 = *(unsigned int **)(v772 + 944);
        v153 = *(unsigned int **)(v772 + 952);
        if (v152 != v153)
        {
          v155 = *(_QWORD *)(*(_QWORD *)(v92 + 120) + 24 * *v150);
          v154 = *(_QWORD *)(*(_QWORD *)(v92 + 120) + 24 * *v150 + 8);
          do
          {
            if (v155 == v154)
              break;
            v156 = *v152;
            while (*(_DWORD *)v155 < v156)
            {
              v155 += 16;
              if (v155 == v154)
                goto LABEL_127;
            }
            if (*(_DWORD *)v155 == v156)
            {
              v157 = *(_QWORD *)(v92 + 48) + 4 * *(_QWORD *)(v155 + 8);
              v158 = *(_QWORD *)(v772 + 1040);
              if (v157 == v158)
              {
                v188 = *(_OWORD *)(v157 + 128);
                v756 = HIDWORD(v188);
                LODWORD(v185) = *(_QWORD *)(v157 + 136);
                v764 = HIDWORD(*(_QWORD *)(v157 + 128));
                v174 = *(_OWORD *)(v157 + 96);
                v173 = *(_OWORD *)(v157 + 112);
                v751 = HIDWORD(v173);
                LODWORD(v187) = *(_QWORD *)(v157 + 120);
                v186 = HIDWORD(*(_QWORD *)(v157 + 112));
                v748 = HIDWORD(v174);
                v189 = *(_QWORD *)(v157 + 104);
                v190 = HIDWORD(*(_QWORD *)(v157 + 96));
                v169 = *(_OWORD *)(v157 + 64);
                v180 = *(_OWORD *)(v157 + 80);
                v177 = HIDWORD(v180);
                LODWORD(v171) = *(_QWORD *)(v157 + 88);
                v179 = HIDWORD(*(_QWORD *)(v157 + 80));
                v181 = HIDWORD(v169);
                LODWORD(v172) = *(_QWORD *)(v157 + 72);
                v178 = HIDWORD(*(_QWORD *)(v157 + 64));
                v165 = *(_OWORD *)(v157 + 32);
                v170 = *(_OWORD *)(v157 + 48);
                v182 = HIDWORD(v170);
                v183 = *(_QWORD *)(v157 + 56);
                v184 = HIDWORD(*(_QWORD *)(v157 + 48));
                v160 = HIDWORD(v165);
                LODWORD(v159) = *(_QWORD *)(v157 + 40);
                v164 = HIDWORD(*(_QWORD *)(v157 + 32));
                v167 = *(_OWORD *)v157;
                v161 = *(_OWORD *)(v157 + 16);
                v166 = HIDWORD(v161);
                LODWORD(v163) = *(_QWORD *)(v157 + 24);
                v162 = HIDWORD(*(_QWORD *)(v157 + 16));
                v168 = HIDWORD(*(_OWORD *)v157);
                v175 = *(_QWORD *)(v157 + 8);
                v176 = HIDWORD(*(_QWORD *)v157);
              }
              else
              {
                v159 = *(_QWORD *)(v157 + 40);
                v160 = HIDWORD(v159);
                *(_QWORD *)&v161 = *(_QWORD *)(v157 + 16);
                v162 = DWORD1(v161);
                v163 = *(_OWORD *)(v157 + 24);
                v164 = HIDWORD(v163);
                LODWORD(v165) = *(_QWORD *)(v157 + 32);
                v166 = HIDWORD(*(_QWORD *)(v157 + 24));
                v167 = *(_OWORD *)v157;
                v168 = HIDWORD(*(_OWORD *)v157);
                *(_QWORD *)&v169 = *(_QWORD *)(v157 + 64);
                v170 = *(_OWORD *)(v157 + 48);
                v171 = *(_QWORD *)(v157 + 88);
                v172 = *(_OWORD *)(v157 + 72);
                *(_QWORD *)&v173 = *(_QWORD *)(v157 + 112);
                v174 = *(_OWORD *)(v157 + 96);
                v175 = *(_QWORD *)(v157 + 8);
                v176 = HIDWORD(*(_QWORD *)v157);
                v177 = HIDWORD(v171);
                v178 = DWORD1(v169);
                v179 = HIDWORD(v172);
                LODWORD(v180) = *(_QWORD *)(v157 + 80);
                v181 = HIDWORD(*(_QWORD *)(v157 + 72));
                v182 = HIDWORD(v170);
                v183 = *(_QWORD *)(v157 + 56);
                v184 = HIDWORD(*(_QWORD *)(v157 + 48));
                v185 = *(_QWORD *)(v157 + 136);
                v756 = HIDWORD(v185);
                v186 = DWORD1(v173);
                v187 = *(_OWORD *)(v157 + 120);
                v764 = HIDWORD(v187);
                LODWORD(v188) = *(_QWORD *)(v157 + 128);
                v751 = HIDWORD(*(_QWORD *)(v157 + 120));
                v748 = HIDWORD(v174);
                v189 = *(_QWORD *)(v157 + 104);
                v190 = HIDWORD(*(_QWORD *)(v157 + 96));
              }
              DWORD1(v161) = v162;
              DWORD1(v167) = v176;
              *((_QWORD *)&v167 + 1) = __PAIR64__(v168, v175);
              v191 = *(unsigned int *)(v772 + 1056);
              HIDWORD(v159) = v160;
              DWORD1(v163) = v166;
              *((_QWORD *)&v163 + 1) = __PAIR64__(v164, v165);
              DWORD1(v169) = v178;
              DWORD1(v170) = v184;
              *((_QWORD *)&v170 + 1) = __PAIR64__(v182, v183);
              HIDWORD(v171) = v177;
              DWORD1(v172) = v181;
              *((_QWORD *)&v172 + 1) = __PAIR64__(v179, v180);
              DWORD1(v173) = v186;
              DWORD1(v174) = v190;
              *((_QWORD *)&v174 + 1) = __PAIR64__(v748, v189);
              HIDWORD(v185) = v756;
              DWORD1(v187) = v751;
              *((_QWORD *)&v187 + 1) = __PAIR64__(v764, v188);
              v192 = v158 + 4 * (v152[1] + (_DWORD)v191 * v150[1]);
              *(_OWORD *)v192 = v167;
              *(_QWORD *)(v192 + 16) = v161;
              v193 = v192 + 4 * v191;
              *(_OWORD *)v193 = v163;
              *(_QWORD *)(v193 + 16) = v159;
              v194 = v192 + 8 * v191;
              *(_OWORD *)v194 = v170;
              *(_QWORD *)(v194 + 16) = v169;
              v195 = v192 + 12 * v191;
              *(_OWORD *)v195 = v172;
              *(_QWORD *)(v195 + 16) = v171;
              v196 = v192 + 16 * v191;
              *(_OWORD *)v196 = v174;
              *(_QWORD *)(v196 + 16) = v173;
              v197 = v192 + 20 * v191;
              *(_OWORD *)v197 = v187;
              *(_QWORD *)(v197 + 16) = v185;
            }
            if (v155 == v154)
              break;
            v152 += 2;
          }
          while (v152 != v153);
        }
LABEL_127:
        ;
      }
    }
LABEL_143:
    sub_207D8C65C((uint64_t)v93, v100);
    v198 = (void **)(v772 + 632);
    sub_207D9F868(v772 + 632, v745);
    v765 = v772 + 1040;
    v199 = v772 + 1016;
    v200 = v772 + 992;
    v201 = *(unsigned int *)(v772 + 676);
    if ((_DWORD)v201)
    {
      for (k = 0; k < v201; ++k)
      {
        v204 = v772;
        v205 = (uint64_t *)(*(_QWORD *)(v772 + 752) + 24 * k);
        v203 = *v205;
        v206 = v205[1];
        if (*v205 != v206)
        {
          v207 = *(_QWORD *)(v772 + 720);
          v208 = *(_QWORD *)(v772 + 712);
          v209 = *(_QWORD *)(v772 + 744);
          do
          {
            v210 = ((v207 - v208) << 6) - 1;
            if (v207 == v208)
              v210 = 0;
            v211 = *(_QWORD *)(v204 + 736) + v209;
            if (v210 == v211)
            {
              sub_207D8BD2C((_QWORD *)(v772 + 704));
              v204 = v772;
              v208 = *(_QWORD *)(v772 + 712);
              v207 = *(_QWORD *)(v772 + 720);
              v211 = *(_QWORD *)(v772 + 744) + *(_QWORD *)(v772 + 736);
            }
            *(_QWORD *)(*(_QWORD *)(v208 + ((v211 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v211 & 0x1FF)) = *(_QWORD *)(v203 + 8);
            v209 = *(_QWORD *)(v204 + 744) + 1;
            *(_QWORD *)(v204 + 744) = v209;
            v203 += 16;
          }
          while (v203 != v206);
          v203 = *v205;
          v201 = *(unsigned int *)(v204 + 676);
        }
        v205[1] = v203;
      }
    }
    v212 = *(unsigned int *)(v772 + 648);
    if ((_DWORD)v212)
      bzero(*v198, 4 * v212);
    v213 = *(unsigned __int8 *)(v772 + 808);
    v214 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v772 + 600) + 40))(v744);
    v215 = v772 + 1088;
    if (v213)
      sub_207DA0498(v214, v745, v772 + 1088, v91);
    else
      sub_207DA0064(v214, v745, v772 + 1088, (uint64_t)v198, v91);
    if (*(_BYTE *)(v772 + 809))
    {
      __p[0].i8[0] = *(_BYTE *)(v772 + 808);
      v216 = *(_QWORD *)(v772 + 840);
      if (!v216)
        sub_207CA408C();
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, void **))(*(_QWORD *)v216 + 48))(v216, v199, v200, v765, __p, v215, v198) & 1) == 0)goto LABEL_7;
    }
    else if (!sub_207D8AA88(v199, v200, v765, *(_BYTE *)(v772 + 808) != 0, v215, (uint64_t)v198))
    {
LABEL_7:
      kdebug_trace();
LABEL_710:
      v605 = 1;
      goto LABEL_742;
    }
    v217 = v772;
    if (*(_DWORD *)(v772 + 676))
    {
      v218 = 0;
      v219 = (_QWORD *)(v772 + 704);
      v752 = (_QWORD *)(v772 + 680);
      v743 = 1;
      while (1)
      {
        v220 = *(_QWORD *)(v217 + 752);
        v221 = (uint64_t *)(v220 + 24 * v218);
        v223 = *v221;
        v222 = v221[1];
        if (*v221 != v222)
        {
          v224 = *(_QWORD *)(v217 + 720);
          v225 = *(_QWORD *)(v217 + 712);
          v226 = *(_QWORD *)(v217 + 744);
          do
          {
            v227 = ((v224 - v225) << 6) - 1;
            if (v224 == v225)
              v227 = 0;
            v228 = *(_QWORD *)(v217 + 736) + v226;
            if (v227 == v228)
            {
              sub_207D8BD2C(v219);
              v217 = v772;
              v225 = *(_QWORD *)(v772 + 712);
              v224 = *(_QWORD *)(v772 + 720);
              v228 = *(_QWORD *)(v772 + 744) + *(_QWORD *)(v772 + 736);
            }
            *(_QWORD *)(*(_QWORD *)(v225 + ((v228 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v228 & 0x1FF)) = *(_QWORD *)(v223 + 8);
            v226 = *(_QWORD *)(v217 + 744) + 1;
            *(_QWORD *)(v217 + 744) = v226;
            v223 += 16;
          }
          while (v223 != v222);
          v223 = *v221;
          v220 = *(_QWORD *)(v217 + 752);
        }
        v221[1] = v223;
        v229 = v218 + 1;
        v230 = *(_DWORD *)(v217 + 672);
        v741 = v218 + 1;
        if (v230 < (int)v218 + 1)
          v229 = *(_DWORD *)(v217 + 672);
        if (v229)
          break;
LABEL_166:
        v217 = v772;
        ++v743;
        v218 = v741;
        v219 = (_QWORD *)(v772 + 704);
        if (v741 >= *(unsigned int *)(v772 + 676))
          goto LABEL_255;
      }
      v231 = 0;
      v232 = (char **)(v220 + 24 * v218);
      v233 = v743;
      if (v230 < v743)
        v233 = *(_DWORD *)(v217 + 672);
      v757 = v233;
      v749 = v218;
      while (1)
      {
        v253 = *(_QWORD *)(v772 + 1088);
        v254 = *(unsigned int *)(v772 + 1104);
        v255 = *v232;
        v256 = v232[1];
        if (*v232 != v256)
        {
          while (*(_DWORD *)v255 < v231)
          {
            v255 += 16;
            if (v255 == v256)
              goto LABEL_190;
          }
        }
        if (v255 == v256)
          goto LABEL_190;
        if (*(_DWORD *)v255 != v231)
          break;
        v234 = *v752 + 4 * *((_QWORD *)v255 + 1);
LABEL_182:
        v235 = (__int128 *)(v253 + 24 * (v231 + (_DWORD)v254 * (_DWORD)v218));
        v236 = *((_QWORD *)v235 + 2);
        v237 = *v235;
        v238 = (__int128 *)((char *)v235 + 4 * v254);
        v239 = *((_QWORD *)v238 + 2);
        v240 = *v238;
        v241 = (__int128 *)((char *)v235 + 8 * v254);
        v242 = *((_QWORD *)v241 + 2);
        v243 = *v241;
        v244 = (__int128 *)((char *)v235 + 12 * v254);
        v245 = *((_QWORD *)v244 + 2);
        v246 = *v244;
        v247 = &v235[v254];
        v248 = *((_QWORD *)v247 + 2);
        v249 = *v247;
        v250 = (__int128 *)((char *)v235 + 20 * v254);
        v251 = *((_QWORD *)v250 + 2);
        v252 = *v250;
        *(_OWORD *)v234 = v237;
        *(_QWORD *)(v234 + 16) = v236;
        *(_OWORD *)(v234 + 24) = v240;
        *(_QWORD *)(v234 + 40) = v239;
        *(_OWORD *)(v234 + 48) = v243;
        *(_QWORD *)(v234 + 64) = v242;
        *(_OWORD *)(v234 + 72) = v246;
        *(_QWORD *)(v234 + 88) = v245;
        *(_OWORD *)(v234 + 96) = v249;
        *(_QWORD *)(v234 + 112) = v248;
        *(_OWORD *)(v234 + 120) = v252;
        *(_QWORD *)(v234 + 136) = v251;
        if (++v231 == v757)
          goto LABEL_166;
      }
      v256 = v255;
LABEL_190:
      v257 = *(_QWORD *)(v772 + 744);
      v766 = *(_QWORD *)(v772 + 1088);
      if (v257)
      {
        v258 = *(_QWORD *)(v772 + 712);
        v259 = *(_QWORD *)(v772 + 720);
        v260 = ((v259 - v258) << 6) - 1;
        v261 = *(_QWORD *)(v772 + 736);
        if (v259 == v258)
          v260 = 0;
        v234 = *(_QWORD *)(v772 + 680)
             + 4
             * *(_QWORD *)(*(_QWORD *)(v258 + (((unint64_t)(v261 + v257 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v261 + v257 - 1) & 0x1FF));
        *(_QWORD *)(v772 + 744) = v257 - 1;
        if ((unint64_t)(v260 - (v257 + v261) + 1) >= 0x400)
        {
          operator delete(*(void **)(v259 - 8));
          *(_QWORD *)(v772 + 720) -= 8;
        }
        goto LABEL_254;
      }
      v262 = *(_QWORD *)(v772 + 688);
      __p[0].i32[0] = 0;
      v263 = *(_QWORD *)(v772 + 680);
      v264 = v262 - v263;
      v265 = (uint64_t)(v262 - v263) >> 2;
      v266 = (float32x4_t *)(v263 + ((v262 - v263) & 0xFFFFFFFFFFFFFFFCLL));
      v267 = *(_QWORD *)(v772 + 696);
      if (v267 - v262 < 0x90)
      {
        v268 = v265 + 36;
        if ((unint64_t)(v265 + 36) >> 62)
          sub_207D0CD58();
        v269 = v267 - v263;
        if (v269 >> 1 > v268)
          v268 = v269 >> 1;
        if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL)
          v268 = 0x3FFFFFFFFFFFFFFFLL;
        *(_QWORD *)v746 = v268;
        if (v268)
        {
          if (v268 >> 62)
LABEL_775:
            sub_207CA3AB8();
          v270 = operator new(4 * v268);
          v265 = (uint64_t)(v262 - v263) >> 2;
        }
        else
        {
          v270 = 0;
        }
        v277 = &v270[4 * v265];
        v277[7] = 0u;
        v277[8] = 0u;
        v277[5] = 0u;
        v277[6] = 0u;
        v277[3] = 0u;
        v277[4] = 0u;
        v277[1] = 0u;
        v277[2] = 0u;
        *v277 = 0u;
        if (v263 == v262)
        {
          v279 = &v270[4 * v265];
        }
        else
        {
          if (v264 - 4 >= 0x3C)
          {
            v278 = (char *)(v263 + ((v262 - v263) & 0xFFFFFFFFFFFFFFFCLL));
            v279 = &v270[4 * v265];
            if (v263 + (v264 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v270[v264 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
            {
              v280 = ((v264 - 4) >> 2) + 1;
              v281 = 4 * (v280 & 0x7FFFFFFFFFFFFFF8);
              v278 = (char *)v266 - v281;
              v279 = (char *)v277 - v281;
              v282 = &v270[4 * v265 - 16];
              v283 = (__int128 *)(v263 + 4 * v265 - 16);
              v284 = v280 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v285 = *v283;
                *(v282 - 1) = *(v283 - 1);
                *v282 = v285;
                v282 -= 2;
                v283 -= 2;
                v284 -= 8;
              }
              while (v284);
              if (v280 == (v280 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_218;
            }
          }
          else
          {
            v278 = (char *)(v263 + ((v262 - v263) & 0xFFFFFFFFFFFFFFFCLL));
            v279 = &v270[4 * v265];
          }
          do
          {
            v286 = *((_DWORD *)v278 - 1);
            v278 -= 4;
            *((_DWORD *)v279 - 1) = v286;
            v279 -= 4;
          }
          while (v278 != (char *)v263);
        }
LABEL_218:
        v287 = v277 + 9;
        v288 = v262 - (_QWORD)v266;
        if (v288)
          memmove(v277 + 9, v266, v288);
        *(_QWORD *)(v772 + 680) = v279;
        *(_QWORD *)(v772 + 688) = (char *)v287 + v288;
        *(_QWORD *)(v772 + 696) = &v270[4 * *(_QWORD *)v746];
        if (v263)
          operator delete((void *)v263);
        goto LABEL_253;
      }
      v271 = v262 - (_QWORD)v266;
      if (v262 - (unint64_t)v266 > 0x8F)
      {
        v273 = v262;
        v272 = 36;
        goto LABEL_229;
      }
      v272 = v271 >> 2;
      v273 = v262 + 4 * (36 - (v271 >> 2));
      v274 = v271 & 0xFFFFFFFFFFFFFFFCLL;
      v275 = 140 - v274;
      if (140 - v274 >= 0x3C)
      {
        v289 = (unint64_t)__p < v262 - v274 + 144;
        if (v262 >= (unint64_t)__p[0].u64 + 4 || (v276 = (_DWORD *)v262, !v289))
        {
          v290 = (v275 >> 2) + 1;
          v276 = (_DWORD *)(v262 + 4 * (v290 & 0x7FFFFFFFFFFFFFF8));
          v291 = __p;
          v292 = vld1q_dup_f32(v291->f32);
          v293 = (float32x4_t *)(v262 + 16);
          v294 = v290 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v293[-1] = v292;
            *v293 = v292;
            v293 += 2;
            v294 -= 8;
          }
          while (v294);
          if (v290 == (v290 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_228:
            *(_QWORD *)(v772 + 688) = v273;
            if ((float32x4_t *)v262 == v266)
              goto LABEL_253;
LABEL_229:
            v295 = v273 - (_QWORD)(v266 + 9);
            v296 = v295 >> 2;
            v297 = (int *)(v273 - 144);
            v298 = (_DWORD *)v273;
            if (v273 - 144 < v262)
            {
              v299 = (v264 & 0xFFFFFFFFFFFFFFFCLL) + v295;
              v300 = v263 + v299 + 4;
              if (v262 > v300)
                v300 = v262;
              v301 = v300 + ~v263 - v299;
              if (v301 >= 0x2C)
              {
                v302 = (v301 >> 2) + 1;
                v303 = 4 * (v302 & 0x7FFFFFFFFFFFFFF8);
                v297 = (int *)((char *)v297 + v303);
                v298 = (_DWORD *)(v273 + v303);
                v304 = (_OWORD *)(v273 + 16);
                v305 = (__int128 *)(v263 + 4 * v296 + 4 * v265 + 16);
                v306 = v302 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v307 = *v305;
                  *(v304 - 1) = *(v305 - 1);
                  *v304 = v307;
                  v304 += 2;
                  v305 += 2;
                  v306 -= 8;
                }
                while (v306);
                if (v302 == (v302 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_238;
              }
              else
              {
                v298 = (_DWORD *)v273;
              }
              do
              {
                v308 = *v297++;
                *v298++ = v308;
              }
              while ((unint64_t)v297 < v262);
            }
LABEL_238:
            *(_QWORD *)(v772 + 688) = v298;
            if ((float32x4_t *)v273 != &v266[9])
            {
              memmove((void *)(v273 - 4 * v296), (const void *)(v263 + ((v262 - v263) & 0xFFFFFFFFFFFFFFFCLL)), v295);
              v265 = (uint64_t)(v262 - v263) >> 2;
            }
            v309 = __p;
            if (v266 <= __p)
            {
              v310 = 9;
              if (*(_QWORD *)(v772 + 688) <= (unint64_t)__p)
                v310 = 0;
              v309 = &__p[v310];
            }
            if (v272 >= 0xC)
            {
              if (v266 >= (float32x4_t *)&v309->i32[1]
                || (unint64_t)v309 >= v263 + (v264 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v272)
              {
                v266 = (float32x4_t *)((char *)v266 + 4 * (v272 & 0xFFFFFFFFFFFFFFF8));
                v311 = v272 & 7;
                v312 = vld1q_dup_f32(v309->f32);
                v313 = (float32x4_t *)(v263 + 4 * v265 + 16);
                v314 = v272 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v313[-1] = v312;
                  *v313 = v312;
                  v313 += 2;
                  v314 -= 8;
                }
                while (v314);
                if (v272 == (v272 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_253;
              }
              else
              {
                v311 = v272;
              }
            }
            else
            {
              v311 = v272;
            }
            do
            {
              v266->i32[0] = v309->i32[0];
              v266 = (float32x4_t *)((char *)v266 + 4);
              --v311;
            }
            while (v311);
LABEL_253:
            v234 = *(_QWORD *)(v772 + 688) - 144;
LABEL_254:
            v315 = (v234 - *v752) >> 2;
            __p[0].i32[0] = v231;
            __p[0].i64[1] = v315;
            sub_207D89100(v232, v256, __p);
            LODWORD(v218) = v749;
            v253 = v766;
            goto LABEL_182;
          }
        }
      }
      else
      {
        v276 = (_DWORD *)v262;
      }
      do
        *v276++ = __p[0].i32[0];
      while (v276 != (_DWORD *)v273);
      goto LABEL_228;
    }
LABEL_255:
    v316 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
    v767 = (void **)(v772 + 1136);
    sub_207DA0814(v316, v736, v772 + 1136);
    if (v737 != (char **)(v738 + 48))
      sub_207CB9D2C(v737, *(char **)(v738 + 48), *(char **)(v738 + 56), (uint64_t)(*(_QWORD *)(v738 + 56) - *(_QWORD *)(v738 + 48)) >> 2);
    v317 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
    v318 = *(void **)(v772 + 1136);
    *(_QWORD *)(v772 + 1144) = v318;
    v319 = *(_QWORD *)(v772 + 896);
    v320 = *(_QWORD *)(v772 + 904);
    if (v319 == v320)
      goto LABEL_397;
    v321 = v317;
    v322 = v320 - v319;
    v323 = (v320 - v319) >> 2;
    if (v323 > (uint64_t)(*(_QWORD *)(v772 + 1152) - (_QWORD)v318) >> 2)
    {
      if ((v322 & 0x8000000000000000) != 0)
        goto LABEL_782;
      v324 = (char *)operator new(v322);
      *(_QWORD *)(v772 + 1136) = v324;
      *(_QWORD *)(v772 + 1144) = v324;
      *(_QWORD *)(v772 + 1152) = &v324[4 * v323];
      if (v318)
      {
        operator delete(v318);
        v323 = (uint64_t)(*(_QWORD *)(v772 + 904) - *(_QWORD *)(v772 + 896)) >> 2;
      }
    }
    v753 = (void **)(v321 + 152);
    v326 = *(_BYTE **)(v321 + 152);
    v325 = *(_BYTE **)(v321 + 160);
    v327 = (v325 - v326) >> 2;
    v328 = v327 + v323;
    if (v328 <= (uint64_t)(*(_QWORD *)(v321 + 168) - (_QWORD)v326) >> 2)
    {
      v330 = *(char **)(v321 + 160);
      v331 = *(char **)(v321 + 152);
      goto LABEL_296;
    }
    if (!(v328 >> 62))
    {
      v329 = operator new(4 * v328);
      v330 = &v329[4 * v327];
      v331 = v330;
      if (v325 == v326)
        goto LABEL_294;
      v332 = v325 - v326 - 4;
      if (v332 >= 0x2C)
      {
        v331 = &v329[4 * v327];
        if ((unint64_t)(v326 - v329) >= 0x20)
        {
          v344 = (v332 >> 2) + 1;
          v345 = 4 * (v344 & 0x7FFFFFFFFFFFFFF8);
          v346 = &v325[-v345];
          v331 = &v330[-v345];
          v347 = &v329[4 * v327 - 16];
          v348 = (__int128 *)(v325 - 16);
          v349 = v344 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v350 = *v348;
            *(v347 - 1) = *(v348 - 1);
            *v347 = v350;
            v347 -= 2;
            v348 -= 2;
            v349 -= 8;
          }
          while (v349);
          v325 = v346;
          if (v344 == (v344 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_294:
            *(_QWORD *)(v321 + 152) = v331;
            *(_QWORD *)(v321 + 160) = v330;
            *(_QWORD *)(v321 + 168) = &v329[4 * v328];
            if (v326)
            {
              operator delete(v326);
              v331 = *(char **)(v321 + 152);
              v330 = *(char **)(v321 + 160);
            }
LABEL_296:
            v352 = *(char **)(v772 + 896);
            v353 = *(char **)(v772 + 904);
            if (v331 == v330)
            {
              v354 = 0;
            }
            else
            {
              v354 = 0;
              while (*(_DWORD *)v331 <= *(_DWORD *)v352)
              {
                v331 += 4;
                ++v354;
                if (v331 == v330)
                  goto LABEL_303;
              }
              v330 = v331;
            }
LABEL_303:
            v758 = v321;
            if (v352 == v353)
            {
LABEL_304:
              v355 = *(char **)(v772 + 1136);
              v356 = *(char **)(v772 + 1144);
              if (v355 != v356)
              {
                v357 = v356 - v355;
                if (*(_QWORD *)(v321 + 40))
                {
                  sub_207D8DB64(v321 + 32, v355, v356, v357 >> 2);
                  sub_207D8DF94(v321 + 32, *(char **)(v772 + 1136), *(char **)(v772 + 1144));
                }
                else
                {
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)(v321 + 32) + 24))(v321 + 32, (unint64_t)v357 >> 2, (unint64_t)v357 >> 2);
                }
                memset(__p, 0, 24);
                v379 = *(char **)(v772 + 1144);
                v380 = *(char **)(v772 + 1136);
                v381 = v379 - v380;
                if (v379 != v380)
                {
                  if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_779:
                    sub_207CA420C();
                  v382 = operator new(2 * v381);
                  __p[0].i64[0] = (uint64_t)v382;
                  __p[0].i64[1] = (uint64_t)v382;
                  __p[1].i64[0] = (uint64_t)&v382[v381 >> 2];
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v384 = (6 * *(_DWORD *)v380);
                        v385 = __p[0].i64[0];
                        if ((_QWORD *)__p[0].i64[0] == v382 || *((_DWORD *)v382 - 1) != (_DWORD)v384)
                          break;
                        *((_DWORD *)v382 - 1) = v384 + 6;
                        v380 += 4;
                        if (v380 == v379)
                          goto LABEL_371;
                      }
                      v386 = (v384 + 6);
                      if ((unint64_t)v382 >= __p[1].i64[0])
                        break;
                      *v382 = v384 | (v386 << 32);
                      v383 = (uint64_t)(v382 + 1);
LABEL_337:
                      __p[0].i64[1] = v383;
                      v382 = (_QWORD *)v383;
                      v380 += 4;
                      if (v380 == v379)
                        goto LABEL_371;
                    }
                    v387 = (char *)v382 - __p[0].i64[0];
                    v388 = ((uint64_t)v382 - __p[0].i64[0]) >> 3;
                    v389 = v388 + 1;
                    if ((unint64_t)(v388 + 1) >> 61)
                      goto LABEL_779;
                    v390 = __p[1].i64[0] - __p[0].i64[0];
                    if ((__p[1].i64[0] - __p[0].i64[0]) >> 2 > v389)
                      v389 = v390 >> 2;
                    v391 = (unint64_t)v390 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v389;
                    if (!v391)
                      break;
                    if (v391 >> 61)
                      sub_207CA3AB8();
                    v392 = (char *)operator new(8 * v391);
                    v393 = &v392[8 * v388];
                    *(_QWORD *)v393 = v384 | (v386 << 32);
                    v383 = (uint64_t)(v393 + 8);
                    if ((_QWORD *)v385 != v382)
                      goto LABEL_354;
LABEL_358:
                    __p[0].i64[0] = (uint64_t)v393;
                    __p[1].i64[0] = (uint64_t)&v392[8 * v391];
                    if (!v382)
                      goto LABEL_337;
                    operator delete(v382);
                    __p[0].i64[1] = v383;
                    v382 = (_QWORD *)v383;
                    v380 += 4;
                    if (v380 == v379)
                    {
LABEL_371:
                      v403 = (float32x2_t *)__p[0].i64[0];
                      v321 = v758;
                      goto LABEL_373;
                    }
                  }
                  v392 = 0;
                  v393 = (char *)(8 * v388);
                  *(_QWORD *)(8 * v388) = v384 | (v386 << 32);
                  v383 = 8 * v388 + 8;
                  if ((_QWORD *)v385 == v382)
                    goto LABEL_358;
LABEL_354:
                  if ((unint64_t)(v387 - 8) >= 0x168)
                  {
                    v396 = ((unint64_t)v382 - v385 - 8) & 0xFFFFFFFFFFFFFFF8;
                    if (&v387[(_QWORD)v392 - 8 - v396] > &v387[(_QWORD)v392 - 8])
                    {
                      v394 = v382;
                    }
                    else if ((_QWORD *)((char *)v382 - v396 - 8) > v382 - 1)
                    {
                      v394 = v382;
                    }
                    else if ((unint64_t)(v385 - (_QWORD)v392) >= 0x20)
                    {
                      v397 = ((unint64_t)(v387 - 8) >> 3) + 1;
                      v398 = 8 * (v397 & 0x3FFFFFFFFFFFFFFCLL);
                      v394 = &v382[v398 / 0xFFFFFFFFFFFFFFF8];
                      v393 -= v398;
                      v399 = &v392[8 * v388 - 16];
                      v400 = (__int128 *)(v382 - 2);
                      v401 = v397 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v402 = *v400;
                        *((_OWORD *)v399 - 1) = *(v400 - 1);
                        *(_OWORD *)v399 = v402;
                        v399 -= 32;
                        v400 -= 2;
                        v401 -= 4;
                      }
                      while (v401);
                      if (v397 == (v397 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_357;
                    }
                    else
                    {
                      v394 = v382;
                    }
                  }
                  else
                  {
                    v394 = v382;
                  }
                  do
                  {
                    v395 = *--v394;
                    *((_QWORD *)v393 - 1) = v395;
                    v393 -= 8;
                  }
                  while (v394 != (_QWORD *)v385);
LABEL_357:
                  v382 = (_QWORD *)__p[0].i64[0];
                  goto LABEL_358;
                }
                v403 = 0;
                v382 = 0;
LABEL_373:
                v404 = (char *)v382 - (char *)v403;
                if ((((char *)v382 - (char *)v403) & 0x7FFFFFFF0) != 0)
                {
                  v405 = v403 + 1;
                  v406 = v403->i32[0];
                  v407 = (v404 >> 3) - 1;
                  do
                  {
                    v406 += v405->i32[0] - v405[-1].i32[1];
                    v405->i32[0] = v406;
                    ++v405;
                    --v407;
                  }
                  while (v407);
                }
                v408 = *(_DWORD *)(v321 + 24);
                v409 = 6 * (v408 + ((*(_QWORD *)(v772 + 1144) - *(_QWORD *)(v772 + 1136)) >> 2));
                v410 = *(_QWORD *)(v321 + 8);
                if (v409 <= v410)
                {
                  if ((v404 & 0x7FFFFFFF8) != 0)
                  {
                    v420 = *(char **)v321;
                    v421 = 6 * v408;
                    v422 = (v404 >> 3) - 1;
                    do
                    {
                      v423 = v422;
                      v424 = v403[v422].u32[0];
                      v425 = (const void *)(*(_QWORD *)v321 + 4 * *(unsigned int *)(v321 + 28) + 4 * v424);
                      v426 = (uint64_t)v425 + 4 * v421 + -4 * v424;
                      if ((const void *)v426 != v425)
                        memmove(&v420[4 * v403[v422].u32[1]], v425, v426 - (_QWORD)v425);
                      --v422;
                      v421 = v424;
                    }
                    while (v423);
                    v410 = *(_QWORD *)(v321 + 8);
                  }
                  *(_DWORD *)(v321 + 16) = v409;
                  if (v410 < v409)
                  {
                    if (*(_QWORD *)v321)
                      operator delete[](*(void **)v321);
                    *(_QWORD *)v321 = 0;
                    *(_QWORD *)(v321 + 8) = ((4 * v409 + 31) & 0x7FFFFFFE0) >> 2;
                    *(_QWORD *)v321 = MEMORY[0x20BD028B4]();
                  }
                }
                else
                {
                  v411 = MEMORY[0x20BD028B4]((24 * (v408 + ((*(_QWORD *)(v772 + 1144) - *(_QWORD *)(v772 + 1136)) >> 2))+ 31) & 0x7FFFFFFE0, 32);
                  v412 = *(char **)v321;
                  if ((v404 & 0x7FFFFFFF8) != 0)
                  {
                    v413 = 6 * v408;
                    v414 = &v412[4 * *(unsigned int *)(v321 + 28)];
                    v415 = (v404 >> 3) - 1;
                    do
                    {
                      v416 = v415;
                      v417 = v403[v415].u32[0];
                      v418 = &v414[4 * v417];
                      v419 = (uint64_t)&v418[4 * v413 + -4 * v417];
                      if ((char *)v419 != v418)
                        memmove((void *)(v411 + 4 * v403[v415].u32[1]), v418, v419 - (_QWORD)v418);
                      --v415;
                      v413 = v417;
                    }
                    while (v416);
                  }
                  *(_QWORD *)v321 = v411;
                  *(_QWORD *)(v321 + 8) = ((4 * v409 + 31) & 0x7FFFFFFE0uLL) >> 2;
                  *(_DWORD *)(v321 + 16) = v409;
                  if (v412)
                    operator delete[](v412);
                }
                *(_DWORD *)(v321 + 24) += (*(_QWORD *)(v772 + 1144) - *(_QWORD *)(v772 + 1136)) >> 2;
                if (v403)
                {
                  v343 = v403;
                  goto LABEL_396;
                }
              }
              goto LABEL_397;
            }
            while (1)
            {
              if (v330 != *(char **)(v321 + 160) && *(_DWORD *)v352 == *(_DWORD *)v330)
                goto LABEL_307;
              v358 = *(char **)(v772 + 1144);
              v359 = *(_QWORD *)(v772 + 1152);
              if ((unint64_t)v358 >= v359)
                break;
              *(_DWORD *)v358 = v354;
              v360 = (uint64_t)(v358 + 4);
LABEL_331:
              *(_QWORD *)(v772 + 1144) = v360;
              v330 = sub_207D8D7DC(v753, v330, v352);
              v352 += 4;
              v321 = v758;
LABEL_307:
              v330 += 4;
              ++v354;
              if (v352 == v353)
                goto LABEL_304;
            }
            v361 = (char *)*v767;
            v362 = v358 - (_BYTE *)*v767;
            v363 = v362 >> 2;
            v364 = (v362 >> 2) + 1;
            if (v364 >> 62)
              goto LABEL_782;
            v365 = v359 - (_QWORD)v361;
            if (v365 >> 1 > v364)
              v364 = v365 >> 1;
            if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFFCLL)
              v366 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v366 = v364;
            if (v366)
            {
              if (v366 >> 62)
                goto LABEL_775;
              v367 = operator new(4 * v366);
              v368 = &v367[4 * v363];
              *v368 = v354;
              v360 = (uint64_t)(v368 + 1);
              v369 = v358 - v361;
              if (v358 == v361)
                goto LABEL_329;
            }
            else
            {
              v367 = 0;
              v368 = (_DWORD *)(4 * v363);
              *(_DWORD *)(4 * v363) = v354;
              v360 = 4 * v363 + 4;
              v369 = v358 - v361;
              if (v358 == v361)
              {
LABEL_329:
                *(_QWORD *)(v772 + 1136) = v368;
                *(_QWORD *)(v772 + 1144) = v360;
                *(_QWORD *)(v772 + 1152) = &v367[4 * v366];
                if (v361)
                  operator delete(v361);
                goto LABEL_331;
              }
            }
            v370 = v369 - 4;
            if (v370 < 0x2C)
              goto LABEL_785;
            if ((unint64_t)(v358 - &v367[v362]) < 0x20)
              goto LABEL_785;
            v371 = (v370 >> 2) + 1;
            v372 = 4 * (v371 & 0x7FFFFFFFFFFFFFF8);
            v373 = &v358[-v372];
            v368 = (_DWORD *)((char *)v368 - v372);
            v374 = &v367[4 * v363 - 16];
            v375 = v358 - 16;
            v376 = v371 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v377 = *(_OWORD *)v375;
              *(v374 - 1) = *((_OWORD *)v375 - 1);
              *v374 = v377;
              v374 -= 2;
              v375 -= 32;
              v376 -= 8;
            }
            while (v376);
            v358 = v373;
            if (v371 != (v371 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_785:
              do
              {
                v378 = *((_DWORD *)v358 - 1);
                v358 -= 4;
                *--v368 = v378;
              }
              while (v358 != v361);
            }
            goto LABEL_329;
          }
        }
      }
      else
      {
        v331 = &v329[4 * v327];
      }
      do
      {
        v351 = *((_DWORD *)v325 - 1);
        v325 -= 4;
        *((_DWORD *)v331 - 1) = v351;
        v331 -= 4;
      }
      while (v325 != v326);
      goto LABEL_294;
    }
LABEL_782:
    sub_207CA420C();
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
  if (a1 + 872 != v24 + 152)
    sub_207CB9D2C((_QWORD *)(a1 + 872), *(char **)(v24 + 152), *(char **)(v24 + 160), (uint64_t)(*(_QWORD *)(v24 + 160) - *(_QWORD *)(v24 + 152)) >> 2);
  v25 = *(char **)(a1 + 872);
  v26 = *(char **)(a1 + 880);
  if (v25 != v26)
  {
    v27 = *(char **)(v738 + 32);
    v28 = *v13;
    v29 = *(char **)(a1 + 872);
    while (v28 != v27)
    {
      v30 = *(_DWORD *)v29;
      if (*(_DWORD *)v29 >= *(_DWORD *)v28)
      {
        v29 += 4 * (*(_DWORD *)v28 >= v30);
        v28 += 4;
        if (v29 == v26)
          goto LABEL_269;
      }
      else
      {
        *(_DWORD *)v25 = v30;
        v25 += 4;
        v29 += 4;
        if (v29 == v26)
          goto LABEL_269;
      }
    }
    if (v29 == v25)
      goto LABEL_271;
    v333 = v26 - v29;
    memmove(v25, v29, v26 - v29);
    v25 += v333;
    v26 = *(char **)(a1 + 880);
LABEL_269:
    if (v25 != v26)
      *(_QWORD *)(a1 + 880) = v25;
  }
LABEL_271:
  v778 = 0;
  v779 = 0;
  v780 = 0;
  v334 = *(_QWORD *)(a1 + 792) - *(_QWORD *)(a1 + 784);
  if (v334)
  {
    sub_207CB9B90((uint64_t)&v778, v334 >> 2);
    v335 = *(char **)(a1 + 784);
    v336 = *(char **)(a1 + 792);
    v337 = v778;
    v338 = *(_QWORD *)(a1 + 880);
    __p[0].i64[0] = *(_QWORD *)(a1 + 872);
    v776.i64[0] = (uint64_t)v778;
    if (v335 == v336)
    {
      v339 = 0;
    }
    else
    {
      while (__p[0].i64[0] != v338)
      {
        v340 = *(_DWORD *)v335;
        if (*(_DWORD *)v335 >= *(_DWORD *)__p[0].i64[0])
        {
          v335 += 4 * (*(_DWORD *)__p[0].i64[0] >= v340);
          __p[0].i64[0] += 4;
          if (v335 == v336)
            goto LABEL_278;
        }
        else
        {
          v341 = v776.i64[0];
          *(_DWORD *)v776.i64[0] = v340;
          v335 += 4;
          v776.i64[0] = v341 + 4;
          if (v335 == v336)
          {
LABEL_278:
            v339 = 0;
            v337 = (float32x2_t *)v776.i64[0];
            goto LABEL_283;
          }
        }
      }
      v337 = (float32x2_t *)v776.i64[0];
      v339 = v336 - v335;
      if (v336 != v335)
        memmove((void *)v776.i64[0], v335, v336 - v335);
    }
  }
  else
  {
    v339 = 0;
    v337 = 0;
  }
LABEL_283:
  v342 = (float32x2_t *)((char *)v337 + v339);
  if (v342 != v779)
    v779 = v342;
  memset(__p, 0, 24);
  sub_207DA0814(a1 + 632, &v778, (uint64_t)__p);
  if (__p[0].i64[0])
  {
    __p[0].i64[1] = __p[0].i64[0];
    operator delete((void *)__p[0].i64[0]);
  }
  v343 = v778;
  if (v778)
  {
    v779 = v778;
LABEL_396:
    operator delete(v343);
  }
LABEL_397:
  sub_207D9F280(v742);
  v427 = v772;
  if (*(_BYTE *)(v772 + 193))
  {
    v428 = *(_QWORD **)(v772 + 120);
    v429 = *(_QWORD **)(v772 + 128);
    if (v428 == v429)
    {
      v430 = *(_QWORD **)(v772 + 120);
    }
    else
    {
      v430 = *(_QWORD **)(v772 + 128);
      v431 = v428 + 13;
      while (!*((_BYTE *)v431 - 8))
      {
        v63 = v431 == v429;
        v431 += 13;
        if (v63)
          goto LABEL_418;
      }
      --*(_DWORD *)(*(v431 - 7) + 8);
      *(v431 - 7) = 0;
      v432 = (int64x2_t)xmmword_208235340;
      *(int64x2_t *)(v772 + 176) = vaddq_s64(*(int64x2_t *)(v772 + 176), (int64x2_t)xmmword_208235340);
      v433 = v431 - 13;
      if (v431 - 13 != v429)
      {
        if (v431 == v429)
        {
          v430 = v431 - 13;
        }
        else
        {
          v430 = v431 - 13;
          do
          {
            while (1)
            {
              v434 = v431;
              if (!*((_BYTE *)v433 + 200))
                break;
              --*(_DWORD *)(v433[19] + 8);
              v433[19] = 0;
              *(int64x2_t *)(v772 + 176) = vaddq_s64(*(int64x2_t *)(v772 + 176), v432);
              v431 += 13;
              v433 = v434;
              if (v434 + 13 == v429)
                goto LABEL_418;
            }
            *v430 = *v431;
            v430[1] = v433[14];
            v435 = v433[15];
            *((_DWORD *)v430 + 6) = *((_DWORD *)v433 + 32);
            v430[2] = v435;
            *(_QWORD *)((char *)v430 + 28) = *(_QWORD *)((char *)v433 + 132);
            v430[5] = v433[18];
            v430[6] = v433[19];
            v430[7] = v433[20];
            v430[8] = v433[21];
            LODWORD(v435) = *((_DWORD *)v433 + 44);
            *((_BYTE *)v430 + 76) = *((_BYTE *)v433 + 180);
            *((_DWORD *)v430 + 18) = v435;
            v436 = *(_OWORD *)(v433 + 23);
            v433[23] = 0;
            v433[24] = 0;
            v437 = (std::__shared_weak_count *)v430[11];
            *((_OWORD *)v430 + 5) = v436;
            if (v437)
            {
              p_shared_owners = (unint64_t *)&v437->__shared_owners_;
              do
                v439 = __ldaxr(p_shared_owners);
              while (__stlxr(v439 - 1, p_shared_owners));
              if (!v439)
              {
                ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
                std::__shared_weak_count::__release_weak(v437);
                v432 = (int64x2_t)xmmword_208235340;
              }
            }
            *((_BYTE *)v430 + 96) = *((_BYTE *)v433 + 200);
            v430 += 13;
            v431 = v434 + 13;
            v433 = v434;
          }
          while (v434 + 13 != v429);
        }
      }
    }
LABEL_418:
    v440 = v772;
    v441 = *(_QWORD **)(v772 + 128);
    if (v430 != v441)
    {
      while (v441 != v430)
      {
        v442 = (std::__shared_weak_count *)*(v441 - 2);
        if (v442)
        {
          v443 = (unint64_t *)&v442->__shared_owners_;
          do
            v444 = __ldaxr(v443);
          while (__stlxr(v444 - 1, v443));
          if (!v444)
          {
            ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
            std::__shared_weak_count::__release_weak(v442);
          }
        }
        v441 -= 13;
      }
      v440 = v772;
      *(_QWORD *)(v772 + 128) = v430;
    }
    v445 = *(_QWORD **)(v440 + 144);
    v446 = *(_QWORD **)(v440 + 152);
    if (v445 == v446)
    {
      v447 = *(_QWORD **)(v440 + 144);
    }
    else
    {
      v447 = *(_QWORD **)(v440 + 152);
      v448 = v445 + 31;
      while (!*((_BYTE *)v448 - 8))
      {
        v63 = v448 == v446;
        v448 += 31;
        if (v63)
          goto LABEL_453;
      }
      --*(_DWORD *)(*(v448 - 11) + 8);
      *(v448 - 11) = 0;
      v449 = (int64x2_t)xmmword_208235380;
      *(int64x2_t *)(v772 + 176) = vaddq_s64(*(int64x2_t *)(v772 + 176), (int64x2_t)xmmword_208235380);
      v450 = v448 - 31;
      if (v448 - 31 != v446)
      {
        if (v448 == v446)
        {
          v447 = v448 - 31;
        }
        else
        {
          v447 = v448 - 31;
          do
          {
            while (1)
            {
              v451 = v448;
              if (!*((_BYTE *)v450 + 488))
                break;
              --*(_DWORD *)(v450[51] + 8);
              v450[51] = 0;
              *(int64x2_t *)(v772 + 176) = vaddq_s64(*(int64x2_t *)(v772 + 176), v449);
              v448 += 31;
              v450 = v451;
              if (v451 + 31 == v446)
                goto LABEL_453;
            }
            *v447 = *v448;
            v447[1] = v450[32];
            v452 = *(_OWORD *)(v450 + 33);
            v453 = *(_OWORD *)(v450 + 35);
            v454 = *(_OWORD *)(v450 + 39);
            *((_OWORD *)v447 + 3) = *(_OWORD *)(v450 + 37);
            *((_OWORD *)v447 + 4) = v454;
            *((_OWORD *)v447 + 1) = v452;
            *((_OWORD *)v447 + 2) = v453;
            v455 = *(_OWORD *)(v450 + 41);
            v456 = *(_OWORD *)(v450 + 43);
            v457 = *(_OWORD *)(v450 + 47);
            *((_OWORD *)v447 + 7) = *(_OWORD *)(v450 + 45);
            *((_OWORD *)v447 + 8) = v457;
            *((_OWORD *)v447 + 5) = v455;
            *((_OWORD *)v447 + 6) = v456;
            v458 = *(_OWORD *)(v450 + 49);
            v450[49] = 0;
            v450[50] = 0;
            v459 = (std::__shared_weak_count *)v447[19];
            *((_OWORD *)v447 + 9) = v458;
            if (v459)
            {
              v460 = (unint64_t *)&v459->__shared_owners_;
              do
                v461 = __ldaxr(v460);
              while (__stlxr(v461 - 1, v460));
              if (!v461)
              {
                ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                std::__shared_weak_count::__release_weak(v459);
                v449 = (int64x2_t)xmmword_208235380;
              }
            }
            v447[20] = v450[51];
            v462 = *((_OWORD *)v450 + 26);
            v447[23] = v450[54];
            *(_OWORD *)(v447 + 21) = v462;
            v463 = *(_OWORD *)(v450 + 55);
            v447[26] = v450[57];
            *((_OWORD *)v447 + 12) = v463;
            v464 = *((_DWORD *)v450 + 116);
            *((_BYTE *)v447 + 220) = *((_BYTE *)v450 + 468);
            *((_DWORD *)v447 + 54) = v464;
            v465 = *(_OWORD *)(v450 + 59);
            v450[59] = 0;
            v450[60] = 0;
            v466 = (std::__shared_weak_count *)v447[29];
            *((_OWORD *)v447 + 14) = v465;
            if (v466)
            {
              v467 = (unint64_t *)&v466->__shared_owners_;
              do
                v468 = __ldaxr(v467);
              while (__stlxr(v468 - 1, v467));
              if (!v468)
              {
                ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                std::__shared_weak_count::__release_weak(v466);
                v449 = (int64x2_t)xmmword_208235380;
              }
            }
            *((_BYTE *)v447 + 240) = *((_BYTE *)v450 + 488);
            v447 += 31;
            v448 = v451 + 31;
            v450 = v451;
          }
          while (v451 + 31 != v446);
        }
      }
    }
LABEL_453:
    v427 = v772;
    v469 = *(_QWORD **)(v772 + 152);
    if (v447 != v469)
    {
      while (v469 != v447)
      {
        v470 = (std::__shared_weak_count *)*(v469 - 2);
        if (v470)
        {
          v471 = (unint64_t *)&v470->__shared_owners_;
          do
            v472 = __ldaxr(v471);
          while (__stlxr(v472 - 1, v471));
          if (!v472)
          {
            ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
            std::__shared_weak_count::__release_weak(v470);
          }
        }
        v473 = (std::__shared_weak_count *)*(v469 - 12);
        if (v473)
        {
          v474 = (unint64_t *)&v473->__shared_owners_;
          do
            v475 = __ldaxr(v474);
          while (__stlxr(v475 - 1, v474));
          if (!v475)
          {
            ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
            std::__shared_weak_count::__release_weak(v473);
          }
        }
        v469 -= 31;
      }
      v427 = v772;
      *(_QWORD *)(v772 + 152) = v447;
    }
  }
  v477 = *(_QWORD *)(v427 + 24);
  v476 = *(_QWORD *)(v427 + 32);
  if (v476 != v477)
  {
    v768 = v427 + 48;
    v478 = -16 - v476;
    v479 = *(_QWORD *)(v427 + 32);
    while (1)
    {
      while (1)
      {
        v480 = *(_QWORD *)(v479 - 8);
        v479 -= 16;
        if ((*(_BYTE *)(v480 + 4) & 6) != 0)
          break;
        *(_BYTE *)(v480 + 4) = 0;
        v478 += 16;
        if (v479 == v477)
          goto LABEL_530;
      }
      v481 = *(void **)(v480 + 184);
      if (v481)
      {
        *(_QWORD *)(v480 + 192) = v481;
        operator delete(v481);
      }
      v482 = *(void **)(v480 + 96);
      if (v482)
      {
        *(_QWORD *)(v480 + 104) = v482;
        operator delete(v482);
      }
      v483 = *(_DWORD *)(v772 + 80);
      if (v483)
      {
        v484 = v483 - 1;
        v485 = *(_QWORD *)(v772 + 88);
        v486 = v485 - 1;
        if (*(_QWORD *)(*(_QWORD *)(v772 + 56) + 16 * (v483 - 1)) + 208 * (v485 - 1) == v480)
        {
          *(_QWORD *)(v772 + 88) = v486;
          if (v485 == 1)
          {
            *(_DWORD *)(v772 + 80) = v484;
            if (v483 == 1)
            {
              v491 = v772;
              if ((uint64_t)(*(_QWORD *)(v772 + 104) - *(_QWORD *)(v772 + 96)) >> 3)
                goto LABEL_514;
LABEL_513:
              sub_207D9BD2C(v768);
              *(_DWORD *)(v491 + 80) = 0;
              *(_QWORD *)(v491 + 88) = 0;
              *(_QWORD *)(v491 + 104) = *(_QWORD *)(v491 + 96);
              goto LABEL_514;
            }
            v486 = 8 << (v483 - 2);
            *(_QWORD *)(v772 + 88) = v486;
            v497 = 0;
            v498 = v483 - 2;
            if (v484 == 1)
              goto LABEL_512;
          }
          else
          {
            v497 = 0;
            v498 = v483 - 1;
            if (!v498)
              goto LABEL_512;
          }
          v514 = 8;
          do
          {
            v497 += v514;
            v514 *= 2;
            --v498;
          }
          while (v498);
LABEL_512:
          v491 = v772;
          if (v497 + v486 == (uint64_t)(*(_QWORD *)(v772 + 104) - *(_QWORD *)(v772 + 96)) >> 3)
            goto LABEL_513;
          goto LABEL_514;
        }
        v487 = 0;
        v488 = v483 - 1;
        if (v488)
        {
          v489 = 8;
          do
          {
            v487 += v489;
            v489 *= 2;
            --v488;
          }
          while (v488);
        }
        v490 = v487 + v485;
      }
      else
      {
        v490 = 0;
      }
      v491 = v772;
      v493 = *(char **)(v772 + 96);
      v492 = *(char **)(v772 + 104);
      v494 = (v492 - v493) >> 3;
      if (v490 - v494 != 1)
      {
        v495 = *(_QWORD *)(v772 + 112);
        if ((unint64_t)v492 < v495)
        {
          *(_QWORD *)v492 = v480;
          v496 = (uint64_t)(v492 + 8);
LABEL_507:
          v491 = v772;
          *(_QWORD *)(v772 + 104) = v496;
          goto LABEL_514;
        }
        v499 = v494 + 1;
        if ((unint64_t)(v494 + 1) >> 61)
          sub_207CA420C();
        v500 = v495 - (_QWORD)v493;
        if (v500 >> 2 > v499)
          v499 = v500 >> 2;
        if ((unint64_t)v500 >= 0x7FFFFFFFFFFFFFF8)
          v501 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v501 = v499;
        if (v501)
        {
          if (v501 >> 61)
            goto LABEL_775;
          v502 = (char *)operator new(8 * v501);
          v503 = &v502[8 * v494];
          *(_QWORD *)v503 = v480;
          v496 = (uint64_t)(v503 + 8);
          v504 = (char *)(v492 - v493);
          if (v492 != v493)
            goto LABEL_499;
LABEL_525:
          *(_QWORD *)(v772 + 96) = v503;
          *(_QWORD *)(v772 + 104) = v496;
          *(_QWORD *)(v772 + 112) = &v502[8 * v501];
          if (!v492)
            goto LABEL_507;
        }
        else
        {
          v502 = 0;
          v503 = (char *)(8 * v494);
          *(_QWORD *)(8 * v494) = v480;
          v496 = 8 * v494 + 8;
          v504 = (char *)(v492 - v493);
          if (v492 == v493)
            goto LABEL_525;
LABEL_499:
          v505 = (unint64_t)(v504 - 8);
          if (v505 < 0x58)
            goto LABEL_786;
          if ((unint64_t)(v493 - v502) < 0x20)
            goto LABEL_786;
          v506 = (v505 >> 3) + 1;
          v507 = 8 * (v506 & 0x3FFFFFFFFFFFFFFCLL);
          v508 = &v492[-v507];
          v503 -= v507;
          v509 = &v502[8 * v494 - 16];
          v510 = v492 - 16;
          v511 = v506 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v512 = *(_OWORD *)v510;
            *((_OWORD *)v509 - 1) = *((_OWORD *)v510 - 1);
            *(_OWORD *)v509 = v512;
            v509 -= 32;
            v510 -= 32;
            v511 -= 4;
          }
          while (v511);
          v492 = v508;
          if (v506 != (v506 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_786:
            do
            {
              v513 = *((_QWORD *)v492 - 1);
              v492 -= 8;
              *((_QWORD *)v503 - 1) = v513;
              v503 -= 8;
            }
            while (v492 != v493);
          }
          v492 = *(char **)(v772 + 96);
          *(_QWORD *)(v772 + 96) = v503;
          *(_QWORD *)(v772 + 104) = v496;
          *(_QWORD *)(v772 + 112) = &v502[8 * v501];
          if (!v492)
            goto LABEL_507;
        }
        operator delete(v492);
        goto LABEL_507;
      }
      *(_QWORD *)(v772 + 104) = v493;
      *(_QWORD *)(v772 + 88) = 0;
      *(_DWORD *)(v772 + 80) = 0;
LABEL_514:
      v515 = v479 + 16;
      v477 = *(_QWORD *)(v491 + 24);
      v516 = *(_QWORD *)(v491 + 32);
      if (v479 + 16 == v516)
      {
        v476 = v479;
        *(_QWORD *)(v772 + 32) = v479;
        v478 += 16;
        if (v479 == v477)
          goto LABEL_530;
      }
      else
      {
        v517 = v516 - v479 - 32;
        v476 = v479;
        if (v517 < 0x10)
          goto LABEL_787;
        v518 = (v517 >> 4) + 1;
        v519 = 16 * (v518 & 0x1FFFFFFFFFFFFFFELL);
        v476 = v479 + v519;
        v515 += v519;
        v520 = (((unint64_t)(v516 + v478) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
        v521 = v477 + 16 * ((v479 - v477) >> 4) + 24;
        do
        {
          v522 = *(_DWORD *)(v521 + 8);
          *(_DWORD *)(v521 - 24) = *(_DWORD *)(v521 - 8);
          *(_DWORD *)(v521 - 8) = v522;
          v523 = *(_QWORD *)(v521 + 16);
          *(_QWORD *)(v521 - 16) = *(_QWORD *)v521;
          *(_QWORD *)v521 = v523;
          v521 += 32;
          v520 -= 2;
        }
        while (v520);
        if (v518 != (v518 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_787:
          do
          {
            *(_DWORD *)v476 = *(_DWORD *)v515;
            *(_QWORD *)(v476 + 8) = *(_QWORD *)(v515 + 8);
            v476 += 16;
            v515 += 16;
          }
          while (v515 != v516);
        }
        *(_QWORD *)(v772 + 32) = v476;
        v478 += 16;
        if (v479 == v477)
          goto LABEL_530;
      }
    }
  }
  v479 = *(_QWORD *)(v427 + 32);
LABEL_530:
  *(_WORD *)(v772 + 192) = 1;
  *(_QWORD *)(v772 + 208) = *(_QWORD *)(v772 + 200);
  *(_QWORD *)(v772 + 232) = *(_QWORD *)(v772 + 224);
  *(_QWORD *)(v772 + 256) = *(_QWORD *)(v772 + 248);
  if (v479 != v476)
  {
    v524 = 0;
    do
    {
      v525 = *(_QWORD *)(v479 + 8);
      if (*(_BYTE *)(v525 + 20))
        v526 = v524;
      else
        v526 = -1;
      v524 += *(unsigned __int8 *)(v525 + 20);
      *(_DWORD *)v525 = v526;
      v479 += 16;
    }
    while (v479 != v476);
  }
  v759 = *(_DWORD *)(v772 + 308);
  v527 = *(int ***)(v772 + 504);
  v528 = *(_QWORD **)(v772 + 512);
  v769 = (char **)(v528 + 19);
  v529 = (uint64_t)v528;
  if (*((_BYTE *)v527 + 168))
  {
    v530 = (void *)v528[19];
    v528[20] = v530;
    if (v528[21] - (_QWORD)v530 <= 0xFFuLL)
    {
      v531 = (char *)operator new(0x100uLL);
      v528[19] = v531;
      v528[20] = v531;
      v528[21] = v531 + 256;
      if (v530)
        operator delete(v530);
    }
    if (*((_BYTE *)v527 + 168))
    {
      v532 = (void *)v528[19];
      v528[20] = v532;
      v533 = ((unint64_t)((char *)v527[1] - (char *)*v527) >> 4);
      if (v533 > (uint64_t)(v528[21] - (_QWORD)v532) >> 2)
      {
        v534 = (char *)operator new(4 * v533);
        v528[19] = v534;
        v528[20] = v534;
        v528[21] = &v534[4 * v533];
        if (v532)
          operator delete(v532);
      }
      v535 = *v527;
      v536 = v527[1];
      while (1)
      {
        if (v535 == v536)
          goto LABEL_570;
        if (*(_BYTE *)(*((_QWORD *)v535 + 1) + 20))
          break;
LABEL_547:
        v535 += 4;
      }
      v538 = *v535;
      v540 = (char *)v528[20];
      v539 = v528[21];
      if ((unint64_t)v540 < v539)
      {
        *(_DWORD *)v540 = v538;
        v537 = (uint64_t)(v540 + 4);
LABEL_546:
        v528[20] = v537;
        goto LABEL_547;
      }
      v541 = *v769;
      v542 = v540 - *v769;
      v543 = v542 >> 2;
      v544 = (v542 >> 2) + 1;
      if (v544 >> 62)
        goto LABEL_782;
      v545 = v539 - (_QWORD)v541;
      if (v545 >> 1 > v544)
        v544 = v545 >> 1;
      if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFFCLL)
        v546 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v546 = v544;
      if (v546)
      {
        if (v546 >> 62)
          goto LABEL_775;
        v547 = operator new(4 * v546);
        v548 = &v547[4 * v543];
        *v548 = v538;
        v537 = (uint64_t)(v548 + 1);
        v549 = v540 - v541;
        if (v540 == v541)
          goto LABEL_568;
      }
      else
      {
        v547 = 0;
        v548 = (_DWORD *)(4 * v543);
        *(_DWORD *)(4 * v543) = v538;
        v537 = 4 * v543 + 4;
        v549 = v540 - v541;
        if (v540 == v541)
        {
LABEL_568:
          v528[19] = v548;
          v528[20] = v537;
          v528[21] = &v547[4 * v546];
          if (v541)
            operator delete(v541);
          goto LABEL_546;
        }
      }
      v550 = v549 - 4;
      if (v550 < 0x2C)
        goto LABEL_788;
      if ((unint64_t)(v540 - v547 - v542) < 0x20)
        goto LABEL_788;
      v551 = (v550 >> 2) + 1;
      v552 = 4 * (v551 & 0x7FFFFFFFFFFFFFF8);
      v553 = &v540[-v552];
      v548 = (_DWORD *)((char *)v548 - v552);
      v554 = &v547[4 * v543 - 16];
      v555 = v540 - 16;
      v556 = v551 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v557 = *(_OWORD *)v555;
        *(v554 - 1) = *((_OWORD *)v555 - 1);
        *v554 = v557;
        v554 -= 2;
        v555 -= 32;
        v556 -= 8;
      }
      while (v556);
      v540 = v553;
      if (v551 != (v551 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_788:
        do
        {
          v558 = *((_DWORD *)v540 - 1);
          v540 -= 4;
          *--v548 = v558;
        }
        while (v540 != v541);
      }
      goto LABEL_568;
    }
LABEL_570:
    v529 = *(_QWORD *)(v772 + 512);
  }
  sub_207D9F868(v529, v769);
  v559 = *(unsigned int **)(v772 + 520);
  *(_QWORD *)(v772 + 528) = v559;
  *(_QWORD *)(v772 + 544) = 0;
  v561 = (unsigned int *)v528[19];
  v560 = (unsigned int *)v528[20];
  if (v561 != v560)
  {
    v562 = v772;
    while (1)
    {
      v564 = *v561;
      v565 = *(_QWORD *)(v562 + 536);
      if ((unint64_t)v559 < v565)
      {
        *v559 = 0;
        v559[1] = v564;
        v563 = v559 + 3;
        v559[2] = 6;
      }
      else
      {
        v566 = *(_DWORD **)(v562 + 520);
        v567 = 0xAAAAAAAAAAAAAAABLL * (v559 - v566) + 1;
        if (v567 > 0x1555555555555555)
          sub_207CA420C();
        v568 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v565 - (_QWORD)v566) >> 2);
        if (2 * v568 > v567)
          v567 = 2 * v568;
        if (v568 >= 0xAAAAAAAAAAAAAAALL)
          v569 = 0x1555555555555555;
        else
          v569 = v567;
        if (v569)
        {
          if (v569 > 0x1555555555555555)
            goto LABEL_775;
          v570 = (char *)operator new(12 * v569);
        }
        else
        {
          v570 = 0;
        }
        v571 = &v570[4 * (v559 - v566)];
        *(_DWORD *)v571 = 0;
        *((_DWORD *)v571 + 1) = v564;
        *((_DWORD *)v571 + 2) = 6;
        v572 = v571;
        if (v559 != v566)
        {
          do
          {
            v573 = *(_QWORD *)(v559 - 3);
            v559 -= 3;
            v574 = v559[2];
            *(_QWORD *)(v572 - 12) = v573;
            v572 -= 12;
            *((_DWORD *)v572 + 2) = v574;
          }
          while (v559 != v566);
          v559 = *(unsigned int **)(v772 + 520);
          v575 = &v570[12 * v569];
          *(_QWORD *)(v772 + 520) = v572;
          v563 = (unsigned int *)(v571 + 12);
          *(_QWORD *)(v772 + 528) = v571 + 12;
          *(_QWORD *)(v772 + 536) = v575;
          if (!v559)
            goto LABEL_574;
LABEL_591:
          operator delete(v559);
          goto LABEL_574;
        }
        v576 = &v570[12 * v569];
        *(_QWORD *)(v772 + 520) = v571;
        v563 = (unsigned int *)(v571 + 12);
        *(_QWORD *)(v772 + 528) = v571 + 12;
        *(_QWORD *)(v772 + 536) = v576;
        if (v559)
          goto LABEL_591;
      }
LABEL_574:
      v562 = v772;
      *(_QWORD *)(v772 + 528) = v563;
      ++v561;
      v559 = v563;
      if (v561 == v560)
        goto LABEL_593;
    }
  }
  v563 = v559;
LABEL_593:
  if (v759 == 1)
  {
    v582 = *(_QWORD *)(v772 + 520);
    v583 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v563 - v582) >> 2));
    if (v563 == (unsigned int *)v582)
      v584 = 0;
    else
      v584 = v583;
    sub_207DA2648(v582, v563, v584, 1);
    v580 = *(unsigned int **)(v772 + 520);
    v581 = *(unsigned int **)(v772 + 528);
    if (v580 == v581)
      goto LABEL_607;
LABEL_605:
    v585 = 0;
    do
    {
      v586 = v580[2];
      v580[2] = v585;
      v587 = *v580;
      v580 += 3;
      v585 += v586;
      ++*(_QWORD *)(v772 + 544 + 8 * v587);
    }
    while (v580 != v581);
    goto LABEL_607;
  }
  if (!v759)
  {
    v577 = *(_QWORD *)(v772 + 520);
    v578 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v563 - v577) >> 2));
    if (v563 == (unsigned int *)v577)
      v579 = 0;
    else
      v579 = v578;
    sub_207DA0F80(v577, v563, v579, 1);
  }
  v580 = *(unsigned int **)(v772 + 520);
  v581 = *(unsigned int **)(v772 + 528);
  if (v580 != v581)
    goto LABEL_605;
LABEL_607:
  *(_QWORD *)(v772 + 560) = *(_QWORD *)(v772 + 552);
  *(_QWORD *)(v772 + 584) = *(_QWORD *)(v772 + 576);
  v588 = *(_QWORD *)(v772 + 544);
  if (!v588)
    goto LABEL_615;
  sub_207CB9B90(v772 + 552, v588);
  v589 = *(int32x4_t **)(v772 + 552);
  v590 = *(int32x4_t **)(v772 + 560);
  if (v589 == v590)
    goto LABEL_615;
  v591 = (char *)v590 - (char *)v589 - 4;
  if (v591 >= 0x1C)
  {
    v594 = (v591 >> 2) + 1;
    v592 = v594 & 0x7FFFFFFFFFFFFFF8;
    v593 = (int32x4_t *)((char *)v589 + 4 * (v594 & 0x7FFFFFFFFFFFFFF8));
    v595 = (int32x4_t)xmmword_208235350;
    v596 = v589 + 1;
    v597.i64[0] = 0x400000004;
    v597.i64[1] = 0x400000004;
    v598.i64[0] = 0x800000008;
    v598.i64[1] = 0x800000008;
    v599 = v594 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v596[-1] = v595;
      *v596 = vaddq_s32(v595, v597);
      v595 = vaddq_s32(v595, v598);
      v596 += 2;
      v599 -= 8;
    }
    while (v599);
    if (v594 == v592)
      goto LABEL_615;
  }
  else
  {
    LODWORD(v592) = 0;
    v593 = *(int32x4_t **)(v772 + 552);
  }
  do
  {
    v593->i32[0] = v592;
    v593 = (int32x4_t *)((char *)v593 + 4);
    LODWORD(v592) = v592 + 1;
  }
  while (v593 != v590);
LABEL_615:
  v600 = *(_QWORD *)(v772 + 544);
  v601 = *(_DWORD **)(v772 + 576);
  v602 = (uint64_t)(*(_QWORD *)(v772 + 584) - (_QWORD)v601) >> 2;
  if (v600 <= v602)
  {
    v10 = v739;
    v9 = v740;
    if (v600 < v602)
      *(_QWORD *)(v772 + 584) = &v601[v600];
  }
  else
  {
    sub_207CB9B90(v772 + 576, v600 - v602);
    v601 = *(_DWORD **)(v772 + 576);
    v10 = v739;
    v9 = v740;
  }
  v603 = *(_DWORD **)(v772 + 520);
  v604 = *(_DWORD **)(v772 + 528);
  while (v603 != v604)
  {
    if (!*v603)
      *v601++ = v603[2];
    v603 += 3;
  }
  kdebug_trace();
LABEL_625:
  if (((v9 - v10) & 0x3FFFFFFFCLL) != 0)
    goto LABEL_626;
  v606 = *(_QWORD *)(v772 + 24);
  v607 = *(_QWORD *)(v772 + 32);
  if (!*(_BYTE *)(v772 + 192))
  {
    if (v606 == v607)
    {
      v640 = 0;
    }
    else
    {
      v638 = 0;
      v639 = 0;
      v640 = 0;
      do
      {
        v641 = *(_QWORD *)(v606 + 8);
        if ((*(_BYTE *)(v641 + 4) & 6) != 0)
        {
          v638 = 1;
          ++v639;
        }
        v640 += *(unsigned __int8 *)(v641 + 20);
        v606 += 16;
      }
      while (v606 != v607);
      if (v638)
      {
        v642 = v772 + 272;
        *(_QWORD *)(v772 + 280) = *(_QWORD *)(v772 + 272);
        v643 = *(_QWORD *)(v772 + 120);
        v644 = *(_QWORD *)(v772 + 128);
        while (v643 != v644)
        {
          v645 = *(_QWORD *)(v643 + 48);
          if (*(_BYTE *)(v643 + 96) || (*(_BYTE *)(v645 + 4) & 6) != 0)
            sub_207D8B464(v642, v645);
          v643 += 104;
        }
        v653 = *(_QWORD *)(v772 + 144);
        v654 = *(_QWORD *)(v772 + 152);
        while (v653 != v654)
        {
          v655 = *(_QWORD *)(v653 + 160);
          if (*(_BYTE *)(v653 + 240) || (*(_BYTE *)(v655 + 4) & 6) != 0)
            sub_207D8B464(v642, v655);
          v653 += 248;
        }
        v656 = (*(_QWORD *)(v772 + 280) - *(_QWORD *)(v772 + 272)) >> 2;
        if (v639 > v656)
          LODWORD(v656) = v639;
        v657 = v640 >= v656;
        v658 = v640 - v656;
        if (!v657)
          v658 = 0;
        v608 = 6 * v658;
        v659 = *(_QWORD *)(v772 + 120);
        v660 = *(_QWORD *)(v772 + 128);
        while (v659 != v660)
        {
          v661 = *(_QWORD *)(v659 + 48);
          if (*(_BYTE *)(v659 + 96) || (*(_BYTE *)(v661 + 4) & 6) != 0)
            ++*(_DWORD *)(v661 + 8);
          v659 += 104;
        }
        v662 = *(_QWORD *)(v772 + 144);
        v663 = *(_QWORD *)(v772 + 152);
        while (v662 != v663)
        {
          v664 = *(_QWORD *)(v662 + 160);
          if (*(_BYTE *)(v662 + 240) || (*(_BYTE *)(v664 + 4) & 6) != 0)
            ++*(_DWORD *)(v664 + 8);
          v662 += 248;
        }
        goto LABEL_704;
      }
    }
    v608 = 6 * v640;
    goto LABEL_704;
  }
  if (v606 == v607)
    goto LABEL_710;
  v608 = 0;
  do
  {
    v609 = *(_QWORD *)(v606 + 8);
    if ((*(_BYTE *)(v609 + 4) & 6) == 0 && *(_BYTE *)(v609 + 20))
      v608 += 6;
    v606 += 16;
  }
  while (v606 != v607);
LABEL_704:
  if (!v608)
    goto LABEL_710;
  if (!*(_BYTE *)(v772 + 192))
  {
    v665 = *(_QWORD *)(v772 + 24);
    v666 = *(_QWORD *)(v772 + 32);
    if (v665 != v666)
    {
      while ((*(_BYTE *)(*(_QWORD *)(v665 + 8) + 4) & 6) == 0)
      {
        v665 += 16;
        if (v665 == v666)
          goto LABEL_709;
      }
      v712 = *(_QWORD *)(v772 + 120);
      v711 = *(_QWORD *)(v772 + 128);
      if (v712 == v711)
      {
        v716 = 0;
        goto LABEL_758;
      }
      v713 = v711 - v712 - 104;
      if (v713 >= 0x68)
      {
        v717 = 0;
        v718 = 0;
        v719 = v713 / 0x68 + 1;
        v715 = v712 + 104 * (v719 & 0x7FFFFFFFFFFFFFELL);
        v720 = (uint64_t *)(v712 + 152);
        v721 = v719 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          v722 = *(v720 - 13);
          v723 = *v720;
          v720 += 26;
          v724 = *(_BYTE *)(v723 + 4);
          if ((*(_BYTE *)(v722 + 4) & 6) == 0)
            ++v717;
          if ((v724 & 6) == 0)
            ++v718;
          v721 -= 2;
        }
        while (v721);
        v714 = v718 + v717;
        if (v719 == (v719 & 0x7FFFFFFFFFFFFFELL))
          goto LABEL_757;
      }
      else
      {
        v714 = 0;
        v715 = *(_QWORD *)(v772 + 120);
      }
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v715 + 48) + 4) & 6) == 0)
          ++v714;
        v715 += 104;
      }
      while (v715 != v711);
LABEL_757:
      v716 = 2 * v714;
LABEL_758:
      v726 = *(_QWORD *)(v772 + 144);
      v725 = *(_QWORD *)(v772 + 152);
      if (v726 == v725)
      {
        v730 = 0;
        goto LABEL_773;
      }
      v727 = v725 - v726 - 248;
      if (v727 >= 0xF8)
      {
        v731 = 0;
        v732 = 0;
        v733 = v727 / 0xF8 + 1;
        v729 = v726 + 248 * (v733 & 0x3FFFFFFFFFFFFFELL);
        v734 = v726 + 408;
        v735 = v733 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(v734 - 248) + 4) & 6) == 0)
            ++v731;
          if ((*(_BYTE *)(*(_QWORD *)v734 + 4) & 6) == 0)
            ++v732;
          v734 += 496;
          v735 -= 2;
        }
        while (v735);
        v728 = v732 + v731;
        if (v733 == (v733 & 0x3FFFFFFFFFFFFFELL))
          goto LABEL_772;
      }
      else
      {
        v728 = 0;
        v729 = *(_QWORD *)(v772 + 144);
      }
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v729 + 160) + 4) & 6) == 0)
          ++v728;
        v729 += 248;
      }
      while (v729 != v725);
LABEL_772:
      v730 = 6 * v728;
LABEL_773:
      if (v730 + v716 < (unint64_t)v608)
        goto LABEL_710;
      goto LABEL_626;
    }
  }
LABEL_709:
  if (*(_QWORD *)(v772 + 184) < (unint64_t)v608)
    goto LABEL_710;
LABEL_626:
  if (!*(_BYTE *)(v772 + 297))
  {
    v610 = *(void **)(v772 + 376);
    v611 = *(_QWORD *)(v772 + 384) - (_QWORD)v610;
    if (v611 >= 1)
      bzero(v610, 4 * (((unint64_t)v611 >> 2) - ((unint64_t)v611 > 3)) + 4);
    v612 = (void **)(v772 + 328);
    v613 = *(unsigned int *)(v772 + 344);
    if ((_DWORD)v613)
      bzero(*v612, 4 * v613);
    if (((*(_QWORD *)(v772 + 792) - *(_QWORD *)(v772 + 784)) & 0x3FFFFFFFCLL) == 0)
      goto LABEL_741;
    kdebug_trace();
    sub_207D9FA1C((uint64_t)v612, v772 + 632, (char **)(v772 + 920), (_QWORD *)(v772 + 944));
    v614 = 6 * ((*(_QWORD *)(v772 + 792) - *(_QWORD *)(v772 + 784)) >> 2);
    *(_DWORD *)(v772 + 1008) = v614;
    if (*(_QWORD *)(v772 + 1000) < v614)
    {
      v615 = *(void **)(v772 + 992);
      if (v615)
        operator delete[](v615);
      *(_QWORD *)(v772 + 992) = 0;
      *(_QWORD *)(v772 + 1000) = ((4 * v614 + 31) & 0x7FFFFFFE0) >> 2;
      *(_QWORD *)(v772 + 992) = MEMORY[0x20BD028B4]();
    }
    v616 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v744 + 24))(v744);
    v617 = *(_DWORD **)(v772 + 784);
    v618 = *(_DWORD **)(v772 + 792);
    if (v617 == v618)
      goto LABEL_740;
    v619 = 0;
    v620 = *v616;
    while (1)
    {
      v620 -= 16;
      do
      {
        v629 = *(_DWORD *)(v620 + 16);
        v620 += 16;
      }
      while (*v617 != v629);
      v630 = *(float32x2_t **)(v620 + 8);
      memset(__p, 0, 24);
      v778 = v630 + 4;
      v779 = 0;
      v776.i64[0] = (uint64_t)__p;
      v776.i64[1] = 0;
      sub_207DA0C70(&v778, (float **)&v776);
      v631 = (int8x16_t)__p[0];
      v632 = vextq_s8(v631, v631, 8uLL);
      v633 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v631.i8, *(float32x2_t *)v631.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)__p[0].f32, 1), *(float32x2_t *)__p[0].f32, 1), *(float32x2_t *)v632.i8, *(float32x2_t *)v632.i8).f32[0];
      if (v633 >= 0.0061)
      {
        v636 = sqrtf(v633);
        v760 = v633;
        v770 = __p[0];
        v637 = __sincosf_stret(v636);
        v633 = v760;
        v631 = (int8x16_t)v770;
        v635 = v637.__sinval / v636;
        v634 = (float)(1.0 / v760) * (float)(1.0 - v637.__cosval);
        *(float *)v632.i32 = (float)(1.0 / v760) * (float)(1.0 - (float)(v637.__sinval / v636));
        if (v760 >= 0.00000149)
        {
LABEL_654:
          if (v633 <= 9.0)
            v621 = (float)((float)(v634 * 0.5) - *(float *)v632.i32) / v635;
          else
            v621 = (float)(v634 + (float)(v635 * -0.5)) / (float)(v633 * v634);
          goto LABEL_647;
        }
      }
      else
      {
        v634 = 0.5 - (float)(v633 * (float)((float)(v633 / -720.0) + 0.041667));
        *(float *)v632.i32 = 0.16667 - (float)(v633 * (float)((float)(v633 / -5040.0) + 0.0083333));
        v635 = 1.0 - (float)(v633 * *(float *)v632.i32);
        if (v633 >= 0.00000149)
          goto LABEL_654;
      }
      v621 = (float)(v633 * 0.000033069) + (float)((float)(v633 * 0.0013889) + 0.083333);
LABEL_647:
      *(float32x2_t *)v632.i8 = v630[10];
      v632.i32[2] = v630[11].i32[0];
      v622 = (float32x4_t)vextq_s8(vextq_s8(v631, v631, 0xCuLL), v631, 8uLL);
      v623 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v631, (int32x4_t)v631), v631, 0xCuLL);
      v624 = (int8x16_t)vsubq_f32(vmulq_f32(v622, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v632, (int32x4_t)v632), v632, 0xCuLL)), vmulq_f32(v623, (float32x4_t)vextq_s8(vextq_s8(v632, v632, 0xCuLL), v632, 8uLL)));
      v625.i64[0] = 0xBF000000BF000000;
      v625.i64[1] = 0xBF000000BF000000;
      v626 = vaddq_f32(vaddq_f32((float32x4_t)v632, vmulq_f32((float32x4_t)v624, v625)), vmulq_n_f32(vsubq_f32(vmulq_f32(v622, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v624, (int32x4_t)v624), v624, 0xCuLL)), vmulq_f32(v623, (float32x4_t)vextq_s8(vextq_s8(v624, v624, 0xCuLL), v624, 8uLL))), v621));
      __p[1].i32[1] = v626.i32[2];
      *(uint64_t *)((char *)&__p[0].i64[1] + 4) = v626.i64[0];
      v627 = __p[0];
      v628 = *(_QWORD *)(v772 + 992) + 4 * v619;
      *(_QWORD *)(v628 + 16) = __p[1].i64[0];
      *(float32x4_t *)v628 = v627;
      v619 += 6;
      if (++v617 == v618)
      {
        if (((*(_QWORD *)(v772 + 792) - *(_QWORD *)(v772 + 784)) & 0x3FFFFFFFCLL) != 0)
        {
          v646 = (void **)(v772 + 1016);
          v647 = *(_QWORD *)(v772 + 776);
          v648 = *(_DWORD *)(v647 + 12);
          v649 = 6 * *(_DWORD *)(v647 + 8);
          v650 = 6 * v648;
          *(_DWORD *)(v772 + 1032) = v649;
          *(_DWORD *)(v772 + 1036) = 6 * v648;
          v651 = (6 * v648) * (unint64_t)v649;
          if (*(_QWORD *)(v772 + 1024) >= v651)
          {
            v652 = v772;
          }
          else
          {
            if (*v646)
              operator delete[](*v646);
            v652 = v772;
            *(_QWORD *)(v772 + 1016) = 0;
            *(_QWORD *)(v772 + 1024) = ((4 * v651 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
            *(_QWORD *)(v772 + 1016) = MEMORY[0x20BD028B4]();
            v649 = *(_DWORD *)(v772 + 1032);
            v650 = *(_DWORD *)(v772 + 1036);
          }
          v667 = v649 * v650;
          if (v667)
            bzero(*v646, 4 * v667);
          (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)(v652 + 664) + 64))(v652 + 664, v646, 0);
          sub_207D91628((uint64_t)v646);
          v668 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v772 + 600) + 32))(v744);
          v669 = (void **)(v772 + 1112);
          v670 = *(unsigned int *)(v772 + 624);
          v671 = v670;
          if ((_DWORD)v670 == *(_DWORD *)(v772 + 1128))
          {
            v672 = *v669;
          }
          else
          {
            *(_DWORD *)(v772 + 1128) = v670;
            v672 = *(void **)(v772 + 1112);
            if (*(_QWORD *)(v772 + 1120) < v670)
            {
              v673 = v670;
              if (v672)
              {
                operator delete[](v672);
                v673 = *(unsigned int *)(v772 + 1128);
                v671 = *(_DWORD *)(v772 + 1128);
              }
              *(_QWORD *)(v772 + 1112) = 0;
              *(_QWORD *)(v772 + 1120) = ((4 * v670 + 31) & 0x7FFFFFFE0) >> 2;
              v672 = (void *)MEMORY[0x20BD028B4]();
              *v669 = v672;
              v670 = v673;
            }
          }
          if (v671)
            bzero(v672, 4 * v670);
          v674 = *(_DWORD **)(v772 + 784);
          v675 = *(_DWORD **)(v772 + 792);
          if (v674 != v675)
          {
            v676 = 0;
            v677 = *(_QWORD *)(v772 + 608);
            v678 = *v668;
            while (1)
            {
              v678 -= 16;
              do
              {
                v689 = *(_DWORD *)(v678 + 16);
                v678 += 16;
              }
              while (*v674 != v689);
              v690 = *(float32x2_t **)(v678 + 8);
              memset(__p, 0, 24);
              v778 = v690 + 4;
              v779 = 0;
              v776.i64[0] = (uint64_t)__p;
              v776.i64[1] = 0;
              sub_207DA0C70(&v778, (float **)&v776);
              v691 = (int8x16_t)__p[0];
              v692 = vextq_s8(v691, v691, 8uLL);
              v693 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v691.i8, *(float32x2_t *)v691.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)__p[0].f32, 1), *(float32x2_t *)__p[0].f32, 1), *(float32x2_t *)v692.i8, *(float32x2_t *)v692.i8).f32[0];
              if (v693 >= 0.0061)
              {
                v696 = sqrtf(v693);
                v761 = v693;
                v771 = __p[0];
                v697 = __sincosf_stret(v696);
                v693 = v761;
                v691 = (int8x16_t)v771;
                v695 = v697.__sinval / v696;
                v694 = (float)(1.0 / v761) * (float)(1.0 - v697.__cosval);
                *(float *)v692.i32 = (float)(1.0 / v761) * (float)(1.0 - (float)(v697.__sinval / v696));
                if (v761 >= 0.00000149)
                {
LABEL_732:
                  if (v693 <= 9.0)
                    v679 = (float)((float)(v694 * 0.5) - *(float *)v692.i32) / v695;
                  else
                    v679 = (float)(v694 + (float)(v695 * -0.5)) / (float)(v693 * v694);
                  goto LABEL_725;
                }
              }
              else
              {
                v694 = 0.5 - (float)(v693 * (float)((float)(v693 / -720.0) + 0.041667));
                *(float *)v692.i32 = 0.16667 - (float)(v693 * (float)((float)(v693 / -5040.0) + 0.0083333));
                v695 = 1.0 - (float)(v693 * *(float *)v692.i32);
                if (v693 >= 0.00000149)
                  goto LABEL_732;
              }
              v679 = (float)(v693 * 0.000033069) + (float)((float)(v693 * 0.0013889) + 0.083333);
LABEL_725:
              v680 = (float32x4_t *)(v677 + 4 * v676);
              *(float32x2_t *)v692.i8 = v690[10];
              v692.i32[2] = v690[11].i32[0];
              v681 = (float32x4_t)vextq_s8(vextq_s8(v691, v691, 0xCuLL), v691, 8uLL);
              v682 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v691, (int32x4_t)v691), v691, 0xCuLL);
              v683 = (int8x16_t)vsubq_f32(vmulq_f32(v681, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v692, (int32x4_t)v692), v692, 0xCuLL)), vmulq_f32(v682, (float32x4_t)vextq_s8(vextq_s8(v692, v692, 0xCuLL), v692, 8uLL)));
              v684.i64[0] = 0xBF000000BF000000;
              v684.i64[1] = 0xBF000000BF000000;
              v685 = vsubq_f32(vmulq_f32(v681, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v683, (int32x4_t)v683), v683, 0xCuLL)), vmulq_f32(v682, (float32x4_t)vextq_s8(vextq_s8(v683, v683, 0xCuLL), v683, 8uLL)));
              v686 = vaddq_f32(vaddq_f32((float32x4_t)v692, vmulq_f32((float32x4_t)v683, v684)), vmulq_n_f32(v685, v679));
              __p[1].i32[1] = v686.i32[2];
              *(uint64_t *)((char *)&__p[0].i64[1] + 4) = v686.i64[0];
              v685.i64[0] = v680[1].i64[0];
              v687 = vsubq_f32(__p[1], v685).u64[0];
              v688 = (float32x4_t *)((char *)*v669 + 4 * v676);
              *v688 = vsubq_f32(__p[0], *v680);
              v688[1].i64[0] = v687;
              v676 += 6;
              if (++v674 == v675)
              {
                v698 = *(unsigned int **)(v772 + 784);
                v699 = *(unsigned int **)(v772 + 792);
                if (v698 != v699)
                {
                  v700 = 0;
                  v701 = 0;
                  v702 = *(unsigned int **)(v772 + 480);
                  do
                  {
                    if (*v702 < *v698)
                    {
                      do
                      {
                        v703 = v702[1];
                        ++v702;
                        ++v700;
                      }
                      while (v703 < *v698);
                    }
                    v704 = *(_DWORD *)(v772 + 660) + 6 * v701;
                    v705 = *(_QWORD *)(v772 + 1016);
                    v773[0] = vrev64_s32(*(int32x2_t *)(v772 + 1032));
                    v773[1] = v705 + 4 * v704;
                    v774 = v704;
                    v706 = *(_QWORD *)(v772 + 328) + 4 * (*(_DWORD *)(v772 + 356) + 6 * v700);
                    v707 = *(float32x4_t *)v706;
                    v777 = *(_QWORD *)(v706 + 16);
                    v776 = v707;
                    __p[0].i64[0] = (uint64_t)&v776;
                    v779 = (float32x2_t *)v773;
                    v780 = v772 + 1112;
                    v781 = 1065353216;
                    sub_207DA3D10(&__p[0].i64[1], (uint64_t)&v778);
                    v708.i64[0] = *(_QWORD *)(__p[0].i64[0] + 16);
                    v709.i64[0] = __p[1].i64[1];
                    *(float32x4_t *)v706 = vsubq_f32(*(float32x4_t *)__p[0].i64[0], *(float32x4_t *)((char *)__p + 8));
                    *(_QWORD *)(v706 + 16) = vsubq_f32(v708, v709).u64[0];
                    ++v698;
                    ++v701;
                  }
                  while (v698 != v699);
                }
                break;
              }
            }
          }
        }
LABEL_740:
        kdebug_trace();
LABEL_741:
        sub_207D9D678((uint64_t *)(v772 + 504), v772 + 8, 2, v2, v3, v4, v5, v6, v7, v8);
        v605 = 0;
        *(_WORD *)(v772 + 297) = 1;
        goto LABEL_742;
      }
    }
  }
  v605 = 0;
LABEL_742:
  kdebug_trace();
  return v605;
}

void sub_207D99E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  void *v34;

  if (v34)
    operator delete(v34);
  sub_207D89808();
  sub_207D897D8();
  _Unwind_Resume(a1);
}

uint64_t sub_207D99EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  void *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int32x4_t *v42;
  __int8 *v43;
  int32x4_t *v44;
  __int8 *v45;
  int32x4_t *v46;
  __int8 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  int32x4_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  int32x4_t v77;
  int32x4_t *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int32x4_t v87;
  __int32 v88;
  __int128 v89;
  unsigned int v90;
  unsigned int v91;
  __int32 v92;
  uint64_t v93;
  uint64_t v94;
  int32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  __int8 *v105;
  __int8 *v106;
  __int8 *v107;
  int32x4_t *v108;
  __int8 *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int32x4_t v115;
  int32x4_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  float v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  float v129;
  float *v130;
  unsigned int v131;
  uint64_t v132;
  float v133;
  unint64_t v134;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v9 = *(_QWORD *)(a1 + 472);
  v10 = 6 * *(_DWORD *)(v9 + 8);
  if ((v5 & 1) != 0)
  {
    v11 = 6 * *(_DWORD *)(v9 + 12);
    *(_DWORD *)(a1 + 1184) = v10;
    *(_DWORD *)(a1 + 1188) = v11;
    v12 = v11 * (unint64_t)v10;
    if (*(_QWORD *)(a1 + 1176) < v12)
    {
      v13 = *(void **)(a1 + 1168);
      if (v13)
        operator delete[](v13);
      *(_QWORD *)(a1 + 1168) = 0;
      *(_QWORD *)(a1 + 1176) = ((4 * v12 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
      *(_QWORD *)(a1 + 1168) = MEMORY[0x20BD028B4]();
      v10 = *(_DWORD *)(a1 + 1184);
      v11 = *(_DWORD *)(a1 + 1188);
    }
    v14 = v10 * v11;
    if (v14)
      bzero(*(void **)(a1 + 1168), 4 * v14);
    v15 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *(unsigned int **)(a1 + 576);
      do
      {
        v18 = *(_QWORD *)(a1 + 448) + 24 * v16;
        v19 = *(unsigned int **)v18;
        v20 = *(unsigned int **)(v18 + 8);
        if (v19 != v20)
        {
          do
          {
            v37 = *v17;
            v38 = *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * *v19);
            v39 = *(unsigned int *)(a1 + 1184);
            v40 = *(_QWORD *)(a1 + 1168);
            v41 = *(_QWORD *)(a1 + 376) + 4 * *((_QWORD *)v19 + 1);
            if (*v17 < v38)
            {
              v21 = v40 + 4 * (v37 + (_DWORD)v39 * v38);
              v6.i64[0] = *(_QWORD *)(v41 + 16);
              v7.i64[0] = *(_QWORD *)(v41 + 40);
              v22 = *(int32x4_t *)(v41 + 24);
              v23 = *(int32x4_t *)(v41 + 48);
              v24 = *(int32x4_t *)(v41 + 96);
              *(_QWORD *)&v25 = vzip1q_s32(*(int32x4_t *)v41, v22).u64[0];
              DWORD2(v25) = v23.i32[0];
              HIDWORD(v25) = *(_OWORD *)(v41 + 72);
              *(_QWORD *)&v26 = vtrn2q_s32(*(int32x4_t *)v41, v22).u64[0];
              DWORD2(v26) = HIDWORD(*(_QWORD *)(v41 + 48));
              HIDWORD(v26) = HIDWORD(*(_QWORD *)(v41 + 72));
              LODWORD(v27) = vdupq_lane_s32(*(int32x2_t *)v24.i8, 1).u32[0];
              HIDWORD(v27) = HIDWORD(*(_QWORD *)(v41 + 120));
              v8.i64[0] = *(_QWORD *)(v41 + 112);
              *(_QWORD *)&v28 = vzip2q_s32(*(int32x4_t *)v41, v22).u64[0];
              DWORD2(v28) = *(_QWORD *)(v41 + 56);
              HIDWORD(v28) = *(_QWORD *)(v41 + 80);
              LODWORD(v29) = vdupq_laneq_s32(v24, 2).u32[0];
              HIDWORD(v29) = *(_QWORD *)(v41 + 128);
              *(_QWORD *)&v30 = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)v41, v22), *(int32x4_t *)v41).u64[0];
              DWORD2(v30) = v23.i32[3];
              HIDWORD(v30) = HIDWORD(*(_OWORD *)(v41 + 72));
              v22.i32[0] = vdupq_laneq_s32(v24, 3).u32[0];
              v23.i64[0] = *(_QWORD *)(v41 + 136);
              v22.i32[1] = HIDWORD(*(_OWORD *)(v41 + 120));
              *(_QWORD *)&v31 = vzip1q_s32(v6, v7).u64[0];
              DWORD2(v31) = *(_QWORD *)(v41 + 64);
              HIDWORD(v31) = *(_QWORD *)(v41 + 88);
              v6.i64[0] = vtrn2q_s32(v6, v7).u64[0];
              v6.i32[2] = HIDWORD(*(_QWORD *)(v41 + 64));
              v6.i32[3] = HIDWORD(*(_QWORD *)(v41 + 88));
              v7 = vdupq_lane_s32(*(int32x2_t *)v8.i8, 1);
              v7.i32[1] = v23.i32[1];
              *(_QWORD *)(v21 + 16) = vzip1q_s32(v24, *(int32x4_t *)(v41 + 120)).u64[0];
              *(_OWORD *)v21 = v25;
              v32 = v21 + 4 * v39;
              *(_QWORD *)(v32 + 16) = v27;
              *(_OWORD *)v32 = v26;
              v33 = v21 + 8 * v39;
              *(_QWORD *)(v33 + 16) = v29;
              *(_OWORD *)v33 = v28;
              v34 = v21 + 12 * v39;
              *(_QWORD *)(v34 + 16) = v22.i64[0];
              *(_OWORD *)v34 = v30;
              v35 = v21 + 16 * v39;
              *(_QWORD *)(v35 + 16) = vzip1q_s32(v8, v23).u64[0];
              *(_OWORD *)v35 = v31;
              v36 = (int32x4_t *)(v21 + 20 * v39);
              v36[1].i64[0] = v7.i64[0];
              *v36 = v6;
            }
            else
            {
              v42 = (int32x4_t *)(v40 + 4 * (v38 + (_DWORD)v39 * v37));
              v43 = &v42->i8[4 * v39];
              v44 = (int32x4_t *)((char *)v42 + 8 * v39);
              v45 = &v42->i8[12 * v39];
              v46 = &v42[v39];
              v47 = &v42->i8[20 * v39];
              if (v41 == v40)
              {
                v6 = *(int32x4_t *)v40;
                v58 = *(_QWORD *)(v40 + 16);
                v59 = *(_OWORD *)(v40 + 24);
                v60 = *(_QWORD *)(v40 + 40);
                v7 = *(int32x4_t *)(v40 + 48);
                v61 = *(_QWORD *)(v40 + 64);
                v62 = *(_OWORD *)(v40 + 72);
                v63 = *(_QWORD *)(v40 + 88);
                v64 = *(int32x4_t *)(v40 + 96);
                v65 = *(_QWORD *)(v40 + 112);
                v56 = *(_OWORD *)(v40 + 120);
                v66 = *(_QWORD *)(v40 + 136);
                v42[1].i64[0] = v58;
                *v42 = v6;
                *((_QWORD *)v43 + 2) = v60;
                *(_OWORD *)v43 = v59;
                v44[1].i64[0] = v61;
                *v44 = v7;
                *((_QWORD *)v45 + 2) = v63;
                *(_OWORD *)v45 = v62;
                v46[1].i64[0] = v65;
                *v46 = v64;
                *((_QWORD *)v47 + 2) = v66;
              }
              else
              {
                v6 = *(int32x4_t *)v41;
                v48 = *(_QWORD *)(v41 + 16);
                v49 = *(_OWORD *)(v41 + 24);
                v50 = *(_QWORD *)(v41 + 40);
                v7 = *(int32x4_t *)(v41 + 48);
                v51 = *(_QWORD *)(v41 + 64);
                v52 = *(_OWORD *)(v41 + 72);
                v53 = *(_QWORD *)(v41 + 88);
                v54 = *(int32x4_t *)(v41 + 96);
                v55 = *(_QWORD *)(v41 + 112);
                v56 = *(_OWORD *)(v41 + 120);
                v57 = *(_QWORD *)(v41 + 136);
                v42[1].i64[0] = v48;
                *v42 = v6;
                *((_QWORD *)v43 + 2) = v50;
                *(_OWORD *)v43 = v49;
                v44[1].i64[0] = v51;
                *v44 = v7;
                *((_QWORD *)v45 + 2) = v53;
                *(_OWORD *)v45 = v52;
                v46[1].i64[0] = v55;
                *v46 = v54;
                *((_QWORD *)v47 + 2) = v57;
              }
              *(_OWORD *)v47 = v56;
            }
            v19 += 4;
          }
          while (v19 != v20);
          v15 = *(unsigned int *)(a1 + 372);
        }
        ++v16;
        ++v17;
      }
      while (v16 < v15);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1184) = v10;
    *(_DWORD *)(a1 + 1188) = v10;
    v67 = v10 * (unint64_t)v10;
    v68 = v10;
    if (*(_QWORD *)(a1 + 1176) < v67)
    {
      v69 = *(void **)(a1 + 1168);
      if (v69)
        operator delete[](v69);
      *(_QWORD *)(a1 + 1168) = 0;
      *(_QWORD *)(a1 + 1176) = ((4 * v67 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
      *(_QWORD *)(a1 + 1168) = MEMORY[0x20BD028B4]();
      v68 = *(_DWORD *)(a1 + 1184);
      v10 = *(_DWORD *)(a1 + 1188);
    }
    v70 = v68 * v10;
    if (v70)
      bzero(*(void **)(a1 + 1168), 4 * v70);
    v71 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v71)
    {
      v72 = 0;
      v73 = *(unsigned int **)(a1 + 576);
      do
      {
        v74 = *(_QWORD *)(a1 + 448) + 24 * v72;
        v75 = *(unsigned int **)v74;
        v76 = *(unsigned int **)(v74 + 8);
        if (v75 != v76)
        {
          do
          {
            v110 = *v73;
            v111 = *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * *v75);
            v112 = *(_QWORD *)(a1 + 376) + 4 * *((_QWORD *)v75 + 1);
            v113 = *(unsigned int *)(a1 + 1184);
            v114 = *(_QWORD *)(a1 + 1168);
            if (*v73 < v111)
            {
              v77 = *(int32x4_t *)v112;
              v78 = (int32x4_t *)(v114 + 4 * (v111 + (_DWORD)v113 * v110));
              v79 = *(_OWORD *)(v112 + 24);
              v80 = *(_QWORD *)(v112 + 40);
              v81 = *(_QWORD *)(v112 + 64);
              v82 = HIDWORD(v81);
              v83 = *(_OWORD *)(v112 + 48);
              v84 = HIDWORD(v83);
              v85 = *(_QWORD *)(v112 + 56);
              v86 = HIDWORD(*(_QWORD *)(v112 + 48));
              v87.i64[0] = *(_QWORD *)(v112 + 88);
              v88 = v87.i32[1];
              v89 = *(_OWORD *)(v112 + 72);
              v90 = HIDWORD(v89);
              v91 = *(_QWORD *)(v112 + 80);
              v92 = HIDWORD(*(_QWORD *)(v112 + 72));
              v93 = *(_QWORD *)(v112 + 112);
              LODWORD(v94) = HIDWORD(v93);
              v95 = *(int32x4_t *)(v112 + 96);
              LODWORD(v96) = v95.i32[3];
              LODWORD(v97) = *(_QWORD *)(v112 + 104);
              LODWORD(v98) = HIDWORD(*(_QWORD *)(v112 + 96));
              v99 = *(_QWORD *)(v112 + 136);
              v100 = HIDWORD(v99);
              v101 = *(_OWORD *)(v112 + 120);
              v102 = HIDWORD(v101);
              v103 = *(_QWORD *)(v112 + 128);
              v104 = HIDWORD(*(_QWORD *)(v112 + 120));
              v78[1].i64[0] = *(_QWORD *)(v112 + 16);
              *v78 = v77;
              v105 = &v78->i8[4 * v113];
              *((_QWORD *)v105 + 2) = v80;
            }
            else
            {
              v115 = *(int32x4_t *)(v112 + 24);
              v87 = *(int32x4_t *)(v112 + 96);
              v116.i64[0] = vzip1q_s32(*(int32x4_t *)v112, v115).u64[0];
              v116.i32[2] = *(_OWORD *)(v112 + 48);
              v116.i32[3] = *(_OWORD *)(v112 + 72);
              *(_QWORD *)&v79 = vtrn2q_s32(*(int32x4_t *)v112, v115).u64[0];
              DWORD2(v79) = HIDWORD(*(_QWORD *)(v112 + 48));
              HIDWORD(v79) = HIDWORD(*(_QWORD *)(v112 + 72));
              v117 = vzip1q_s32(v87, *(int32x4_t *)(v112 + 120)).u64[0];
              LODWORD(v118) = vdupq_lane_s32(*(int32x2_t *)v87.i8, 1).u32[0];
              HIDWORD(v118) = HIDWORD(*(_QWORD *)(v112 + 120));
              v78 = (int32x4_t *)(v114 + 4 * (v110 + (_DWORD)v113 * v111));
              v95.i64[0] = *(_QWORD *)(v112 + 16);
              v98 = *(_QWORD *)(v112 + 40);
              v97 = *(_QWORD *)(v112 + 64);
              v96 = *(_QWORD *)(v112 + 88);
              v93 = *(_QWORD *)(v112 + 112);
              v82 = *(_QWORD *)(v112 + 128);
              LODWORD(v81) = *(_QWORD *)(v112 + 104);
              v84 = *(_QWORD *)(v112 + 80);
              v85 = *(_QWORD *)(v112 + 56);
              v86 = *(_QWORD *)(v112 + 32);
              LODWORD(v83) = *(_QWORD *)(v112 + 8);
              v88 = HIDWORD(*(_OWORD *)(v112 + 120));
              v87.i32[0] = v87.i32[3];
              v90 = HIDWORD(*(_OWORD *)(v112 + 72));
              v94 = *(_QWORD *)(v112 + 136);
              v91 = HIDWORD(*(_OWORD *)(v112 + 48));
              v92 = v115.i32[3];
              LODWORD(v89) = HIDWORD(*(_OWORD *)v112);
              v100 = HIDWORD(v94);
              LODWORD(v99) = HIDWORD(v93);
              v102 = HIDWORD(v96);
              v103 = HIDWORD(v97);
              v104 = HIDWORD(v98);
              LODWORD(v101) = v95.i32[1];
              v78[1].i64[0] = v117;
              *v78 = v116;
              v105 = &v78->i8[4 * v113];
              *((_QWORD *)v105 + 2) = v118;
            }
            *(_OWORD *)v105 = v79;
            DWORD1(v83) = v86;
            *((_QWORD *)&v83 + 1) = __PAIR64__(v84, v85);
            v106 = &v78->i8[8 * v113];
            *(_OWORD *)v106 = v83;
            HIDWORD(v81) = v82;
            *((_QWORD *)v106 + 2) = v81;
            v107 = &v78->i8[12 * v113];
            v87.i32[1] = v88;
            DWORD1(v89) = v92;
            *((_QWORD *)v107 + 2) = v87.i64[0];
            *((_QWORD *)&v89 + 1) = __PAIR64__(v90, v91);
            *(_OWORD *)v107 = v89;
            v108 = &v78[v113];
            HIDWORD(v93) = v94;
            v108[1].i64[0] = v93;
            v95.i32[1] = v98;
            v95.i64[1] = __PAIR64__(v96, v97);
            *v108 = v95;
            v109 = &v78->i8[20 * v113];
            HIDWORD(v99) = v100;
            DWORD1(v101) = v104;
            *((_QWORD *)&v101 + 1) = __PAIR64__(v102, v103);
            *((_QWORD *)v109 + 2) = v99;
            *(_OWORD *)v109 = v101;
            v75 += 4;
          }
          while (v75 != v76);
          v71 = *(unsigned int *)(a1 + 372);
        }
        ++v72;
        ++v73;
      }
      while (v72 < v71);
    }
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v119 = *(_DWORD *)(a1 + 320);
    if (v119 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, a2);
      v126 = *(_DWORD *)(a1 + 1184);
      LODWORD(v127) = *(_DWORD *)(a1 + 1188);
      if (v127 >= v126)
        v127 = v126;
      else
        v127 = v127;
      if ((_DWORD)v127)
      {
        v128 = 0;
        v129 = *(float *)(a1 + 316);
        v130 = *(float **)a2;
        v131 = v126 + 1;
        v132 = *(_QWORD *)(a1 + 1168);
        do
        {
          v133 = *v130++;
          *(float *)(v132 + 4 * v128) = (float)(v129 * v133) + *(float *)(v132 + 4 * v128);
          v128 += v131;
          --v127;
        }
        while (v127);
      }
    }
    else if (!v119)
    {
      v120 = *(_DWORD *)(a1 + 1184);
      LODWORD(v121) = *(_DWORD *)(a1 + 1188);
      v121 = v121 >= v120 ? v120 : v121;
      if ((_DWORD)v121)
      {
        v122 = 0;
        v123 = *(float *)(a1 + 316);
        v124 = v120 + 1;
        v125 = *(_QWORD *)(a1 + 1168);
        do
        {
          *(float *)(v125 + 4 * v122) = v123 + *(float *)(v125 + 4 * v122);
          v122 += v124;
          --v121;
        }
        while (v121);
      }
    }
  }
  v134 = *(unsigned int *)(a1 + 1184);
  *(_DWORD *)(a2 + 16) = v134;
  if (*(_QWORD *)(a2 + 8) < v134)
  {
    if (*(_QWORD *)a2)
      operator delete[](*(void **)a2);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = ((4 * v134 + 31) & 0x7FFFFFFE0) >> 2;
    *(_QWORD *)a2 = MEMORY[0x20BD028B4]();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, a2);
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 301) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_207D9A694(_Unwind_Exception *a1)
{
  sub_207D928D0();
  _Unwind_Resume(a1);
}

void sub_207D9A6A8(_Unwind_Exception *a1)
{
  sub_207D928A0();
  _Unwind_Resume(a1);
}

uint64_t sub_207D9A6B8(uint64_t a1)
{
  return a1 + 1192;
}

float *sub_207D9A6C0(float *result)
{
  float *v1;
  uint64_t *v2;
  unint64_t v3;
  int v4;
  void *v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  float32x4_t *v21;
  int v22;
  float32x2_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  __float2 v30;
  void **v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float *v43;
  unint64_t v44;
  float *v45;
  unint64_t v46;
  uint64_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  float32x4_t *v59;
  uint64_t i;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float *v70;
  uint64_t v71;
  float32x4_t *v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  float32x4_t *v80;
  float32x4_t *v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;
  float *v92;
  float v93;
  float v94;
  int8x16_t v95;
  _BYTE v96[32];
  float *v97[2];
  float32x2_t *v98[2];

  if (((*((_QWORD *)result + 99) - *((_QWORD *)result + 98)) & 0x3FFFFFFFCLL) == 0)
    return result;
  v1 = result;
  v2 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)result + 75) + 32))((_QWORD *)result + 75);
  v3 = *((unsigned int *)v1 + 156);
  v4 = v3;
  if ((_DWORD)v3 == *((_DWORD *)v1 + 282))
  {
    v5 = (void *)*((_QWORD *)v1 + 139);
  }
  else
  {
    *((_DWORD *)v1 + 282) = v3;
    v5 = (void *)*((_QWORD *)v1 + 139);
    if (*((_QWORD *)v1 + 140) < v3)
    {
      v6 = v3;
      if (v5)
      {
        operator delete[](v5);
        v6 = *((unsigned int *)v1 + 282);
        v4 = *((_DWORD *)v1 + 282);
      }
      *((_QWORD *)v1 + 139) = 0;
      *((_QWORD *)v1 + 140) = ((4 * v3 + 31) & 0x7FFFFFFE0) >> 2;
      v5 = (void *)MEMORY[0x20BD028B4]();
      *((_QWORD *)v1 + 139) = v5;
      v3 = v6;
    }
  }
  if (v4)
    bzero(v5, 4 * v3);
  v7 = (_DWORD *)*((_QWORD *)v1 + 98);
  v8 = (_DWORD *)*((_QWORD *)v1 + 99);
  if (v7 != v8)
  {
    v9 = 0;
    v10 = *((_QWORD *)v1 + 76);
    v11 = *v2;
    do
    {
      v11 -= 16;
      do
      {
        v22 = *(_DWORD *)(v11 + 16);
        v11 += 16;
      }
      while (*v7 != v22);
      v23 = *(float32x2_t **)(v11 + 8);
      memset(v96, 0, 24);
      v98[0] = v23 + 4;
      v98[1] = 0;
      v97[0] = (float *)v96;
      v97[1] = 0;
      sub_207DA0C70(v98, v97);
      v24 = *(int8x16_t *)v96;
      v25 = vextq_s8(v24, v24, 8uLL);
      v26 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v96, 1), *(float32x2_t *)v96, 1), *(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8).f32[0];
      if (v26 >= 0.0061)
      {
        v29 = sqrtf(v26);
        v94 = v26;
        v95 = *(int8x16_t *)v96;
        v30 = __sincosf_stret(v29);
        v26 = v94;
        v24 = v95;
        v28 = v30.__sinval / v29;
        v27 = (float)(1.0 / v94) * (float)(1.0 - v30.__cosval);
        *(float *)v25.i32 = (float)(1.0 / v94) * (float)(1.0 - (float)(v30.__sinval / v29));
        if (v94 >= 0.00000149)
        {
LABEL_21:
          if (v26 <= 9.0)
            v12 = (float)((float)(v27 * 0.5) - *(float *)v25.i32) / v28;
          else
            v12 = (float)(v27 + (float)(v28 * -0.5)) / (float)(v26 * v27);
          goto LABEL_14;
        }
      }
      else
      {
        v27 = 0.5 - (float)(v26 * (float)((float)(v26 / -720.0) + 0.041667));
        *(float *)v25.i32 = 0.16667 - (float)(v26 * (float)((float)(v26 / -5040.0) + 0.0083333));
        v28 = 1.0 - (float)(v26 * *(float *)v25.i32);
        if (v26 >= 0.00000149)
          goto LABEL_21;
      }
      v12 = (float)(v26 * 0.000033069) + (float)((float)(v26 * 0.0013889) + 0.083333);
LABEL_14:
      v13 = (float32x4_t *)(v10 + 4 * v9);
      *(float32x2_t *)v25.i8 = v23[10];
      v25.i32[2] = v23[11].i32[0];
      v14 = (float32x4_t)vextq_s8(vextq_s8(v24, v24, 0xCuLL), v24, 8uLL);
      v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL);
      v16 = (int8x16_t)vsubq_f32(vmulq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL)), vmulq_f32(v15, (float32x4_t)vextq_s8(vextq_s8(v25, v25, 0xCuLL), v25, 8uLL)));
      v17.i64[0] = 0xBF000000BF000000;
      v17.i64[1] = 0xBF000000BF000000;
      v18 = vsubq_f32(vmulq_f32(v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL)), vmulq_f32(v15, (float32x4_t)vextq_s8(vextq_s8(v16, v16, 0xCuLL), v16, 8uLL)));
      v19 = vaddq_f32(vaddq_f32((float32x4_t)v25, vmulq_f32((float32x4_t)v16, v17)), vmulq_n_f32(v18, v12));
      *(_DWORD *)&v96[20] = v19.i32[2];
      *(_QWORD *)&v96[12] = v19.i64[0];
      v18.i64[0] = v13[1].i64[0];
      v20 = vsubq_f32(*(float32x4_t *)&v96[16], v18).u64[0];
      v21 = (float32x4_t *)(*((_QWORD *)v1 + 139) + 4 * v9);
      *v21 = vsubq_f32(*(float32x4_t *)v96, *v13);
      v21[1].i64[0] = v20;
      v9 += 6;
      ++v7;
    }
    while (v7 != v8);
  }
  v31 = (void **)(v1 + 254);
  v32 = *((_QWORD *)v1 + 97);
  v33 = *(_DWORD *)(v32 + 12);
  v34 = 6 * *(_DWORD *)(v32 + 8);
  v35 = 6 * v33;
  *((_DWORD *)v1 + 258) = v34;
  *((_DWORD *)v1 + 259) = 6 * v33;
  v36 = (6 * v33) * (unint64_t)v34;
  if (*((_QWORD *)v1 + 128) < v36)
  {
    if (*v31)
      operator delete[](*v31);
    *((_QWORD *)v1 + 127) = 0;
    *((_QWORD *)v1 + 128) = ((4 * v36 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
    *((_QWORD *)v1 + 127) = MEMORY[0x20BD028B4]();
    v34 = *((_DWORD *)v1 + 258);
    v35 = *((_DWORD *)v1 + 259);
  }
  v37 = v34 * v35;
  if (v37)
    bzero(*v31, 4 * v37);
  (*(void (**)(float *, float *, _QWORD))(*((_QWORD *)v1 + 83) + 64))(v1 + 166, v1 + 254, 0);
  result = (float *)sub_207D91628((uint64_t)(v1 + 254));
  v38 = *((unsigned int *)v1 + 282);
  if (!(_DWORD)v38)
    return result;
  v39 = (float *)*((_QWORD *)v1 + 139);
  v40 = (float *)*((_QWORD *)v1 + 79);
  v41 = *v39;
  v42 = *v39 * *v40;
  if ((_DWORD)v38 != 1)
  {
    v43 = v39 + 1;
    v44 = (v38 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
    if (v44 < 7)
    {
      v45 = (float *)*((_QWORD *)v1 + 79);
LABEL_38:
      v53 = v45 + 1;
      do
      {
        v54 = *v43++;
        v55 = v54;
        v56 = *v53++;
        v42 = v42 + (float)(v55 * v56);
      }
      while (v43 != &v39[v38]);
      goto LABEL_40;
    }
    v46 = v44 + 1;
    v47 = (v44 + 1) & 0x7FFFFFFFFFFFFFF8;
    v43 += v47;
    v45 = &v40[v47];
    v48 = (float32x4_t *)(v40 + 5);
    v49 = (float32x4_t *)(v39 + 5);
    v50 = v47;
    do
    {
      v51 = vmulq_f32(v49[-1], v48[-1]);
      v52 = vmulq_f32(*v49, *v48);
      v42 = (float)((float)((float)((float)((float)((float)((float)(v42 + v51.f32[0]) + v51.f32[1]) + v51.f32[2])
                                          + v51.f32[3])
                                  + v52.f32[0])
                          + v52.f32[1])
                  + v52.f32[2])
          + v52.f32[3];
      v48 += 2;
      v49 += 2;
      v50 -= 8;
    }
    while (v50);
    if (v46 != v47)
      goto LABEL_38;
  }
LABEL_40:
  v57 = -v42;
  v58 = *((unsigned int *)v1 + 258);
  if (!(_DWORD)v58)
  {
    if (v38 >= 8)
    {
      v61 = v38 & 0xFFFFFFF8;
      v86 = (float32x4_t *)(v39 + 4);
      v87.i64[0] = 0x3F0000003F000000;
      v87.i64[1] = 0x3F0000003F000000;
      v88 = v61;
      do
      {
        v89 = vmulq_f32(vmulq_f32(v86[-1], v87), (float32x4_t)0);
        v90 = vmulq_f32(vmulq_f32(*v86, v87), (float32x4_t)0);
        v57 = (float)((float)((float)((float)((float)((float)((float)(v57 + v89.f32[0]) + v89.f32[1]) + v89.f32[2])
                                            + v89.f32[3])
                                    + v90.f32[0])
                            + v90.f32[1])
                    + v90.f32[2])
            + v90.f32[3];
        v86 += 2;
        v88 -= 8;
      }
      while (v88);
      if (v61 == v38)
        return result;
    }
    else
    {
      v61 = 0;
    }
    v91 = v38 - v61;
    v92 = &v39[v61];
    do
    {
      v93 = *v92++;
      v57 = v57 + (float)((float)(v93 * 0.5) * 0.0);
      --v91;
    }
    while (v91);
    return result;
  }
  v59 = (float32x4_t *)*((_QWORD *)v1 + 127);
  if ((_DWORD)v58 != 1)
  {
    v62 = 0;
    v63 = 0;
    v64 = (v58 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL;
    v65 = (v64 + 1) & 0x7FFFFFFFFFFFFFF8;
    result = &v39[v65];
    while (1)
    {
      v66 = &v59->f32[(v58 * v63)];
      v68 = *v66;
      v67 = v66 + 1;
      v69 = v41 * v68;
      if (v64 >= 7)
      {
        v67 += v65;
        v71 = (v64 + 1) & 0x7FFFFFFFFFFFFFF8;
        v72 = (float32x4_t *)(v39 + 5);
        v73 = (float32x4_t *)((char *)v59 + 4 * v62 + 20);
        do
        {
          v74 = vmulq_f32(v73[-1], v72[-1]);
          v75 = vmulq_f32(*v73, *v72);
          v69 = (float)((float)((float)((float)((float)((float)((float)(v69 + v74.f32[0]) + v74.f32[1]) + v74.f32[2])
                                              + v74.f32[3])
                                      + v75.f32[0])
                              + v75.f32[1])
                      + v75.f32[2])
              + v75.f32[3];
          v72 += 2;
          v73 += 2;
          v71 -= 8;
        }
        while (v71);
        v70 = &v39[v65];
        if (v64 + 1 == v65)
          goto LABEL_47;
      }
      else
      {
        v70 = (float *)*((_QWORD *)v1 + 139);
      }
      v76 = v70 + 1;
      do
      {
        v77 = *v67++;
        v78 = v77;
        v79 = *v76++;
        v69 = v69 + (float)(v78 * v79);
      }
      while (v67 != &v59->f32[(v58 * v63) + v58]);
LABEL_47:
      v57 = v57 + (float)((float)(v39[v63++] * 0.5) * v69);
      v62 += v58;
      if (v63 == v38)
        return result;
    }
  }
  if (v38 < 8)
  {
    for (i = 0; i != v38; ++i)
LABEL_59:
      v57 = v57 + (float)((float)(v39[i] * 0.5) * (float)(v41 * v59->f32[i]));
    return result;
  }
  i = v38 & 0xFFFFFFF8;
  v80 = (float32x4_t *)(v39 + 4);
  v81 = v59 + 1;
  v82.i64[0] = 0x3F0000003F000000;
  v82.i64[1] = 0x3F0000003F000000;
  v83 = i;
  do
  {
    v84 = vmulq_f32(vmulq_f32(v80[-1], v82), vmulq_n_f32(v81[-1], v41));
    v85 = vmulq_f32(vmulq_f32(*v80, v82), vmulq_n_f32(*v81, v41));
    v57 = (float)((float)((float)((float)((float)((float)((float)(v57 + v84.f32[0]) + v84.f32[1]) + v84.f32[2])
                                        + v84.f32[3])
                                + v85.f32[0])
                        + v85.f32[1])
                + v85.f32[2])
        + v85.f32[3];
    v80 += 2;
    v81 += 2;
    v83 -= 8;
  }
  while (v83);
  if (i != v38)
    goto LABEL_59;
  return result;
}

float sub_207D9AE40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x2_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __float2 v18;
  float v20;
  int32x4_t v21;
  int32x4_t v22[2];
  float *v23[2];
  float32x2_t *v24[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = 0.0;
  while (v1 != v2)
  {
    v11 = *(float32x2_t **)(v1 + 8);
    if ((v11->i8[4] & 2) != 0 || !v11[2].i8[4])
      goto LABEL_5;
    memset(v22, 0, 24);
    v24[0] = v11 + 4;
    v24[1] = 0;
    v23[0] = (float *)v22;
    v23[1] = 0;
    sub_207DA0C70(v24, v23);
    v12 = (int8x16_t)v22[0];
    v13 = vextq_s8(v12, v12, 8uLL);
    v14 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22[0].i8, 1), *(float32x2_t *)v22[0].i8, 1), *(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8).f32[0];
    if (v14 >= 0.0061)
    {
      v17 = sqrtf(v14);
      v20 = v14;
      v21 = v22[0];
      v18 = __sincosf_stret(v17);
      v14 = v20;
      v12 = (int8x16_t)v21;
      v16 = v18.__sinval / v17;
      v15 = (float)(1.0 / v20) * (float)(1.0 - v18.__cosval);
      *(float *)v13.i32 = (float)(1.0 / v20) * (float)(1.0 - (float)(v18.__sinval / v17));
      if (v20 >= 0.00000149)
      {
LABEL_12:
        if (v14 <= 9.0)
          v4 = (float)((float)(v15 * 0.5) - *(float *)v13.i32) / v16;
        else
          v4 = (float)(v15 + (float)(v16 * -0.5)) / (float)(v14 * v15);
        goto LABEL_4;
      }
    }
    else
    {
      v15 = 0.5 - (float)(v14 * (float)((float)(v14 / -720.0) + 0.041667));
      *(float *)v13.i32 = 0.16667 - (float)(v14 * (float)((float)(v14 / -5040.0) + 0.0083333));
      v16 = 1.0 - (float)(v14 * *(float *)v13.i32);
      if (v14 >= 0.00000149)
        goto LABEL_12;
    }
    v4 = (float)(v14 * 0.000033069) + (float)((float)(v14 * 0.0013889) + 0.083333);
LABEL_4:
    *(float32x2_t *)v13.i8 = v11[10];
    v13.i32[2] = v11[11].i32[0];
    v5 = (float32x4_t)vextq_s8(vextq_s8(v12, v12, 0xCuLL), v12, 8uLL);
    v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL);
    v7 = (int8x16_t)vsubq_f32(vmulq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), v13, 0xCuLL)), vmulq_f32(v6, (float32x4_t)vextq_s8(vextq_s8(v13, v13, 0xCuLL), v13, 8uLL)));
    v8.i64[0] = 0xBF000000BF000000;
    v8.i64[1] = 0xBF000000BF000000;
    v9 = vaddq_f32(vaddq_f32((float32x4_t)v13, vmulq_f32((float32x4_t)v7, v8)), vmulq_n_f32(vsubq_f32(vmulq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), v7, 0xCuLL)), vmulq_f32(v6, (float32x4_t)vextq_s8(vextq_s8(v7, v7, 0xCuLL), v7, 8uLL))), v4));
    v22[1].i32[1] = v9.i32[2];
    *(uint64_t *)((char *)&v22[0].i64[1] + 4) = v9.i64[0];
    v10 = (int8x16_t)v22[0];
    v7.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
    v3 = v3
       + vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22[0].i8, 1), *(float32x2_t *)v22[0].i8, 1), *(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)vdup_laneq_s32(v22[0], 3), (float32x4_t)v22[0], 3), *(float32x2_t *)v22[1].i8, *(float32x2_t *)v22[1].i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22[1].i8, 1), *(float32x2_t *)v22[1].i8, 1).f32[0];
LABEL_5:
    v1 += 16;
  }
  return v3;
}

uint64_t sub_207D9B0E4(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float cosval;
  __float2 v9;
  int8x16_t v10;
  float32x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x2_t v14;
  float v15;
  float v16;
  float32x2_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x2_t v26;
  unsigned int v27;
  unsigned __int32 v28;
  unsigned __int32 v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unsigned int *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  float v43;
  float32x2_t v44;
  uint64_t result;
  float32x2_t v46;
  __int32 v47;
  __int32 v48;
  int8x16_t v49;

  kdebug_trace();
  v4 = *(uint64_t **)(a1 + 504);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      v39 = *(unsigned int **)(v5 + 8);
      if (*v39 != -1)
      {
        v40 = *((_OWORD *)v39 + 3);
        *(_OWORD *)(v39 + 30) = *((_OWORD *)v39 + 2);
        *(_OWORD *)(v39 + 34) = v40;
        v41 = *((_OWORD *)v39 + 5);
        *(_OWORD *)(v39 + 38) = *((_OWORD *)v39 + 4);
        *(_OWORD *)(v39 + 42) = v41;
        sub_207D43AA8((_QWORD *)v39 + 23, *((char **)v39 + 12), *((char **)v39 + 13), (uint64_t)(*((_QWORD *)v39 + 13) - *((_QWORD *)v39 + 12)) >> 6);
        v42 = *a2 + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 576) + 4 * *v39);
        v11.i32[0] = *(_DWORD *)(v42 + 8);
        v10.i64[0] = *(_QWORD *)v42;
        v12 = v10;
        v12.i32[2] = v11.i32[0];
        LODWORD(v43) = HIDWORD(*(_QWORD *)v42);
        v44 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42, 1), *(float32x2_t *)v42, 1), v11, v11);
        if (v44.f32[0] >= 0.0061)
        {
          v7 = sqrtf(v44.f32[0]);
          v48 = *(_DWORD *)(v42 + 8);
          v49 = v12;
          v46 = v44;
          v47 = *(_QWORD *)v42;
          v9 = __sincosf_stret(v7);
          cosval = v9.__cosval;
          v10.i32[0] = v47;
          v11.i32[0] = v48;
          v12 = v49;
          v14.i32[1] = v46.i32[1];
          *(float *)v13.i32 = v9.__sinval / v7;
          *(float *)v14.i32 = (float)(1.0 / v46.f32[0]) * (float)(1.0 - v9.__cosval);
          v15 = (float)(1.0 / v46.f32[0]) * (float)(1.0 - (float)(v9.__sinval / v7));
        }
        else
        {
          *(float *)v14.i32 = 0.5 - (float)(v44.f32[0] * (float)((float)(v44.f32[0] / -720.0) + 0.041667));
          v15 = 0.16667 - (float)(v44.f32[0] * (float)((float)(v44.f32[0] / -5040.0) + 0.0083333));
          *(float *)v13.i32 = 1.0 - (float)(v44.f32[0] * v15);
          cosval = 1.0 - (float)(v44.f32[0] * *(float *)v14.i32);
        }
        v16 = *(float *)v10.i32 * *(float *)v14.i32;
        v17 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 4uLL), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v14, 0));
        v18.i32[3] = 0;
        v18.f32[0] = (float)(*(float *)v10.i32 * (float)(*(float *)v10.i32 * *(float *)v14.i32)) + cosval;
        v19 = v43 * (float)(*(float *)v10.i32 * *(float *)v14.i32);
        v20 = v11.f32[0] * v16;
        v21 = v43 * *(float *)v13.i32;
        v22 = v11.f32[0] * *(float *)v13.i32;
        v23 = v19 - (float)(v11.f32[0] * *(float *)v13.i32);
        v18.f32[1] = v19 + v22;
        v24 = vmul_laneq_f32(v17, (float32x4_t)v12, 2);
        v18.f32[2] = v20 - (float)(v43 * *(float *)v13.i32);
        v25.f32[0] = v23;
        v17.i32[1] = v13.i32[0];
        *(float32x2_t *)v13.i8 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v12.i8), v17);
        v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1);
        *(float *)&v27 = v20 + v21;
        v28 = vsub_f32(v24, v26).u32[0];
        v26.f32[1] = cosval;
        v29 = vadd_f32(v24, v26).u32[1];
        v26.i32[1] = vdup_lane_s32((int32x2_t)v24, 0).u32[0];
        v26.f32[0] = cosval;
        v30 = vadd_f32(*(float32x2_t *)v13.i8, v26);
        v25.i32[1] = v30.i32[0];
        v25.i64[1] = __PAIR64__(unk_20823659C, v30.u32[1]);
        v31.i64[0] = __PAIR64__(v28, v27);
        v31.i64[1] = v29;
        v13.i64[0] = *(_QWORD *)(v42 + 12);
        v13.i32[2] = *(_DWORD *)(v42 + 20);
        v32 = (float32x4_t)vextq_s8(vextq_s8(v12, v12, 0xCuLL), v12, 8uLL);
        v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL);
        v34 = (int8x16_t)vsubq_f32(vmulq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), v13, 0xCuLL)), vmulq_f32(v33, (float32x4_t)vextq_s8(vextq_s8(v13, v13, 0xCuLL), v13, 8uLL)));
        v35 = vaddq_f32(vaddq_f32((float32x4_t)v13, vmulq_n_f32((float32x4_t)v34, *(float *)v14.i32)), vmulq_n_f32(vsubq_f32(vmulq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), v34, 0xCuLL)), vmulq_f32(v33, (float32x4_t)vextq_s8(vextq_s8(v34, v34, 0xCuLL), v34, 8uLL))), v15));
        v35.i32[3] = unk_2082365BC;
        v36 = *((float32x4_t *)v39 + 5);
        v37 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*((_OWORD *)v39 + 3))), v25, *(float32x2_t *)(v39 + 12), 1), v31, *((float32x4_t *)v39 + 3), 2), v35, *((float32x4_t *)v39 + 3), 3);
        v38 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*((_OWORD *)v39 + 4))), v25, *(float32x2_t *)(v39 + 16), 1), v31, *((float32x4_t *)v39 + 4), 2), v35, *((float32x4_t *)v39 + 4), 3);
        *((float32x4_t *)v39 + 2) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*((_OWORD *)v39 + 2))), v25, *(float32x2_t *)(v39 + 8), 1), v31, *((float32x4_t *)v39 + 2), 2), v35, *((float32x4_t *)v39 + 2), 3);
        *((float32x4_t *)v39 + 3) = v37;
        *((float32x4_t *)v39 + 4) = v38;
        *((float32x4_t *)v39 + 5) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v36.f32[0]), v25, *(float32x2_t *)v36.f32, 1), v31, v36, 2), v35, v36, 3);
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 298) = *(_BYTE *)(a1 + 297);
  *(_BYTE *)(a1 + 301) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 299) = 0;
  return result;
}

void sub_207D9B454(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

BOOL sub_207D9B480(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  int32x2_t v10;
  __int32 v11;

  v4 = (uint64_t)&a1[157];
  v5 = a1[148].u32[0];
  if (v5 != a1[148].i32[1])
    goto LABEL_11;
  v6 = v5 * v5;
  if (*(_QWORD *)&a1[159] >= v6)
  {
    if (!(_DWORD)v6)
    {
      v10 = vdup_n_s32(v5);
      goto LABEL_10;
    }
    v9 = (void *)a1[158];
    v8 = 4 * v6;
  }
  else
  {
    v7 = (void *)a1[158];
    if (v7)
      operator delete[](v7);
    a1[158] = 0;
    v8 = 4 * v6;
    a1[159] = (int32x2_t)(((v8 + 31) & 0x7FFFFFFE0) >> 2);
    v9 = (void *)MEMORY[0x20BD028B4]();
    a1[158] = (int32x2_t)v9;
  }
  memcpy(v9, *(const void **)&a1[146], v8);
  v10 = a1[148];
LABEL_10:
  a1[160] = v10;
  sub_207D92B24();
LABEL_11:
  v11 = a1[157].i32[0];
  a1[37].i8[0] = v11 == 0;
  if (v11)
    return 1;
  sub_207D92900(v4, a2, a2);
  return a1[37].i8[0] == 0;
}

uint64_t sub_207D9B574()
{
  return 1;
}

uint64_t sub_207D9B57C()
{
  return 0;
}

void sub_207D9B584(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = off_24C074568;
  v2 = (void *)a1[161];
  if (v2)
    operator delete[](v2);
  v3 = (void *)a1[158];
  if (v3)
    operator delete[](v3);
  v4 = (void *)sub_207D95B84((uint64_t)a1);
  operator delete(v4);
}

float sub_207D9B5CC(uint64_t a1, double a2, double a3, float32x4_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float result;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  __int32 *v12;
  float32x4_t v13;
  float v14;

  v4 = *(unsigned int *)(a1 + 368);
  if (!(_DWORD)v4)
    return 0.0;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 448);
  result = 0.0;
  do
  {
    v8 = *(unsigned int **)(v6 + 24 * v5);
    v9 = *(unsigned int **)(v6 + 24 * v5 + 8);
    if (v9 != v8)
    {
      while (1)
      {
        v10 = *v8;
        if (v5 <= v10)
          break;
        v8 += 4;
        if (v8 == v9)
          goto LABEL_3;
      }
      if (v8 != v9 && v5 == v10)
      {
        v11 = *(_QWORD *)(a1 + 376);
        if (v11)
        {
          v12 = (__int32 *)(v11 + 4 * *((_QWORD *)v8 + 1));
          v13.i32[0] = *v12;
          a4.i32[0] = v12[28];
          a4.i32[1] = v12[35];
          v13.i32[1] = v12[7];
          v13.i32[2] = v12[14];
          v13.i32[3] = v12[21];
          a4.i64[0] = vabsq_f32(a4).u64[0];
          a4.i64[1] = 0xFFC00000FFC00000;
          v14 = vmaxnmvq_f32(vmaxnmq_f32(vabsq_f32(v13), a4));
          if (result < v14)
            result = v14;
        }
      }
    }
LABEL_3:
    ++v5;
  }
  while (v5 != v4);
  return result;
}

uint64_t sub_207D9B6A0(uint64_t result, float a2)
{
  *(float *)(result + 316) = a2;
  return result;
}

uint64_t sub_207D9B6A8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 808) = a2;
  return result;
}

uint64_t sub_207D9B6B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 808);
}

BOOL sub_207D9B6B8(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 792) - *(_QWORD *)(a1 + 784)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_207D9B6D0(uint64_t a1)
{
  return a1 + 632;
}

uint64_t sub_207D9B6D8(uint64_t a1)
{
  return a1 + 632;
}

__n128 sub_207D9B6E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;

  v4 = *(unsigned int *)(a1 + 344);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a2 + 16) = v4;
    if (*(_QWORD *)(a2 + 8) < v4)
    {
      if (*(_QWORD *)a2)
        operator delete[](*(void **)a2);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = ((4 * v4 + 31) & 0x7FFFFFFE0) >> 2;
      *(_QWORD *)a2 = MEMORY[0x20BD028B4]();
    }
  }
  v6 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 356);
    v9 = 4 * v6;
    do
    {
      v10 = (__n128 *)(*(_QWORD *)(a1 + 328) + 4 * v8);
      v11 = (__n128 *)(*(_QWORD *)a2 + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 576) + v7));
      result = *v10;
      v11[1].n128_u64[0] = v10[1].n128_u64[0];
      *v11 = result;
      v7 += 4;
      v8 += 6;
    }
    while (v9 != v7);
  }
  return result;
}

void sub_207D9B7A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = (6 * *(_DWORD *)(*(_QWORD *)(a1 + 472) + 8));
  v5 = v4;
  *(_DWORD *)(a2 + 16) = v4;
  if (*(_QWORD *)(a2 + 8) < v4)
  {
    if (*(_QWORD *)a2)
    {
      operator delete[](*(void **)a2);
      v5 = *(_DWORD *)(a2 + 16);
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = ((4 * v4 + 31) & 0x7FFFFFFE0) >> 2;
    *(_QWORD *)a2 = MEMORY[0x20BD028B4]();
  }
  if (v5)
    bzero(*(void **)a2, 4 * v5);
  if (*(_QWORD *)(a1 + 576) != *(_QWORD *)(a1 + 584))
  {
    v6 = *(unsigned int *)(a1 + 372);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(uint64_t **)(a1 + 448);
      v9 = *v8;
      v10 = v8[1];
      if (v9 != v10)
        goto LABEL_14;
LABEL_12:
      while (++v7 < v6)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a1 + 448) + 24 * v7);
        v9 = *v11;
        v10 = v11[1];
        if (v9 != v10)
        {
LABEL_14:
          while (v7 != *(_DWORD *)v9)
          {
            v9 += 16;
            if (v9 == v10)
              goto LABEL_12;
          }
          v12 = *(_QWORD *)(a1 + 576);
          if (v7 >= (*(_QWORD *)(a1 + 584) - v12) >> 2)
            sub_207CBA8AC();
          v13 = *(unsigned int *)(v12 + 4 * v7);
          v14 = (_DWORD *)(*(_QWORD *)(a1 + 376) + 4 * *(_QWORD *)(v9 + 8));
          v15 = *(_QWORD *)a2 + 4 * v13;
          LODWORD(v16) = *v14;
          if (v14 == *(_DWORD **)a2)
          {
            LODWORD(v17) = v14[28];
            DWORD1(v16) = v14[7];
            DWORD2(v16) = v14[14];
            HIDWORD(v16) = v14[21];
            HIDWORD(v17) = v14[35];
            *(_QWORD *)(v15 + 16) = v17;
            *(_OWORD *)v15 = v16;
            v6 = *(unsigned int *)(a1 + 372);
          }
          else
          {
            *(_DWORD *)v15 = v16;
            *(_DWORD *)(v15 + 4) = v14[7];
            *(_DWORD *)(v15 + 8) = v14[14];
            *(_DWORD *)(v15 + 12) = v14[21];
            *(_DWORD *)(v15 + 16) = v14[28];
            *(_DWORD *)(v15 + 20) = v14[35];
          }
        }
      }
    }
  }
}

BOOL sub_207D9B93C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;

  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a1 + 512) + 152;
  *(_QWORD *)(a1 + 1248) = a1 + 552;
  v2 = *(_DWORD *)(a1 + 1256);
  if (v2)
  {
    *(_QWORD *)(a1 + 1240) = 0;
    *(_QWORD *)(a1 + 1248) = 0;
    return v2 == 0;
  }
  v3 = *(unsigned int *)(a1 + 1280);
  v4 = (_DWORD *)MEMORY[0x20BD028B4]((4 * (v3 * v3) + 31) & 0x7FFFFFFE0, 32);
  v5 = v4;
  if ((_DWORD)v3 * (_DWORD)v3)
    bzero(v4, 4 * (v3 * v3));
  if ((_DWORD)v3)
  {
    v6 = v3 + 1;
    if ((_DWORD)v3 == 1)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      if (v6 < 0)
        v8 = ~(_DWORD)v3;
      else
        v8 = v3 + 1;
      v9 = (v3 - 1) * (unint64_t)v8;
      v10 = (_DWORD)v3 != -1 && (unint64_t)(v3 - 1) >> 32 != 0;
      if ((_DWORD)v9)
        v11 = v6 < 0;
      else
        v11 = 0;
      if (!v11 && (v9 & 0xFFFFFFFF00000000) == 0 && !v10)
      {
        v12 = 0;
        v7 = v3 & 0xFFFFFFFE;
        v13 = v7;
        do
        {
          v5[v12] = 1065353216;
          v5[v6 + v12] = 1065353216;
          v12 += 2 * v3 + 2;
          v13 -= 2;
        }
        while (v13);
        if (v7 == v3)
          goto LABEL_25;
      }
    }
    v14 = v3 - v7;
    v15 = v6 * v7;
    do
    {
      v5[v15] = 1065353216;
      v15 += v6;
      --v14;
    }
    while (v14);
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 1284))
    sub_207CC4B9C();
  v16 = *(void **)(a1 + 1216);
  *(_QWORD *)(a1 + 1216) = v5;
  *(_QWORD *)(a1 + 1224) = ((4 * (v3 * v3) + 31) & 0x7FFFFFFE0uLL) >> 2;
  *(_DWORD *)(a1 + 1232) = v3;
  *(_DWORD *)(a1 + 1236) = v3;
  if (v16)
    operator delete[](v16);
  return v2 == 0;
}

void sub_207D9BACC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void sub_207D9BAE0(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "DenseHessian");
}

float sub_207D9BB1C()
{
  return 0.0;
}

void **sub_207D9BB34(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (char *)a1[3];
  if (v2)
  {
    v3 = (char *)a1[4];
    v4 = a1[3];
    if (v3 == v2)
    {
LABEL_17:
      a1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 12);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 12);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 248;
      if (v3 == v2)
      {
        v4 = a1[3];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = (char *)*a1;
  if (*a1)
  {
    v12 = (char *)a1[1];
    v13 = *a1;
    if (v12 != v11)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 2);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 104;
      }
      while (v12 != v11);
      v13 = *a1;
    }
    a1[1] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_207D9BC80(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  sub_207D9BD2C(a1 + 24);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v2;
  if (v2)
    operator delete(v2);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 40);
    v5 = *(void **)(a1 + 32);
    if (v4 != v3)
    {
      v6 = *(_QWORD **)(a1 + 40);
      do
      {
        v7 = *(v6 - 2);
        v6 -= 2;
        *v6 = 0;
        if (v7)
          ((void (*)(void))*(v4 - 1))();
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v5);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_207D9BD2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  unint64_t i;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  unint64_t k;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  unint64_t j;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  void *v62;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unint64_t **)(a1 + 56);
  if ((unint64_t *)v2 == v3)
  {
    v12 = *(_DWORD *)(a1 + 32);
    if (v12)
    {
      if (v12 != 1)
      {
        v33 = 8;
        for (i = 1; i < v12; ++i)
        {
          if (v33)
          {
            v35 = 208 * v33;
            v36 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * i - 16) + 192);
            do
            {
              v37 = (void *)*(v36 - 1);
              if (v37)
              {
                *v36 = v37;
                operator delete(v37);
              }
              v38 = (void *)*(v36 - 12);
              if (v38)
              {
                *(v36 - 11) = v38;
                operator delete(v38);
              }
              v36 += 26;
              v35 -= 208;
            }
            while (v35);
            v12 = *(_DWORD *)(a1 + 32);
          }
          v33 *= 2;
        }
      }
      v13 = *(_QWORD *)(a1 + 40);
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v12 - 1));
        v15 = 208 * v13;
        v16 = (_QWORD *)(v14 + 192);
        do
        {
          v17 = (void *)*(v16 - 1);
          if (v17)
          {
            *v16 = v17;
            operator delete(v17);
          }
          v18 = (void *)*(v16 - 12);
          if (v18)
          {
            *(v16 - 11) = v18;
            operator delete(v18);
          }
          v16 += 26;
          v15 -= 208;
        }
        while (v15);
      }
    }
  }
  else if ((unint64_t)v3 - v2 > 0xEF)
  {
    sub_207D9C1A0(v2, v3, 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3), 1);
    v19 = *(_DWORD *)(a1 + 32);
    if (v19)
    {
      v20 = *(_QWORD **)(a1 + 48);
      v21 = *(_QWORD **)(a1 + 56);
      if (v19 != 1)
      {
        v47 = 8;
        for (j = 1; j < v19; ++j)
        {
          if (v47)
          {
            v49 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * j - 16);
            v50 = &v49[26 * v47];
            do
            {
              v51 = v20;
              if (v21 != v20)
              {
                v51 = v20;
                v52 = v21 - v20;
                do
                {
                  v53 = v52 >> 1;
                  v54 = &v51[v52 >> 1];
                  v56 = *v54;
                  v55 = v54 + 1;
                  v52 += ~(v52 >> 1);
                  if (v56 < (unint64_t)v49)
                    v51 = v55;
                  else
                    v52 = v53;
                }
                while (v52);
              }
              if (v51 == v21 || (_QWORD *)*v51 != v49)
              {
                v57 = (void *)v49[23];
                if (v57)
                {
                  v49[24] = v57;
                  operator delete(v57);
                }
                v58 = (void *)v49[12];
                if (v58)
                {
                  v49[13] = v58;
                  operator delete(v58);
                }
              }
              v49 += 26;
            }
            while (v49 != v50);
            v19 = *(_DWORD *)(a1 + 32);
          }
          v47 *= 2;
        }
      }
      v22 = *(_QWORD *)(a1 + 40);
      if (v22)
      {
        v23 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v19 - 1));
        if (v21 == v20)
        {
          v59 = 208 * v22;
          v60 = v23 + 24;
          do
          {
            v61 = (void *)*(v60 - 1);
            if (v61)
            {
              *v60 = v61;
              operator delete(v61);
            }
            v62 = (void *)*(v60 - 12);
            if (v62)
            {
              *(v60 - 11) = v62;
              operator delete(v62);
            }
            v60 += 26;
            v59 -= 208;
          }
          while (v59);
        }
        else
        {
          v24 = &v23[26 * v22];
          do
          {
            v25 = v20;
            v26 = v21 - v20;
            do
            {
              v27 = v26 >> 1;
              v28 = &v25[v26 >> 1];
              v30 = *v28;
              v29 = v28 + 1;
              v26 += ~(v26 >> 1);
              if (v30 < (unint64_t)v23)
                v25 = v29;
              else
                v26 = v27;
            }
            while (v26);
            if (v25 == v21 || (_QWORD *)*v25 != v23)
            {
              v31 = (void *)v23[23];
              if (v31)
              {
                v23[24] = v31;
                operator delete(v31);
              }
              v32 = (void *)v23[12];
              if (v32)
              {
                v23[13] = v32;
                operator delete(v32);
              }
            }
            v23 += 26;
          }
          while (v23 != v24);
        }
      }
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 32);
    if (v4)
    {
      if (v4 != 1)
      {
        v39 = 8;
        for (k = 1; k < v4; ++k)
        {
          if (v39)
          {
            v41 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * k - 16);
            v42 = &v41[26 * v39];
            do
            {
              v44 = *(_QWORD **)(a1 + 48);
              v43 = *(_QWORD **)(a1 + 56);
              if (v44 != v43)
              {
                while ((_QWORD *)*v44 != v41)
                {
                  if (++v44 == v43)
                  {
                    v44 = *(_QWORD **)(a1 + 56);
                    break;
                  }
                }
              }
              if (v44 == v43)
              {
                v45 = (void *)v41[23];
                if (v45)
                {
                  v41[24] = v45;
                  operator delete(v45);
                }
                v46 = (void *)v41[12];
                if (v46)
                {
                  v41[13] = v46;
                  operator delete(v46);
                }
              }
              v41 += 26;
            }
            while (v41 != v42);
            v4 = *(_DWORD *)(a1 + 32);
          }
          v39 *= 2;
        }
      }
      v5 = *(_QWORD *)(a1 + 40);
      if (v5)
      {
        v6 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
        v7 = &v6[26 * v5];
        do
        {
          v9 = *(_QWORD **)(a1 + 48);
          v8 = *(_QWORD **)(a1 + 56);
          if (v9 != v8)
          {
            while ((_QWORD *)*v9 != v6)
            {
              if (++v9 == v8)
              {
                v9 = *(_QWORD **)(a1 + 56);
                break;
              }
            }
          }
          if (v9 == v8)
          {
            v10 = (void *)v6[23];
            if (v10)
            {
              v6[24] = v10;
              operator delete(v10);
            }
            v11 = (void *)v6[12];
            if (v11)
            {
              v6[13] = v11;
              operator delete(v11);
            }
          }
          v6 += 26;
        }
        while (v6 != v7);
      }
    }
  }
}

_QWORD *sub_207D9C160(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_207D9C1A0(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t **v78;
  unint64_t *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v67 = *(a2 - 1);
        v68 = *v8;
        if (v67 < *v8)
        {
          *v8 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3:
        v69 = *v8;
        v70 = v8[1];
        v71 = *(a2 - 1);
        if (v70 >= *v8)
        {
          if (v71 < v70)
          {
            v8[1] = v71;
            *(a2 - 1) = v70;
            v113 = *v8;
            v112 = v8[1];
            if (v112 < *v8)
            {
              *v8 = v112;
              v8[1] = v113;
            }
          }
        }
        else
        {
          if (v71 >= v70)
          {
            *v8 = v70;
            v8[1] = v69;
            v120 = *(a2 - 1);
            if (v120 >= v69)
              return result;
            v8[1] = v120;
          }
          else
          {
            *v8 = v71;
          }
          *(a2 - 1) = v69;
        }
        return result;
      case 4:
        v72 = v8 + 1;
        v73 = (unint64_t *)v8[1];
        v74 = v8 + 2;
        v75 = v8[2];
        v76 = (unint64_t *)*v8;
        if ((unint64_t)v73 >= *v8)
        {
          if (v75 >= (unint64_t)v73)
          {
LABEL_181:
            v73 = (unint64_t *)v75;
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
LABEL_182:
            *v74 = v114;
            *(a2 - 1) = (unint64_t)v73;
            v117 = *v74;
            v118 = *v72;
            if (v117 < v118)
            {
              v8[1] = v117;
              v8[2] = v118;
              v119 = *v8;
              if (v117 < *v8)
              {
                *v8 = v117;
                v8[1] = v119;
              }
            }
            return result;
          }
          *v72 = v75;
          *v74 = (unint64_t)v73;
          v77 = v8;
          v78 = (unint64_t **)(v8 + 1);
          result = (uint64_t)v73;
          if (v75 >= (unint64_t)v76)
          {
LABEL_173:
            v114 = *(a2 - 1);
            if (v114 >= (unint64_t)v73)
              return result;
            goto LABEL_182;
          }
        }
        else
        {
          v77 = v8;
          v78 = (unint64_t **)(v8 + 2);
          result = *v8;
          if (v75 >= (unint64_t)v73)
          {
            *v8 = (unint64_t)v73;
            v8[1] = (unint64_t)v76;
            v77 = v8 + 1;
            v78 = (unint64_t **)(v8 + 2);
            result = (uint64_t)v76;
            if (v75 >= (unint64_t)v76)
              goto LABEL_181;
          }
        }
        *v77 = v75;
        *v78 = v76;
        v73 = (unint64_t *)result;
        goto LABEL_173;
      case 5:
        return (uint64_t)sub_207D88150(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v89 = (unint64_t)(v10 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v92 = (2 * v90) | 1;
                  v93 = &v8[v92];
                  if (2 * v90 + 2 >= v10)
                  {
                    v94 = *v93;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (*v93 >= *v96)
                      goto LABEL_147;
                  }
                  else
                  {
                    v94 = v93[1];
                    v95 = *v93 >= v94;
                    if (*v93 < v94)
                      ++v93;
                    else
                      v94 = *v93;
                    if (!v95)
                      v92 = 2 * v90 + 2;
                    v96 = &v8[v90];
                    v97 = *v96;
                    if (v94 >= *v96)
                    {
LABEL_147:
                      while (1)
                      {
                        *v96 = v94;
                        v96 = v93;
                        if (v89 < v92)
                          break;
                        v98 = (2 * v92) | 1;
                        v93 = &v8[v98];
                        v92 = 2 * v92 + 2;
                        if (v92 < v10)
                        {
                          v94 = *v93;
                          result = (uint64_t)(v93 + 1);
                          if (*v93 >= v93[1])
                          {
                            v92 = v98;
                          }
                          else
                          {
                            v94 = v93[1];
                            ++v93;
                          }
                          if (v94 < v97)
                            break;
                        }
                        else
                        {
                          v94 = *v93;
                          v92 = v98;
                          if (*v93 < v97)
                            break;
                        }
                      }
                      *v96 = v97;
                    }
                  }
                }
                v91 = v90-- <= 0;
              }
              while (!v91);
              v99 = (unint64_t)v9 >> 3;
              do
              {
                v100 = 0;
                v101 = *v8;
                v102 = (unint64_t)(v99 - 2) >> 1;
                v103 = v8;
                do
                {
                  while (1)
                  {
                    v105 = &v103[v100 + 1];
                    v106 = (2 * v100) | 1;
                    v100 = 2 * v100 + 2;
                    if (v100 < v99)
                      break;
                    v100 = v106;
                    *v103 = *v105;
                    v103 = v105;
                    if (v106 > v102)
                      goto LABEL_161;
                  }
                  v104 = *v105;
                  if (*v105 >= v105[1])
                  {
                    v100 = v106;
                  }
                  else
                  {
                    v104 = v105[1];
                    ++v105;
                  }
                  *v103 = v104;
                  v103 = v105;
                }
                while (v100 <= v102);
LABEL_161:
                if (v105 == --a2)
                {
                  *v105 = v101;
                }
                else
                {
                  *v105 = *a2;
                  *a2 = v101;
                  v107 = (char *)v105 - (char *)v8 + 8;
                  if (v107 >= 9)
                  {
                    v108 = (((unint64_t)v107 >> 3) - 2) >> 1;
                    v109 = &v8[v108];
                    v110 = *v109;
                    v111 = *v105;
                    if (*v109 < *v105)
                    {
                      do
                      {
                        *v105 = v110;
                        v105 = v109;
                        if (!v108)
                          break;
                        v108 = (v108 - 1) >> 1;
                        v109 = &v8[v108];
                        v110 = *v109;
                      }
                      while (*v109 < v111);
                      *v105 = v111;
                    }
                  }
                }
                v91 = v99-- <= 2;
              }
              while (!v91);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v16 = *v8;
            v17 = *v12;
            if (*v8 >= *v12)
            {
              if (v13 < v16)
              {
                *v8 = v13;
                *(a2 - 1) = v16;
                v19 = *v12;
                if (*v8 < *v12)
                {
                  *v12 = *v8;
                  *v8 = v19;
                  --a3;
                  v20 = v19;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v13 >= v16)
            {
              *v12 = v16;
              *v8 = v17;
              v29 = *(a2 - 1);
              if (v29 >= v17)
                goto LABEL_32;
              *v8 = v29;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v17;
LABEL_32:
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v14 = *v12;
          v15 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *(a2 - 1) = v14;
              v18 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v18;
              }
            }
          }
          else
          {
            if (v13 >= v14)
            {
              *v8 = v14;
              *v12 = v15;
              v21 = *(a2 - 1);
              if (v21 >= v15)
                goto LABEL_23;
              *v12 = v21;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v22 = &v8[v11];
          v25 = *(v22 - 1);
          v23 = v22 - 1;
          v24 = v25;
          v26 = v8[1];
          v27 = *(a2 - 2);
          if (v25 >= v26)
          {
            if (v27 < v24)
            {
              *v23 = v27;
              *(a2 - 2) = v24;
              v28 = v8[1];
              if (*v23 < v28)
              {
                v8[1] = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v27 >= v24)
            {
              v8[1] = v24;
              *v23 = v26;
              v30 = *(a2 - 2);
              if (v30 >= v26)
                goto LABEL_37;
              *v23 = v30;
            }
            else
            {
              v8[1] = v27;
            }
            *(a2 - 2) = v26;
          }
LABEL_37:
          v31 = &v8[v11];
          v34 = v31[1];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v8[2];
          v36 = *(a2 - 3);
          if (v34 >= v35)
          {
            if (v36 < v33)
            {
              *v32 = v36;
              *(a2 - 3) = v33;
              v37 = v8[2];
              if (*v32 < v37)
              {
                v8[2] = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v36 >= v33)
            {
              v8[2] = v33;
              *v32 = v35;
              v38 = *(a2 - 3);
              if (v38 >= v35)
                goto LABEL_46;
              *v32 = v38;
            }
            else
            {
              v8[2] = v36;
            }
            *(a2 - 3) = v35;
          }
LABEL_46:
          v39 = *v12;
          v40 = *v23;
          v41 = *v32;
          if (*v12 < *v23)
          {
            if (v41 >= v39)
            {
              *v23 = v39;
              *v12 = v40;
              v23 = v12;
              v39 = v41;
              if (v41 >= v40)
              {
                v42 = *v8;
                *v8 = v40;
                *v12 = v42;
                --a3;
                v20 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v41 >= v39)
            goto LABEL_54;
          *v12 = v41;
          *v32 = v39;
          v32 = v12;
          v39 = v40;
          if (v41 < v40)
          {
LABEL_53:
            *v23 = v41;
            *v32 = v40;
LABEL_54:
            v43 = *v8;
            *v8 = v39;
            *v12 = v43;
            --a3;
            v20 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v8 - 1) < v20)
              goto LABEL_56;
            if (v20 >= *(a2 - 1))
            {
              v59 = v8 + 1;
              do
              {
                v8 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v20 >= *v8);
            }
            else
            {
              do
              {
                v58 = v8[1];
                ++v8;
              }
              while (v20 >= v58);
            }
            v60 = a2;
            if (v8 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v20 < v61);
            }
            if (v8 < v60)
            {
              v62 = *v8;
              v63 = *v60;
              do
              {
                *v8 = v63;
                *v60 = v62;
                do
                {
                  v64 = v8[1];
                  ++v8;
                  v62 = v64;
                }
                while (v20 >= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v20 < v65);
              }
              while (v8 < v60);
            }
            v66 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v66;
            a4 = 0;
            *v66 = v20;
            continue;
          }
          v57 = *v8;
          *v8 = v41;
          *v12 = v57;
          --a3;
          v20 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v44 = 0;
          do
            v45 = v8[++v44];
          while (v45 < v20);
          v46 = &v8[v44];
          v47 = a2;
          if (v44 == 1)
          {
            v47 = a2;
            do
            {
              if (v46 >= v47)
                break;
              v49 = *--v47;
            }
            while (v49 >= v20);
          }
          else
          {
            do
              v48 = *--v47;
            while (v48 >= v20);
          }
          if (v46 >= v47)
          {
            v55 = v46 - 1;
            if (v46 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v50 = *v47;
            v51 = &v8[v44];
            v52 = v47;
            do
            {
              *v51 = v50;
              *v52 = v45;
              do
              {
                v53 = v51[1];
                ++v51;
                v45 = v53;
              }
              while (v53 < v20);
              do
              {
                v54 = *--v52;
                v50 = v54;
              }
              while (v54 >= v20);
            }
            while (v51 < v52);
            v55 = v51 - 1;
            if (v51 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v55;
          }
LABEL_74:
          *v55 = v20;
          if (v46 < v47)
            goto LABEL_77;
          v56 = sub_207D9CB08(v8, v55);
          v8 = v55 + 1;
          result = sub_207D9CB08(v55 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v56)
              continue;
LABEL_77:
            result = sub_207D9C1A0(v7, v55, a3, a4 & 1);
            a4 = 0;
            v8 = v55 + 1;
            continue;
          }
          a2 = v55;
          if (v56)
            return result;
          goto LABEL_2;
        }
        v79 = v8 + 1;
        v81 = v8 == a2 || v79 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 8;
            v83 = v8;
            do
            {
              v86 = *v83;
              v85 = v83[1];
              v83 = v79;
              if (v85 < v86)
              {
                v87 = v82;
                do
                {
                  *(unint64_t *)((char *)v8 + v87) = v86;
                  v88 = v87 - 8;
                  if (v87 == 8)
                  {
                    v84 = v8;
                    goto LABEL_121;
                  }
                  v86 = *(unint64_t *)((char *)v8 + v87 - 16);
                  v87 -= 8;
                }
                while (v85 < v86);
                v84 = (unint64_t *)((char *)v8 + v88);
LABEL_121:
                *v84 = v85;
              }
              v79 = v83 + 1;
              v82 += 8;
            }
            while (v83 + 1 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v116 = *v7;
            v115 = v7[1];
            v7 = v79;
            if (v115 < v116)
            {
              do
              {
                *v79 = v116;
                v116 = *(v79 - 2);
                --v79;
              }
              while (v115 < v116);
              *v79 = v115;
            }
            v79 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_207D9CB08(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_207D88150(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

_QWORD *sub_207D9CE0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C074308;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C074368;
  sub_207CC46C8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_207D9CEB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C074308;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C074368;
  sub_207CC46C8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  operator delete(a1);
}

BOOL sub_207D9CF54(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 2;
  v5 = (36 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 4 * v6;
  v12 = (char *)operator new(4 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFFCLL];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 4) < 0x2C)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_14:
        v24 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v15 - 1) = v24;
        v15 -= 4;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFFCLL)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 2;
    v17 = ((unint64_t)(v13 - 4) >> 2) + 1;
    v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[4 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_207D9D07C(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2) / 0x24uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_207D9D0AC()
{
  return 6;
}

uint64_t sub_207D9D0B4()
{
  return 6;
}

uint64_t sub_207D9D0BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  unsigned int v13;
  __int128 v14;
  int v15;
  __int128 v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  __int128 v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v48 = *(_QWORD *)(result + 16) + 4 * *((_QWORD *)v6 + 1);
          if (v48 == *(_QWORD *)a2)
          {
            v37 = *(_OWORD *)(v48 + 128);
            v51 = HIDWORD(v37);
            LODWORD(v34) = *(_QWORD *)(v48 + 136);
            v52 = HIDWORD(*(_QWORD *)(v48 + 128));
            v23 = *(_OWORD *)(v48 + 96);
            v22 = *(_OWORD *)(v48 + 112);
            v50 = HIDWORD(v22);
            LODWORD(v36) = *(_QWORD *)(v48 + 120);
            v35 = HIDWORD(*(_QWORD *)(v48 + 112));
            v49 = HIDWORD(v23);
            v38 = *(_QWORD *)(v48 + 104);
            v39 = HIDWORD(*(_QWORD *)(v48 + 96));
            v18 = *(_OWORD *)(v48 + 64);
            v29 = *(_OWORD *)(v48 + 80);
            v26 = HIDWORD(v29);
            LODWORD(v20) = *(_QWORD *)(v48 + 88);
            v28 = HIDWORD(*(_QWORD *)(v48 + 80));
            v30 = HIDWORD(v18);
            LODWORD(v21) = *(_QWORD *)(v48 + 72);
            v27 = HIDWORD(*(_QWORD *)(v48 + 64));
            v14 = *(_OWORD *)(v48 + 32);
            v19 = *(_OWORD *)(v48 + 48);
            v31 = HIDWORD(v19);
            v32 = *(_QWORD *)(v48 + 56);
            v33 = HIDWORD(*(_QWORD *)(v48 + 48));
            v9 = HIDWORD(v14);
            LODWORD(v8) = *(_QWORD *)(v48 + 40);
            v13 = HIDWORD(*(_QWORD *)(v48 + 32));
            v16 = *(_OWORD *)v48;
            v10 = *(_OWORD *)(v48 + 16);
            v15 = HIDWORD(v10);
            LODWORD(v12) = *(_QWORD *)(v48 + 24);
            v11 = HIDWORD(*(_QWORD *)(v48 + 16));
            v17 = HIDWORD(*(_OWORD *)v48);
            v24 = *(_QWORD *)(v48 + 8);
            v25 = HIDWORD(*(_QWORD *)v48);
          }
          else
          {
            v8 = *(_QWORD *)(v48 + 40);
            v9 = HIDWORD(v8);
            *(_QWORD *)&v10 = *(_QWORD *)(v48 + 16);
            v11 = DWORD1(v10);
            v12 = *(_OWORD *)(v48 + 24);
            v13 = HIDWORD(v12);
            LODWORD(v14) = *(_QWORD *)(v48 + 32);
            v15 = HIDWORD(*(_QWORD *)(v48 + 24));
            v16 = *(_OWORD *)v48;
            v17 = HIDWORD(*(_OWORD *)v48);
            *(_QWORD *)&v18 = *(_QWORD *)(v48 + 64);
            v19 = *(_OWORD *)(v48 + 48);
            v20 = *(_QWORD *)(v48 + 88);
            v21 = *(_OWORD *)(v48 + 72);
            *(_QWORD *)&v22 = *(_QWORD *)(v48 + 112);
            v23 = *(_OWORD *)(v48 + 96);
            v24 = *(_QWORD *)(v48 + 8);
            v25 = HIDWORD(*(_QWORD *)v48);
            v26 = HIDWORD(v20);
            v27 = DWORD1(v18);
            v28 = HIDWORD(v21);
            LODWORD(v29) = *(_QWORD *)(v48 + 80);
            v30 = HIDWORD(*(_QWORD *)(v48 + 72));
            v31 = HIDWORD(v19);
            v32 = *(_QWORD *)(v48 + 56);
            v33 = HIDWORD(*(_QWORD *)(v48 + 48));
            v34 = *(_QWORD *)(v48 + 136);
            v51 = HIDWORD(v34);
            v35 = DWORD1(v22);
            v36 = *(_OWORD *)(v48 + 120);
            v52 = HIDWORD(v36);
            LODWORD(v37) = *(_QWORD *)(v48 + 128);
            v50 = HIDWORD(*(_QWORD *)(v48 + 120));
            v49 = HIDWORD(v23);
            v38 = *(_QWORD *)(v48 + 104);
            v39 = HIDWORD(*(_QWORD *)(v48 + 96));
          }
          DWORD1(v10) = v11;
          DWORD1(v16) = v25;
          *((_QWORD *)&v16 + 1) = __PAIR64__(v17, v24);
          v40 = *v6;
          v6 += 4;
          v41 = *(unsigned int *)(a2 + 16);
          HIDWORD(v8) = v9;
          DWORD1(v12) = v15;
          *((_QWORD *)&v12 + 1) = __PAIR64__(v13, v14);
          DWORD1(v18) = v27;
          DWORD1(v19) = v33;
          *((_QWORD *)&v19 + 1) = __PAIR64__(v31, v32);
          HIDWORD(v20) = v26;
          DWORD1(v21) = v30;
          *((_QWORD *)&v21 + 1) = __PAIR64__(v28, v29);
          DWORD1(v22) = v35;
          DWORD1(v23) = v39;
          *((_QWORD *)&v23 + 1) = __PAIR64__(v49, v38);
          HIDWORD(v34) = v51;
          DWORD1(v36) = v50;
          v42 = *(_QWORD *)a2 + 4 * (a3 + 6 * v40 + v41 * (HIDWORD(a3) + 6 * i));
          *((_QWORD *)&v36 + 1) = __PAIR64__(v52, v37);
          *(_OWORD *)v42 = v16;
          *(_QWORD *)(v42 + 16) = v10;
          v43 = v42 + 4 * v41;
          *(_OWORD *)v43 = v12;
          *(_QWORD *)(v43 + 16) = v8;
          v44 = v42 + 8 * v41;
          *(_OWORD *)v44 = v19;
          *(_QWORD *)(v44 + 16) = v18;
          v45 = v42 + 12 * v41;
          *(_OWORD *)v45 = v21;
          *(_QWORD *)(v45 + 16) = v20;
          v46 = v42 + 16 * v41;
          *(_OWORD *)v46 = v23;
          *(_QWORD *)(v46 + 16) = v22;
          v47 = v42 + 20 * v41;
          *(_OWORD *)v47 = v36;
          *(_QWORD *)(v47 + 16) = v34;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_207D9D354(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(uint64_t **)(result + 88);
    v6 = *v5;
    v7 = v5[1];
    if (v6 != v7)
      goto LABEL_8;
LABEL_6:
    while (++v4 < v3)
    {
      v11 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
      v6 = *v11;
      v7 = v11[1];
      if (v6 != v7)
      {
LABEL_8:
        while (v4 != *(_DWORD *)v6)
        {
          v6 += 16;
          if (v6 == v7)
            goto LABEL_6;
        }
        v8 = (_DWORD *)(*(_QWORD *)(result + 16) + 4 * *(_QWORD *)(v6 + 8));
        v9 = *a2 + 4 * (a3 + 6 * v4);
        LODWORD(v10) = *v8;
        if (v8 == (_DWORD *)*a2)
        {
          LODWORD(v12) = v8[28];
          DWORD1(v10) = v8[7];
          DWORD2(v10) = v8[14];
          HIDWORD(v10) = v8[21];
          HIDWORD(v12) = v8[35];
          *(_QWORD *)(v9 + 16) = v12;
          *(_OWORD *)v9 = v10;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_DWORD *)v9 = v10;
          *(_DWORD *)(v9 + 4) = v8[7];
          *(_DWORD *)(v9 + 8) = v8[14];
          *(_DWORD *)(v9 + 12) = v8[21];
          *(_DWORD *)(v9 + 16) = v8[28];
          *(_DWORD *)(v9 + 20) = v8[35];
        }
      }
    }
  }
  return result;
}

void sub_207D9D448(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_207D9D4B8(a1);
  operator delete(v1);
}

void sub_207D9D45C(uint64_t a1, int a2, double a3, float32x4_t a4, __n128 a5, float32x4_t a6, float32x4_t a7, int32x4_t a8, float32x4_t a9)
{
  uint64_t *v9;
  __int128 v15;

  v9 = *(uint64_t **)(a1 + 560);
  __asm { FMOV            V0.4S, #1.0 }
  v15 = _Q0;
  sub_207D9D678(v9, (uint64_t)&v15, a2, *(double *)&_Q0, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_207D9D48C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_207D9D498(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_207D9D4A4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8);
}

_QWORD *sub_207D9D4B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  *a1 = off_24C074A18;
  v2 = (void *)a1[67];
  if (v2)
  {
    a1[68] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[64];
  if (v3)
    operator delete[](v3);
  v4 = (void *)a1[61];
  if (v4)
    operator delete[](v4);
  v5 = (void *)a1[58];
  if (v5)
    operator delete[](v5);
  v6 = (void *)a1[55];
  if (v6)
    operator delete[](v6);
  v7 = (void *)a1[52];
  if (v7)
    operator delete[](v7);
  v8 = (void *)a1[49];
  if (v8)
    operator delete[](v8);
  v9 = (void *)a1[46];
  if (v9)
  {
    a1[47] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[43];
  if (v10)
  {
    a1[44] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[40];
  if (v11)
  {
    a1[41] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[37];
  if (v12)
  {
    a1[38] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[34];
  if (v13)
  {
    a1[35] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[31];
  if (v14)
  {
    a1[32] = v14;
    operator delete(v14);
  }
  v15 = (_QWORD *)a1[30];
  if (v15 == a1 + 27)
  {
    v16 = 4;
    v15 = a1 + 27;
  }
  else
  {
    if (!v15)
      goto LABEL_32;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_32:
  v17 = (void *)a1[23];
  if (v17)
  {
    a1[24] = v17;
    operator delete(v17);
  }
  a1[8] = off_24C074308;
  v18 = a1[19];
  if (v18)
  {
    v19 = a1[20];
    v20 = (void *)a1[19];
    if (v19 != v18)
    {
      v21 = a1[20];
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v19 - 16) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = (void *)a1[19];
    }
    a1[20] = v18;
    operator delete(v20);
  }
  a1[8] = off_24C074368;
  sub_207CC46C8((uint64_t)(a1 + 13));
  v24 = (void *)a1[10];
  if (v24)
  {
    a1[11] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[4];
  if (v25)
    operator delete[](v25);
  v26 = (void *)a1[1];
  if (v26)
    operator delete[](v26);
  return a1;
}

void sub_207D9D678(uint64_t *a1, uint64_t a2, int a3, double a4, float32x4_t a5, __n128 a6, float32x4_t a7, float32x4_t a8, int32x4_t a9, float32x4_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int32x2_t *v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  int32x2_t *v39;
  int8x16_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float v43;
  float v44;
  float32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t *v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  unsigned int *v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  int32x2_t v76;
  float32x2_t v77;
  int32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x2_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float cosval;
  float v97;
  __float2 v98;
  float v99;
  float32_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  int8x16_t v111;
  uint64_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float v115;
  float v116;
  float v117;
  __float2 v118;
  uint64_t v119;
  int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  unsigned int *v128;
  uint64_t v129;
  float32x2_t v130;
  BOOL v131;
  uint64_t v132;
  int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x2_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x4_t v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x2_t v155;
  float32x2_t v156;
  float32x4_t v157;
  float32x2_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x2_t v162;
  float32x4_t v163;
  float32x4_t v164;
  __int128 v165;
  float32x4_t v166;
  int8x16_t v167;
  int8x16_t v168;
  float32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  float32x4_t v172;
  int8x16_t v173;
  float v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  int8x16_t v181;
  float32x2_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x2_t v189;
  float32x4_t v190;
  float32x2_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int8x16_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x2_t v199;
  float32x2_t v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x2_t v216;
  float32x4_t v217;
  float32x4_t *v218;
  float32x4_t v219;
  int32x2_t v220;
  int32x2_t v221;
  int32x2_t v222;
  int32x2_t v223;
  int32x2_t v224;
  int32x2_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int32x4_t v228;
  float32x4_t v229;
  __n128 v230;
  float v231;
  float32x2_t v232;
  int8x16_t v233;
  int8x16_t v234;
  __int32 v235;
  uint64_t v236;
  float32x4_t v237;
  _BYTE v238[32];
  float32x4_t v239;
  _BYTE v240[32];
  _BYTE v241[48];
  _BYTE v242[24];
  _BYTE v243[24];
  float32x4_t v244;
  float32x2_t v245;
  float32x4_t v246;
  float32x2_t v247;
  float32x4_t v248;
  float32x2_t v249;
  float32x4_t v250;
  float32x2_t v251;
  float32x4_t v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  std::mutex v264;
  uint64_t v265;

  v265 = *MEMORY[0x24BDAC8D0];
  v17 = a1[1];
  v258 = *a1;
  v16 = v258;
  v259 = a1 + 6;
  v236 = a2;
  v260 = a2;
  v261 = v17;
  v262 = 0;
  v263 = a3;
  v264.__m_.__sig = 850045863;
  v18.i32[1] = 0;
  v18.i32[3] = 0;
  memset(v264.__m_.__opaque, 0, sizeof(v264.__m_.__opaque));
  v19 = *(_QWORD *)(v258 + 96);
  v20 = *(_QWORD *)(v258 + 104);
  if (v19 != v20)
  {
    while (1)
    {
      v21 = *(unsigned int **)(v19 + 48);
      if ((v21[1] & 4) != 0)
        v22 = 1;
      else
        v22 = 2;
      if ((v22 & v263) == 0)
        goto LABEL_4;
      v23 = *((unsigned __int8 *)v21 + 20);
      if (*((_BYTE *)v21 + 20))
      {
        v24 = *v21;
        if ((_DWORD)v24 == -1)
          goto LABEL_4;
        v25 = *(_DWORD *)(*v259 + 4 * v24);
      }
      else
      {
        v25 = -1;
      }
      v26 = *(float32x2_t *)(v21 + 8);
      a6.n128_u32[0] = v21[10];
      v11.i64[0] = *((_QWORD *)v21 + 6);
      a7.i32[0] = v21[14];
      v27 = *(float32x2_t *)(v21 + 16);
      a5.i32[0] = v21[18];
      v28 = *(float32x2_t *)(v19 + 16);
      a8.i32[0] = *(_DWORD *)(v19 + 24);
      v18.i64[0] = *((_QWORD *)v21 + 10);
      v18.i32[2] = v21[22];
      v29 = (int32x2_t *)(*((_QWORD *)v21 + 12) + (*(_QWORD *)(v19 + 40) << 6));
      *(int32x2_t *)v12.i8 = *v29;
      *(int32x2_t *)v13.f32 = v29[2];
      v30 = (float32x2_t)vzip1_s32(*v29, *(int32x2_t *)v13.f32);
      v12.i32[2] = v29[1].i32[0];
      v13.i32[2] = v29[3].i32[0];
      v14.i32[0] = v29[5].i32[0];
      v31 = (float32x2_t)v29[4];
      v32 = (float32x2_t)vtrn2q_s32(v12, (int32x4_t)v13).u64[0];
      v12 = vzip2q_s32(v12, (int32x4_t)v13);
      v33 = (int8x16_t)vdupq_lane_s32((int32x2_t)v32, 0);
      *(int32x2_t *)v15.f32 = v29[6];
      v15.i32[2] = v29[7].i32[0];
      v34 = (int8x16_t)vnegq_f32(v15);
      *(float32x2_t *)v35.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v30, *(float *)v34.i32), v32, *(float32x2_t *)v15.f32, 1), *(float32x2_t *)v12.i8, v15, 2);
      *(float32x2_t *)&v35.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v31, *(float32x2_t *)v34.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1), *(float32x2_t *)v15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v14.i8);
      v13 = (float32x4_t)vextq_s8(v33, (int8x16_t)vdupq_lane_s32((int32x2_t)v32, 1), 0xCuLL);
      *(float32x2_t *)v36.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v26, v28.f32[0]), *(float32x2_t *)v11.f32, v28, 1), v27, a8.f32[0]);
      a6.n128_u64[0] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a6.n128_u64[0], v28), *(float32x2_t *)a7.f32, v28, 1), *(float32x2_t *)a8.f32, *(float32x2_t *)a5.f32);
      v36.i64[1] = a6.n128_u64[0];
      a7 = vaddq_f32(v36, v18);
      *(int32x2_t *)a10.f32 = vdup_lane_s32(*(int32x2_t *)a7.f32, 1);
      *(float32x2_t *)v37.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v30, a7.f32[0]), *(float32x2_t *)v13.f32, *(float32x2_t *)a7.f32, 1), *(float32x2_t *)v12.i8, a7, 2);
      v38 = (float32x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
      *(float32x2_t *)a5.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v31, *(float32x2_t *)a7.f32), *(float32x2_t *)a10.f32, v31, 1), v38, *(float32x2_t *)v14.i8);
      v37.i64[1] = a5.i64[0];
      v18 = vaddq_f32(v37, v35);
      if (v18.f32[2] > 0.0)
      {
        v39 = (int32x2_t *)(v19 + 64);
        v11 = a7;
        v11.i32[3] = 0;
        v14 = (int8x16_t)vnegq_f32(v11);
        *(int32x2_t *)a8.f32 = *v29;
        *(int32x2_t *)a9.i8 = v29[2];
        *(int32x2_t *)a5.f32 = vzip1_s32(*v29, *(int32x2_t *)a9.i8);
        v40 = (int8x16_t)a8;
        v40.i32[2] = v29[1].i32[0];
        a9.i32[2] = v29[3].i32[0];
        v41 = (float32x2_t)v29[4];
        a9.i64[0] = vtrn2q_s32((int32x4_t)v40, a9).u64[0];
        v40.i32[3] = a9.i32[2];
        a8 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.i8, 1);
        a9 = vdupq_lane_s32(*(int32x2_t *)a9.i8, 0);
        v13.i32[0] = v29[5].i32[0];
        v42 = (float32x2_t)vextq_s8((int8x16_t)a9, (int8x16_t)a8, 0xCuLL).u64[0];
        *(float32x2_t *)v33.i8 = vmul_f32(*(float32x2_t *)a5.f32, 0);
        v15 = (float32x4_t)vextq_s8(v14, v14, 8uLL);
        v40.i64[0] = vextq_s8(v40, v40, 8uLL).u64[0];
        *(float32x2_t *)a8.f32 = vmla_f32(vmls_laneq_f32(*(float32x2_t *)v33.i8, v42, v11, 2), *(float32x2_t *)a10.f32, *(float32x2_t *)v40.i8);
        *(float32x2_t *)v34.i8 = vmul_f32(v41, 0);
        a9.i32[0] = vmla_f32(vmla_lane_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v15.f32, v41, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)v13.f32).u32[0];
        *(float32x2_t *)a10.f32 = vmls_lane_f32(vmla_f32(vmul_laneq_f32(*(float32x2_t *)a5.f32, a7, 2), 0, v42), *(float32x2_t *)v40.i8, *(float32x2_t *)a7.f32, 0);
        LODWORD(v43) = vmla_f32(vmla_lane_f32(vmul_f32(v41, v38), 0, v41, 1), *(float32x2_t *)v14.i8, *(float32x2_t *)v13.f32).u32[0];
        *(float32x2_t *)v11.f32 = vmla_f32(vmla_f32(vmul_lane_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)v14.i8, 1), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 0), v42), 0, *(float32x2_t *)v40.i8);
        LODWORD(v44) = vmla_f32(vmla_lane_f32(vmul_lane_f32(v41, *(float32x2_t *)v14.i8, 1), *(float32x2_t *)a7.f32, v41, 1), 0, *(float32x2_t *)v13.f32).u32[0];
        v45 = vmla_f32(vmla_f32(*(float32x2_t *)a5.f32, 0, v42), 0, *(float32x2_t *)v40.i8);
        *(float32x2_t *)a7.f32 = vmla_f32(vmla_lane_f32(v41, 0, v41, 1), 0, *(float32x2_t *)v13.f32);
        *(float32x2_t *)v14.i8 = vmla_f32(vadd_f32(v42, *(float32x2_t *)v33.i8), 0, *(float32x2_t *)v40.i8);
        v15.i32[0] = vmla_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v41, 1), *(float32x2_t *)v34.i8), 0, *(float32x2_t *)v13.f32).u32[0];
        *(float32x2_t *)v40.i8 = vadd_f32(*(float32x2_t *)v40.i8, vmla_f32(*(float32x2_t *)v33.i8, 0, v42));
        v41.i32[0] = vadd_f32(*(float32x2_t *)v13.f32, vmla_lane_f32(*(float32x2_t *)v34.i8, 0, v41, 1)).u32[0];
        *(float32x2_t *)v18.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, 1.0 / v18.f32[2]);
        *(float32x2_t *)v13.f32 = vmul_n_f32(vneg_f32(*(float32x2_t *)v18.f32), 1.0 / v18.f32[2]);
        *(float32x2_t *)(v19 + 64) = vsub_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)(v19 + 28));
        v18.i32[0] = 0;
        v18.f32[1] = 1.0 / v18.f32[2];
        *(float32x2_t *)v34.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(1.0 / v18.f32[2]), a8.f32[0]), *(float32x2_t *)v18.f32, *(float32x2_t *)a8.f32, 1), *(float32x2_t *)v13.f32, *(float *)a9.i32);
        *(float32x2_t *)v33.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(1.0 / v18.f32[2]), a10.f32[0]), *(float32x2_t *)v18.f32, *(float32x2_t *)a10.f32, 1), *(float32x2_t *)v13.f32, v43);
        *(float32x2_t *)a9.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(1.0 / v18.f32[2]), v11.f32[0]), *(float32x2_t *)v18.f32, *(float32x2_t *)v11.f32, 1), *(float32x2_t *)v13.f32, v44);
        *(float32x2_t *)a8.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(1.0 / v18.f32[2]), v45.f32[0]), *(float32x2_t *)v18.f32, v45, 1), *(float32x2_t *)v13.f32, a7.f32[0]);
        a6.n128_u64[0] = (unint64_t)vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(1.0 / v18.f32[2]), *(float *)v14.i32), *(float32x2_t *)v18.f32, *(float32x2_t *)v14.i8, 1), *(float32x2_t *)v13.f32, v15.f32[0]);
        *(float32x2_t *)a5.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(1.0 / v18.f32[2]), *(float *)v40.i32), *(float32x2_t *)v18.f32, *(float32x2_t *)v40.i8, 1), *(float32x2_t *)v13.f32, v41.f32[0]);
        v230 = a6;
        v233 = (int8x16_t)a5;
        v18.i32[0] = a5.i32[1];
        a5.i32[0] = a6.n128_i32[1];
        v224 = *(int32x2_t *)a5.f32;
        v225 = *(int32x2_t *)v18.f32;
        v228 = a9;
        v229 = a8;
        a5.i32[0] = a8.i32[1];
        a6.n128_u32[0] = a9.u32[1];
        v222 = (int32x2_t)a6.n128_u64[0];
        v223 = *(int32x2_t *)a5.f32;
        v226 = v34;
        v227 = v33;
        a6.n128_u32[0] = v33.u32[1];
        v221 = (int32x2_t)a6.n128_u64[0];
        a6.n128_u32[0] = v34.u32[1];
        v220 = (int32x2_t)a6.n128_u64[0];
        *(_BYTE *)(v19 + 76) = 1;
        v46 = *(_QWORD *)(v19 + 80);
        if (v46)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 24))(v46, v19 + 64);
          v47 = *(_QWORD *)(v19 + 80);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
          if (*(_BYTE *)(*(_QWORD *)(v19 + 48) + 20))
          {
            switch(v48)
            {
              case 0:
                v18.i64[0] = *(_QWORD *)(v47 + 12);
                a5.i64[0] = *(_QWORD *)(v47 + 20);
                goto LABEL_22;
              case 1:
                v18.i64[0] = *(_QWORD *)(v47 + 12);
                a10.i64[1] = v226.i64[1];
                a9.i32[3] = v227.i32[3];
                *(float32x2_t *)a10.f32 = vmul_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v18.f32);
                *(float32x2_t *)a9.i8 = vmul_f32(*(float32x2_t *)v227.i8, *(float32x2_t *)v18.f32);
                a8.i64[1] = v228.i64[1];
                *(float32x2_t *)a8.f32 = vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v18.f32);
                *(float32x2_t *)a7.f32 = vmul_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v18.f32);
                a6.n128_u64[1] = v230.n128_u64[1];
                a5.i64[1] = v233.i64[1];
                a6.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)v230.n128_u64[0], *(float32x2_t *)v18.f32);
                *(float32x2_t *)a5.f32 = vmul_f32(*(float32x2_t *)v233.i8, *(float32x2_t *)v18.f32);
                goto LABEL_20;
              case 2:
                v49 = *(float *)(v47 + 12);
                a10.i64[1] = v226.i64[1];
                a9.i32[3] = v227.i32[3];
                *(float32x2_t *)a10.f32 = vmul_n_f32(*(float32x2_t *)v226.i8, v49);
                *(float32x2_t *)a9.i8 = vmul_n_f32(*(float32x2_t *)v227.i8, v49);
                a8.i64[1] = v228.i64[1];
                *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)v228.i8, v49);
                *(float32x2_t *)a7.f32 = vmul_n_f32(*(float32x2_t *)v229.f32, v49);
                a6.n128_u64[1] = v230.n128_u64[1];
                a5.i64[1] = v233.i64[1];
                a6.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v230.n128_u64[0], v49);
                *(float32x2_t *)a5.f32 = vmul_n_f32(*(float32x2_t *)v233.i8, v49);
LABEL_20:
                v230.n128_u64[0] = a6.n128_u64[0];
                v233.i64[0] = a5.i64[0];
                v18.i32[0] = a5.i32[1];
                v225 = *(int32x2_t *)v18.f32;
                v226.i64[0] = a10.i64[0];
                v18.i32[0] = a6.n128_i32[1];
                v224 = *(int32x2_t *)v18.f32;
                v228.i64[0] = a8.i64[0];
                v229.i64[0] = a7.i64[0];
                v18.i32[0] = a7.i32[1];
                v223 = *(int32x2_t *)v18.f32;
                v18.i32[0] = a8.i32[1];
                v222 = *(int32x2_t *)v18.f32;
                v227.i64[0] = a9.i64[0];
                v18.i32[0] = a9.i32[1];
                v221 = *(int32x2_t *)v18.f32;
                v18.i32[0] = a10.i32[1];
                v220 = *(int32x2_t *)v18.f32;
                break;
              case 4:
                (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v47 + 56))(v242, v47);
                a5.i64[0] = *(_QWORD *)&v242[8];
                v18.i64[0] = *(_QWORD *)v242;
LABEL_22:
                a8.i64[1] = v227.i64[1];
                a6.n128_u64[0] = (unint64_t)vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v18.f32, *(float *)v226.i32), *(float32x2_t *)a5.f32, *(float32x2_t *)v226.i8, 1);
                *(float32x2_t *)a7.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v18.f32, *(float *)v227.i32), *(float32x2_t *)a5.f32, *(float32x2_t *)v227.i8, 1);
                a9.i32[3] = v228.i32[3];
                a10.i64[1] = v229.i64[1];
                *(float32x2_t *)a8.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v18.f32, *(float *)v228.i32), *(float32x2_t *)a5.f32, *(float32x2_t *)v228.i8, 1);
                *(float32x2_t *)a9.i8 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v18.f32, v229.f32[0]), *(float32x2_t *)a5.f32, *(float32x2_t *)v229.f32, 1);
                *(float32x2_t *)a10.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v18.f32, v230.n128_f32[0]), *(float32x2_t *)a5.f32, (float32x2_t)v230.n128_u64[0], 1);
                *(float32x2_t *)v18.f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v18.f32, *(float *)v233.i32), *(float32x2_t *)a5.f32, *(float32x2_t *)v233.i8, 1);
                a5.i32[0] = v18.i32[1];
                v225 = *(int32x2_t *)a5.f32;
                a5.i32[0] = a10.i32[1];
                v224 = *(int32x2_t *)a5.f32;
                a5.i32[0] = a9.i32[1];
                v223 = *(int32x2_t *)a5.f32;
                a5.i32[0] = a8.i32[1];
                v222 = *(int32x2_t *)a5.f32;
                a5.i32[0] = a7.i32[1];
                v221 = *(int32x2_t *)a5.f32;
                a5.i32[0] = a6.n128_u32[0];
                v226.i64[0] = a5.i64[0];
                v227.i64[0] = a7.i64[0];
                a5.i32[0] = a6.n128_i32[1];
                v220 = *(int32x2_t *)a5.f32;
                v228.i64[0] = a8.i64[0];
                v229.i64[0] = a9.i64[0];
                v230.n128_u64[0] = a10.i64[0];
                v233.i64[0] = v18.i64[0];
                break;
              default:
                break;
            }
          }
        }
        v50 = *(_QWORD *)(v19 + 64);
        *(_QWORD *)(v19 + 56) = v50;
        a5.i32[0] = HIDWORD(v50);
        v18.i32[0] = v50;
        *(float32x2_t *)v18.f32 = vmla_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), *(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32);
        *(float *)(v19 + 72) = *(float *)(v236 + 4) * v18.f32[0];
        if (!v23)
          goto LABEL_4;
        v51 = *(_QWORD *)(v17 + 120) + 24 * v25;
        v53 = *(char **)v51;
        v52 = *(char **)(v51 + 8);
        if (*(char **)v51 != v52)
        {
          while (*(_DWORD *)v53 < v25)
          {
            v53 += 16;
            if (v53 == v52)
              goto LABEL_32;
          }
        }
        if (v53 != v52)
        {
          if (*(_DWORD *)v53 == v25)
          {
            v54 = *(_QWORD *)(v17 + 48) + 4 * *((_QWORD *)v53 + 1);
LABEL_33:
            a6.n128_u64[0] = *(_QWORD *)(v54 + 16);
            a8.i64[0] = *(_QWORD *)(v54 + 40);
            a10.i64[0] = *(_QWORD *)(v54 + 64);
            v11.i64[0] = *(_QWORD *)(v54 + 88);
            v13.i64[0] = *(_QWORD *)(v54 + 112);
            v14.i64[0] = *(_QWORD *)(v54 + 136);
            v55.i64[0] = __PAIR64__(v227.u32[0], v226.u32[0]);
            v55.i64[1] = __PAIR64__(v229.u32[0], v228.u32[0]);
            v56.i64[0] = __PAIR64__(v221.u32[0], v220.u32[0]);
            v56.i64[1] = __PAIR64__(v223.u32[0], v222.u32[0]);
            v15 = vmlaq_n_f32(vmulq_n_f32(v55, *(float *)v226.i32), v56, *(float *)v220.i32);
            *(float32x2_t *)v34.i8 = vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v233.u32[0], v230.n128_u32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v226.i8, 0)), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v220, 0), (float32x2_t)__PAIR64__(v225.u32[0], v224.u32[0]));
            v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v227.i8, 0);
            v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v228.i8, 0);
            *(float32x2_t *)v57.f32 = vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v233.u32[0], v230.n128_u32[0]), *(float32x2_t *)v57.f32), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v221, 0), (float32x2_t)__PAIR64__(v225.u32[0], v224.u32[0]));
            *(float32x2_t *)v58.f32 = vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v233.u32[0], v230.n128_u32[0]), *(float32x2_t *)v58.f32), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v222, 0), (float32x2_t)__PAIR64__(v225.u32[0], v224.u32[0]));
            v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v229.f32, 0);
            *(float32x2_t *)v59.f32 = vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v233.u32[0], v230.n128_u32[0]), *(float32x2_t *)v59.f32), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v223, 0), (float32x2_t)__PAIR64__(v225.u32[0], v224.u32[0]));
            v60 = (float32x4_t)vdupq_lane_s32((int32x2_t)v230.n128_u64[0], 0);
            v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v233.i8, 0);
            *(float32x2_t *)v60.f32 = vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v233.u32[0], v230.n128_u32[0]), *(float32x2_t *)v60.f32), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v224, 0), (float32x2_t)__PAIR64__(v225.u32[0], v224.u32[0]));
            *(float32x2_t *)v61.f32 = vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v233.u32[0], v230.n128_u32[0]), *(float32x2_t *)v61.f32), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v225, 0), (float32x2_t)__PAIR64__(v225.u32[0], v224.u32[0]));
            a7 = vaddq_f32(v15, *(float32x4_t *)v54);
            a8 = vaddq_f32(v57, a8);
            v62 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v55, *(float *)v227.i32), v56, *(float *)v221.i32), *(float32x4_t *)(v54 + 24));
            a10 = vaddq_f32(v58, a10);
            v63 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v55, *(float *)v228.i32), v56, *(float *)v222.i32), *(float32x4_t *)(v54 + 48));
            v11.i64[0] = vaddq_f32(v59, v11).u64[0];
            v12 = (int32x4_t)vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v55, v229.f32[0]), v56, *(float *)v223.i32), *(float32x4_t *)(v54 + 72));
            v13 = vaddq_f32(v60, v13);
            v64 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v55, v230.n128_f32[0]), v56, *(float *)v224.i32), *(float32x4_t *)(v54 + 96));
            v14.i64[0] = vaddq_f32(v61, (float32x4_t)v14).u64[0];
            v65 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v55, *(float *)v233.i32), v56, *(float *)v225.i32), *(float32x4_t *)(v54 + 120));
            *(float32x4_t *)v54 = a7;
            *(_QWORD *)(v54 + 16) = vaddq_f32((float32x4_t)v34, (float32x4_t)a6).u64[0];
            *(float32x4_t *)(v54 + 24) = v62;
            *(_QWORD *)(v54 + 40) = a8.i64[0];
            *(float32x4_t *)(v54 + 48) = v63;
            *(_QWORD *)(v54 + 64) = a10.i64[0];
            *(int32x4_t *)(v54 + 72) = v12;
            *(_QWORD *)(v54 + 88) = v11.i64[0];
            *(float32x4_t *)(v54 + 96) = v64;
            *(_QWORD *)(v54 + 112) = v13.i64[0];
            *(float32x4_t *)(v54 + 120) = v65;
            *(_QWORD *)(v54 + 136) = v14.i64[0];
            v66 = (float32x4_t *)(*(_QWORD *)v17 + 4 * (*(_DWORD *)(v17 + 28) + 6 * v25));
            a6 = *(__n128 *)v66;
            a7.i64[0] = v66[1].i64[0];
            *(int32x2_t *)a8.f32 = *v39;
            a9 = vdupq_lane_s32(*v39, 1);
            v67 = vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*v39)), v56, (float32x2_t)*v39, 1);
            *(float32x2_t *)v56.f32 = vmla_f32(vmul_n_f32((float32x2_t)__PAIR64__(v233.u32[0], v230.n128_u32[0]), COERCE_FLOAT(*v39)), *(float32x2_t *)a9.i8, (float32x2_t)__PAIR64__(v225.u32[0], v224.u32[0]));
            a5 = vsubq_f32(a7, v56);
            v18 = vsubq_f32(*v66, v67);
            *v66 = v18;
            v66[1].i64[0] = a5.i64[0];
            goto LABEL_4;
          }
          v52 = v53;
        }
LABEL_32:
        v54 = sub_207D9EE6C((unint64_t *)(v17 + 32), (char **)v51, v25, v52);
        goto LABEL_33;
      }
      *(_BYTE *)(v19 + 76) = 0;
      *(_DWORD *)(v19 + 72) = 0;
LABEL_4:
      v19 += 104;
      if (v19 == v20)
      {
        v17 = v261;
        v236 = v260;
        v16 = v258;
        break;
      }
    }
  }
  v68 = *(_QWORD *)(v16 + 120);
  v69 = *(_QWORD *)(v16 + 128);
  if (v68 != v69)
  {
    v70 = 0.5;
    do
    {
      v71 = *(unsigned int **)(v68 + 160);
      if ((v71[1] & 4) != 0)
        v72 = 1;
      else
        v72 = 2;
      if ((v72 & v263) == 0)
        goto LABEL_38;
      v73 = *((unsigned __int8 *)v71 + 20);
      if (*((_BYTE *)v71 + 20))
      {
        v74 = *v71;
        if ((_DWORD)v74 == -1)
          goto LABEL_38;
        v75 = *(_DWORD *)(*v259 + 4 * v74);
        if (*(_QWORD *)(v68 + 144))
          goto LABEL_48;
      }
      else
      {
        v75 = -1;
        if (*(_QWORD *)(v68 + 144))
        {
LABEL_48:
          v76 = *(int32x2_t *)(v68 + 80);
          v77.i32[0] = *(_DWORD *)(v68 + 88);
          v78 = *(int32x2_t *)(v68 + 96);
          v79 = *(float32x2_t *)(v68 + 112);
          v18.i32[0] = *(_DWORD *)(v68 + 120);
          v80 = *(float32x2_t *)(v71 + 8);
          a10.i32[0] = v71[10];
          v81 = *(float32x2_t *)(v71 + 12);
          v11.i32[0] = v71[14];
          v82 = *(float32x2_t *)(v71 + 16);
          v13.i32[0] = v71[18];
          v83 = (float32x2_t)vzip1_s32(v76, v78);
          v84 = (float32x2_t)vzip2_s32(v76, v78);
          v77.i32[1] = *(_DWORD *)(v68 + 104);
          *(float32x2_t *)v242 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v83, v80.f32[0]), v84, v80, 1), v77, a10.f32[0]);
          *(_DWORD *)&v242[8] = vmla_f32(vmla_lane_f32(vmul_f32(v79, v80), (float32x2_t)vdup_lane_s32((int32x2_t)v80, 1), v79, 1), *(float32x2_t *)a10.f32, *(float32x2_t *)v18.f32).u32[0];
          *(_DWORD *)&v242[20] = vmla_f32(vmla_lane_f32(vmul_f32(v79, v81), (float32x2_t)vdup_lane_s32((int32x2_t)v81, 1), v79, 1), *(float32x2_t *)v11.f32, *(float32x2_t *)v18.f32).u32[0];
          *(float32x2_t *)&v242[12] = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v83, v81.f32[0]), v84, v81, 1), v77, v11.f32[0]);
          *(_DWORD *)&v243[8] = vmla_f32(vmla_lane_f32(vmul_f32(v79, v82), (float32x2_t)vdup_lane_s32((int32x2_t)v82, 1), v79, 1), *(float32x2_t *)v13.f32, *(float32x2_t *)v18.f32).u32[0];
          *(float32x2_t *)v243 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v83, v82.f32[0]), v84, v82, 1), v77, v13.f32[0]);
          v252.i64[0] = 0;
          v252.i32[2] = 0;
          sub_207D9EF70((float32x2_t *)v242, v252.f32);
          v87 = v252;
          *(_DWORD *)(v68 + 200) = v252.i32[2];
          *(_QWORD *)(v68 + 192) = v87.i64[0];
          v87.i64[0] = *((_QWORD *)v71 + 10);
          v87.i32[2] = v71[22];
          v88 = (float32x2_t *)(v68 + 192);
          v89.i64[0] = *(_QWORD *)(v68 + 128);
          v89.i32[2] = *(_DWORD *)(v68 + 136);
          v90 = vsubq_f32(v87, v89);
          *(_DWORD *)(v68 + 212) = v90.i32[2];
          *(_QWORD *)(v68 + 204) = v90.i64[0];
          if (*(_BYTE *)(*(_QWORD *)(v68 + 160) + 20))
          {
            *(float32x2_t *)v90.f32 = *v88;
            v90.i32[2] = *(_DWORD *)(v68 + 200);
            v91 = (int8x16_t)vnegq_f32(v90);
            v92 = (float32x2_t)vextq_s8(v91, v91, 8uLL).u64[0];
            v93 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), *v88, 1), v92, v92).f32[0];
            if (v93 >= 0.0061)
            {
              v97 = sqrtf(v93);
              v231 = v93;
              v234 = v91;
              v98 = __sincosf_stret(v97);
              cosval = v98.__cosval;
              v91 = v234;
              v95 = v98.__sinval / v97;
              v94 = (float)(1.0 / v231) * (float)(1.0 - v98.__cosval);
            }
            else
            {
              v94 = v70 - (float)(v93 * (float)((float)(v93 / -720.0) + 0.041667));
              v95 = 1.0 - (float)(v93 * (float)(0.16667 - (float)(v93 * (float)((float)(v93 / -5040.0) + 0.0083333))));
              cosval = 1.0 - (float)(v93 * v94);
            }
            v99 = *(float *)&v91.i32[1] * v94;
            v100 = cosval + (float)(*(float *)v91.i32 * (float)(*(float *)v91.i32 * v94));
            v101 = cosval + (float)(*(float *)&v91.i32[1] * (float)(*(float *)&v91.i32[1] * v94));
            v257 = cosval + (float)(*(float *)&v91.i32[2] * (float)(*(float *)&v91.i32[2] * v94));
            v102 = *(float *)&v91.i32[1] * (float)(*(float *)v91.i32 * v94);
            v103 = *(float *)&v91.i32[2] * (float)(*(float *)v91.i32 * v94);
            v104 = *(float *)&v91.i32[2] * v99;
            v105 = *(float *)v91.i32 * v95;
            v106 = *(float *)&v91.i32[1] * v95;
            v107 = *(float *)&v91.i32[2] * v95;
            v252.f32[0] = v100;
            v252.f32[1] = v102 + v107;
            v255 = v106 + v103;
            v256 = v104 - v105;
            v252.f32[3] = v102 - v107;
            v252.f32[2] = v103 - v106;
            v253 = v101;
            v254 = v105 + v104;
            *(_QWORD *)v242 = 0;
            *(_DWORD *)&v242[8] = 0;
            sub_207D9EF70((float32x2_t *)&v252, (float *)v242);
            v111 = *(int8x16_t *)v242;
            v112 = *(_QWORD *)&v242[4];
            v113 = (float32x2_t)vextq_s8(v111, v111, 8uLL).u64[0];
            v114 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v242, 1), *(float32x2_t *)v242, 1), v113, v113);
            if (v114.f32[0] >= 0.0061)
            {
              v117 = sqrtf(v114.f32[0]);
              v232 = v114;
              v235 = *(_DWORD *)v242;
              v118 = __sincosf_stret(v117);
              v116 = v118.__cosval;
              v114 = v232;
              v111.i32[0] = v235;
              v85.f32[0] = v118.__sinval / v117;
              v115 = (float)(1.0 / v232.f32[0]) * (float)(1.0 - v118.__cosval);
              v108.f32[0] = (float)(1.0 / v232.f32[0]) * (float)(1.0 - (float)(v118.__sinval / v117));
            }
            else
            {
              v115 = v70 - (float)(v114.f32[0] * (float)((float)(v114.f32[0] / -720.0) + 0.041667));
              v108.f32[0] = 0.16667 - (float)(v114.f32[0] * (float)((float)(v114.f32[0] / -5040.0) + 0.0083333));
              v85.f32[0] = 1.0 - (float)(v114.f32[0] * v108.f32[0]);
              v116 = 1.0 - (float)(v114.f32[0] * v115);
            }
            v119 = 0;
            v120 = 0;
            v121 = (float)((float)(v115 * v70) - v108.f32[0]) / v85.f32[0];
            v122 = (float)(v115 + (float)(v85.f32[0] * -0.5)) / (float)(1.0 - v116);
            if (v116 < 0.9)
              v123 = v122;
            else
              v123 = v121;
            v108.f32[0] = 1.0 - (float)(v114.f32[0] * v123);
            v124 = v108.f32[0] + (float)(*(float *)v111.i32 * (float)(*(float *)v111.i32 * v123));
            v125 = *(float *)&v112 * (float)(*(float *)v111.i32 * v123);
            v109.f32[0] = *((float *)&v112 + 1) * (float)(*(float *)v111.i32 * v123);
            v126 = *((float *)&v112 + 1) * (float)(*(float *)&v112 * v123);
            v127 = *(float *)v111.i32 * -0.5;
            *(float *)&v242[12] = v124;
            *(float *)&v242[16] = (float)(*((float *)&v112 + 1) * -0.5) + v125;
            *(float *)&v243[12] = (float)(*(float *)&v112 * -0.5) + v109.f32[0];
            *(float *)&v243[16] = v126 - v127;
            v128 = *(unsigned int **)(v68 + 144);
            LODWORD(v129) = 0;
            *(float *)&v243[4] = v108.f32[0] + (float)(*(float *)&v112 * (float)(*(float *)&v112 * v123));
            HIDWORD(v129) = v128[7];
            *(float *)v243 = v125 - (float)(*((float *)&v112 + 1) * -0.5);
            v110.i32[0] = v128[5];
            v85.i32[0] = v128[6];
            v89.i64[1] = v128[8];
            v108.f32[0] = v108.f32[0] + (float)(*((float *)&v112 + 1) * (float)(*((float *)&v112 + 1) * v123));
            v114.f32[0] = v109.f32[0] - (float)(*(float *)&v112 * -0.5);
            v109.f32[0] = v127 + v126;
            v130 = (float32x2_t)v128[3];
            v13.i32[0] = 0;
            v13.i32[1] = v128[4];
            v237.i32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v242[12], 0), 0, *(float32x2_t *)&v242[12], 1), v114, v110).u32[0];
            *(float32x2_t *)v237.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v130, v124), *(float32x2_t *)v13.f32, *(float32x2_t *)&v242[12], 1), 0, v114.f32[0]);
            *(_DWORD *)&v238[16] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v243, 0), 0, *(float32x2_t *)v243, 1), v109, v110).u32[0];
            *(float32x2_t *)&v238[8] = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v130.u32[0], *(float *)v243), *(float32x2_t *)v13.f32, *(float32x2_t *)v243, 1), 0, v109.f32[0]);
            *(float32x2_t *)v11.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v243[12], 0), 0, *(float32x2_t *)&v243[12], 1), v108, v110);
            v239.i32[2] = v11.i32[0];
            *(float32x2_t *)v239.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v130.u32[0], *(float *)&v243[12]), *(float32x2_t *)v13.f32, *(float32x2_t *)&v243[12], 1), 0, v108.f32[0]);
            do
            {
              *(_DWORD *)&v240[4 * v119 + 8] = 0;
              v131 = v120 < 2;
              if (v120 < 2)
                ++v120;
              else
                v120 = 0;
              if (v131)
                ++v119;
              else
                v119 += 4;
            }
            while (v119 != 18);
            v132 = 0;
            v133 = 0;
            do
            {
              *(_DWORD *)(((unint64_t)&v237 | 0xC) + 4 * v132) = 0;
              v134 = v133 < 2;
              if (v133 < 2)
                ++v133;
              else
                v133 = 0;
              if (v134)
                ++v132;
              else
                v132 += 4;
            }
            while (v132 != 18);
            *(_DWORD *)&v240[28] = v85.i32[2];
            *(_DWORD *)&v241[20] = 0;
            *(_QWORD *)&v240[20] = v85.i64[0];
            *(_QWORD *)&v241[12] = v129;
            *(_DWORD *)&v241[44] = v89.i32[2];
            *(_QWORD *)&v241[36] = 0;
          }
          v135 = *(_QWORD *)(v68 + 144);
          v85.i64[0] = *(_QWORD *)(v68 + 208);
          v89.i64[0] = *(_QWORD *)(v135 + 28);
          *(float32x4_t *)(v68 + 192) = vmulq_f32(*(float32x4_t *)(v68 + 192), *(float32x4_t *)(v135 + 12));
          *(_QWORD *)(v68 + 208) = vmulq_f32(v85, v89).u64[0];
          *(_BYTE *)(v68 + 220) = 1;
          v136 = *(_QWORD *)(v68 + 224);
          if (v136)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 24))(v136, v68 + 192);
            v137 = *(_QWORD *)(v68 + 224);
            v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 16))(v137);
            if (*(_BYTE *)(*(_QWORD *)(v68 + 160) + 20))
            {
              switch(v138)
              {
                case 0:
                  v142 = *(float32x2_t *)(v137 + 28);
                  v143 = *(float32x4_t *)(v137 + 12);
                  v144 = *(float32x2_t *)(v137 + 52);
                  v145 = *(float32x4_t *)(v137 + 36);
                  v146 = *(float32x2_t *)(v137 + 76);
                  v147 = *(float32x4_t *)(v137 + 60);
                  v148 = *(float32x2_t *)(v137 + 100);
                  v11 = *(float32x4_t *)(v137 + 84);
                  v149 = *(float32x2_t *)(v137 + 124);
                  v150 = *(float32x4_t *)(v137 + 108);
                  v151 = *(float32x2_t *)(v137 + 148);
                  v13 = *(float32x4_t *)(v137 + 132);
                  v152 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v237.f32[0]), v145, *(float32x2_t *)v237.f32, 1), v147, v237, 2), v11, v237, 3), v150, *(float *)v238), v13, *(float32x2_t *)v238, 1);
                  v153 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(v142, v237.f32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v237.f32, 1), v144), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v237, 2), v146), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v237, 3), v148), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v238, 0), v149), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v238, 1), v151);
                  v154 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, *(float *)&v238[8]), v145, *(float32x2_t *)&v238[8], 1), v147, *(float32x4_t *)&v238[8], 2), v11, *(float32x4_t *)&v238[8], 3), v150, *(float *)&v238[24]), v13, *(float32x2_t *)&v238[24], 1);
                  v155 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(v142, *(float *)&v238[8]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[8], 1), v144), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v238[8], 2), v146), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v238[8], 3), v148), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[24], 0), v149), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[24], 1), v151);
                  v86 = (int32x4_t)vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v239.f32[0]), v145, *(float32x2_t *)v239.f32, 1), v147, v239, 2), v11, v239, 3), v150, *(float *)v240), v13, *(float32x2_t *)v240, 1);
                  v156 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(v142, v239.f32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v239.f32, 1), v144), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v239, 2), v146), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v239, 3), v148), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v240, 0), v149), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v240, 1), v151);
                  v157 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, *(float *)&v240[8]), v145, *(float32x2_t *)&v240[8], 1), v147, *(float32x4_t *)&v240[8], 2), v11, *(float32x4_t *)&v240[8], 3), v150, *(float *)&v240[24]), v13, *(float32x2_t *)&v240[24], 1);
                  v158 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(v142, *(float *)&v240[8]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[8], 1), v144), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v240[8], 2), v146), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v240[8], 3), v148), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[24], 0), v149), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[24], 1), v151);
                  v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v241[16], 1);
                  v159 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, *(float *)v241), v145, *(float32x2_t *)v241, 1), v147, *(float32x4_t *)v241, 2), v11, *(float32x4_t *)v241, 3), v150, *(float *)&v241[16]), v13, *(float32x2_t *)&v241[16], 1);
                  v160 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(v142, *(float *)v241), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v241, 1), v144), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v241, 2), v146), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v241, 3), v148), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[16], 0), v149), *(float32x2_t *)v10.f32, v151);
                  v161 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, *(float *)&v241[24]), v145, *(float32x2_t *)&v241[24], 1), v147, *(float32x4_t *)&v241[24], 2), v11, *(float32x4_t *)&v241[24], 3);
                  v11.i64[0] = vdupq_lane_s32(*(int32x2_t *)&v241[40], 0).u64[0];
                  v237 = v152;
                  *(float32x2_t *)v238 = v153;
                  *(float32x4_t *)&v238[8] = v154;
                  *(float32x2_t *)&v238[24] = v155;
                  v239 = (float32x4_t)v86;
                  *(float32x2_t *)v240 = v156;
                  *(float32x4_t *)&v240[8] = v157;
                  *(float32x2_t *)&v240[24] = v158;
                  *(float32x4_t *)v241 = v159;
                  *(float32x2_t *)&v241[16] = v160;
                  v162 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(v142, *(float *)&v241[24]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[24], 1), v144), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v241[24], 2), v146), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v241[24], 3), v148), *(float32x2_t *)v11.f32, v149), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[40], 1), v151);
                  *(float32x4_t *)&v241[24] = vmlaq_lane_f32(vmlaq_n_f32(v161, v150, *(float *)&v241[40]), v13, *(float32x2_t *)&v241[40], 1);
                  *(float32x2_t *)&v241[40] = v162;
                  break;
                case 1:
                  v139.i64[0] = *(_QWORD *)(v137 + 28);
                  v163 = *(float32x4_t *)(v137 + 12);
                  v164.i64[1] = *(_QWORD *)&v241[40];
                  v140.i64[0] = *(_QWORD *)v238;
                  v11.i64[0] = *(_QWORD *)&v238[24];
                  *(_QWORD *)&v165 = vmulq_f32(v140, v139).u64[0];
                  v166 = vmulq_f32(v237, v163);
                  v167 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v238[8], v163);
                  *((_QWORD *)&v165 + 1) = v167.i64[0];
                  v168 = vextq_s8(v167, (int8x16_t)vmulq_f32(v11, v139), 8uLL);
                  v13.i64[0] = *(_QWORD *)v240;
                  v141.i64[0] = *(_QWORD *)&v240[24];
                  v13.i64[0] = vmulq_f32(v13, v139).u64[0];
                  v169 = vmulq_f32(v239, v163);
                  v170 = (int8x16_t)vmulq_f32(v141, v139);
                  v171 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v240[8], v163);
                  v13.i64[1] = v171.i64[0];
                  v11 = (float32x4_t)vextq_s8(v171, v170, 8uLL);
                  v170.i64[0] = *(_QWORD *)&v241[16];
                  v170.i64[0] = vmulq_f32((float32x4_t)v170, v139).u64[0];
                  v172 = vmulq_f32(*(float32x4_t *)v241, v163);
                  *(float32x4_t *)&v240[16] = v11;
                  v164.i64[0] = *(_QWORD *)&v241[40];
                  v173 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v241[24], v163);
                  v170.i64[1] = v173.i64[0];
                  v239 = v169;
                  *(float32x4_t *)v240 = v13;
                  *(_OWORD *)v238 = v165;
                  *(int8x16_t *)&v238[16] = v168;
                  v237 = v166;
                  *(int8x16_t *)&v241[16] = v170;
                  *(int8x16_t *)&v241[32] = vextq_s8(v173, (int8x16_t)vmulq_f32(v164, v139), 8uLL);
                  *(float32x4_t *)v241 = v172;
                  break;
                case 2:
                  v174 = *(float *)(v137 + 12);
                  v11 = vmulq_n_f32(*(float32x4_t *)&v241[16], v174);
                  v237 = vmulq_n_f32(v237, v174);
                  *(float32x4_t *)v238 = vmulq_n_f32(*(float32x4_t *)v238, v174);
                  *(float32x4_t *)&v238[16] = vmulq_n_f32(*(float32x4_t *)&v238[16], v174);
                  v239 = vmulq_n_f32(v239, v174);
                  *(float32x4_t *)v240 = vmulq_n_f32(*(float32x4_t *)v240, v174);
                  *(float32x4_t *)&v240[16] = vmulq_n_f32(*(float32x4_t *)&v240[16], v174);
                  *(float32x4_t *)v241 = vmulq_n_f32(*(float32x4_t *)v241, v174);
                  *(float32x4_t *)&v241[16] = v11;
                  *(float32x4_t *)&v241[32] = vmulq_n_f32(*(float32x4_t *)&v241[32], v174);
                  break;
                case 4:
                  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v137 + 56))(v242, v137);
                  v175 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v242[16], v237.f32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v237.f32, 1), *(float32x2_t *)&v243[16]), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v237, 2), v245), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v237, 3), v247), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v238, 0), v249), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v238, 1), v251);
                  v176 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v242[16], *(float *)&v238[8]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[8], 1), *(float32x2_t *)&v243[16]), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v238[8], 2), v245), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v238[8], 3), v247), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[24], 0), v249), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[24], 1), v251);
                  v86 = (int32x4_t)vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v242, v239.f32[0]), *(float32x4_t *)v243, *(float32x2_t *)v239.f32, 1), v244, v239, 2), v246, v239, 3), v248, *(float *)v240), v250, *(float32x2_t *)v240, 1);
                  v177 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v242[16], v239.f32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v239.f32, 1), *(float32x2_t *)&v243[16]), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v239, 2), v245), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v239, 3), v247), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v240, 0), v249), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v240, 1), v251);
                  v178 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v242[16], *(float *)&v240[8]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[8], 1), *(float32x2_t *)&v243[16]), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v240[8], 2), v245), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v240[8], 3), v247), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[24], 0), v249), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[24], 1), v251);
                  v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v241[16], 1);
                  v179 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v242[16], *(float *)v241), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v241, 1), *(float32x2_t *)&v243[16]), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v241, 2), v245), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v241, 3), v247), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[16], 0), v249), *(float32x2_t *)v10.f32, v251);
                  v11.i64[0] = vdupq_laneq_s32(*(int32x4_t *)&v241[24], 2).u64[0];
                  v13.i64[0] = vdupq_lane_s32(*(int32x2_t *)&v241[40], 0).u64[0];
                  v237 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v242, v237.f32[0]), *(float32x4_t *)v243, *(float32x2_t *)v237.f32, 1), v244, v237, 2), v246, v237, 3), v248, *(float *)v238), v250, *(float32x2_t *)v238, 1);
                  *(float32x2_t *)v238 = v175;
                  *(float32x4_t *)&v238[8] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v242, *(float *)&v238[8]), *(float32x4_t *)v243, *(float32x2_t *)&v238[8], 1), v244, *(float32x4_t *)&v238[8], 2), v246, *(float32x4_t *)&v238[8], 3), v248, *(float *)&v238[24]), v250, *(float32x2_t *)&v238[24], 1);
                  *(float32x2_t *)&v238[24] = v176;
                  v239 = (float32x4_t)v86;
                  *(float32x2_t *)v240 = v177;
                  *(float32x4_t *)&v240[8] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v242, *(float *)&v240[8]), *(float32x4_t *)v243, *(float32x2_t *)&v240[8], 1), v244, *(float32x4_t *)&v240[8], 2), v246, *(float32x4_t *)&v240[8], 3), v248, *(float *)&v240[24]), v250, *(float32x2_t *)&v240[24], 1);
                  *(float32x2_t *)&v240[24] = v178;
                  *(float32x4_t *)v241 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v242, *(float *)v241), *(float32x4_t *)v243, *(float32x2_t *)v241, 1), v244, *(float32x4_t *)v241, 2), v246, *(float32x4_t *)v241, 3), v248, *(float *)&v241[16]), v250, *(float32x2_t *)&v241[16], 1);
                  *(float32x2_t *)&v241[16] = v179;
                  v180 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v242[16], *(float *)&v241[24]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[24], 1), *(float32x2_t *)&v243[16]), *(float32x2_t *)v11.f32, v245), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v241[24], 3), v247), *(float32x2_t *)v13.f32, v249), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[40], 1), v251);
                  *(float32x4_t *)&v241[24] = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v242, *(float *)&v241[24]), *(float32x4_t *)v243, *(float32x2_t *)&v241[24], 1), v244, *(float32x4_t *)&v241[24], 2), v246, *(float32x4_t *)&v241[24], 3), v248, *(float *)&v241[40]), v250, *(float32x2_t *)&v241[40], 1);
                  *(float32x2_t *)&v241[40] = v180;
                  break;
                default:
                  break;
              }
            }
          }
          *(_OWORD *)(v68 + 168) = *(_OWORD *)v88->f32;
          *(_QWORD *)(v68 + 184) = *(_QWORD *)(v68 + 208);
          v18.i64[0] = *(_QWORD *)(v68 + 208);
          v181 = *(int8x16_t *)(v68 + 192);
          v182 = (float32x2_t)vextq_s8(v181, v181, 8uLL).u64[0];
          *(float32x2_t *)a10.f32 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v181.i8, *(float32x2_t *)v181.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v181.i8, 1), *(float32x2_t *)v181.i8, 1), v182, v182), (float32x2_t)vdup_laneq_s32((int32x4_t)v181, 3), (float32x4_t)v181, 3), *(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 1), *(float32x2_t *)v18.f32, 1);
          *(float *)(v68 + 216) = *(float *)(v236 + 12) * a10.f32[0];
          if (!v73)
            goto LABEL_38;
          v183 = *(_QWORD *)(v17 + 120) + 24 * v75;
          v185 = *(char **)v183;
          v184 = *(char **)(v183 + 8);
          if (*(char **)v183 != v184)
          {
            while (*(_DWORD *)v185 < v75)
            {
              v185 += 16;
              if (v185 == v184)
                goto LABEL_91;
            }
          }
          if (v185 != v184)
          {
            if (*(_DWORD *)v185 == v75)
            {
              v186 = *(_QWORD *)(v17 + 48) + 4 * *((_QWORD *)v185 + 1);
LABEL_92:
              v11.i64[1] = *(_QWORD *)&v238[8];
              v10.i64[0] = *(_QWORD *)&v238[24];
              v86.i64[0] = *(_QWORD *)&v240[24];
              v187.i64[1] = *(_QWORD *)&v241[8];
              v188 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v241, 2);
              v189 = (float32x2_t)__PAIR64__(*(unsigned int *)&v241[32], v188.u32[0]);
              v190 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v241, 3);
              v191 = (float32x2_t)__PAIR64__(*(unsigned int *)&v241[36], v190.u32[0]);
              v192.i64[0] = vuzp2q_s32(vuzp2q_s32((int32x4_t)v237, *(int32x4_t *)&v238[8]), (int32x4_t)v237).u64[0];
              v193.i64[0] = vzip1q_s32((int32x4_t)v237, *(int32x4_t *)&v238[8]).u64[0];
              v193.i64[1] = __PAIR64__(*(unsigned int *)&v240[8], v239.u32[0]);
              v194.i64[0] = vtrn2q_s32((int32x4_t)v237, *(int32x4_t *)&v238[8]).u64[0];
              v194.i64[1] = __PAIR64__(*(unsigned int *)&v240[12], v239.u32[1]);
              v195.i64[0] = vzip2q_s32((int32x4_t)v237, *(int32x4_t *)&v238[8]).u64[0];
              v195.i64[1] = __PAIR64__(*(unsigned int *)&v240[16], v239.u32[2]);
              v192.i64[1] = __PAIR64__(*(unsigned int *)&v240[20], v239.u32[3]);
              a10.i64[0] = vzip1q_s32(*(int32x4_t *)v238, (int32x4_t)v10).u64[0];
              v196 = (int8x16_t)vzip1q_s32(*(int32x4_t *)v240, v86);
              a10.i64[1] = vextq_s8(*(int8x16_t *)v240, v196, 8uLL).i64[1];
              v197 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v238, 0);
              v198.i64[0] = vtrn2q_s32(*(int32x4_t *)v238, (int32x4_t)v10).u64[0];
              v198.i64[1] = v196.i64[1];
              *(int32x2_t *)v11.f32 = vzip1_s32(*(int32x2_t *)v241, *(int32x2_t *)&v241[24]);
              v199 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v241, 1).u64[0];
              v200 = (float32x2_t)__PAIR64__(*(unsigned int *)&v241[28], v199.u32[0]);
              v201 = (float32x2_t)vzip1_s32(*(int32x2_t *)&v241[16], *(int32x2_t *)&v241[40]);
              v202 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&v241[16], 1).u64[0];
              v203 = (float32x2_t)__PAIR64__(*(unsigned int *)&v241[44], v202.u32[0]);
              *(float32x2_t *)v196.i8 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v11.f32, v237.f32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v237.f32, 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[28], v199.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v237, 2), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[32], v188.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v237, 3), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[36], v190.u32[0])), *(float32x2_t *)v197.f32, v201), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v238, 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[44], v202.u32[0]));
              v204 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v238[8], 3);
              *(float32x2_t *)v197.f32 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v11.f32, *(float *)&v238[8]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[8], 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[28], v199.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v238[8], 2), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[32], v188.u32[0])), *(float32x2_t *)v204.f32, (float32x2_t)__PAIR64__(*(unsigned int *)&v241[36], v190.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[24], 0), v201), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v238[24], 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[44], v202.u32[0]));
              v10 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, v239.f32[0]), v194, *(float32x2_t *)v239.f32, 1), v195, v239, 2), v192, v239, 3), a10, *(float *)v240), v198, *(float32x2_t *)v240, 1);
              v205 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v240, 1);
              *(float32x2_t *)v204.f32 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v11.f32, v239.f32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v239.f32, 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[28], v199.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v239, 2), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[32], v188.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v239, 3), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[36], v190.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v240, 0), v201), *(float32x2_t *)v205.f32, (float32x2_t)__PAIR64__(*(unsigned int *)&v241[44], v202.u32[0]));
              v206 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v240[24], 0);
              v207 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, *(float *)&v240[8]), v194, *(float32x2_t *)&v240[8], 1), v195, *(float32x4_t *)&v240[8], 2), v192, *(float32x4_t *)&v240[8], 3), a10, *(float *)&v240[24]), v198, *(float32x2_t *)&v240[24], 1);
              *(float32x2_t *)v205.f32 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v11.f32, *(float *)&v240[8]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[8], 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[28], v199.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v240[8], 2), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[32], v188.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v240[8], 3), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[36], v190.u32[0])), *(float32x2_t *)v206.f32, v201), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v240[24], 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[44], v202.u32[0]));
              *(float32x2_t *)v187.f32 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v11.f32, *(float *)v241), v199, (float32x2_t)__PAIR64__(*(unsigned int *)&v241[28], v199.u32[0])), *(float32x2_t *)v188.f32, (float32x2_t)__PAIR64__(*(unsigned int *)&v241[32], v188.u32[0])), *(float32x2_t *)v190.f32, (float32x2_t)__PAIR64__(*(unsigned int *)&v241[36], v190.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[16], 0), v201), v202, (float32x2_t)__PAIR64__(*(unsigned int *)&v241[44], v202.u32[0]));
              v208 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v241[40], 0);
              *(float32x2_t *)v188.f32 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v11.f32, *(float *)&v241[24]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[24], 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[28], v199.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v241[24], 2), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[32], v188.u32[0])), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)&v241[24], 3), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[36], v190.u32[0])), *(float32x2_t *)v208.f32, v201), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v241[40], 1), (float32x2_t)__PAIR64__(*(unsigned int *)&v241[44], v202.u32[0]));
              v208.i64[0] = *(_QWORD *)(v186 + 16);
              v208.i64[0] = vaddq_f32(v208, (float32x4_t)v196).u64[0];
              v209 = vaddq_f32(*(float32x4_t *)(v186 + 24), vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, *(float *)&v238[8]), v194, *(float32x2_t *)&v238[8], 1), v195, *(float32x4_t *)&v238[8], 2), v192, *(float32x4_t *)&v238[8], 3), a10, *(float *)&v238[24]), v198, *(float32x2_t *)&v238[24], 1));
              v190.i64[0] = *(_QWORD *)(v186 + 40);
              v210 = vaddq_f32(*(float32x4_t *)(v186 + 48), v10);
              v206.i64[0] = *(_QWORD *)(v186 + 64);
              v211 = vaddq_f32(*(float32x4_t *)(v186 + 72), v207);
              v207.i64[0] = *(_QWORD *)(v186 + 88);
              v205.i64[0] = vaddq_f32(v207, v205).u64[0];
              v212 = *(float32x4_t *)(v186 + 96);
              v213 = vaddq_f32(v212, vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, *(float *)v241), v194, *(float32x2_t *)v241, 1), v195, *(float32x4_t *)v241, 2), v192, *(float32x4_t *)v241, 3), a10, *(float *)&v241[16]), v198, *(float32x2_t *)&v241[16], 1));
              v212.i64[0] = *(_QWORD *)(v186 + 112);
              v187.i64[0] = vaddq_f32(v212, v187).u64[0];
              v214 = *(float32x4_t *)(v186 + 120);
              v215 = vaddq_f32(v214, vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, *(float *)&v241[24]), v194, *(float32x2_t *)&v241[24], 1), v195, *(float32x4_t *)&v241[24], 2), v192, *(float32x4_t *)&v241[24], 3), a10, *(float *)&v241[40]), v198,
                         *(float32x2_t *)&v241[40],
                         1));
              v214.i64[0] = *(_QWORD *)(v186 + 136);
              *(float32x4_t *)v186 = vaddq_f32(*(float32x4_t *)v186, vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, v237.f32[0]), v194, *(float32x2_t *)v237.f32, 1), v195, v237, 2), v192, v237, 3), a10, *(float *)v238), v198,
                                         *(float32x2_t *)v238,
                                         1));
              *(_QWORD *)(v186 + 16) = v208.i64[0];
              *(float32x4_t *)(v186 + 24) = v209;
              *(_QWORD *)(v186 + 40) = vaddq_f32(v190, v197).u64[0];
              *(float32x4_t *)(v186 + 48) = v210;
              *(_QWORD *)(v186 + 64) = vaddq_f32(v206, v204).u64[0];
              *(float32x4_t *)(v186 + 72) = v211;
              *(_QWORD *)(v186 + 88) = v205.i64[0];
              *(float32x4_t *)(v186 + 96) = v213;
              *(_QWORD *)(v186 + 112) = v187.i64[0];
              *(float32x4_t *)(v186 + 120) = v215;
              *(_QWORD *)(v186 + 136) = vaddq_f32(v214, v188).u64[0];
              v13 = *(float32x4_t *)v88->f32;
              *(float32x2_t *)v11.f32 = vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v11.f32, COERCE_FLOAT(*(_OWORD *)v88->f32)), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)*v88, 1), v200), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v88->f32, 2), v189), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v88->f32, 3), v191);
              v216 = *(float32x2_t *)(v68 + 208);
              v217 = vmlaq_lane_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, COERCE_FLOAT(*(_OWORD *)v88->f32)), v194, *v88, 1), v195, *(float32x4_t *)v88->f32, 2), v192, *(float32x4_t *)v88->f32, 3), a10, v216.f32[0]), v198, v216, 1);
              *(float32x2_t *)v11.f32 = vmla_f32(vmla_f32(*(float32x2_t *)v11.f32, (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v216, 0), v201), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v216, 1), v203);
              v218 = (float32x4_t *)(*(_QWORD *)v17 + 4 * (*(_DWORD *)(v17 + 28) + 6 * v75));
              v219 = *v218;
              v18 = vsubq_f32(*v218, v217);
              v219.i64[0] = v218[1].i64[0];
              *v218 = v18;
              v218[1].i64[0] = vsubq_f32(v219, v11).u64[0];
              v70 = 0.5;
              goto LABEL_38;
            }
            v184 = v185;
          }
LABEL_91:
          v186 = sub_207D9EE6C((unint64_t *)(v17 + 32), (char **)v183, v75, v184);
          goto LABEL_92;
        }
      }
      *(_BYTE *)(v68 + 220) = 0;
      *(_DWORD *)(v68 + 216) = 0;
LABEL_38:
      v68 += 248;
    }
    while (v68 != v69);
  }
  std::mutex::~mutex(&v264);
}

void sub_207D9EE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::~mutex(a10);
  _Unwind_Resume(a1);
}

void sub_207D9EE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::~mutex(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_207D9EE6C(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 4
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    LODWORD(v18) = 0;
    sub_207D89350(a1 + 2, v15, 0x24uLL, (const float *)&v18);
    v14 = a1[3] - 144;
  }
  v16 = (v14 - *v9) >> 2;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_207D89100(a2, a4, &v18);
  return v14;
}

void sub_207D9EF70(float32x2_t *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v4 = (float)(a1[2].f32[1] - a1[3].f32[1]) * 0.5;
  *a2 = v4;
  v5 = (float)(a1[3].f32[0] - a1[1].f32[0]) * 0.5;
  a2[1] = v5;
  v6 = (float)(a1->f32[1] - a1[1].f32[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f32[0];
  v8 = a1[2].f32[0];
  v9 = a1[4].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
    }
    *a2 = v4 * v16;
    a2[1] = v5 * v16;
    a2[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      a2[2] = v33;
      v34.i32[0] = a1[1].i32[0];
      v34.i32[1] = a1[2].i32[1];
      *(float32x2_t *)a2 = vmul_n_f32(vmul_n_f32(vadd_f32(a1[3], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      a2[1] = v27;
      v28 = 1.0 / v27;
      v29 = a1[3].f32[1] + a1[2].f32[1];
      *a2 = v28 * (float)(v26 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(a1[3].f32[0] + a1[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      a2[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(a1[3].f32[1] + a1[2].f32[1]));
      *a2 = v31 * v23;
      a2[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v4 < 0.0)
        v24 = -v24;
      *a2 = v24;
      v25 = 1.0 / v24;
      a2[1] = v25 * (float)(v22 * (float)(a1[1].f32[1] + a1->f32[1]));
      a2[2] = v25 * v23;
    }
  }
}

uint64_t sub_207D9F280(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  unsigned int *v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  unsigned int v60;
  __n128 *v61;
  __n128 *v62;
  __n128 *v63;
  uint64_t v64;
  const std::nothrow_t *v65;
  char *v66;
  BOOL v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  void **v80;

  if (!*(_BYTE *)(a1 + 170))
  {
    if (!*(_BYTE *)(a1 + 169))
      *(_BYTE *)(a1 + 169) = *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 208);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_95:
      *(_BYTE *)(a1 + 170) = 1;
      return a1 + 176;
    }
    v2 = *(void **)(a1 + 248);
    *(_QWORD *)(a1 + 256) = v2;
    v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    v4 = v3 >> 4;
    if (v3 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 264) - (_QWORD)v2) >> 2))
    {
      if (v3 < 0)
        sub_207CA420C();
      v5 = (char *)operator new((unint64_t)v3 >> 2);
      *(_QWORD *)(a1 + 248) = v5;
      *(_QWORD *)(a1 + 256) = v5;
      *(_QWORD *)(a1 + 264) = &v5[4 * v4];
      if (v2)
        operator delete(v2);
    }
    v6 = *(_QWORD *)(a1 + 96);
    for (i = *(_QWORD *)(a1 + 104); v6 != i; v6 += 104)
    {
      v8 = *(_QWORD *)(v6 + 48);
      if (*(_BYTE *)(v6 + 96) || (*(_BYTE *)(v8 + 4) & 6) != 0)
      {
        *(_BYTE *)(v6 + 96) = 1;
        sub_207D8B464(a1 + 248, v8);
      }
    }
    v9 = *(_QWORD *)(a1 + 120);
    for (j = *(_QWORD *)(a1 + 128); v9 != j; v9 += 248)
    {
      v11 = *(_QWORD *)(v9 + 160);
      if (*(_BYTE *)(v9 + 240) || (*(_BYTE *)(v11 + 4) & 6) != 0)
      {
        *(_BYTE *)(v9 + 240) = 1;
        sub_207D8B464(a1 + 248, v11);
      }
    }
    v12 = *(_QWORD *)(a1 + 200);
    v13 = *(_QWORD *)(a1 + 208);
    v80 = (void **)(a1 + 200);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v15 = *(unsigned int **)(a1 + 248);
    v14 = *(unsigned int **)(a1 + 256);
    v77 = v12;
    v78 = (v13 - v12) >> 2;
    v16 = v78 + v14 - v15;
    v17 = *(_BYTE **)(a1 + 200);
    v76 = v13;
    if (v16 <= (uint64_t)(*(_QWORD *)(a1 + 216) - (_QWORD)v17) >> 2)
    {
LABEL_35:
      if (v15 != v14)
      {
        v79 = v14;
        while (1)
        {
          v33 = *v15;
          v35 = *(unsigned int **)a1;
          v34 = *(unsigned int **)(a1 + 8);
          if (v34 != *(unsigned int **)a1)
          {
            v36 = ((uint64_t)v34 - *(_QWORD *)a1) >> 4;
            do
            {
              v37 = v36 >> 1;
              v38 = &v35[4 * (v36 >> 1)];
              v40 = *v38;
              v39 = v38 + 4;
              v36 += ~(v36 >> 1);
              if (v40 < v33)
                v35 = v39;
              else
                v36 = v37;
            }
            while (v36);
          }
          if (v35 == v34 || *v35 != v33)
          {
            v33 = *v34;
            v35 = *(unsigned int **)(a1 + 8);
          }
          if ((*(_BYTE *)(*((_QWORD *)v35 + 1) + 4) & 6) != 0)
            goto LABEL_39;
          v42 = *(char **)(a1 + 208);
          v41 = *(_QWORD *)(a1 + 216);
          if ((unint64_t)v42 >= v41)
            break;
          *(_DWORD *)v42 = v33;
          v32 = (uint64_t)(v42 + 4);
LABEL_38:
          *(_QWORD *)(a1 + 208) = v32;
          *(_BYTE *)(*((_QWORD *)v35 + 1) + 4) ^= 2u;
LABEL_39:
          if (++v15 == v14)
            goto LABEL_71;
        }
        v43 = (char *)*v80;
        v44 = v42 - (_BYTE *)*v80;
        v45 = v44 >> 2;
        v46 = (v44 >> 2) + 1;
        if (v46 >> 62)
          goto LABEL_97;
        v47 = v41 - (_QWORD)v43;
        if (v47 >> 1 > v46)
          v46 = v47 >> 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          if (v48 >> 62)
            sub_207CA3AB8();
          v49 = operator new(4 * v48);
          v50 = (unsigned int *)&v49[4 * v45];
          *v50 = v33;
          v32 = (uint64_t)(v50 + 1);
          v51 = v42 - v43;
          if (v42 == v43)
            goto LABEL_68;
        }
        else
        {
          v49 = 0;
          v50 = (unsigned int *)(4 * v45);
          *(_DWORD *)(4 * v45) = v33;
          v32 = 4 * v45 + 4;
          v51 = v42 - v43;
          if (v42 == v43)
          {
LABEL_68:
            *(_QWORD *)(a1 + 200) = v50;
            *(_QWORD *)(a1 + 208) = v32;
            *(_QWORD *)(a1 + 216) = &v49[4 * v48];
            if (v43)
              operator delete(v43);
            v14 = v79;
            goto LABEL_38;
          }
        }
        v52 = v51 - 4;
        if (v52 < 0x2C)
          goto LABEL_102;
        if ((unint64_t)(v42 - v49 - v44) < 0x20)
          goto LABEL_102;
        v53 = (v52 >> 2) + 1;
        v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
        v55 = &v42[-v54];
        v50 = (unsigned int *)((char *)v50 - v54);
        v56 = &v49[4 * v45 - 16];
        v57 = v42 - 16;
        v58 = v53 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 8;
        }
        while (v58);
        v42 = v55;
        if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_102:
          do
          {
            v60 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *--v50 = v60;
          }
          while (v42 != v43);
        }
        goto LABEL_68;
      }
LABEL_71:
      if (v76 != v77)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v61 = *(__n128 **)(a1 + 200);
        v62 = *(__n128 **)(a1 + 208);
        v63 = (__n128 *)((char *)v61 + 4 * v78);
        if (((char *)v62 - (char *)v63) >> 2 >= v78)
          v64 = v78;
        else
          v64 = ((char *)v62 - (char *)v63) >> 2;
        if (v64 < 1)
        {
LABEL_79:
          sub_207D8B5FC(v61, v63, v62, v78, ((char *)v62 - (char *)v63) >> 2, 0, 0);
        }
        else
        {
          v65 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v66 = (char *)operator new(4 * v64, v65);
            if (v66)
              break;
            v67 = (unint64_t)v64 > 1;
            v64 = (unint64_t)v64 >> 1;
            if (!v67)
              goto LABEL_79;
          }
          v68 = v66;
          sub_207D8B5FC(v61, v63, v62, v78, ((char *)v62 - (char *)v63) >> 2, v66, v64);
          operator delete(v68);
        }
      }
      v69 = *(_QWORD *)(a1 + 96);
      v70 = *(_QWORD *)(a1 + 104);
      while (v69 != v70)
      {
        v71 = *(_QWORD *)(v69 + 48);
        if (*(_BYTE *)(v69 + 96) || (*(_BYTE *)(v71 + 4) & 6) != 0)
          ++*(_DWORD *)(v71 + 8);
        v69 += 104;
      }
      v72 = *(_QWORD *)(a1 + 120);
      v73 = *(_QWORD *)(a1 + 128);
      while (v72 != v73)
      {
        v74 = *(_QWORD *)(v72 + 160);
        if (*(_BYTE *)(v72 + 240) || (*(_BYTE *)(v74 + 4) & 6) != 0)
          ++*(_DWORD *)(v74 + 8);
        v72 += 248;
      }
      goto LABEL_95;
    }
    if (v16 >> 62)
LABEL_97:
      sub_207CA420C();
    v18 = *(_BYTE **)(a1 + 208);
    v19 = (char *)operator new(4 * v16);
    v20 = v18 - v17;
    v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    v22 = v21;
    if (v18 != v17)
    {
      if ((unint64_t)(v20 - 4) < 0x2C)
      {
        v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_32:
          v31 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v22 - 1) = v31;
          v22 -= 4;
        }
        while (v18 != v17);
        goto LABEL_33;
      }
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v18[-(v20 & 0xFFFFFFFFFFFFFFFCLL)] - v19) < 0x20)
        goto LABEL_32;
      v23 = v20 >> 2;
      v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
      v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
      v26 = &v18[-v25];
      v22 = &v21[-v25];
      v27 = &v19[4 * v23 - 16];
      v28 = (__int128 *)(v18 - 16);
      v29 = v24 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30 = *v28;
        *((_OWORD *)v27 - 1) = *(v28 - 1);
        *(_OWORD *)v27 = v30;
        v27 -= 32;
        v28 -= 2;
        v29 -= 8;
      }
      while (v29);
      v18 = v26;
      if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_32;
    }
LABEL_33:
    *(_QWORD *)(a1 + 200) = v22;
    *(_QWORD *)(a1 + 208) = v21;
    *(_QWORD *)(a1 + 216) = &v19[4 * v16];
    if (v17)
    {
      operator delete(v17);
      v15 = *(unsigned int **)(a1 + 248);
      v14 = *(unsigned int **)(a1 + 256);
    }
    goto LABEL_35;
  }
  return a1 + 176;
}

void sub_207D9F818(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207DA0BF4(v1);
  _Unwind_Resume(a1);
}

void sub_207D9F82C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207DA0BF4(v1);
  _Unwind_Resume(a1);
}

void sub_207D9F840(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207DA0BF4(v1);
  _Unwind_Resume(a1);
}

void sub_207D9F854(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207DA0BF4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D9F868(uint64_t a1, char **a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;

  sub_207D8BBF8(a1, 0);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v4 = *(_BYTE **)(a1 + 152);
  if (*(_QWORD *)(a1 + 168) - (_QWORD)v4 > 0xFFuLL)
    goto LABEL_12;
  v5 = *(_BYTE **)(a1 + 160);
  v6 = (char *)operator new(0x100uLL);
  v7 = v5 - v4;
  v8 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
  v9 = v8;
  if (v5 != v4)
  {
    if ((unint64_t)(v7 - 4) < 0x2C)
    {
      v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v18 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v9 - 1) = v18;
        v9 -= 4;
      }
      while (v5 != v4);
      goto LABEL_10;
    }
    v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
    if (v5 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v10 = v7 >> 2;
    v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
    v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    v13 = &v5[-v12];
    v9 = &v8[-v12];
    v14 = &v6[4 * v10 - 16];
    v15 = (__int128 *)(v5 - 16);
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    v5 = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 168) = v6 + 256;
  if (v4)
    operator delete(v4);
LABEL_12:
  if ((char **)(a1 + 152) != a2)
    sub_207CB9D2C((_QWORD *)(a1 + 152), *a2, a2[1], (a2[1] - *a2) >> 2);
  v19 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32, v19, v19);
  *(_QWORD *)(a1 + 24) = v19;
  v21 = (6 * v19);
  *(_DWORD *)(a1 + 16) = v21;
  if (*(_QWORD *)(a1 + 8) < v21)
  {
    if (*(_QWORD *)a1)
      operator delete[](*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = ((4 * v21 + 31) & 0x7FFFFFFE0) >> 2;
    result = MEMORY[0x20BD028B4]();
    *(_QWORD *)a1 = result;
  }
  return result;
}

uint64_t sub_207D9FA1C(uint64_t result, uint64_t a2, char **a3, _QWORD *a4)
{
  uint64_t v6;
  unsigned int **v7;
  char *v9;
  char *v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  _DWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  __int128 *v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t **v72;
  void *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  unsigned int *v95;
  uint64_t v96;
  unint64_t **v97;
  unint64_t *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;

  v6 = a2;
  v7 = (unsigned int **)(result + 152);
  v103 = result;
  if ((char **)(result + 152) != a3)
  {
    sub_207CB9D2C(a3, *(char **)(result + 152), *(char **)(result + 160), (uint64_t)(*(_QWORD *)(result + 160) - *(_QWORD *)(result + 152)) >> 2);
    v6 = a2;
    result = v103;
  }
  v9 = *a3;
  v10 = a3[1];
  v11 = *(unsigned int **)(v6 + 152);
  v12 = *(unsigned int **)(v6 + 160);
  v13 = *a3 == v10 || v11 == v12;
  v14 = *a3;
  if (!v13)
  {
    v14 = *a3;
    v15 = *a3;
    do
    {
      v16 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 >= *v11)
      {
        if (*v11 >= v16)
        {
          *(_DWORD *)v14 = v16;
          v14 += 4;
          v15 += 4;
        }
        ++v11;
        if (v15 == v10)
          break;
      }
      else
      {
        v15 += 4;
        if (v15 == v10)
          break;
      }
    }
    while (v11 != v12);
  }
  if (v14 != v10)
  {
    v10 = v14;
    a3[1] = v14;
  }
  v17 = (unsigned int *)*a4;
  a4[1] = *a4;
  v97 = (unint64_t **)a4;
  if (v9 == v10)
  {
LABEL_53:
    v54 = (unsigned int *)*a4;
    if ((unsigned int *)*a4 == v17)
      return result;
  }
  else
  {
    v18 = v10 - v9;
    v19 = v18 >> 2;
    if (v18 >> 2 > (unint64_t)((uint64_t)(a4[2] - (_QWORD)v17) >> 3))
    {
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_207CA420C();
      v20 = v17;
      v21 = v6;
      v22 = (char *)operator new(2 * v18);
      *a4 = v22;
      a4[1] = v22;
      a4[2] = &v22[8 * v19];
      result = v103;
      v6 = v21;
      if (v20)
      {
        operator delete(v20);
        v6 = v21;
        result = v103;
      }
    }
    v24 = *a3;
    v23 = a3[1];
    if (*a3 != v23)
    {
      v25 = 0;
      v26 = 0;
      v27 = *(_DWORD **)(v6 + 152);
      v28 = *v7;
      v99 = a3[1];
      v29 = *(_DWORD *)v24;
      if (*v27 < *(_DWORD *)v24)
        goto LABEL_27;
      while (1)
      {
        if (*v28 < v29)
        {
          do
          {
            v31 = v28[1];
            ++v28;
            v25 = (v25 + 1);
          }
          while (v31 < v29);
        }
        v33 = (char *)a4[1];
        v32 = a4[2];
        if ((unint64_t)v33 < v32)
        {
          *(_QWORD *)v33 = v26 | (unint64_t)(v25 << 32);
          v17 = (unsigned int *)(v33 + 8);
          a4[1] = v33 + 8;
          v24 += 4;
          if (v24 == v23)
            goto LABEL_53;
          goto LABEL_26;
        }
        v34 = (char *)*a4;
        v35 = (uint64_t)&v33[-*a4];
        v36 = v35 >> 3;
        v37 = (v35 >> 3) + 1;
        if (v37 >> 61)
          sub_207CA420C();
        v38 = v6;
        v39 = v32 - (_QWORD)v34;
        if (v39 >> 2 > v37)
          v37 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        v101 = v37;
        if (v37)
        {
          if (v37 >> 61)
            sub_207CA3AB8();
          v40 = operator new(8 * v37);
        }
        else
        {
          v40 = 0;
        }
        v41 = (unint64_t *)&v40[8 * v36];
        *v41 = v26 | (unint64_t)(v25 << 32);
        v17 = (unsigned int *)(v41 + 1);
        if (v33 != v34)
          break;
        v6 = v38;
        a4 = v97;
        *v97 = v41;
        v97[1] = (unint64_t *)v17;
        v97[2] = (unint64_t *)&v40[8 * v101];
        if (v33)
          goto LABEL_51;
LABEL_52:
        result = v103;
        v23 = v99;
        a4[1] = v17;
        v24 += 4;
        if (v24 == v99)
          goto LABEL_53;
LABEL_26:
        v29 = *(_DWORD *)v24;
        if (*v27 < *(_DWORD *)v24)
        {
          do
          {
LABEL_27:
            v30 = v27[1];
            ++v27;
            ++v26;
          }
          while (v30 < v29);
        }
      }
      v42 = v33 - v34 - 8;
      if (v42 >= 0x58)
      {
        v43 = v33 - v40 - v35;
        v6 = v38;
        a4 = v97;
        if (v43 >= 0x20)
        {
          v44 = (v42 >> 3) + 1;
          v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v33[-v45];
          v41 = (unint64_t *)((char *)v41 - v45);
          v47 = &v40[8 * v36 - 16];
          v48 = v33 - 16;
          v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 4;
          }
          while (v49);
          v33 = v46;
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_50:
            v33 = (char *)*a4;
            *a4 = v41;
            a4[1] = v17;
            a4[2] = &v40[8 * v101];
            if (!v33)
              goto LABEL_52;
LABEL_51:
            v52 = v6;
            v53 = v17;
            operator delete(v33);
            v17 = v53;
            v6 = v52;
            goto LABEL_52;
          }
        }
      }
      else
      {
        v6 = v38;
        a4 = v97;
      }
      do
      {
        v51 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v41 = v51;
      }
      while (v33 != v34);
      goto LABEL_50;
    }
    v54 = (unsigned int *)*a4;
    v17 = (unsigned int *)a4[1];
    if ((unsigned int *)*a4 == v17)
      return result;
  }
  v98 = (unint64_t *)(result + 48);
  v95 = v17;
  v96 = v6;
  do
  {
    v56 = (unsigned int *)*a4;
    v55 = (unsigned int *)a4[1];
    if ((unsigned int *)*a4 != v55)
    {
      v57 = (uint64_t *)(*(_QWORD *)(v6 + 120) + 24 * *v54);
      v58 = *(_QWORD *)(result + 120) + 24 * v54[1];
      v59 = *v57;
      v60 = v57[1];
      while (1)
      {
        if (v59 == v60)
          goto LABEL_55;
        v61 = *v56;
        while (*(_DWORD *)v59 != v61)
        {
          if (*(_DWORD *)v59 > v61)
            goto LABEL_83;
          v59 += 16;
          if (v59 == v60)
            goto LABEL_55;
        }
        v62 = v56[1];
        v63 = *(char **)v58;
        v64 = *(char **)(v58 + 8);
        if (*(char **)v58 != v64)
        {
          while (*(_DWORD *)v63 < v62)
          {
            v63 += 16;
            if (v63 == v64)
              goto LABEL_73;
          }
        }
        if (v63 == v64)
          goto LABEL_73;
        if (*(_DWORD *)v63 != v62)
          break;
        v65 = (__int128 *)(*v98 + 4 * *((_QWORD *)v63 + 1));
        v66 = (__int128 *)(*(_QWORD *)(v6 + 48) + 4 * *(_QWORD *)(v59 + 8));
        if (v66 != v65)
          goto LABEL_82;
LABEL_83:
        if (v59 != v60)
        {
          v56 += 2;
          if (v56 != v55)
            continue;
        }
        goto LABEL_55;
      }
      v64 = v63;
LABEL_73:
      v67 = *(_QWORD *)(result + 112);
      v100 = *(_QWORD *)(v6 + 48);
      v102 = *(_QWORD *)(v59 + 8);
      if (v67)
      {
        v69 = *(_QWORD *)(result + 80);
        v68 = *(_QWORD *)(result + 88);
        v70 = ((v68 - v69) << 6) - 1;
        v71 = *(_QWORD *)(result + 104);
        if (v68 == v69)
          v70 = 0;
        v65 = (__int128 *)(*(_QWORD *)(result + 48)
                         + 4
                         * *(_QWORD *)(*(_QWORD *)(v69 + (((unint64_t)(v71 + v67 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v71 + v67 - 1) & 0x1FF)));
        *(_QWORD *)(result + 112) = v67 - 1;
        if ((unint64_t)(v70 - (v67 + v71) + 1) >= 0x400)
        {
          v76 = result;
          v77 = v58;
          operator delete(*(void **)(v68 - 8));
          v58 = v77;
          *(_QWORD *)(v76 + 88) -= 8;
          v72 = v97;
        }
        else
        {
          v72 = (unint64_t **)a4;
        }
        v74 = v98;
      }
      else
      {
        v72 = (unint64_t **)a4;
        v73 = *(void **)(result + 56);
        LODWORD(v104) = 0;
        v74 = v98;
        v75 = v58;
        sub_207D89350(v98, v73, 0x24uLL, (const float *)&v104);
        v58 = v75;
        v65 = (__int128 *)(*(_QWORD *)(v103 + 56) - 144);
      }
      v78 = (uint64_t)((uint64_t)v65 - *v74) >> 2;
      LODWORD(v104) = v62;
      *((_QWORD *)&v104 + 1) = v78;
      v79 = v58;
      sub_207D89100((char **)v58, v64, &v104);
      v58 = v79;
      result = v103;
      v17 = v95;
      v6 = v96;
      a4 = v72;
      v66 = (__int128 *)(v100 + 4 * v102);
      if (v66 == v65)
        goto LABEL_83;
LABEL_82:
      v80 = *v66;
      v81 = v66[1];
      v82 = v66[2];
      v83 = v66[3];
      v84 = v66[4];
      v85 = v66[5];
      v86 = v66[6];
      v87 = v66[8];
      v65[7] = v66[7];
      v65[8] = v87;
      v65[5] = v85;
      v65[6] = v86;
      v65[3] = v83;
      v65[4] = v84;
      v65[1] = v81;
      v65[2] = v82;
      *v65 = v80;
      goto LABEL_83;
    }
LABEL_55:
    v54 += 2;
  }
  while (v54 != v17);
  v88 = (unsigned int *)*a4;
  v89 = (unsigned int *)a4[1];
  if ((unsigned int *)*a4 != v89)
  {
    do
    {
      v90 = *v88;
      v91 = v88[1];
      v88 += 2;
      v92 = *(_QWORD *)v6 + 4 * (*(_DWORD *)(v6 + 28) + 6 * v90);
      v93 = *(_QWORD *)result + 4 * (*(_DWORD *)(result + 28) + 6 * v91);
      v94 = *(_OWORD *)v92;
      *(_QWORD *)(v93 + 16) = *(_QWORD *)(v92 + 16);
      *(_OWORD *)v93 = v94;
    }
    while (v88 != v89);
  }
  return result;
}

void sub_207DA0064(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  unsigned int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  __int128 v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;

  v72 = 6;
  sub_207D8C3F4(a2, a1 + 152, &v72, (uint64_t)a5);
  v9 = 6 * ((unint64_t)((char *)a5[1] - (char *)*a5) >> 3);
  *(_DWORD *)(a3 + 16) = v9;
  *(_DWORD *)(a3 + 20) = v9;
  v10 = v9 * (unint64_t)v9;
  v11 = v9;
  if (*(_QWORD *)(a3 + 8) < v10)
  {
    if (*(_QWORD *)a3)
      operator delete[](*(void **)a3);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = ((4 * v10 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
    *(_QWORD *)a3 = MEMORY[0x20BD028B4]();
    v11 = *(_DWORD *)(a3 + 16);
    v9 = *(_DWORD *)(a3 + 20);
  }
  v12 = v11 * v9;
  if (v12)
    bzero(*(void **)a3, 4 * v12);
  v14 = *a5;
  v13 = a5[1];
  if (*a5 == v13)
  {
    v60 = *a5;
  }
  else
  {
    do
    {
      v15 = *a5;
      v16 = a5[1];
      if (*a5 != v16)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v14);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v14 + 8);
        do
        {
          if (v18 == v17)
            break;
          v19 = *v15;
          while (*(_DWORD *)v18 < v19)
          {
            v18 += 16;
            if (v18 == v17)
              goto LABEL_9;
          }
          if (*(_DWORD *)v18 == v19)
          {
            v20 = *(_QWORD *)(a1 + 48) + 4 * *(_QWORD *)(v18 + 8);
            if (v20 == *(_QWORD *)a3)
            {
              v50 = *(_OWORD *)(v20 + 128);
              v70 = HIDWORD(v50);
              LODWORD(v47) = *(_QWORD *)(v20 + 136);
              v71 = HIDWORD(*(_QWORD *)(v20 + 128));
              v36 = *(_OWORD *)(v20 + 96);
              v35 = *(_OWORD *)(v20 + 112);
              v69 = HIDWORD(v35);
              LODWORD(v49) = *(_QWORD *)(v20 + 120);
              v48 = HIDWORD(*(_QWORD *)(v20 + 112));
              v68 = HIDWORD(v36);
              v51 = *(_QWORD *)(v20 + 104);
              v52 = HIDWORD(*(_QWORD *)(v20 + 96));
              v31 = *(_OWORD *)(v20 + 64);
              v42 = *(_OWORD *)(v20 + 80);
              v39 = HIDWORD(v42);
              LODWORD(v33) = *(_QWORD *)(v20 + 88);
              v41 = HIDWORD(*(_QWORD *)(v20 + 80));
              v43 = HIDWORD(v31);
              LODWORD(v34) = *(_QWORD *)(v20 + 72);
              v40 = HIDWORD(*(_QWORD *)(v20 + 64));
              v27 = *(_OWORD *)(v20 + 32);
              v32 = *(_OWORD *)(v20 + 48);
              v44 = HIDWORD(v32);
              v45 = *(_QWORD *)(v20 + 56);
              v46 = HIDWORD(*(_QWORD *)(v20 + 48));
              v22 = HIDWORD(v27);
              LODWORD(v21) = *(_QWORD *)(v20 + 40);
              v26 = HIDWORD(*(_QWORD *)(v20 + 32));
              v29 = *(_OWORD *)v20;
              v23 = *(_OWORD *)(v20 + 16);
              v28 = HIDWORD(v23);
              LODWORD(v25) = *(_QWORD *)(v20 + 24);
              v24 = HIDWORD(*(_QWORD *)(v20 + 16));
              v30 = HIDWORD(*(_OWORD *)v20);
              v37 = *(_QWORD *)(v20 + 8);
              v38 = HIDWORD(*(_QWORD *)v20);
            }
            else
            {
              v21 = *(_QWORD *)(v20 + 40);
              v22 = HIDWORD(v21);
              *(_QWORD *)&v23 = *(_QWORD *)(v20 + 16);
              v24 = DWORD1(v23);
              v25 = *(_OWORD *)(v20 + 24);
              v26 = HIDWORD(v25);
              LODWORD(v27) = *(_QWORD *)(v20 + 32);
              v28 = HIDWORD(*(_QWORD *)(v20 + 24));
              v29 = *(_OWORD *)v20;
              v30 = HIDWORD(*(_OWORD *)v20);
              *(_QWORD *)&v31 = *(_QWORD *)(v20 + 64);
              v32 = *(_OWORD *)(v20 + 48);
              v33 = *(_QWORD *)(v20 + 88);
              v34 = *(_OWORD *)(v20 + 72);
              *(_QWORD *)&v35 = *(_QWORD *)(v20 + 112);
              v36 = *(_OWORD *)(v20 + 96);
              v37 = *(_QWORD *)(v20 + 8);
              v38 = HIDWORD(*(_QWORD *)v20);
              v39 = HIDWORD(v33);
              v40 = DWORD1(v31);
              v41 = HIDWORD(v34);
              LODWORD(v42) = *(_QWORD *)(v20 + 80);
              v43 = HIDWORD(*(_QWORD *)(v20 + 72));
              v44 = HIDWORD(v32);
              v45 = *(_QWORD *)(v20 + 56);
              v46 = HIDWORD(*(_QWORD *)(v20 + 48));
              v47 = *(_QWORD *)(v20 + 136);
              v70 = HIDWORD(v47);
              v48 = DWORD1(v35);
              v49 = *(_OWORD *)(v20 + 120);
              v71 = HIDWORD(v49);
              LODWORD(v50) = *(_QWORD *)(v20 + 128);
              v69 = HIDWORD(*(_QWORD *)(v20 + 120));
              v68 = HIDWORD(v36);
              v51 = *(_QWORD *)(v20 + 104);
              v52 = HIDWORD(*(_QWORD *)(v20 + 96));
            }
            DWORD1(v23) = v24;
            DWORD1(v29) = v38;
            *((_QWORD *)&v29 + 1) = __PAIR64__(v30, v37);
            v53 = *(unsigned int *)(a3 + 16);
            HIDWORD(v21) = v22;
            DWORD1(v25) = v28;
            *((_QWORD *)&v25 + 1) = __PAIR64__(v26, v27);
            DWORD1(v31) = v40;
            DWORD1(v32) = v46;
            *((_QWORD *)&v32 + 1) = __PAIR64__(v44, v45);
            HIDWORD(v33) = v39;
            DWORD1(v34) = v43;
            *((_QWORD *)&v34 + 1) = __PAIR64__(v41, v42);
            DWORD1(v35) = v48;
            DWORD1(v36) = v52;
            *((_QWORD *)&v36 + 1) = __PAIR64__(v68, v51);
            HIDWORD(v47) = v70;
            DWORD1(v49) = v69;
            *((_QWORD *)&v49 + 1) = __PAIR64__(v71, v50);
            v54 = *(_QWORD *)a3 + 4 * (v15[1] + (_DWORD)v53 * v14[1]);
            *(_OWORD *)v54 = v29;
            *(_QWORD *)(v54 + 16) = v23;
            v55 = v54 + 4 * v53;
            *(_OWORD *)v55 = v25;
            *(_QWORD *)(v55 + 16) = v21;
            v56 = v54 + 8 * v53;
            *(_OWORD *)v56 = v32;
            *(_QWORD *)(v56 + 16) = v31;
            v57 = v54 + 12 * v53;
            *(_OWORD *)v57 = v34;
            *(_QWORD *)(v57 + 16) = v33;
            v58 = v54 + 16 * v53;
            *(_OWORD *)v58 = v36;
            *(_QWORD *)(v58 + 16) = v35;
            v59 = v54 + 20 * v53;
            *(_OWORD *)v59 = v49;
            *(_QWORD *)(v59 + 16) = v47;
          }
          if (v18 == v17)
            break;
          v15 += 2;
        }
        while (v15 != v16);
      }
LABEL_9:
      v14 += 2;
    }
    while (v14 != v13);
    v14 = *a5;
    v60 = a5[1];
  }
  v61 = 6 * ((unint64_t)((char *)v60 - (char *)v14) >> 3);
  if (*(_DWORD *)(a4 + 16) != (_DWORD)v61)
  {
    *(_DWORD *)(a4 + 16) = v61;
    if (*(_QWORD *)(a4 + 8) < v61)
    {
      if (*(_QWORD *)a4)
      {
        operator delete[](*(void **)a4);
        v14 = *a5;
        v60 = a5[1];
      }
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = ((4 * v61 + 31) & 0x7FFFFFFE0) >> 2;
      *(_QWORD *)a4 = MEMORY[0x20BD028B4]();
    }
  }
  if (v14 != v60)
  {
    v62 = *(_DWORD *)(a1 + 28);
    do
    {
      v63 = *v14;
      v64 = v14[1];
      v14 += 2;
      v65 = *(_QWORD *)a1 + 4 * (v62 + 6 * v63);
      v66 = *(_QWORD *)a4 + 4 * v64;
      v67 = *(_OWORD *)v65;
      *(_QWORD *)(v66 + 16) = *(_QWORD *)(v65 + 16);
      *(_OWORD *)v66 = v67;
    }
    while (v14 != v60);
  }
}

void sub_207DA0498(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int **a4)
{
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  __int128 v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;

  v62 = 6;
  sub_207D8C3F4(a2, a1 + 152, &v62, (uint64_t)a4);
  v7 = 6 * ((unint64_t)((char *)a4[1] - (char *)*a4) >> 3);
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v7;
  v8 = v7 * (unint64_t)v7;
  v9 = v7;
  if (*(_QWORD *)(a3 + 8) < v8)
  {
    if (*(_QWORD *)a3)
      operator delete[](*(void **)a3);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = ((4 * v8 + 31) & 0xFFFFFFFFFFFFFFE0) >> 2;
    *(_QWORD *)a3 = MEMORY[0x20BD028B4]();
    v9 = *(_DWORD *)(a3 + 16);
    v7 = *(_DWORD *)(a3 + 20);
  }
  v10 = v9 * v7;
  if (v10)
    bzero(*(void **)a3, 4 * v10);
  v11 = *a4;
  v12 = a4[1];
  if (*a4 != v12)
  {
    do
    {
      v13 = *a4;
      v14 = a4[1];
      if (*a4 != v14)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v11);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v11 + 8);
        do
        {
          if (v16 == v15)
            break;
          v17 = *v13;
          while (*(_DWORD *)v16 < v17)
          {
            v16 += 16;
            if (v16 == v15)
              goto LABEL_9;
          }
          if (*(_DWORD *)v16 == v17)
          {
            v18 = *(_QWORD *)(a1 + 48) + 4 * *(_QWORD *)(v16 + 8);
            if (v18 == *(_QWORD *)a3)
            {
              v48 = *(_OWORD *)(v18 + 128);
              v60 = HIDWORD(v48);
              LODWORD(v45) = *(_QWORD *)(v18 + 136);
              v61 = HIDWORD(*(_QWORD *)(v18 + 128));
              v34 = *(_OWORD *)(v18 + 96);
              v33 = *(_OWORD *)(v18 + 112);
              v59 = HIDWORD(v33);
              LODWORD(v47) = *(_QWORD *)(v18 + 120);
              v46 = HIDWORD(*(_QWORD *)(v18 + 112));
              v58 = HIDWORD(v34);
              v49 = *(_QWORD *)(v18 + 104);
              v50 = HIDWORD(*(_QWORD *)(v18 + 96));
              v29 = *(_OWORD *)(v18 + 64);
              v40 = *(_OWORD *)(v18 + 80);
              v37 = HIDWORD(v40);
              LODWORD(v31) = *(_QWORD *)(v18 + 88);
              v39 = HIDWORD(*(_QWORD *)(v18 + 80));
              v41 = HIDWORD(v29);
              LODWORD(v32) = *(_QWORD *)(v18 + 72);
              v38 = HIDWORD(*(_QWORD *)(v18 + 64));
              v25 = *(_OWORD *)(v18 + 32);
              v30 = *(_OWORD *)(v18 + 48);
              v42 = HIDWORD(v30);
              v43 = *(_QWORD *)(v18 + 56);
              v44 = HIDWORD(*(_QWORD *)(v18 + 48));
              v20 = HIDWORD(v25);
              LODWORD(v19) = *(_QWORD *)(v18 + 40);
              v24 = HIDWORD(*(_QWORD *)(v18 + 32));
              v27 = *(_OWORD *)v18;
              v21 = *(_OWORD *)(v18 + 16);
              v26 = HIDWORD(v21);
              LODWORD(v23) = *(_QWORD *)(v18 + 24);
              v22 = HIDWORD(*(_QWORD *)(v18 + 16));
              v28 = HIDWORD(*(_OWORD *)v18);
              v35 = *(_QWORD *)(v18 + 8);
              v36 = HIDWORD(*(_QWORD *)v18);
            }
            else
            {
              v19 = *(_QWORD *)(v18 + 40);
              v20 = HIDWORD(v19);
              *(_QWORD *)&v21 = *(_QWORD *)(v18 + 16);
              v22 = DWORD1(v21);
              v23 = *(_OWORD *)(v18 + 24);
              v24 = HIDWORD(v23);
              LODWORD(v25) = *(_QWORD *)(v18 + 32);
              v26 = HIDWORD(*(_QWORD *)(v18 + 24));
              v27 = *(_OWORD *)v18;
              v28 = HIDWORD(*(_OWORD *)v18);
              *(_QWORD *)&v29 = *(_QWORD *)(v18 + 64);
              v30 = *(_OWORD *)(v18 + 48);
              v31 = *(_QWORD *)(v18 + 88);
              v32 = *(_OWORD *)(v18 + 72);
              *(_QWORD *)&v33 = *(_QWORD *)(v18 + 112);
              v34 = *(_OWORD *)(v18 + 96);
              v35 = *(_QWORD *)(v18 + 8);
              v36 = HIDWORD(*(_QWORD *)v18);
              v37 = HIDWORD(v31);
              v38 = DWORD1(v29);
              v39 = HIDWORD(v32);
              LODWORD(v40) = *(_QWORD *)(v18 + 80);
              v41 = HIDWORD(*(_QWORD *)(v18 + 72));
              v42 = HIDWORD(v30);
              v43 = *(_QWORD *)(v18 + 56);
              v44 = HIDWORD(*(_QWORD *)(v18 + 48));
              v45 = *(_QWORD *)(v18 + 136);
              v60 = HIDWORD(v45);
              v46 = DWORD1(v33);
              v47 = *(_OWORD *)(v18 + 120);
              v61 = HIDWORD(v47);
              LODWORD(v48) = *(_QWORD *)(v18 + 128);
              v59 = HIDWORD(*(_QWORD *)(v18 + 120));
              v58 = HIDWORD(v34);
              v49 = *(_QWORD *)(v18 + 104);
              v50 = HIDWORD(*(_QWORD *)(v18 + 96));
            }
            DWORD1(v21) = v22;
            DWORD1(v27) = v36;
            *((_QWORD *)&v27 + 1) = __PAIR64__(v28, v35);
            v51 = *(unsigned int *)(a3 + 16);
            HIDWORD(v19) = v20;
            DWORD1(v23) = v26;
            *((_QWORD *)&v23 + 1) = __PAIR64__(v24, v25);
            DWORD1(v29) = v38;
            DWORD1(v30) = v44;
            *((_QWORD *)&v30 + 1) = __PAIR64__(v42, v43);
            HIDWORD(v31) = v37;
            DWORD1(v32) = v41;
            *((_QWORD *)&v32 + 1) = __PAIR64__(v39, v40);
            DWORD1(v33) = v46;
            DWORD1(v34) = v50;
            *((_QWORD *)&v34 + 1) = __PAIR64__(v58, v49);
            HIDWORD(v45) = v60;
            DWORD1(v47) = v59;
            *((_QWORD *)&v47 + 1) = __PAIR64__(v61, v48);
            v52 = *(_QWORD *)a3 + 4 * (v13[1] + (_DWORD)v51 * v11[1]);
            *(_OWORD *)v52 = v27;
            *(_QWORD *)(v52 + 16) = v21;
            v53 = v52 + 4 * v51;
            *(_OWORD *)v53 = v23;
            *(_QWORD *)(v53 + 16) = v19;
            v54 = v52 + 8 * v51;
            *(_OWORD *)v54 = v30;
            *(_QWORD *)(v54 + 16) = v29;
            v55 = v52 + 12 * v51;
            *(_OWORD *)v55 = v32;
            *(_QWORD *)(v55 + 16) = v31;
            v56 = v52 + 16 * v51;
            *(_OWORD *)v56 = v34;
            *(_QWORD *)(v56 + 16) = v33;
            v57 = v52 + 20 * v51;
            *(_OWORD *)v57 = v47;
            *(_QWORD *)(v57 + 16) = v45;
          }
          if (v16 == v15)
            break;
          v13 += 2;
        }
        while (v13 != v14);
      }
LABEL_9:
      v11 += 2;
    }
    while (v11 != v12);
  }
}

void sub_207DA0814(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  void **v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  char *v40;
  int64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  char *v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v3 = *(void **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = (_DWORD *)*a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a3;
    v9 = v5 - (_QWORD)v4;
    v10 = (v5 - (uint64_t)v4) >> 2;
    if (v10 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v3) >> 2)
    {
      if ((v9 & 0x8000000000000000) != 0)
        sub_207CA420C();
      v11 = (char *)operator new(v9);
      *(_QWORD *)v6 = v11;
      *(_QWORD *)(v6 + 8) = v11;
      *(_QWORD *)(v6 + 16) = &v11[4 * v10];
      if (v3)
        operator delete(v3);
    }
    v12 = *(char **)(a1 + 152);
    v13 = *(char **)(a1 + 160);
    v14 = (_DWORD *)*a2;
    v15 = (_DWORD *)a2[1];
    if (v12 == v13)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      while (*(_DWORD *)v12 < *v14)
      {
        v12 += 4;
        ++v16;
        if (v12 == v13)
          goto LABEL_43;
      }
    }
    if (v14 != v15 && v12 != v13)
    {
      v59 = a1;
      v57 = v6;
      while (1)
      {
        if (*v14 != *(_DWORD *)v12)
        {
          v12 += 4;
          if (++v14 == v15)
            goto LABEL_43;
          goto LABEL_42;
        }
        v18 = *(char **)(v6 + 8);
        v17 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v18 < v17)
        {
          *(_DWORD *)v18 = v16;
          v19 = (uint64_t)(v18 + 4);
          goto LABEL_39;
        }
        v20 = (void **)v6;
        v21 = v15;
        v22 = (char *)*v20;
        v23 = v18 - (_BYTE *)*v20;
        v24 = v23 >> 2;
        v25 = (v23 >> 2) + 1;
        if (v25 >> 62)
          sub_207CA420C();
        v26 = v17 - (_QWORD)v22;
        if (v26 >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        v58 = v25;
        if (v25)
        {
          if (v25 >> 62)
            sub_207CA3AB8();
          v27 = operator new(4 * v25);
          v28 = &v27[4 * v24];
          *v28 = v16;
          v19 = (uint64_t)(v28 + 1);
          v29 = v18 - v22;
          if (v18 == v22)
          {
LABEL_31:
            v15 = v21;
            v6 = v57;
            goto LABEL_37;
          }
        }
        else
        {
          v27 = 0;
          v28 = (_DWORD *)(4 * v24);
          *(_DWORD *)(4 * v24) = v16;
          v19 = 4 * v24 + 4;
          v29 = v18 - v22;
          if (v18 == v22)
            goto LABEL_31;
        }
        v30 = v29 - 4;
        if (v30 < 0x2C)
          break;
        v31 = v18 - &v27[v23];
        v15 = v21;
        v6 = v57;
        if (v31 < 0x20)
          goto LABEL_36;
        v32 = (v30 >> 2) + 1;
        v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
        v34 = &v18[-v33];
        v28 = (_DWORD *)((char *)v28 - v33);
        v35 = &v27[4 * v24 - 16];
        v36 = v18 - 16;
        v37 = v32 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v38 = *(_OWORD *)v36;
          *(v35 - 1) = *((_OWORD *)v36 - 1);
          *v35 = v38;
          v35 -= 2;
          v36 -= 32;
          v37 -= 8;
        }
        while (v37);
        v18 = v34;
        if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_36;
LABEL_37:
        *(_QWORD *)v6 = v28;
        *(_QWORD *)(v6 + 8) = v19;
        *(_QWORD *)(v6 + 16) = &v27[4 * v58];
        if (v22)
          operator delete(v22);
LABEL_39:
        a1 = v59;
        *(_QWORD *)(v6 + 8) = v19;
        v40 = *(char **)(v59 + 160);
        v41 = v40 - (v12 + 4);
        if (v40 != v12 + 4)
          memmove(v12, v12 + 4, v40 - (v12 + 4));
        *(_QWORD *)(v59 + 160) = &v12[v41];
        v13 -= 4;
        if (++v14 == v15)
          goto LABEL_43;
LABEL_42:
        ++v16;
        if (v12 == v13)
          goto LABEL_43;
      }
      v15 = v21;
      v6 = v57;
      do
      {
LABEL_36:
        v39 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v28 = v39;
      }
      while (v18 != v22);
      goto LABEL_37;
    }
LABEL_43:
    v42 = *(unsigned int **)(v6 + 8);
    if (*(unsigned int **)v6 != v42)
    {
      sub_207D8D208(a1 + 32, *(unsigned int **)v6, v42);
      sub_207D8D3AC(a1 + 32, *(_QWORD *)v6, *(_QWORD *)(v6 + 8));
      v43 = *(unsigned int **)v6;
      v44 = *(unsigned int **)(v6 + 8);
      if (*(unsigned int **)v6 == v44)
      {
        v55 = 0;
      }
      else
      {
        v45 = *(char **)a1;
        v46 = *(_DWORD *)(a1 + 28);
        v47 = *(char **)a1;
        v48 = *(char **)a1;
        v49 = *(char **)a1;
        do
        {
          while (1)
          {
            v50 = v46 + 6 * *v43;
            v51 = &v45[4 * v50];
            if (v48 != v51)
              break;
            v48 += 24;
            if (++v43 == v44)
              goto LABEL_51;
          }
          v52 = &v45[4 * v50];
          if (v47 != v48)
          {
            v53 = v51 - v48;
            memmove(v49, v48, v51 - v48);
            v52 = &v49[v53];
            v45 = *(char **)a1;
          }
          v48 = &v45[4 * (v50 + 6)];
          v49 = v52;
          v47 = v51;
          ++v43;
        }
        while (v43 != v44);
LABEL_51:
        v54 = (*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2;
        *(_DWORD *)(a1 + 24) -= v54;
        v55 = -6 * v54;
        if (v47 != v48)
        {
          v56 = &v45[4 * *(unsigned int *)(a1 + 16)];
          if (v56 != v48)
            memmove(v49, v48, v56 - v48);
        }
      }
      sub_207D8BBF8(a1, *(_DWORD *)(a1 + 16) + v55);
    }
  }
}

_QWORD *sub_207DA0BF4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result[12];
  v2 = result[13];
  while (v1 != v2)
  {
    v3 = *(_QWORD *)(v1 + 48);
    if (*(_BYTE *)(v1 + 96) || (*(_BYTE *)(v3 + 4) & 6) != 0)
      ++*(_DWORD *)(v3 + 8);
    v1 += 104;
  }
  v4 = result[15];
  v5 = result[16];
  while (v4 != v5)
  {
    v6 = *(_QWORD *)(v4 + 160);
    if (*(_BYTE *)(v4 + 240) || (*(_BYTE *)(v6 + 4) & 6) != 0)
      ++*(_DWORD *)(v6 + 8);
    v4 += 248;
  }
  return result;
}

void sub_207DA0C70(float32x2_t **a1, float **a2)
{
  float32x2_t *v2;
  float v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _BOOL4 v14;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;

  v2 = *a1;
  v3 = (float)((*a1)[3].f32[0] - (*a1)[4].f32[1]) * 0.5;
  v4 = *a2;
  *v4 = v3;
  v5 = (float)(v2[4].f32[0] - v2[1].f32[0]) * 0.5;
  v4[1] = v5;
  v6 = (float)(v2->f32[1] - v2[2].f32[0]) * 0.5;
  v4[2] = v6;
  v7 = v2->f32[0];
  v8 = v2[2].f32[1];
  v9 = v2[5].f32[0];
  v10 = -1.0;
  v11 = (float)((float)((float)(v2->f32[0] + v8) + v9) + -1.0) * 0.5;
  v12 = (float)((float)(v3 * v3) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001)
      v14 = 0;
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        v10 = (float)((float)((float)(v2->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      v16 = acosf(v11) / sqrtf(v12);
    }
    else
    {
      v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
    }
    *v4 = v3 * v16;
    v4[1] = v5 * v16;
    v4[2] = v6 * v16;
    return;
  }
LABEL_17:
  v17 = asinf(sqrtf(v12));
  v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  v19 = (float)(v7 - v10) * v18;
  v20 = (float)(v8 - v10) * v18;
  v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      v33 = sqrtf(v21);
      if (v6 < 0.0)
        v33 = -v33;
      v4[2] = v33;
      v34.i32[0] = v2[1].i32[0];
      v34.i32[1] = v2[3].i32[0];
      *(float32x2_t *)v4 = vmul_n_f32(vmul_n_f32(vadd_f32(v2[4], v34), v26), 1.0 / v33);
    }
    else
    {
      v27 = sqrtf(v20);
      if (v5 < 0.0)
        v27 = -v27;
      v4[1] = v27;
      v28 = 1.0 / v27;
      v29 = v2[4].f32[1] + v2[3].f32[0];
      *v4 = v28 * (float)(v26 * (float)(v2[2].f32[0] + v2->f32[1]));
      v4[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    v22 = v18 * 0.5;
    v23 = v22 * (float)(v2[4].f32[0] + v2[1].f32[0]);
    if (v19 <= v21)
    {
      v30 = sqrtf(v21);
      if (v6 < 0.0)
        v30 = -v30;
      v4[2] = v30;
      v31 = 1.0 / v30;
      v32 = v31 * (float)(v22 * (float)(v2[4].f32[1] + v2[3].f32[0]));
      *v4 = v31 * v23;
      v4[1] = v32;
    }
    else
    {
      v24 = sqrtf(v19);
      if (v3 < 0.0)
        v24 = -v24;
      *v4 = v24;
      v25 = 1.0 / v24;
      v4[1] = v25 * (float)(v22 * (float)(v2[2].f32[0] + v2->f32[1]));
      v4[2] = v25 * v23;
    }
  }
}

unint64_t sub_207DA0F80(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_207D8F8B0(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_207D8FAB0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_207DA21B4(v7, v10 - 3);
          result = sub_207DA21B4(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_207DA0F80(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_207DA21B4(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_207D8F8B0(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_207D8FAB0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

uint64_t sub_207DA2648(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_207D912D0(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_207D914D0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_207DA387C(v7, v10 - 3);
          result = sub_207DA387C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_207DA2648(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_207DA387C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_207D912D0(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_207D914D0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

_QWORD *sub_207DA3D10(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 8);
  if ((_QWORD *)(*(_QWORD *)(v3 + 8) - 4 * *(unsigned int *)(v3 + 16)) == result
    || (v4 = *(_QWORD *)(a2 + 16), *(_QWORD **)v4 == result))
  {
    result = (_QWORD *)sub_207DA3D10(&v5);
    *(_OWORD *)v2 = v5;
    v2[2] = v6;
  }
  else if (6 * *(_DWORD *)v3 && *(_DWORD *)(v4 + 16))
  {
    return (_QWORD *)sub_207CC49DC();
  }
  else
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

_QWORD *sub_207DA3DDC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_207DA3E1C(uint64_t a1, int a2, char a3, float32x4_t a4, int32x4_t a5, int32x4_t a6, float32x2_t a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  sub_207DA5124(a1, (uint64_t)&v21, a2, a4, a5, a6, a7, a8, a9, a10, a11);
  if ((a3 & 1) == 0)
  {
    v20 = v21;
    if (v21 <= 0.0)
    {
      *(_DWORD *)(a1 + 8) = 786163455;
      *(_DWORD *)(a1 + 12) = 1621981419;
      v18 = v22;
      if (v22 <= 0.0)
        goto LABEL_5;
    }
    else
    {
      *(float *)(a1 + 8) = v21;
      *(float *)(a1 + 12) = 1.0 / (float)(v20 * v20);
      v18 = v22;
      if (v22 <= 0.0)
      {
LABEL_5:
        v19 = 1.0e20;
        v18 = 1.0e-10;
        goto LABEL_8;
      }
    }
    v19 = 1.0 / (float)(v18 * v18);
    goto LABEL_8;
  }
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 8) = _D0;
  v18 = 1.0;
  v19 = 1.0;
LABEL_8:
  *(float *)(a1 + 16) = v18;
  *(float *)(a1 + 20) = v19;
  *(_BYTE *)(a1 + 301) = 0;
  *(_DWORD *)(a1 + 296) = 0;
}

void sub_207DA3EEC(uint64_t a1, _DWORD **a2, char a3, float32x4_t a4, int32x4_t a5, int32x4_t a6, float32x2_t a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  sub_207DA5394(a1, (uint64_t)&v21, a2, a4, a5, a6, a7, a8, a9, a10, a11);
  if ((a3 & 1) == 0)
  {
    v20 = v21;
    if (v21 <= 0.0)
    {
      *(_DWORD *)(a1 + 8) = 786163455;
      *(_DWORD *)(a1 + 12) = 1621981419;
      v18 = v22;
      if (v22 <= 0.0)
        goto LABEL_5;
    }
    else
    {
      *(float *)(a1 + 8) = v21;
      *(float *)(a1 + 12) = 1.0 / (float)(v20 * v20);
      v18 = v22;
      if (v22 <= 0.0)
      {
LABEL_5:
        v19 = 1.0e20;
        v18 = 1.0e-10;
        goto LABEL_8;
      }
    }
    v19 = 1.0 / (float)(v18 * v18);
    goto LABEL_8;
  }
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 8) = _D0;
  v18 = 1.0;
  v19 = 1.0;
LABEL_8:
  *(float *)(a1 + 16) = v18;
  *(float *)(a1 + 20) = v19;
  *(_BYTE *)(a1 + 301) = 0;
  *(_DWORD *)(a1 + 296) = 0;
}

float sub_207DA3FBC(uint64_t a1, _QWORD *a2)
{
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float i;
  float32x2_t *v44;
  float32x2_t v45;
  float32x2_t v46;
  int32x2_t *v47;
  float32x2_t v48;
  float32x2_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x2_t *v66;
  int32x2_t v67;
  float32x2_t v68;
  int32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  unsigned __int32 v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  float v92;
  float *v93;
  float v94;
  float v95;
  float32x2_t v97;
  int8x16_t v98;
  float32x2_t v99;
  float v100;
  float32x2_t v101;
  __int32 v102;
  float32x2_t v103;
  unsigned __int32 v104;
  float32x2_t v105;
  __int32 v106;
  float32x4_t v107;

  kdebug_trace();
  v17 = a2[34];
  if (v17 <= 1)
  {
    if (a2[33] >= 2uLL)
    {
      v20 = (_DWORD *)a2[32];
    }
    else
    {
      a2[33] = 2;
      v18 = (_DWORD *)a2[32];
      v19 = operator new[](8uLL);
      v20 = v19;
      if (v17)
        *v19 = *v18;
      if (v18 == (_DWORD *)a2 || !v18)
      {
        a2[32] = v19;
      }
      else
      {
        operator delete[](v18);
        v17 = a2[34];
        a2[32] = v20;
        if (v17 > 1)
          goto LABEL_12;
      }
    }
    bzero(&v20[v17], 8 - 4 * v17);
  }
LABEL_12:
  a2[34] = 2;
  if (*(_BYTE *)(a1 + 300))
  {
    v22 = *(_QWORD *)(a1 + 120);
    v21 = *(_QWORD *)(a1 + 128);
    v23 = 0.0;
    v24 = 0.0;
    if (v22 != v21)
    {
      if (*(_BYTE *)(a1 + 299))
      {
        v25 = v21 - v22 - 104;
        if (v25 < 0x68)
          goto LABEL_54;
        v26 = v25 / 0x68 + 1;
        v27 = v22 + 104 * (v26 & 0x7FFFFFFFFFFFFFELL);
        v28 = (float *)(v22 + 176);
        v29 = v26 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          v30 = *(v28 - 26);
          v31 = *v28;
          v28 += 52;
          v24 = (float)(v24 + v30) + v31;
          v29 -= 2;
        }
        while (v29);
        v22 = v27;
        if (v26 != (v26 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_54:
          do
          {
            v24 = v24 + *(float *)(v22 + 72);
            v22 += 104;
          }
          while (v22 != v21);
        }
      }
      else
      {
        do
        {
          if (*(_BYTE *)(v22 + 76))
          {
            v40 = *(_QWORD *)(v22 + 56);
            *(_QWORD *)(v22 + 64) = v40;
            v6.i32[0] = HIDWORD(v40);
            v5.i32[0] = v40;
            *(float32x2_t *)v5.i8 = vmla_f32(vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), v6, v6);
            *(float *)v5.i32 = *(float *)(a1 + 12) * *(float *)v5.i32;
            *(_DWORD *)(v22 + 72) = v5.i32[0];
            v24 = v24 + *(float *)v5.i32;
          }
          v22 += 104;
        }
        while (v22 != v21);
      }
    }
    v32 = (float *)a2[32];
    *v32 = v24 * 0.5;
    v34 = *(_QWORD *)(a1 + 144);
    v33 = *(_QWORD *)(a1 + 152);
    if (v34 != v33)
    {
      if (*(_BYTE *)(a1 + 299))
      {
        v35 = v33 - v34 - 248;
        v23 = 0.0;
        if (v35 < 0xF8)
          goto LABEL_55;
        v36 = v35 / 0xF8 + 1;
        v37 = v34 + 248 * (v36 & 0x3FFFFFFFFFFFFFELL);
        v38 = (float *)(v34 + 464);
        v39 = v36 & 0x3FFFFFFFFFFFFFELL;
        do
        {
          v23 = (float)(v23 + *(v38 - 62)) + *v38;
          v38 += 124;
          v39 -= 2;
        }
        while (v39);
        v34 = v37;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFELL))
        {
LABEL_55:
          do
          {
            v23 = v23 + *(float *)(v34 + 216);
            v34 += 248;
          }
          while (v34 != v33);
        }
        goto LABEL_47;
      }
      v23 = 0.0;
      do
      {
        if (*(_BYTE *)(v34 + 220))
        {
          *(_OWORD *)(v34 + 192) = *(_OWORD *)(v34 + 168);
          v97 = *(float32x2_t *)(v34 + 184);
          *(float32x2_t *)(v34 + 208) = v97;
          v98 = *(int8x16_t *)(v34 + 192);
          v99 = (float32x2_t)vextq_s8(v98, v98, 8uLL).u64[0];
          v100 = *(float *)(a1 + 20)
               * vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1), *(float32x2_t *)v98.i8, 1), v99, v99), (float32x2_t)vdup_laneq_s32((int32x4_t)v98, 3), (float32x4_t)v98, 3), v97, v97), (float32x2_t)vdup_lane_s32((int32x2_t)v97, 1), v97, 1).f32[0];
          *(float *)(v34 + 216) = v100;
          v23 = v23 + v100;
        }
        v34 += 248;
      }
      while (v34 != v33);
LABEL_46:
      v32 = (float *)a2[32];
    }
  }
  else
  {
    v41 = *(_QWORD *)(a1 + 120);
    v42 = *(_QWORD *)(a1 + 128);
    v23 = 0.0;
    for (i = 0.0; v41 != v42; v41 += 104)
    {
      while (1)
      {
        v44 = *(float32x2_t **)(v41 + 48);
        *(float32x2_t *)v4.f32 = v44[10];
        v4.i32[2] = v44[11].i32[0];
        v45 = v44[4];
        v7.i32[0] = v44[5].i32[0];
        v46 = v44[6];
        v8.i32[0] = v44[7].i32[0];
        *(float32x2_t *)v9.f32 = v44[8];
        v10.i32[0] = v44[9].i32[0];
        v11 = *(float32x2_t *)(v41 + 16);
        v47 = (int32x2_t *)(*(_QWORD *)&v44[12] + (*(_QWORD *)(v41 + 40) << 6));
        *(int32x2_t *)v5.i8 = *v47;
        *(int32x2_t *)v12.i8 = v47[2];
        v13 = (float32x2_t)vzip1_s32(*v47, *(int32x2_t *)v12.i8);
        v5.i32[2] = v47[1].i32[0];
        v14.i32[0] = *(_DWORD *)(v41 + 24);
        v12.i32[2] = v47[3].i32[0];
        v15.i32[0] = v47[5].i32[0];
        v48 = (float32x2_t)v47[4];
        v49 = (float32x2_t)vtrn2q_s32(v5, v12).u64[0];
        v50 = (int8x16_t)vdupq_lane_s32((int32x2_t)v49, 1);
        v51 = (int8x16_t)vdupq_lane_s32((int32x2_t)v49, 0);
        v12 = vzip2q_s32(v5, v12);
        *(int32x2_t *)v16.f32 = v47[6];
        v16.i32[2] = v47[7].i32[0];
        v52 = (int8x16_t)vnegq_f32(v16);
        *(float32x2_t *)v53.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v13, *(float *)v52.i32), v49, *(float32x2_t *)v16.f32, 1), *(float32x2_t *)v12.i8, v16, 2);
        v54 = vmls_lane_f32(vmul_f32(v48, *(float32x2_t *)v52.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v48, 1), *(float32x2_t *)v16.f32, 1);
        v16 = (float32x4_t)vextq_s8(v52, v52, 8uLL);
        v55 = vmla_f32(v54, *(float32x2_t *)v16.f32, v15);
        *(float32x2_t *)v56.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v45, v11.f32[0]), v46, v11, 1), *(float32x2_t *)v9.f32, v14.f32[0]);
        *(float32x2_t *)&v56.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v7, v11), v8, v11, 1), v14, v10);
        v57 = (int8x16_t)vaddq_f32(v56, v4);
        *(float32x2_t *)v56.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v13, *(float *)v57.i32), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v50, 0xCuLL), *(float32x2_t *)v57.i8, 1), *(float32x2_t *)v12.i8, (float32x4_t)v57, 2);
        v58 = vmla_lane_f32(vmul_f32(v48, *(float32x2_t *)v57.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1), v48, 1);
        v4 = (float32x4_t)vextq_s8(v57, v57, 8uLL);
        v59 = vmla_f32(v58, *(float32x2_t *)v4.f32, v15);
        v7 = *(float32x2_t *)(v41 + 28);
        *(float32x2_t *)v4.f32 = vsub_f32(vdiv_f32(vadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v53.f32), (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v59, v55), 0)), v7);
        *(_QWORD *)(v41 + 64) = v4.i64[0];
        *(float32x2_t *)&v53.u32[2] = v55;
        *(float32x2_t *)&v56.u32[2] = v59;
        v5 = (int32x4_t)vaddq_f32(v56, v53);
        *(_BYTE *)(v41 + 76) = *(float *)&v5.i32[2] > 0.0;
        if (*(float *)&v5.i32[2] > 0.0)
          break;
        *(_DWORD *)(v41 + 72) = 0;
        v41 += 104;
        if (v41 == v42)
          goto LABEL_38;
      }
      v60 = *(_QWORD *)(v41 + 80);
      if (v60)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 24))(v60, v41 + 64);
        v4.i64[0] = *(_QWORD *)(v41 + 64);
      }
      *(_QWORD *)(v41 + 56) = v4.i64[0];
      v61 = *(float *)(a1 + 12)
          * vmla_lane_f32(vmul_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.f32, 1), *(float32x2_t *)v4.f32, 1).f32[0];
      *(float *)(v41 + 72) = v61;
      i = i + v61;
    }
LABEL_38:
    v32 = (float *)a2[32];
    *v32 = i * 0.5;
    v62 = *(_QWORD *)(a1 + 144);
    v63 = *(_QWORD *)(a1 + 152);
    if (v62 != v63)
    {
      v64 = v62 + 112;
      v23 = 0.0;
      do
      {
        while (!*(_QWORD *)(v64 + 32))
        {
          *(_BYTE *)(v64 + 108) = 0;
          *(_DWORD *)(v64 + 104) = 0;
          v65 = v64 + 136;
          v64 += 248;
          if (v65 == v63)
            goto LABEL_46;
        }
        v66 = *(float32x2_t **)(v64 + 48);
        v67 = *(int32x2_t *)(v64 - 32);
        v68.i32[0] = *(_DWORD *)(v64 - 24);
        v69 = *(int32x2_t *)(v64 - 16);
        v4.i32[0] = *(_DWORD *)(v64 + 8);
        v70 = v66[4];
        v9.i32[0] = v66[5].i32[0];
        v71 = v66[6];
        v11.i32[0] = v66[7].i32[0];
        v72 = v66[8];
        v13.i32[0] = v66[9].i32[0];
        v73 = (float32x2_t)vzip1_s32(v67, v69);
        v74 = (float32x2_t)vzip2_s32(v67, v69);
        v68.i32[1] = *(_DWORD *)(v64 - 8);
        v75 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v73, v70.f32[0]), v74, v70, 1), v68, v9.f32[0]);
        v69.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64, v70), (float32x2_t)vdup_lane_s32((int32x2_t)v70, 1), *(float32x2_t *)v64, 1), *(float32x2_t *)v9.f32, *(float32x2_t *)v4.f32).u32[0];
        v76 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v73, v71.f32[0]), v74, v71, 1), v68, v11.f32[0]);
        v77 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64, v71), (float32x2_t)vdup_lane_s32((int32x2_t)v71, 1), *(float32x2_t *)v64, 1), v11, *(float32x2_t *)v4.f32).u32[0];
        v78 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v73, v72.f32[0]), v74, v72, 1), v68, v13.f32[0]);
        v68.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v64, v72), (float32x2_t)vdup_lane_s32((int32x2_t)v72, 1), *(float32x2_t *)v64, 1), v13, *(float32x2_t *)v4.f32).u32[0];
        v102 = v69.i32[0];
        v101 = v75;
        v104 = v77;
        v103 = v76;
        v106 = v68.i32[0];
        v105 = v78;
        v107.i64[0] = 0;
        v107.i32[2] = 0;
        sub_207D9EF70(&v101, v107.f32);
        v81 = v107;
        *(_DWORD *)(v64 + 88) = v107.i32[2];
        v82 = (float32x4_t *)(v64 + 80);
        *(_QWORD *)(v64 + 80) = v81.i64[0];
        *(float32x2_t *)v81.f32 = v66[10];
        v81.i32[2] = v66[11].i32[0];
        v83.i64[0] = *(_QWORD *)(v64 + 16);
        v83.i32[2] = *(_DWORD *)(v64 + 24);
        v4 = vsubq_f32(v81, v83);
        *(_QWORD *)(v64 + 92) = v4.i64[0];
        *(_DWORD *)(v64 + 100) = v4.i32[2];
        v84 = *(_QWORD *)(v64 + 32);
        v85 = *(float32x4_t *)(v64 + 80);
        v86.i64[0] = *(_QWORD *)(v64 + 96);
        v4.i64[0] = *(_QWORD *)(v84 + 28);
        v87 = *(float32x4_t *)(v84 + 12);
        v4.i64[0] = vmulq_f32(v86, v4).u64[0];
        v88 = vmulq_f32(v85, v87);
        *(float32x4_t *)(v64 + 80) = v88;
        *(_QWORD *)(v64 + 96) = v4.i64[0];
        *(_BYTE *)(v64 + 108) = 1;
        v89 = *(_QWORD *)(v64 + 112);
        if (v89)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, v64 + 80);
          v4.i64[0] = *(_QWORD *)(v64 + 96);
          v85.i32[0] = v4.i32[1];
          v88 = *v82;
        }
        else
        {
          v85.i32[0] = v4.i32[1];
        }
        v87.i32[0] = v88.i32[3];
        v79.i32[0] = v88.i32[2];
        v80.i32[0] = v88.i32[1];
        v9 = *v82;
        *(float32x4_t *)(v64 + 56) = *v82;
        *(_QWORD *)(v64 + 72) = *(_QWORD *)(v64 + 96);
        v90 = *(float *)(a1 + 20)
            * vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32), v80, v80), v79, v79), *(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), *(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32), *(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32).f32[0];
        *(float *)(v64 + 104) = v90;
        v23 = v23 + v90;
        v91 = v64 + 136;
        v64 += 248;
      }
      while (v91 != v63);
      goto LABEL_46;
    }
  }
LABEL_47:
  v32[1] = v23 * 0.5;
  *(_WORD *)(a1 + 299) = 257;
  v92 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v93 = (float *)a2[32];
  v94 = *v93;
  v95 = v93[1];
  kdebug_trace();
  return (float)(v92 + v94) + v95;
}

void sub_207DA46A4(_Unwind_Exception *a1)
{
  sub_207D95234();
  _Unwind_Resume(a1);
}

void sub_207DA46B8(_Unwind_Exception *a1)
{
  sub_207D95234();
  _Unwind_Resume(a1);
}

void sub_207DA46C8(_Unwind_Exception *a1)
{
  sub_207D95234();
  _Unwind_Resume(a1);
}

void sub_207DA46D8(_Unwind_Exception *a1)
{
  sub_207D95234();
  _Unwind_Resume(a1);
}

void sub_207DA46E8(uint64_t a1, float *a2, int a3, float32x4_t a4, int32x4_t a5, int32x4_t a6, float32x2_t a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  unint64_t v14;
  size_t v15;
  float32x4_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  __n128 *v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  __n128 v29[16];
  void *__p;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  __p = v29;
  v31 = 64;
  v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3)
      - 0x1084210842108421 * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v14 >= 0x41)
  {
    if (v14 <= 0x80)
      v14 = 128;
    v31 = v14;
    if (v14 >> 62)
      v15 = -1;
    else
      v15 = 4 * v14;
    __p = operator new[](v15);
  }
  v32 = 0;
  if (*(_BYTE *)(a1 + 300))
  {
    v33 = a1 + 24;
    sub_207D944C8((uint64_t)&v33, (char *)v29);
  }
  else
  {
    v33 = a1 + 24;
    sub_207DA48CC((uint64_t)&v33, v29, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  if (*(_BYTE *)(a1 + 300))
  {
    v33 = a1 + 24;
    sub_207DA4BDC((uint64_t)&v33, (char *)v29);
  }
  else
  {
    v33 = a1 + 24;
    sub_207DA4DB0((uint64_t)&v33, v29, v16, v17, v18, v19, v20, v21, v22);
  }
  v23 = v32;
  v24 = (__n128 *)__p;
  if (!v32)
  {
    *a2 = 1.0;
    v32 = 0;
    if (v24 == v29)
      return;
    goto LABEL_22;
  }
  v25 = *(float *)&a3;
  v26 = 4 * (v32 >> 1);
  sub_207D949A0((float *)__p, (float *)((char *)__p + v26), (float *)__p + v32);
  v24 = (__n128 *)__p;
  v27 = *(float *)((char *)__p + v26);
  if ((v23 & 1) == 0)
  {
    v28 = (v23 >> 1) - 1;
    if (v28 != v23)
    {
      sub_207D949A0((float *)__p, (float *)__p + v28, (float *)__p + v23);
      v24 = (__n128 *)__p;
    }
    v27 = (float)(v27 + v24->n128_f32[v28]) * 0.5;
  }
  *a2 = sqrtf(v27) * v25;
  v32 = 0;
  if (v24 != v29)
  {
LABEL_22:
    if (v24)
      operator delete[](v24);
  }
}

void sub_207DA48A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *__p,uint64_t a42,uint64_t a43)
{
  a43 = 0;
  if (__p != &a9)
  {
    if (__p)
      operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207DA48CC(uint64_t a1, __n128 *a2, float32x4_t a3, int32x4_t a4, int32x4_t a5, float32x2_t a6, double a7, float32x2_t a8, double a9, float32x2_t a10)
{
  float32x2_t v10;
  float32x4_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 *v18;
  size_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int32 *v28;
  __n128 *v29;
  unsigned __int32 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x2_t *v42;
  float32x2_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x2_t v52;
  uint64_t v53;
  char *v54;
  float32x2_t v55;
  BOOL v56;

  v14 = a2[17].n128_u64[0];
  v15 = v14
      + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
  if (v14 >= v15)
    goto LABEL_23;
  v16 = a2[16].n128_u64[1];
  if (v16 >= v15)
  {
    v31 = a2[17].n128_u64[0];
    v32 = 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
    if (v15 <= v14)
      goto LABEL_23;
    goto LABEL_22;
  }
  v17 = 2 * v16;
  if (v17 <= v15)
    v17 = v14
        + 0x4EC4EC4EC4EC4EC5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 104) - *(_QWORD *)(*(_QWORD *)a1 + 96)) >> 3);
  a2[16].n128_u64[1] = v17;
  v18 = (__n128 *)a2[16].n128_u64[0];
  if (v17 >> 62)
    v19 = -1;
  else
    v19 = 4 * v17;
  v20 = (__n128 *)operator new[](v19);
  v21 = v20;
  if (v14)
  {
    v22 = 0;
    if (v14 < 8)
      goto LABEL_14;
    if ((unint64_t)((char *)v20 - (char *)v18) < 0x20)
      goto LABEL_14;
    v22 = v14 & 0xFFFFFFFFFFFFFFF8;
    v23 = v20 + 1;
    v24 = v18 + 1;
    v25 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      a3 = (float32x4_t)v24[-1];
      a4 = *(int32x4_t *)v24;
      v23[-1] = (__n128)a3;
      *v23 = (__n128)a4;
      v23 += 2;
      v24 += 2;
      v25 -= 8;
    }
    while (v25);
    if (v14 != v22)
    {
LABEL_14:
      v26 = v14 - v22;
      v27 = 4 * v22;
      v28 = (unsigned __int32 *)v18 + v22;
      v29 = (__n128 *)((char *)v20 + v27);
      do
      {
        v30 = *v28++;
        v29->n128_u32[0] = v30;
        v29 = (__n128 *)((char *)v29 + 4);
        --v26;
      }
      while (v26);
    }
  }
  v31 = v14;
  if (v18 != a2 && v18)
  {
    operator delete[](v18);
    v31 = a2[17].n128_u64[0];
  }
  a2[16].n128_u64[0] = (unint64_t)v21;
  v32 = v15 - v31;
  if (v15 > v31)
LABEL_22:
    bzero((void *)(a2[16].n128_u64[0] + 4 * v31), 4 * v32);
LABEL_23:
  a2[17].n128_u64[0] = v15;
  v33 = a2[16].n128_u64[0];
  v34 = (char *)(v33 + 4 * v14);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v36 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  if (v35 == v36)
    goto LABEL_32;
  do
  {
    v37 = *(float32x2_t **)(v35 + 48);
    *(float32x2_t *)a3.f32 = v37[10];
    a3.i32[2] = v37[11].i32[0];
    v38 = v37[4];
    a8.i32[0] = v37[5].i32[0];
    v39 = v37[6];
    a10.i32[0] = v37[7].i32[0];
    v40 = v37[8];
    a6.i32[0] = v37[9].i32[0];
    v41 = *(float32x2_t *)(v35 + 16);
    v10.i32[0] = *(_DWORD *)(v35 + 24);
    v42 = (int32x2_t *)(*(_QWORD *)&v37[12] + (*(_QWORD *)(v35 + 40) << 6));
    *(int32x2_t *)a4.i8 = *v42;
    *(int32x2_t *)a5.i8 = v42[2];
    v43 = (float32x2_t)vzip1_s32(*v42, *(int32x2_t *)a5.i8);
    v44 = a4;
    v44.i32[2] = v42[1].i32[0];
    v45 = a5;
    v45.i32[2] = v42[3].i32[0];
    a4.i32[0] = v42[5].i32[0];
    v46 = (float32x2_t)v42[4];
    v47 = (float32x2_t)vtrn2q_s32(v44, v45).u64[0];
    v44.i64[0] = vzip2q_s32(v44, v45).u64[0];
    *(int32x2_t *)v11.f32 = v42[6];
    v11.i32[2] = v42[7].i32[0];
    v48 = (int8x16_t)vnegq_f32(v11);
    *(float32x2_t *)v49.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v43, *(float *)v48.i32), v47, *(float32x2_t *)v11.f32, 1), *(float32x2_t *)v44.i8, v11, 2);
    *(float32x2_t *)v50.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v38, v41.f32[0]), v39, v41, 1), v40, v10.f32[0]);
    *(float32x2_t *)&v50.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a8, v41), a10, v41, 1), v10, a6);
    v51 = (int8x16_t)vaddq_f32(v50, a3);
    *(float32x2_t *)v50.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v43, *(float *)v51.i32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v47, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v47, 1), 0xCuLL), *(float32x2_t *)v51.i8, 1), *(float32x2_t *)v44.i8, (float32x4_t)v51, 2);
    a6 = vadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v49.f32);
    *(float32x2_t *)&v49.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v46, *(float32x2_t *)v48.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v46, 1), *(float32x2_t *)v11.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(float32x2_t *)a4.i8);
    a8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1);
    *(float32x2_t *)&v50.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v46, *(float32x2_t *)v51.i8), a8, v46, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), *(float32x2_t *)a4.i8);
    a3 = vaddq_f32(v50, v49);
    a3.i32[0] = a3.i32[2];
    v52 = vsub_f32(vdiv_f32(a6, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)&v50.u32[2], *(float32x2_t *)&v49.u32[2]), 0)), *(float32x2_t *)(v35 + 28));
    v55 = v52;
    v56 = a3.f32[2] > 0.0;
    if (a3.f32[2] > 0.0)
    {
      v53 = *(_QWORD *)(v35 + 80);
      if (!v53)
        goto LABEL_25;
      (*(void (**)(uint64_t, float32x2_t *, float32x4_t))(*(_QWORD *)v53 + 24))(v53, &v55, a3);
      if (v56)
      {
        v52 = v55;
LABEL_25:
        *(_DWORD *)v34 = vmla_lane_f32(vmul_f32(v52, v52), (float32x2_t)vdup_lane_s32((int32x2_t)v52, 1), v52, 1).u32[0];
        v34 += 4;
      }
    }
    v35 += 104;
  }
  while (v35 != v36);
  v33 = a2[16].n128_u64[0];
  v15 = a2[17].n128_u64[0];
LABEL_32:
  v54 = (char *)(v33 + 4 * v15);
  if (v34 != v54)
    a2[17].n128_u64[0] = v15 + ~((unint64_t)(v54 - v34 - 4) >> 2);
}

void sub_207DA4BDC(uint64_t a1, char *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  float32x2_t v29;
  char *v30;

  v4 = *((_QWORD *)a2 + 34);
  v5 = v4
     - 0x1084210842108421 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 128) - *(_QWORD *)(*(_QWORD *)a1 + 120)) >> 3);
  if (v4 >= v5)
    goto LABEL_23;
  v6 = *((_QWORD *)a2 + 33);
  if (v6 >= v5)
  {
    v22 = *((_QWORD *)a2 + 34);
    v23 = 0xEF7BDEF7BDEF7BDFLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 128) - *(_QWORD *)(*(_QWORD *)a1 + 120)) >> 3);
    if (v5 <= v4)
      goto LABEL_23;
LABEL_22:
    bzero((void *)(*((_QWORD *)a2 + 32) + 4 * v22), 4 * v23);
    goto LABEL_23;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x1084210842108421
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 128) - *(_QWORD *)(*(_QWORD *)a1 + 120)) >> 3);
  *((_QWORD *)a2 + 33) = v7;
  v8 = (char *)*((_QWORD *)a2 + 32);
  if (v7 >> 62)
    v9 = -1;
  else
    v9 = 4 * v7;
  v10 = (char *)operator new[](v9);
  v11 = v10;
  if (v4)
  {
    v12 = 0;
    if (v4 < 8)
      goto LABEL_14;
    if ((unint64_t)(v10 - v8) < 0x20)
      goto LABEL_14;
    v12 = v4 & 0xFFFFFFFFFFFFFFF8;
    v13 = v10 + 16;
    v14 = (__int128 *)(v8 + 16);
    v15 = v4 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v16 = *v14;
      *(v13 - 1) = *(v14 - 1);
      *v13 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v4 != v12)
    {
LABEL_14:
      v17 = v4 - v12;
      v18 = 4 * v12;
      v19 = &v8[4 * v12];
      v20 = &v10[v18];
      do
      {
        v21 = *(_DWORD *)v19;
        v19 += 4;
        *(_DWORD *)v20 = v21;
        v20 += 4;
        --v17;
      }
      while (v17);
    }
  }
  v22 = v4;
  if (v8 != a2 && v8)
  {
    operator delete[](v8);
    v22 = *((_QWORD *)a2 + 34);
  }
  *((_QWORD *)a2 + 32) = v11;
  v23 = v5 - v22;
  if (v5 > v22)
    goto LABEL_22;
LABEL_23:
  *((_QWORD *)a2 + 34) = v5;
  v24 = *((_QWORD *)a2 + 32);
  v25 = (char *)(v24 + 4 * v4);
  v26 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  while (v26 != v27)
  {
    if (*(_BYTE *)(v26 + 220))
    {
      v28 = *(int8x16_t *)(v26 + 168);
      v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
      *(_DWORD *)v25 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1), *(float32x2_t *)v28.i8, 1), v29, v29), (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 3), (float32x4_t)v28, 3), *(float32x2_t *)(v26 + 184), *(float32x2_t *)(v26 + 184)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v26 + 184), 1), *(float32x2_t *)(v26 + 184), 1).u32[0];
      v25 += 4;
    }
    v26 += 248;
  }
  v30 = (char *)(v24 + 4 * v5);
  if (v25 != v30)
    *((_QWORD *)a2 + 34) = v5 + ~((unint64_t)(v30 - v25 - 4) >> 2);
}

void sub_207DA4DB0(uint64_t a1, __n128 *a2, float32x4_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  float32x2_t v9;
  float32x2_t v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  size_t v18;
  __n128 *v19;
  __n128 *v20;
  unint64_t v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int32 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int32 v37;
  float32x2_t *v38;
  int32x2_t v39;
  float32x2_t v40;
  int32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  float32x2_t v57;
  unsigned __int32 *v58;
  _BYTE v59[24];
  char v60;
  float32x2_t v61;
  unsigned __int32 v62;
  float32x2_t v63;
  unsigned __int32 v64;
  float32x2_t v65;
  unsigned __int32 v66;
  uint64_t v67;
  int v68;
  __int32 v69;

  v13 = a2[17].n128_u64[0];
  v14 = v13
      - 0x1084210842108421 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 128) - *(_QWORD *)(*(_QWORD *)a1 + 120)) >> 3);
  if (v13 >= v14)
    goto LABEL_23;
  v15 = a2[16].n128_u64[1];
  if (v15 >= v14)
  {
    v31 = a2[17].n128_u64[0];
    v32 = 0xEF7BDEF7BDEF7BDFLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 128) - *(_QWORD *)(*(_QWORD *)a1 + 120)) >> 3);
    if (v14 <= v13)
      goto LABEL_23;
    goto LABEL_22;
  }
  v16 = 2 * v15;
  if (v16 <= v14)
    v16 = v13
        - 0x1084210842108421
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 128) - *(_QWORD *)(*(_QWORD *)a1 + 120)) >> 3);
  a2[16].n128_u64[1] = v16;
  v17 = (__n128 *)a2[16].n128_u64[0];
  if (v16 >> 62)
    v18 = -1;
  else
    v18 = 4 * v16;
  v19 = (__n128 *)operator new[](v18);
  v20 = v19;
  if (v13)
  {
    v21 = 0;
    if (v13 < 8)
      goto LABEL_14;
    if ((unint64_t)((char *)v19 - (char *)v17) < 0x20)
      goto LABEL_14;
    v21 = v13 & 0xFFFFFFFFFFFFFFF8;
    v22 = v19 + 1;
    v23 = v17 + 1;
    v24 = v13 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      a3 = (float32x4_t)v23[-1];
      v25 = *v23;
      v22[-1] = (__n128)a3;
      *v22 = v25;
      v22 += 2;
      v23 += 2;
      v24 -= 8;
    }
    while (v24);
    if (v13 != v21)
    {
LABEL_14:
      v26 = v13 - v21;
      v27 = 4 * v21;
      v28 = (char *)v17 + 4 * v21;
      v29 = (char *)v19 + v27;
      do
      {
        v30 = *(_DWORD *)v28;
        v28 += 4;
        *(_DWORD *)v29 = v30;
        v29 += 4;
        --v26;
      }
      while (v26);
    }
  }
  v31 = v13;
  if (v17 != a2 && v17)
  {
    operator delete[](v17);
    v31 = a2[17].n128_u64[0];
  }
  a2[16].n128_u64[0] = (unint64_t)v20;
  v32 = v14 - v31;
  if (v14 > v31)
LABEL_22:
    bzero((void *)(a2[16].n128_u64[0] + 4 * v31), 4 * v32);
LABEL_23:
  a2[17].n128_u64[0] = v14;
  v33 = a2[16].n128_i64[0];
  v34 = (unsigned __int32 *)(v33 + 4 * v13);
  v35 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v36 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  if (v35 == v36)
    goto LABEL_33;
  do
  {
    if (*(_QWORD *)(v35 + 144))
    {
      v38 = *(float32x2_t **)(v35 + 160);
      v39 = *(int32x2_t *)(v35 + 80);
      v40.i32[0] = *(_DWORD *)(v35 + 88);
      v41 = *(int32x2_t *)(v35 + 96);
      v42 = *(float32x2_t *)(v35 + 112);
      a3.i32[0] = *(_DWORD *)(v35 + 120);
      v43 = v38[4];
      LODWORD(a9) = v38[5].i32[0];
      v44 = v38[6];
      v9.i32[0] = v38[7].i32[0];
      v45 = v38[8];
      v10.i32[0] = v38[9].i32[0];
      v46 = (float32x2_t)vzip1_s32(v39, v41);
      v47 = (float32x2_t)vzip2_s32(v39, v41);
      v40.i32[1] = *(_DWORD *)(v35 + 104);
      v62 = vmla_f32(vmla_lane_f32(vmul_f32(v42, v43), (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1), v42, 1), *(float32x2_t *)&a9, *(float32x2_t *)a3.f32).u32[0];
      v61 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v46, v43.f32[0]), v47, v43, 1), v40, *(float *)&a9);
      v64 = vmla_f32(vmla_lane_f32(vmul_f32(v42, v44), (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1), v42, 1), v9, *(float32x2_t *)a3.f32).u32[0];
      v63 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v46, v44.f32[0]), v47, v44, 1), v40, v9.f32[0]);
      v66 = vmla_f32(vmla_lane_f32(vmul_f32(v42, v45), (float32x2_t)vdup_lane_s32((int32x2_t)v45, 1), v42, 1), v10, *(float32x2_t *)a3.f32).u32[0];
      v65 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v46, v45.f32[0]), v47, v45, 1), v40, v10.f32[0]);
      v67 = 0;
      v68 = 0;
      sub_207D9EF70(&v61, (float *)&v67);
      v50.i32[3] = v69;
      *(_DWORD *)&v59[8] = v68;
      *(_QWORD *)v59 = v67;
      *(float32x2_t *)v50.f32 = v38[10];
      v50.i32[2] = v38[11].i32[0];
      v51.i64[0] = *(_QWORD *)(v35 + 128);
      v51.i32[2] = *(_DWORD *)(v35 + 136);
      a3 = vsubq_f32(v50, v51);
      *(_DWORD *)&v59[20] = a3.i32[2];
      *(_QWORD *)&v59[12] = a3.i64[0];
      v52 = *(_QWORD *)(v35 + 144);
      v53.i64[0] = *(_QWORD *)&v59[16];
      a3.i64[0] = *(_QWORD *)(v52 + 28);
      v54 = *(float32x4_t *)(v52 + 12);
      a3.i64[0] = vmulq_f32(v53, a3).u64[0];
      v55 = vmulq_f32(*(float32x4_t *)v59, v54);
      *(float32x4_t *)v59 = v55;
      *(_QWORD *)&v59[16] = a3.i64[0];
      v60 = 1;
      v56 = *(_QWORD *)(v35 + 224);
      if (!v56)
      {
        v53.i32[0] = a3.i32[1];
        v54.i32[0] = v55.i32[3];
        v48.i32[0] = v55.i32[2];
        v49.i32[0] = v55.i32[1];
        v37 = vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), v49, v49), v48, v48), *(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32), *(float32x2_t *)a3.f32, *(float32x2_t *)a3.f32), *(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32).u32[0];
LABEL_26:
        *v34++ = v37;
        goto LABEL_27;
      }
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v56 + 24))(v56, v59);
      if (v60)
      {
        a3 = *(float32x4_t *)v59;
        v57 = (float32x2_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL).u64[0];
        a9 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&v59[16], 1));
        v37 = vmla_lane_f32(vmla_f32(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)a3.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59, 1), *(float32x2_t *)v59, 1), v57, v57), (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v59, 3), *(float32x4_t *)v59, 3), *(float32x2_t *)&v59[16], *(float32x2_t *)&v59[16]), *(float32x2_t *)&a9, *(float32x2_t *)&v59[16], 1).u32[0];
        goto LABEL_26;
      }
    }
LABEL_27:
    v35 += 248;
  }
  while (v35 != v36);
  v33 = a2[16].n128_i64[0];
  v14 = a2[17].n128_u64[0];
LABEL_33:
  v58 = (unsigned __int32 *)(v33 + 4 * v14);
  if (v34 != v58)
    a2[17].n128_u64[0] = v14 + ~((unint64_t)((char *)v58 - (char *)v34 - 4) >> 2);
}

void sub_207DA5124(uint64_t a1, uint64_t a2, int a3, float32x4_t a4, int32x4_t a5, int32x4_t a6, float32x2_t a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  unint64_t v14;
  size_t v15;
  float32x4_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  __n128 *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  __n128 v34[16];
  void *__p;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  __p = v34;
  v36 = 64;
  v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3);
  if (v14 <= 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3))
    v14 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v14 >= 0x41)
  {
    if (v14 <= 0x80)
      v14 = 128;
    v36 = v14;
    if (v14 >> 62)
      v15 = -1;
    else
      v15 = 4 * v14;
    __p = operator new[](v15);
  }
  v37 = 0;
  if (*(_BYTE *)(a1 + 300))
  {
    v38 = a1 + 24;
    sub_207D944C8((uint64_t)&v38, (char *)v34);
  }
  else
  {
    v38 = a1 + 24;
    sub_207DA48CC((uint64_t)&v38, v34, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  v23 = *(float *)&a3;
  v24 = v37;
  if (v37)
  {
    v25 = 4 * (v37 >> 1);
    sub_207D949A0((float *)__p, (float *)((char *)__p + v25), (float *)__p + v37);
    v26 = (float *)__p;
    v27 = *(float *)((char *)__p + v25);
    if ((v24 & 1) == 0)
    {
      v28 = (v24 >> 1) - 1;
      if (v28 != v24)
      {
        sub_207D949A0((float *)__p, (float *)__p + v28, (float *)__p + v24);
        v26 = (float *)__p;
      }
      LODWORD(v17) = 0.5;
      v27 = (float)(v27 + v26[v28]) * 0.5;
    }
    v16.f32[0] = sqrtf(v27) * v23;
    *(_DWORD *)a2 = v16.i32[0];
    v37 = 0;
    if (*(_BYTE *)(a1 + 300))
      goto LABEL_19;
  }
  else
  {
    v16.i32[0] = 1.0;
    *(float *)a2 = 1.0;
    v37 = 0;
    if (*(_BYTE *)(a1 + 300))
    {
LABEL_19:
      v38 = a1 + 24;
      sub_207DA4BDC((uint64_t)&v38, (char *)v34);
      goto LABEL_22;
    }
  }
  v38 = a1 + 24;
  sub_207DA4DB0((uint64_t)&v38, v34, v16, v17, v18, v19, v20, v21, v22);
LABEL_22:
  v29 = v37;
  v30 = (__n128 *)__p;
  if (!v37)
  {
    *(float *)(a2 + 4) = 1.0;
    v37 = 0;
    if (v30 == v34)
      return;
    goto LABEL_30;
  }
  v31 = 4 * (v37 >> 1);
  sub_207D949A0((float *)__p, (float *)((char *)__p + v31), (float *)__p + v37);
  v30 = (__n128 *)__p;
  v32 = *(float *)((char *)__p + v31);
  if ((v29 & 1) == 0)
  {
    v33 = (v29 >> 1) - 1;
    if (v33 != v29)
    {
      sub_207D949A0((float *)__p, (float *)__p + v33, (float *)__p + v29);
      v30 = (__n128 *)__p;
    }
    v32 = (float)(v32 + v30->n128_f32[v33]) * 0.5;
  }
  *(float *)(a2 + 4) = sqrtf(v32) * v23;
  v37 = 0;
  if (v30 != v34)
  {
LABEL_30:
    if (v30)
      operator delete[](v30);
  }
}

void sub_207DA536C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *__p,uint64_t a42,uint64_t a43)
{
  a43 = 0;
  if (__p != &a9)
  {
    if (__p)
      operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207DA5394(uint64_t a1, uint64_t a2, _DWORD **a3, float32x4_t a4, int32x4_t a5, int32x4_t a6, float32x2_t a7, double a8, float32x2_t a9, double a10, float32x2_t a11)
{
  unint64_t v14;
  size_t v15;
  float32x4_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  __n128 *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  __n128 v33[16];
  void *__p;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  __p = v33;
  v35 = 64;
  v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3);
  if (v14 <= 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3))
    v14 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v14 >= 0x41)
  {
    if (v14 <= 0x80)
      v14 = 128;
    v35 = v14;
    if (v14 >> 62)
      v15 = -1;
    else
      v15 = 4 * v14;
    __p = operator new[](v15);
  }
  v36 = 0;
  if (*(_BYTE *)(a1 + 300))
  {
    v37 = a1 + 24;
    sub_207D944C8((uint64_t)&v37, (char *)v33);
  }
  else
  {
    v37 = a1 + 24;
    sub_207DA48CC((uint64_t)&v37, v33, a4, a5, a6, a7, a8, a9, a10, a11);
  }
  v23 = v36;
  if (v36)
  {
    v24 = 4 * (v36 >> 1);
    sub_207D949A0((float *)__p, (float *)((char *)__p + v24), (float *)__p + v36);
    v25 = (float *)__p;
    v26 = *(float *)((char *)__p + v24);
    if ((v23 & 1) == 0)
    {
      v27 = (v23 >> 1) - 1;
      if (v27 != v23)
      {
        sub_207D949A0((float *)__p, (float *)__p + v27, (float *)__p + v23);
        v25 = (float *)__p;
      }
      v26 = (float)(v26 + v25[v27]) * 0.5;
    }
    LODWORD(v17) = **a3;
    v16.f32[0] = sqrtf(v26) * *(float *)&v17;
    *(_DWORD *)a2 = v16.i32[0];
    v36 = 0;
    if (*(_BYTE *)(a1 + 300))
      goto LABEL_19;
  }
  else
  {
    v16.i32[0] = 1.0;
    *(float *)a2 = 1.0;
    v36 = 0;
    if (*(_BYTE *)(a1 + 300))
    {
LABEL_19:
      v37 = a1 + 24;
      sub_207DA4BDC((uint64_t)&v37, (char *)v33);
      goto LABEL_22;
    }
  }
  v37 = a1 + 24;
  sub_207DA4DB0((uint64_t)&v37, v33, v16, v17, v18, v19, v20, v21, v22);
LABEL_22:
  v28 = v36;
  v29 = (__n128 *)__p;
  if (!v36)
  {
    *(float *)(a2 + 4) = 1.0;
    v36 = 0;
    if (v29 == v33)
      return;
    goto LABEL_30;
  }
  v30 = 4 * (v36 >> 1);
  sub_207D949A0((float *)__p, (float *)((char *)__p + v30), (float *)__p + v36);
  v29 = (__n128 *)__p;
  v31 = *(float *)((char *)__p + v30);
  if ((v28 & 1) == 0)
  {
    v32 = (v28 >> 1) - 1;
    if (v32 != v28)
    {
      sub_207D949A0((float *)__p, (float *)__p + v32, (float *)__p + v28);
      v29 = (__n128 *)__p;
    }
    v31 = (float)(v31 + v29->n128_f32[v32]) * 0.5;
  }
  *(float *)(a2 + 4) = sqrtf(v31) * *((float *)*a3 + 1);
  v36 = 0;
  if (v29 != v33)
  {
LABEL_30:
    if (v29)
      operator delete[](v29);
  }
}

void sub_207DA55E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *__p,uint64_t a42,uint64_t a43)
{
  a43 = 0;
  if (__p != &a9)
  {
    if (__p)
      operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207DA5610(uint64_t a1, char *a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 192) || (v23 = *(_QWORD *)(a1 + 24), v24 = *(_QWORD *)(a1 + 32), v23 == v24))
  {
LABEL_2:
    v4 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v23 + 8) + 4) & 6) == 0)
    {
      v23 += 16;
      if (v23 == v24)
        goto LABEL_2;
    }
    v25 = *(_QWORD *)(a1 + 144);
    v26 = *(_QWORD *)(a1 + 152);
    if (v25 == v26)
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v27 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 160) + 4) & 6) == 0)
          v4 = ++v27;
        v25 += 248;
      }
      while (v25 != v26);
    }
  }
  *a3 += v4;
  v5 = *((_QWORD *)a2 + 66);
  v6 = v5 + 1;
  v7 = *((_QWORD *)a2 + 65);
  if (v5 + 1 <= v7)
  {
    v12 = (char *)*((_QWORD *)a2 + 64);
  }
  else
  {
    v8 = 2 * v7;
    if (v8 > v6)
      v6 = v8;
    *((_QWORD *)a2 + 65) = v6;
    v9 = (char *)*((_QWORD *)a2 + 64);
    if (v6 >> 61)
      v10 = -1;
    else
      v10 = 8 * v6;
    v11 = (char *)operator new[](v10);
    v12 = v11;
    if (v5)
    {
      v13 = 0;
      if (v5 < 4)
        goto LABEL_15;
      if ((unint64_t)(v11 - v9) < 0x20)
        goto LABEL_15;
      v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = v11 + 16;
      v15 = (__int128 *)(v9 + 16);
      v16 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v5 != v13)
      {
LABEL_15:
        v18 = v5 - v13;
        v19 = 8 * v13;
        v20 = &v9[8 * v13];
        v21 = &v11[v19];
        do
        {
          v22 = *(_QWORD *)v20;
          v20 += 8;
          *(_QWORD *)v21 = v22;
          v21 += 8;
          --v18;
        }
        while (v18);
      }
    }
    if (v9 != a2 && v9)
    {
      operator delete[](v9);
      v5 = *((_QWORD *)a2 + 66);
    }
    *((_QWORD *)a2 + 64) = v12;
  }
  *(_QWORD *)&v12[8 * v5] = v4;
  ++*((_QWORD *)a2 + 66);
}

void sub_207DA57BC(uint64_t a1, char *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 192) || (v23 = *(_QWORD *)(a1 + 24), v24 = *(_QWORD *)(a1 + 32), v23 == v24))
  {
LABEL_2:
    v4 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3);
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v23 + 8) + 4) & 6) == 0)
    {
      v23 += 16;
      if (v23 == v24)
        goto LABEL_2;
    }
    v25 = *(_QWORD *)(a1 + 120);
    v26 = *(_QWORD *)(a1 + 128);
    if (v25 == v26)
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v27 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 48) + 4) & 6) == 0)
          v4 = ++v27;
        v25 += 104;
      }
      while (v25 != v26);
    }
  }
  *a3 += v4;
  v5 = *((_QWORD *)a2 + 66);
  v6 = v5 + 1;
  v7 = *((_QWORD *)a2 + 65);
  if (v5 + 1 <= v7)
  {
    v12 = (char *)*((_QWORD *)a2 + 64);
  }
  else
  {
    v8 = 2 * v7;
    if (v8 > v6)
      v6 = v8;
    *((_QWORD *)a2 + 65) = v6;
    v9 = (char *)*((_QWORD *)a2 + 64);
    if (v6 >> 61)
      v10 = -1;
    else
      v10 = 8 * v6;
    v11 = (char *)operator new[](v10);
    v12 = v11;
    if (v5)
    {
      v13 = 0;
      if (v5 < 4)
        goto LABEL_15;
      if ((unint64_t)(v11 - v9) < 0x20)
        goto LABEL_15;
      v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = v11 + 16;
      v15 = (__int128 *)(v9 + 16);
      v16 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v5 != v13)
      {
LABEL_15:
        v18 = v5 - v13;
        v19 = 8 * v13;
        v20 = &v9[8 * v13];
        v21 = &v11[v19];
        do
        {
          v22 = *(_QWORD *)v20;
          v20 += 8;
          *(_QWORD *)v21 = v22;
          v21 += 8;
          --v18;
        }
        while (v18);
      }
    }
    if (v9 != a2 && v9)
    {
      operator delete[](v9);
      v5 = *((_QWORD *)a2 + 66);
    }
    *((_QWORD *)a2 + 64) = v12;
  }
  *(_QWORD *)&v12[8 * v5] = v4;
  ++*((_QWORD *)a2 + 66);
}

void sub_207DA5968(uint64_t a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int i;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  size_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 192))
  {
    for (i = 0; v7 != v8; v7 += 16)
    {
      v10 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v10 + 4) & 6) == 0)
        i += *(unsigned __int8 *)(v10 + 20);
    }
  }
  else if (v7 == v8)
  {
    i = 0;
  }
  else
  {
    v12 = 0;
    i = 0;
    do
    {
      v13 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v13 + 4) & 6) != 0)
        v12 = 1;
      i += *(unsigned __int8 *)(v13 + 20);
      v7 += 16;
    }
    while (v7 != v8);
    if (v12)
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
      v14 = *(_QWORD *)(a1 + 120);
      v15 = *(_QWORD *)(a1 + 128);
      while (v14 != v15)
      {
        v16 = *(_QWORD *)(v14 + 48);
        if (*(_BYTE *)(v14 + 96) || (*(_BYTE *)(v16 + 4) & 6) != 0)
          sub_207D8B464(a1 + 272, v16);
        v14 += 104;
      }
      v17 = *(_QWORD *)(a1 + 144);
      v18 = *(_QWORD *)(a1 + 152);
      while (v17 != v18)
      {
        v19 = *(_QWORD *)(v17 + 160);
        if (*(_BYTE *)(v17 + 240) || (*(_BYTE *)(v19 + 4) & 6) != 0)
          sub_207D8B464(a1 + 272, v19);
        v17 += 248;
      }
      v20 = (uint64_t)(*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 2;
      if (v20 <= i)
        i -= v20;
      else
        i = 0;
      v21 = *(_QWORD *)(a1 + 120);
      v22 = *(_QWORD *)(a1 + 128);
      while (v21 != v22)
      {
        v23 = *(_QWORD *)(v21 + 48);
        if (*(_BYTE *)(v21 + 96) || (*(_BYTE *)(v23 + 4) & 6) != 0)
          ++*(_DWORD *)(v23 + 8);
        v21 += 104;
      }
      v24 = *(_QWORD *)(a1 + 144);
      v25 = *(_QWORD *)(a1 + 152);
      while (v24 != v25)
      {
        v26 = *(_QWORD *)(v24 + 160);
        if (*(_BYTE *)(v24 + 240) || (*(_BYTE *)(v26 + 4) & 6) != 0)
          ++*(_DWORD *)(v26 + 8);
        v24 += 248;
      }
    }
  }
  *a3 += i;
  *a4 += 6 * i;
  v27 = *((_QWORD *)a2 + 66);
  v28 = v27 + 1;
  v29 = *((_QWORD *)a2 + 65);
  if (v27 + 1 <= v29)
  {
    v34 = (char *)*((_QWORD *)a2 + 64);
  }
  else
  {
    v30 = 2 * v29;
    if (v30 > v28)
      v28 = v30;
    *((_QWORD *)a2 + 65) = v28;
    v31 = (char *)*((_QWORD *)a2 + 64);
    if (v28 >> 61)
      v32 = -1;
    else
      v32 = 8 * v28;
    v33 = (char *)operator new[](v32);
    v34 = v33;
    if (v27)
    {
      v35 = 0;
      if (v27 < 4)
        goto LABEL_57;
      if ((unint64_t)(v33 - v31) < 0x20)
        goto LABEL_57;
      v35 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      v36 = v33 + 16;
      v37 = (__int128 *)(v31 + 16);
      v38 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *v36 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 4;
      }
      while (v38);
      if (v27 != v35)
      {
LABEL_57:
        v40 = v27 - v35;
        v41 = 8 * v35;
        v42 = &v31[8 * v35];
        v43 = &v33[v41];
        do
        {
          v44 = *(_QWORD *)v42;
          v42 += 8;
          *(_QWORD *)v43 = v44;
          v43 += 8;
          --v40;
        }
        while (v40);
      }
    }
    if (v31 != a2 && v31)
    {
      operator delete[](v31);
      v27 = *((_QWORD *)a2 + 66);
    }
    *((_QWORD *)a2 + 64) = v34;
  }
  *(_QWORD *)&v34[8 * v27] = i;
  ++*((_QWORD *)a2 + 66);
}

void sub_207DA5C34(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[15];
  v3 = v1[16];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (*(_BYTE *)(v2 + 96) || (*(_BYTE *)(v4 + 4) & 6) != 0)
      ++*(_DWORD *)(v4 + 8);
    v2 += 104;
  }
  v5 = v1[18];
  v6 = v1[19];
  while (v5 != v6)
  {
    v7 = *(_QWORD *)(v5 + 160);
    if (*(_BYTE *)(v5 + 240) || (*(_BYTE *)(v7 + 4) & 6) != 0)
      ++*(_DWORD *)(v7 + 8);
    v5 += 248;
  }
  _Unwind_Resume(a1);
}

void sub_207DA5CB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = (char *)(v2 + 640);
  v5 = (_QWORD *)(v2 + 632);
  sub_207DA57BC(*a1, (char *)(v2 + 640), (_QWORD *)(v2 + 632));
  sub_207DA5610(v3, v4, v5);
  sub_207DA5968(*a1, (char *)(a1[1] + 1192), (_QWORD *)(a1[1] + 1176), (_QWORD *)(a1[1] + 1184));
}

uint64_t sub_207DA5D14(uint64_t result, float *a2, uint64_t a3, double a4, float64x2_t a5, int8x16_t a6, int32x4_t a7, int32x4_t a8, float64x2_t a9, float64x2_t a10)
{
  float *v12;
  float64x2_t v13;
  float v14;
  float v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  float64_t v21;
  float v22;
  float64x2_t v23;
  float64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  uint64_t v31;

  v12 = (float *)result;
  v31 = *MEMORY[0x24BDAC8D0];
  v13.f64[1] = 0.0;
  v23 = (float64x2_t)xmmword_208236530;
  v24 = 1.0;
  v14 = *(float *)result;
  v15 = *a2;
  v16 = *(_DWORD *)(a3 + 992);
  if (v16 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      abort();
    v16 = *(_DWORD *)(a3 + 992);
    v17 = v14;
    v18 = v15;
    if (v16 <= 7)
      goto LABEL_3;
  }
  else
  {
    v17 = v14;
    v18 = v15;
    if (v16 <= 7)
    {
LABEL_3:
      if (!v16)
      {
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
        abort();
      }
      goto LABEL_8;
    }
  }
  if (v16 <= 0xD)
  {
LABEL_8:
    *(double *)a7.i64 = *(double *)(a3 + 88) + *(double *)(a3 + 72) * v17 + *(double *)(a3 + 80) * v18;
    a5.f64[0] = *(float64_t *)(a3 + 104);
    a6.i64[0] = *(_QWORD *)(a3 + 112);
    v13.f64[0] = a5.f64[0] * v18 + *(double *)a6.i64;
    *(_QWORD *)&v30.f64[0] = a7.i64[0];
    v30.f64[1] = v13.f64[0];
    goto LABEL_9;
  }
  a5.f64[0] = *(double *)(a3 + 88) + *(double *)(a3 + 72) * v17 + *(double *)(a3 + 80) * v18;
  a6.i64[0] = *(_QWORD *)(a3 + 104);
  a7.i64[0] = *(_QWORD *)(a3 + 112);
  v13.f64[0] = *(double *)a6.i64 * v18 + *(double *)a7.i64;
  v30.f64[0] = a5.f64[0];
  v30.f64[1] = v13.f64[0];
  if (v16 != 14)
  {
    v25 = &v23;
    v26 = &v30;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    if (v16 != -1)
      goto LABEL_38;
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      abort();
    v16 = *(_DWORD *)(a3 + 992);
    if (v16 <= 7)
      goto LABEL_10;
LABEL_21:
    if (v16 <= 0xB)
    {
      if (v16 > 9)
      {
        if (v16 == 10)
          result = sub_2081121D8((uint64_t)&v23, (uint64_t)&v30, a3 + 168, (double *)(a3 + 280), 0x14u, (*(double *)a3 + *(double *)(a3 + 32)) * 0.5);
        else
          result = sub_208116474(a3, (uint64_t)&v23, &v30, 0, 0, 0);
      }
      else if (v16 == 9)
      {
        result = sub_2081158C4(a3, (uint64_t)&v23, &v30, 0, 0, 0, v13.f64[0], a5.f64[0], *(double *)a6.i64, a7, a8);
      }
      else
      {
        v19 = sqrt(v30.f64[0] * v30.f64[0] + v30.f64[1] * v30.f64[1]);
        result = sub_2081112B8((uint64_t)&v23, v30.f64, (double *)(a3 + 168), 20, v19, v19, *(double *)a6.i64, a7, a8);
      }
      goto LABEL_45;
    }
    if (v16 <= 0xD)
    {
      if (v16 == 13)
      {
        result = sub_208118068((double *)a3, (uint64_t)&v23, (uint64_t)&v30, 0, 0, 0);
      }
      else
      {
        v23 = 0uLL;
        v24 = 0.0;
      }
      goto LABEL_45;
    }
    if (v16 == 14)
    {
      result = sub_2081122E4((uint64_t)&v23, (uint64_t)&v30, (double *)(a3 + 168), (double *)(a3 + 392), 0x14u, (*(double *)a3 + *(double *)(a3 + 32)) * 0.5);
      goto LABEL_45;
    }
LABEL_38:
    result = sub_208117124(a3, (uint64_t)&v23, &v30, 0, 0, 0);
    goto LABEL_45;
  }
LABEL_9:
  v25 = &v23;
  v26 = &v30;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  if (v16 > 7)
    goto LABEL_21;
LABEL_10:
  if (v16 > 3)
  {
    if (v16 > 5)
    {
      if (v16 == 6)
        result = sub_208117DD4((double *)a3, (uint64_t)&v23, v30.f64, 0, 0, 0);
      else
        result = sub_208114CF4(a3, (uint64_t)&v23, &v30, 0, 0, 0, v13.f64[0], a5.f64[0], a6, (int8x16_t)a7, *(double *)a8.i64, a9.f64[0], a10);
    }
    else if (v16 == 5)
    {
      result = sub_208113D70((uint64_t)&v23, v30.f64, a3 + 168, 5);
    }
    else
    {
      if (!*(_BYTE *)(a3 + 468))
      {
        *(_QWORD *)&v13.f64[0] = sub_208113224(a3 + 204, (double *)(a3 + 168), 0x32uLL, (int8x16_t)v13, a5.f64[0], a6, (int8x16_t)a7).u64[0];
        *(_BYTE *)(a3 + 468) = 1;
      }
      result = sub_207D34B98((uint64_t)&v23, (uint64_t)&v30, (int64x2_t *)(a3 + 168), (float *)(a3 + 204), 0, 5, v13.f64[0], a5.f64[0], *(double *)a6.i64, *(double *)a7.i64, *(double *)a8.i64, a9.f64[0], a10);
    }
  }
  else if (v16 > 1)
  {
    if (v16 == 2)
      result = sub_207D34740((uint64_t)&v25, a3);
    else
      result = sub_208111090((uint64_t)&v23, v30.f64, (int64x2_t *)(a3 + 168), 20, v13.f64[0], a5.f64[0], *(double *)a6.i64, *(double *)a7.i64, (int64x2_t)a8, a9);
  }
  else
  {
    if (!v16)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
      abort();
    }
    v13.f64[1] = v30.f64[1];
    v23 = v30;
    v24 = 1.0;
  }
LABEL_45:
  v13.f64[0] = v24;
  a5.f64[0] = v24;
  v23 = vdivq_f64(v23, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24, 0));
  *(_QWORD *)&v24 = *(_OWORD *)&vdivq_f64(a5, v13);
  v20 = *(_DWORD *)(a3 + 992);
  if (v20 != -1)
  {
    if (v20 > 7)
      goto LABEL_51;
    goto LABEL_50;
  }
  result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
  if ((_DWORD)result)
    abort();
  v20 = *(_DWORD *)(a3 + 992);
  if (v20 <= 7)
  {
LABEL_50:
    if (!v20)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
      abort();
    }
  }
LABEL_51:
  v21 = v23.f64[1] * *(double *)(a3 + 32) + *(double *)(a3 + 40);
  v22 = *(double *)a3 * v23.f64[0] + *(double *)(a3 + 8) * v23.f64[1] + *(double *)(a3 + 16);
  *v12 = v22;
  *(float *)&v21 = v21;
  *a2 = *(float *)&v21;
  return result;
}

void sub_207DA62C4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DA632C()
{
  return 3;
}

uint64_t sub_207DA6334(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207DA633C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_207DA6354(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_207DA63D8(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v10 = (void **)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 120);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 128);
    v13 = *(void **)(a1 + 120);
    if (v12 != v11)
    {
      v14 = *(_QWORD *)(a1 + 128);
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = *v10;
    }
    *(_QWORD *)(a1 + 128) = v11;
    operator delete(v13);
    *v10 = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v17 = *(void **)(a1 + 144);
  if (v17)
  {
    *(_QWORD *)(a1 + 152) = v17;
    operator delete(v17);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  return a1;
}

uint64_t sub_207DA65C0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, char **a6, uint64_t a7, int a8)
{
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char **v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int64_t v26;
  char **v27;
  size_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  int v36;
  unint64_t *v37;
  int64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char **v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  int32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x2_t v75;
  unint64_t v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  float32x2_t *v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  unsigned __int32 v89;
  int8x16_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  char *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  const double *v131;
  double *v132;
  uint64_t v133;
  const double *v134;
  double *v135;
  int v136;
  uint64_t v137;
  float *v138;
  unint64_t v139;
  uint64_t v140;
  float *v141;
  float *v142;
  uint64_t v143;
  unint64_t v144;
  float v145;
  uint64_t v146;
  unint64_t v147;
  char **v148;
  float v149;
  char v150;
  int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char **v155;
  char *v156;
  int v157;
  int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  char **v162;
  char *v163;
  float *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  int32x4_t v172;
  int32x4_t v173;
  float32x4_t v174;
  float32x2_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  float v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  float32x2_t *v183;
  float32x4_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int32x4_t v187;
  int8x16_t v188;
  float32x4_t v189;
  unsigned __int32 v190;
  int8x16_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  char *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  float *v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  unsigned __int8 v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  int64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  int64_t v233;
  unint64_t v234;
  char *v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  BOOL v242;
  BOOL v243;
  BOOL v244;
  BOOL v245;
  BOOL v246;
  BOOL v247;
  BOOL v248;
  BOOL v249;
  BOOL v250;
  uint64_t v251;
  uint64_t v252;
  const double *v253;
  double *v254;
  uint64_t v255;
  const double *v256;
  double *v257;
  float v258;
  uint64_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  char *v263;
  char *v264;
  BOOL v265;
  uint64_t v266;
  uint64_t v267;
  _OWORD *v268;
  __int128 *v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  float *v281;
  uint64_t v282;
  char *v283;
  float *v284;
  void *v285;
  float *v286;
  void *v287;
  uint64_t v288;
  char **v289;
  float v290;
  int v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  char *v295;
  int v297;
  _OWORD *v298;
  char **v299;
  _BYTE *v300;
  float *v301;
  int v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  float *v308;
  char *__p;
  char **__pa;
  char *v312;
  uint64_t v313;
  _QWORD *v314;
  char *v315;
  char **v316;
  unint64_t v317;
  char **v318;
  _BYTE v322[76];
  void *v323[2];
  char *v324;
  _QWORD v325[2];
  _BYTE v326[36];
  __int128 v327;
  __int128 v328;
  unint64_t *v329;
  unint64_t *v330;
  unint64_t *v331;
  unint64_t v332;
  char *v333;
  char *v334;
  __int128 v335;
  uint64_t v336;

  kdebug_trace();
  *a1 = 0;
  a1[80] = 0;
  v13 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v307 = a2;
  v297 = a8;
  if (v12 == v13)
  {
    v315 = 0;
    v14 = 0;
    v15 = *a4;
    v16 = a4[1];
    memset(v326, 0, 24);
    v17 = v16 - v15;
    if (v16 != v15)
      goto LABEL_4;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 6) > 0x276276276276276)
      sub_207CA420C();
    v14 = (char **)operator new(0x5555555555555578 * ((v12 - v13) >> 6));
    v315 = (char *)&v14[0xAAAAAAAAAAAAAAFLL * ((v12 - v13) >> 6)];
    v15 = *a4;
    v16 = a4[1];
    memset(v326, 0, 24);
    v17 = v16 - v15;
    if (v16 != v15)
    {
LABEL_4:
      v18 = 0x8F9C18F9C18F9C19 * (v17 >> 3);
      if (v18 >= 0x71C71C71C71C71DLL)
        sub_207CA420C();
      *(_QWORD *)v326 = operator new(0x31F3831F3831F384 * (v17 >> 3));
      *(_QWORD *)&v326[8] = *(_QWORD *)v326;
      *(_QWORD *)&v326[16] = *(_QWORD *)v326 + 36 * v18;
      v332 = (unint64_t)v326;
      do
      {
        *(_OWORD *)v322 = *(_OWORD *)(v15 + 92);
        *(_OWORD *)&v322[16] = *(_OWORD *)(v15 + 108);
        *(_DWORD *)&v322[32] = *(_DWORD *)(v15 + 124);
        sub_207DC443C((char ***)&v332, (__int128 *)v322);
        v15 += 328;
      }
      while (v15 != v16);
      v19 = v307;
      v13 = *(_QWORD *)(v307 + 72);
      v20 = *(_QWORD *)(v307 + 80);
      v299 = a6;
      v300 = a1;
      v335 = *(_OWORD *)v326;
      v336 = *(_QWORD *)&v326[16];
      if (v20 != v13)
        goto LABEL_8;
      goto LABEL_55;
    }
  }
  v19 = v307;
  v299 = a6;
  v300 = a1;
  v335 = 0u;
  v336 = v17;
  if (v12 != v13)
  {
LABEL_8:
    v21 = 0;
    v22 = v14;
    while (1)
    {
      __p = (char *)v22;
      v23 = v13 + 192 * v21;
      v332 = 0;
      v333 = 0;
      v334 = 0;
      v25 = *(_BYTE **)(v23 + 96);
      v24 = *(_BYTE **)(v23 + 104);
      v26 = v24 - v25;
      if (v24 == v25)
      {
        v27 = 0;
        v29 = 0;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (v26 >> 2) >= 0x1555555555555556)
          sub_207CA420C();
        v27 = (char **)operator new(v26);
        v332 = (unint64_t)v27;
        v334 = (char *)v27 + 4 * (v26 >> 2);
        v28 = 12 * ((v26 - 12) / 0xCuLL) + 12;
        memcpy(v27, v25, v28);
        v29 = (char *)v27 + v28;
        v333 = (char *)v27 + v28;
      }
      v30 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (char *)v27) >> 2);
      v31 = a5[1] - *a5;
      v330 = 0;
      v331 = 0;
      v32 = (v31 >> 6) * v30;
      v329 = 0;
      if (v32)
      {
        if (v32 >> 61)
          sub_207CA420C();
        v33 = (unint64_t *)operator new(8 * v32);
        v34 = &v33[v32];
        v329 = v33;
        v331 = v34;
        bzero(v33, ((v31 >> 3) * v30) & 0xFFFFFFFFFFFFFFF8);
        v330 = v34;
      }
      v19 = v307;
      v35 = *(_QWORD *)(v307 + 384);
      v325[0] = v35;
      v325[1] = v27;
      if (!v27
        && v35
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v322[0] = 0;
      v322[64] = 0;
      sub_207D7A8F4((uint64_t)v325, (uint64_t)a5, (uint64_t)&v335, a3, (uint64_t)v322, 0, *(_QWORD *)(v307 + 608), 0, &v329, *(_QWORD *)(v307 + 360), *(_QWORD *)(v307 + 352), *(_BYTE *)(v307 + 653), *(_QWORD *)(v307 + 672));
      *(_QWORD *)v322 = v21;
      v36 = *(_DWORD *)v326;
      *(_DWORD *)&v322[8] = *(_DWORD *)v326;
      *(_OWORD *)&v322[12] = *(_OWORD *)&v326[4];
      *(_OWORD *)&v322[28] = *(_OWORD *)&v326[20];
      *(_OWORD *)&v322[44] = v327;
      *(_OWORD *)&v322[60] = v328;
      v323[1] = 0;
      v324 = 0;
      v323[0] = 0;
      v37 = v329;
      v38 = (char *)v330 - (char *)v329;
      if (v330 == v329)
      {
        v40 = 0;
        v39 = 0;
        if (v14 >= (char **)v315)
          goto LABEL_28;
      }
      else
      {
        if (v38 < 0)
          sub_207CA420C();
        v39 = (char *)operator new((char *)v330 - (char *)v329);
        v40 = &v39[8 * (v38 >> 3)];
        v323[0] = v39;
        v324 = v40;
        memcpy(v39, v37, v38);
        v323[1] = v40;
        if (v14 >= (char **)v315)
        {
LABEL_28:
          v45 = 0x4EC4EC4EC4EC4EC5 * (((char *)v14 - __p) >> 3) + 1;
          if (v45 > 0x276276276276276)
            sub_207CA420C();
          if (0x9D89D89D89D89D8ALL * ((v315 - __p) >> 3) > v45)
            v45 = 0x9D89D89D89D89D8ALL * ((v315 - __p) >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v315 - __p) >> 3)) >= 0x13B13B13B13B13BLL)
            v46 = 0x276276276276276;
          else
            v46 = v45;
          if (v46)
          {
            if (v46 > 0x276276276276276)
              sub_207CA3AB8();
            v47 = (char *)operator new(104 * v46);
          }
          else
          {
            v47 = 0;
          }
          v48 = &v47[8 * (((char *)v14 - __p) >> 3)];
          *((_DWORD *)v48 + 2) = v36;
          v49 = *(_OWORD *)&v326[20];
          *(_OWORD *)(v48 + 12) = *(_OWORD *)&v326[4];
          *(_OWORD *)(v48 + 28) = v49;
          v50 = v328;
          *(_OWORD *)(v48 + 44) = v327;
          *(_QWORD *)v48 = v21;
          *(_OWORD *)(v48 + 60) = v50;
          *((_QWORD *)v48 + 10) = v39;
          *((_QWORD *)v48 + 11) = v40;
          *((_QWORD *)v48 + 12) = v40;
          v323[1] = 0;
          v324 = 0;
          v323[0] = 0;
          if (v14 == (char **)__p)
          {
            v57 = &v47[8 * (((char *)v14 - __p) >> 3)];
            if (v14)
              goto LABEL_46;
          }
          else
          {
            v51 = 0;
            do
            {
              v52 = &v48[v51 * 8];
              v53 = &v14[v51];
              *((_QWORD *)v52 - 13) = v14[v51 - 13];
              *((_DWORD *)v52 - 24) = v14[v51 - 12];
              v54 = *(_OWORD *)((char *)&v14[v51 - 11] - 4);
              v55 = *(_OWORD *)((char *)&v14[v51 - 9] - 4);
              v56 = *(_OWORD *)((char *)&v14[v51 - 7] - 4);
              *(_OWORD *)(v52 - 44) = *(_OWORD *)((char *)&v14[v51 - 5] - 4);
              *(_OWORD *)(v52 - 60) = v56;
              *(_OWORD *)(v52 - 76) = v55;
              *(_OWORD *)(v52 - 92) = v54;
              *((_QWORD *)v52 - 2) = 0;
              *((_QWORD *)v52 - 1) = 0;
              *(_OWORD *)(v52 - 24) = *(_OWORD *)&v14[v51 - 3];
              *((_QWORD *)v52 - 1) = v14[v51 - 1];
              *(v53 - 3) = 0;
              *(v53 - 2) = 0;
              *(v53 - 1) = 0;
              v51 -= 13;
            }
            while (&v14[v51] != (char **)__p);
            v57 = &v48[v51 * 8];
            do
            {
              v58 = *(v14 - 3);
              if (v58)
              {
                *(v14 - 2) = v58;
                operator delete(v58);
              }
              v14 -= 13;
            }
            while (v14 != (char **)__p);
            v14 = (char **)__p;
            if (__p)
LABEL_46:
              operator delete(v14);
          }
          v315 = &v47[104 * v46];
          v14 = (char **)(v48 + 104);
          if (v323[0])
            operator delete(v323[0]);
          v22 = (char **)v57;
          v19 = v307;
          v44 = v329;
          if (!v329)
            goto LABEL_25;
LABEL_24:
          v330 = v44;
          operator delete(v44);
          goto LABEL_25;
        }
      }
      *v14 = (char *)v21;
      *((_DWORD *)v14 + 2) = v36;
      v41 = *(_OWORD *)&v322[12];
      v42 = *(_OWORD *)&v322[28];
      v43 = *(_OWORD *)&v322[44];
      *(_OWORD *)((char *)v14 + 60) = *(_OWORD *)&v322[60];
      *(_OWORD *)((char *)v14 + 44) = v43;
      *(_OWORD *)((char *)v14 + 28) = v42;
      *(_OWORD *)((char *)v14 + 12) = v41;
      v14[11] = 0;
      v14[12] = 0;
      v14[10] = 0;
      *((_OWORD *)v14 + 5) = *(_OWORD *)v323;
      v14[12] = v324;
      v14 += 13;
      v22 = (char **)__p;
      v44 = v329;
      if (v329)
        goto LABEL_24;
LABEL_25:
      if (v27)
        operator delete(v27);
      ++v21;
      v13 = *(_QWORD *)(v19 + 72);
      if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v19 + 80) - v13) >> 6))
        goto LABEL_56;
    }
  }
LABEL_55:
  v22 = v14;
LABEL_56:
  v303 = ((char *)v14 - (char *)v22) / 104;
  v59 = 126 - 2 * __clz(v303);
  if (v14 == v22)
    v60 = 0;
  else
    v60 = v59;
  sub_207DC47D0((uint64_t)v22, (unint64_t)v14, v60, 1);
  if (0x8F9C18F9C18F9C19 * ((a4[1] - *a4) >> 3) == (uint64_t)(*(_QWORD *)(a7 + 32) - *(_QWORD *)(a7 + 24)) >> 4)
  {
    if (v14 == v22)
      goto LABEL_332;
    v61 = 0;
    v62 = 0;
    v298 = v300 + 12;
    while (1)
    {
      v65 = (float *)&v22[13 * v62];
      if (v65[2] < *(float *)(v19 + 624))
      {
        v63 = 0x4EC4EC4EC4EC4EC5 * (v14 - v22);
        goto LABEL_63;
      }
      v66 = *(_QWORD *)v65;
      v67 = *a4;
      v68 = a4[1] - *a4;
      __pa = v22;
      v305 = v62;
      v302 = v61;
      v313 = v66;
      if (v68)
      {
        v69 = 0x8F9C18F9C18F9C19 * (v68 >> 3);
        if (v69 >> 60)
          sub_207CA420C();
        v70 = *(_QWORD *)(v19 + 72);
        v71 = (char *)operator new(0xF9C18F9C18F9C190 * (v68 >> 3));
        v76 = 0;
        v316 = (char **)(v70 + 192 * v66 + 96);
        v77 = &v71[16 * v69];
        v78 = (_QWORD *)(v70 + 192 * v66 + 104);
        v79 = v71;
        while (1)
        {
          v82 = (float32x2_t *)(*a5 + (v76 << 6));
          *(float32x2_t *)v72.i8 = *v82;
          v72.i32[2] = v82[1].i32[0];
          *(float32x2_t *)v73.i8 = v82[2];
          v73.i32[2] = v82[3].i32[0];
          *(float32x2_t *)v74.f32 = v82[6];
          v74.i32[2] = v82[7].i32[0];
          v83.i64[0] = vzip1q_s32(v72, v73).u64[0];
          v84 = (int8x16_t)vnegq_f32(v74);
          v75.i32[0] = v82[5].i32[0];
          v85 = (int8x16_t)vtrn2q_s32(v72, v73);
          v85.i32[2] = HIDWORD(*(_QWORD *)&v82[4]);
          v86 = vzip2q_s32(v72, v73);
          v87 = (int8x16_t)v86;
          v87.i32[2] = v75.i32[0];
          *(float32x2_t *)v88.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v83.f32, *(float *)v84.i32), *(float32x2_t *)v85.i8, *(float32x2_t *)v74.f32, 1), *(float32x2_t *)v86.i8, v74, 2);
          v89 = vdupq_laneq_s32((int32x4_t)v87, 2).u32[0];
          v88.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v82[4], *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v82[4], 1), *(float32x2_t *)v74.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), v75).u32[0]);
          v90 = vextq_s8(vextq_s8(v85, v85, 0xCuLL), v87, 8uLL);
          v87.i64[0] = __PAIR64__(v90.u32[0], v85.u32[0]);
          v87.i64[1] = v90.u32[1];
          v91.i64[0] = v90.i64[1];
          v91.i64[1] = v89;
          v83.i64[1] = *(_QWORD *)&v82[4];
          v92 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v83, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v305 + 1] + 4))), (float32x4_t)v87, *(float32x2_t *)((char *)&__pa[13 * v305 + 1] + 4), 1), v91, *(float32x4_t *)((char *)&__pa[13 * v305 + 1] + 4), 2), v88, *(float32x4_t *)((char *)&__pa[13 * v305 + 1] + 4), 3);
          v93 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v83, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v305 + 3] + 4))), (float32x4_t)v87, *(float32x2_t *)((char *)&__pa[13 * v305 + 3] + 4), 1), v91, *(float32x4_t *)((char *)&__pa[13 * v305 + 3] + 4), 2), v88, *(float32x4_t *)((char *)&__pa[13 * v305 + 3] + 4), 3);
          v94 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v83, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v305 + 5] + 4))), (float32x4_t)v87, *(float32x2_t *)((char *)&__pa[13 * v305 + 5] + 4), 1), v91, *(float32x4_t *)((char *)&__pa[13 * v305 + 5] + 4), 2), v88, *(float32x4_t *)((char *)&__pa[13 * v305 + 5] + 4), 3);
          v95 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v83, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v305 + 7] + 4))), (float32x4_t)v87, *(float32x2_t *)((char *)&__pa[13 * v305 + 7] + 4), 1), v91, *(float32x4_t *)((char *)&__pa[13 * v305 + 7] + 4), 2), v88, *(float32x4_t *)((char *)&__pa[13 * v305 + 7] + 4), 3);
          *(float32x4_t *)v322 = v92;
          *(float32x4_t *)&v322[16] = v93;
          *(float32x4_t *)&v322[32] = v94;
          *(float32x4_t *)&v322[48] = v95;
          v96 = *v316;
          v332 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v78 - (_QWORD)*v316) >> 2);
          v333 = v96;
          v329 = 0;
          v330 = 0;
          sub_207DE48FC(v67 + 328 * v76 + 92, (float32x2_t *)v322, &v332, 0, (uint64_t *)&v329, (int8x16_t *)v326);
          v97 = (std::__shared_weak_count *)v330;
          if (!v330)
            goto LABEL_78;
          v98 = v330 + 1;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
            if (v79 >= v77)
            {
LABEL_79:
              v100 = v79 - v71;
              v101 = (v79 - v71) >> 4;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 60)
                sub_207CA420C();
              if ((v77 - v71) >> 3 > v102)
                v102 = (v77 - v71) >> 3;
              if ((unint64_t)(v77 - v71) >= 0x7FFFFFFFFFFFFFF0)
                v103 = 0xFFFFFFFFFFFFFFFLL;
              else
                v103 = v102;
              if (v103 >> 60)
                sub_207CA3AB8();
              v104 = (char *)operator new(16 * v103);
              v105 = &v104[16 * v101];
              *(_OWORD *)v105 = *(_OWORD *)v326;
              v81 = (uint64_t)(v105 + 16);
              if (v79 != v71)
              {
                v106 = v79 - v71 - 16;
                if (v106 < 0x3F0)
                  goto LABEL_88;
                v110 = v79 - 16;
                v111 = v79 - 16 - v71;
                v112 = v111 & 0xFFFFFFFFFFFFFFF0;
                if (&v104[v100 - 16 - (v111 & 0xFFFFFFFFFFFFFFF0)] > &v104[v100 - 16])
                  goto LABEL_88;
                if (&v104[v100 - 8 - v112] > &v104[v100 - 8])
                  goto LABEL_88;
                if (&v110[-v112] > v110)
                  goto LABEL_88;
                v113 = v79 - 8;
                if (&v79[-v112 - 8] > v79 - 8)
                  goto LABEL_88;
                v114 = v111 & 0xFFFFFFFFFFFFFFF0;
                v115 = (unint64_t)&v104[v100 - v114 - 16];
                v116 = &v104[v100 - 8];
                v117 = (unint64_t)&v104[v100 - v114 - 8];
                v118 = (unint64_t)&v110[-v114];
                v119 = (unint64_t)&v113[-v114];
                v120 = v115 >= (unint64_t)v113 || v118 >= (unint64_t)v116;
                v121 = !v120;
                v122 = v115 >= (unint64_t)v79 || v119 >= (unint64_t)v116;
                v123 = !v122;
                v124 = v117 >= (unint64_t)v113 || v118 >= (unint64_t)v105;
                v125 = !v124;
                v126 = v117 >= (unint64_t)v79 || v119 >= (unint64_t)v105;
                v127 = !v126;
                v128 = v117 >= (unint64_t)v116 || v115 >= (unint64_t)v105;
                if (!v128 || v121 || v123 || v125 || v127)
                {
LABEL_88:
                  v107 = v79;
                  v108 = v105;
                }
                else
                {
                  v129 = (v106 >> 4) + 1;
                  v130 = 16 * (v129 & 0x1FFFFFFFFFFFFFFCLL);
                  v107 = &v79[-v130];
                  v108 = &v105[-v130];
                  v131 = (const double *)(v79 - 32);
                  v132 = (double *)(v105 - 32);
                  v133 = v129 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    *(float64x2x2_t *)(&v72 - 1) = vld2q_f64(v131);
                    v134 = v131 - 4;
                    *(float64x2x2_t *)v73.i8 = vld2q_f64(v134);
                    vst2q_f64(v132, *(float64x2x2_t *)(&v72 - 1));
                    v135 = v132 - 4;
                    vst2q_f64(v135, *(float64x2x2_t *)v73.i8);
                    v132 -= 8;
                    v131 -= 8;
                    v133 -= 4;
                  }
                  while (v133);
                  if (v129 == (v129 & 0x1FFFFFFFFFFFFFFCLL))
                  {
LABEL_90:
                    v77 = &v104[16 * v103];
                    if (v71)
                      goto LABEL_91;
                    goto LABEL_92;
                  }
                }
                do
                {
                  v109 = *((_QWORD *)v107 - 2);
                  v107 -= 16;
                  *((_QWORD *)v108 - 2) = v109;
                  v108 -= 16;
                  *((_QWORD *)v108 + 1) = *((_QWORD *)v107 + 1);
                }
                while (v107 != v71);
                goto LABEL_90;
              }
              v108 = v105;
              v77 = &v104[16 * v103];
              if (v71)
LABEL_91:
                operator delete(v71);
LABEL_92:
              v71 = v108;
              goto LABEL_73;
            }
          }
          else
          {
LABEL_78:
            if (v79 >= v77)
              goto LABEL_79;
          }
          v80 = *(_QWORD *)&v326[8];
          *(_QWORD *)v79 = *(_QWORD *)v326;
          *((_QWORD *)v79 + 1) = v80;
          v81 = (uint64_t)(v79 + 16);
LABEL_73:
          ++v76;
          v67 = *a4;
          v79 = (char *)v81;
          if (v76 >= 0x8F9C18F9C18F9C19 * ((a4[1] - *a4) >> 3))
            goto LABEL_139;
        }
      }
      v71 = 0;
      v81 = 0;
LABEL_139:
      v136 = sub_207DA81BC((uint64_t)v71, v81, *(_QWORD *)(a7 + 24));
      if (!v136)
      {
        v22 = __pa;
        v62 = v305;
        v156 = (char *)&__pa[13 * v305];
        v157 = *((_DWORD *)v156 + 2);
        v158 = v300[80];
        *(_QWORD *)v300 = v313;
        *((_DWORD *)v300 + 2) = v157;
        v159 = *(_OWORD *)(v156 + 28);
        v160 = *(_OWORD *)(v156 + 60);
        v161 = *(_OWORD *)(v156 + 12);
        *(_OWORD *)(v300 + 44) = *(_OWORD *)(v156 + 44);
        *(_OWORD *)(v300 + 60) = v160;
        *v298 = v161;
        *(_OWORD *)(v300 + 28) = v159;
        v19 = v307;
        if (v158)
        {
          v162 = v299;
          if (v156 + 80 == (char *)v299)
          {
LABEL_165:
            LODWORD(v142) = 0;
            v61 = 1;
            if (v71)
              goto LABEL_169;
            goto LABEL_170;
          }
        }
        else
        {
          v162 = v299;
          v300[80] = 1;
          if (v156 + 80 == (char *)v299)
            goto LABEL_165;
        }
        sub_207CDADA0(v162, *((char **)v156 + 10), *((char **)v156 + 11), (uint64_t)(*((_QWORD *)v156 + 11) - *((_QWORD *)v156 + 10)) >> 3);
        goto LABEL_165;
      }
      v22 = __pa;
      v19 = v307;
      v62 = v305;
      if (v136 != 2)
      {
        LODWORD(v142) = 1;
        v61 = v302;
        if (v71)
          goto LABEL_169;
        goto LABEL_170;
      }
      if (v305 >= v303 || (v301 = (float *)&__pa[13 * v305 + 1], (float)(*v301 - *v301) > 0.0001))
      {
        v137 = 0;
        v138 = 0;
        goto LABEL_144;
      }
      v163 = 0;
      v138 = 0;
      v137 = 0;
      v164 = (float *)&__pa[13 * v305];
      v165 = v305;
      v312 = v71;
      do
      {
        v304 = (unint64_t)v163;
        v306 = v165;
        v308 = (float *)v137;
        v166 = *a4;
        v167 = a4[1] - *a4;
        v168 = 0x8F9C18F9C18F9C19 * (v167 >> 3);
        if (!v167)
        {
          v171 = 0;
          v261 = 0;
          v264 = 0;
          v259 = 0;
          v258 = 0.0 / (float)v168;
          v163 = (char *)v304;
          v277 = v306;
          if ((unint64_t)v138 < v304)
            goto LABEL_275;
          goto LABEL_281;
        }
        if (v168 >> 60)
          sub_207CA420C();
        v169 = *(_QWORD *)v164;
        v170 = *(_QWORD *)(v307 + 72);
        v171 = (char *)operator new(0xF9C18F9C18F9C190 * (v167 >> 3));
        v176 = 0;
        v177 = v170 + 192 * v169;
        v178 = &v171[16 * v168];
        v314 = (_QWORD *)(v177 + 104);
        v318 = (char **)(v177 + 96);
        v179 = 0.0;
        v180 = v171;
        do
        {
          v183 = (float32x2_t *)(*a5 + (v176 << 6));
          *(float32x2_t *)v172.i8 = *v183;
          v172.i32[2] = v183[1].i32[0];
          *(float32x2_t *)v173.i8 = v183[2];
          v173.i32[2] = v183[3].i32[0];
          *(float32x2_t *)v174.f32 = v183[6];
          v174.i32[2] = v183[7].i32[0];
          v184.i64[0] = vzip1q_s32(v172, v173).u64[0];
          v185 = (int8x16_t)vnegq_f32(v174);
          v175.i32[0] = v183[5].i32[0];
          v186 = (int8x16_t)vtrn2q_s32(v172, v173);
          v186.i32[2] = HIDWORD(*(_QWORD *)&v183[4]);
          v187 = vzip2q_s32(v172, v173);
          v188 = (int8x16_t)v187;
          v188.i32[2] = v175.i32[0];
          *(float32x2_t *)v189.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v184.f32, *(float *)v185.i32), *(float32x2_t *)v186.i8, *(float32x2_t *)v174.f32, 1), *(float32x2_t *)v187.i8, v174, 2);
          v190 = vdupq_laneq_s32((int32x4_t)v188, 2).u32[0];
          v189.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v183[4], *(float32x2_t *)v185.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v183[4], 1), *(float32x2_t *)v174.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v185, v185, 8uLL), v175).u32[0]);
          v191 = vextq_s8(vextq_s8(v186, v186, 0xCuLL), v188, 8uLL);
          v188.i64[0] = __PAIR64__(v191.u32[0], v186.u32[0]);
          v188.i64[1] = v191.u32[1];
          v192.i64[0] = v191.i64[1];
          v192.i64[1] = v190;
          v184.i64[1] = *(_QWORD *)&v183[4];
          v193 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v184, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v306 + 1] + 4))), (float32x4_t)v188, *(float32x2_t *)((char *)&__pa[13 * v306 + 1] + 4), 1), v192, *(float32x4_t *)((char *)&__pa[13 * v306 + 1] + 4), 2), v189, *(float32x4_t *)((char *)&__pa[13 * v306 + 1] + 4), 3);
          v194 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v184, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v306 + 3] + 4))), (float32x4_t)v188, *(float32x2_t *)((char *)&__pa[13 * v306 + 3] + 4), 1), v192, *(float32x4_t *)((char *)&__pa[13 * v306 + 3] + 4), 2), v189, *(float32x4_t *)((char *)&__pa[13 * v306 + 3] + 4), 3);
          v195 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v184, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v306 + 5] + 4))), (float32x4_t)v188, *(float32x2_t *)((char *)&__pa[13 * v306 + 5] + 4), 1), v192, *(float32x4_t *)((char *)&__pa[13 * v306 + 5] + 4), 2), v189, *(float32x4_t *)((char *)&__pa[13 * v306 + 5] + 4), 3);
          v196 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v184, COERCE_FLOAT(*(_OWORD *)((char *)&__pa[13 * v306 + 7] + 4))), (float32x4_t)v188, *(float32x2_t *)((char *)&__pa[13 * v306 + 7] + 4), 1), v192, *(float32x4_t *)((char *)&__pa[13 * v306 + 7] + 4), 2), v189, *(float32x4_t *)((char *)&__pa[13 * v306 + 7] + 4), 3);
          *(float32x4_t *)v322 = v193;
          *(float32x4_t *)&v322[16] = v194;
          *(float32x4_t *)&v322[32] = v195;
          *(float32x4_t *)&v322[48] = v196;
          v197 = *v318;
          v332 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v314 - (_QWORD)*v318) >> 2);
          v333 = v197;
          v329 = 0;
          v330 = 0;
          sub_207DE48FC(v166 + 328 * v176 + 92, (float32x2_t *)v322, &v332, 0, (uint64_t *)&v329, (int8x16_t *)v326);
          v198 = (std::__shared_weak_count *)v330;
          if (v330)
          {
            v199 = v330 + 1;
            do
              v200 = __ldaxr(v199);
            while (__stlxr(v200 - 1, v199));
            if (!v200)
            {
              ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
              std::__shared_weak_count::__release_weak(v198);
            }
          }
          v201 = (float *)(*(_QWORD *)(a7 + 24) + 16 * v176);
          v203 = *(float *)&v326[4];
          v202 = *(float *)v326;
          v205 = *(float *)&v326[12];
          v204 = *(float *)&v326[8];
          v206 = *v201;
          v207 = v201[1];
          v208 = v201[2];
          v209 = v201[3];
          v210 = fmaxf(*(float *)v326, *v201);
          v211 = fmaxf(*(float *)&v326[4], v207);
          v212 = fminf(*(float *)&v326[8], v208);
          v213 = fminf(*(float *)&v326[12], v209);
          if (v210 < v212 && v211 < v213)
          {
            if (v210 <= v212)
              v216 = v212;
            else
              v216 = v210;
            if (v210 > v212)
              v210 = v212;
            if (v211 > v213)
              v217 = v211;
            else
              v217 = v213;
            if (v211 > v213)
              v211 = v213;
          }
          else
          {
            v215 = atomic_load((unsigned __int8 *)&qword_253E50C58);
            if ((v215 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C58))
            {
              qword_25452BE08 = 0;
              *(_QWORD *)&dword_25452BE10 = 0;
              __cxa_guard_release(&qword_253E50C58);
            }
            v211 = *((float *)&qword_25452BE08 + 1);
            v210 = *(float *)&qword_25452BE08;
            v216 = *(float *)&dword_25452BE10;
            v217 = *(float *)&dword_25452BE14;
            v205 = *(float *)&v326[12];
            v204 = *(float *)&v326[8];
            v203 = *(float *)&v326[4];
            v202 = *(float *)v326;
            v208 = v201[2];
            v209 = v201[3];
            v206 = *v201;
            v207 = v201[1];
          }
          v218 = (float)(v217 - v211) * (float)(v216 - v210);
          v219 = (float)((float)((float)(v209 - v207) * (float)(v208 - v206))
                       + (float)((float)(v205 - v203) * (float)(v204 - v202)))
               - v218;
          if (v219 >= 0.00000011921)
            v220 = v218 / v219;
          else
            v220 = 0.0;
          v71 = v312;
          if (v180 < v178)
          {
            v181 = *(_QWORD *)&v326[8];
            *(_QWORD *)v180 = *(_QWORD *)v326;
            *((_QWORD *)v180 + 1) = v181;
            v180 += 16;
            goto LABEL_177;
          }
          v221 = v180 - v171;
          v222 = (v180 - v171) >> 4;
          v223 = v222 + 1;
          if ((unint64_t)(v222 + 1) >> 60)
            sub_207CA420C();
          if ((v178 - v171) >> 3 > v223)
            v223 = (v178 - v171) >> 3;
          if ((unint64_t)(v178 - v171) >= 0x7FFFFFFFFFFFFFF0)
            v224 = 0xFFFFFFFFFFFFFFFLL;
          else
            v224 = v223;
          if (v224 >> 60)
            sub_207CA3AB8();
          v225 = (char *)operator new(16 * v224);
          v226 = &v225[16 * v222];
          *(_OWORD *)v226 = *(_OWORD *)v326;
          v227 = v226 + 16;
          if (v180 == v171)
          {
            v230 = v226;
            v178 = &v225[16 * v224];
            if (!v171)
              goto LABEL_216;
LABEL_215:
            operator delete(v171);
            goto LABEL_216;
          }
          v228 = v180 - v171 - 16;
          if (v228 < 0x3F0)
            goto LABEL_212;
          v232 = v180 - 16;
          v233 = v180 - 16 - v171;
          v234 = v233 & 0xFFFFFFFFFFFFFFF0;
          if (&v225[v221 - 16 - (v233 & 0xFFFFFFFFFFFFFFF0)] > &v225[v221 - 16])
            goto LABEL_212;
          if (&v225[v221 - 8 - v234] > &v225[v221 - 8])
            goto LABEL_212;
          if (&v232[-v234] > v232)
            goto LABEL_212;
          v235 = v180 - 8;
          if (&v180[-v234 - 8] > v180 - 8)
            goto LABEL_212;
          v236 = v233 & 0xFFFFFFFFFFFFFFF0;
          v237 = (unint64_t)&v225[v221 - v236 - 16];
          v238 = &v225[v221 - 8];
          v239 = (unint64_t)&v225[v221 - v236 - 8];
          v240 = (unint64_t)&v232[-v236];
          v241 = (unint64_t)&v235[-v236];
          v242 = v237 >= (unint64_t)v235 || v240 >= (unint64_t)v238;
          v243 = !v242;
          v244 = v237 >= (unint64_t)v180 || v241 >= (unint64_t)v238;
          v245 = !v244;
          v246 = v239 >= (unint64_t)v235 || v240 >= (unint64_t)v226;
          v247 = !v246;
          v248 = v239 >= (unint64_t)v180 || v241 >= (unint64_t)v226;
          v249 = !v248;
          v250 = v239 >= (unint64_t)v238 || v237 >= (unint64_t)v226;
          if (!v250 || v243 || v245 || v247 || v249)
          {
LABEL_212:
            v229 = v180;
            v230 = v226;
            do
            {
LABEL_213:
              v231 = *((_QWORD *)v229 - 2);
              v229 -= 16;
              *((_QWORD *)v230 - 2) = v231;
              v230 -= 16;
              *((_QWORD *)v230 + 1) = *((_QWORD *)v229 + 1);
            }
            while (v229 != v171);
            goto LABEL_214;
          }
          v251 = (v228 >> 4) + 1;
          v252 = 16 * (v251 & 0x1FFFFFFFFFFFFFFCLL);
          v229 = &v180[-v252];
          v230 = &v226[-v252];
          v253 = (const double *)(v180 - 32);
          v254 = (double *)(v226 - 32);
          v255 = v251 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            *(float64x2x2_t *)(&v172 - 1) = vld2q_f64(v253);
            v256 = v253 - 4;
            *(float64x2x2_t *)v173.i8 = vld2q_f64(v256);
            vst2q_f64(v254, *(float64x2x2_t *)(&v172 - 1));
            v257 = v254 - 4;
            vst2q_f64(v257, *(float64x2x2_t *)v173.i8);
            v254 -= 8;
            v253 -= 8;
            v255 -= 4;
          }
          while (v255);
          if (v251 != (v251 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_213;
LABEL_214:
          v178 = &v225[16 * v224];
          if (v171)
            goto LABEL_215;
LABEL_216:
          v171 = v230;
          v180 = v227;
LABEL_177:
          v179 = v179 + v220;
          ++v176;
          v166 = *a4;
          v182 = 0x8F9C18F9C18F9C19 * ((a4[1] - *a4) >> 3);
        }
        while (v176 < v182);
        v258 = v179 / (float)v182;
        v259 = v180 - v171;
        if (v180 == v171)
        {
          v261 = 0;
          v264 = 0;
          v163 = (char *)v304;
          v277 = v306;
          if ((unint64_t)v138 < v304)
            goto LABEL_275;
        }
        else
        {
          v163 = (char *)v304;
          if (v259 < 0)
            sub_207CA420C();
          v260 = (char *)operator new(v180 - v171);
          v261 = v260;
          v262 = v259 - 16;
          v263 = v171;
          v264 = v260;
          if ((unint64_t)(v259 - 16) < 0x70)
            goto LABEL_361;
          v265 = v260 >= &v171[(v262 & 0xFFFFFFFFFFFFFFF0) + 16] || v171 >= &v260[(v262 & 0xFFFFFFFFFFFFFFF0) + 16];
          v263 = v171;
          v264 = v260;
          if (!v265)
            goto LABEL_361;
          v266 = (v262 >> 4) + 1;
          v267 = 16 * (v266 & 0x1FFFFFFFFFFFFFFCLL);
          v263 = &v171[v267];
          v264 = &v260[v267];
          v268 = v260 + 32;
          v269 = (__int128 *)(v171 + 32);
          v270 = v266 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v272 = *(v269 - 2);
            v271 = *(v269 - 1);
            v274 = *v269;
            v273 = v269[1];
            v269 += 4;
            *(v268 - 2) = v272;
            *(v268 - 1) = v271;
            *v268 = v274;
            v268[1] = v273;
            v268 += 4;
            v270 -= 4;
          }
          while (v270);
          if (v266 != (v266 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_361:
            do
            {
              v275 = *(_QWORD *)v263;
              v276 = *((_QWORD *)v263 + 1);
              v263 += 16;
              *(_QWORD *)v264 = v275;
              *((_QWORD *)v264 + 1) = v276;
              v264 += 16;
            }
            while (v263 != v180);
          }
          v259 = (uint64_t)&v260[16 * (v259 >> 4)];
          v277 = v306;
          if ((unint64_t)v138 < v304)
          {
LABEL_275:
            *(_QWORD *)v138 = v277;
            v138[2] = v258;
            *((_QWORD *)v138 + 2) = v261;
            *((_QWORD *)v138 + 3) = v264;
            *((_QWORD *)v138 + 4) = v259;
            v138 += 10;
            v137 = (uint64_t)v308;
            v22 = __pa;
            v19 = v307;
            if (v171)
              goto LABEL_276;
            goto LABEL_277;
          }
        }
LABEL_281:
        v278 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v138 - (char *)v308) >> 3) + 1;
        if (v278 > 0x666666666666666)
          sub_207CA420C();
        if (0x999999999999999ALL * ((v163 - (char *)v308) >> 3) > v278)
          v278 = 0x999999999999999ALL * ((v163 - (char *)v308) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v163 - (char *)v308) >> 3) >= 0x333333333333333)
          v279 = 0x666666666666666;
        else
          v279 = v278;
        if (v279)
        {
          if (v279 > 0x666666666666666)
            sub_207CA3AB8();
          v280 = (char *)operator new(40 * v279);
        }
        else
        {
          v280 = 0;
        }
        v281 = (float *)&v280[8 * (((char *)v138 - (char *)v308) >> 3)];
        *(_QWORD *)v281 = v306;
        v281[2] = v258;
        *((_QWORD *)v281 + 2) = v261;
        *((_QWORD *)v281 + 3) = v264;
        *((_QWORD *)v281 + 4) = v259;
        if (v138 == v308)
        {
          v137 = (uint64_t)&v280[8 * (((char *)v138 - (char *)v308) >> 3)];
          v22 = __pa;
          v19 = v307;
          v163 = &v280[40 * v279];
          v286 = v281 + 10;
          if (v138)
            goto LABEL_301;
        }
        else
        {
          v282 = 0;
          v22 = __pa;
          v19 = v307;
          do
          {
            v283 = (char *)&v281[v282];
            v284 = &v138[v282];
            *((_QWORD *)v283 - 5) = *(_QWORD *)&v138[v282 - 10];
            *((float *)v283 - 8) = v138[v282 - 8];
            *((_QWORD *)v283 - 2) = 0;
            *((_QWORD *)v283 - 1) = 0;
            *(_OWORD *)(v283 - 24) = *(_OWORD *)&v138[v282 - 6];
            *((_QWORD *)v283 - 1) = *(_QWORD *)&v138[v282 - 2];
            *((_QWORD *)v284 - 3) = 0;
            *((_QWORD *)v284 - 2) = 0;
            *((_QWORD *)v284 - 1) = 0;
            v282 -= 10;
          }
          while (&v138[v282] != v308);
          v137 = (uint64_t)&v281[v282];
          do
          {
            v285 = (void *)*((_QWORD *)v138 - 3);
            if (v285)
            {
              *((_QWORD *)v138 - 2) = v285;
              operator delete(v285);
            }
            v138 -= 10;
          }
          while (v138 != v308);
          v138 = v308;
          v163 = &v280[40 * v279];
          v286 = v281 + 10;
          if (v308)
LABEL_301:
            operator delete(v138);
        }
        v138 = v286;
        v277 = v306;
        if (v171)
LABEL_276:
          operator delete(v171);
LABEL_277:
        if (v277 == v303 - 1)
          break;
        v165 = v277 + 1;
        v164 = (float *)&v22[13 * v165];
      }
      while ((float)(*v301 - v164[2]) <= 0.0001);
LABEL_144:
      v317 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v138 - v137) >> 3);
      v139 = 126 - 2 * __clz(v317);
      if (v138 == (float *)v137)
        v140 = 0;
      else
        v140 = v139;
      sub_207DC6210(v137, (unint64_t)v138, v140, 1);
      v141 = (float *)v137;
      if (v138 != (float *)v137)
      {
        v142 = (float *)v137;
        v143 = 0;
        v144 = 0;
        v145 = *(float *)(v19 + 624);
        v146 = *(_QWORD *)(a7 + 24);
        while (1)
        {
          v148 = &v22[13 * *(_QWORD *)&v142[v143]];
          v149 = *((float *)v148 + 2);
          if (v149 < v145)
          {
            v147 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v138 - (char *)v142) >> 3);
          }
          else
          {
            v150 = sub_207DA81BC(*(_QWORD *)&v142[v143 + 4], *(_QWORD *)&v142[v143 + 6], v146);
            v147 = v317;
            if ((v150 & 1) == 0)
            {
              v151 = v300[80];
              *(_QWORD *)v300 = *v148;
              *((float *)v300 + 2) = v149;
              v152 = *(_OWORD *)((char *)v148 + 28);
              v153 = *(_OWORD *)((char *)v148 + 60);
              v154 = *(_OWORD *)((char *)v148 + 12);
              *(_OWORD *)(v300 + 44) = *(_OWORD *)((char *)v148 + 44);
              *(_OWORD *)(v300 + 60) = v153;
              *v298 = v154;
              *(_OWORD *)(v300 + 28) = v152;
              if (v151)
              {
                v155 = v299;
                v19 = v307;
                if (v148 + 10 == v299)
                {
LABEL_309:
                  v61 = 1;
                  v22 = __pa;
                  if (!v142)
                    goto LABEL_310;
                  do
                  {
LABEL_313:
                    v287 = (void *)*((_QWORD *)v138 - 3);
                    if (v287)
                    {
                      *((_QWORD *)v138 - 2) = v287;
                      operator delete(v287);
                    }
                    v138 -= 10;
                  }
                  while (v138 != v142);
LABEL_168:
                  v62 = v305;
                  operator delete(v142);
                  LODWORD(v142) = 0;
                  if (v71)
                    goto LABEL_169;
                  goto LABEL_170;
                }
              }
              else
              {
                v155 = v299;
                v300[80] = 1;
                v19 = v307;
                if (v148 + 10 == v299)
                  goto LABEL_309;
              }
              sub_207CDADA0(v155, v148[10], v148[11], (v148[11] - v148[10]) >> 3);
              goto LABEL_309;
            }
          }
          ++v144;
          v143 += 10;
          v22 = __pa;
          if (v144 >= v147)
          {
            v19 = v307;
            v61 = v302;
            if (!v142)
              goto LABEL_310;
            goto LABEL_313;
          }
        }
      }
      v61 = v302;
      v142 = v141;
      if (v141)
        goto LABEL_168;
LABEL_310:
      v62 = v305;
      if (v71)
LABEL_169:
        operator delete(v71);
LABEL_170:
      v63 = v303;
      if (!(_DWORD)v142)
      {
LABEL_318:
        if ((v61 & 1) == 0 && (v297 & 1) != 0)
          goto LABEL_320;
        goto LABEL_332;
      }
LABEL_63:
      if (++v62 >= v63 || (v61 & 1) != 0)
        goto LABEL_318;
    }
  }
  if (v14 != v22 && v297)
  {
LABEL_320:
    if (v303 <= 1)
      v288 = 1;
    else
      v288 = v303;
    v289 = v22 + 10;
    while (1)
    {
      v290 = *((float *)v289 - 18);
      if (v290 >= *(float *)(v19 + 624))
        break;
      v289 += 13;
      if (!--v288)
        goto LABEL_332;
    }
    v291 = v300[80];
    *(_QWORD *)v300 = *(v289 - 10);
    v292 = *(_OWORD *)((char *)v289 - 68);
    v293 = *(_OWORD *)((char *)v289 - 52);
    v294 = *(_OWORD *)((char *)v289 - 36);
    *(_OWORD *)(v300 + 60) = *(_OWORD *)((char *)v289 - 20);
    *(_OWORD *)(v300 + 44) = v294;
    *(_OWORD *)(v300 + 28) = v293;
    *(_OWORD *)(v300 + 12) = v292;
    if (v291)
    {
      *((float *)v300 + 2) = v290;
      if (v289 == v299)
        goto LABEL_332;
    }
    else
    {
      v300[80] = 1;
      *((float *)v300 + 2) = v290;
      if (v289 == v299)
        goto LABEL_332;
    }
    sub_207CDADA0(v299, *v289, v289[1], (v289[1] - *v289) >> 3);
  }
LABEL_332:
  if ((_QWORD)v335)
  {
    *((_QWORD *)&v335 + 1) = v335;
    operator delete((void *)v335);
  }
  if (v22)
  {
    while (v14 != v22)
    {
      v295 = *(v14 - 3);
      if (v295)
      {
        *(v14 - 2) = v295;
        operator delete(v295);
      }
      v14 -= 13;
    }
    operator delete(v22);
  }
  return kdebug_trace();
}

void sub_207DA7E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  char *v52;
  char *v53;
  uint64_t v54;
  void *v56;
  void *v57;

  v56 = *(void **)(v54 - 144);
  if (v56)
  {
    *(_QWORD *)(v54 - 136) = v56;
    operator delete(v56);
    if (!v53)
      goto LABEL_11;
  }
  else if (!v53)
  {
    goto LABEL_11;
  }
  while (v52 != v53)
  {
    v57 = (void *)*((_QWORD *)v52 - 3);
    if (v57)
    {
      *((_QWORD *)v52 - 2) = v57;
      operator delete(v57);
    }
    v52 -= 104;
  }
  operator delete(v53);
LABEL_11:
  kdebug_trace();
  _Unwind_Resume(a1);
}

_QWORD *sub_207DA8084(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  unint64_t v6;

  if (a1 != (_QWORD *)a2)
  {
    sub_207D5F308(a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
    {
      v5 = (void *)a1[3];
      if (v4 > a1[5] << 6)
      {
        if (v5)
        {
          operator delete(v5);
          a1[3] = 0;
          a1[4] = 0;
          a1[5] = 0;
          v4 = *(_QWORD *)(a2 + 32);
        }
        if ((v4 & 0x8000000000000000) != 0)
          sub_207D159B0();
        v6 = ((v4 - 1) >> 6) + 1;
        v5 = operator new(8 * v6);
        a1[3] = v5;
        a1[4] = 0;
        a1[5] = v6;
        v4 = *(_QWORD *)(a2 + 32);
      }
      memmove(v5, *(const void **)(a2 + 24), (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v4 = *(_QWORD *)(a2 + 32);
    }
    a1[4] = v4;
    sub_207CDADA0(a1 + 6, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
    sub_207CDADA0(a1 + 9, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
    sub_207CDADA0(a1 + 12, *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
    sub_207D95628((uint64_t)(a1 + 15), *(char ***)(a2 + 120), *(_QWORD *)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
    sub_207D0CC14(a1 + 18, *(char **)(a2 + 144), *(char **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2);
  }
  return a1;
}

uint64_t sub_207DA81BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t *v15;
  char *v16;
  float v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v24;
  __int128 v25;
  uint64_t v26;

  v26 = 0;
  v25 = 0uLL;
  v3 = a2 - a1;
  if (a2 == a1)
  {
    v22 = 0;
    if (!v3)
      return 0;
  }
  else
  {
    v4 = v3 >> 4;
    if (v4 <= 1)
      v4 = 1;
    v5 = (float *)(a3 + 8);
    v6 = (float *)(a1 + 8);
    do
    {
      v7 = *(v6 - 1);
      v8 = *(v5 - 1);
      v9 = *(v6 - 2) - *(v5 - 2);
      v10 = *v6;
      v11 = v6[1];
      v6 += 4;
      v12 = *v5;
      v13 = v5[1];
      v5 += 4;
      v14 = v10 - v12;
      if (v9 <= 3.0)
        v15 = &v26;
      else
        v15 = (uint64_t *)&v25;
      if (v9 < -3.0)
        v15 = (uint64_t *)&v25 + 1;
      if (v14 <= 3.0)
        v16 = (char *)&v26;
      else
        v16 = (char *)&v25 + 8;
      v17 = v7 - v8;
      ++*v15;
      if (v14 >= -3.0)
        v18 = (__int128 *)v16;
      else
        v18 = &v25;
      if (v17 <= 3.0)
        v19 = &v26;
      else
        v19 = (uint64_t *)&v25;
      ++*(_QWORD *)v18;
      if (v17 >= -3.0)
        v20 = v19;
      else
        v20 = (uint64_t *)&v25 + 1;
      ++*v20;
      if ((float)(v11 - v13) <= 3.0)
        v21 = &v26;
      else
        v21 = (uint64_t *)&v25 + 1;
      if ((float)(v11 - v13) < -3.0)
        v21 = (uint64_t *)&v25;
      ++*v21;
      --v4;
    }
    while (v4);
    v3 = *((_QWORD *)&v25 + 1);
    v22 = v25;
    if (v25 == 0)
      return 0;
  }
  if (!v3 && v22)
    return 1;
  if (v22)
    v24 = 1;
  else
    v24 = v3 == 0;
  if (v24)
    return 3;
  else
    return 2;
}

_QWORD *sub_207DA82E0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_207DA8388(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207DA83E0(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  float32x4_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  size_t v21;
  int v22;
  _QWORD v25[3];
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int32 v30;
  void *__p;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  int v36;

  v34 = 0u;
  v35 = 0u;
  v36 = 733237040;
  kdebug_trace();
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  LODWORD(v25[0]) = 0;
  *(_QWORD *)((char *)v25 + 4) = 1065353216;
  v11 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a2 + 80) != v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = *(float *)v25;
    do
    {
      v16 = v11 + v12;
      __p = 0;
      v32 = 0;
      v33 = 0;
      v18 = *(_BYTE **)(v16 + 96);
      v17 = *(_BYTE **)(v16 + 104);
      v19 = v17 - v18;
      if (v17 != v18)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v19 >> 2) >= 0x1555555555555556)
          sub_207CA420C();
        v20 = (char *)operator new(v19);
        __p = v20;
        v32 = v20;
        v33 = &v20[4 * (v19 >> 2)];
        v21 = 12 * ((v19 - 12) / 0xCuLL) + 12;
        memcpy(v20, v18, v21);
        v32 = &v20[v21];
      }
      sub_207D7A62C(a3, (uint64_t)&__p, (uint64_t)v25, v5, v6, v7, v8, v9, v10);
      LODWORD(v5) = v25[0];
      if (*(float *)v25 > v15)
      {
        v22 = HIDWORD(v25[0]);
        LODWORD(v7) = v26;
        LODWORD(v8) = v28;
        v9.i32[0] = v30;
        *(_QWORD *)a1 = v13;
        *(_DWORD *)(a1 + 8) = LODWORD(v5);
        *(_DWORD *)(a1 + 12) = v22;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&v25[1];
        *(_DWORD *)(a1 + 32) = LODWORD(v7);
        *(_OWORD *)(a1 + 36) = v27;
        *(_DWORD *)(a1 + 52) = LODWORD(v8);
        v6 = *(double *)&v29;
        *(_OWORD *)(a1 + 56) = v29;
        *(_DWORD *)(a1 + 72) = v9.i32[0];
        if (!v14)
          *(_BYTE *)(a1 + 80) = 1;
        v14 = 1;
        v15 = *(float *)&v5;
      }
      if (__p)
      {
        v32 = (char *)__p;
        operator delete(__p);
      }
      ++v13;
      v11 = *(_QWORD *)(a2 + 72);
      v12 += 192;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 80) - v11) >> 6));
  }
  return kdebug_trace();
}

void sub_207DA862C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CD822C(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_207DA8640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  sub_207CD822C(v27 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_207DA8668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void **a6, void **a7, _QWORD *a8, unint64_t a9, uint64_t a10, float *a11, float *a12, float *a13, _QWORD *a14, uint64_t a15, float32x2_t *a16, _QWORD *a17, char a18, float32x4_t *a19)
{
  unint64_t v21;
  int v22;
  int v23;
  size_t v24;
  int v25;
  _QWORD *v26;
  _BOOL4 v27;
  const void *v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v33;
  float *v34;
  float v35;
  float v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v41;
  uint64_t v42;
  BOOL v43;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  unint64_t v64;
  BOOL v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  BOOL v75;
  void *v76;
  int v77;
  void *v78;
  float v79;
  __int128 v80;
  __int128 v81;
  BOOL v82;
  BOOL v83;
  void *v84;
  int v85;
  void *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v93;
  uint64_t v94;
  BOOL v95;
  int v97;
  uint64_t *v98;
  uint64_t v100;
  uint64_t v101;
  char *v103;
  unint64_t v104;
  float32x4_t v105;
  __int128 v106;
  float32x4_t v107;
  double v108;
  float32x4_t v109;
  double v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  int v116;
  uint64_t v117;
  BOOL v118;
  int v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  float32x4_t v125;
  _QWORD *v126;
  _QWORD *v127;
  char *v128;
  unint64_t v129;
  char **v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  char *v148;
  uint64_t *v149;
  uint64_t v151;
  int v152;
  _BOOL4 v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  int v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  BOOL v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  __int128 v185;
  uint64_t v186;
  _OWORD *v187;
  _OWORD *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  __int128 v194;
  __int128 v195;
  char *v196;
  __int128 v197;
  __int128 v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  int v203;
  uint64_t v204;
  BOOL v205;
  int v207;
  void *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v215;
  int v216;
  unint64_t v217;
  BOOL v218;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  int v222;
  _BOOL8 v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  void *v227;
  unint64_t v228;
  BOOL v229;
  BOOL v230;
  void *v231;
  int v232;
  void *v233;
  __int128 v234;
  __int128 v235;
  BOOL v236;
  BOOL v237;
  void *v238;
  int v239;
  void *v240;
  __int128 v241;
  __int128 v242;
  int v243;
  char *v244;
  void *v245;
  char *v246;
  float v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  void *v252;
  uint64_t v253;
  int v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  BOOL v258;
  BOOL v259;
  uint64_t v260;
  int v261;
  int v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  char *v266;
  int v267;
  int v268;
  int v269;
  int v270;
  char *v271;
  unint64_t v272;
  BOOL v273;
  char *v274;
  _QWORD *v275;
  char *v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  __int128 v285;
  uint64_t v286;
  _OWORD *v287;
  _OWORD *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  char *v293;
  __int128 v294;
  __int128 v295;
  char *v296;
  __int128 v297;
  __int128 v298;
  int32x4_t v299;
  int32x4_t v300;
  float32x4_t v301;
  float32x2_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BYTE *v306;
  _DWORD **v307;
  _BOOL4 v308;
  uint64_t v309;
  unint64_t v310;
  BOOL v311;
  int v313;
  __int128 v314;
  float v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  char *v320;
  _QWORD *v321;
  void *v322;
  char *v323;
  void *v324;
  void *v325;
  char *v326;
  _QWORD *v327;
  char *v328;
  void *v329;
  void *v330;
  float32x2_t *v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  int v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  float32x2_t v342;
  int32x4_t v343;
  int32x4_t v344;
  float32x4_t v345;
  int v346;
  int v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  BOOL v352;
  unint64_t v353;
  unint64_t v354;
  BOOL v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  float32x2_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x2_t *v368;
  float32x2_t *v369;
  float *v370;
  int8x16_t v371;
  int8x16_t v372;
  int32x4_t v373;
  int8x16_t v374;
  float32x2_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  float v385;
  char *v386;
  float v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x2_t v390;
  int8x16_t v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  float *v399;
  char *v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  _BYTE *v405;
  float *v406;
  char *v407;
  uint64_t v408;
  char *v409;
  unint64_t v410;
  float *v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  float32x4_t *v416;
  float32x4_t *v417;
  uint64_t v418;
  float32x4_t v419;
  float32x2_t *v420;
  int8x16_t v421;
  _BYTE *v422;
  _BYTE *v423;
  float v424;
  unint64_t v425;
  uint64_t v426;
  char *v427;
  size_t v428;
  void **v429;
  void **v430;
  int64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  char *v435;
  char *v436;
  unint64_t v437;
  void **v438;
  void *v439;
  char *v440;
  int64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  _BYTE *v445;
  char *v446;
  char *v447;
  unint64_t v448;
  char *v449;
  int v450;
  void **v451;
  int64_t v452;
  unint64_t v453;
  void **v454;
  unint64_t v455;
  unint64_t v456;
  char *v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  BOOL v462;
  BOOL v464;
  BOOL v466;
  BOOL v468;
  BOOL v469;
  uint64_t v470;
  uint64_t v471;
  const double *v472;
  double *v473;
  uint64_t v474;
  const double *v475;
  double *v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  _OWORD *v480;
  char *v481;
  uint64_t v482;
  __int128 v483;
  void *v484;
  void *v485;
  _BOOL8 v486;
  float v487;
  void *v488;
  __int128 v489;
  __int128 v490;
  float v491;
  float32x4_t v492;
  int8x16_t v493;
  int8x16_t v494;
  int8x16_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  int8x16_t v499;
  void *v500;
  __int128 v501;
  __int128 v502;
  uint64_t v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  char *v507;
  int32x4_t v508;
  int32x4_t v509;
  float32x4_t v510;
  float32x2_t v511;
  uint64_t v512;
  unint64_t *v513;
  char *v514;
  _QWORD *v515;
  char *v516;
  void *v517;
  uint64_t v518;
  float32x2_t *v519;
  float32x4_t v520;
  int8x16_t v521;
  int8x16_t v522;
  int32x4_t v523;
  int8x16_t v524;
  float32x4_t v525;
  unsigned __int32 v526;
  int8x16_t v527;
  float32x4_t v528;
  uint64_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *p_shared_owners;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  unint64_t v541;
  char *v542;
  char *v543;
  unint64_t v544;
  char *v545;
  char *v546;
  uint64_t v547;
  char *v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  char *v554;
  unint64_t v555;
  unint64_t v556;
  unint64_t v557;
  BOOL v558;
  BOOL v559;
  BOOL v560;
  BOOL v561;
  BOOL v562;
  BOOL v563;
  BOOL v564;
  BOOL v565;
  BOOL v566;
  uint64_t v567;
  uint64_t v568;
  const double *v569;
  double *v570;
  uint64_t v571;
  const double *v572;
  double *v573;
  uint64_t v574;
  __int128 v575;
  int v576;
  void *v577;
  __int32 v578;
  float v579;
  __int128 v580;
  __int128 v581;
  float v582;
  void *v583;
  unint64_t v584;
  float v585;
  uint64_t *v586;
  uint64_t v587;
  int64x2_t *v588;
  int64x2_t v589;
  uint64_t v590;
  float32x2_t v591;
  float32x2_t v592;
  uint64_t v593;
  float v594;
  __int32 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  char *v602;
  int v603;
  unint64_t v604;
  float32x2_t v605;
  uint64_t v606;
  float32x4_t v607;
  unint64_t v608;
  int32x4_t v609;
  unint64_t v610;
  int32x4_t v611;
  float32x2_t v612;
  float32x4_t v614;
  char *v616;
  unint64_t v617;
  char *v618;
  char *v623;
  void **v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  char *v628;
  uint64_t v629;
  float32x4_t v630;
  char *v631;
  void **v632;
  float32x4_t v633;
  float32x2_t v634;
  uint64_t v635;
  float32x4_t v636;
  int8x16_t v637;
  float32x4_t v638;
  float32x2_t v639;
  float32x2_t v640;
  float32x4_t v641;
  float32x2_t v642;
  int v643;
  uint64_t v644;
  float32x4_t v645;
  float32x2_t v646;
  float32x4_t v647;
  uint64_t v648;
  float32x4_t v649;
  float32x4_t v650;
  void *v651;
  int8x16_t v652;
  uint64_t v653;
  int v654;
  float32x4_t v655;
  float32x2_t v656;
  unint64_t v657;
  int8x16_t v658;
  int v659;
  unint64_t v660;
  float32x4_t v661;
  float32x2_t v662;
  _BYTE *v663;
  int v664;
  int8x16_t v665;
  int v666;
  void *v667;
  float32x4_t v668;
  float32x2_t v669;
  uint64_t v670;
  std::__shared_weak_count *v671;
  unint64_t v672[2];
  void *v673[2];
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  char v677;
  void *__src;
  int v679[2];
  char *v680;
  void *v681;
  char *v682;
  char *v683;
  _BYTE v684[80];
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  uint64_t v690;
  void *v691;
  char *v692;
  char *v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  void *__p[2];
  __int128 v699;
  __int128 v700;
  __int128 v701;
  void *v702[10];
  char v703;
  uint64_t v704;
  float64x2x2_t v705;
  float64x2x2_t v706;

  v704 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v21 = *(_QWORD *)(a2 + 432);
  v629 = a2;
  if (*(_OWORD *)(a2 + 384) == 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 1306, (uint64_t)"num_6dof_kpts > 0 or num_5dof_kpts > 0", 38, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (v21 > 1)
    v22 = 1;
  else
    v22 = a9;
  v23 = *((char *)a4 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = a4[1];
  v25 = v22 * a10;
  switch(v24)
  {
    case 8uLL:
      if (v23 >= 0)
        v26 = a4;
      else
        v26 = (_QWORD *)*a4;
      v27 = *v26 != 0x7370614D74616548;
      if (a9 >= 2 && !v27)
      {
        v643 = a19[4].u8[0];
        if (a19[4].i8[0])
        {
          v633 = a19[2];
          v636 = a19[3];
          v630 = a19[1];
          v625 = *a19;
        }
        else
        {
          v625 = 0u;
          v630 = 0u;
          v633 = 0u;
          v636 = 0u;
        }
        v253 = 0;
        v660 = *(_QWORD *)(a2 + 432);
        if (v660 > 1)
          v254 = 1;
        else
          v254 = a9;
        v654 = v254 * a10;
        v255 = *(void **)(a2 + 384);
        v256 = *(unsigned int *)(a2 + 360);
        v257 = *(_QWORD *)(a2 + 352);
        v692 = 0;
        v691 = 0;
        v693 = 0;
        v690 = 0;
        v688 = 0uLL;
        v689 = 0uLL;
        if (v256)
          v258 = (_DWORD)v257 == 0;
        else
          v258 = 1;
        v259 = v258 || (_DWORD)v255 == 0;
        if (v259)
          v260 = 0;
        else
          v260 = v256 | (v257 << 32);
        v667 = v255;
        if (v259)
          v261 = 0;
        else
          v261 = (int)v255;
        if (v259)
          v262 = 0;
        else
          v262 = HIDWORD(v260) * v260;
        v686 = 0uLL;
        v687 = 0uLL;
        v685 = 0uLL;
        memset(&v684[32], 0, 48);
        if (HIDWORD(v260))
          v263 = v260 << 32;
        else
          v263 = 0;
        v648 = v263 | ((_DWORD)v260 != 0);
        memset(v684, 0, 32);
        v683 = 0;
        v681 = 0;
        v682 = 0;
        do
        {
          sub_207CB36E8(a3, (uint64_t)v702);
          if (v660 <= 1)
            v267 = v253;
          else
            v267 = 0;
          if (v660 <= 1)
            v268 = 0;
          else
            v268 = v253 * (_DWORD)v667;
          v269 = (int)v702[5];
          v270 = HIDWORD(v702[5]);
          v271 = (char *)v702[0];
          v272 = HIDWORD(*(unint64_t *)((char *)&v702[1] + 4));
          if (HIDWORD(v702[1]))
            v273 = v272 == 0;
          else
            v273 = 1;
          if (v273)
            LODWORD(v272) = 0;
          if ((_DWORD)v272 * HIDWORD(v702[4]) == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          if (v262 * v261 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          v274 = &v271[4 * (v269 * v268 + v270 * (v267 + v654))];
          v275 = v682;
          if (v682 >= v683)
          {
            v277 = v681;
            v278 = (v682 - (_BYTE *)v681) >> 5;
            v279 = v278 + 1;
            if ((unint64_t)(v278 + 1) >> 59)
              sub_207CA420C();
            v280 = v683 - (_BYTE *)v681;
            if ((v683 - (_BYTE *)v681) >> 4 > v279)
              v279 = v280 >> 4;
            if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFE0)
              v281 = 0x7FFFFFFFFFFFFFFLL;
            else
              v281 = v279;
            if (v281)
            {
              if (v281 >> 59)
                goto LABEL_848;
              v282 = (char *)operator new(32 * v281);
            }
            else
            {
              v282 = 0;
            }
            v283 = &v282[32 * v278];
            *(_QWORD *)v283 = v274;
            *((_QWORD *)v283 + 1) = v260;
            *((_DWORD *)v283 + 4) = v261;
            *(_QWORD *)(v283 + 20) = v648;
            *((_DWORD *)v283 + 7) = v262;
            v284 = v283;
            if (v275 != v277)
            {
              do
              {
                v285 = *((_OWORD *)v275 - 1);
                *((_OWORD *)v284 - 2) = *((_OWORD *)v275 - 2);
                *((_OWORD *)v284 - 1) = v285;
                v284 -= 32;
                v275 -= 4;
              }
              while (v275 != v277);
              v275 = v277;
            }
            v276 = v283 + 32;
            v681 = v284;
            v682 = v283 + 32;
            v683 = &v282[32 * v281];
            if (v275)
              operator delete(v275);
          }
          else
          {
            *(_QWORD *)v682 = v274;
            v275[1] = v260;
            *((_DWORD *)v275 + 4) = v261;
            *(_QWORD *)((char *)v275 + 20) = v648;
            v276 = (char *)(v275 + 4);
            *((_DWORD *)v275 + 7) = v262;
          }
          v682 = v276;
          v286 = *a5 + 328 * v253 + 92;
          v287 = v692;
          if (v692 < v693)
          {
            v264 = *(_OWORD *)v286;
            v265 = *(_OWORD *)(*a5 + 328 * v253 + 108);
            *((_DWORD *)v692 + 8) = *(_DWORD *)(*a5 + 328 * v253 + 124);
            *v287 = v264;
            v287[1] = v265;
            v266 = (char *)v287 + 36;
          }
          else
          {
            v288 = v691;
            v289 = 0x8E38E38E38E38E39 * ((v692 - (_BYTE *)v691) >> 2);
            v290 = v289 + 1;
            if (v289 + 1 > 0x71C71C71C71C71CLL)
              sub_207CA420C();
            if (0x1C71C71C71C71C72 * ((v693 - (_BYTE *)v691) >> 2) > v290)
              v290 = 0x1C71C71C71C71C72 * ((v693 - (_BYTE *)v691) >> 2);
            if (0x8E38E38E38E38E39 * ((v693 - (_BYTE *)v691) >> 2) >= 0x38E38E38E38E38ELL)
              v291 = 0x71C71C71C71C71CLL;
            else
              v291 = v290;
            if (v291)
            {
              if (v291 > 0x71C71C71C71C71CLL)
LABEL_848:
                sub_207CA3AB8();
              v292 = (char *)operator new(36 * v291);
            }
            else
            {
              v292 = 0;
            }
            v293 = &v292[4 * ((v692 - (_BYTE *)v691) >> 2)];
            v294 = *(_OWORD *)v286;
            v295 = *(_OWORD *)(v286 + 16);
            *((_DWORD *)v293 + 8) = *(_DWORD *)(v286 + 32);
            *(_OWORD *)v293 = v294;
            *((_OWORD *)v293 + 1) = v295;
            v296 = &v292[36 * v289];
            if (v287 != v288)
            {
              do
              {
                v297 = *(_OWORD *)((char *)v287 - 36);
                v298 = *(_OWORD *)((char *)v287 - 20);
                *((_DWORD *)v296 - 1) = *((_DWORD *)v287 - 1);
                *(_OWORD *)(v296 - 20) = v298;
                *(_OWORD *)(v296 - 36) = v297;
                v296 -= 36;
                v287 = (_OWORD *)((char *)v287 - 36);
              }
              while (v287 != v288);
              v287 = v288;
            }
            v266 = v293 + 36;
            v691 = v296;
            v692 = v293 + 36;
            v693 = &v292[36 * v291];
            if (v287)
              operator delete(v287);
          }
          v692 = v266;
          ++v253;
        }
        while (v253 != a9);
        sub_207D6EC2C(&v681, a8, (__int32 **)&v691, 1, v702, *(float *)(a2 + 584), *(float *)(a2 + 596), *(float *)(a2 + 600));
        sub_207DA63D8((uint64_t)v684, (uint64_t)v702);
        sub_207D80E10((uint64_t)v702);
        v303 = (_QWORD)v667 * a9;
        *(_QWORD *)v679 = 0;
        __src = 0;
        v680 = 0;
        if ((_QWORD)v667 * a9)
        {
          if (v303 >> 61)
            sub_207CA420C();
          __src = operator new(8 * v303);
          v680 = (char *)__src + 8 * v303;
          bzero(__src, 8 * v303);
          *(_QWORD *)v679 = v680;
        }
        v304 = *(_QWORD *)(a2 + 72);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 80) - v304) >> 6) < 2)
        {
          v305 = a15;
          v306 = (_BYTE *)(a15 + 1320);
          *(_BYTE *)(a15 + 1320) = 0;
          v307 = (_DWORD **)(a15 + 1104);
          v308 = **(_DWORD **)(a15 + 1104) == 0;
        }
        else
        {
          v305 = a15;
          if (!*(_BYTE *)(a15 + 1312))
          {
            sub_207DA65C0(v702, a2, (uint64_t)v684, a5, a8, (char **)&__src, (uint64_t)a14, 1);
            *(_BYTE *)(a15 + 1320) = 1;
            v487 = *(double *)(a15 + 936);
            *(float *)(a15 + 1324) = v487;
            if (v703)
            {
              v488 = v702[0];
              *(void **)(a15 + 1304) = v702[0];
              *(_BYTE *)(a15 + 1312) = 1;
              sub_207DECE94(a15, (int *)(*(_QWORD *)(a2 + 72) + 192 * (_QWORD)v488));
              a16[8].i32[0] = (__int32)v702[1];
              v489 = *(_OWORD *)((char *)&v702[3] + 4);
              *(_OWORD *)a16->f32 = *(_OWORD *)((char *)&v702[1] + 4);
              *(_OWORD *)a16[2].f32 = v489;
              v490 = *(_OWORD *)((char *)&v702[7] + 4);
              *(_OWORD *)a16[4].f32 = *(_OWORD *)((char *)&v702[5] + 4);
              *(_OWORD *)a16[6].f32 = v490;
            }
            goto LABEL_820;
          }
          v306 = (_BYTE *)(a15 + 1320);
          *(_BYTE *)(a15 + 1320) = 0;
          v307 = (_DWORD **)(a15 + 1104);
          if (!**(_DWORD **)(a15 + 1104))
          {
            sub_207DECE94(a15, (int *)(v304 + 192 * *(_QWORD *)(a15 + 1304)));
            v486 = 0;
            v491 = 0.0;
            goto LABEL_726;
          }
          v308 = 0;
        }
        if (*(_BYTE *)(v305 + 441))
        {
          if (*(_BYTE *)(v305 + 652))
          {
            if (*(_QWORD *)(a2 + 640))
            {
              v309 = 632;
              if (!*(_BYTE *)(a15 + 1328))
                v309 = 640;
              v310 = *(_QWORD *)(a2 + v309);
            }
            else
            {
              v310 = *(_QWORD *)(a2 + 632);
            }
            v491 = (float)v310;
            v486 = 1;
            goto LABEL_724;
          }
          v486 = 1;
        }
        else
        {
          v486 = *(_BYTE *)(a2 + 666) != 0;
        }
        v491 = 0.0;
LABEL_724:
        if (v308)
        {
          *(_QWORD *)(a15 + 1304) = 0;
          *(_BYTE *)(a15 + 1312) = 1;
        }
LABEL_726:
        LOBYTE(v673[0]) = 0;
        v677 = 0;
        if (v643)
        {
          v299.i64[0] = *(_QWORD *)(*a5 + 200);
          v299.i32[2] = *(_DWORD *)(*a5 + 208);
          v300.i64[0] = *(_QWORD *)(*a5 + 216);
          v300.i32[2] = *(_DWORD *)(*a5 + 224);
          v492.i64[0] = vzip1q_s32(v299, v300).u64[0];
          v301.i64[0] = *(_QWORD *)(*a5 + 248);
          v301.i32[2] = *(_DWORD *)(*a5 + 256);
          v493 = (int8x16_t)vnegq_f32(v301);
          v494 = (int8x16_t)vtrn2q_s32(v299, v300);
          v494.i32[2] = HIDWORD(*(_QWORD *)(*a5 + 232));
          v302.i32[0] = *(_DWORD *)(*a5 + 240);
          v495 = (int8x16_t)vzip2q_s32(v299, v300);
          *(float32x2_t *)v496.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v492.f32, *(float *)v493.i32), *(float32x2_t *)v494.i8, *(float32x2_t *)v301.f32, 1), *(float32x2_t *)v495.i8, v301, 2);
          v495.i32[2] = v302.i32[0];
          v496.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(*a5 + 232), *(float32x2_t *)v493.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(*a5 + 232), 1), *(float32x2_t *)v301.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v493, v493, 8uLL), v302).u32[0]);
          v497.i32[3] = 0;
          v497.i32[0] = v494.i32[0];
          v499 = vextq_s8(vextq_s8(v494, v494, 0xCuLL), v495, 8uLL);
          v498.i64[0] = v499.i64[1];
          *(uint64_t *)((char *)v497.i64 + 4) = v499.i64[0];
          v498.i64[1] = vdupq_laneq_s32((int32x4_t)v495, 2).u32[0];
          v492.i64[1] = *(_QWORD *)(*a5 + 232);
          v677 = 1;
          *(float32x4_t *)v673 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v492, v625.f32[0]), v497, *(float32x2_t *)v625.f32, 1), v498, v625, 2), v496, v625, 3);
          v674 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v492, v630.f32[0]), v497, *(float32x2_t *)v630.f32, 1), v498, v630, 2), v496, v630, 3);
          v675 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v492, v633.f32[0]), v497, *(float32x2_t *)v633.f32, 1), v498, v633, 2), v496, v633, 3);
          v676 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v492, v636.f32[0]), v497, *(float32x2_t *)v636.f32, 1), v498, v636, 2), v496, v636, 3);
        }
        v500 = *a6;
        __p[0] = v667;
        __p[1] = v500;
        if (v667
          && !v500
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        sub_207D7A8F4((uint64_t)__p, (uint64_t)a8, (uint64_t)&v691, (uint64_t)v684, (uint64_t)v673, (unint64_t)v491, *(_QWORD *)(a2 + 608), v486, (unint64_t **)&__src, *(_QWORD *)(a2 + 360), *(_QWORD *)(a2 + 352), *(_BYTE *)(a2 + 653), *(_QWORD *)(a2 + 672));
        a16[8].i32[0] = (__int32)v702[0];
        v501 = *(_OWORD *)((char *)&v702[2] + 4);
        *(_OWORD *)a16->f32 = *(_OWORD *)((char *)v702 + 4);
        *(_OWORD *)a16[2].f32 = v501;
        v502 = *(_OWORD *)((char *)&v702[6] + 4);
        *(_OWORD *)a16[4].f32 = *(_OWORD *)((char *)&v702[4] + 4);
        *(_OWORD *)a16[6].f32 = v502;
        if (a18)
          sub_207DA8084(a17, (uint64_t)v684);
        if (*(double *)(a15 + 936) - *(float *)(a15 + 1324) > *(float *)(a15 + 124)
          && a16[8].f32[0] > 0.43
          && (**v307 & 0xFFFFFFFE) != 6
          && 0x8F9C18F9C18F9C19 * ((a5[1] - *a5) >> 3) == (uint64_t)(a14[4] - a14[3]) >> 4
          && *(_BYTE *)(a15 + 1312))
        {
          v503 = *(_QWORD *)(a15 + 1304);
          kdebug_trace();
          v504 = a5[1] - *a5;
          v663 = v306;
          if (v504)
          {
            v505 = 0x8F9C18F9C18F9C19 * (v504 >> 3);
            if (v505 >> 60)
              sub_207CA420C();
            v506 = *(_QWORD *)(a2 + 72);
            v507 = (char *)operator new(0xF9C18F9C18F9C190 * (v504 >> 3));
            v512 = 0;
            v513 = (unint64_t *)(v506 + 192 * v503 + 96);
            v514 = &v507[16 * v505];
            v515 = (_QWORD *)(v506 + 192 * v503 + 104);
            v516 = v507;
            while (1)
            {
              while (1)
              {
                v519 = (float32x2_t *)(*a8 + (v512 << 6));
                *(float32x2_t *)v508.i8 = *v519;
                v508.i32[2] = v519[1].i32[0];
                *(float32x2_t *)v509.i8 = v519[2];
                v509.i32[2] = v519[3].i32[0];
                *(float32x2_t *)v510.f32 = v519[6];
                v510.i32[2] = v519[7].i32[0];
                v520.i64[0] = vzip1q_s32(v508, v509).u64[0];
                v521 = (int8x16_t)vnegq_f32(v510);
                v511.i32[0] = v519[5].i32[0];
                v522 = (int8x16_t)vtrn2q_s32(v508, v509);
                v522.i32[2] = HIDWORD(*(_QWORD *)&v519[4]);
                v523 = vzip2q_s32(v508, v509);
                v524 = (int8x16_t)v523;
                v524.i32[2] = v511.i32[0];
                *(float32x2_t *)v525.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v520.f32, *(float *)v521.i32), *(float32x2_t *)v522.i8, *(float32x2_t *)v510.f32, 1), *(float32x2_t *)v523.i8, v510, 2);
                v526 = vdupq_laneq_s32((int32x4_t)v524, 2).u32[0];
                v525.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v519[4], *(float32x2_t *)v521.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v519[4], 1), *(float32x2_t *)v510.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v521, v521, 8uLL), v511).u32[0]);
                v527 = vextq_s8(vextq_s8(v522, v522, 0xCuLL), v524, 8uLL);
                v524.i64[0] = __PAIR64__(v527.u32[0], v522.u32[0]);
                v524.i64[1] = v527.u32[1];
                v528.i64[0] = v527.i64[1];
                v528.i64[1] = v526;
                v520.i64[1] = *(_QWORD *)&v519[4];
                v529 = *a5 + 328 * v512 + 92;
                v530 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v520, COERCE_FLOAT(*(_OWORD *)a16->f32)), (float32x4_t)v524, *a16, 1), v528, *(float32x4_t *)a16->f32, 2), v525, *(float32x4_t *)a16->f32, 3);
                v531 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v520, COERCE_FLOAT(*(_OWORD *)a16[2].f32)), (float32x4_t)v524, a16[2], 1), v528, *(float32x4_t *)a16[2].f32, 2), v525, *(float32x4_t *)a16[2].f32, 3);
                v532 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v520, COERCE_FLOAT(*(_OWORD *)a16[4].f32)), (float32x4_t)v524, a16[4], 1), v528, *(float32x4_t *)a16[4].f32, 2), v525, *(float32x4_t *)a16[4].f32, 3);
                v533 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v520, COERCE_FLOAT(*(_OWORD *)a16[6].f32)), (float32x4_t)v524, a16[6], 1), v528, *(float32x4_t *)a16[6].f32, 2), v525, *(float32x4_t *)a16[6].f32, 3);
                *(float32x4_t *)v702 = v530;
                *(float32x4_t *)&v702[2] = v531;
                *(float32x4_t *)&v702[4] = v532;
                *(float32x4_t *)&v702[6] = v533;
                v534 = *v513;
                v672[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v515 - *v513) >> 2);
                v672[1] = v534;
                v670 = 0;
                v671 = 0;
                sub_207DE48FC(v529, (float32x2_t *)v702, v672, 0, &v670, (int8x16_t *)__p);
                v535 = v671;
                if (v671)
                {
                  p_shared_owners = (unint64_t *)&v671->__shared_owners_;
                  do
                    v537 = __ldaxr(p_shared_owners);
                  while (__stlxr(v537 - 1, p_shared_owners));
                  if (!v537)
                  {
                    ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
                    std::__shared_weak_count::__release_weak(v535);
                  }
                }
                if (v516 >= v514)
                  break;
                v517 = __p[1];
                *(void **)v516 = __p[0];
                *((_QWORD *)v516 + 1) = v517;
                v518 = (uint64_t)(v516 + 16);
                ++v512;
                v516 += 16;
                if (v512 == v505)
                  goto LABEL_810;
              }
              v538 = v516 - v507;
              v539 = (v516 - v507) >> 4;
              v540 = v539 + 1;
              if ((unint64_t)(v539 + 1) >> 60)
                sub_207CA420C();
              if ((v514 - v507) >> 3 > v540)
                v540 = (v514 - v507) >> 3;
              if ((unint64_t)(v514 - v507) >= 0x7FFFFFFFFFFFFFF0)
                v541 = 0xFFFFFFFFFFFFFFFLL;
              else
                v541 = v540;
              if (v541 >> 60)
                sub_207CA3AB8();
              v542 = (char *)operator new(16 * v541);
              v543 = &v542[16 * v539];
              *(_OWORD *)v543 = *(_OWORD *)__p;
              v518 = (uint64_t)(v543 + 16);
              if (v516 == v507)
              {
                v546 = v543;
              }
              else
              {
                v544 = v516 - v507 - 16;
                if (v544 < 0x3F0)
                  goto LABEL_757;
                v548 = v516 - 16;
                v549 = v516 - 16 - v507;
                v550 = v549 & 0xFFFFFFFFFFFFFFF0;
                if (&v542[v538 - 16 - (v549 & 0xFFFFFFFFFFFFFFF0)] > &v542[v538 - 16])
                  goto LABEL_757;
                if (&v542[v538 - 8 - v550] > &v542[v538 - 8])
                  goto LABEL_757;
                if (&v548[-v550] > v548)
                  goto LABEL_757;
                v551 = (unint64_t)(v516 - 8);
                if (&v516[-v550 - 8] > v516 - 8)
                  goto LABEL_757;
                v552 = v549 & 0xFFFFFFFFFFFFFFF0;
                v553 = (unint64_t)&v542[v538 - v552 - 16];
                v554 = &v542[v538 - 8];
                v555 = (unint64_t)&v542[v538 - v552 - 8];
                v556 = (unint64_t)&v548[-v552];
                v557 = v551 - v552;
                v558 = v553 >= v551 || v556 >= (unint64_t)v554;
                v559 = !v558;
                v560 = v553 >= (unint64_t)v516 || v557 >= (unint64_t)v554;
                v561 = !v560;
                v562 = v555 >= v551 || v556 >= (unint64_t)v543;
                v563 = !v562;
                v564 = v555 >= (unint64_t)v516 || v557 >= (unint64_t)v543;
                v565 = !v564;
                v566 = v555 >= (unint64_t)v554 || v553 >= (unint64_t)v543;
                if (!v566 || v559 || v561 || v563 || v565)
                {
LABEL_757:
                  v545 = v516;
                  v546 = v543;
                }
                else
                {
                  v567 = (v544 >> 4) + 1;
                  v568 = 16 * (v567 & 0x1FFFFFFFFFFFFFFCLL);
                  v545 = &v516[-v568];
                  v546 = &v543[-v568];
                  v569 = (const double *)(v516 - 32);
                  v570 = (double *)(v543 - 32);
                  v571 = v567 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    *(float64x2x2_t *)(&v508 - 1) = vld2q_f64(v569);
                    v572 = v569 - 4;
                    *(float64x2x2_t *)v509.i8 = vld2q_f64(v572);
                    vst2q_f64(v570, *(float64x2x2_t *)(&v508 - 1));
                    v573 = v570 - 4;
                    vst2q_f64(v573, *(float64x2x2_t *)v509.i8);
                    v570 -= 8;
                    v569 -= 8;
                    v571 -= 4;
                  }
                  while (v571);
                  if (v567 == (v567 & 0x1FFFFFFFFFFFFFFCLL))
                    goto LABEL_761;
                }
                do
                {
                  v547 = *((_QWORD *)v545 - 2);
                  v545 -= 16;
                  *((_QWORD *)v546 - 2) = v547;
                  v546 -= 16;
                  *((_QWORD *)v546 + 1) = *((_QWORD *)v545 + 1);
                }
                while (v545 != v507);
              }
LABEL_761:
              v514 = &v542[16 * v541];
              if (v507)
                operator delete(v507);
              v507 = v546;
              ++v512;
              v516 = (char *)v518;
              if (v512 == v505)
                goto LABEL_810;
            }
          }
          v507 = 0;
          v518 = 0;
LABEL_810:
          v576 = sub_207DA81BC((uint64_t)v507, v518, a14[3]);
          kdebug_trace();
          if (v576 == 1)
          {
            sub_207DA65C0(v702, v629, (uint64_t)v684, a5, a8, (char **)&__src, (uint64_t)a14, 0);
            if (v703)
            {
              v577 = v702[0];
              v578 = (__int32)v702[1];
              *(_OWORD *)__p = *(_OWORD *)((char *)&v702[1] + 4);
              v699 = *(_OWORD *)((char *)&v702[3] + 4);
              v700 = *(_OWORD *)((char *)&v702[5] + 4);
              v701 = *(_OWORD *)((char *)&v702[7] + 4);
              v579 = *(double *)(a15 + 936);
              *(float *)(a15 + 1324) = v579;
              if (*(_BYTE *)(a15 + 1312) && v577 != *(void **)(a15 + 1304))
              {
                *(_QWORD *)(a15 + 1304) = v577;
                *(_BYTE *)(a15 + 1312) = 1;
                sub_207DECE94(a15, (int *)(*(_QWORD *)(v629 + 72) + 192 * (_QWORD)v577));
                a16[8].i32[0] = v578;
                v580 = v699;
                *(_OWORD *)a16->f32 = *(_OWORD *)__p;
                *(_OWORD *)a16[2].f32 = v580;
                v581 = v701;
                *(_OWORD *)a16[4].f32 = v700;
                *(_OWORD *)a16[6].f32 = v581;
                *v663 = 1;
              }
            }
            else
            {
              v582 = *(double *)(a15 + 936);
              *(float *)(a15 + 1324) = v582;
            }
          }
          if (v507)
            operator delete(v507);
        }
LABEL_820:
        if (&__src != (void **)a15)
          sub_207CDADA0((_QWORD *)a15, (char *)__src, *(char **)v679, (uint64_t)(*(_QWORD *)v679 - (_QWORD)__src) >> 3);
        v583 = __src;
        if (__src == *(void **)v679)
        {
          v585 = 0.0;
        }
        else
        {
          v584 = *(_QWORD *)v679 - (_QWORD)__src - 8;
          v585 = 0.0;
          v586 = (uint64_t *)__src;
          if (v584 < 0x18)
            goto LABEL_882;
          v587 = (v584 >> 3) + 1;
          v586 = (uint64_t *)((char *)__src + 8 * (v587 & 0x3FFFFFFFFFFFFFFCLL));
          v588 = (int64x2_t *)((char *)__src + 16);
          v589 = vdupq_n_s64(2uLL);
          v590 = v587 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v591 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64(vceqq_s64(v588[-1], v589)), (int8x8_t)0x100000001));
            v592 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64(vceqq_s64(*v588, v589)), (int8x8_t)0x100000001));
            v585 = (float)((float)((float)(v585 + v591.f32[0]) + v591.f32[1]) + v592.f32[0]) + v592.f32[1];
            v588 += 2;
            v590 -= 4;
          }
          while (v590);
          if (v587 != (v587 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_882:
            do
            {
              v593 = *v586++;
              if (v593 == 2)
                v594 = 1.0;
              else
                v594 = 0.0;
              v585 = v585 + v594;
            }
            while (v586 != *(uint64_t **)v679);
          }
        }
        *(float *)(a15 + 24) = v585 / (float)(unint64_t)((uint64_t)(*(_QWORD *)v679 - (_QWORD)__src) >> 3);
        v595 = a16[8].i32[0];
        v596 = *(_OWORD *)a16[2].f32;
        v694 = *(_OWORD *)a16->f32;
        v695 = v596;
        v597 = *(_OWORD *)a16[6].f32;
        v696 = *(_OWORD *)a16[4].f32;
        v697 = v597;
        if (v583)
        {
          *(_QWORD *)v679 = v583;
          operator delete(v583);
        }
        if (v681)
        {
          v682 = (char *)v681;
          operator delete(v681);
        }
        sub_207D80E10((uint64_t)v684);
        if (v691)
        {
          v692 = (char *)v691;
          operator delete(v691);
        }
        v331 = a16;
        a16[8].i32[0] = v595;
        v598 = v695;
        *(_OWORD *)a16->f32 = v694;
        *(_OWORD *)a16[2].f32 = v598;
        v333 = v696;
        v334 = v697;
        goto LABEL_840;
      }
      if (a9 != 1 || v27)
        goto LABEL_841;
      v209 = *(void **)(a2 + 384);
      v208 = *(void **)(v629 + 392);
      v210 = *(unsigned int *)(v629 + 360);
      v211 = *(unsigned int *)(v629 + 352);
      sub_207CB36E8(a3, (uint64_t)v684);
      v212 = *(_DWORD *)&v684[44];
      v213 = *(_QWORD *)v684;
      v214 = HIDWORD(*(_QWORD *)&v684[12]);
      if (*(_DWORD *)&v684[12])
        v215 = v214 == 0;
      else
        v215 = 1;
      if (v215)
        LODWORD(v214) = 0;
      if ((_DWORD)v214 * *(_DWORD *)&v684[36] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_870;
      }
      v216 = (_DWORD)v208 + (_DWORD)v209;
      v217 = v210 | (v211 << 32);
      v218 = !v210 || v211 == 0;
      v219 = v218 || v216 == 0;
      v220 = v219 ? 0 : v210 | (v211 << 32);
      v221 = HIDWORD(v220);
      if (v219)
      {
        v216 = 0;
        v222 = 0;
      }
      else
      {
        v222 = HIDWORD(v220) * v220;
      }
      v223 = (_DWORD)v220 != 0;
      v224 = v220 << 32;
      v225 = (_DWORD)v221 ? v224 : 0;
      if (v222 * v216 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_870;
      }
      v226 = (char *)(v213 + 4 * (v212 * a10));
      v227 = (void *)(v225 | v223);
      v228 = HIDWORD(v217);
      if (!v209)
        goto LABEL_366;
      if (v210)
        v229 = v228 == 0;
      else
        v229 = 1;
      v230 = v229 || (_DWORD)v209 == 0;
      if (v230)
        v231 = 0;
      else
        v231 = (void *)v217;
      if (v230)
        v232 = 0;
      else
        v232 = (int)v209;
      v702[0] = v226;
      v702[1] = v231;
      *(void **)((char *)&v702[2] + 4) = v227;
      LODWORD(v702[2]) = v232;
      HIDWORD(v702[3]) = v222;
      if (v222 * v232 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_870;
      }
      v233 = *a6;
      v673[0] = v209;
      v673[1] = v233;
      if (!v233
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_870;
      }
      sub_207D6C590((uint64_t *)v702, v673, *a5 + 328 * a10 + 92, (uint64_t)v684, *(float *)(v629 + 584));
      v79 = *(float *)v684;
      a16[8].i32[0] = *(_DWORD *)v684;
      v234 = *(_OWORD *)&v684[20];
      *(_OWORD *)a16->f32 = *(_OWORD *)&v684[4];
      *(_OWORD *)a16[2].f32 = v234;
      v235 = *(_OWORD *)&v684[52];
      *(_OWORD *)a16[4].f32 = *(_OWORD *)&v684[36];
      *(_OWORD *)a16[6].f32 = v235;
      if (v79 <= 0.0 && v208)
      {
LABEL_366:
        if (v210)
          v236 = v228 == 0;
        else
          v236 = 1;
        v237 = v236 || (_DWORD)v208 == 0;
        if (v237)
          v238 = 0;
        else
          v238 = (void *)v217;
        if (v237)
          v239 = 0;
        else
          v239 = (int)v208;
        v702[0] = &v226[4 * (_DWORD)v209 * v222];
        v702[1] = v238;
        *(void **)((char *)&v702[2] + 4) = v227;
        LODWORD(v702[2]) = v239;
        HIDWORD(v702[3]) = v222;
        if (v222 * v239 == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| (v240 = *a7, v673[0] = v208, v673[1] = v240, v208)&& !v240&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_870:
          abort();
        }
        sub_207D6C590((uint64_t *)v702, v673, *a5 + 328 * a10 + 92, (uint64_t)v684, *(float *)(v629 + 584));
LABEL_384:
        v79 = *(float *)v684;
        v241 = *(_OWORD *)&v684[20];
        *(_OWORD *)a16->f32 = *(_OWORD *)&v684[4];
        *(_OWORD *)a16[2].f32 = v241;
        v242 = *(_OWORD *)&v684[52];
        *(_OWORD *)a16[4].f32 = *(_OWORD *)&v684[36];
        *(_OWORD *)a16[6].f32 = v242;
        if (v79 > 0.95)
          v79 = 0.95;
        a16[8].f32[0] = v79;
        a16[9].i32[0] = 5;
      }
LABEL_387:
      a16[8].f32[0] = v79;
      goto LABEL_841;
    case 0xAuLL:
      if (v23 >= 0)
        v37 = a4;
      else
        v37 = (uint64_t *)*a4;
      v38 = *v37;
      v39 = *((unsigned __int16 *)v37 + 4);
      if (v38 != 0x656E697272756C42 || v39 != 29555)
        goto LABEL_841;
      sub_207CB36E8(a3, (uint64_t)v684);
      v41 = *(_DWORD *)&v684[44];
      v42 = *(_QWORD *)v684;
      if (*(_DWORD *)&v684[20])
        v43 = *(_DWORD *)&v684[12] == 0;
      else
        v43 = 1;
      if (v43 || HIDWORD(*(_QWORD *)&v684[12]) == 0)
        v45 = 0;
      else
        v45 = *(_DWORD *)&v684[20];
      if (v45 * *(_DWORD *)&v684[40] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v34 = a11;
      v36 = *(float *)(v42 + 4 * (v41 * v25));
      goto LABEL_56;
    case 0xBuLL:
      if (v23 >= 0)
        v98 = a4;
      else
        v98 = (uint64_t *)*a4;
      if (*v98 != 0x696F5079654B4433 || *(uint64_t *)((char *)v98 + 3) != 0x73746E696F507965)
      {
        v100 = *v98;
        v101 = *(uint64_t *)((char *)v98 + 3);
        if (v100 != 0x746E696F5079654BLL || v101 != 0x443373746E696F50)
          goto LABEL_841;
      }
      v103 = *(char **)(a2 + 384);
      v606 = *(_QWORD *)(a2 + 392);
      v610 = *(_QWORD *)(a2 + 432);
      if (v610 > 1)
        v104 = 1;
      else
        v104 = a9;
      sub_207DA82E0(v673, v104);
      sub_207DA82E0(__p, v104);
      v617 = v104;
      if (!v104)
        goto LABEL_496;
      v631 = &v103[v606];
      if (&v103[v606])
      {
        v111 = 0;
        v608 = a10 * a9;
        v623 = v103;
        while (1)
        {
          v112 = v111 + v608;
          v113 = *a5 + 328 * (v111 + v608);
          v114 = *a8 + (v111 << 6);
          v105.i64[0] = *(_QWORD *)v114;
          v105.i32[2] = *(_DWORD *)(v114 + 8);
          v665 = (int8x16_t)v105;
          v105.i64[0] = *(_QWORD *)(v114 + 16);
          v105.i32[2] = *(_DWORD *)(v114 + 24);
          v658 = (int8x16_t)v105;
          v105.i64[0] = *(_QWORD *)(v114 + 32);
          v105.i32[2] = *(_DWORD *)(v114 + 40);
          v652 = (int8x16_t)v105;
          v105.i64[0] = *(_QWORD *)(v114 + 48);
          v105.i32[2] = *(_DWORD *)(v114 + 56);
          v647 = v105;
          v115 = *(float *)v113;
          v105.i32[0] = *(_DWORD *)(v113 + 4);
          v644 = v105.i64[0];
          sub_207CB36E8(a3, (uint64_t)v684);
          if (v610 > 1)
            v112 = a10;
          v116 = *(_DWORD *)&v684[44];
          v117 = *(_QWORD *)v684;
          if (*(_DWORD *)&v684[20])
            v118 = *(_DWORD *)&v684[12] == 0;
          else
            v118 = 1;
          if (v118 || HIDWORD(*(_QWORD *)&v684[12]) == 0)
            v120 = 0;
          else
            v120 = *(_DWORD *)&v684[20];
          if (v120 * *(_DWORD *)&v684[40] == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            goto LABEL_495;
          }
          v121 = 0;
          v122 = v117 + 4 * (v116 * v112);
          v637 = vextq_s8(v658, v658, 8uLL);
          v640 = (float32x2_t)vextq_s8(v665, v665, 8uLL).u64[0];
          v105 = (float32x4_t)vextq_s8(v652, v652, 8uLL);
          v634 = *(float32x2_t *)v105.f32;
          do
          {
            v124 = v122 + 12 * v121;
            v105.i64[0] = *(_QWORD *)v124;
            v105.i32[2] = *(_DWORD *)(v124 + 8);
            DWORD1(v106) = HIDWORD(v644);
            v125 = vmulq_n_f32(v105, *(float *)&v644);
            *(float *)&v106 = v115 + v125.f32[2];
            *(float32x2_t *)v107.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v665.i8, v125.f32[0]), *(float32x2_t *)v658.i8, *(float32x2_t *)v125.f32, 1), *(float32x2_t *)v652.i8, v115 + v125.f32[2]);
            v109 = (float32x4_t)v637;
            v108 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(v640, *(float32x2_t *)v125.f32), *(float32x2_t *)v637.i8, *(float32x2_t *)v125.f32, 1), *(float32x2_t *)&v106, v634));
            *(double *)&v107.i64[1] = v108;
            v105 = vaddq_f32(v647, v107);
            if (v121 >= (unint64_t)v103)
            {
              v126 = (char *)__p[0] + 24 * v111;
              v127 = v126 + 1;
              v128 = (char *)v126[1];
              v130 = (char **)(v126 + 2);
              v137 = v126[2];
              if ((unint64_t)v128 < v137)
              {
LABEL_191:
                *((_DWORD *)v128 + 2) = v105.i32[2];
                *(_QWORD *)v128 = v105.i64[0];
                v123 = v128 + 12;
                goto LABEL_192;
              }
              v138 = (char *)*v126;
              v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v128[-*v126] >> 2);
              v140 = v139 + 1;
              if (v139 + 1 > 0x1555555555555555)
                sub_207CA420C();
              v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v137 - (_QWORD)v138) >> 2);
              if (2 * v141 > v140)
                v140 = 2 * v141;
              if (v141 >= 0xAAAAAAAAAAAAAAALL)
                v135 = 0x1555555555555555;
              else
                v135 = v140;
              if (v135)
              {
                v627 = v105;
                if (v135 > 0x1555555555555555)
                  sub_207CA3AB8();
                v136 = (char *)operator new(12 * v135);
                v105 = v627;
              }
              else
              {
                v136 = 0;
              }
              v142 = &v136[12 * v139];
              *(_QWORD *)v142 = v105.i64[0];
              *((_DWORD *)v142 + 2) = v105.i32[2];
              v143 = v142;
              if (v128 != v138)
              {
                do
                {
                  v146 = *(_QWORD *)(v128 - 12);
                  v128 -= 12;
                  v147 = *((_DWORD *)v128 + 2);
                  *(_QWORD *)(v143 - 12) = v146;
                  v143 -= 12;
                  *((_DWORD *)v143 + 2) = v147;
                }
                while (v128 != v138);
                goto LABEL_221;
              }
            }
            else
            {
              v126 = (char *)v673[0] + 24 * v111;
              v127 = v126 + 1;
              v128 = (char *)v126[1];
              v130 = (char **)(v126 + 2);
              v129 = v126[2];
              if ((unint64_t)v128 < v129)
                goto LABEL_191;
              v131 = (char *)*v126;
              v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v128[-*v126] >> 2);
              v133 = v132 + 1;
              if (v132 + 1 > 0x1555555555555555)
                sub_207CA420C();
              v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - (_QWORD)v131) >> 2);
              if (2 * v134 > v133)
                v133 = 2 * v134;
              if (v134 >= 0xAAAAAAAAAAAAAAALL)
                v135 = 0x1555555555555555;
              else
                v135 = v133;
              if (v135)
              {
                v626 = v105;
                if (v135 > 0x1555555555555555)
                  sub_207CA3AB8();
                v136 = (char *)operator new(12 * v135);
                v105 = v626;
              }
              else
              {
                v136 = 0;
              }
              v142 = &v136[12 * v132];
              *(_QWORD *)v142 = v105.i64[0];
              *((_DWORD *)v142 + 2) = v105.i32[2];
              v143 = v142;
              if (v128 != v131)
              {
                do
                {
                  v144 = *(_QWORD *)(v128 - 12);
                  v128 -= 12;
                  v145 = *((_DWORD *)v128 + 2);
                  *(_QWORD *)(v143 - 12) = v144;
                  v143 -= 12;
                  *((_DWORD *)v143 + 2) = v145;
                }
                while (v128 != v131);
LABEL_221:
                v128 = (char *)*v126;
              }
            }
            v148 = &v136[12 * v135];
            *v126 = v143;
            v123 = v142 + 12;
            *v127 = v142 + 12;
            *v130 = v148;
            v103 = v623;
            if (v128)
              operator delete(v128);
LABEL_192:
            *v127 = v123;
            ++v121;
          }
          while ((char *)v121 != v631);
          if (++v111 == v617)
            goto LABEL_496;
        }
      }
      do
      {
        sub_207CB36E8(a3, (uint64_t)v684);
        if (*(_DWORD *)&v684[20])
          v311 = *(_DWORD *)&v684[12] == 0;
        else
          v311 = 1;
        if (v311 || HIDWORD(*(_QWORD *)&v684[12]) == 0)
          v313 = 0;
        else
          v313 = *(_DWORD *)&v684[20];
        if (v313 * *(_DWORD *)&v684[40] == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
LABEL_495:
          abort();
        }
        --v617;
      }
      while (v617);
LABEL_496:
      if (!v103)
        goto LABEL_502;
      if (a9 < 2
        || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v629 + 80) - *(_QWORD *)(v629 + 72)) >> 6) < 2
        || *(_BYTE *)(a15 + 1312))
      {
        sub_207D7A62C((uint64_t **)v673, (uint64_t)a6, (uint64_t)v684, *(double *)v105.i64, *(double *)&v106, *(double *)v107.i64, v108, v109, v110);
        v247 = *(float *)v684;
        a16[8].i32[0] = *(_DWORD *)v684;
        v314 = *(_OWORD *)&v684[20];
        *(_OWORD *)a16->f32 = *(_OWORD *)&v684[4];
        *(_OWORD *)a16[2].f32 = v314;
        v105.i32[1] = *(_DWORD *)&v684[40];
        v106 = *(_OWORD *)&v684[52];
        *(_OWORD *)a16[4].f32 = *(_OWORD *)&v684[36];
        *(_OWORD *)a16[6].f32 = v106;
        v105.i32[0] = 1058642330;
        if (v247 > 0.6)
          goto LABEL_506;
      }
      else
      {
        sub_207DA83E0((uint64_t)v684, v629, (uint64_t **)v673);
        if ((_BYTE)v685)
        {
          v574 = *(_QWORD *)v684;
          *(_QWORD *)(a15 + 1304) = *(_QWORD *)v684;
          *(_BYTE *)(a15 + 1312) = 1;
          sub_207DECE94(a15, (int *)(*(_QWORD *)(v629 + 72) + 192 * v574));
          v247 = *(float *)&v684[8];
          a16[8].i32[0] = *(_DWORD *)&v684[8];
          v575 = *(_OWORD *)&v684[28];
          *(_OWORD *)a16->f32 = *(_OWORD *)&v684[12];
          *(_OWORD *)a16[2].f32 = v575;
          v105.i32[1] = *(_DWORD *)&v684[48];
          v106 = *(_OWORD *)&v684[60];
          *(_OWORD *)a16[4].f32 = *(_OWORD *)&v684[44];
          *(_OWORD *)a16[6].f32 = v106;
          v105.i32[0] = 1058642330;
          if (v247 > 0.6)
            goto LABEL_506;
        }
        else
        {
          v247 = a16[8].f32[0];
          v105.i32[0] = 1058642330;
          if (v247 > 0.6)
            goto LABEL_506;
        }
      }
      if (v606)
      {
LABEL_502:
        sub_207D7A62C((uint64_t **)__p, (uint64_t)a7, (uint64_t)v684, *(double *)v105.i64, *(double *)&v106, *(double *)v107.i64, v108, v109, v110);
        v315 = *(float *)v684;
        v316 = *(_OWORD *)&v684[20];
        *(_OWORD *)a16->f32 = *(_OWORD *)&v684[4];
        *(_OWORD *)a16[2].f32 = v316;
        v317 = *(_OWORD *)&v684[52];
        *(_OWORD *)a16[4].f32 = *(_OWORD *)&v684[36];
        *(_OWORD *)a16[6].f32 = v317;
        if (v315 <= 0.95)
          v247 = v315;
        else
          v247 = 0.95;
        a16[8].f32[0] = v247;
        a16[9].i32[0] = 5;
      }
LABEL_506:
      v318 = *(_OWORD *)a16[2].f32;
      *(_OWORD *)v702 = *(_OWORD *)a16->f32;
      *(_OWORD *)&v702[2] = v318;
      v319 = *(_OWORD *)a16[6].f32;
      *(_OWORD *)&v702[4] = *(_OWORD *)a16[4].f32;
      *(_OWORD *)&v702[6] = v319;
      v320 = (char *)__p[0];
      if (__p[0])
      {
        v321 = __p[1];
        v322 = __p[0];
        if (__p[1] != __p[0])
        {
          v323 = (char *)__p[1];
          do
          {
            v325 = (void *)*((_QWORD *)v323 - 3);
            v323 -= 24;
            v324 = v325;
            if (v325)
            {
              *(v321 - 2) = v324;
              operator delete(v324);
            }
            v321 = v323;
          }
          while (v323 != v320);
          v322 = __p[0];
        }
        __p[1] = v320;
        operator delete(v322);
      }
      v326 = (char *)v673[0];
      if (v673[0])
      {
        v327 = v673[1];
        v252 = v673[0];
        if (v673[1] != v673[0])
        {
          v328 = (char *)v673[1];
          do
          {
            v330 = (void *)*((_QWORD *)v328 - 3);
            v328 -= 24;
            v329 = v330;
            if (v330)
            {
              *(v327 - 2) = v329;
              operator delete(v329);
            }
            v327 = v328;
          }
          while (v328 != v326);
          v252 = v673[0];
        }
        v673[1] = v326;
LABEL_522:
        operator delete(v252);
      }
      goto LABEL_523;
    case 0xCuLL:
      if (v23 >= 0)
        v149 = a4;
      else
        v149 = (uint64_t *)*a4;
      if (*v149 == 0x61746E656D676553 && *((_DWORD *)v149 + 2) == 1852795252)
      {
        kdebug_trace();
        memset(v702, 0, 48);
        if (a9)
        {
          if (a9 >> 60)
            sub_207CA420C();
          v243 = a10;
          v702[3] = operator new(16 * a9);
          v702[4] = v702[3];
          v618 = (char *)v702[3] + 16 * a9;
          v702[5] = v618;
          v244 = (char *)operator new(4 * a9);
          v245 = v702[3];
          v246 = v244;
          v702[0] = v244;
          v702[1] = v244;
          v616 = &v244[4 * a9];
          v702[2] = v616;
        }
        else
        {
          v243 = a10;
          v616 = 0;
          v618 = 0;
          v246 = 0;
          v245 = 0;
        }
        v335 = *a5;
        v336 = a5[1];
        v673[1] = 0;
        v673[0] = 0;
        v674.i64[0] = 0;
        if (v336 == v335)
        {
          v602 = 0;
        }
        else
        {
          if (0x8F9C18F9C18F9C19 * ((v336 - v335) >> 3) > 0x71C71C71C71C71CLL)
            sub_207CA420C();
          v337 = v245;
          v673[0] = operator new(0x31F3831F3831F384 * ((v336 - v335) >> 3));
          v673[1] = v673[0];
          v674.i64[0] = (uint64_t)v673[0] + 0x31F3831F3831F384 * ((v336 - v335) >> 3);
          __p[0] = v673;
          do
          {
            *(_OWORD *)v684 = *(_OWORD *)(v335 + 92);
            *(_OWORD *)&v684[16] = *(_OWORD *)(v335 + 108);
            *(_DWORD *)&v684[32] = *(_DWORD *)(v335 + 124);
            sub_207DC443C((char ***)__p, (__int128 *)v684);
            v335 += 328;
          }
          while (v335 != v336);
          v602 = (char *)v673[0];
          v245 = v337;
        }
        v604 = *(_QWORD *)(v629 + 432);
        if (v604 > 1)
          v338 = 1;
        else
          v338 = a9;
        if (!a9)
          goto LABEL_708;
        v635 = 0;
        v603 = v338 * v243;
        v624 = (void **)v245;
        v628 = v246;
        v632 = (void **)v245;
        while (1)
        {
          v339 = *(_QWORD *)(v629 + 544);
          v341 = *(_QWORD *)(v629 + 352);
          v340 = *(_QWORD *)(v629 + 360);
          sub_207CB36E8(a3, (uint64_t)v684);
          if (v604 <= 1)
            v346 = v635;
          else
            v346 = 0;
          if (v604 <= 1)
            v347 = 0;
          else
            v347 = v635;
          v348 = *(_DWORD *)&v684[40];
          v349 = *(_DWORD *)&v684[44];
          v350 = *(_QWORD *)v684;
          v351 = HIDWORD(*(_QWORD *)&v684[12]);
          if (*(_DWORD *)&v684[12])
            v352 = v351 == 0;
          else
            v352 = 1;
          if (v352)
            LODWORD(v351) = 0;
          if ((_DWORD)v351 * *(_DWORD *)&v684[36] == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            v702[5] = v618;
            v702[4] = v632;
            v702[3] = v624;
            abort();
          }
          v353 = v341 / v339;
          v354 = v340 / v339;
          if ((v341 / v339))
            v355 = (_DWORD)v354 == 0;
          else
            v355 = 1;
          v356 = (void *)(v354 | ((unint64_t)v353 << 32));
          if (v355)
            v356 = 0;
          v357 = 0x100000000;
          if ((unint64_t)v356 > 0x100000000)
            v357 = (uint64_t)v356;
          v673[0] = (void *)(v350 + 4 * (v348 * v347 + v349 * (v346 + v603)));
          v673[1] = v356;
          v674.i64[0] = ((_DWORD)v356 != 0) | (unint64_t)(v357 << 32);
          if (HIDWORD(v356) * (_DWORD)v357 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            v702[5] = v618;
            v702[4] = v632;
            v702[3] = v624;
            abort();
          }
          v358 = *a8 + (v635 << 6);
          v343.i64[0] = *(_QWORD *)v358;
          v343.i32[2] = *(_DWORD *)(v358 + 8);
          v344.i64[0] = *(_QWORD *)(v358 + 16);
          v344.i32[2] = *(_DWORD *)(v358 + 24);
          v342.i32[0] = *(_DWORD *)(v358 + 40);
          v359 = *(float32x2_t *)(v358 + 32);
          v345.i64[0] = *(_QWORD *)(v358 + 48);
          v345.i32[2] = *(_DWORD *)(v358 + 56);
          v361 = *(float32x4_t *)(*a5 + 264);
          v360 = *(float32x4_t *)(*a5 + 280);
          v363 = *(float32x4_t *)(*a5 + 296);
          v362 = *(float32x4_t *)(*a5 + 312);
          v365 = *(float32x4_t *)(a15 + 456);
          v364 = *(float32x4_t *)(a15 + 472);
          v367 = *(float32x4_t *)(a15 + 488);
          v366 = *(float32x4_t *)(a15 + 504);
          v368 = *(float32x2_t **)(a15 + 360);
          v369 = *(float32x2_t **)(a15 + 368);
          memset(v684, 0, 24);
          if (v369 == v368)
          {
            v420 = 0;
            v370 = 0;
            goto LABEL_609;
          }
          v605 = v359;
          v607 = v345;
          v609 = v344;
          v611 = v343;
          v612 = v342;
          v614 = v361;
          v638 = v360;
          v641 = v363;
          v645 = v362;
          v649 = v365;
          v655 = v364;
          v661 = v367;
          v668 = v366;
          if ((0xAAAAAAAAAAAAAAABLL * (((char *)v369 - (char *)v368) >> 2)) >> 61)
          {
            v702[5] = v618;
            v702[4] = v632;
            v702[3] = v624;
            sub_207CA420C();
          }
          v370 = (float *)operator new(0x5555555555555558 * (((char *)v369 - (char *)v368) >> 2));
          v371 = (int8x16_t)vzip1q_s32(v611, v609);
          v372 = (int8x16_t)vnegq_f32(v607);
          v371.i32[2] = v605.i32[0];
          v373 = vtrn2q_s32(v611, v609);
          v374 = (int8x16_t)v373;
          v374.i32[2] = v605.i32[1];
          v375 = vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v371.i8, *(float *)v372.i32), *(float32x2_t *)v373.i8, *(float32x2_t *)v607.f32, 1);
          v376 = (float32x4_t)vzip2q_s32(v611, v609);
          *(float32x2_t *)v377.f32 = vmls_laneq_f32(v375, *(float32x2_t *)v376.f32, v607, 2);
          v376.i32[2] = v612.i32[0];
          v377.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v605, *(float32x2_t *)v372.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v605, 1), *(float32x2_t *)v607.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v372, v372, 8uLL), v612).u32[0]);
          v372.i64[0] = vextq_s8(v374, v371, 4uLL).u64[0];
          v371.i32[3] = 0;
          v374.i32[3] = 0;
          v374.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v374, 0).i32[3];
          *(uint64_t *)((char *)v374.i64 + 4) = v372.i64[0];
          v376.i64[1] = vdupq_laneq_s32((int32x4_t)v376, 2).u32[0];
          v378 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v371, v614.f32[0]), (float32x4_t)v374, *(float32x2_t *)v614.f32, 1), v376, v614, 2), v377, v614, 3);
          v379 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v371, v638.f32[0]), (float32x4_t)v374, *(float32x2_t *)v638.f32, 1), v376, v638, 2), v377, v638, 3);
          v380 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v371, v641.f32[0]), (float32x4_t)v374, *(float32x2_t *)v641.f32, 1), v376, v641, 2), v377, v641, 3);
          v381 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v371, v645.f32[0]), (float32x4_t)v374, *(float32x2_t *)v645.f32, 1), v376, v645, 2), v377, v645, 3);
          v382 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v378, v649.f32[0]), v379, *(float32x2_t *)v649.f32, 1), v380, v649, 2), v381, v649, 3);
          v383 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v378, v655.f32[0]), v379, *(float32x2_t *)v655.f32, 1), v380, v655, 2), v381, v655, 3);
          v384 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v378, v661.f32[0]), v379, *(float32x2_t *)v661.f32, 1), v380, v661, 2), v381, v661, 3);
          v388 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v378, v668.f32[0]), v379, *(float32x2_t *)v668.f32, 1), v380, v668, 2), v381, v668, 3);
          *(_QWORD *)v684 = v370;
          *(_QWORD *)&v684[8] = v370;
          *(_QWORD *)&v684[16] = &v370[0x1555555555555556 * (((char *)v369 - (char *)v368) >> 2)];
          v385 = (float)v354;
          v386 = &v602[36 * v635];
          v387 = (float)v353;
          v662 = *(float32x2_t *)v383.i8;
          v669 = *(float32x2_t *)v382.i8;
          v646 = (float32x2_t)vextq_s8(v382, v382, 8uLL).u64[0];
          v650 = v388;
          v388.i64[0] = vextq_s8(v383, v383, 8uLL).u64[0];
          v656 = *(float32x2_t *)v384.i8;
          v639 = (float32x2_t)vextq_s8(v384, v384, 8uLL).u64[0];
          v642 = *(float32x2_t *)v388.f32;
          do
          {
            while (1)
            {
              while (1)
              {
                v388.i32[0] = v368[1].i32[0];
                *(float32x2_t *)v389.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v669, COERCE_FLOAT(*v368)), v662, *v368, 1), v656, v388.f32[0]);
                v390.i32[1] = v642.i32[1];
                *(float32x2_t *)&v389.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v646, *v368), v642, *v368, 1), *(float32x2_t *)v388.f32, v639);
                v391 = (int8x16_t)vaddq_f32(v389, v650);
                v389.i32[0] = *((_DWORD *)v386 + 2);
                v390.i32[0] = *((_DWORD *)v386 + 5);
                v380.i32[0] = *((_DWORD *)v386 + 8);
                *(float32x2_t *)v388.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v386, *(float *)v391.i32), *(float32x2_t *)(v386 + 12), *(float32x2_t *)v391.i8, 1), *(float32x2_t *)(v386 + 24), (float32x4_t)v391, 2);
                v389.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v389.f32, *(float32x2_t *)v391.i8), v390, *(float32x2_t *)v391.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v391, v391, 8uLL), *(float32x2_t *)v380.f32).f32[0];
                *(float *)v391.i32 = v388.f32[0] / v389.f32[0];
                v388.f32[0] = v388.f32[1] / v389.f32[0];
                v392 = (float)*(unint64_t *)(v629 + 544);
                v393 = *(float *)v391.i32 * v392;
                v394 = v393 <= v385 ? v393 : v385;
                v395 = v393 >= 0.0 ? v394 : 0.0;
                v396 = v388.f32[0] * v392;
                v397 = (float)(v388.f32[0] * v392) <= v387 ? v388.f32[0] * v392 : v387;
                v398 = v396 >= 0.0 ? v397 : 0.0;
                if ((unint64_t)v370 >= *(_QWORD *)&v684[16])
                  break;
                *v370 = v395;
                v370[1] = v398;
                v370 += 2;
                *(_QWORD *)&v684[8] = v370;
                v368 = (float32x2_t *)((char *)v368 + 12);
                if (v368 == v369)
                  goto LABEL_605;
              }
              v399 = *(float **)v684;
              v400 = (char *)v370 - *(_QWORD *)v684;
              v401 = ((uint64_t)v370 - *(_QWORD *)v684) >> 3;
              v402 = v401 + 1;
              if ((unint64_t)(v401 + 1) >> 61)
              {
                v702[5] = v618;
                v702[4] = v632;
                v702[3] = v624;
                sub_207CA420C();
              }
              v403 = *(_QWORD *)&v684[16] - *(_QWORD *)v684;
              if ((uint64_t)(*(_QWORD *)&v684[16] - *(_QWORD *)v684) >> 2 > v402)
                v402 = v403 >> 2;
              v404 = (unint64_t)v403 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v402;
              if (!v404)
                break;
              if (v404 >> 61)
              {
                v702[5] = v618;
                v702[4] = v632;
                v702[3] = v624;
                sub_207CA3AB8();
              }
              v405 = operator new(8 * v404);
              v406 = (float *)&v405[8 * v401];
              v407 = &v405[8 * v404];
              *v406 = v395;
              v406[1] = v398;
              v408 = (uint64_t)(v406 + 2);
              v409 = (char *)((char *)v370 - (char *)v399);
              if (v370 == v399)
                goto LABEL_592;
LABEL_585:
              v410 = (unint64_t)(v409 - 8);
              if (v410 < 0x168)
              {
                v411 = v370;
                goto LABEL_587;
              }
              v413 = ((char *)(v370 - 2) - (char *)v399) & 0xFFFFFFFFFFFFFFF8;
              if (&v400[(_QWORD)v405 - 8 - v413] > &v400[(_QWORD)v405 - 8])
              {
                v411 = v370;
                do
                {
LABEL_587:
                  v412 = *((_QWORD *)v411 - 1);
                  v411 -= 2;
                  *((_QWORD *)v406 - 1) = v412;
                  v406 -= 2;
                }
                while (v411 != v399);
                goto LABEL_588;
              }
              if ((float *)((char *)v370 - v413 - 8) > v370 - 2)
              {
                v411 = v370;
                goto LABEL_587;
              }
              if ((unint64_t)((char *)v370 - v405 - (_QWORD)v400) < 0x20)
              {
                v411 = v370;
                goto LABEL_587;
              }
              v414 = (v410 >> 3) + 1;
              v415 = 8 * (v414 & 0x3FFFFFFFFFFFFFFCLL);
              v411 = &v370[v415 / 0xFFFFFFFFFFFFFFFCLL];
              v406 = (float *)((char *)v406 - v415);
              v416 = (float32x4_t *)&v400[(_QWORD)v405 - 16];
              v417 = (float32x4_t *)(v370 - 4);
              v418 = v414 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v388 = v417[-1];
                v419 = *v417;
                v416[-1] = v388;
                *v416 = v419;
                v416 -= 2;
                v417 -= 2;
                v418 -= 4;
              }
              while (v418);
              if (v414 != (v414 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_587;
LABEL_588:
              v370 = *(float **)v684;
              *(_QWORD *)v684 = v406;
              *(_QWORD *)&v684[8] = v408;
              *(_QWORD *)&v684[16] = v407;
              if (v370)
                goto LABEL_593;
              v370 = (float *)v408;
              *(_QWORD *)&v684[8] = v408;
              v368 = (float32x2_t *)((char *)v368 + 12);
              if (v368 == v369)
                goto LABEL_605;
            }
            v405 = 0;
            v406 = (float *)(8 * v401);
            v407 = 0;
            *v406 = v395;
            v406[1] = v398;
            v408 = 8 * v401 + 8;
            v409 = (char *)((char *)v370 - (char *)v399);
            if (v370 != v399)
              goto LABEL_585;
LABEL_592:
            *(_QWORD *)v684 = v406;
            *(_QWORD *)&v684[8] = v408;
            *(_QWORD *)&v684[16] = v407;
LABEL_593:
            operator delete(v370);
            v370 = (float *)v408;
            *(_QWORD *)&v684[8] = v408;
            v368 = (float32x2_t *)((char *)v368 + 12);
          }
          while (v368 != v369);
LABEL_605:
          v420 = *(float32x2_t **)v684;
          if (!*(_QWORD *)v684)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              v702[5] = v618;
              v702[4] = v632;
              v702[3] = v624;
              abort();
            }
            v420 = 0;
          }
LABEL_609:
          sub_207CF3C50(((char *)v370 - (char *)v420) >> 3, v420, (uint64_t)v684);
          v422 = *(_BYTE **)v684;
          v423 = *(_BYTE **)&v684[8];
          LODWORD(v691) = 0;
          *(_QWORD *)&v694 = 0;
          __p[1] = 0;
          __p[0] = 0;
          v424 = *(float *)(v629 + 588);
          v425 = *(_QWORD *)(v629 + 544);
          memset(v684, 0, 24);
          v426 = v423 - v422;
          if (v423 != v422)
          {
            if (v426 < 0)
            {
              v702[5] = v618;
              v702[4] = v632;
              v702[3] = v624;
              sub_207CA420C();
            }
            v427 = (char *)operator new(v423 - v422);
            *(_QWORD *)v684 = v427;
            *(_QWORD *)&v684[8] = v427;
            *(_QWORD *)&v684[16] = &v427[8 * (v426 >> 3)];
            v428 = v426 & 0xFFFFFFFFFFFFFFF8;
            memcpy(v427, v422, v428);
            *(_QWORD *)&v684[8] = &v427[v428];
          }
          v684[24] = 1;
          sub_207D5EA3C((uint64_t *)v673, (uint64_t)v684, &v694, (float *)__p, (float *)&v691, *(unsigned __int8 *)(v629 + 592), v424, (float)v425, v421);
          if (v684[24] && *(_QWORD *)v684)
          {
            *(_QWORD *)&v684[8] = *(_QWORD *)v684;
            operator delete(*(void **)v684);
          }
          if (v632 < (void **)v618)
          {
            *v632 = __p[0];
            v632[1] = __p[1];
            v429 = v632 + 2;
            v430 = v624;
            goto LABEL_630;
          }
          v431 = (char *)v632 - (char *)v624;
          v432 = ((char *)v632 - (char *)v624) >> 4;
          v433 = v432 + 1;
          if ((unint64_t)(v432 + 1) >> 60)
          {
            v702[5] = v618;
            v702[4] = v632;
            v702[3] = v624;
            sub_207CA420C();
          }
          if ((v618 - (char *)v624) >> 3 > v433)
            v433 = (v618 - (char *)v624) >> 3;
          if ((unint64_t)(v618 - (char *)v624) >= 0x7FFFFFFFFFFFFFF0)
            v434 = 0xFFFFFFFFFFFFFFFLL;
          else
            v434 = v433;
          if (v434 >> 60)
            goto LABEL_852;
          v435 = (char *)operator new(16 * v434);
          v436 = &v435[16 * v432];
          *(_OWORD *)v436 = *(_OWORD *)__p;
          v429 = (void **)(v436 + 16);
          if (v632 != v624)
          {
            v437 = (char *)v632 - (char *)v624 - 16;
            if (v437 >= 0x3F0)
            {
              v451 = v632 - 2;
              v452 = (char *)(v632 - 2) - (char *)v624;
              v453 = v452 & 0xFFFFFFFFFFFFFFF0;
              if (&v435[v431 - 16 - (v452 & 0xFFFFFFFFFFFFFFF0)] <= &v435[v431 - 16]
                && &v435[v431 - 8 - v453] <= &v435[v431 - 8]
                && (void **)((char *)v451 - v453) <= v451)
              {
                v454 = v632 - 1;
                if ((void **)((char *)v632 - v453 - 8) > v632 - 1)
                {
                  v438 = v632;
                  v430 = (void **)&v435[16 * v432];
                  goto LABEL_627;
                }
                v455 = v452 & 0xFFFFFFFFFFFFFFF0;
                v456 = (unint64_t)&v435[v431 - v455 - 16];
                v457 = &v435[v431 - 8];
                v458 = (unint64_t)&v435[v431 - v455 - 8];
                v459 = (unint64_t)v451 - v455;
                v460 = (unint64_t)v454 - v455;
                v462 = v456 < (unint64_t)v454 && v459 < (unint64_t)v457;
                v464 = v456 < (unint64_t)v632 && v460 < (unint64_t)v457;
                v466 = v458 < (unint64_t)v454 && v459 < (unint64_t)v436;
                v468 = v458 < (unint64_t)v632 && v460 < (unint64_t)v436;
                v469 = v458 >= (unint64_t)v457 || v456 >= (unint64_t)v436;
                if (v469 && !v462 && !v464 && !v466 && !v468)
                {
                  v470 = (v437 >> 4) + 1;
                  v471 = 16 * (v470 & 0x1FFFFFFFFFFFFFFCLL);
                  v438 = &v632[v471 / 0xFFFFFFFFFFFFFFF8];
                  v430 = (void **)&v436[-v471];
                  v472 = (const double *)(v632 - 4);
                  v473 = (double *)(v436 - 32);
                  v474 = v470 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v705 = vld2q_f64(v472);
                    v475 = v472 - 4;
                    v706 = vld2q_f64(v475);
                    vst2q_f64(v473, v705);
                    v476 = v473 - 4;
                    vst2q_f64(v476, v706);
                    v473 -= 8;
                    v472 -= 8;
                    v474 -= 4;
                  }
                  while (v474);
                  if (v470 == (v470 & 0x1FFFFFFFFFFFFFFCLL))
                  {
LABEL_628:
                    v618 = &v435[16 * v434];
                    if (v624)
                      goto LABEL_629;
                    goto LABEL_630;
                  }
                  do
                  {
LABEL_627:
                    v439 = *(v438 - 2);
                    v438 -= 2;
                    *(v430 - 2) = v439;
                    v430 -= 2;
                    v430[1] = v438[1];
                  }
                  while (v438 != v624);
                  goto LABEL_628;
                }
              }
            }
            v438 = v632;
            v430 = (void **)&v435[16 * v432];
            goto LABEL_627;
          }
          v430 = (void **)&v435[16 * v432];
          v618 = &v435[16 * v434];
          if (v624)
LABEL_629:
            operator delete(v624);
LABEL_630:
          v632 = v429;
          v440 = v628;
          v624 = v430;
          if (v628 < v616)
          {
            *(_DWORD *)v628 = (_DWORD)v691;
            v628 += 4;
            v702[1] = v440 + 4;
            if (v422)
              goto LABEL_632;
            goto LABEL_633;
          }
          v441 = v628 - v246;
          v442 = (v628 - v246) >> 2;
          v443 = v442 + 1;
          if ((unint64_t)(v442 + 1) >> 62)
          {
            v702[5] = v618;
            v702[4] = v632;
            v702[3] = v430;
            sub_207D0CD58();
          }
          if ((v616 - v246) >> 1 > v443)
            v443 = (v616 - v246) >> 1;
          if ((unint64_t)(v616 - v246) >= 0x7FFFFFFFFFFFFFFCLL)
            v444 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v444 = v443;
          if (v444)
          {
            if (!(v444 >> 62))
            {
              v445 = operator new(4 * v444);
              goto LABEL_645;
            }
LABEL_852:
            v702[5] = v618;
            v702[4] = v632;
            v702[3] = v624;
            sub_207CA3AB8();
          }
          v445 = 0;
LABEL_645:
          v446 = &v445[4 * v442];
          *(_DWORD *)v446 = (_DWORD)v691;
          v447 = v446 + 4;
          if (v628 != v246)
          {
            v448 = v628 - v246 - 4;
            if (v448 < 0xBC)
            {
              v449 = v628;
              goto LABEL_648;
            }
            v477 = (v628 - 4 - v246) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v445[v441 - 4 - v477] > &v445[v441 - 4])
            {
              v449 = v628;
              goto LABEL_648;
            }
            if (&v628[-v477 - 4] > v628 - 4)
            {
              v449 = v628;
              goto LABEL_648;
            }
            if ((unint64_t)(v246 - v445) < 0x20)
            {
              v449 = v628;
              goto LABEL_648;
            }
            v478 = (v448 >> 2) + 1;
            v479 = 4 * (v478 & 0x7FFFFFFFFFFFFFF8);
            v449 = &v628[-v479];
            v446 -= v479;
            v480 = &v445[v441 - 16];
            v481 = v628 - 16;
            v482 = v478 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v483 = *(_OWORD *)v481;
              *(v480 - 1) = *((_OWORD *)v481 - 1);
              *v480 = v483;
              v480 -= 2;
              v481 -= 32;
              v482 -= 8;
            }
            while (v482);
            if (v478 != (v478 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_648:
                v450 = *((_DWORD *)v449 - 1);
                v449 -= 4;
                *((_DWORD *)v446 - 1) = v450;
                v446 -= 4;
              }
              while (v449 != v246);
            }
          }
          v702[0] = v446;
          v616 = &v445[4 * v444];
          v702[2] = v616;
          if (v246)
            operator delete(v246);
          v246 = v446;
          v628 = v447;
          v702[1] = v447;
          if (v422)
LABEL_632:
            operator delete(v422);
LABEL_633:
          if (v420)
            operator delete(v420);
          if (++v635 == a9)
          {
            v702[5] = v618;
            v702[4] = v632;
            v702[3] = v624;
LABEL_708:
            if (v602)
              operator delete(v602);
            kdebug_trace();
            v484 = (void *)*a14;
            if (*a14)
            {
              a14[1] = v484;
              operator delete(v484);
              *a14 = 0;
              a14[1] = 0;
              a14[2] = 0;
            }
            *(_OWORD *)a14 = *(_OWORD *)v702;
            a14[2] = v702[2];
            memset(v702, 0, 24);
            v485 = (void *)a14[3];
            if (v485)
            {
              a14[4] = v485;
              operator delete(v485);
              a14[3] = 0;
              a14[4] = 0;
              a14[5] = 0;
              v485 = v702[0];
            }
            *(_OWORD *)(a14 + 3) = *(_OWORD *)&v702[3];
            a14[5] = v702[5];
            memset(&v702[3], 0, 24);
            if (v485)
            {
              v702[1] = v485;
              operator delete(v485);
            }
            goto LABEL_841;
          }
        }
      }
      v151 = *v149;
      v152 = *((_DWORD *)v149 + 2);
      v154 = v151 != 0x7370614D74616548 || v152 != 1701734732;
      if (a9 != 2 || v154)
        goto LABEL_841;
      v155 = 0;
      v156 = 0;
      v157 = *(_QWORD *)(a2 + 432);
      v673[1] = 0;
      v673[0] = 0;
      v674.i64[0] = 0;
      v158 = *(unsigned int *)(a2 + 360);
      v159 = *(_QWORD *)(a2 + 352);
      *(_QWORD *)&v699 = 0;
      v659 = (_DWORD)a10 << (v157 < 2);
      if (v158)
        v160 = (_DWORD)v159 == 0;
      else
        v160 = 1;
      if (v160)
        v161 = 0;
      else
        v161 = v158 | (v159 << 32);
      if (v160)
        v162 = 0;
      else
        v162 = 3;
      __p[0] = 0;
      __p[1] = 0;
      if (v160)
        v163 = 0;
      else
        v163 = HIDWORD(v161) * v161;
      if (HIDWORD(v161))
        v164 = v161 << 32;
      else
        v164 = 0;
      v653 = v164 | ((_DWORD)v161 != 0);
      v165 = v162;
      v166 = v163;
      v666 = v163 * v162;
      do
      {
        v170 = v154;
        sub_207CB36E8(a3, (uint64_t)v684);
        v171 = *(_DWORD *)&v684[40];
        v172 = *(_DWORD *)&v684[44];
        v173 = *(_QWORD *)v684;
        v174 = HIDWORD(*(_QWORD *)&v684[12]);
        if (*(_DWORD *)&v684[12])
          v175 = v174 == 0;
        else
          v175 = 1;
        if (v175)
          LODWORD(v174) = 0;
        if ((_DWORD)v174 * *(_DWORD *)&v684[36] == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        if (v666 == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v176 = v173 + 4 * (3 * v156 * v171 + v172 * v659);
        if ((unint64_t)v155 < (unint64_t)v699)
        {
          *v155 = v176;
          v155[1] = v161;
          *((_DWORD *)v155 + 4) = v165;
          *(_QWORD *)((char *)v155 + 20) = v653;
          *((_DWORD *)v155 + 7) = v166;
          v155 += 4;
          goto LABEL_283;
        }
        v177 = __p[0];
        v178 = ((char *)v155 - (char *)__p[0]) >> 5;
        v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 59)
          sub_207CA420C();
        v180 = v699 - (unint64_t)__p[0];
        if ((uint64_t)(v699 - (unint64_t)__p[0]) >> 4 > v179)
          v179 = v180 >> 4;
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFE0)
          v181 = 0x7FFFFFFFFFFFFFFLL;
        else
          v181 = v179;
        if (v181)
        {
          if (v181 >> 59)
            goto LABEL_851;
          v182 = (char *)operator new(32 * v181);
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[32 * v178];
        *(_QWORD *)v183 = v176;
        *((_QWORD *)v183 + 1) = v161;
        *((_DWORD *)v183 + 4) = v165;
        *(_QWORD *)(v183 + 20) = v653;
        *((_DWORD *)v183 + 7) = v166;
        if (v155 == v177)
        {
          v177 = v155;
          v155 = v183 + 32;
          __p[0] = &v182[32 * v178];
          __p[1] = v183 + 32;
          *(_QWORD *)&v699 = &v182[32 * v181];
          if (v177)
            goto LABEL_282;
        }
        else
        {
          v184 = &v182[32 * v178];
          do
          {
            v185 = *((_OWORD *)v155 - 1);
            *((_OWORD *)v184 - 2) = *((_OWORD *)v155 - 2);
            *((_OWORD *)v184 - 1) = v185;
            v184 -= 32;
            v155 -= 4;
          }
          while (v155 != v177);
          v155 = v183 + 32;
          __p[0] = v184;
          __p[1] = v183 + 32;
          *(_QWORD *)&v699 = &v182[32 * v181];
          if (v177)
LABEL_282:
            operator delete(v177);
        }
LABEL_283:
        __p[1] = v155;
        v186 = *a5 + 328 * v156 + 92;
        v187 = v673[1];
        if (v673[1] < (void *)v674.i64[0])
        {
          v167 = *(_OWORD *)v186;
          v168 = *(_OWORD *)(*a5 + 328 * v156 + 108);
          *((_DWORD *)v673[1] + 8) = *(_DWORD *)(*a5 + 328 * v156 + 124);
          *v187 = v167;
          v187[1] = v168;
          v169 = (char *)v187 + 36;
        }
        else
        {
          v188 = v673[0];
          v189 = 0x8E38E38E38E38E39 * (((char *)v673[1] - (char *)v673[0]) >> 2);
          v190 = v189 + 1;
          if (v189 + 1 > 0x71C71C71C71C71CLL)
            sub_207CA420C();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v674.i64[0] - (unint64_t)v673[0]) >> 2) > v190)
            v190 = 0x1C71C71C71C71C72 * ((uint64_t)(v674.i64[0] - (unint64_t)v673[0]) >> 2);
          if (0x8E38E38E38E38E39 * ((uint64_t)(v674.i64[0] - (unint64_t)v673[0]) >> 2) >= 0x38E38E38E38E38ELL)
            v191 = 0x71C71C71C71C71CLL;
          else
            v191 = v190;
          if (v191)
          {
            if (v191 > 0x71C71C71C71C71CLL)
LABEL_851:
              sub_207CA3AB8();
            v192 = (char *)operator new(36 * v191);
          }
          else
          {
            v192 = 0;
          }
          v193 = &v192[4 * (((char *)v673[1] - (char *)v673[0]) >> 2)];
          v194 = *(_OWORD *)v186;
          v195 = *(_OWORD *)(v186 + 16);
          *((_DWORD *)v193 + 8) = *(_DWORD *)(v186 + 32);
          *(_OWORD *)v193 = v194;
          *((_OWORD *)v193 + 1) = v195;
          v196 = &v192[36 * v189];
          if (v187 != v188)
          {
            do
            {
              v197 = *(_OWORD *)((char *)v187 - 36);
              v198 = *(_OWORD *)((char *)v187 - 20);
              *((_DWORD *)v196 - 1) = *((_DWORD *)v187 - 1);
              *(_OWORD *)(v196 - 20) = v198;
              *(_OWORD *)(v196 - 36) = v197;
              v196 -= 36;
              v187 = (_OWORD *)((char *)v187 - 36);
            }
            while (v187 != v188);
            v187 = v188;
          }
          v169 = v193 + 36;
          v673[0] = v196;
          v673[1] = v193 + 36;
          v674.i64[0] = (uint64_t)&v192[36 * v191];
          if (v187)
            operator delete(v187);
        }
        v673[1] = v169;
        LOBYTE(v154) = 1;
        v156 = 1;
      }
      while (!v170);
      sub_207D72D64();
      v247 = *(float *)v684;
      a16[8].i32[0] = *(_DWORD *)v684;
      v248 = *(_OWORD *)&v684[20];
      *(_OWORD *)a16->f32 = *(_OWORD *)&v684[4];
      *(_OWORD *)a16[2].f32 = v248;
      v249 = *(_OWORD *)&v684[52];
      *(_OWORD *)a16[4].f32 = *(_OWORD *)&v684[36];
      *(_OWORD *)a16[6].f32 = v249;
      v250 = *(_OWORD *)a16[2].f32;
      *(_OWORD *)v702 = *(_OWORD *)a16->f32;
      *(_OWORD *)&v702[2] = v250;
      v251 = *(_OWORD *)a16[6].f32;
      *(_OWORD *)&v702[4] = *(_OWORD *)a16[4].f32;
      *(_OWORD *)&v702[6] = v251;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v252 = v673[0];
      if (v673[0])
      {
        v673[1] = v673[0];
        goto LABEL_522;
      }
LABEL_523:
      v331 = a16;
      a16[8].f32[0] = v247;
      v332 = *(_OWORD *)&v702[2];
      *(_OWORD *)a16->f32 = *(_OWORD *)v702;
      *(_OWORD *)a16[2].f32 = v332;
      v333 = *(_OWORD *)&v702[4];
      v334 = *(_OWORD *)&v702[6];
LABEL_840:
      *(_OWORD *)v331[4].f32 = v333;
      *(_OWORD *)v331[6].f32 = v334;
LABEL_841:
      *(_DWORD *)a1 = a16[8].i32[0];
      v599 = *(_OWORD *)a16[2].f32;
      *(_OWORD *)(a1 + 4) = *(_OWORD *)a16->f32;
      *(_OWORD *)(a1 + 20) = v599;
      v600 = *(_OWORD *)a16[6].f32;
      *(_OWORD *)(a1 + 36) = *(_OWORD *)a16[4].f32;
      *(_OWORD *)(a1 + 52) = v600;
      return kdebug_trace();
    case 0xEuLL:
      if (v23 >= 0)
        v199 = a4;
      else
        v199 = (uint64_t *)*a4;
      v200 = *v199;
      v201 = *(uint64_t *)((char *)v199 + 6);
      if (v200 == 0x6966697373616C43 && v201 == 0x6E6F697461636966)
      {
        sub_207CB36E8(a3, (uint64_t)v684);
        v203 = *(_DWORD *)&v684[44];
        v204 = *(_QWORD *)v684;
        if (*(_DWORD *)&v684[20])
          v205 = *(_DWORD *)&v684[12] == 0;
        else
          v205 = 1;
        if (v205 || HIDWORD(*(_QWORD *)&v684[12]) == 0)
          v207 = 0;
        else
          v207 = *(_DWORD *)&v684[20];
        if (v207 * *(_DWORD *)&v684[40] == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        *a12 = 1.0 - *(float *)(v204 + 4 * (v203 * v25));
      }
      goto LABEL_841;
    case 0xFuLL:
      if (v23 >= 0)
        v28 = a4;
      else
        v28 = (const void *)*a4;
      if (memcmp(v28, "ConfidenceScore", v24))
        goto LABEL_841;
      sub_207CB36E8(a3, (uint64_t)v684);
      v29 = *(_DWORD *)&v684[44];
      v30 = *(_QWORD *)v684;
      if (*(_DWORD *)&v684[20])
        v31 = *(_DWORD *)&v684[12] == 0;
      else
        v31 = 1;
      if (v31 || HIDWORD(*(_QWORD *)&v684[12]) == 0)
        v33 = 0;
      else
        v33 = *(_DWORD *)&v684[20];
      if (v33 * *(_DWORD *)&v684[40] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v34 = a13;
      v35 = *(float *)(v30 + 4 * (v29 * v25));
      *a13 = v35;
      if (*(_BYTE *)(v629 + 667) || *(_BYTE *)(v629 + 669) || *(_BYTE *)(v629 + 668))
        goto LABEL_841;
      v36 = fminf(v35 * 2.8, 1.0);
LABEL_56:
      *v34 = v36;
      goto LABEL_841;
    case 0x12uLL:
      if (v23 >= 0)
        v46 = a4;
      else
        v46 = (uint64_t *)*a4;
      v47 = *v46;
      v48 = v46[1];
      v49 = *((unsigned __int16 *)v46 + 8);
      if (v47 != 0x7370614D74616548 || v48 != 0x73736572706D6F43 || v49 != 25701)
        goto LABEL_841;
      v52 = *(_QWORD *)(a2 + 432);
      v53 = *(void **)(a2 + 384);
      v54 = *(unsigned int *)(a2 + 360);
      v55 = *(unsigned int *)(a2 + 352);
      if (v53)
        v56 = 3;
      else
        v56 = 0;
      v664 = v56;
      v651 = *(void **)(a2 + 392);
      if (v651)
        v57 = 3;
      else
        v57 = 0;
      sub_207CB36E8(a3, (uint64_t)v684);
      v657 = a10 * a9;
      if (v52 <= 1)
        v58 = a10 * a9;
      else
        v58 = a10;
      v59 = *(_DWORD *)&v684[44];
      v60 = *(_QWORD *)v684;
      v61 = HIDWORD(*(_QWORD *)&v684[12]);
      if (*(_DWORD *)&v684[12])
        v62 = v61 == 0;
      else
        v62 = 1;
      if (v62)
        LODWORD(v61) = 0;
      if ((_DWORD)v61 * *(_DWORD *)&v684[36] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_867;
      }
      v63 = v57 + v664;
      v64 = v54 | (v55 << 32);
      v65 = !v54 || v55 == 0;
      v66 = v65 || v63 == 0;
      v67 = v66 ? 0 : v54 | (v55 << 32);
      v68 = HIDWORD(v67);
      if (v66)
      {
        v63 = 0;
        v69 = 0;
      }
      else
      {
        v69 = HIDWORD(v67) * v67;
      }
      v70 = (_DWORD)v67 != 0;
      v71 = v67 << 32;
      v72 = (_DWORD)v68 ? v71 : 0;
      if (v69 * v63 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_867;
      }
      v73 = (char *)(v60 + 4 * (v59 * v58));
      v74 = HIDWORD(v64);
      if (!v53)
        goto LABEL_117;
      if (v54)
        v75 = v74 == 0;
      else
        v75 = 1;
      if (v75)
        v76 = 0;
      else
        v76 = (void *)v64;
      if (v75)
        v77 = 0;
      else
        v77 = 3;
      v702[0] = v73;
      v702[1] = v76;
      *(void **)((char *)&v702[2] + 4) = (void *)(v72 | v70);
      LODWORD(v702[2]) = v77;
      HIDWORD(v702[3]) = v69;
      if (v69 * v77 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_867;
      }
      v78 = *a6;
      v673[0] = v53;
      v673[1] = v78;
      if (!v78
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_867;
      }
      sub_207D76CE8((uint64_t *)v702, (unint64_t *)v673, *a5 + 328 * v657 + 92, (uint64_t)v684, *(float *)(v629 + 584), *(float *)(v629 + 616), *(float *)(v629 + 620));
      v79 = *(float *)v684;
      a16[8].i32[0] = *(_DWORD *)v684;
      v80 = *(_OWORD *)&v684[20];
      *(_OWORD *)a16->f32 = *(_OWORD *)&v684[4];
      *(_OWORD *)a16[2].f32 = v80;
      v81 = *(_OWORD *)&v684[52];
      *(_OWORD *)a16[4].f32 = *(_OWORD *)&v684[36];
      *(_OWORD *)a16[6].f32 = v81;
      if (v79 > 0.68 || !v651)
        goto LABEL_387;
LABEL_117:
      if (v54)
        v82 = v74 == 0;
      else
        v82 = 1;
      v83 = v82 || v57 == 0;
      if (v83)
        v84 = 0;
      else
        v84 = (void *)v64;
      if (v83)
        v85 = 0;
      else
        v85 = v57;
      v702[0] = &v73[4 * v69 * v664];
      v702[1] = v84;
      *(void **)((char *)&v702[2] + 4) = (void *)(v72 | v70);
      LODWORD(v702[2]) = v85;
      HIDWORD(v702[3]) = v69;
      if (v69 * v85 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| (v86 = *a7, v673[0] = v651, v673[1] = v86, v651)&& !v86&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_867:
        abort();
      }
      sub_207D76CE8((uint64_t *)v702, (unint64_t *)v673, *a5 + 328 * v657 + 92, (uint64_t)v684, 0.7, 0.0, 0.0);
      goto LABEL_384;
    case 0x18uLL:
      if (v23 >= 0)
        v87 = a4;
      else
        v87 = (uint64_t *)*a4;
      v88 = *v87;
      v89 = v87[1];
      v90 = v87[2];
      if (v88 == 0x756F72676B636142 && v89 == 0x697373616C43646ELL && v90 == 0x6E6F697461636966)
      {
        sub_207CB36E8(a3, (uint64_t)v684);
        v93 = *(_DWORD *)&v684[44];
        v94 = *(_QWORD *)v684;
        if (*(_DWORD *)&v684[20])
          v95 = *(_DWORD *)&v684[12] == 0;
        else
          v95 = 1;
        if (v95 || HIDWORD(*(_QWORD *)&v684[12]) == 0)
          v97 = 0;
        else
          v97 = *(_DWORD *)&v684[20];
        if (v97 * *(_DWORD *)&v684[40] == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        *a12 = *(float *)(v94 + 4 * (v93 * v25));
      }
      goto LABEL_841;
    default:
      goto LABEL_841;
  }
}

void sub_207DABDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  void *v66;
  void *v67;

  if (v63)
  {
    operator delete(v63);
    v66 = (void *)STACK[0x250];
    if (!STACK[0x250])
    {
LABEL_6:
      v64 = (void *)STACK[0x268];
      if (!STACK[0x268])
      {
LABEL_7:
        sub_207D80E10((uint64_t)&STACK[0x280]);
        v67 = (void *)STACK[0x328];
        if (!STACK[0x328])
        {
LABEL_13:
          sub_207CD822C((uint64_t)&a63);
          _Unwind_Resume(a1);
        }
LABEL_12:
        STACK[0x330] = (unint64_t)v67;
        operator delete(v67);
        goto LABEL_13;
      }
LABEL_11:
      STACK[0x270] = (unint64_t)v64;
      operator delete(v64);
      sub_207D80E10((uint64_t)&STACK[0x280]);
      v67 = (void *)STACK[0x328];
      if (!STACK[0x328])
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else
  {
    v66 = (void *)STACK[0x250];
    if (!STACK[0x250])
      goto LABEL_6;
  }
  STACK[0x258] = (unint64_t)v66;
  operator delete(v66);
  v64 = (void *)STACK[0x268];
  if (!STACK[0x268])
    goto LABEL_7;
  goto LABEL_11;
}

BOOL sub_207DAC168(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

uint64_t sub_207DAC1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void **a6, void **a7, _QWORD *a8, unint64_t a9, uint64_t a10, float *a11, _DWORD *a12, float *a13, _QWORD *a14, uint64_t a15, float32x2_t *a16, _QWORD *a17, char a18, float32x4_t *a19)
{
  unint64_t v21;
  int v22;
  int v23;
  size_t v24;
  int v25;
  _QWORD *v26;
  _BOOL4 v27;
  const void *v28;
  int v29;
  uint64_t v30;
  int v33;
  float *v34;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v44;
  uint64_t v45;
  BOOL v46;
  int v48;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unint64_t v68;
  BOOL v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  BOOL v79;
  void *v80;
  int v81;
  void *v82;
  float v83;
  __int128 v84;
  __int128 v85;
  BOOL v86;
  BOOL v87;
  void *v88;
  int v89;
  void *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v97;
  uint64_t v98;
  BOOL v99;
  int v101;
  uint64_t *v103;
  uint64_t v105;
  uint64_t v106;
  unint64_t v108;
  unint64_t v109;
  float32x4_t v110;
  __int128 v111;
  float32x4_t v112;
  double v113;
  float32x4_t v114;
  double v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  int v121;
  int v122;
  uint64_t v123;
  BOOL v124;
  int v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  float32x4_t v131;
  float32x4_t v134;
  _QWORD *v135;
  char *v136;
  char **v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  unint64_t v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  int v157;
  void *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t v165;
  int v166;
  _BOOL4 v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  int v179;
  int v180;
  __int128 v181;
  __int128 v182;
  void *v183;
  BOOL v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  __int128 v199;
  uint64_t v200;
  _OWORD *v201;
  _OWORD *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  __int128 v208;
  __int128 v209;
  char *v210;
  __int128 v211;
  __int128 v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  int v217;
  uint64_t v218;
  BOOL v219;
  int v221;
  void *v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  BOOL v233;
  int v234;
  unint64_t v235;
  BOOL v236;
  BOOL v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  _BOOL8 v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  void *v245;
  unint64_t v246;
  BOOL v247;
  BOOL v248;
  void *v249;
  int v250;
  void *v251;
  __int128 v252;
  __int128 v253;
  BOOL v254;
  BOOL v255;
  void *v256;
  int v257;
  void *v258;
  __int128 v259;
  __int128 v260;
  int v261;
  char *v262;
  void *v263;
  char *v264;
  float v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  void *v270;
  uint64_t v271;
  int v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  BOOL v276;
  BOOL v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  char *v284;
  int v285;
  int v286;
  int v287;
  int v288;
  char *v289;
  unint64_t v290;
  BOOL v291;
  char *v292;
  _QWORD *v293;
  char *v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  __int128 v303;
  uint64_t v304;
  _OWORD *v305;
  _OWORD *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  char *v311;
  __int128 v312;
  __int128 v313;
  char *v314;
  __int128 v315;
  __int128 v316;
  int32x4_t v317;
  int32x4_t v318;
  float32x4_t v319;
  float32x2_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _BYTE *v324;
  _DWORD **v325;
  _BOOL4 v326;
  uint64_t v327;
  unint64_t v328;
  BOOL v329;
  int v331;
  __int128 v332;
  float v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  char *v338;
  _QWORD *v339;
  void *v340;
  char *v341;
  void *v342;
  void *v343;
  char *v344;
  _QWORD *v345;
  char *v346;
  void *v347;
  void *v348;
  float32x2_t *v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  int v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  float32x2_t v360;
  int32x4_t v361;
  int32x4_t v362;
  float32x4_t v363;
  int v364;
  int v365;
  int v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  BOOL v370;
  unint64_t v371;
  unint64_t v372;
  BOOL v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  float32x2_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x2_t *v386;
  float32x2_t *v387;
  float *v388;
  int8x16_t v389;
  int8x16_t v390;
  int32x4_t v391;
  int8x16_t v392;
  float32x2_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  float v403;
  char *v404;
  float v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x2_t v408;
  int8x16_t v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float *v417;
  char *v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  _BYTE *v423;
  float *v424;
  char *v425;
  uint64_t v426;
  char *v427;
  unint64_t v428;
  float *v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  float32x4_t *v434;
  float32x4_t *v435;
  uint64_t v436;
  float32x4_t v437;
  float32x2_t *v438;
  int8x16_t v439;
  _BYTE *v440;
  _BYTE *v441;
  float v442;
  unint64_t v443;
  uint64_t v444;
  char *v445;
  size_t v446;
  void **v447;
  void **v448;
  int64_t v449;
  uint64_t v450;
  unint64_t v451;
  unint64_t v452;
  char *v453;
  char *v454;
  unint64_t v455;
  void **v456;
  void *v457;
  char *v458;
  int64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  _BYTE *v463;
  char *v464;
  char *v465;
  unint64_t v466;
  char *v467;
  int v468;
  void **v469;
  int64_t v470;
  unint64_t v471;
  void **v472;
  unint64_t v473;
  unint64_t v474;
  char *v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  BOOL v480;
  BOOL v482;
  BOOL v484;
  BOOL v486;
  BOOL v487;
  uint64_t v488;
  uint64_t v489;
  const double *v490;
  double *v491;
  uint64_t v492;
  const double *v493;
  double *v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  _OWORD *v498;
  char *v499;
  uint64_t v500;
  __int128 v501;
  void *v502;
  void *v503;
  _BOOL8 v504;
  float v505;
  void *v506;
  __int128 v507;
  __int128 v508;
  float v509;
  float32x4_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  int8x16_t v517;
  void *v518;
  __int128 v519;
  __int128 v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  char *v525;
  int32x4_t v526;
  int32x4_t v527;
  float32x4_t v528;
  float32x2_t v529;
  uint64_t v530;
  unint64_t *v531;
  char *v532;
  _QWORD *v533;
  char *v534;
  void *v535;
  uint64_t v536;
  float32x2_t *v537;
  float32x4_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int32x4_t v541;
  int8x16_t v542;
  float32x4_t v543;
  unsigned __int32 v544;
  int8x16_t v545;
  float32x4_t v546;
  uint64_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *p_shared_owners;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  unint64_t v559;
  char *v560;
  char *v561;
  unint64_t v562;
  char *v563;
  char *v564;
  uint64_t v565;
  char *v566;
  uint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  char *v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  BOOL v576;
  BOOL v577;
  BOOL v578;
  BOOL v579;
  BOOL v580;
  BOOL v581;
  BOOL v582;
  BOOL v583;
  BOOL v584;
  uint64_t v585;
  uint64_t v586;
  const double *v587;
  double *v588;
  uint64_t v589;
  const double *v590;
  double *v591;
  uint64_t v592;
  __int128 v593;
  int v594;
  void *v595;
  __int32 v596;
  float v597;
  __int128 v598;
  __int128 v599;
  float v600;
  void *v601;
  unint64_t v602;
  float v603;
  uint64_t *v604;
  uint64_t v605;
  int64x2_t *v606;
  int64x2_t v607;
  uint64_t v608;
  float32x2_t v609;
  float32x2_t v610;
  uint64_t v611;
  float v612;
  __int32 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  char *v620;
  int v621;
  unint64_t v622;
  float32x2_t v623;
  uint64_t v624;
  float32x4_t v625;
  unint64_t v626;
  int32x4_t v627;
  unint64_t v628;
  int32x4_t v629;
  unint64_t v630;
  float32x2_t v631;
  float32x4_t v632;
  char *v634;
  char *v636;
  void *v641;
  void **v642;
  float32x4_t v643;
  unint64_t v644;
  char *v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  void **v649;
  uint64_t v650;
  float32x4_t v651;
  float32x2_t v652;
  uint64_t v653;
  float32x4_t v654;
  int8x16_t v655;
  float32x4_t v656;
  float32x2_t v657;
  float32x2_t v658;
  float32x4_t v659;
  float32x2_t v660;
  int v661;
  uint64_t v662;
  float32x4_t v663;
  float32x2_t v664;
  float32x4_t v665;
  uint64_t v666;
  float32x4_t v667;
  float32x4_t v668;
  void *v669;
  int8x16_t v670;
  uint64_t v671;
  int v672;
  float32x4_t v673;
  float32x2_t v674;
  unint64_t v675;
  int8x16_t v676;
  int v677;
  unint64_t v678;
  float32x4_t v679;
  float32x2_t v680;
  _BYTE *v681;
  int v682;
  int8x16_t v683;
  int v684;
  void *v685;
  float32x4_t v686;
  float32x2_t v687;
  uint64_t v688;
  std::__shared_weak_count *v689;
  unint64_t v690[2];
  void *v691[2];
  float32x4_t v692;
  float32x4_t v693;
  float32x4_t v694;
  char v695;
  void *__src;
  int v697[2];
  char *v698;
  void *v699;
  char *v700;
  char *v701;
  _BYTE v702[80];
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  uint64_t v708;
  void *v709;
  char *v710;
  char *v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  void *__p[2];
  __int128 v717;
  __int128 v718;
  __int128 v719;
  void *v720[10];
  char v721;
  uint64_t v722;
  float64x2x2_t v723;
  float64x2x2_t v724;

  v722 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v21 = *(_QWORD *)(a2 + 432);
  v650 = a2;
  if (*(_OWORD *)(a2 + 384) == 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 1306, (uint64_t)"num_6dof_kpts > 0 or num_5dof_kpts > 0", 38, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (v21 > 1)
    v22 = 1;
  else
    v22 = a9;
  v23 = *((char *)a4 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = a4[1];
  v25 = v22 * a10;
  switch(v24)
  {
    case 8uLL:
      if (v23 >= 0)
        v26 = a4;
      else
        v26 = (_QWORD *)*a4;
      v27 = *v26 != 0x7370614D74616548;
      if (a9 >= 2 && !v27)
      {
        v661 = a19[4].u8[0];
        if (a19[4].i8[0])
        {
          v651 = a19[2];
          v654 = a19[3];
          v643 = *a19;
          v646 = a19[1];
        }
        else
        {
          v643 = 0u;
          v646 = 0u;
          v651 = 0u;
          v654 = 0u;
        }
        v271 = 0;
        v678 = *(_QWORD *)(a2 + 432);
        if (v678 > 1)
          v272 = 1;
        else
          v272 = a9;
        v672 = v272 * a10;
        v273 = *(void **)(a2 + 384);
        v274 = *(unsigned int *)(a2 + 360);
        v275 = *(_QWORD *)(a2 + 352);
        v710 = 0;
        v709 = 0;
        v711 = 0;
        v708 = 0;
        v706 = 0uLL;
        v707 = 0uLL;
        if (v274)
          v276 = (_DWORD)v275 == 0;
        else
          v276 = 1;
        v277 = v276 || (_DWORD)v273 == 0;
        if (v277)
          v278 = 0;
        else
          v278 = v274 | (v275 << 32);
        v685 = v273;
        if (v277)
          v279 = 0;
        else
          v279 = (int)v273;
        if (v277)
          v280 = 0;
        else
          v280 = HIDWORD(v278) * v278;
        v704 = 0uLL;
        v705 = 0uLL;
        v703 = 0uLL;
        memset(&v702[32], 0, 48);
        if (HIDWORD(v278))
          v281 = v278 << 32;
        else
          v281 = 0;
        v666 = v281 | ((_DWORD)v278 != 0);
        memset(v702, 0, 32);
        v701 = 0;
        v699 = 0;
        v700 = 0;
        do
        {
          sub_207DC9E60(a3, (uint64_t)v720);
          if (v678 <= 1)
            v285 = v271;
          else
            v285 = 0;
          if (v678 <= 1)
            v286 = 0;
          else
            v286 = v271 * (_DWORD)v685;
          v287 = (int)v720[5];
          v288 = HIDWORD(v720[5]);
          v289 = (char *)v720[0];
          v290 = HIDWORD(*(unint64_t *)((char *)&v720[1] + 4));
          if (HIDWORD(v720[1]))
            v291 = v290 == 0;
          else
            v291 = 1;
          if (v291)
            LODWORD(v290) = 0;
          if ((_DWORD)v290 * HIDWORD(v720[4]) == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          if (v280 * v279 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          v292 = &v289[2 * (v287 * v286 + v288 * (v285 + v672))];
          v293 = v700;
          if (v700 >= v701)
          {
            v295 = v699;
            v296 = (v700 - (_BYTE *)v699) >> 5;
            v297 = v296 + 1;
            if ((unint64_t)(v296 + 1) >> 59)
              sub_207CA420C();
            v298 = v701 - (_BYTE *)v699;
            if ((v701 - (_BYTE *)v699) >> 4 > v297)
              v297 = v298 >> 4;
            if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFE0)
              v299 = 0x7FFFFFFFFFFFFFFLL;
            else
              v299 = v297;
            if (v299)
            {
              if (v299 >> 59)
                goto LABEL_855;
              v300 = (char *)operator new(32 * v299);
            }
            else
            {
              v300 = 0;
            }
            v301 = &v300[32 * v296];
            *(_QWORD *)v301 = v292;
            *((_QWORD *)v301 + 1) = v278;
            *((_DWORD *)v301 + 4) = v279;
            *(_QWORD *)(v301 + 20) = v666;
            *((_DWORD *)v301 + 7) = v280;
            v302 = v301;
            if (v293 != v295)
            {
              do
              {
                v303 = *((_OWORD *)v293 - 1);
                *((_OWORD *)v302 - 2) = *((_OWORD *)v293 - 2);
                *((_OWORD *)v302 - 1) = v303;
                v302 -= 32;
                v293 -= 4;
              }
              while (v293 != v295);
              v293 = v295;
            }
            v294 = v301 + 32;
            v699 = v302;
            v700 = v301 + 32;
            v701 = &v300[32 * v299];
            if (v293)
              operator delete(v293);
          }
          else
          {
            *(_QWORD *)v700 = v292;
            v293[1] = v278;
            *((_DWORD *)v293 + 4) = v279;
            *(_QWORD *)((char *)v293 + 20) = v666;
            v294 = (char *)(v293 + 4);
            *((_DWORD *)v293 + 7) = v280;
          }
          v700 = v294;
          v304 = *a5 + 328 * v271 + 92;
          v305 = v710;
          if (v710 < v711)
          {
            v282 = *(_OWORD *)v304;
            v283 = *(_OWORD *)(*a5 + 328 * v271 + 108);
            *((_DWORD *)v710 + 8) = *(_DWORD *)(*a5 + 328 * v271 + 124);
            *v305 = v282;
            v305[1] = v283;
            v284 = (char *)v305 + 36;
          }
          else
          {
            v306 = v709;
            v307 = 0x8E38E38E38E38E39 * ((v710 - (_BYTE *)v709) >> 2);
            v308 = v307 + 1;
            if (v307 + 1 > 0x71C71C71C71C71CLL)
              sub_207CA420C();
            if (0x1C71C71C71C71C72 * ((v711 - (_BYTE *)v709) >> 2) > v308)
              v308 = 0x1C71C71C71C71C72 * ((v711 - (_BYTE *)v709) >> 2);
            if (0x8E38E38E38E38E39 * ((v711 - (_BYTE *)v709) >> 2) >= 0x38E38E38E38E38ELL)
              v309 = 0x71C71C71C71C71CLL;
            else
              v309 = v308;
            if (v309)
            {
              if (v309 > 0x71C71C71C71C71CLL)
LABEL_855:
                sub_207CA3AB8();
              v310 = (char *)operator new(36 * v309);
            }
            else
            {
              v310 = 0;
            }
            v311 = &v310[4 * ((v710 - (_BYTE *)v709) >> 2)];
            v312 = *(_OWORD *)v304;
            v313 = *(_OWORD *)(v304 + 16);
            *((_DWORD *)v311 + 8) = *(_DWORD *)(v304 + 32);
            *(_OWORD *)v311 = v312;
            *((_OWORD *)v311 + 1) = v313;
            v314 = &v310[36 * v307];
            if (v305 != v306)
            {
              do
              {
                v315 = *(_OWORD *)((char *)v305 - 36);
                v316 = *(_OWORD *)((char *)v305 - 20);
                *((_DWORD *)v314 - 1) = *((_DWORD *)v305 - 1);
                *(_OWORD *)(v314 - 20) = v316;
                *(_OWORD *)(v314 - 36) = v315;
                v314 -= 36;
                v305 = (_OWORD *)((char *)v305 - 36);
              }
              while (v305 != v306);
              v305 = v306;
            }
            v284 = v311 + 36;
            v709 = v314;
            v710 = v311 + 36;
            v711 = &v310[36 * v309];
            if (v305)
              operator delete(v305);
          }
          v710 = v284;
          ++v271;
        }
        while (v271 != a9);
        sub_207D70CC8(&v699, a8, (__int32 **)&v709, 1, v720, *(float *)(a2 + 584), *(float *)(a2 + 596), *(float *)(a2 + 600));
        sub_207DA63D8((uint64_t)v702, (uint64_t)v720);
        sub_207D80E10((uint64_t)v720);
        v321 = (_QWORD)v685 * a9;
        *(_QWORD *)v697 = 0;
        __src = 0;
        v698 = 0;
        if ((_QWORD)v685 * a9)
        {
          if (v321 >> 61)
            sub_207CA420C();
          __src = operator new(8 * v321);
          v698 = (char *)__src + 8 * v321;
          bzero(__src, 8 * v321);
          *(_QWORD *)v697 = v698;
        }
        v322 = *(_QWORD *)(a2 + 72);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 80) - v322) >> 6) < 2)
        {
          v323 = a15;
          v324 = (_BYTE *)(a15 + 1320);
          *(_BYTE *)(a15 + 1320) = 0;
          v325 = (_DWORD **)(a15 + 1104);
          v326 = **(_DWORD **)(a15 + 1104) == 0;
        }
        else
        {
          v323 = a15;
          if (!*(_BYTE *)(a15 + 1312))
          {
            sub_207DA65C0(v720, a2, (uint64_t)v702, a5, a8, (char **)&__src, (uint64_t)a14, 1);
            *(_BYTE *)(a15 + 1320) = 1;
            v505 = *(double *)(a15 + 936);
            *(float *)(a15 + 1324) = v505;
            if (v721)
            {
              v506 = v720[0];
              *(void **)(a15 + 1304) = v720[0];
              *(_BYTE *)(a15 + 1312) = 1;
              sub_207DECE94(a15, (int *)(*(_QWORD *)(a2 + 72) + 192 * (_QWORD)v506));
              a16[8].i32[0] = (__int32)v720[1];
              v507 = *(_OWORD *)((char *)&v720[3] + 4);
              *(_OWORD *)a16->f32 = *(_OWORD *)((char *)&v720[1] + 4);
              *(_OWORD *)a16[2].f32 = v507;
              v508 = *(_OWORD *)((char *)&v720[7] + 4);
              *(_OWORD *)a16[4].f32 = *(_OWORD *)((char *)&v720[5] + 4);
              *(_OWORD *)a16[6].f32 = v508;
            }
            goto LABEL_827;
          }
          v324 = (_BYTE *)(a15 + 1320);
          *(_BYTE *)(a15 + 1320) = 0;
          v325 = (_DWORD **)(a15 + 1104);
          if (!**(_DWORD **)(a15 + 1104))
          {
            sub_207DECE94(a15, (int *)(v322 + 192 * *(_QWORD *)(a15 + 1304)));
            v504 = 0;
            v509 = 0.0;
            goto LABEL_733;
          }
          v326 = 0;
        }
        if (*(_BYTE *)(v323 + 441))
        {
          if (*(_BYTE *)(v323 + 652))
          {
            if (*(_QWORD *)(a2 + 640))
            {
              v327 = 632;
              if (!*(_BYTE *)(a15 + 1328))
                v327 = 640;
              v328 = *(_QWORD *)(a2 + v327);
            }
            else
            {
              v328 = *(_QWORD *)(a2 + 632);
            }
            v509 = (float)v328;
            v504 = 1;
            goto LABEL_731;
          }
          v504 = 1;
        }
        else
        {
          v504 = *(_BYTE *)(a2 + 666) != 0;
        }
        v509 = 0.0;
LABEL_731:
        if (v326)
        {
          *(_QWORD *)(a15 + 1304) = 0;
          *(_BYTE *)(a15 + 1312) = 1;
        }
LABEL_733:
        LOBYTE(v691[0]) = 0;
        v695 = 0;
        if (v661)
        {
          v317.i64[0] = *(_QWORD *)(*a5 + 200);
          v317.i32[2] = *(_DWORD *)(*a5 + 208);
          v318.i64[0] = *(_QWORD *)(*a5 + 216);
          v318.i32[2] = *(_DWORD *)(*a5 + 224);
          v510.i64[0] = vzip1q_s32(v317, v318).u64[0];
          v319.i64[0] = *(_QWORD *)(*a5 + 248);
          v319.i32[2] = *(_DWORD *)(*a5 + 256);
          v511 = (int8x16_t)vnegq_f32(v319);
          v512 = (int8x16_t)vtrn2q_s32(v317, v318);
          v512.i32[2] = HIDWORD(*(_QWORD *)(*a5 + 232));
          v320.i32[0] = *(_DWORD *)(*a5 + 240);
          v513 = (int8x16_t)vzip2q_s32(v317, v318);
          *(float32x2_t *)v514.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v510.f32, *(float *)v511.i32), *(float32x2_t *)v512.i8, *(float32x2_t *)v319.f32, 1), *(float32x2_t *)v513.i8, v319, 2);
          v513.i32[2] = v320.i32[0];
          v514.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(*a5 + 232), *(float32x2_t *)v511.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(*a5 + 232), 1), *(float32x2_t *)v319.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v511, v511, 8uLL), v320).u32[0]);
          v515.i32[3] = 0;
          v515.i32[0] = v512.i32[0];
          v517 = vextq_s8(vextq_s8(v512, v512, 0xCuLL), v513, 8uLL);
          v516.i64[0] = v517.i64[1];
          *(uint64_t *)((char *)v515.i64 + 4) = v517.i64[0];
          v516.i64[1] = vdupq_laneq_s32((int32x4_t)v513, 2).u32[0];
          v510.i64[1] = *(_QWORD *)(*a5 + 232);
          v695 = 1;
          *(float32x4_t *)v691 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v510, v643.f32[0]), v515, *(float32x2_t *)v643.f32, 1), v516, v643, 2), v514, v643, 3);
          v692 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v510, v646.f32[0]), v515, *(float32x2_t *)v646.f32, 1), v516, v646, 2), v514, v646, 3);
          v693 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v510, v651.f32[0]), v515, *(float32x2_t *)v651.f32, 1), v516, v651, 2), v514, v651, 3);
          v694 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v510, v654.f32[0]), v515, *(float32x2_t *)v654.f32, 1), v516, v654, 2), v514, v654, 3);
        }
        v518 = *a6;
        __p[0] = v685;
        __p[1] = v518;
        if (v685
          && !v518
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        sub_207D7A8F4((uint64_t)__p, (uint64_t)a8, (uint64_t)&v709, (uint64_t)v702, (uint64_t)v691, (unint64_t)v509, *(_QWORD *)(a2 + 608), v504, (unint64_t **)&__src, *(_QWORD *)(a2 + 360), *(_QWORD *)(a2 + 352), *(_BYTE *)(a2 + 653), *(_QWORD *)(a2 + 672));
        a16[8].i32[0] = (__int32)v720[0];
        v519 = *(_OWORD *)((char *)&v720[2] + 4);
        *(_OWORD *)a16->f32 = *(_OWORD *)((char *)v720 + 4);
        *(_OWORD *)a16[2].f32 = v519;
        v520 = *(_OWORD *)((char *)&v720[6] + 4);
        *(_OWORD *)a16[4].f32 = *(_OWORD *)((char *)&v720[4] + 4);
        *(_OWORD *)a16[6].f32 = v520;
        if (a18)
          sub_207DA8084(a17, (uint64_t)v702);
        if (*(double *)(a15 + 936) - *(float *)(a15 + 1324) > *(float *)(a15 + 124)
          && a16[8].f32[0] > 0.43
          && (**v325 & 0xFFFFFFFE) != 6
          && 0x8F9C18F9C18F9C19 * ((a5[1] - *a5) >> 3) == (uint64_t)(a14[4] - a14[3]) >> 4
          && *(_BYTE *)(a15 + 1312))
        {
          v521 = *(_QWORD *)(a15 + 1304);
          kdebug_trace();
          v522 = a5[1] - *a5;
          v681 = v324;
          if (v522)
          {
            v523 = 0x8F9C18F9C18F9C19 * (v522 >> 3);
            if (v523 >> 60)
              sub_207CA420C();
            v524 = *(_QWORD *)(a2 + 72);
            v525 = (char *)operator new(0xF9C18F9C18F9C190 * (v522 >> 3));
            v530 = 0;
            v531 = (unint64_t *)(v524 + 192 * v521 + 96);
            v532 = &v525[16 * v523];
            v533 = (_QWORD *)(v524 + 192 * v521 + 104);
            v534 = v525;
            while (1)
            {
              while (1)
              {
                v537 = (float32x2_t *)(*a8 + (v530 << 6));
                *(float32x2_t *)v526.i8 = *v537;
                v526.i32[2] = v537[1].i32[0];
                *(float32x2_t *)v527.i8 = v537[2];
                v527.i32[2] = v537[3].i32[0];
                *(float32x2_t *)v528.f32 = v537[6];
                v528.i32[2] = v537[7].i32[0];
                v538.i64[0] = vzip1q_s32(v526, v527).u64[0];
                v539 = (int8x16_t)vnegq_f32(v528);
                v529.i32[0] = v537[5].i32[0];
                v540 = (int8x16_t)vtrn2q_s32(v526, v527);
                v540.i32[2] = HIDWORD(*(_QWORD *)&v537[4]);
                v541 = vzip2q_s32(v526, v527);
                v542 = (int8x16_t)v541;
                v542.i32[2] = v529.i32[0];
                *(float32x2_t *)v543.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v538.f32, *(float *)v539.i32), *(float32x2_t *)v540.i8, *(float32x2_t *)v528.f32, 1), *(float32x2_t *)v541.i8, v528, 2);
                v544 = vdupq_laneq_s32((int32x4_t)v542, 2).u32[0];
                v543.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v537[4], *(float32x2_t *)v539.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v537[4], 1), *(float32x2_t *)v528.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v539, v539, 8uLL), v529).u32[0]);
                v545 = vextq_s8(vextq_s8(v540, v540, 0xCuLL), v542, 8uLL);
                v542.i64[0] = __PAIR64__(v545.u32[0], v540.u32[0]);
                v542.i64[1] = v545.u32[1];
                v546.i64[0] = v545.i64[1];
                v546.i64[1] = v544;
                v538.i64[1] = *(_QWORD *)&v537[4];
                v547 = *a5 + 328 * v530 + 92;
                v548 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v538, COERCE_FLOAT(*(_OWORD *)a16->f32)), (float32x4_t)v542, *a16, 1), v546, *(float32x4_t *)a16->f32, 2), v543, *(float32x4_t *)a16->f32, 3);
                v549 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v538, COERCE_FLOAT(*(_OWORD *)a16[2].f32)), (float32x4_t)v542, a16[2], 1), v546, *(float32x4_t *)a16[2].f32, 2), v543, *(float32x4_t *)a16[2].f32, 3);
                v550 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v538, COERCE_FLOAT(*(_OWORD *)a16[4].f32)), (float32x4_t)v542, a16[4], 1), v546, *(float32x4_t *)a16[4].f32, 2), v543, *(float32x4_t *)a16[4].f32, 3);
                v551 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v538, COERCE_FLOAT(*(_OWORD *)a16[6].f32)), (float32x4_t)v542, a16[6], 1), v546, *(float32x4_t *)a16[6].f32, 2), v543, *(float32x4_t *)a16[6].f32, 3);
                *(float32x4_t *)v720 = v548;
                *(float32x4_t *)&v720[2] = v549;
                *(float32x4_t *)&v720[4] = v550;
                *(float32x4_t *)&v720[6] = v551;
                v552 = *v531;
                v690[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v533 - *v531) >> 2);
                v690[1] = v552;
                v688 = 0;
                v689 = 0;
                sub_207DE48FC(v547, (float32x2_t *)v720, v690, 0, &v688, (int8x16_t *)__p);
                v553 = v689;
                if (v689)
                {
                  p_shared_owners = (unint64_t *)&v689->__shared_owners_;
                  do
                    v555 = __ldaxr(p_shared_owners);
                  while (__stlxr(v555 - 1, p_shared_owners));
                  if (!v555)
                  {
                    ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
                    std::__shared_weak_count::__release_weak(v553);
                  }
                }
                if (v534 >= v532)
                  break;
                v535 = __p[1];
                *(void **)v534 = __p[0];
                *((_QWORD *)v534 + 1) = v535;
                v536 = (uint64_t)(v534 + 16);
                ++v530;
                v534 += 16;
                if (v530 == v523)
                  goto LABEL_817;
              }
              v556 = v534 - v525;
              v557 = (v534 - v525) >> 4;
              v558 = v557 + 1;
              if ((unint64_t)(v557 + 1) >> 60)
                sub_207CA420C();
              if ((v532 - v525) >> 3 > v558)
                v558 = (v532 - v525) >> 3;
              if ((unint64_t)(v532 - v525) >= 0x7FFFFFFFFFFFFFF0)
                v559 = 0xFFFFFFFFFFFFFFFLL;
              else
                v559 = v558;
              if (v559 >> 60)
                sub_207CA3AB8();
              v560 = (char *)operator new(16 * v559);
              v561 = &v560[16 * v557];
              *(_OWORD *)v561 = *(_OWORD *)__p;
              v536 = (uint64_t)(v561 + 16);
              if (v534 == v525)
              {
                v564 = v561;
              }
              else
              {
                v562 = v534 - v525 - 16;
                if (v562 < 0x3F0)
                  goto LABEL_764;
                v566 = v534 - 16;
                v567 = v534 - 16 - v525;
                v568 = v567 & 0xFFFFFFFFFFFFFFF0;
                if (&v560[v556 - 16 - (v567 & 0xFFFFFFFFFFFFFFF0)] > &v560[v556 - 16])
                  goto LABEL_764;
                if (&v560[v556 - 8 - v568] > &v560[v556 - 8])
                  goto LABEL_764;
                if (&v566[-v568] > v566)
                  goto LABEL_764;
                v569 = (unint64_t)(v534 - 8);
                if (&v534[-v568 - 8] > v534 - 8)
                  goto LABEL_764;
                v570 = v567 & 0xFFFFFFFFFFFFFFF0;
                v571 = (unint64_t)&v560[v556 - v570 - 16];
                v572 = &v560[v556 - 8];
                v573 = (unint64_t)&v560[v556 - v570 - 8];
                v574 = (unint64_t)&v566[-v570];
                v575 = v569 - v570;
                v576 = v571 >= v569 || v574 >= (unint64_t)v572;
                v577 = !v576;
                v578 = v571 >= (unint64_t)v534 || v575 >= (unint64_t)v572;
                v579 = !v578;
                v580 = v573 >= v569 || v574 >= (unint64_t)v561;
                v581 = !v580;
                v582 = v573 >= (unint64_t)v534 || v575 >= (unint64_t)v561;
                v583 = !v582;
                v584 = v573 >= (unint64_t)v572 || v571 >= (unint64_t)v561;
                if (!v584 || v577 || v579 || v581 || v583)
                {
LABEL_764:
                  v563 = v534;
                  v564 = v561;
                }
                else
                {
                  v585 = (v562 >> 4) + 1;
                  v586 = 16 * (v585 & 0x1FFFFFFFFFFFFFFCLL);
                  v563 = &v534[-v586];
                  v564 = &v561[-v586];
                  v587 = (const double *)(v534 - 32);
                  v588 = (double *)(v561 - 32);
                  v589 = v585 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    *(float64x2x2_t *)(&v526 - 1) = vld2q_f64(v587);
                    v590 = v587 - 4;
                    *(float64x2x2_t *)v527.i8 = vld2q_f64(v590);
                    vst2q_f64(v588, *(float64x2x2_t *)(&v526 - 1));
                    v591 = v588 - 4;
                    vst2q_f64(v591, *(float64x2x2_t *)v527.i8);
                    v588 -= 8;
                    v587 -= 8;
                    v589 -= 4;
                  }
                  while (v589);
                  if (v585 == (v585 & 0x1FFFFFFFFFFFFFFCLL))
                    goto LABEL_768;
                }
                do
                {
                  v565 = *((_QWORD *)v563 - 2);
                  v563 -= 16;
                  *((_QWORD *)v564 - 2) = v565;
                  v564 -= 16;
                  *((_QWORD *)v564 + 1) = *((_QWORD *)v563 + 1);
                }
                while (v563 != v525);
              }
LABEL_768:
              v532 = &v560[16 * v559];
              if (v525)
                operator delete(v525);
              v525 = v564;
              ++v530;
              v534 = (char *)v536;
              if (v530 == v523)
                goto LABEL_817;
            }
          }
          v525 = 0;
          v536 = 0;
LABEL_817:
          v594 = sub_207DA81BC((uint64_t)v525, v536, a14[3]);
          kdebug_trace();
          if (v594 == 1)
          {
            sub_207DA65C0(v720, v650, (uint64_t)v702, a5, a8, (char **)&__src, (uint64_t)a14, 0);
            if (v721)
            {
              v595 = v720[0];
              v596 = (__int32)v720[1];
              *(_OWORD *)__p = *(_OWORD *)((char *)&v720[1] + 4);
              v717 = *(_OWORD *)((char *)&v720[3] + 4);
              v718 = *(_OWORD *)((char *)&v720[5] + 4);
              v719 = *(_OWORD *)((char *)&v720[7] + 4);
              v597 = *(double *)(a15 + 936);
              *(float *)(a15 + 1324) = v597;
              if (*(_BYTE *)(a15 + 1312) && v595 != *(void **)(a15 + 1304))
              {
                *(_QWORD *)(a15 + 1304) = v595;
                *(_BYTE *)(a15 + 1312) = 1;
                sub_207DECE94(a15, (int *)(*(_QWORD *)(v650 + 72) + 192 * (_QWORD)v595));
                a16[8].i32[0] = v596;
                v598 = v717;
                *(_OWORD *)a16->f32 = *(_OWORD *)__p;
                *(_OWORD *)a16[2].f32 = v598;
                v599 = v719;
                *(_OWORD *)a16[4].f32 = v718;
                *(_OWORD *)a16[6].f32 = v599;
                *v681 = 1;
              }
            }
            else
            {
              v600 = *(double *)(a15 + 936);
              *(float *)(a15 + 1324) = v600;
            }
          }
          if (v525)
            operator delete(v525);
        }
LABEL_827:
        if (&__src != (void **)a15)
          sub_207CDADA0((_QWORD *)a15, (char *)__src, *(char **)v697, (uint64_t)(*(_QWORD *)v697 - (_QWORD)__src) >> 3);
        v601 = __src;
        if (__src == *(void **)v697)
        {
          v603 = 0.0;
        }
        else
        {
          v602 = *(_QWORD *)v697 - (_QWORD)__src - 8;
          v603 = 0.0;
          v604 = (uint64_t *)__src;
          if (v602 < 0x18)
            goto LABEL_889;
          v605 = (v602 >> 3) + 1;
          v604 = (uint64_t *)((char *)__src + 8 * (v605 & 0x3FFFFFFFFFFFFFFCLL));
          v606 = (int64x2_t *)((char *)__src + 16);
          v607 = vdupq_n_s64(2uLL);
          v608 = v605 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v609 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64(vceqq_s64(v606[-1], v607)), (int8x8_t)0x100000001));
            v610 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmovn_s64(vceqq_s64(*v606, v607)), (int8x8_t)0x100000001));
            v603 = (float)((float)((float)(v603 + v609.f32[0]) + v609.f32[1]) + v610.f32[0]) + v610.f32[1];
            v606 += 2;
            v608 -= 4;
          }
          while (v608);
          if (v605 != (v605 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_889:
            do
            {
              v611 = *v604++;
              if (v611 == 2)
                v612 = 1.0;
              else
                v612 = 0.0;
              v603 = v603 + v612;
            }
            while (v604 != *(uint64_t **)v697);
          }
        }
        *(float *)(a15 + 24) = v603 / (float)(unint64_t)((uint64_t)(*(_QWORD *)v697 - (_QWORD)__src) >> 3);
        v613 = a16[8].i32[0];
        v614 = *(_OWORD *)a16[2].f32;
        v712 = *(_OWORD *)a16->f32;
        v713 = v614;
        v615 = *(_OWORD *)a16[6].f32;
        v714 = *(_OWORD *)a16[4].f32;
        v715 = v615;
        if (v601)
        {
          *(_QWORD *)v697 = v601;
          operator delete(v601);
        }
        if (v699)
        {
          v700 = (char *)v699;
          operator delete(v699);
        }
        sub_207D80E10((uint64_t)v702);
        if (v709)
        {
          v710 = (char *)v709;
          operator delete(v709);
        }
        v349 = a16;
        a16[8].i32[0] = v613;
        v616 = v713;
        *(_OWORD *)a16->f32 = v712;
        *(_OWORD *)a16[2].f32 = v616;
        v351 = v714;
        v352 = v715;
        goto LABEL_847;
      }
      if (a9 != 1 || v27)
        goto LABEL_848;
      v227 = *(void **)(a2 + 384);
      v226 = *(void **)(v650 + 392);
      v228 = *(unsigned int *)(v650 + 360);
      v229 = *(unsigned int *)(v650 + 352);
      sub_207DC9E60(a3, (uint64_t)v702);
      v230 = *(_DWORD *)&v702[44];
      v231 = *(_QWORD *)v702;
      v232 = HIDWORD(*(_QWORD *)&v702[12]);
      if (*(_DWORD *)&v702[12])
        v233 = v232 == 0;
      else
        v233 = 1;
      if (v233)
        LODWORD(v232) = 0;
      if ((_DWORD)v232 * *(_DWORD *)&v702[36] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_877;
      }
      v234 = (_DWORD)v226 + (_DWORD)v227;
      v235 = v228 | (v229 << 32);
      v236 = !v228 || v229 == 0;
      v237 = v236 || v234 == 0;
      v238 = v237 ? 0 : v228 | (v229 << 32);
      v239 = HIDWORD(v238);
      if (v237)
      {
        v234 = 0;
        v240 = 0;
      }
      else
      {
        v240 = HIDWORD(v238) * v238;
      }
      v241 = (_DWORD)v238 != 0;
      v242 = v238 << 32;
      v243 = (_DWORD)v239 ? v242 : 0;
      if (v240 * v234 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_877;
      }
      v244 = (char *)(v231 + 2 * (v230 * a10));
      v245 = (void *)(v243 | v241);
      v246 = HIDWORD(v235);
      if (!v227)
        goto LABEL_373;
      if (v228)
        v247 = v246 == 0;
      else
        v247 = 1;
      v248 = v247 || (_DWORD)v227 == 0;
      if (v248)
        v249 = 0;
      else
        v249 = (void *)v235;
      if (v248)
        v250 = 0;
      else
        v250 = (int)v227;
      v720[0] = v244;
      v720[1] = v249;
      *(void **)((char *)&v720[2] + 4) = v245;
      LODWORD(v720[2]) = v250;
      HIDWORD(v720[3]) = v240;
      if (v240 * v250 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_877;
      }
      v251 = *a6;
      v691[0] = v227;
      v691[1] = v251;
      if (!v251
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_877;
      }
      sub_207D6E060((uint64_t *)v720, v691, *a5 + 328 * a10 + 92, (uint64_t)v702, *(float *)(v650 + 584));
      v83 = *(float *)v702;
      a16[8].i32[0] = *(_DWORD *)v702;
      v252 = *(_OWORD *)&v702[20];
      *(_OWORD *)a16->f32 = *(_OWORD *)&v702[4];
      *(_OWORD *)a16[2].f32 = v252;
      v253 = *(_OWORD *)&v702[52];
      *(_OWORD *)a16[4].f32 = *(_OWORD *)&v702[36];
      *(_OWORD *)a16[6].f32 = v253;
      if (v83 <= 0.0 && v226)
      {
LABEL_373:
        if (v228)
          v254 = v246 == 0;
        else
          v254 = 1;
        v255 = v254 || (_DWORD)v226 == 0;
        if (v255)
          v256 = 0;
        else
          v256 = (void *)v235;
        if (v255)
          v257 = 0;
        else
          v257 = (int)v226;
        v720[0] = &v244[2 * (_DWORD)v227 * v240];
        v720[1] = v256;
        *(void **)((char *)&v720[2] + 4) = v245;
        LODWORD(v720[2]) = v257;
        HIDWORD(v720[3]) = v240;
        if (v240 * v257 == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| (v258 = *a7, v691[0] = v226, v691[1] = v258, v226)&& !v258&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_877:
          abort();
        }
        sub_207D6E060((uint64_t *)v720, v691, *a5 + 328 * a10 + 92, (uint64_t)v702, *(float *)(v650 + 584));
LABEL_391:
        v83 = *(float *)v702;
        v259 = *(_OWORD *)&v702[20];
        *(_OWORD *)a16->f32 = *(_OWORD *)&v702[4];
        *(_OWORD *)a16[2].f32 = v259;
        v260 = *(_OWORD *)&v702[52];
        *(_OWORD *)a16[4].f32 = *(_OWORD *)&v702[36];
        *(_OWORD *)a16[6].f32 = v260;
        if (v83 > 0.95)
          v83 = 0.95;
        a16[8].f32[0] = v83;
        a16[9].i32[0] = 5;
      }
LABEL_394:
      a16[8].f32[0] = v83;
      goto LABEL_848;
    case 0xAuLL:
      if (v23 >= 0)
        v40 = a4;
      else
        v40 = (uint64_t *)*a4;
      v41 = *v40;
      v42 = *((unsigned __int16 *)v40 + 4);
      if (v41 != 0x656E697272756C42 || v42 != 29555)
        goto LABEL_848;
      sub_207DC9E60(a3, (uint64_t)v702);
      v44 = *(_DWORD *)&v702[44];
      v45 = *(_QWORD *)v702;
      if (*(_DWORD *)&v702[20])
        v46 = *(_DWORD *)&v702[12] == 0;
      else
        v46 = 1;
      if (v46 || HIDWORD(*(_QWORD *)&v702[12]) == 0)
        v48 = 0;
      else
        v48 = *(_DWORD *)&v702[20];
      if (v48 * *(_DWORD *)&v702[40] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v34 = a11;
      _H0 = *(_WORD *)(v45 + 2 * (v44 * v25));
      __asm { FCVT            S0, H0 }
      goto LABEL_56;
    case 0xBuLL:
      if (v23 >= 0)
        v103 = a4;
      else
        v103 = (uint64_t *)*a4;
      if (*v103 != 0x696F5079654B4433 || *(uint64_t *)((char *)v103 + 3) != 0x73746E696F507965)
      {
        v105 = *v103;
        v106 = *(uint64_t *)((char *)v103 + 3);
        if (v105 != 0x746E696F5079654BLL || v106 != 0x443373746E696F50)
          goto LABEL_848;
      }
      v108 = *(_QWORD *)(a2 + 384);
      v624 = *(_QWORD *)(a2 + 392);
      v630 = *(_QWORD *)(a2 + 432);
      if (v630 > 1)
        v109 = 1;
      else
        v109 = a9;
      sub_207DA82E0(v691, v109);
      sub_207DA82E0(__p, v109);
      if (!v109)
        goto LABEL_503;
      v116 = v624 + v108;
      if (v624 + v108)
      {
        v117 = 0;
        v628 = a10 * a9;
        v641 = (void *)(v624 + v108);
        v644 = v108;
        v626 = v109;
        while (1)
        {
          v118 = *a5 + 328 * (v117 + v628);
          v119 = *a8 + (v117 << 6);
          v110.i64[0] = *(_QWORD *)v119;
          v110.i32[2] = *(_DWORD *)(v119 + 8);
          v683 = (int8x16_t)v110;
          v110.i64[0] = *(_QWORD *)(v119 + 16);
          v110.i32[2] = *(_DWORD *)(v119 + 24);
          v676 = (int8x16_t)v110;
          v110.i64[0] = *(_QWORD *)(v119 + 32);
          v110.i32[2] = *(_DWORD *)(v119 + 40);
          v670 = (int8x16_t)v110;
          v110.i64[0] = *(_QWORD *)(v119 + 48);
          v110.i32[2] = *(_DWORD *)(v119 + 56);
          v665 = v110;
          v120 = *(float *)v118;
          v110.i32[0] = *(_DWORD *)(v118 + 4);
          v662 = v110.i64[0];
          sub_207DC9E60(a3, (uint64_t)v702);
          if (v630 <= 1)
            v121 = v117 + v628;
          else
            v121 = a10;
          v122 = *(_DWORD *)&v702[44];
          v123 = *(_QWORD *)v702;
          if (*(_DWORD *)&v702[20])
            v124 = *(_DWORD *)&v702[12] == 0;
          else
            v124 = 1;
          if (v124 || HIDWORD(*(_QWORD *)&v702[12]) == 0)
            v126 = 0;
          else
            v126 = *(_DWORD *)&v702[20];
          if (v126 * *(_DWORD *)&v702[40] == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            goto LABEL_502;
          }
          v127 = 0;
          v128 = v123 + 2 * (v122 * v121);
          v655 = vextq_s8(v676, v676, 8uLL);
          v658 = (float32x2_t)vextq_s8(v683, v683, 8uLL).u64[0];
          v110.i64[0] = vextq_s8(v670, v670, 8uLL).u64[0];
          v652 = *(float32x2_t *)v110.f32;
          do
          {
            v130 = v128 + 6 * v127;
            v110.i32[0] = *(_DWORD *)v130;
            v131 = vcvtq_f32_f16(*(float16x4_t *)v110.f32);
            _H1 = *(_WORD *)(v130 + 4);
            __asm { FCVT            S1, H1 }
            v131.i32[2] = _S1;
            DWORD1(v111) = HIDWORD(v662);
            v134 = vmulq_n_f32(v131, *(float *)&v662);
            *(float *)&v111 = v120 + v134.f32[2];
            *(float32x2_t *)v112.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v683.i8, v134.f32[0]), *(float32x2_t *)v676.i8, *(float32x2_t *)v134.f32, 1), *(float32x2_t *)v670.i8, v120 + v134.f32[2]);
            v114 = (float32x4_t)v655;
            v113 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(v658, *(float32x2_t *)v134.f32), *(float32x2_t *)v655.i8, *(float32x2_t *)v134.f32, 1), *(float32x2_t *)&v111, v652));
            *(double *)&v112.i64[1] = v113;
            v110 = vaddq_f32(v665, v112);
            if (v127 < v108)
            {
              v135 = (char *)v691[0] + 24 * v117;
              v137 = (char **)(v135 + 1);
              v136 = (char *)v135[1];
              v138 = v135[2];
              if ((unint64_t)v136 < v138)
              {
                *((_DWORD *)v136 + 2) = v110.i32[2];
                *(_QWORD *)v136 = v110.i64[0];
                v129 = v136 + 12;
                goto LABEL_193;
              }
              v139 = (char *)*v135;
              v140 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v136[-*v135] >> 2);
              v141 = v140 + 1;
              if (v140 + 1 > 0x1555555555555555)
                sub_207CA420C();
              v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - (_QWORD)v139) >> 2);
              if (2 * v142 > v141)
                v141 = 2 * v142;
              if (v142 >= 0xAAAAAAAAAAAAAAALL)
                v143 = 0x1555555555555555;
              else
                v143 = v141;
              if (v143)
              {
                v647 = v110;
                if (v143 > 0x1555555555555555)
                  sub_207CA3AB8();
                v144 = (char *)operator new(12 * v143);
                v110 = v647;
              }
              else
              {
                v144 = 0;
              }
              v154 = &v144[12 * v140];
              *(_QWORD *)v154 = v110.i64[0];
              *((_DWORD *)v154 + 2) = v110.i32[2];
              v155 = v154;
              if (v136 != v139)
              {
                do
                {
                  v156 = *(_QWORD *)(v136 - 12);
                  v136 -= 12;
                  v157 = *((_DWORD *)v136 + 2);
                  *(_QWORD *)(v155 - 12) = v156;
                  v155 -= 12;
                  *((_DWORD *)v155 + 2) = v157;
                }
                while (v136 != v139);
                v136 = (char *)*v135;
              }
              *v135 = v155;
              v129 = v154 + 12;
              *v137 = v154 + 12;
              v135[2] = &v144[12 * v143];
              v116 = (unint64_t)v641;
              if (!v136)
                goto LABEL_229;
              v158 = v136;
              goto LABEL_228;
            }
            v145 = (char *)__p[0] + 24 * v117;
            v137 = (char **)(v145 + 1);
            v146 = (char *)v145[1];
            v147 = v145[2];
            if ((unint64_t)v146 < v147)
            {
              *((_DWORD *)v146 + 2) = v110.i32[2];
              *(_QWORD *)v146 = v110.i64[0];
              v129 = v146 + 12;
              goto LABEL_193;
            }
            v148 = (char *)*v145;
            v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v146[-*v145] >> 2);
            v150 = v149 + 1;
            if (v149 + 1 > 0x1555555555555555)
              sub_207CA420C();
            v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - (_QWORD)v148) >> 2);
            if (2 * v151 > v150)
              v150 = 2 * v151;
            if (v151 >= 0xAAAAAAAAAAAAAAALL)
              v152 = 0x1555555555555555;
            else
              v152 = v150;
            if (v152)
            {
              v648 = v110;
              if (v152 > 0x1555555555555555)
                sub_207CA3AB8();
              v153 = (char *)operator new(12 * v152);
              v110 = v648;
            }
            else
            {
              v153 = 0;
            }
            v159 = &v153[12 * v149];
            *(_QWORD *)v159 = v110.i64[0];
            *((_DWORD *)v159 + 2) = v110.i32[2];
            v160 = v159;
            if (v146 != v148)
            {
              do
              {
                v161 = *(_QWORD *)(v146 - 12);
                v146 -= 12;
                v162 = *((_DWORD *)v146 + 2);
                *(_QWORD *)(v160 - 12) = v161;
                v160 -= 12;
                *((_DWORD *)v160 + 2) = v162;
              }
              while (v146 != v148);
              v146 = (char *)*v145;
            }
            *v145 = v160;
            v129 = v159 + 12;
            *v137 = v159 + 12;
            v145[2] = &v153[12 * v152];
            v116 = (unint64_t)v641;
            if (v146)
            {
              v158 = v146;
LABEL_228:
              operator delete(v158);
            }
LABEL_229:
            v108 = v644;
LABEL_193:
            *v137 = v129;
            ++v127;
          }
          while (v127 != v116);
          if (++v117 == v626)
            goto LABEL_503;
        }
      }
      do
      {
        sub_207DC9E60(a3, (uint64_t)v702);
        if (*(_DWORD *)&v702[20])
          v329 = *(_DWORD *)&v702[12] == 0;
        else
          v329 = 1;
        if (v329 || HIDWORD(*(_QWORD *)&v702[12]) == 0)
          v331 = 0;
        else
          v331 = *(_DWORD *)&v702[20];
        if (v331 * *(_DWORD *)&v702[40] == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
LABEL_502:
          abort();
        }
        --v109;
      }
      while (v109);
LABEL_503:
      if (!v108)
        goto LABEL_509;
      if (a9 < 2
        || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v650 + 80) - *(_QWORD *)(v650 + 72)) >> 6) < 2
        || *(_BYTE *)(a15 + 1312))
      {
        sub_207D7A62C((uint64_t **)v691, (uint64_t)a6, (uint64_t)v702, *(double *)v110.i64, *(double *)&v111, *(double *)v112.i64, v113, v114, v115);
        v265 = *(float *)v702;
        a16[8].i32[0] = *(_DWORD *)v702;
        v332 = *(_OWORD *)&v702[20];
        *(_OWORD *)a16->f32 = *(_OWORD *)&v702[4];
        *(_OWORD *)a16[2].f32 = v332;
        v110.i32[1] = *(_DWORD *)&v702[40];
        v111 = *(_OWORD *)&v702[52];
        *(_OWORD *)a16[4].f32 = *(_OWORD *)&v702[36];
        *(_OWORD *)a16[6].f32 = v111;
        v110.i32[0] = 1058642330;
        if (v265 > 0.6)
          goto LABEL_513;
      }
      else
      {
        sub_207DA83E0((uint64_t)v702, v650, (uint64_t **)v691);
        if ((_BYTE)v703)
        {
          v592 = *(_QWORD *)v702;
          *(_QWORD *)(a15 + 1304) = *(_QWORD *)v702;
          *(_BYTE *)(a15 + 1312) = 1;
          sub_207DECE94(a15, (int *)(*(_QWORD *)(v650 + 72) + 192 * v592));
          v265 = *(float *)&v702[8];
          a16[8].i32[0] = *(_DWORD *)&v702[8];
          v593 = *(_OWORD *)&v702[28];
          *(_OWORD *)a16->f32 = *(_OWORD *)&v702[12];
          *(_OWORD *)a16[2].f32 = v593;
          v110.i32[1] = *(_DWORD *)&v702[48];
          v111 = *(_OWORD *)&v702[60];
          *(_OWORD *)a16[4].f32 = *(_OWORD *)&v702[44];
          *(_OWORD *)a16[6].f32 = v111;
          v110.i32[0] = 1058642330;
          if (v265 > 0.6)
            goto LABEL_513;
        }
        else
        {
          v265 = a16[8].f32[0];
          v110.i32[0] = 1058642330;
          if (v265 > 0.6)
            goto LABEL_513;
        }
      }
      if (v624)
      {
LABEL_509:
        sub_207D7A62C((uint64_t **)__p, (uint64_t)a7, (uint64_t)v702, *(double *)v110.i64, *(double *)&v111, *(double *)v112.i64, v113, v114, v115);
        v333 = *(float *)v702;
        v334 = *(_OWORD *)&v702[20];
        *(_OWORD *)a16->f32 = *(_OWORD *)&v702[4];
        *(_OWORD *)a16[2].f32 = v334;
        v335 = *(_OWORD *)&v702[52];
        *(_OWORD *)a16[4].f32 = *(_OWORD *)&v702[36];
        *(_OWORD *)a16[6].f32 = v335;
        if (v333 <= 0.95)
          v265 = v333;
        else
          v265 = 0.95;
        a16[8].f32[0] = v265;
        a16[9].i32[0] = 5;
      }
LABEL_513:
      v336 = *(_OWORD *)a16[2].f32;
      *(_OWORD *)v720 = *(_OWORD *)a16->f32;
      *(_OWORD *)&v720[2] = v336;
      v337 = *(_OWORD *)a16[6].f32;
      *(_OWORD *)&v720[4] = *(_OWORD *)a16[4].f32;
      *(_OWORD *)&v720[6] = v337;
      v338 = (char *)__p[0];
      if (__p[0])
      {
        v339 = __p[1];
        v340 = __p[0];
        if (__p[1] != __p[0])
        {
          v341 = (char *)__p[1];
          do
          {
            v343 = (void *)*((_QWORD *)v341 - 3);
            v341 -= 24;
            v342 = v343;
            if (v343)
            {
              *(v339 - 2) = v342;
              operator delete(v342);
            }
            v339 = v341;
          }
          while (v341 != v338);
          v340 = __p[0];
        }
        __p[1] = v338;
        operator delete(v340);
      }
      v344 = (char *)v691[0];
      if (v691[0])
      {
        v345 = v691[1];
        v270 = v691[0];
        if (v691[1] != v691[0])
        {
          v346 = (char *)v691[1];
          do
          {
            v348 = (void *)*((_QWORD *)v346 - 3);
            v346 -= 24;
            v347 = v348;
            if (v348)
            {
              *(v345 - 2) = v347;
              operator delete(v347);
            }
            v345 = v346;
          }
          while (v346 != v344);
          v270 = v691[0];
        }
        v691[1] = v344;
LABEL_529:
        operator delete(v270);
      }
      goto LABEL_530;
    case 0xCuLL:
      if (v23 >= 0)
        v163 = a4;
      else
        v163 = (uint64_t *)*a4;
      if (*v163 == 0x61746E656D676553 && *((_DWORD *)v163 + 2) == 1852795252)
      {
        kdebug_trace();
        memset(v720, 0, 48);
        if (a9)
        {
          if (a9 >> 60)
            sub_207CA420C();
          v261 = a10;
          v720[3] = operator new(16 * a9);
          v720[4] = v720[3];
          v636 = (char *)v720[3] + 16 * a9;
          v720[5] = v636;
          v262 = (char *)operator new(4 * a9);
          v263 = v720[3];
          v264 = v262;
          v720[0] = v262;
          v720[1] = v262;
          v634 = &v262[4 * a9];
          v720[2] = v634;
        }
        else
        {
          v261 = a10;
          v634 = 0;
          v636 = 0;
          v264 = 0;
          v263 = 0;
        }
        v353 = *a5;
        v354 = a5[1];
        v691[1] = 0;
        v691[0] = 0;
        v692.i64[0] = 0;
        if (v354 == v353)
        {
          v620 = 0;
        }
        else
        {
          if (0x8F9C18F9C18F9C19 * ((v354 - v353) >> 3) > 0x71C71C71C71C71CLL)
            sub_207CA420C();
          v355 = v263;
          v691[0] = operator new(0x31F3831F3831F384 * ((v354 - v353) >> 3));
          v691[1] = v691[0];
          v692.i64[0] = (uint64_t)v691[0] + 0x31F3831F3831F384 * ((v354 - v353) >> 3);
          __p[0] = v691;
          do
          {
            *(_OWORD *)v702 = *(_OWORD *)(v353 + 92);
            *(_OWORD *)&v702[16] = *(_OWORD *)(v353 + 108);
            *(_DWORD *)&v702[32] = *(_DWORD *)(v353 + 124);
            sub_207DC443C((char ***)__p, (__int128 *)v702);
            v353 += 328;
          }
          while (v353 != v354);
          v620 = (char *)v691[0];
          v263 = v355;
        }
        v622 = *(_QWORD *)(v650 + 432);
        if (v622 > 1)
          v356 = 1;
        else
          v356 = a9;
        if (!a9)
          goto LABEL_715;
        v653 = 0;
        v621 = v356 * v261;
        v642 = (void **)v263;
        v645 = v264;
        v649 = (void **)v263;
        while (1)
        {
          v357 = *(_QWORD *)(v650 + 544);
          v359 = *(_QWORD *)(v650 + 352);
          v358 = *(_QWORD *)(v650 + 360);
          sub_207DC9E60(a3, (uint64_t)v702);
          if (v622 <= 1)
            v364 = v653;
          else
            v364 = 0;
          if (v622 <= 1)
            v365 = 0;
          else
            v365 = v653;
          v366 = *(_DWORD *)&v702[40];
          v367 = *(_DWORD *)&v702[44];
          v368 = *(_QWORD *)v702;
          v369 = HIDWORD(*(_QWORD *)&v702[12]);
          if (*(_DWORD *)&v702[12])
            v370 = v369 == 0;
          else
            v370 = 1;
          if (v370)
            LODWORD(v369) = 0;
          if ((_DWORD)v369 * *(_DWORD *)&v702[36] == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            v720[5] = v636;
            v720[4] = v649;
            v720[3] = v642;
            abort();
          }
          v371 = v359 / v357;
          v372 = v358 / v357;
          if ((v359 / v357))
            v373 = (_DWORD)v372 == 0;
          else
            v373 = 1;
          v374 = (void *)(v372 | ((unint64_t)v371 << 32));
          if (v373)
            v374 = 0;
          v375 = 0x100000000;
          if ((unint64_t)v374 > 0x100000000)
            v375 = (uint64_t)v374;
          v691[0] = (void *)(v368 + 2 * (v366 * v365 + v367 * (v364 + v621)));
          v691[1] = v374;
          v692.i64[0] = ((_DWORD)v374 != 0) | (unint64_t)(v375 << 32);
          if (HIDWORD(v374) * (_DWORD)v375 == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            v720[5] = v636;
            v720[4] = v649;
            v720[3] = v642;
            abort();
          }
          v376 = *a8 + (v653 << 6);
          v361.i64[0] = *(_QWORD *)v376;
          v361.i32[2] = *(_DWORD *)(v376 + 8);
          v362.i64[0] = *(_QWORD *)(v376 + 16);
          v362.i32[2] = *(_DWORD *)(v376 + 24);
          v360.i32[0] = *(_DWORD *)(v376 + 40);
          v377 = *(float32x2_t *)(v376 + 32);
          v363.i64[0] = *(_QWORD *)(v376 + 48);
          v363.i32[2] = *(_DWORD *)(v376 + 56);
          v379 = *(float32x4_t *)(*a5 + 264);
          v378 = *(float32x4_t *)(*a5 + 280);
          v381 = *(float32x4_t *)(*a5 + 296);
          v380 = *(float32x4_t *)(*a5 + 312);
          v383 = *(float32x4_t *)(a15 + 456);
          v382 = *(float32x4_t *)(a15 + 472);
          v385 = *(float32x4_t *)(a15 + 488);
          v384 = *(float32x4_t *)(a15 + 504);
          v386 = *(float32x2_t **)(a15 + 360);
          v387 = *(float32x2_t **)(a15 + 368);
          memset(v702, 0, 24);
          if (v387 == v386)
          {
            v438 = 0;
            v388 = 0;
            goto LABEL_616;
          }
          v623 = v377;
          v625 = v363;
          v627 = v362;
          v629 = v361;
          v631 = v360;
          v632 = v379;
          v656 = v378;
          v659 = v381;
          v663 = v380;
          v667 = v383;
          v673 = v382;
          v679 = v385;
          v686 = v384;
          if ((0xAAAAAAAAAAAAAAABLL * (((char *)v387 - (char *)v386) >> 2)) >> 61)
          {
            v720[5] = v636;
            v720[4] = v649;
            v720[3] = v642;
            sub_207CA420C();
          }
          v388 = (float *)operator new(0x5555555555555558 * (((char *)v387 - (char *)v386) >> 2));
          v389 = (int8x16_t)vzip1q_s32(v629, v627);
          v390 = (int8x16_t)vnegq_f32(v625);
          v389.i32[2] = v623.i32[0];
          v391 = vtrn2q_s32(v629, v627);
          v392 = (int8x16_t)v391;
          v392.i32[2] = v623.i32[1];
          v393 = vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v389.i8, *(float *)v390.i32), *(float32x2_t *)v391.i8, *(float32x2_t *)v625.f32, 1);
          v394 = (float32x4_t)vzip2q_s32(v629, v627);
          *(float32x2_t *)v395.f32 = vmls_laneq_f32(v393, *(float32x2_t *)v394.f32, v625, 2);
          v394.i32[2] = v631.i32[0];
          v395.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v623, *(float32x2_t *)v390.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v623, 1), *(float32x2_t *)v625.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v390, v390, 8uLL), v631).u32[0]);
          v390.i64[0] = vextq_s8(v392, v389, 4uLL).u64[0];
          v389.i32[3] = 0;
          v392.i32[3] = 0;
          v392.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v392, 0).i32[3];
          *(uint64_t *)((char *)v392.i64 + 4) = v390.i64[0];
          v394.i64[1] = vdupq_laneq_s32((int32x4_t)v394, 2).u32[0];
          v396 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v389, v632.f32[0]), (float32x4_t)v392, *(float32x2_t *)v632.f32, 1), v394, v632, 2), v395, v632, 3);
          v397 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v389, v656.f32[0]), (float32x4_t)v392, *(float32x2_t *)v656.f32, 1), v394, v656, 2), v395, v656, 3);
          v398 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v389, v659.f32[0]), (float32x4_t)v392, *(float32x2_t *)v659.f32, 1), v394, v659, 2), v395, v659, 3);
          v399 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v389, v663.f32[0]), (float32x4_t)v392, *(float32x2_t *)v663.f32, 1), v394, v663, 2), v395, v663, 3);
          v400 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v396, v667.f32[0]), v397, *(float32x2_t *)v667.f32, 1), v398, v667, 2), v399, v667, 3);
          v401 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v396, v673.f32[0]), v397, *(float32x2_t *)v673.f32, 1), v398, v673, 2), v399, v673, 3);
          v402 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v396, v679.f32[0]), v397, *(float32x2_t *)v679.f32, 1), v398, v679, 2), v399, v679, 3);
          v406 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v396, v686.f32[0]), v397, *(float32x2_t *)v686.f32, 1), v398, v686, 2), v399, v686, 3);
          *(_QWORD *)v702 = v388;
          *(_QWORD *)&v702[8] = v388;
          *(_QWORD *)&v702[16] = &v388[0x1555555555555556 * (((char *)v387 - (char *)v386) >> 2)];
          v403 = (float)v372;
          v404 = &v620[36 * v653];
          v405 = (float)v371;
          v680 = *(float32x2_t *)v401.i8;
          v687 = *(float32x2_t *)v400.i8;
          v664 = (float32x2_t)vextq_s8(v400, v400, 8uLL).u64[0];
          v668 = v406;
          v406.i64[0] = vextq_s8(v401, v401, 8uLL).u64[0];
          v674 = *(float32x2_t *)v402.i8;
          v657 = (float32x2_t)vextq_s8(v402, v402, 8uLL).u64[0];
          v660 = *(float32x2_t *)v406.f32;
          do
          {
            while (1)
            {
              while (1)
              {
                v406.i32[0] = v386[1].i32[0];
                *(float32x2_t *)v407.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v687, COERCE_FLOAT(*v386)), v680, *v386, 1), v674, v406.f32[0]);
                v408.i32[1] = v660.i32[1];
                *(float32x2_t *)&v407.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v664, *v386), v660, *v386, 1), *(float32x2_t *)v406.f32, v657);
                v409 = (int8x16_t)vaddq_f32(v407, v668);
                v407.i32[0] = *((_DWORD *)v404 + 2);
                v408.i32[0] = *((_DWORD *)v404 + 5);
                v398.i32[0] = *((_DWORD *)v404 + 8);
                *(float32x2_t *)v406.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v404, *(float *)v409.i32), *(float32x2_t *)(v404 + 12), *(float32x2_t *)v409.i8, 1), *(float32x2_t *)(v404 + 24), (float32x4_t)v409, 2);
                v407.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v407.f32, *(float32x2_t *)v409.i8), v408, *(float32x2_t *)v409.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v409, v409, 8uLL), *(float32x2_t *)v398.f32).f32[0];
                *(float *)v409.i32 = v406.f32[0] / v407.f32[0];
                v406.f32[0] = v406.f32[1] / v407.f32[0];
                v410 = (float)*(unint64_t *)(v650 + 544);
                v411 = *(float *)v409.i32 * v410;
                v412 = v411 <= v403 ? v411 : v403;
                v413 = v411 >= 0.0 ? v412 : 0.0;
                v414 = v406.f32[0] * v410;
                v415 = (float)(v406.f32[0] * v410) <= v405 ? v406.f32[0] * v410 : v405;
                v416 = v414 >= 0.0 ? v415 : 0.0;
                if ((unint64_t)v388 >= *(_QWORD *)&v702[16])
                  break;
                *v388 = v413;
                v388[1] = v416;
                v388 += 2;
                *(_QWORD *)&v702[8] = v388;
                v386 = (float32x2_t *)((char *)v386 + 12);
                if (v386 == v387)
                  goto LABEL_612;
              }
              v417 = *(float **)v702;
              v418 = (char *)v388 - *(_QWORD *)v702;
              v419 = ((uint64_t)v388 - *(_QWORD *)v702) >> 3;
              v420 = v419 + 1;
              if ((unint64_t)(v419 + 1) >> 61)
              {
                v720[5] = v636;
                v720[4] = v649;
                v720[3] = v642;
                sub_207CA420C();
              }
              v421 = *(_QWORD *)&v702[16] - *(_QWORD *)v702;
              if ((uint64_t)(*(_QWORD *)&v702[16] - *(_QWORD *)v702) >> 2 > v420)
                v420 = v421 >> 2;
              v422 = (unint64_t)v421 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v420;
              if (!v422)
                break;
              if (v422 >> 61)
              {
                v720[5] = v636;
                v720[4] = v649;
                v720[3] = v642;
                sub_207CA3AB8();
              }
              v423 = operator new(8 * v422);
              v424 = (float *)&v423[8 * v419];
              v425 = &v423[8 * v422];
              *v424 = v413;
              v424[1] = v416;
              v426 = (uint64_t)(v424 + 2);
              v427 = (char *)((char *)v388 - (char *)v417);
              if (v388 == v417)
                goto LABEL_599;
LABEL_592:
              v428 = (unint64_t)(v427 - 8);
              if (v428 < 0x168)
              {
                v429 = v388;
                goto LABEL_594;
              }
              v431 = ((char *)(v388 - 2) - (char *)v417) & 0xFFFFFFFFFFFFFFF8;
              if (&v418[(_QWORD)v423 - 8 - v431] > &v418[(_QWORD)v423 - 8])
              {
                v429 = v388;
                do
                {
LABEL_594:
                  v430 = *((_QWORD *)v429 - 1);
                  v429 -= 2;
                  *((_QWORD *)v424 - 1) = v430;
                  v424 -= 2;
                }
                while (v429 != v417);
                goto LABEL_595;
              }
              if ((float *)((char *)v388 - v431 - 8) > v388 - 2)
              {
                v429 = v388;
                goto LABEL_594;
              }
              if ((unint64_t)((char *)v388 - v423 - (_QWORD)v418) < 0x20)
              {
                v429 = v388;
                goto LABEL_594;
              }
              v432 = (v428 >> 3) + 1;
              v433 = 8 * (v432 & 0x3FFFFFFFFFFFFFFCLL);
              v429 = &v388[v433 / 0xFFFFFFFFFFFFFFFCLL];
              v424 = (float *)((char *)v424 - v433);
              v434 = (float32x4_t *)&v418[(_QWORD)v423 - 16];
              v435 = (float32x4_t *)(v388 - 4);
              v436 = v432 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v406 = v435[-1];
                v437 = *v435;
                v434[-1] = v406;
                *v434 = v437;
                v434 -= 2;
                v435 -= 2;
                v436 -= 4;
              }
              while (v436);
              if (v432 != (v432 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_594;
LABEL_595:
              v388 = *(float **)v702;
              *(_QWORD *)v702 = v424;
              *(_QWORD *)&v702[8] = v426;
              *(_QWORD *)&v702[16] = v425;
              if (v388)
                goto LABEL_600;
              v388 = (float *)v426;
              *(_QWORD *)&v702[8] = v426;
              v386 = (float32x2_t *)((char *)v386 + 12);
              if (v386 == v387)
                goto LABEL_612;
            }
            v423 = 0;
            v424 = (float *)(8 * v419);
            v425 = 0;
            *v424 = v413;
            v424[1] = v416;
            v426 = 8 * v419 + 8;
            v427 = (char *)((char *)v388 - (char *)v417);
            if (v388 != v417)
              goto LABEL_592;
LABEL_599:
            *(_QWORD *)v702 = v424;
            *(_QWORD *)&v702[8] = v426;
            *(_QWORD *)&v702[16] = v425;
LABEL_600:
            operator delete(v388);
            v388 = (float *)v426;
            *(_QWORD *)&v702[8] = v426;
            v386 = (float32x2_t *)((char *)v386 + 12);
          }
          while (v386 != v387);
LABEL_612:
          v438 = *(float32x2_t **)v702;
          if (!*(_QWORD *)v702)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              v720[5] = v636;
              v720[4] = v649;
              v720[3] = v642;
              abort();
            }
            v438 = 0;
          }
LABEL_616:
          sub_207CF3C50(((char *)v388 - (char *)v438) >> 3, v438, (uint64_t)v702);
          v440 = *(_BYTE **)v702;
          v441 = *(_BYTE **)&v702[8];
          LODWORD(v709) = 0;
          *(_QWORD *)&v712 = 0;
          __p[1] = 0;
          __p[0] = 0;
          v442 = *(float *)(v650 + 588);
          v443 = *(_QWORD *)(v650 + 544);
          memset(v702, 0, 24);
          v444 = v441 - v440;
          if (v441 != v440)
          {
            if (v444 < 0)
            {
              v720[5] = v636;
              v720[4] = v649;
              v720[3] = v642;
              sub_207CA420C();
            }
            v445 = (char *)operator new(v441 - v440);
            *(_QWORD *)v702 = v445;
            *(_QWORD *)&v702[8] = v445;
            *(_QWORD *)&v702[16] = &v445[8 * (v444 >> 3)];
            v446 = v444 & 0xFFFFFFFFFFFFFFF8;
            memcpy(v445, v440, v446);
            *(_QWORD *)&v702[8] = &v445[v446];
          }
          v702[24] = 1;
          sub_207D5EE94((uint64_t *)v691, (uint64_t)v702, &v712, (float *)__p, (float *)&v709, *(unsigned __int8 *)(v650 + 592), v442, (float)v443, v439);
          if (v702[24] && *(_QWORD *)v702)
          {
            *(_QWORD *)&v702[8] = *(_QWORD *)v702;
            operator delete(*(void **)v702);
          }
          if (v649 < (void **)v636)
          {
            *v649 = __p[0];
            v649[1] = __p[1];
            v447 = v649 + 2;
            v448 = v642;
            goto LABEL_637;
          }
          v449 = (char *)v649 - (char *)v642;
          v450 = ((char *)v649 - (char *)v642) >> 4;
          v451 = v450 + 1;
          if ((unint64_t)(v450 + 1) >> 60)
          {
            v720[5] = v636;
            v720[4] = v649;
            v720[3] = v642;
            sub_207CA420C();
          }
          if ((v636 - (char *)v642) >> 3 > v451)
            v451 = (v636 - (char *)v642) >> 3;
          if ((unint64_t)(v636 - (char *)v642) >= 0x7FFFFFFFFFFFFFF0)
            v452 = 0xFFFFFFFFFFFFFFFLL;
          else
            v452 = v451;
          if (v452 >> 60)
            goto LABEL_859;
          v453 = (char *)operator new(16 * v452);
          v454 = &v453[16 * v450];
          *(_OWORD *)v454 = *(_OWORD *)__p;
          v447 = (void **)(v454 + 16);
          if (v649 != v642)
          {
            v455 = (char *)v649 - (char *)v642 - 16;
            if (v455 >= 0x3F0)
            {
              v469 = v649 - 2;
              v470 = (char *)(v649 - 2) - (char *)v642;
              v471 = v470 & 0xFFFFFFFFFFFFFFF0;
              if (&v453[v449 - 16 - (v470 & 0xFFFFFFFFFFFFFFF0)] <= &v453[v449 - 16]
                && &v453[v449 - 8 - v471] <= &v453[v449 - 8]
                && (void **)((char *)v469 - v471) <= v469)
              {
                v472 = v649 - 1;
                if ((void **)((char *)v649 - v471 - 8) > v649 - 1)
                {
                  v456 = v649;
                  v448 = (void **)&v453[16 * v450];
                  goto LABEL_634;
                }
                v473 = v470 & 0xFFFFFFFFFFFFFFF0;
                v474 = (unint64_t)&v453[v449 - v473 - 16];
                v475 = &v453[v449 - 8];
                v476 = (unint64_t)&v453[v449 - v473 - 8];
                v477 = (unint64_t)v469 - v473;
                v478 = (unint64_t)v472 - v473;
                v480 = v474 < (unint64_t)v472 && v477 < (unint64_t)v475;
                v482 = v474 < (unint64_t)v649 && v478 < (unint64_t)v475;
                v484 = v476 < (unint64_t)v472 && v477 < (unint64_t)v454;
                v486 = v476 < (unint64_t)v649 && v478 < (unint64_t)v454;
                v487 = v476 >= (unint64_t)v475 || v474 >= (unint64_t)v454;
                if (v487 && !v480 && !v482 && !v484 && !v486)
                {
                  v488 = (v455 >> 4) + 1;
                  v489 = 16 * (v488 & 0x1FFFFFFFFFFFFFFCLL);
                  v456 = &v649[v489 / 0xFFFFFFFFFFFFFFF8];
                  v448 = (void **)&v454[-v489];
                  v490 = (const double *)(v649 - 4);
                  v491 = (double *)(v454 - 32);
                  v492 = v488 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v723 = vld2q_f64(v490);
                    v493 = v490 - 4;
                    v724 = vld2q_f64(v493);
                    vst2q_f64(v491, v723);
                    v494 = v491 - 4;
                    vst2q_f64(v494, v724);
                    v491 -= 8;
                    v490 -= 8;
                    v492 -= 4;
                  }
                  while (v492);
                  if (v488 == (v488 & 0x1FFFFFFFFFFFFFFCLL))
                  {
LABEL_635:
                    v636 = &v453[16 * v452];
                    if (v642)
                      goto LABEL_636;
                    goto LABEL_637;
                  }
                  do
                  {
LABEL_634:
                    v457 = *(v456 - 2);
                    v456 -= 2;
                    *(v448 - 2) = v457;
                    v448 -= 2;
                    v448[1] = v456[1];
                  }
                  while (v456 != v642);
                  goto LABEL_635;
                }
              }
            }
            v456 = v649;
            v448 = (void **)&v453[16 * v450];
            goto LABEL_634;
          }
          v448 = (void **)&v453[16 * v450];
          v636 = &v453[16 * v452];
          if (v642)
LABEL_636:
            operator delete(v642);
LABEL_637:
          v649 = v447;
          v458 = v645;
          v642 = v448;
          if (v645 < v634)
          {
            *(_DWORD *)v645 = (_DWORD)v709;
            v645 += 4;
            v720[1] = v458 + 4;
            if (v440)
              goto LABEL_639;
            goto LABEL_640;
          }
          v459 = v645 - v264;
          v460 = (v645 - v264) >> 2;
          v461 = v460 + 1;
          if ((unint64_t)(v460 + 1) >> 62)
          {
            v720[5] = v636;
            v720[4] = v649;
            v720[3] = v448;
            sub_207D0CD58();
          }
          if ((v634 - v264) >> 1 > v461)
            v461 = (v634 - v264) >> 1;
          if ((unint64_t)(v634 - v264) >= 0x7FFFFFFFFFFFFFFCLL)
            v462 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v462 = v461;
          if (v462)
          {
            if (!(v462 >> 62))
            {
              v463 = operator new(4 * v462);
              goto LABEL_652;
            }
LABEL_859:
            v720[5] = v636;
            v720[4] = v649;
            v720[3] = v642;
            sub_207CA3AB8();
          }
          v463 = 0;
LABEL_652:
          v464 = &v463[4 * v460];
          *(_DWORD *)v464 = (_DWORD)v709;
          v465 = v464 + 4;
          if (v645 != v264)
          {
            v466 = v645 - v264 - 4;
            if (v466 < 0xBC)
            {
              v467 = v645;
              goto LABEL_655;
            }
            v495 = (v645 - 4 - v264) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v463[v459 - 4 - v495] > &v463[v459 - 4])
            {
              v467 = v645;
              goto LABEL_655;
            }
            if (&v645[-v495 - 4] > v645 - 4)
            {
              v467 = v645;
              goto LABEL_655;
            }
            if ((unint64_t)(v264 - v463) < 0x20)
            {
              v467 = v645;
              goto LABEL_655;
            }
            v496 = (v466 >> 2) + 1;
            v497 = 4 * (v496 & 0x7FFFFFFFFFFFFFF8);
            v467 = &v645[-v497];
            v464 -= v497;
            v498 = &v463[v459 - 16];
            v499 = v645 - 16;
            v500 = v496 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v501 = *(_OWORD *)v499;
              *(v498 - 1) = *((_OWORD *)v499 - 1);
              *v498 = v501;
              v498 -= 2;
              v499 -= 32;
              v500 -= 8;
            }
            while (v500);
            if (v496 != (v496 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_655:
                v468 = *((_DWORD *)v467 - 1);
                v467 -= 4;
                *((_DWORD *)v464 - 1) = v468;
                v464 -= 4;
              }
              while (v467 != v264);
            }
          }
          v720[0] = v464;
          v634 = &v463[4 * v462];
          v720[2] = v634;
          if (v264)
            operator delete(v264);
          v264 = v464;
          v645 = v465;
          v720[1] = v465;
          if (v440)
LABEL_639:
            operator delete(v440);
LABEL_640:
          if (v438)
            operator delete(v438);
          if (++v653 == a9)
          {
            v720[5] = v636;
            v720[4] = v649;
            v720[3] = v642;
LABEL_715:
            if (v620)
              operator delete(v620);
            kdebug_trace();
            v502 = (void *)*a14;
            if (*a14)
            {
              a14[1] = v502;
              operator delete(v502);
              *a14 = 0;
              a14[1] = 0;
              a14[2] = 0;
            }
            *(_OWORD *)a14 = *(_OWORD *)v720;
            a14[2] = v720[2];
            memset(v720, 0, 24);
            v503 = (void *)a14[3];
            if (v503)
            {
              a14[4] = v503;
              operator delete(v503);
              a14[3] = 0;
              a14[4] = 0;
              a14[5] = 0;
              v503 = v720[0];
            }
            *(_OWORD *)(a14 + 3) = *(_OWORD *)&v720[3];
            a14[5] = v720[5];
            memset(&v720[3], 0, 24);
            if (v503)
            {
              v720[1] = v503;
              operator delete(v503);
            }
            goto LABEL_848;
          }
        }
      }
      v165 = *v163;
      v166 = *((_DWORD *)v163 + 2);
      v168 = v165 != 0x7370614D74616548 || v166 != 1701734732;
      if (a9 != 2 || v168)
        goto LABEL_848;
      v169 = 0;
      v170 = 0;
      v171 = *(_QWORD *)(a2 + 432);
      v691[1] = 0;
      v691[0] = 0;
      v692.i64[0] = 0;
      v172 = *(unsigned int *)(a2 + 360);
      v173 = *(_QWORD *)(a2 + 352);
      *(_QWORD *)&v717 = 0;
      v677 = (_DWORD)a10 << (v171 < 2);
      if (v172)
        v174 = (_DWORD)v173 == 0;
      else
        v174 = 1;
      if (v174)
        v175 = 0;
      else
        v175 = v172 | (v173 << 32);
      if (v174)
        v176 = 0;
      else
        v176 = 3;
      __p[0] = 0;
      __p[1] = 0;
      if (v174)
        v177 = 0;
      else
        v177 = HIDWORD(v175) * v175;
      if (HIDWORD(v175))
        v178 = v175 << 32;
      else
        v178 = 0;
      v671 = v178 | ((_DWORD)v175 != 0);
      v179 = v176;
      v180 = v177;
      v684 = v177 * v176;
      do
      {
        v184 = v168;
        sub_207DC9E60(a3, (uint64_t)v702);
        v185 = *(_DWORD *)&v702[40];
        v186 = *(_DWORD *)&v702[44];
        v187 = *(_QWORD *)v702;
        v188 = HIDWORD(*(_QWORD *)&v702[12]);
        if (*(_DWORD *)&v702[12])
          v189 = v188 == 0;
        else
          v189 = 1;
        if (v189)
          LODWORD(v188) = 0;
        if ((_DWORD)v188 * *(_DWORD *)&v702[36] == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        if (v684 == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v190 = v187 + 2 * (3 * v170 * v185 + v186 * v677);
        if ((unint64_t)v169 < (unint64_t)v717)
        {
          *v169 = v190;
          v169[1] = v175;
          *((_DWORD *)v169 + 4) = v179;
          *(_QWORD *)((char *)v169 + 20) = v671;
          *((_DWORD *)v169 + 7) = v180;
          v169 += 4;
          goto LABEL_289;
        }
        v191 = __p[0];
        v192 = ((char *)v169 - (char *)__p[0]) >> 5;
        v193 = v192 + 1;
        if ((unint64_t)(v192 + 1) >> 59)
          sub_207CA420C();
        v194 = v717 - (unint64_t)__p[0];
        if ((uint64_t)(v717 - (unint64_t)__p[0]) >> 4 > v193)
          v193 = v194 >> 4;
        if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFE0)
          v195 = 0x7FFFFFFFFFFFFFFLL;
        else
          v195 = v193;
        if (v195)
        {
          if (v195 >> 59)
            goto LABEL_858;
          v196 = (char *)operator new(32 * v195);
        }
        else
        {
          v196 = 0;
        }
        v197 = &v196[32 * v192];
        *(_QWORD *)v197 = v190;
        *((_QWORD *)v197 + 1) = v175;
        *((_DWORD *)v197 + 4) = v179;
        *(_QWORD *)(v197 + 20) = v671;
        *((_DWORD *)v197 + 7) = v180;
        if (v169 == v191)
        {
          v191 = v169;
          v169 = v197 + 32;
          __p[0] = &v196[32 * v192];
          __p[1] = v197 + 32;
          *(_QWORD *)&v717 = &v196[32 * v195];
          if (v191)
            goto LABEL_288;
        }
        else
        {
          v198 = &v196[32 * v192];
          do
          {
            v199 = *((_OWORD *)v169 - 1);
            *((_OWORD *)v198 - 2) = *((_OWORD *)v169 - 2);
            *((_OWORD *)v198 - 1) = v199;
            v198 -= 32;
            v169 -= 4;
          }
          while (v169 != v191);
          v169 = v197 + 32;
          __p[0] = v198;
          __p[1] = v197 + 32;
          *(_QWORD *)&v717 = &v196[32 * v195];
          if (v191)
LABEL_288:
            operator delete(v191);
        }
LABEL_289:
        __p[1] = v169;
        v200 = *a5 + 328 * v170 + 92;
        v201 = v691[1];
        if (v691[1] < (void *)v692.i64[0])
        {
          v181 = *(_OWORD *)v200;
          v182 = *(_OWORD *)(*a5 + 328 * v170 + 108);
          *((_DWORD *)v691[1] + 8) = *(_DWORD *)(*a5 + 328 * v170 + 124);
          *v201 = v181;
          v201[1] = v182;
          v183 = (char *)v201 + 36;
        }
        else
        {
          v202 = v691[0];
          v203 = 0x8E38E38E38E38E39 * (((char *)v691[1] - (char *)v691[0]) >> 2);
          v204 = v203 + 1;
          if (v203 + 1 > 0x71C71C71C71C71CLL)
            sub_207CA420C();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v692.i64[0] - (unint64_t)v691[0]) >> 2) > v204)
            v204 = 0x1C71C71C71C71C72 * ((uint64_t)(v692.i64[0] - (unint64_t)v691[0]) >> 2);
          if (0x8E38E38E38E38E39 * ((uint64_t)(v692.i64[0] - (unint64_t)v691[0]) >> 2) >= 0x38E38E38E38E38ELL)
            v205 = 0x71C71C71C71C71CLL;
          else
            v205 = v204;
          if (v205)
          {
            if (v205 > 0x71C71C71C71C71CLL)
LABEL_858:
              sub_207CA3AB8();
            v206 = (char *)operator new(36 * v205);
          }
          else
          {
            v206 = 0;
          }
          v207 = &v206[4 * (((char *)v691[1] - (char *)v691[0]) >> 2)];
          v208 = *(_OWORD *)v200;
          v209 = *(_OWORD *)(v200 + 16);
          *((_DWORD *)v207 + 8) = *(_DWORD *)(v200 + 32);
          *(_OWORD *)v207 = v208;
          *((_OWORD *)v207 + 1) = v209;
          v210 = &v206[36 * v203];
          if (v201 != v202)
          {
            do
            {
              v211 = *(_OWORD *)((char *)v201 - 36);
              v212 = *(_OWORD *)((char *)v201 - 20);
              *((_DWORD *)v210 - 1) = *((_DWORD *)v201 - 1);
              *(_OWORD *)(v210 - 20) = v212;
              *(_OWORD *)(v210 - 36) = v211;
              v210 -= 36;
              v201 = (_OWORD *)((char *)v201 - 36);
            }
            while (v201 != v202);
            v201 = v202;
          }
          v183 = v207 + 36;
          v691[0] = v210;
          v691[1] = v207 + 36;
          v692.i64[0] = (uint64_t)&v206[36 * v205];
          if (v201)
            operator delete(v201);
        }
        v691[1] = v183;
        LOBYTE(v168) = 1;
        v170 = 1;
      }
      while (!v184);
      sub_207D75C88();
      v265 = *(float *)v702;
      a16[8].i32[0] = *(_DWORD *)v702;
      v266 = *(_OWORD *)&v702[20];
      *(_OWORD *)a16->f32 = *(_OWORD *)&v702[4];
      *(_OWORD *)a16[2].f32 = v266;
      v267 = *(_OWORD *)&v702[52];
      *(_OWORD *)a16[4].f32 = *(_OWORD *)&v702[36];
      *(_OWORD *)a16[6].f32 = v267;
      v268 = *(_OWORD *)a16[2].f32;
      *(_OWORD *)v720 = *(_OWORD *)a16->f32;
      *(_OWORD *)&v720[2] = v268;
      v269 = *(_OWORD *)a16[6].f32;
      *(_OWORD *)&v720[4] = *(_OWORD *)a16[4].f32;
      *(_OWORD *)&v720[6] = v269;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v270 = v691[0];
      if (v691[0])
      {
        v691[1] = v691[0];
        goto LABEL_529;
      }
LABEL_530:
      v349 = a16;
      a16[8].f32[0] = v265;
      v350 = *(_OWORD *)&v720[2];
      *(_OWORD *)a16->f32 = *(_OWORD *)v720;
      *(_OWORD *)a16[2].f32 = v350;
      v351 = *(_OWORD *)&v720[4];
      v352 = *(_OWORD *)&v720[6];
LABEL_847:
      *(_OWORD *)v349[4].f32 = v351;
      *(_OWORD *)v349[6].f32 = v352;
LABEL_848:
      *(_DWORD *)a1 = a16[8].i32[0];
      v617 = *(_OWORD *)a16[2].f32;
      *(_OWORD *)(a1 + 4) = *(_OWORD *)a16->f32;
      *(_OWORD *)(a1 + 20) = v617;
      v618 = *(_OWORD *)a16[6].f32;
      *(_OWORD *)(a1 + 36) = *(_OWORD *)a16[4].f32;
      *(_OWORD *)(a1 + 52) = v618;
      return kdebug_trace();
    case 0xEuLL:
      if (v23 >= 0)
        v213 = a4;
      else
        v213 = (uint64_t *)*a4;
      v214 = *v213;
      v215 = *(uint64_t *)((char *)v213 + 6);
      if (v214 != 0x6966697373616C43 || v215 != 0x6E6F697461636966)
        goto LABEL_848;
      sub_207DC9E60(a3, (uint64_t)v702);
      v217 = *(_DWORD *)&v702[44];
      v218 = *(_QWORD *)v702;
      if (*(_DWORD *)&v702[20])
        v219 = *(_DWORD *)&v702[12] == 0;
      else
        v219 = 1;
      if (v219 || HIDWORD(*(_QWORD *)&v702[12]) == 0)
        v221 = 0;
      else
        v221 = *(_DWORD *)&v702[20];
      if (v221 * *(_DWORD *)&v702[40] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      _H0 = *(_WORD *)(v218 + 2 * (v217 * v25));
      __asm { FCVT            S0, H0 }
      _S0 = 1.0 - _S0;
      __asm { FCVT            H0, S0 }
      goto LABEL_327;
    case 0xFuLL:
      if (v23 >= 0)
        v28 = a4;
      else
        v28 = (const void *)*a4;
      if (memcmp(v28, "ConfidenceScore", v24))
        goto LABEL_848;
      sub_207DC9E60(a3, (uint64_t)v702);
      v29 = *(_DWORD *)&v702[44];
      v30 = *(_QWORD *)v702;
      if (*(_DWORD *)&v702[20])
        _ZF = *(_DWORD *)&v702[12] == 0;
      else
        _ZF = 1;
      if (_ZF || HIDWORD(*(_QWORD *)&v702[12]) == 0)
        v33 = 0;
      else
        v33 = *(_DWORD *)&v702[20];
      if (v33 * *(_DWORD *)&v702[40] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v34 = a13;
      _H0 = *(_WORD *)(v30 + 2 * (v29 * v25));
      __asm { FCVT            S0, H0 }
      *a13 = _S0;
      if (*(_BYTE *)(v650 + 667) || *(_BYTE *)(v650 + 669) || *(_BYTE *)(v650 + 668))
        goto LABEL_848;
      _S0 = fminf(_S0 * 2.8, 1.0);
LABEL_56:
      *v34 = _S0;
      goto LABEL_848;
    case 0x12uLL:
      if (v23 >= 0)
        v50 = a4;
      else
        v50 = (uint64_t *)*a4;
      v51 = *v50;
      v52 = v50[1];
      v53 = *((unsigned __int16 *)v50 + 8);
      if (v51 != 0x7370614D74616548 || v52 != 0x73736572706D6F43 || v53 != 25701)
        goto LABEL_848;
      v56 = *(_QWORD *)(a2 + 432);
      v57 = *(void **)(a2 + 384);
      v58 = *(unsigned int *)(a2 + 360);
      v59 = *(unsigned int *)(a2 + 352);
      if (v57)
        v60 = 3;
      else
        v60 = 0;
      v682 = v60;
      v669 = *(void **)(a2 + 392);
      if (v669)
        v61 = 3;
      else
        v61 = 0;
      sub_207DC9E60(a3, (uint64_t)v702);
      v675 = a10 * a9;
      if (v56 <= 1)
        v62 = a10 * a9;
      else
        v62 = a10;
      v63 = *(_DWORD *)&v702[44];
      v64 = *(_QWORD *)v702;
      v65 = HIDWORD(*(_QWORD *)&v702[12]);
      if (*(_DWORD *)&v702[12])
        v66 = v65 == 0;
      else
        v66 = 1;
      if (v66)
        LODWORD(v65) = 0;
      if ((_DWORD)v65 * *(_DWORD *)&v702[36] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_874;
      }
      v67 = v61 + v682;
      v68 = v58 | (v59 << 32);
      v69 = !v58 || v59 == 0;
      v70 = v69 || v67 == 0;
      v71 = v70 ? 0 : v58 | (v59 << 32);
      v72 = HIDWORD(v71);
      if (v70)
      {
        v67 = 0;
        v73 = 0;
      }
      else
      {
        v73 = HIDWORD(v71) * v71;
      }
      v74 = (_DWORD)v71 != 0;
      v75 = v71 << 32;
      v76 = (_DWORD)v72 ? v75 : 0;
      if (v73 * v67 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_874;
      }
      v77 = (char *)(v64 + 2 * (v63 * v62));
      v78 = HIDWORD(v68);
      if (!v57)
        goto LABEL_117;
      if (v58)
        v79 = v78 == 0;
      else
        v79 = 1;
      if (v79)
        v80 = 0;
      else
        v80 = (void *)v68;
      if (v79)
        v81 = 0;
      else
        v81 = 3;
      v720[0] = v77;
      v720[1] = v80;
      *(void **)((char *)&v720[2] + 4) = (void *)(v76 | v74);
      LODWORD(v720[2]) = v81;
      HIDWORD(v720[3]) = v73;
      if (v73 * v81 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        goto LABEL_874;
      }
      v82 = *a6;
      v691[0] = v57;
      v691[1] = v82;
      if (!v82
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_874;
      }
      sub_207D78470((uint64_t *)v720, (unint64_t *)v691, *a5 + 328 * v675 + 92, (uint64_t)v702, *(float *)(v650 + 584), *(float *)(v650 + 616), *(float *)(v650 + 620));
      v83 = *(float *)v702;
      a16[8].i32[0] = *(_DWORD *)v702;
      v84 = *(_OWORD *)&v702[20];
      *(_OWORD *)a16->f32 = *(_OWORD *)&v702[4];
      *(_OWORD *)a16[2].f32 = v84;
      v85 = *(_OWORD *)&v702[52];
      *(_OWORD *)a16[4].f32 = *(_OWORD *)&v702[36];
      *(_OWORD *)a16[6].f32 = v85;
      if (v83 > 0.68 || !v669)
        goto LABEL_394;
LABEL_117:
      if (v58)
        v86 = v78 == 0;
      else
        v86 = 1;
      v87 = v86 || v61 == 0;
      if (v87)
        v88 = 0;
      else
        v88 = (void *)v68;
      if (v87)
        v89 = 0;
      else
        v89 = v61;
      v720[0] = &v77[2 * v73 * v682];
      v720[1] = v88;
      *(void **)((char *)&v720[2] + 4) = (void *)(v76 | v74);
      LODWORD(v720[2]) = v89;
      HIDWORD(v720[3]) = v73;
      if (v73 * v89 == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974)|| (v90 = *a7, v691[0] = v669, v691[1] = v90, v669)&& !v90&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_874:
        abort();
      }
      sub_207D78470((uint64_t *)v720, (unint64_t *)v691, *a5 + 328 * v675 + 92, (uint64_t)v702, 0.7, 0.0, 0.0);
      goto LABEL_391;
    case 0x18uLL:
      if (v23 >= 0)
        v91 = a4;
      else
        v91 = (uint64_t *)*a4;
      v92 = *v91;
      v93 = v91[1];
      v94 = v91[2];
      if (v92 != 0x756F72676B636142 || v93 != 0x697373616C43646ELL || v94 != 0x6E6F697461636966)
        goto LABEL_848;
      sub_207DC9E60(a3, (uint64_t)v702);
      v97 = *(_DWORD *)&v702[44];
      v98 = *(_QWORD *)v702;
      if (*(_DWORD *)&v702[20])
        v99 = *(_DWORD *)&v702[12] == 0;
      else
        v99 = 1;
      if (v99 || HIDWORD(*(_QWORD *)&v702[12]) == 0)
        v101 = 0;
      else
        v101 = *(_DWORD *)&v702[20];
      if (v101 * *(_DWORD *)&v702[40] == -1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      _H0 = *(_WORD *)(v98 + 2 * (v97 * v25));
LABEL_327:
      __asm { FCVT            S0, H0 }
      *a12 = _S0;
      goto LABEL_848;
    default:
      goto LABEL_848;
  }
}

void sub_207DAF978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  void *v64;
  void *v66;
  void *v67;

  if (v63)
  {
    operator delete(v63);
    v66 = (void *)STACK[0x250];
    if (!STACK[0x250])
    {
LABEL_6:
      v64 = (void *)STACK[0x268];
      if (!STACK[0x268])
      {
LABEL_7:
        sub_207D80E10((uint64_t)&STACK[0x280]);
        v67 = (void *)STACK[0x328];
        if (!STACK[0x328])
        {
LABEL_13:
          sub_207CD822C((uint64_t)&a63);
          _Unwind_Resume(a1);
        }
LABEL_12:
        STACK[0x330] = (unint64_t)v67;
        operator delete(v67);
        goto LABEL_13;
      }
LABEL_11:
      STACK[0x270] = (unint64_t)v64;
      operator delete(v64);
      sub_207D80E10((uint64_t)&STACK[0x280]);
      v67 = (void *)STACK[0x328];
      if (!STACK[0x328])
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else
  {
    v66 = (void *)STACK[0x250];
    if (!STACK[0x250])
      goto LABEL_6;
  }
  STACK[0x258] = (unint64_t)v66;
  operator delete(v66);
  v64 = (void *)STACK[0x268];
  if (!STACK[0x268])
    goto LABEL_7;
  goto LABEL_11;
}

void sub_207DAFD24(uint64_t a1, unint64_t __val, uint64_t a3, _QWORD *a4, uint64_t **a5, unsigned __int8 a6, double a7)
{
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  void **v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  std::string::size_type v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  unsigned int v83;
  mach_timebase_info *v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::string *v130;
  uint64_t *v131;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v134;
  int v135;
  uint64_t *v136;
  std::string::size_type v137;
  size_t v138;
  int v139;
  int v140;
  const void *v141;
  size_t v142;
  size_t v143;
  int v144;
  _OWORD *v145;
  int v146;
  void *v147;
  void **v148;
  uint64_t v149;
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  __int16 v158;
  unint64_t v159;
  void *v160;
  void **v161;
  uint64_t v162;
  _QWORD *v163;
  __int128 v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  int v170;
  __int16 v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  __int128 v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  __int128 v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  void *v237;
  void **v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  unint64_t v253;
  _BYTE *v254;
  char *v255;
  int64_t v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _OWORD *v264;
  char *v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  unsigned __int8 v269;
  char *v270;
  void *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  mach_timebase_info v275;
  mach_timebase_info v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  _QWORD *v284;
  unint64_t *v285;
  unint64_t *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325[4];
  int v326;
  void *v327[2];
  int64_t v328;
  void *v329[2];
  int64_t v330;
  void *v331;
  _BYTE v332[17];
  uint64_t (**v333)();
  __int128 v334;
  std::string v335;
  std::string __p;
  _BYTE v337[54];
  void *v338;
  std::string v339;
  __int128 v340;
  _QWORD v341[2];
  _BYTE v342[24];
  mach_timebase_info info[2];
  __int128 v344;
  int v345;
  _BYTE v346[54];
  uint64_t (**v347)();
  uint64_t v348;
  std::__shared_weak_count *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  int v353;
  __int16 v354;
  char v355;
  char v356;
  char v357;
  char v358;
  uint64_t v359;

  v359 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 24))
  {
    std::to_string((std::string *)v337, __val);
    v12 = *(char *)(a1 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)a1;
    else
      v13 = *(const std::string::value_type **)a1;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a1 + 23);
    else
      v14 = *(_QWORD *)(a1 + 8);
    v15 = std::string::insert((std::string *)v337, 0, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)&v346[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v346 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append((std::string *)v346, ".", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v330 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)v329 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((v346[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v346);
      if ((v337[23] & 0x80000000) == 0)
      {
LABEL_10:
        v19 = a4[1] - *a4;
        if (!v19)
          goto LABEL_486;
LABEL_14:
        v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
        v21 = (_QWORD *)(a3 + 8);
        v22 = 0;
        v322 = a6;
        v319 = v21;
        v320 = v20;
        while (1)
        {
          std::to_string((std::string *)v346, v22);
          if (v330 >= 0)
            v23 = v329;
          else
            v23 = (void **)v329[0];
          if (v330 >= 0)
            v24 = HIBYTE(v330);
          else
            v24 = (std::string::size_type)v329[1];
          v25 = std::string::insert((std::string *)v346, 0, (const std::string::value_type *)v23, v24);
          v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v328 = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)v327 = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          if ((v346[23] & 0x80000000) != 0)
            operator delete(*(void **)v346);
          v27 = *a4;
          v28 = *a4 + 24 * v22;
          v29 = sub_20815A764(v28);
          if ((sub_207DB2844(v29) & 0xFF00000000) != 0)
          {
            sub_207CF7E1C();
            sub_207CF7B20();
            if (!os_variant_has_internal_diagnostics())
              goto LABEL_188;
            *(_QWORD *)v346 = "cv3d.odt.";
            *(_QWORD *)&v346[8] = 9;
            v30 = (void *)HIBYTE(v328);
            v31 = v327;
            if (v328 < 0)
            {
              v31 = (void **)v327[0];
              v30 = v327[1];
            }
            *(_QWORD *)&v346[16] = v31;
            *(_QWORD *)&v346[24] = v30;
            sub_207CAC8F4((uint64_t)v346, (uint64_t)&v346[32], 0, 0, &v335);
            sub_207F0D4B0();
            v32 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
            {
              *(_OWORD *)&info[0].numer = 0u;
              v344 = 0u;
              v345 = 733237316;
              kdebug_trace();
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
                goto LABEL_107;
              v333 = (uint64_t (**)())(uint64_t)(a7 * 1000000000.0);
              *(_QWORD *)&v334 = v317 & 0xFFFFFFFFFFFFFF00 | 2;
              v317 = v334;
              v33 = sub_207F0D4B0();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
              {
                v35 = *(_QWORD *)(v28 + 8);
                v34 = *(_QWORD *)(v28 + 16);
                v331 = &off_24C08A5D8;
                *(_QWORD *)v332 = v35;
                *(_QWORD *)&v332[8] = v34;
                if (v34)
                {
                  v36 = (unint64_t *)(v34 + 8);
                  do
                    v37 = __ldxr(v36);
                  while (__stxr(v37 + 1, v36));
                }
                sub_20814D798((uint64_t)&v331, (uint64_t)v346);
                *(_QWORD *)v337 = &off_24C074C28;
                *(_OWORD *)&v337[8] = *(_OWORD *)&v346[8];
                *(_OWORD *)&v337[24] = *(_OWORD *)&v346[24];
                *(_OWORD *)&v337[38] = *(_OWORD *)&v346[38];
                v38 = *(std::__shared_weak_count **)&v332[8];
                v331 = &off_24C08A5D8;
                if (*(_QWORD *)&v332[8])
                {
                  v39 = (unint64_t *)(*(_QWORD *)&v332[8] + 8);
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                v325[0] = (void *)0x6567616D69;
                v325[1] = *(void **)v342;
                *(void **)((char *)&v325[1] + 7) = *(void **)&v342[7];
                *(_WORD *)((char *)&v325[2] + 7) = 261;
                *(_QWORD *)v342 = 0;
                *(_QWORD *)&v342[7] = 0;
                sub_207DC7894(&__p, (uint64_t)v337, (__int128 *)v325, (__int128 *)&v333);
                if (LOBYTE(v325[3]) && SHIBYTE(v325[2]) < 0)
                  operator delete(v325[0]);
                *(_QWORD *)v337 = &off_24C074C28;
                v41 = *(std::__shared_weak_count **)&v337[16];
                if (*(_QWORD *)&v337[16])
                {
                  v42 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
                  do
                    v43 = __ldaxr(v42);
                  while (__stlxr(v43 - 1, v42));
                  if (!v43)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
                v44 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32);
                v45 = *v44;
                v46 = (std::__shared_weak_count *)v44[1];
                v21 = v319;
                v20 = v320;
                if (v46)
                {
                  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldxr(p_shared_owners);
                  while (__stxr(v48 + 1, p_shared_owners));
                }
                v49 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_QWORD *)v337 = &off_24C078D18;
                *(_OWORD *)&v337[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_QWORD *)v346 = v45;
                *(_QWORD *)&v346[8] = v46;
                if (v46)
                {
                  v50 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                }
                *(_QWORD *)&v346[16] = &off_24C078D18;
                *(_OWORD *)&v346[24] = v49;
                if (*((_QWORD *)&v49 + 1))
                {
                  v52 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
                  do
                    v53 = __ldxr(v52);
                  while (__stxr(v53 + 1, v52));
                }
                (*(void (**)(_QWORD *, _BYTE *))(*v33 + 16))(v33, v346);
                v54 = *(std::__shared_weak_count **)&v346[32];
                if (*(_QWORD *)&v346[32])
                {
                  v55 = (unint64_t *)(*(_QWORD *)&v346[32] + 8);
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                v57 = *(std::__shared_weak_count **)&v346[8];
                if (*(_QWORD *)&v346[8])
                {
                  v58 = (unint64_t *)(*(_QWORD *)&v346[8] + 8);
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                v60 = *(std::__shared_weak_count **)&v337[16];
                if (*(_QWORD *)&v337[16])
                {
                  v61 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
                if (v46)
                {
                  v63 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v65 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v66 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
              }
              else
              {
LABEL_107:
                v21 = v319;
                v20 = v320;
              }
              kdebug_trace();
            }
            else
            {
              v21 = v319;
              v20 = v320;
            }
            if ((SHIBYTE(v335.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_188;
            v86 = (void *)v335.__r_.__value_.__r.__words[0];
            goto LABEL_187;
          }
          if ((v29 & 0xFFFFFFEF) != 0x34323066)
            goto LABEL_188;
          sub_207CF7E1C();
          sub_207CF7B20();
          if (!os_variant_has_internal_diagnostics())
            goto LABEL_188;
          *(_QWORD *)v346 = "cv3d.odt.";
          *(_QWORD *)&v346[8] = 9;
          v68 = (void *)HIBYTE(v328);
          v69 = v327;
          if (v328 < 0)
          {
            v69 = (void **)v327[0];
            v68 = v327[1];
          }
          *(_QWORD *)&v346[16] = v69;
          *(_QWORD *)&v346[24] = v68;
          sub_207CAC8F4((uint64_t)v346, (uint64_t)&v346[32], 0, 0, &v339);
          sub_207F0D4B0();
          v70 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
          {
            v21 = v319;
            v20 = v320;
            goto LABEL_185;
          }
          memset(v325, 0, sizeof(v325));
          v326 = 733237316;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
          {
            *(_QWORD *)&v340 = (uint64_t)(a7 * 1000000000.0);
            *((_QWORD *)&v340 + 1) = v312 & 0xFFFFFFFFFFFFFF00 | 2;
            v312 = *((_QWORD *)&v340 + 1);
            v71 = sub_207F0D4B0();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70))
              break;
          }
          v21 = v319;
          v20 = v320;
LABEL_184:
          kdebug_trace();
LABEL_185:
          if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
          {
            v86 = (void *)v339.__r_.__value_.__r.__words[0];
LABEL_187:
            operator delete(v86);
          }
LABEL_188:
          std::to_string((std::string *)v346, v22);
          v130 = std::string::insert((std::string *)v346, 0, "image", 5uLL);
          __p = *v130;
          v130->__r_.__value_.__l.__size_ = 0;
          v130->__r_.__value_.__r.__words[2] = 0;
          v130->__r_.__value_.__r.__words[0] = 0;
          if ((v346[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v346);
            v131 = (uint64_t *)*v21;
            if (!*v21)
              goto LABEL_373;
          }
          else
          {
            v131 = (uint64_t *)*v21;
            if (!*v21)
              goto LABEL_373;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          v134 = v21;
          do
          {
            while (1)
            {
              v135 = *((char *)v131 + 55);
              v136 = v135 >= 0 ? v131 + 4 : (uint64_t *)v131[4];
              v137 = v135 >= 0 ? *((unsigned __int8 *)v131 + 55) : v131[5];
              v138 = size >= v137 ? v137 : size;
              v139 = memcmp(v136, p_p, v138);
              if (v139)
                break;
              if (v137 >= size)
                goto LABEL_213;
LABEL_199:
              v131 = (uint64_t *)v131[1];
              if (!v131)
                goto LABEL_214;
            }
            if (v139 < 0)
              goto LABEL_199;
LABEL_213:
            v134 = v131;
            v131 = (uint64_t *)*v131;
          }
          while (v131);
LABEL_214:
          if (v134 == v21)
            goto LABEL_373;
          v140 = *((char *)v134 + 55);
          if (v140 >= 0)
            v141 = v134 + 4;
          else
            v141 = (const void *)v134[4];
          if (v140 >= 0)
            v142 = *((unsigned __int8 *)v134 + 55);
          else
            v142 = v134[5];
          if (v142 >= size)
            v143 = size;
          else
            v143 = v142;
          v144 = memcmp(p_p, v141, v143);
          if (v144)
          {
            if (v144 < 0)
              goto LABEL_373;
          }
          else if (size < v142)
          {
            goto LABEL_373;
          }
          v145 = v134 + 7;
          v146 = *((_DWORD *)v134 + 44);
          if (v146 == 1)
          {
            sub_207CF7E1C();
            sub_207CF7B20();
            if (!os_variant_has_internal_diagnostics())
              goto LABEL_373;
            *(_QWORD *)v346 = "cv3d.odt.";
            *(_QWORD *)&v346[8] = 9;
            v160 = (void *)HIBYTE(v328);
            v161 = v327;
            if (v328 < 0)
            {
              v161 = (void **)v327[0];
              v160 = v327[1];
            }
            *(_QWORD *)&v346[16] = v161;
            *(_QWORD *)&v346[24] = v160;
            sub_207CAC8F4((uint64_t)v346, (uint64_t)&v346[32], 0, 0, &v335);
            sub_207F0D4B0();
            v162 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
            {
              *(_OWORD *)&info[0].numer = 0u;
              v344 = 0u;
              v345 = 733237316;
              kdebug_trace();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
              {
                v333 = (uint64_t (**)())(uint64_t)(a7 * 1000000000.0);
                *(_QWORD *)&v334 = v311 & 0xFFFFFFFFFFFFFF00 | 2;
                v311 = v334;
                v163 = sub_207F0D4B0();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
                {
                  if (*((_DWORD *)v134 + 44) != 1)
                    sub_207CA9F48();
                  v164 = *(_OWORD *)(v134 + 9);
                  *(_OWORD *)v346 = *v145;
                  *(_OWORD *)&v346[16] = v164;
                  *(_OWORD *)&v346[32] = *(_OWORD *)(v134 + 11);
                  *(_DWORD *)&v346[48] = *((_DWORD *)v134 + 26);
                  LOBYTE(v347) = 0;
                  v355 = 0;
                  if (*((_BYTE *)v134 + 168))
                  {
                    v347 = off_24C06E878;
                    v165 = v134[15];
                    v166 = (std::__shared_weak_count *)v134[16];
                    if (v166)
                    {
                      v167 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v168 = __ldxr(v167);
                      while (__stxr(v168 + 1, v167));
                      v169 = v134[19];
                      v170 = *((_DWORD *)v134 + 40);
                      v171 = *((_WORD *)v134 + 82);
                      do
                        v172 = __ldxr(v167);
                      while (__stxr(v172 + 1, v167));
                    }
                    else
                    {
                      v169 = v134[19];
                      v170 = *((_DWORD *)v134 + 40);
                      v171 = *((_WORD *)v134 + 82);
                    }
                    v348 = v165;
                    v349 = v166;
                    v350 = v134[17];
                    LODWORD(v351) = *((_DWORD *)v134 + 36);
                    v352 = v169;
                    v353 = v170;
                    v354 = v171;
                    if (v166)
                    {
                      v205 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v206 = __ldaxr(v205);
                      while (__stlxr(v206 - 1, v205));
                      if (!v206)
                      {
                        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                        std::__shared_weak_count::__release_weak(v166);
                      }
                    }
                    v355 = 1;
                  }
                  sub_20809E918((uint64_t)v346, 0, 0, (uint64_t)v337);
                  if (v355)
                  {
                    v207 = v349;
                    if (v349)
                    {
                      v208 = (unint64_t *)&v349->__shared_owners_;
                      do
                        v209 = __ldaxr(v208);
                      while (__stlxr(v209 - 1, v208));
                      if (!v209)
                      {
                        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                        std::__shared_weak_count::__release_weak(v207);
                      }
                    }
                  }
                  v325[0] = (void *)0x6863746170;
                  v325[1] = *(void **)v342;
                  *(void **)((char *)&v325[1] + 7) = *(void **)&v342[7];
                  *(_WORD *)((char *)&v325[2] + 7) = 261;
                  *(_QWORD *)v342 = 0;
                  *(_QWORD *)&v342[7] = 0;
                  sub_207DC73D8(&v331, (uint64_t)v337, (__int128 *)v325, (__int128 *)&v333);
                  if (LOBYTE(v325[3]) && SHIBYTE(v325[2]) < 0)
                    operator delete(v325[0]);
                  v210 = *(std::__shared_weak_count **)&v337[16];
                  if (*(_QWORD *)&v337[16])
                  {
                    v211 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
                    do
                      v212 = __ldaxr(v211);
                    while (__stlxr(v212 - 1, v211));
                    if (!v212)
                    {
                      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                      std::__shared_weak_count::__release_weak(v210);
                    }
                  }
                  v213 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 56))(v162);
                  v214 = *v213;
                  v215 = (std::__shared_weak_count *)v213[1];
                  if (v215)
                  {
                    v216 = (unint64_t *)&v215->__shared_owners_;
                    do
                      v217 = __ldxr(v216);
                    while (__stxr(v217 + 1, v216));
                  }
                  v218 = *(_OWORD *)v332;
                  *(_QWORD *)v337 = &off_24C078D18;
                  *(_OWORD *)&v337[8] = *(_OWORD *)v332;
                  *(_OWORD *)v332 = 0uLL;
                  *(_QWORD *)v346 = v214;
                  *(_QWORD *)&v346[8] = v215;
                  if (v215)
                  {
                    v219 = (unint64_t *)&v215->__shared_owners_;
                    do
                      v220 = __ldxr(v219);
                    while (__stxr(v220 + 1, v219));
                  }
                  *(_QWORD *)&v346[16] = &off_24C078D18;
                  *(_OWORD *)&v346[24] = v218;
                  if (*((_QWORD *)&v218 + 1))
                  {
                    v221 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
                    do
                      v222 = __ldxr(v221);
                    while (__stxr(v222 + 1, v221));
                  }
                  (*(void (**)(_QWORD *, _BYTE *))(*v163 + 16))(v163, v346);
                  v223 = *(std::__shared_weak_count **)&v346[32];
                  if (*(_QWORD *)&v346[32])
                  {
                    v224 = (unint64_t *)(*(_QWORD *)&v346[32] + 8);
                    do
                      v225 = __ldaxr(v224);
                    while (__stlxr(v225 - 1, v224));
                    if (!v225)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  v226 = *(std::__shared_weak_count **)&v346[8];
                  if (*(_QWORD *)&v346[8])
                  {
                    v227 = (unint64_t *)(*(_QWORD *)&v346[8] + 8);
                    do
                      v228 = __ldaxr(v227);
                    while (__stlxr(v228 - 1, v227));
                    if (!v228)
                    {
                      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                      std::__shared_weak_count::__release_weak(v226);
                    }
                  }
                  v229 = *(std::__shared_weak_count **)&v337[16];
                  if (*(_QWORD *)&v337[16])
                  {
                    v230 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
                    do
                      v231 = __ldaxr(v230);
                    while (__stlxr(v231 - 1, v230));
                    if (!v231)
                    {
                      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                      std::__shared_weak_count::__release_weak(v229);
                    }
                  }
                  if (v215)
                  {
                    v232 = (unint64_t *)&v215->__shared_owners_;
                    do
                      v233 = __ldaxr(v232);
                    while (__stlxr(v233 - 1, v232));
                    if (!v233)
                    {
                      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                      std::__shared_weak_count::__release_weak(v215);
                    }
                  }
                  v234 = *(std::__shared_weak_count **)&v332[8];
                  if (*(_QWORD *)&v332[8])
                  {
                    v235 = (unint64_t *)(*(_QWORD *)&v332[8] + 8);
                    do
                      v236 = __ldaxr(v235);
                    while (__stlxr(v236 - 1, v235));
                    if (!v236)
                    {
                      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                      std::__shared_weak_count::__release_weak(v234);
                    }
                  }
                }
              }
LABEL_371:
              kdebug_trace();
            }
LABEL_372:
            if ((SHIBYTE(v335.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_373;
            operator delete(v335.__r_.__value_.__l.__data_);
            if (v322)
              goto LABEL_374;
            goto LABEL_478;
          }
          if (v146 == 2)
          {
            sub_207CF7E1C();
            sub_207CF7B20();
            if (os_variant_has_internal_diagnostics())
            {
              *(_QWORD *)v346 = "cv3d.odt.";
              *(_QWORD *)&v346[8] = 9;
              v147 = (void *)HIBYTE(v328);
              v148 = v327;
              if (v328 < 0)
              {
                v148 = (void **)v327[0];
                v147 = v327[1];
              }
              *(_QWORD *)&v346[16] = v148;
              *(_QWORD *)&v346[24] = v147;
              sub_207CAC8F4((uint64_t)v346, (uint64_t)&v346[32], 0, 0, &v335);
              sub_207F0D4B0();
              v149 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
              {
                *(_OWORD *)&info[0].numer = 0u;
                v344 = 0u;
                v345 = 733237316;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
                {
                  v333 = (uint64_t (**)())(uint64_t)(a7 * 1000000000.0);
                  *(_QWORD *)&v334 = v310 & 0xFFFFFFFFFFFFFF00 | 2;
                  v310 = v334;
                  v150 = sub_207F0D4B0();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
                  {
                    if (*((_DWORD *)v134 + 44) != 2)
                      sub_207CA9F48();
                    v151 = *(_OWORD *)(v134 + 9);
                    *(_OWORD *)v346 = *v145;
                    *(_OWORD *)&v346[16] = v151;
                    *(_OWORD *)&v346[32] = *(_OWORD *)(v134 + 11);
                    *(_DWORD *)&v346[48] = *((_DWORD *)v134 + 26);
                    LOBYTE(v347) = 0;
                    v355 = 0;
                    if (*((_BYTE *)v134 + 168))
                    {
                      v347 = off_24C06E878;
                      v152 = v134[15];
                      v153 = (std::__shared_weak_count *)v134[16];
                      if (v153)
                      {
                        v154 = (unint64_t *)&v153->__shared_owners_;
                        do
                          v155 = __ldxr(v154);
                        while (__stxr(v155 + 1, v154));
                        v156 = v134[19];
                        v157 = *((_DWORD *)v134 + 40);
                        v158 = *((_WORD *)v134 + 82);
                        do
                          v159 = __ldxr(v154);
                        while (__stxr(v159 + 1, v154));
                      }
                      else
                      {
                        v156 = v134[19];
                        v157 = *((_DWORD *)v134 + 40);
                        v158 = *((_WORD *)v134 + 82);
                      }
                      v348 = v152;
                      v349 = v153;
                      v350 = v134[17];
                      LODWORD(v351) = *((_DWORD *)v134 + 36);
                      v352 = v156;
                      v353 = v157;
                      v354 = v158;
                      if (v153)
                      {
                        v173 = (unint64_t *)&v153->__shared_owners_;
                        do
                          v174 = __ldaxr(v173);
                        while (__stlxr(v174 - 1, v173));
                        if (!v174)
                        {
                          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                          std::__shared_weak_count::__release_weak(v153);
                        }
                      }
                      v355 = 1;
                    }
                    sub_20809F344((uint64_t)v346, 0, 0, (uint64_t)v337);
                    if (v355)
                    {
                      v175 = v349;
                      if (v349)
                      {
                        v176 = (unint64_t *)&v349->__shared_owners_;
                        do
                          v177 = __ldaxr(v176);
                        while (__stlxr(v177 - 1, v176));
                        if (!v177)
                        {
                          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                          std::__shared_weak_count::__release_weak(v175);
                        }
                      }
                    }
                    v325[0] = (void *)0x6863746170;
                    v325[1] = *(void **)v342;
                    *(void **)((char *)&v325[1] + 7) = *(void **)&v342[7];
                    *(_WORD *)((char *)&v325[2] + 7) = 261;
                    *(_QWORD *)v342 = 0;
                    *(_QWORD *)&v342[7] = 0;
                    sub_207DC73D8(&v331, (uint64_t)v337, (__int128 *)v325, (__int128 *)&v333);
                    if (LOBYTE(v325[3]) && SHIBYTE(v325[2]) < 0)
                      operator delete(v325[0]);
                    v178 = *(std::__shared_weak_count **)&v337[16];
                    if (*(_QWORD *)&v337[16])
                    {
                      v179 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
                      do
                        v180 = __ldaxr(v179);
                      while (__stlxr(v180 - 1, v179));
                      if (!v180)
                      {
                        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                        std::__shared_weak_count::__release_weak(v178);
                      }
                    }
                    v181 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 56))(v149);
                    v182 = *v181;
                    v183 = (std::__shared_weak_count *)v181[1];
                    if (v183)
                    {
                      v184 = (unint64_t *)&v183->__shared_owners_;
                      do
                        v185 = __ldxr(v184);
                      while (__stxr(v185 + 1, v184));
                    }
                    v186 = *(_OWORD *)v332;
                    *(_QWORD *)v337 = &off_24C078D18;
                    *(_OWORD *)&v337[8] = *(_OWORD *)v332;
                    *(_OWORD *)v332 = 0uLL;
                    *(_QWORD *)v346 = v182;
                    *(_QWORD *)&v346[8] = v183;
                    if (v183)
                    {
                      v187 = (unint64_t *)&v183->__shared_owners_;
                      do
                        v188 = __ldxr(v187);
                      while (__stxr(v188 + 1, v187));
                    }
                    *(_QWORD *)&v346[16] = &off_24C078D18;
                    *(_OWORD *)&v346[24] = v186;
                    if (*((_QWORD *)&v186 + 1))
                    {
                      v189 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
                      do
                        v190 = __ldxr(v189);
                      while (__stxr(v190 + 1, v189));
                    }
                    (*(void (**)(_QWORD *, _BYTE *))(*v150 + 16))(v150, v346);
                    v191 = *(std::__shared_weak_count **)&v346[32];
                    if (*(_QWORD *)&v346[32])
                    {
                      v192 = (unint64_t *)(*(_QWORD *)&v346[32] + 8);
                      do
                        v193 = __ldaxr(v192);
                      while (__stlxr(v193 - 1, v192));
                      if (!v193)
                      {
                        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                        std::__shared_weak_count::__release_weak(v191);
                      }
                    }
                    v194 = *(std::__shared_weak_count **)&v346[8];
                    if (*(_QWORD *)&v346[8])
                    {
                      v195 = (unint64_t *)(*(_QWORD *)&v346[8] + 8);
                      do
                        v196 = __ldaxr(v195);
                      while (__stlxr(v196 - 1, v195));
                      if (!v196)
                      {
                        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                        std::__shared_weak_count::__release_weak(v194);
                      }
                    }
                    v197 = *(std::__shared_weak_count **)&v337[16];
                    if (*(_QWORD *)&v337[16])
                    {
                      v198 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
                      do
                        v199 = __ldaxr(v198);
                      while (__stlxr(v199 - 1, v198));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                        std::__shared_weak_count::__release_weak(v197);
                      }
                    }
                    if (v183)
                    {
                      v200 = (unint64_t *)&v183->__shared_owners_;
                      do
                        v201 = __ldaxr(v200);
                      while (__stlxr(v201 - 1, v200));
                      if (!v201)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                      }
                    }
                    v202 = *(std::__shared_weak_count **)&v332[8];
                    if (*(_QWORD *)&v332[8])
                    {
                      v203 = (unint64_t *)(*(_QWORD *)&v332[8] + 8);
                      do
                        v204 = __ldaxr(v203);
                      while (__stlxr(v204 - 1, v203));
                      if (!v204)
                      {
                        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                        std::__shared_weak_count::__release_weak(v202);
                      }
                    }
                  }
                }
                goto LABEL_371;
              }
              goto LABEL_372;
            }
          }
LABEL_373:
          if (!v322)
            goto LABEL_478;
LABEL_374:
          sub_207CF7E1C();
          sub_207CF7B20();
          if (!os_variant_has_internal_diagnostics())
            goto LABEL_478;
          *(_QWORD *)v346 = "cv3d.odt.";
          *(_QWORD *)&v346[8] = 9;
          v237 = (void *)HIBYTE(v328);
          v238 = v327;
          if (v328 < 0)
          {
            v238 = (void **)v327[0];
            v237 = v327[1];
          }
          *(_QWORD *)&v346[16] = v238;
          *(_QWORD *)&v346[24] = v237;
          sub_207CAC8F4((uint64_t)v346, (uint64_t)&v346[32], 0, 0, &v335);
          sub_207F0D4B0();
          v239 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
          {
            memset(v337, 0, 32);
            *(_DWORD *)&v337[32] = 733237316;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
            {
              v240 = sub_207F0D4B0();
              v318 = v318 & 0xFFFFFFFFFFFFFF00 | 2;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239))
              {
                v315 = v240;
                v331 = 0;
                *(_OWORD *)v332 = 0uLL;
                v241 = *a5;
                v321 = a5[1];
                if (*a5 != v321)
                {
                  v313 = v239;
                  v314 = a4;
                  v242 = 0;
                  v243 = 0;
                  v244 = 0;
                  v245 = 0;
                  while (1)
                  {
                    v246 = v241[1] - *v241;
                    if (v246)
                      break;
LABEL_382:
                    v241 += 21;
                    if (v241 == v321)
                    {
                      *(_QWORD *)v332 = v242;
                      *(_QWORD *)&v332[8] = v244;
                      v331 = v243;
                      v239 = v313;
                      a4 = v314;
                      v21 = v319;
                      v20 = v320;
                      goto LABEL_419;
                    }
                  }
                  v247 = 0;
                  v248 = v246 >> 3;
                  v323 = v246 >> 3;
                  while (2)
                  {
                    if (((*(_QWORD *)(v241[3] + ((v247 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v247) & 1) != 0
                      && *(_QWORD *)(v241[9] + 8 * v247) == v22)
                    {
                      v249 = *v241;
                      if (v245 < v244)
                      {
                        *(_QWORD *)v245 = *(_QWORD *)(v249 + 8 * v247);
                        v245 += 8;
                        v242 = (uint64_t)v245;
                      }
                      else
                      {
                        v250 = (v245 - v243) >> 3;
                        v251 = v250 + 1;
                        if ((unint64_t)(v250 + 1) >> 61)
                        {
                          *(_QWORD *)v332 = v242;
                          *(_QWORD *)&v332[8] = v244;
                          v331 = v243;
                          sub_207CA420C();
                        }
                        v252 = v244;
                        if ((v244 - v243) >> 2 > v251)
                          v251 = (v244 - v243) >> 2;
                        if ((unint64_t)(v244 - v243) >= 0x7FFFFFFFFFFFFFF8)
                          v253 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v253 = v251;
                        if (v253)
                        {
                          if (v253 >> 61)
                          {
                            *(_QWORD *)&v332[8] = v252;
                            v331 = v243;
                            sub_207CA3AB8();
                          }
                          v254 = operator new(8 * v253);
                          v255 = &v254[8 * v250];
                          *(_QWORD *)v255 = *(_QWORD *)(v249 + 8 * v247);
                          v242 = (uint64_t)(v255 + 8);
                          v256 = v245 - v243;
                          if (v245 != v243)
                          {
LABEL_399:
                            v257 = v256 - 8;
                            if (v257 < 0x168
                              || (v261 = (v245 - 8 - v243) & 0xFFFFFFFFFFFFFFF8,
                                  &v254[v245 - v243 - 8 - v261] > &v254[v245 - v243 - 8])
                              || &v245[-v261 - 8] > v245 - 8
                              || (unint64_t)(v243 - v254) < 0x20)
                            {
                              v258 = v245;
                            }
                            else
                            {
                              v262 = (v257 >> 3) + 1;
                              v263 = 8 * (v262 & 0x3FFFFFFFFFFFFFFCLL);
                              v258 = &v245[-v263];
                              v255 -= v263;
                              v264 = &v254[8 * v250 - 16];
                              v265 = v245 - 16;
                              v266 = v262 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v267 = *(_OWORD *)v265;
                                *(v264 - 1) = *((_OWORD *)v265 - 1);
                                *v264 = v267;
                                v264 -= 2;
                                v265 -= 32;
                                v266 -= 4;
                              }
                              while (v266);
                              if (v262 == (v262 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_402:
                                v244 = &v254[8 * v253];
                                if (v243)
                                  goto LABEL_403;
LABEL_406:
                                v243 = v255;
                                v245 = (char *)v242;
                                goto LABEL_407;
                              }
                            }
                            do
                            {
                              v259 = *((_QWORD *)v258 - 1);
                              v258 -= 8;
                              *((_QWORD *)v255 - 1) = v259;
                              v255 -= 8;
                            }
                            while (v258 != v243);
                            goto LABEL_402;
                          }
                        }
                        else
                        {
                          v254 = 0;
                          v255 = (char *)(8 * v250);
                          *(_QWORD *)(8 * v250) = *(_QWORD *)(v249 + 8 * v247);
                          v242 = 8 * v250 + 8;
                          v256 = v245 - v243;
                          if (v245 != v243)
                            goto LABEL_399;
                        }
                        v244 = &v254[8 * v253];
                        if (!v243)
                          goto LABEL_406;
LABEL_403:
                        v260 = (char *)v242;
                        operator delete(v243);
                        v242 = (uint64_t)v260;
                        v243 = v255;
                        v245 = v260;
LABEL_407:
                        v248 = v323;
                      }
                    }
                    if (++v247 == v248)
                      goto LABEL_382;
                    continue;
                  }
                }
LABEL_419:
                v339.__r_.__value_.__r.__words[0] = v340;
                *(std::string::size_type *)((char *)v339.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v340 + 7);
                *(_QWORD *)&v340 = 0;
                *(_QWORD *)((char *)&v340 + 7) = 0;
                v268 = mach_continuous_time();
                v269 = atomic_load((unsigned __int8 *)&qword_2545308B0);
                if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
                {
                  mach_timebase_info(info);
                  LODWORD(v308) = info[0].numer;
                  LODWORD(v309) = info[0].denom;
                  *(double *)&qword_2545308A8 = (double)v308 / (double)v309;
                  __cxa_guard_release(&qword_2545308B0);
                  v21 = v319;
                  v20 = v320;
                }
                *(_QWORD *)v346 = llround(*(double *)&qword_2545308A8 * (double)v268);
                *(_QWORD *)&v346[8] = 2;
                *(_QWORD *)&v346[16] = 25650;
                *(_QWORD *)&v346[24] = v339.__r_.__value_.__r.__words[0];
                *(_QWORD *)&v346[31] = *(std::string::size_type *)((char *)v339.__r_.__value_.__r.__words + 7);
                *(_WORD *)&v346[39] = 258;
                v339.__r_.__value_.__r.__words[0] = 0;
                *(std::string::size_type *)((char *)v339.__r_.__value_.__r.__words + 7) = 0;
                v346[48] = 0;
                LOBYTE(v349) = 0;
                v350 = (uint64_t)(a7 * 1000000000.0);
                v351 = v318;
                LOBYTE(v352) = 1;
                v355 = 0;
                v356 = 0;
                v357 = 0;
                v358 = 0;
                v270 = (char *)operator new(0x18uLL);
                v271 = v331;
                *(_QWORD *)v270 = v331;
                v324 = *(_QWORD *)v332;
                *(_OWORD *)(v270 + 8) = *(_OWORD *)v332;
                *(_OWORD *)v332 = 0uLL;
                v331 = 0;
                v341[0] = 0;
                v338 = v270;
                v272 = operator new(0x20uLL);
                *v272 = &off_24C074BB0;
                v272[1] = 0;
                if (v271)
                  v273 = (v324 - (uint64_t)v271) >> 2;
                else
                  v273 = 0;
                v272[2] = 0;
                v272[3] = v270;
                v338 = 0;
                *(_QWORD *)&v344 = v272;
                v333 = 0;
                *(_QWORD *)&v334 = 0;
                info[1] = (mach_timebase_info)v270;
                info[0] = (mach_timebase_info)sub_207DC97BC;
                sub_20807E9EC(v342, 11, (void (**)(uint64_t))info, v273, (uint64_t)v271);
                v274 = v239;
                if (info[0])
                  ((void (*)(int))info[0])(0);
                v275 = *(mach_timebase_info *)v342;
                v276 = *(mach_timebase_info *)&v342[8];
                *(_QWORD *)v342 = 0;
                *(_QWORD *)&v342[8] = 0;
                if ((*(_BYTE *)(*(_QWORD *)&v275 + 56) & 1) != 0)
                {
                  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
                  {
                    abort();
                  }
                  v277 = *(std::__shared_weak_count **)&v342[8];
                  if (*(_QWORD *)&v342[8])
                  {
                    v278 = (unint64_t *)(*(_QWORD *)&v342[8] + 8);
                    do
                      v279 = __ldaxr(v278);
                    while (__stlxr(v279 - 1, v278));
                    if (!v279)
                    {
                      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                      std::__shared_weak_count::__release_weak(v277);
                    }
                  }
                }
                v280 = v338;
                if (v338)
                {
                  v281 = *(void **)v338;
                  if (*(_QWORD *)v338)
                  {
                    *((_QWORD *)v338 + 1) = v281;
                    operator delete(v281);
                  }
                  operator delete(v280);
                }
                v282 = (void *)v341[0];
                if (v341[0])
                {
                  v283 = *(void **)v341[0];
                  if (*(_QWORD *)v341[0])
                  {
                    *(_QWORD *)(v341[0] + 8) = v283;
                    operator delete(v283);
                  }
                  operator delete(v282);
                }
                info[0] = v275;
                info[1] = v276;
                v284 = operator new(0xF0uLL);
                *v284 = off_24C074D18;
                v284[1] = v275;
                v284[2] = v276;
                info[1] = 0;
                info[0] = 0;
                sub_207D47D34((uint64_t)(v284 + 4), (uint64_t)v346);
                *v284 = off_24C074C98;
                v325[0] = &off_24C078D18;
                v325[1] = v284;
                v285 = (unint64_t *)operator new(0x20uLL);
                v285[1] = 0;
                v286 = v285 + 1;
                *v285 = (unint64_t)&off_24C078E28;
                v285[2] = 0;
                v285[3] = (unint64_t)v284;
                v325[2] = v285;
                sub_207D49CF4((uint64_t)v346);
                if (v331)
                  operator delete(v331);
                v287 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v274 + 56))(v274);
                v288 = *v287;
                v289 = (std::__shared_weak_count *)v287[1];
                if (v289)
                {
                  v290 = (unint64_t *)&v289->__shared_owners_;
                  do
                    v291 = __ldxr(v290);
                  while (__stxr(v291 + 1, v290));
                  info[0] = (mach_timebase_info)&off_24C078D18;
                  info[1] = (mach_timebase_info)v284;
                  *(_QWORD *)&v344 = v285;
                  v325[1] = 0;
                  v325[2] = 0;
                  *(_QWORD *)v346 = v288;
                  *(_QWORD *)&v346[8] = v289;
                  do
                    v292 = __ldxr(v290);
                  while (__stxr(v292 + 1, v290));
                }
                else
                {
                  info[0] = (mach_timebase_info)&off_24C078D18;
                  info[1] = (mach_timebase_info)v284;
                  *(_QWORD *)&v344 = v285;
                  v325[1] = 0;
                  v325[2] = 0;
                  *(_OWORD *)v346 = v288;
                }
                *(_QWORD *)&v346[16] = &off_24C078D18;
                *(_QWORD *)&v346[24] = v284;
                *(_QWORD *)&v346[32] = v285;
                do
                  v293 = __ldxr(v286);
                while (__stxr(v293 + 1, v286));
                (*(void (**)(_QWORD *, _BYTE *))(*v315 + 16))(v315, v346);
                v294 = *(std::__shared_weak_count **)&v346[32];
                if (*(_QWORD *)&v346[32])
                {
                  v295 = (unint64_t *)(*(_QWORD *)&v346[32] + 8);
                  do
                    v296 = __ldaxr(v295);
                  while (__stlxr(v296 - 1, v295));
                  if (!v296)
                  {
                    ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                    std::__shared_weak_count::__release_weak(v294);
                  }
                }
                v297 = *(std::__shared_weak_count **)&v346[8];
                if (*(_QWORD *)&v346[8])
                {
                  v298 = (unint64_t *)(*(_QWORD *)&v346[8] + 8);
                  do
                    v299 = __ldaxr(v298);
                  while (__stlxr(v299 - 1, v298));
                  if (!v299)
                  {
                    ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                    std::__shared_weak_count::__release_weak(v297);
                  }
                }
                v300 = (std::__shared_weak_count *)v344;
                if ((_QWORD)v344)
                {
                  v301 = (unint64_t *)(v344 + 8);
                  do
                    v302 = __ldaxr(v301);
                  while (__stlxr(v302 - 1, v301));
                  if (!v302)
                  {
                    ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                    std::__shared_weak_count::__release_weak(v300);
                  }
                }
                if (v289)
                {
                  v303 = (unint64_t *)&v289->__shared_owners_;
                  do
                    v304 = __ldaxr(v303);
                  while (__stlxr(v304 - 1, v303));
                  if (!v304)
                  {
                    ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                    std::__shared_weak_count::__release_weak(v289);
                  }
                }
                v305 = (std::__shared_weak_count *)v325[2];
                if (v325[2])
                {
                  v306 = (unint64_t *)((char *)v325[2] + 8);
                  do
                    v307 = __ldaxr(v306);
                  while (__stlxr(v307 - 1, v306));
                  if (!v307)
                  {
                    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                    std::__shared_weak_count::__release_weak(v305);
                  }
                }
              }
            }
            kdebug_trace();
          }
          if ((SHIBYTE(v335.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_478:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_479;
LABEL_15:
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v328) & 0x80000000) == 0)
              goto LABEL_16;
LABEL_480:
            operator delete(v327[0]);
            if (++v22 == v20)
              goto LABEL_486;
            continue;
          }
          operator delete(v335.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_15;
LABEL_479:
          if (SHIBYTE(v328) < 0)
            goto LABEL_480;
LABEL_16:
          if (++v22 == v20)
          {
LABEL_486:
            if (SHIBYTE(v330) < 0)
              operator delete(v329[0]);
            return;
          }
        }
        v72 = v27 + 24 * v22;
        v73 = *(uint64_t **)(v72 + 8);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
        v74 = *(_QWORD *)(v72 + 16);
        __p.__r_.__value_.__r.__words[2] = v74;
        if (v74)
        {
          v75 = (unint64_t *)(v74 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C08A598;
        if (v73)
        {
          v78 = *v73;
          v77 = (std::__shared_weak_count *)v73[1];
          if (v77)
          {
            v79 = (unint64_t *)&v77->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
            do
              v81 = __ldaxr(v79);
            while (__stlxr(v81 - 1, v79));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          if (v78)
            sub_20815FC78(__p.__r_.__value_.__l.__size_);
        }
        v82 = (void *)sub_20815A89C((uint64_t)&__p, 0);
        *(_QWORD *)v346 = sub_20815BF9C(v28);
        v83 = sub_20815C768(v28, 0);
        LOBYTE(info[0].numer) = 0;
        LOBYTE(v345) = 0;
        sub_20815B564((unsigned int *)v346, 0x4C303038u, v82, v83 | 0x100000000, (uint64_t)info, (uint64_t)&v335);
        if ((_BYTE)v345)
        {
          v84 = (mach_timebase_info *)*((_QWORD *)&v344 + 1);
          if (*((mach_timebase_info **)&v344 + 1) == info)
          {
            v84 = info;
            v85 = 4;
            goto LABEL_114;
          }
          if (*((_QWORD *)&v344 + 1))
          {
            v85 = 5;
LABEL_114:
            (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
          }
        }
        v333 = &off_24C08A5D8;
        v334 = *(_OWORD *)&v335.__r_.__value_.__r.__words[1];
        if (v335.__r_.__value_.__r.__words[2])
        {
          v87 = (unint64_t *)(v335.__r_.__value_.__r.__words[2] + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        sub_20814D798((uint64_t)&v333, (uint64_t)v346);
        *(_QWORD *)v337 = &off_24C074C28;
        *(_OWORD *)&v337[8] = *(_OWORD *)&v346[8];
        *(_OWORD *)&v337[24] = *(_OWORD *)&v346[24];
        *(_OWORD *)&v337[38] = *(_OWORD *)&v346[38];
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
        v333 = &off_24C08A5D8;
        if (*((_QWORD *)&v334 + 1))
        {
          v90 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v335.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08A5D8;
        v92 = (std::__shared_weak_count *)v335.__r_.__value_.__r.__words[2];
        if (v335.__r_.__value_.__r.__words[2])
        {
          v93 = (unint64_t *)(v335.__r_.__value_.__r.__words[2] + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          v96 = *(_QWORD *)__p.__r_.__value_.__l.__size_;
          v95 = *(std::__shared_weak_count **)(__p.__r_.__value_.__l.__size_ + 8);
          if (v95)
          {
            v97 = (unint64_t *)&v95->__shared_owners_;
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
            do
              v99 = __ldaxr(v97);
            while (__stlxr(v99 - 1, v97));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          if (v96)
            sub_20815FE54(__p.__r_.__value_.__l.__size_);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08A5D8;
        v100 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          v101 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v331 = (void *)0x6567616D69;
        *(_QWORD *)v332 = v341[0];
        *(_QWORD *)&v332[7] = *(_QWORD *)((char *)v341 + 7);
        *(_WORD *)&v332[15] = 261;
        v341[0] = 0;
        *(_QWORD *)((char *)v341 + 7) = 0;
        sub_207DC7894(v342, (uint64_t)v337, (__int128 *)&v331, &v340);
        if (v332[16] && (v332[15] & 0x80000000) != 0)
          operator delete(v331);
        *(_QWORD *)v337 = &off_24C074C28;
        v103 = *(std::__shared_weak_count **)&v337[16];
        if (*(_QWORD *)&v337[16])
        {
          v104 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        v106 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
        v107 = *v106;
        v108 = (std::__shared_weak_count *)v106[1];
        v21 = v319;
        v20 = v320;
        if (v108)
        {
          v109 = (unint64_t *)&v108->__shared_owners_;
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        v111 = *(_OWORD *)&v342[8];
        *(_QWORD *)v337 = &off_24C078D18;
        *(_OWORD *)&v337[8] = *(_OWORD *)&v342[8];
        *(_OWORD *)&v342[8] = 0uLL;
        *(_QWORD *)v346 = v107;
        *(_QWORD *)&v346[8] = v108;
        if (v108)
        {
          v112 = (unint64_t *)&v108->__shared_owners_;
          do
            v113 = __ldxr(v112);
          while (__stxr(v113 + 1, v112));
        }
        *(_QWORD *)&v346[16] = &off_24C078D18;
        *(_OWORD *)&v346[24] = v111;
        if (*((_QWORD *)&v111 + 1))
        {
          v114 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
        }
        (*(void (**)(_QWORD *, _BYTE *))(*v71 + 16))(v71, v346);
        v116 = *(std::__shared_weak_count **)&v346[32];
        if (*(_QWORD *)&v346[32])
        {
          v117 = (unint64_t *)(*(_QWORD *)&v346[32] + 8);
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        v119 = *(std::__shared_weak_count **)&v346[8];
        if (*(_QWORD *)&v346[8])
        {
          v120 = (unint64_t *)(*(_QWORD *)&v346[8] + 8);
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        v122 = *(std::__shared_weak_count **)&v337[16];
        if (*(_QWORD *)&v337[16])
        {
          v123 = (unint64_t *)(*(_QWORD *)&v337[16] + 8);
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        if (v108)
        {
          v125 = (unint64_t *)&v108->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v127 = *(std::__shared_weak_count **)&v342[16];
        if (*(_QWORD *)&v342[16])
        {
          v128 = (unint64_t *)(*(_QWORD *)&v342[16] + 8);
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        goto LABEL_184;
      }
    }
    else if ((v337[23] & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)v337);
    v19 = a4[1] - *a4;
    if (!v19)
      goto LABEL_486;
    goto LABEL_14;
  }
}

void sub_207DB2008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;

  __cxa_guard_abort(&qword_2545308B0);
  if (__p)
    operator delete(__p);
  sub_207CD822C((uint64_t)&a72);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a66);
  if (a44 < 0)
    operator delete(a39);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(a1);
}

uint64_t sub_207DB2844(int a1)
{
  int v1;

  if (a1 > 1278226535)
  {
    if (a1 <= 1647589489)
    {
      if (a1 > 1380410944)
      {
        switch(a1)
        {
          case 1380410945:
            return 0x100000020;
          case 1380411457:
            return 0x10000001FLL;
          case 1647392359:
            return 0x100000002;
        }
        return 0;
      }
      if (a1 != 1278226536)
      {
        if (a1 == 1380401729)
          return 0x10000001DLL;
        return 0;
      }
    }
    else
    {
      if (a1 <= 1717856626)
      {
        if (a1 == 1647589490)
          return 0x100000016;
        if (a1 == 1647719521)
          return 0x100000026;
        v1 = 1717855600;
        goto LABEL_22;
      }
      if (a1 == 1717856627)
        return 0x100000004;
      if (a1 != 1751410032 && a1 != 1751411059)
        return 0;
    }
    return 0x100000003;
  }
  if (a1 <= 843264103)
  {
    if (a1 <= 842285638)
    {
      if (a1 == 24)
        return 0x100000015;
      if (a1 == 32)
        return 0x100000025;
    }
    else
    {
      switch(a1)
      {
        case 842285639:
          return 0x100000011;
        case 843264056:
          return 0x100000005;
        case 843264102:
          return 0x100000008;
      }
    }
    return 0;
  }
  if (a1 > 1111970368)
  {
    if (a1 == 1111970369)
      return 0x100000019;
    if (a1 == 1278226488)
      return 0x100000001;
    v1 = 1278226534;
LABEL_22:
    if (a1 != v1)
      return 0;
    return 0x100000004;
  }
  if (a1 == 843264104)
    return 0x100000007;
  if (a1 == 1094862674)
    return 0x100000021;
  return 0;
}

uint64_t sub_207DB2B10(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  size_t v7;
  unint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  char *v13;
  char v14;
  void *v15;
  size_t v16;
  unint64_t v17;
  std::string *v18;
  unint64_t size;
  void *v20;
  int v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  int v34;
  int v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  __int128 v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::string::value_type v48;
  std::string::size_type v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  char *v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  void **v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  void *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  char **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t (**v153)();
  std::string::value_type v154;
  std::string::size_type v155;
  std::__shared_weak_count *v156;
  std::string v157;
  void *v158[2];
  uint64_t v159;
  __int128 __dst;
  unint64_t v161;
  _BYTE v162[72];
  void *v163;
  void *v164;
  void *__p;
  void *v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  int v174;

  v4 = a1;
  v5 = sub_207D280EC(a1, a2);
  v149 = v5 + 680;
  v151 = v5;
  if (*((_BYTE *)a3 + 24))
  {
    v6 = *((char *)a3 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    if (v7)
    {
      v8 = v7 + 9;
      if (v7 + 9 >= 0x7FFFFFFFFFFFFFF8)
        sub_207C95C50();
      if (v8 > 0x16)
      {
        v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v10 = v8 | 7;
        v11 = v10 + 1;
        p_dst = (__int128 *)operator new(v10 + 1);
        *((_QWORD *)&__dst + 1) = v7 + 9;
        v161 = v11 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        v161 = 0;
        __dst = 0uLL;
        p_dst = &__dst;
        HIBYTE(v161) = v7 + 9;
      }
      if (v6 >= 0)
        v12 = a3;
      else
        v12 = *a3;
      memmove(p_dst, v12, v7);
      strcpy((char *)p_dst + v7, ".tracker.");
      *(_OWORD *)v149 = __dst;
      *(_QWORD *)(v149 + 16) = v161;
      *(_BYTE *)(v4 + 704) = 1;
    }
    else
    {
      *(_WORD *)(v4 + 703) = 264;
      strcpy((char *)(v4 + 680), "tracker.");
    }
  }
  else
  {
    *(_BYTE *)(v4 + 680) = 0;
    *(_BYTE *)(v4 + 704) = 0;
  }
  *(_QWORD *)(v4 + 776) = 0;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  v13 = (char *)operator new(0x40uLL);
  *(_QWORD *)(v4 + 760) = v13;
  *(_QWORD *)(v4 + 776) = v13 + 64;
  *(_DWORD *)v13 = 1065353216;
  *(_OWORD *)(v13 + 4) = 0u;
  *((_DWORD *)v13 + 5) = 1065353216;
  *(_OWORD *)(v13 + 24) = 0u;
  *((_DWORD *)v13 + 10) = 1065353216;
  *(_OWORD *)(v13 + 44) = 0u;
  *((_DWORD *)v13 + 15) = 1065353216;
  *(_QWORD *)(v4 + 768) = v13 + 64;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_BYTE *)(v4 + 816) = 1;
  *(_QWORD *)(v4 + 952) = 0;
  *(_OWORD *)(v4 + 824) = 0u;
  *(_OWORD *)(v4 + 840) = 0u;
  *(_OWORD *)(v4 + 856) = 0u;
  *(_OWORD *)(v4 + 872) = 0u;
  *(_OWORD *)(v4 + 888) = 0u;
  *(_OWORD *)(v4 + 904) = 0u;
  *(_OWORD *)(v4 + 920) = 0u;
  *(_OWORD *)(v4 + 936) = 0u;
  v148 = v4 + 824;
  v172 = 0u;
  v173 = 0u;
  v174 = 733236864;
  kdebug_trace();
  v150 = (__int128 *)(v4 + 784);
  v146 = v4 + 872;
  v147 = v4 + 848;
  v144 = (char **)(v4 + 760);
  v145 = v4 + 936;
  sub_207DEC1E8((uint64_t **)(v4 + 72), (uint64_t)&__dst);
  sub_207D26DDC(v4 + 96, (uint64_t *)&__dst);
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  __dst = 0uLL;
  v161 = 0;
  sub_207D051B4((uint64_t)v162);
  if (&__dst != (__int128 *)(v4 + 48))
  {
    v14 = *(_BYTE *)(v4 + 71);
    if (SHIBYTE(v161) < 0)
    {
      if (v14 >= 0)
        v15 = (void *)(v4 + 48);
      else
        v15 = *(void **)(v4 + 48);
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v4 + 71);
      else
        v16 = *(_QWORD *)(v4 + 56);
      sub_207CC2244((void **)&__dst, v15, v16);
    }
    else if ((*(_BYTE *)(v4 + 71) & 0x80) != 0)
    {
      sub_207CC2180(&__dst, *(void **)(v4 + 48), *(_QWORD *)(v4 + 56));
    }
    else
    {
      __dst = *(_OWORD *)(v4 + 48);
      v161 = *(_QWORD *)(v4 + 64);
    }
  }
  sub_207D27668((uint64_t)v162, v4 + 288);
  if (v168 >= 2)
  {
    v17 = 1;
    while (1)
    {
      std::to_string(&v157, v17);
      v18 = std::string::insert(&v157, 0, "batch_size_", 0xBuLL);
      v20 = (void *)v18->__r_.__value_.__r.__words[0];
      size = v18->__r_.__value_.__l.__size_;
      LODWORD(v153) = v18->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)&v153 + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
      v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v157.__r_.__value_.__l.__data_);
        if (v21 < 0)
        {
LABEL_42:
          sub_207CA40D8(&v157, v20, size);
          goto LABEL_43;
        }
      }
      else if (v21 < 0)
      {
        goto LABEL_42;
      }
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      v157.__r_.__value_.__l.__size_ = size;
      LODWORD(v157.__r_.__value_.__r.__words[2]) = (_DWORD)v153;
      *(_DWORD *)((char *)&v157.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v153 + 3);
      *((_BYTE *)&v157.__r_.__value_.__s + 23) = v21;
LABEL_43:
      v158[0] = 0;
      v158[1] = 0;
      v159 = 0;
      v22 = &v170;
      v23 = &v170;
      v24 = v170;
      if (v170)
      {
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v157;
        else
          v25 = (std::string *)v157.__r_.__value_.__r.__words[0];
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
        else
          v26 = v157.__r_.__value_.__l.__size_;
        while (1)
        {
          v22 = (uint64_t **)v24;
          v29 = v24[4];
          v27 = v24 + 4;
          v28 = (uint64_t *)v29;
          v30 = *((char *)v27 + 23);
          if (v30 >= 0)
            v31 = v27;
          else
            v31 = v28;
          if (v30 >= 0)
            v32 = *((unsigned __int8 *)v27 + 23);
          else
            v32 = v27[1];
          if (v32 >= v26)
            v33 = v26;
          else
            v33 = v32;
          v34 = memcmp(v25, v31, v33);
          if (v34)
          {
            if (v34 < 0)
              goto LABEL_50;
LABEL_64:
            v35 = memcmp(v31, v25, v33);
            if (v35)
            {
              if ((v35 & 0x80000000) == 0)
                goto LABEL_77;
            }
            else if (v32 >= v26)
            {
              goto LABEL_77;
            }
            v24 = v22[1];
            if (!v24)
            {
              v23 = v22 + 1;
              break;
            }
          }
          else
          {
            if (v26 >= v32)
              goto LABEL_64;
LABEL_50:
            v24 = *v22;
            v23 = v22;
            if (!*v22)
              break;
          }
        }
      }
      v36 = (char *)operator new(0x50uLL);
      v37 = v36 + 32;
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_207CA40D8(v37, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
        v39 = *(_OWORD *)v158;
        v38 = v159;
      }
      else
      {
        v38 = 0;
        *(_OWORD *)v37 = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
        *((_QWORD *)v36 + 6) = *((_QWORD *)&v157.__r_.__value_.__l + 2);
        v39 = 0uLL;
      }
      *(_OWORD *)(v36 + 56) = v39;
      *((_QWORD *)v36 + 9) = v38;
      v158[1] = 0;
      v159 = 0;
      v158[0] = 0;
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = v22;
      *v23 = (uint64_t *)v36;
      if (*v169)
      {
        v169 = (_QWORD *)*v169;
        v36 = (char *)*v23;
      }
      sub_207CC24B4(v170, (uint64_t *)v36);
      ++v171;
      if (v158[0])
      {
        v158[1] = v158[0];
        operator delete(v158[0]);
      }
LABEL_77:
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v157.__r_.__value_.__l.__data_);
        if ((v21 & 0x80000000) == 0)
          goto LABEL_37;
LABEL_79:
        operator delete(v20);
        ++v17;
        v4 = v151;
        if (v17 > v168)
          break;
      }
      else
      {
        if (v21 < 0)
          goto LABEL_79;
LABEL_37:
        ++v17;
        v4 = v151;
        if (v17 > v168)
          break;
      }
    }
  }
  v153 = off_24C06E9E8;
  v154 = 0;
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  HIBYTE(v40->__on_zero_shared) = 0;
  LOBYTE(v40->~__shared_weak_count) = 0;
  v155 = (std::string::size_type)v40;
  v41 = (std::__shared_weak_count *)operator new(0x20uLL);
  v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
  v41->__shared_owners_ = 0;
  v41->__shared_weak_owners_ = 0;
  v41[1].__vftable = v40;
  v156 = v41;
  sub_207D5F77C((void **)&__dst, (uint64_t)&v153, (void ***)&v152);
  *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v152;
  v152 = 0uLL;
  LOBYTE(v158[1]) = 1;
  sub_207DC9924((__int128 *)&v157, v150);
  if (LOBYTE(v158[1]))
  {
    v42 = (std::__shared_weak_count *)v157.__r_.__value_.__l.__size_;
    if (v157.__r_.__value_.__l.__size_)
    {
      v43 = (unint64_t *)(v157.__r_.__value_.__l.__size_ + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
    if (!*((_QWORD *)&v152 + 1))
      goto LABEL_92;
  }
  else
  {
    (*(void (**)(std::string *))v157.__r_.__value_.__l.__data_)(&v157);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
    if (!*((_QWORD *)&v152 + 1))
      goto LABEL_92;
  }
  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(p_shared_owners);
  while (__stlxr(v47 - 1, p_shared_owners));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    v48 = v154;
    if (v154)
      goto LABEL_93;
    goto LABEL_113;
  }
LABEL_92:
  v48 = v154;
  if (v154)
  {
LABEL_93:
    v49 = v155;
    v50 = v156;
    if (v156)
    {
      v51 = (unint64_t *)&v156->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v157.__r_.__value_.__s.__data_[8] = v48;
      v157.__r_.__value_.__r.__words[2] = v49;
      v158[0] = v50;
      do
        v53 = __ldxr(v51);
      while (__stxr(v53 + 1, v51));
    }
    else
    {
      v157.__r_.__value_.__s.__data_[8] = v48;
      v157.__r_.__value_.__r.__words[2] = v155;
      v158[0] = 0;
    }
    v157.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E9E8;
    LOBYTE(v158[1]) = 0;
    sub_207DC9924((__int128 *)&v157, v150);
    if (LOBYTE(v158[1]))
    {
      v54 = (std::__shared_weak_count *)v157.__r_.__value_.__l.__size_;
      if (v157.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(v157.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
    else
    {
      (*(void (**)(_QWORD *))v157.__r_.__value_.__l.__data_)(&v157);
    }
    if (v50)
    {
      v57 = (unint64_t *)&v50->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    goto LABEL_228;
  }
LABEL_113:
  if (!*(_BYTE *)(v4 + 816))
    goto LABEL_93;
  v59 = v167;
  v60 = *(_QWORD *)(v4 + 352) * *(_QWORD *)(v4 + 360) * v168;
  if (v167 >= 2)
  {
    if (v167 != *(_QWORD *)(v4 + 576))
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 186, (uint64_t)"config.model_config.num_inference_cameras == cfg_.num_camera_streams", 68, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v59 = *(_QWORD *)(v4 + 576);
    }
    v60 *= v59;
  }
  v61 = *(_QWORD *)(v4 + 824);
  v62 = (*(_QWORD *)(v4 + 832) - v61) >> 2;
  if (v60 <= v62)
  {
    if (v60 < v62)
      *(_QWORD *)(v4 + 832) = v61 + 4 * v60;
  }
  else
  {
    sub_207D55DD4(v148, v60 - v62);
  }
  v63 = v60 >> 2;
  v64 = *(_QWORD *)(v4 + 848);
  v65 = (*(_QWORD *)(v4 + 856) - v64) >> 2;
  if (v63 <= v65)
  {
    if (v63 < v65)
      *(_QWORD *)(v4 + 856) = v64 + 4 * v63;
  }
  else
  {
    sub_207D55DD4(v147, v63 - v65);
  }
  v66 = *(_QWORD *)(v4 + 872);
  v67 = (*(_QWORD *)(v4 + 880) - v66) >> 2;
  if (v63 <= v67)
  {
    if (v63 < v67)
      *(_QWORD *)(v4 + 880) = v66 + 4 * v63;
  }
  else
  {
    sub_207D55DD4(v146, v63 - v67);
  }
  v68 = *(_QWORD *)(v4 + 576);
  v69 = *(char **)(v4 + 768);
  v70 = *(char **)(v4 + 760);
  v71 = (v69 - v70) >> 6;
  v72 = v68 - v71;
  if (v68 <= v71)
  {
    if (v68 < v71)
      *(_QWORD *)(v4 + 768) = &v70[64 * v68];
    v84 = *(char **)(v4 + 720);
    v85 = *(char **)(v4 + 712);
    v86 = (v84 - v85) >> 4;
    v87 = v68 >= v86;
    v88 = v68 - v86;
    if (v68 <= v86)
    {
LABEL_172:
      if (!v87)
      {
        v104 = &v85[16 * v68];
        while (v84 != v104)
        {
          v105 = (std::__shared_weak_count *)*((_QWORD *)v84 - 1);
          if (v105)
          {
            v106 = (unint64_t *)&v105->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          v84 -= 16;
        }
        *(_QWORD *)(v4 + 720) = v104;
      }
      goto LABEL_186;
    }
  }
  else
  {
    v73 = *(_QWORD *)(v4 + 776);
    if (v72 <= (v73 - (uint64_t)v69) >> 6)
    {
      v102 = &v69[64 * v72];
      v103 = (v68 << 6) - (v71 << 6);
      do
      {
        *(_OWORD *)v69 = xmmword_208236A40;
        *((_OWORD *)v69 + 1) = unk_208236A50;
        *((_OWORD *)v69 + 2) = xmmword_208236A60;
        *((_OWORD *)v69 + 3) = unk_208236A70;
        v69 += 64;
        v103 -= 64;
      }
      while (v103);
      *(_QWORD *)(v4 + 768) = v102;
    }
    else
    {
      if (v68 >> 58)
        sub_207CA420C();
      v74 = v73 - (_QWORD)v70;
      v75 = (v73 - (uint64_t)v70) >> 5;
      if (v75 <= v68)
        v75 = *(_QWORD *)(v4 + 576);
      if (v74 >= 0x7FFFFFFFFFFFFFC0)
        v76 = 0x3FFFFFFFFFFFFFFLL;
      else
        v76 = v75;
      if (v76 >> 58)
        goto LABEL_238;
      v77 = (char *)operator new(v76 << 6);
      v78 = &v77[64 * v71];
      v79 = (v68 << 6) - (v71 << 6);
      v80 = v78;
      do
      {
        *(_OWORD *)v80 = xmmword_208236A40;
        *((_OWORD *)v80 + 1) = unk_208236A50;
        *((_OWORD *)v80 + 2) = xmmword_208236A60;
        *((_OWORD *)v80 + 3) = unk_208236A70;
        v80 += 64;
        v79 -= 64;
      }
      while (v79);
      if (v69 != v70)
      {
        do
        {
          v81 = *((_OWORD *)v69 - 4);
          v82 = *((_OWORD *)v69 - 3);
          v83 = *((_OWORD *)v69 - 1);
          *((_OWORD *)v78 - 2) = *((_OWORD *)v69 - 2);
          *((_OWORD *)v78 - 1) = v83;
          *((_OWORD *)v78 - 4) = v81;
          *((_OWORD *)v78 - 3) = v82;
          v78 -= 64;
          v69 -= 64;
        }
        while (v69 != v70);
        v69 = *v144;
      }
      *(_QWORD *)(v4 + 760) = v78;
      *(_QWORD *)(v4 + 768) = &v77[64 * v68];
      *(_QWORD *)(v4 + 776) = &v77[64 * v76];
      if (v69)
        operator delete(v69);
    }
    v68 = *(_QWORD *)(v4 + 576);
    v84 = *(char **)(v4 + 720);
    v85 = *(char **)(v4 + 712);
    v86 = (v84 - v85) >> 4;
    v87 = v68 >= v86;
    v88 = v68 - v86;
    if (v68 <= v86)
      goto LABEL_172;
  }
  v89 = *(_QWORD *)(v4 + 728);
  if (v88 <= (v89 - (uint64_t)v84) >> 4)
  {
    bzero(v84, 16 * v88);
    *(_QWORD *)(v4 + 720) = &v84[16 * v88];
  }
  else
  {
    if (v68 >> 60)
      sub_207CA420C();
    v90 = v89 - (_QWORD)v85;
    v91 = v90 >> 3;
    if (v90 >> 3 <= v68)
      v91 = v68;
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
      v92 = 0xFFFFFFFFFFFFFFFLL;
    else
      v92 = v91;
    if (v92 >> 60)
      goto LABEL_238;
    v93 = (char *)operator new(16 * v92);
    v94 = &v93[16 * v86];
    v95 = &v93[16 * v92];
    bzero(v94, 16 * v88);
    v96 = &v94[16 * v88];
    if (v84 == v85)
    {
      *(_QWORD *)(v4 + 712) = v94;
      *(_QWORD *)(v4 + 720) = v96;
      *(_QWORD *)(v4 + 728) = v95;
    }
    else
    {
      do
      {
        v97 = *((_OWORD *)v84 - 1);
        v84 -= 16;
        *((_OWORD *)v94 - 1) = v97;
        v94 -= 16;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
      }
      while (v84 != v85);
      v84 = *(char **)(v4 + 712);
      v98 = *(char **)(v4 + 720);
      *(_QWORD *)(v4 + 712) = v94;
      *(_QWORD *)(v4 + 720) = v96;
      *(_QWORD *)(v4 + 728) = v95;
      while (v98 != v84)
      {
        v99 = (std::__shared_weak_count *)*((_QWORD *)v98 - 1);
        if (v99)
        {
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v98 -= 16;
      }
    }
    if (v84)
      operator delete(v84);
  }
LABEL_186:
  v108 = *(_QWORD *)(v4 + 576);
  v109 = *(char **)(v4 + 944);
  v110 = *(char **)(v4 + 936);
  v111 = 0xCCCCCCCCCCCCCCCDLL * ((v109 - v110) >> 3);
  v112 = v108 - v111;
  if (v108 <= v111)
  {
    if (v108 < v111)
      sub_207D438B8(v145, &v110[40 * v108]);
    goto LABEL_228;
  }
  v113 = *(_QWORD *)(v4 + 952);
  if (0xCCCCCCCCCCCCCCCDLL * ((v113 - (uint64_t)v109) >> 3) >= v112)
  {
    v131 = &v109[40 * v112];
    do
    {
      *(_OWORD *)v109 = 0uLL;
      *((_OWORD *)v109 + 1) = 0uLL;
      *((_DWORD *)v109 + 8) = 1065353216;
      v109 += 40;
    }
    while (v109 != v131);
    *(_QWORD *)(v4 + 944) = v131;
    goto LABEL_228;
  }
  if (v108 > 0x666666666666666)
    sub_207CA420C();
  v114 = 0xCCCCCCCCCCCCCCCDLL * ((v113 - (uint64_t)v110) >> 3);
  v115 = 2 * v114;
  if (2 * v114 <= v108)
    v115 = *(_QWORD *)(v4 + 576);
  if (v114 >= 0x333333333333333)
    v116 = 0x666666666666666;
  else
    v116 = v115;
  if (v116 > 0x666666666666666)
LABEL_238:
    sub_207CA3AB8();
  v117 = (char *)operator new(40 * v116);
  v118 = &v117[8 * ((v109 - v110) >> 3)];
  v119 = &v117[40 * v108];
  v120 = v118;
  do
  {
    *(_OWORD *)v120 = 0uLL;
    *((_OWORD *)v120 + 1) = 0uLL;
    *((_DWORD *)v120 + 8) = 1065353216;
    v120 += 40;
  }
  while (v120 != v119);
  v121 = &v117[40 * v116];
  if (v109 == v110)
  {
    *(_QWORD *)(v4 + 936) = v118;
    *(_QWORD *)(v4 + 944) = v119;
    *(_QWORD *)(v4 + 952) = v121;
  }
  else
  {
    v122 = 0;
    do
    {
      v124 = &v118[v122];
      v125 = &v109[v122];
      v126 = *(_QWORD *)&v109[v122 - 40];
      *((_QWORD *)v125 - 5) = 0;
      *((_QWORD *)v124 - 5) = v126;
      v127 = *(_QWORD *)&v109[v122 - 32];
      *((_QWORD *)v124 - 4) = v127;
      *((_QWORD *)v125 - 4) = 0;
      v128 = *(_QWORD *)&v109[v122 - 24];
      *((_QWORD *)v124 - 3) = v128;
      v129 = (uint64_t)&v118[v122 - 24];
      v130 = *(_QWORD *)&v109[v122 - 16];
      *(_QWORD *)(v129 + 8) = v130;
      *(_DWORD *)(v129 + 16) = *(_DWORD *)&v109[v122 - 8];
      if (v130)
      {
        v123 = *(_QWORD *)(v128 + 8);
        if ((v127 & (v127 - 1)) != 0)
        {
          if (v123 >= v127)
            v123 %= v127;
        }
        else
        {
          v123 &= v127 - 1;
        }
        *(_QWORD *)(v126 + 8 * v123) = v129;
        *(_QWORD *)&v109[v122 - 24] = 0;
        *(_QWORD *)&v109[v122 - 16] = 0;
      }
      v122 -= 40;
    }
    while (&v109[v122] != v110);
    v109 = *(char **)(v4 + 936);
    v132 = *(char **)(v4 + 944);
    *(_QWORD *)(v4 + 936) = &v118[v122];
    *(_QWORD *)(v4 + 944) = v119;
    *(_QWORD *)(v4 + 952) = v121;
    while (v132 != v109)
    {
      v133 = (void **)*((_QWORD *)v132 - 3);
      if (v133)
      {
        do
        {
          while (1)
          {
            v134 = (void **)*v133;
            v135 = (std::__shared_weak_count *)v133[6];
            if (v135)
            {
              v136 = (unint64_t *)&v135->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            if (*((char *)v133 + 39) < 0)
              break;
            operator delete(v133);
            v133 = v134;
            if (!v134)
              goto LABEL_223;
          }
          operator delete(v133[2]);
          operator delete(v133);
          v133 = v134;
        }
        while (v134);
      }
LABEL_223:
      v139 = (void *)*((_QWORD *)v132 - 5);
      v132 -= 40;
      v138 = v139;
      *(_QWORD *)v132 = 0;
      if (v139)
        operator delete(v138);
    }
  }
  if (v109)
    operator delete(v109);
LABEL_228:
  v153 = off_24C06E9E8;
  v140 = v156;
  if (v156)
  {
    v141 = (unint64_t *)&v156->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
      sub_207D04890((uint64_t)v162);
      if ((SHIBYTE(v161) & 0x80000000) == 0)
        goto LABEL_234;
      goto LABEL_233;
    }
  }
  sub_207D04890((uint64_t)v162);
  if (SHIBYTE(v161) < 0)
LABEL_233:
    operator delete((void *)__dst);
LABEL_234:
  kdebug_trace();
  return v4;
}

void sub_207DB3930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_207D046E4(a20);
  _Unwind_Resume(a1);
}

void sub_207DB3944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  sub_207C9C674(&a23);
  sub_207D68AA4((uint64_t)&__p);
  sub_207CD822C(v41 - 128);
  sub_207DB3B0C(a11);
  sub_207D06200((void **)(a20 + 928));
  sub_207CBBB7C((_QWORD **)(a20 + 920));
  sub_207D14AB4((void **)(a20 + 896));
  v43 = *a12;
  if (*a12)
  {
    *(_QWORD *)(a20 + 880) = v43;
    operator delete(v43);
    v44 = *a13;
    if (!*a13)
    {
LABEL_3:
      v45 = *a14;
      if (!*a14)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v44 = *a13;
    if (!*a13)
      goto LABEL_3;
  }
  *(_QWORD *)(a20 + 856) = v44;
  operator delete(v44);
  v45 = *a14;
  if (!*a14)
  {
LABEL_4:
    sub_207D39134(a16);
    v46 = *a10;
    if (!*a10)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_12:
  *(_QWORD *)(a20 + 832) = v45;
  operator delete(v45);
  sub_207D39134(a16);
  v46 = *a10;
  if (!*a10)
  {
LABEL_6:
    sub_207CBE108((void **)(a20 + 736));
    sub_207CBE108(a9);
    if (*(_BYTE *)(a20 + 704))
    {
      if (*(char *)(a20 + 703) < 0)
        operator delete(*a15);
    }
    sub_207D046E4(a20);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(_QWORD *)(a20 + 768) = v46;
  operator delete(v46);
  goto LABEL_6;
}

void **sub_207DB3B0C(void **a1)
{
  if (*a1)
  {
    sub_207D438B8((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_207DB3B44(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t a8, double a9, uint64_t *a10, uint64_t **a11, _QWORD *a12, float32x2_t **a13, char a14, int32x4_t *a15)
{
  uint64_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  int32x4_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int32x4_t *v67;
  int32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  _BYTE *v71;
  float32x2_t *v72;
  int32x4_t v73;
  float32x2_t v74;
  int32x4_t v75;
  int8x16_t v76;
  float v77;
  float32x2_t *v78;
  float32x2_t *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  int32x4_t v83;
  float32x4_t v84;
  char v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float32x2_t *v91;
  float32x2_t *v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t *v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float *v100;
  float v101;
  float v102;
  float32x2_t *v103;
  float32x2_t v104;
  int8x16_t v105;
  float32x2_t v106;
  float32x4_t v107;
  int8x16_t v108;
  int32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  float v127;
  unsigned __int8 v129;
  int8x8_t v130;
  float v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  std::__shared_weak_count *cat;
  unint64_t *v145;
  unint64_t v146;
  float v147;
  float v148;
  unsigned __int8 v150;
  int v151;
  uint64_t v152;
  float32x2_t v153;
  float32x2_t v154;
  __int32 v155;
  __int32 *v156;
  float32x2_t v157;
  int32x4_t v158;
  int32x4_t v159;
  float32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  float32x2_t v163;
  char *v164;
  uint64_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x4_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  int8x16_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  int32x4_t v200;
  int8x16_t v201;
  char *v202;
  unsigned __int8 v203;
  std::string *v204;
  size_t v205;
  size_t v206;
  __int128 *p_dst;
  char *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  int32x4_t v225;
  int8x16_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v246;
  uint64_t v247;
  float v248;
  float *v249;
  float v250;
  uint64_t v251;
  int v252;
  float *v253;
  float v254;
  float v255;
  char *v256;
  float32x2_t v257;
  uint64_t v258;
  float v259;
  uint64_t v260;
  uint64_t v261;
  float32x2_t v265;
  int8x8_t v266;
  float v267;
  int8x16_t v268;
  unsigned __int32 v269;
  unint64_t v270;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  float32x2_t v275;
  float32x2_t v276;
  float32x2_t v277;
  float32x4_t v278;
  float32x2_t v279;
  float32x2_t v280;
  float32x2_t v281;
  float32x2_t v282;
  float32x2_t v283;
  float32x2_t v284;
  float32x2_t v285;
  float32x2_t v286;
  float32x4_t v287;
  float32x2_t v288;
  int32x4_t v289;
  float32x2_t v290;
  float32x2_t v291;
  float32x2_t v292;
  int8x16_t v293;
  float32x2_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  float32x2_t v298;
  int32x2_t *v299;
  float32x2_t v300;
  float32x2_t v301;
  float32x2_t v302;
  float32x2_t v303;
  int8x16_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  unsigned __int8 v324;
  std::string *v325;
  size_t v326;
  size_t v327;
  __int128 *v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  void *v341;
  unint64_t v342;
  uint64_t v343;
  _DWORD *v344;
  char *v345;
  uint64_t v346;
  char *v347;
  int64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char *v353;
  char *v354;
  int64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  char *v361;
  char *v362;
  uint64_t v363;
  __int128 v364;
  int v365;
  float32x4_t *v366;
  float32x4_t *v367;
  float32x4_t v368;
  float32x4_t v369;
  char *v370;
  float32x4_t *v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  char *v375;
  float32x4_t *v376;
  float32x4_t v377;
  float32x4_t *v378;
  float32x4_t v379;
  uint64_t v380;
  float32x4_t v381;
  __int32 v382;
  float32x4_t *v383;
  uint64_t v384;
  unint64_t v385;
  int v386;
  float32x2_t *v387;
  unint64_t v388;
  unint64_t v389;
  char *v390;
  float32x2_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  float32x2_t *v400;
  unint64_t v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  int v414;
  int v415;
  char v416;
  const std::string::value_type *v417;
  std::string::size_type v418;
  std::string *v419;
  __int128 v420;
  std::string *v421;
  __int128 v422;
  int8x16_t *v423;
  std::string::size_type v424;
  std::string *v425;
  __int128 v426;
  void *v427;
  void **v428;
  uint64_t v429;
  _QWORD *v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  unint64_t *v460;
  unint64_t v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  int32x2_t *v465;
  float32x2_t v466;
  float32x2_t v467;
  float32x2_t v468;
  float32x4_t v469;
  float32x4_t v470;
  int8x16_t v471;
  float32x4_t v472;
  uint64_t v473;
  float32x2_t *v474;
  float32x4_t *v475;
  float32x4_t *v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t v480;
  char *v481;
  float32x4_t *v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  int8x16_t *v489;
  int8x16_t v490;
  int8x16_t v491;
  float32x4_t *v492;
  unint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  _BYTE *v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  char *v509;
  char *v510;
  char *v511;
  __int128 v512;
  uint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  unsigned __int8 v520;
  uint64_t v521;
  uint64_t v522;
  void *v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  unsigned __int8 v527;
  unsigned __int8 v528;
  char *v529;
  char *v530;
  void (**v531)(char *);
  unsigned __int8 v533;
  _QWORD *exception;
  _QWORD *v535;
  double v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  BOOL v544;
  float32x2_t v546;
  _QWORD *v548;
  int8x16_t v549;
  uint64_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  unint64_t i;
  float32x4_t v556;
  char v557;
  unint64_t v558;
  float32x4_t v559;
  int32x4_t v560;
  float32x4_t v561;
  char *v562;
  char *v563;
  int8x16_t v564;
  float32x4_t v565;
  float v566;
  unint64_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float v570;
  float32x4_t v571;
  float32x4_t v572;
  int8x16_t v573;
  uint64_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  int8x16_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  int8x16_t v583;
  float32x4_t v584;
  size_t __sz;
  int32x4_t __sza;
  float32x4_t __szb;
  int8x16_t __szc;
  size_t __szd[2];
  int32x4_t v590;
  float32x4_t v591;
  int8x16_t v592;
  int8x16_t v593;
  __int128 v594;
  int32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  __int128 v599;
  int32x4_t v600;
  float32x4_t v601;
  int8x16_t v602;
  float32x2_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  void *v608;
  void *v609;
  uint64_t v610;
  void *v611;
  char *v612;
  char *v613;
  void *v614;
  char *v615;
  char *v616;
  void *v617;
  float32x4_t *v618;
  float32x4_t *v619;
  void *v620;
  char *v621;
  char *v622;
  void *v623;
  _BYTE *v624;
  char *v625;
  int8x16_t v626;
  __int128 v627;
  int v628;
  std::string v629;
  void *v630[2];
  int64_t v631;
  __int128 v632;
  void *v633;
  _BYTE v634[15];
  __int16 v635;
  std::string __p[2];
  uint64_t v637;
  uint64_t v638;
  std::__shared_weak_count *v639;
  __int128 __dst;
  __int128 v641;
  int v642;
  char v643;
  std::error_condition v644;
  char v645;
  _DWORD v646[3];
  uint64_t v647;
  _BYTE v648[72];
  __int128 v649;
  int v650;
  __int128 v651;
  _BYTE v652[20];
  __int128 v653;
  __int128 v654;
  int v655;
  __int128 v656;
  __int128 v657;
  int v658;
  __int128 v659;
  __int128 v660;
  int8x16_t v661;
  __int128 v662;
  int32x4_t v663;
  int32x4_t v664;
  __int128 v665;
  int8x16_t v666;
  unsigned __int8 v667;
  _QWORD v668[5];

  v668[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v27 = a7[1];
  if (*a7 == v27)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return kdebug_trace();
  }
  v28 = *(_QWORD *)(a2 + 432);
  v29 = *(_QWORD *)(a2 + 464);
  v550 = a5;
  v548 = a7;
  v567 = v28;
  if (v29 != 1)
  {
    v31 = (v27 - *a7) >> 3;
    if (v29 >= v31 && v28 > 1)
    {
LABEL_14:
      if (v28 >= 0xAAAAAAAAAAAAAABLL)
        sub_207CA420C();
      goto LABEL_15;
    }
    if (v28 == 1 && v29 >= v31)
    {
LABEL_15:
      v33 = operator new(24 * v28);
      v34 = v33;
      do
      {
        v34[1] = 0;
        v34[2] = 0;
        *v34 = &off_24C08A5D8;
        v34 += 3;
      }
      while (v34 != &v33[3 * v28]);
      v624 = 0;
      v623 = 0;
      v625 = 0;
      v562 = (char *)v33;
      v541 = (char *)&v33[3 * v28];
      if (v28 > 0x71C71C71C71C71CLL)
        sub_207CA420C();
      v35 = (char *)operator new(36 * v28);
      v625 = &v35[36 * v28];
      __sz = 36 * v28;
      v623 = v35;
      v624 = v625;
      v544 = v28 == 0;
      if (!v28)
      {
LABEL_42:
        v621 = 0;
        v620 = 0;
        v622 = 0;
        v618 = 0;
        v617 = 0;
        v619 = 0;
        v58 = (char *)operator new(__sz);
        v616 = &v58[36 * v28];
        v614 = v58;
        v615 = &v58[__sz];
        v30 = v562;
        a7 = v548;
        goto LABEL_43;
      }
      v36 = 0;
      while (1)
      {
        if (!*(_BYTE *)(a2 + 472)
          || (v41 = *(_QWORD *)(a2 + 784),
              v42 = sub_20815C130(*a3 + 24 * v36),
              v43 = sub_20815C3B0(*a3 + 24 * v36),
              *(_QWORD *)(v41 + 288) == v42)
          && *(_QWORD *)(v41 + 296) == v43)
        {
          v44 = *a3 + 24 * v36;
          v46 = *(_QWORD *)(v44 + 8);
          v45 = *(_QWORD *)(v44 + 16);
          if (v45)
          {
            v47 = (unint64_t *)(v45 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          *(_QWORD *)&v562[24 * v36 + 8] = v46;
          v49 = &v562[24 * v36];
          v50 = (std::__shared_weak_count *)*((_QWORD *)v49 + 2);
          *((_QWORD *)v49 + 2) = v45;
          if (v50)
          {
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(p_shared_owners);
            while (__stlxr(v52 - 1, p_shared_owners));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v37 = *a6 + 36 * v36;
          v38 = (char *)v623 + 36 * v36;
          v39 = *(_OWORD *)v37;
          v40 = *(_OWORD *)(v37 + 16);
          *((_DWORD *)v38 + 8) = *(_DWORD *)(v37 + 32);
          *(_OWORD *)v38 = v39;
          *((_OWORD *)v38 + 1) = v40;
          goto LABEL_21;
        }
        v641 = 0u;
        __dst = 0u;
        v642 = 733237048;
        kdebug_trace();
        *(_QWORD *)&v648[16] = 0;
        *(_QWORD *)&v648[24] = 0;
        *(_OWORD *)v648 = xmmword_208236BB0;
        *(_OWORD *)&v648[32] = xmmword_208236BB0;
        sub_207DFF76C((VTPixelTransferSessionRef *)&v648[48]);
        *(_QWORD *)&v648[64] = &off_24C08A5D8;
        v649 = 0uLL;
        sub_207DF9C64((uint64_t)v648, *(_QWORD *)(a2 + 552), *(_QWORD *)(a2 + 560), *a3 + 24 * v36, (__int128 *)(*a6 + 36 * v36), (uint64_t)&v562[24 * v36], (uint64_t)v623 + 36 * v36);
        *(_QWORD *)&v648[64] = &off_24C08A5D8;
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v649 + 1);
        if (*((_QWORD *)&v649 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v649 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
            break;
        }
        v56 = *(_QWORD *)&v648[48];
        *(_QWORD *)&v648[48] = 0;
        if (v56)
          goto LABEL_38;
LABEL_39:
        kdebug_trace();
LABEL_21:
        if (++v36 == v28)
          goto LABEL_42;
      }
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      v57 = *(_QWORD *)&v648[48];
      *(_QWORD *)&v648[48] = 0;
      if (!v57)
        goto LABEL_39;
LABEL_38:
      (*(void (**)(void))&v648[56])();
      goto LABEL_39;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 221, (uint64_t)"inf.max_batch_size == 1 || (inf.max_batch_size >= objects.size() && inf.num_inference_cameras > 1) || (inf.max_batch_size >= objects.size() * num_inference_cams && inf.num_inference_cameras == 1)", 195, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  if (v28)
    goto LABEL_14;
  v541 = 0;
  v30 = 0;
  v624 = 0;
  v623 = 0;
  v625 = 0;
  v621 = 0;
  v620 = 0;
  v622 = 0;
  v618 = 0;
  v617 = 0;
  v619 = 0;
  v615 = 0;
  v614 = 0;
  v544 = 1;
  v616 = 0;
LABEL_43:
  v59 = a10;
  v612 = 0;
  v611 = 0;
  v613 = 0;
  v60 = a7[1];
  v563 = v30;
  if (v60 == *a7)
  {
    v65 = a7[1];
    goto LABEL_458;
  }
  v536 = a9;
  v540 = 0;
  v61 = 0;
  v62 = a15;
  v543 = a2 + 736;
  v63 = 0xAAAAAAAAAAAAAAABLL * ((v541 - v30) >> 3);
  v537 = 328 * v28;
  v538 = v63;
  v64 = *a7;
  do
  {
    v542 = v64;
    v66 = *(_QWORD *)(v64 + 8 * v61);
    if (v62[4].i8[0])
      v67 = v62;
    else
      v67 = (int32x4_t *)(v66 + 456);
    v595 = v67[1];
    v600 = *v67;
    v68 = v67[2];
    __sza = v67[3];
    v69.i32[3] = __sza.i32[3];
    v590 = v68;
    v69.i64[0] = *(_QWORD *)(v66 + 156);
    v69.i32[2] = *(_DWORD *)(v66 + 164);
    v580 = v69;
    v69.i64[0] = *(_QWORD *)(v66 + 144);
    v69.i32[2] = *(_DWORD *)(v66 + 152);
    v575 = v69;
    if (v63 != 0x8E38E38E38E38E39 * ((v624 - (_BYTE *)v623) >> 2)
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 257, (uint64_t)"pixel_buffers_processed.size() == K_c_vec_processed.size()", 58, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| v28 > (uint64_t)(*(_QWORD *)(a2 + 768) - *(_QWORD *)(a2 + 760)) >> 6&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 258, (uint64_t)"num_inference_cams <= T_c0cn_vec_.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| *(_BYTE *)(v550 + 24)&& v63 > (uint64_t)(*(_QWORD *)(v550 + 8) - *(_QWORD *)v550) >> 3&& sub_208216178(
           "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp",
           260,
           (uint64_t)"!buffer_expiration_times || pixel_buffers_processed.size() <= buffer_expiration_times->size()",
           93,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v558 = v61;
    if (!*(_BYTE *)(a2 + 667))
    {
      v72 = *(float32x2_t **)(v542 + 8 * v61);
      if (!v72[54].i8[4])
      {
        v73 = (int32x4_t)v549;
        v73.i8[0] = 0;
        v549 = (int8x16_t)v73;
        v557 = 1;
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    if (!*(_BYTE *)(*(_QWORD *)(v542 + 8 * v61) + 436)
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 266, (uint64_t)"object->Get3dProperties().up_vector", 35, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v70 = **(unsigned int **)(*(_QWORD *)(*a7 + 8 * v61) + 1104);
    if ((_DWORD)v70)
    {
      if ((_DWORD)v70 == 5)
      {
        v70 = 2;
      }
      else
      {
        v71 = &v648[12];
        if ((_DWORD)v70 != 4)
          goto LABEL_67;
        v70 = 1;
      }
    }
    v71 = &v648[4 * v70];
LABEL_67:
    if (v71 - v648 != 12 && *(_BYTE *)(a4 + 64))
    {
      v557 = 0;
      v69.i64[0] = *(_QWORD *)(a4 + 32);
      v69.i32[2] = *(_DWORD *)(a4 + 40);
      v549 = (int8x16_t)v69;
      goto LABEL_72;
    }
    v72 = *(float32x2_t **)(v542 + 8 * v61);
    if (!v72[54].i8[4])
      sub_207CA2A4C();
LABEL_71:
    v557 = 0;
    v74 = v72[53];
    v68.i32[0] = v72[54].i32[0];
    v23 = (int8x16_t)v590;
    *(float32x2_t *)v75.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v600.i8, v74.f32[0]), *(float32x2_t *)v595.i8, v74, 1), *(float32x2_t *)v590.i8, *(float *)v68.i32);
    v75.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v600, (int8x16_t)v600, 8uLL), v74), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v595, (int8x16_t)v595, 8uLL), v74, 1), *(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
    v549 = (int8x16_t)v75;
LABEL_72:
    v22 = (int32x4_t)vsubq_f32(v580, v575);
    v76 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
    v77 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1), *(float32x2_t *)v22.i8, 1), *(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8).f32[0]);
    if (!v544)
    {
      v152 = 0;
      v577 = (float32x4_t)vdupq_laneq_s32(v600, 2);
      v582 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v600.i8, 1);
      v569 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v595.i8, 1);
      v572 = (float32x4_t)vdupq_laneq_s32(v600, 3);
      v565 = (float32x4_t)vdupq_laneq_s32(v595, 2);
      v559 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v590.i8, 1);
      v561 = (float32x4_t)vdupq_laneq_s32(v595, 3);
      v554 = (float32x4_t)vdupq_laneq_s32(v590, 3);
      v556 = (float32x4_t)vdupq_laneq_s32(v590, 2);
      v552 = (float32x4_t)vdupq_laneq_s32(__sza, 2);
      v553 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)__sza.i8, 1);
      v551 = (float32x4_t)vdupq_laneq_s32(__sza, 3);
      v153 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v549.i8, 1);
      v546 = (float32x2_t)vextq_s8(v549, v549, 8uLL).u64[0];
      v154 = (float32x2_t)vdup_laneq_s32((int32x4_t)v549, 2);
      do
      {
        v155 = sub_20815A764((uint64_t)&v30[24 * v152]);
        v156 = wmemchr((__int32 *)"800Lf024v024NSt3__120__shared_ptr_pointerIPNS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEENS_14default_deleteIS7_EENS5_IS7_EEEE", v155, 3uLL);
        v164 = "NSt3__120__shared_ptr_pointerIPNS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEENS_14default_deleteIS7_EENS5_IS7_EEEE";
        if (v156)
          v164 = (char *)v156;
        if (v164
           - "800Lf024v024NSt3__120__shared_ptr_pointerIPNS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEENS_1"
             "4default_deleteIS7_EENS5_IS7_EEEE" == 12
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 291, (uint64_t)"Contains(kSupportedPixelFormatTypes, FormatOSType(pixel_buffers_processed[cam_idx].Format()))", 93, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v165 = *(_QWORD *)(a2 + 760) + (v152 << 6);
        v158.i64[0] = *(_QWORD *)v165;
        v158.i32[2] = *(_DWORD *)(v165 + 8);
        v159.i64[0] = *(_QWORD *)(v165 + 16);
        v159.i32[2] = *(_DWORD *)(v165 + 24);
        v157.i32[0] = *(_DWORD *)(v165 + 40);
        v166 = *(float32x2_t *)(v165 + 32);
        v160.i64[0] = *(_QWORD *)(v165 + 48);
        v160.i32[2] = *(_DWORD *)(v165 + 56);
        LOBYTE(v633) = 0;
        v634[4] = 0;
        if ((v557 & 1) == 0)
        {
          v161.i64[0] = *(_QWORD *)v165;
          v162.i64[0] = *(_QWORD *)(v165 + 16);
          v167 = (float32x2_t)vzip1_s32(*(int32x2_t *)v165, *(int32x2_t *)v162.i8);
          v161.i32[2] = *(_DWORD *)(v165 + 8);
          v162.i32[2] = *(_DWORD *)(v165 + 24);
          v162.i64[0] = vtrn2q_s32(v161, v162).u64[0];
          v161.i32[3] = v162.i32[2];
          v163.i32[0] = *(_DWORD *)(v165 + 40);
          *(_DWORD *)v634 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v165 + 32), *(float32x2_t *)v549.i8), v153, *(float32x2_t *)(v165 + 32), 1), v546, v163).u32[0];
          v633 = (void *)vmla_f32(vmla_f32(vmul_n_f32(v167, *(float *)v549.i32), v153, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v162.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v162.i8, 1), 0xCuLL)), v154, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL));
          v634[4] = 1;
        }
        v168.i64[0] = vzip1q_s32(v158, v159).u64[0];
        v169 = (int8x16_t)vnegq_f32(v160);
        v168.i64[1] = v166.u32[0];
        v170 = (int8x16_t)vtrn2q_s32(v158, v159);
        v170.i32[2] = v166.i32[1];
        v171 = vzip2q_s32(v158, v159);
        *(float32x2_t *)v172.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v168.f32, *(float *)v169.i32), *(float32x2_t *)v170.i8, *(float32x2_t *)v160.f32, 1), *(float32x2_t *)v171.i8, v160, 2);
        v171.i32[2] = v157.i32[0];
        v172.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v166, *(float32x2_t *)v169.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v166, 1), *(float32x2_t *)v160.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL), v157).u32[0]);
        v173.i32[3] = 0;
        v173.i32[0] = v170.i32[0];
        v175 = vextq_s8(vextq_s8(v170, v170, 0xCuLL), (int8x16_t)v171, 8uLL);
        v174.i64[0] = v175.i64[1];
        *(uint64_t *)((char *)v173.i64 + 4) = v175.i64[0];
        v174.i64[1] = vdupq_laneq_s32(v171, 2).u32[0];
        v176 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v168, *(float *)v600.i32), v582, v173), v577, v174), v572, v172);
        v177 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v168, *(float *)v595.i32), v569, v173), v565, v174), v561, v172);
        v178 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v168, *(float *)v590.i32), v559, v173), v556, v174), v554, v172);
        v179 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v168, *(float *)__sza.i32), v553, v173), v552, v174);
        v173.i32[3] = v551.i32[3];
        v173.i64[0] = *(_QWORD *)(v66 + 144);
        v173.i32[2] = *(_DWORD *)(v66 + 152);
        v174.i64[0] = *(_QWORD *)(v66 + 156);
        v174.i32[2] = *(_DWORD *)(v66 + 164);
        v180 = vaddq_f32(v173, v174);
        v174.i64[0] = 0x3F0000003F000000;
        v174.i64[1] = 0x3F0000003F000000;
        v181 = (int8x16_t)vmulq_f32(v180, v174);
        *(float32x2_t *)v174.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v176.i8, *(float *)v181.i32), *(float32x2_t *)v177.i8, *(float32x2_t *)v181.i8, 1), *(float32x2_t *)v178.i8, (float32x4_t)v181, 2);
        v182 = (float32x4_t)vextq_s8(v176, v176, 8uLL);
        *(float32x2_t *)v182.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v181.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL), *(float32x2_t *)v181.i8, 1);
        v177.i64[0] = vextq_s8(v178, v178, 8uLL).u64[0];
        *(float32x2_t *)v182.f32 = vmla_f32(*(float32x2_t *)v182.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v181, v181, 8uLL), *(float32x2_t *)v177.i8);
        v174.i64[1] = v182.i64[0];
        v183 = vaddq_f32(v174, vmlaq_f32(v179, v551, v172));
        DWORD2(__dst) = v183.i32[2];
        *(_QWORD *)&__dst = v183.i64[0];
        v182.i32[0] = *(_DWORD *)(a2 + 572);
        sub_207DB78AC((uint64_t)v648, (uint64_t)v623 + 36 * v152, (int32x2_t *)&v633, (int32x2_t *)&__dst, *(_QWORD *)(a2 + 360), *(_QWORD *)(a2 + 352), v77, v182, *(float32x2_t *)v177.i8);
        v184 = v667;
        if (v667)
        {
          sub_207DB84D8((uint64_t)v648);
          v186 = (char *)a10[1];
          v185 = a10[2];
          if ((unint64_t)v186 < v185)
          {
            *(_QWORD *)v186 = *(_QWORD *)v648;
            v187 = *(_QWORD *)&v648[8];
            *((_DWORD *)v186 + 4) = *(_DWORD *)&v648[16];
            *((_QWORD *)v186 + 1) = v187;
            v188 = *(_OWORD *)&v648[20];
            v189 = *(_OWORD *)&v648[36];
            *((_DWORD *)v186 + 13) = *(_DWORD *)&v648[52];
            *(_OWORD *)(v186 + 36) = v189;
            *(_OWORD *)(v186 + 20) = v188;
            v190 = *(_OWORD *)&v648[56];
            v191 = v649;
            *((_DWORD *)v186 + 22) = v650;
            *(_OWORD *)(v186 + 72) = v191;
            *(_OWORD *)(v186 + 56) = v190;
            v192 = v651;
            v193 = *(_OWORD *)v652;
            *((_DWORD *)v186 + 31) = *(_DWORD *)&v652[16];
            *(_OWORD *)(v186 + 108) = v193;
            *(_OWORD *)(v186 + 92) = v192;
            v194 = v653;
            v195 = v654;
            *((_DWORD *)v186 + 40) = v655;
            *((_OWORD *)v186 + 8) = v194;
            *((_OWORD *)v186 + 9) = v195;
            v196 = v656;
            v197 = v657;
            *((_DWORD *)v186 + 49) = v658;
            *(_OWORD *)(v186 + 180) = v197;
            *(_OWORD *)(v186 + 164) = v196;
            v198 = v659;
            v199 = v660;
            v76 = v661;
            *(_OWORD *)(v186 + 248) = v662;
            *(int8x16_t *)(v186 + 232) = v76;
            *(_OWORD *)(v186 + 216) = v199;
            *(_OWORD *)(v186 + 200) = v198;
            v22 = v663;
            v200 = v664;
            v76.i64[1] = *((_QWORD *)&v665 + 1);
            v201 = v666;
            *(_OWORD *)(v186 + 296) = v665;
            *(int8x16_t *)(v186 + 312) = v201;
            *(int32x4_t *)(v186 + 264) = v22;
            *(int32x4_t *)(v186 + 280) = v200;
            v202 = v186 + 328;
            goto LABEL_186;
          }
          v208 = (char *)*a10;
          v209 = 0x8F9C18F9C18F9C19 * ((uint64_t)&v186[-*a10] >> 3);
          v210 = v209 + 1;
          if (v209 + 1 > 0xC7CE0C7CE0C7CELL)
            sub_207CA420C();
          v211 = 0x8F9C18F9C18F9C19 * ((uint64_t)(v185 - (_QWORD)v208) >> 3);
          if (2 * v211 > v210)
            v210 = 2 * v211;
          if (v211 >= 0x63E7063E7063E7)
            v212 = 0xC7CE0C7CE0C7CELL;
          else
            v212 = v210;
          if (v212)
          {
            if (v212 > 0xC7CE0C7CE0C7CELL)
              sub_207CA3AB8();
            v213 = (char *)operator new(328 * v212);
          }
          else
          {
            v213 = 0;
          }
          v216 = *(_QWORD *)&v648[8];
          v217 = &v213[328 * v209];
          *(_QWORD *)v217 = *(_QWORD *)v648;
          *((_QWORD *)v217 + 1) = v216;
          *((_DWORD *)v217 + 4) = *(_DWORD *)&v648[16];
          v218 = *(_OWORD *)&v648[36];
          *(_OWORD *)(v217 + 20) = *(_OWORD *)&v648[20];
          *(_OWORD *)(v217 + 36) = v218;
          *((_DWORD *)v217 + 13) = *(_DWORD *)&v648[52];
          *((_DWORD *)v217 + 22) = v650;
          v219 = *(_OWORD *)&v648[56];
          *(_OWORD *)(v217 + 72) = v649;
          *(_OWORD *)(v217 + 56) = v219;
          *((_DWORD *)v217 + 31) = *(_DWORD *)&v652[16];
          v220 = v651;
          *(_OWORD *)(v217 + 108) = *(_OWORD *)v652;
          *(_OWORD *)(v217 + 92) = v220;
          *((_DWORD *)v217 + 40) = v655;
          v221 = v654;
          *((_OWORD *)v217 + 8) = v653;
          *((_OWORD *)v217 + 9) = v221;
          v222 = v657;
          *(_OWORD *)(v217 + 164) = v656;
          *(_OWORD *)(v217 + 180) = v222;
          *((_DWORD *)v217 + 49) = v658;
          v223 = v659;
          v224 = v660;
          v76 = v661;
          *(_OWORD *)(v217 + 248) = v662;
          *(int8x16_t *)(v217 + 232) = v76;
          *(_OWORD *)(v217 + 216) = v224;
          *(_OWORD *)(v217 + 200) = v223;
          v22 = v663;
          v225 = v664;
          v76.i64[1] = *((_QWORD *)&v665 + 1);
          v226 = v666;
          *(_OWORD *)(v217 + 296) = v665;
          *(int8x16_t *)(v217 + 312) = v226;
          *(int32x4_t *)(v217 + 264) = v22;
          *(int32x4_t *)(v217 + 280) = v225;
          if (v186 == v208)
          {
            v202 = v217 + 328;
            *a10 = (uint64_t)v217;
            a10[1] = (uint64_t)(v217 + 328);
            a10[2] = (uint64_t)&v213[328 * v212];
            if (v186)
              goto LABEL_185;
          }
          else
          {
            v227 = (uint64_t)&v213[328 * v209 - 328];
            v228 = v186 - 328;
            do
            {
              *(_QWORD *)v227 = *(_QWORD *)v228;
              v229 = *((_QWORD *)v228 + 1);
              *(_DWORD *)(v227 + 16) = *((_DWORD *)v228 + 4);
              *(_QWORD *)(v227 + 8) = v229;
              v230 = *(_OWORD *)(v228 + 20);
              v231 = *(_OWORD *)(v228 + 36);
              *(_DWORD *)(v227 + 52) = *((_DWORD *)v228 + 13);
              *(_OWORD *)(v227 + 36) = v231;
              *(_OWORD *)(v227 + 20) = v230;
              v232 = *(_OWORD *)(v228 + 56);
              v233 = *(_OWORD *)(v228 + 72);
              *(_DWORD *)(v227 + 88) = *((_DWORD *)v228 + 22);
              *(_OWORD *)(v227 + 72) = v233;
              *(_OWORD *)(v227 + 56) = v232;
              v234 = *(_OWORD *)(v228 + 92);
              v235 = *(_OWORD *)(v228 + 108);
              *(_DWORD *)(v227 + 124) = *((_DWORD *)v228 + 31);
              *(_OWORD *)(v227 + 108) = v235;
              *(_OWORD *)(v227 + 92) = v234;
              v236 = *((_OWORD *)v228 + 8);
              v237 = *((_OWORD *)v228 + 9);
              *(_DWORD *)(v227 + 160) = *((_DWORD *)v228 + 40);
              *(_OWORD *)(v227 + 128) = v236;
              *(_OWORD *)(v227 + 144) = v237;
              v238 = *(_OWORD *)(v228 + 164);
              v239 = *(_OWORD *)(v228 + 180);
              *(_DWORD *)(v227 + 196) = *((_DWORD *)v228 + 49);
              *(_OWORD *)(v227 + 180) = v239;
              *(_OWORD *)(v227 + 164) = v238;
              v240 = *(_OWORD *)(v228 + 200);
              v241 = *(_OWORD *)(v228 + 216);
              v242 = *(_OWORD *)(v228 + 232);
              *(_OWORD *)(v227 + 248) = *(_OWORD *)(v228 + 248);
              *(_OWORD *)(v227 + 232) = v242;
              *(_OWORD *)(v227 + 216) = v241;
              *(_OWORD *)(v227 + 200) = v240;
              v22 = *(int32x4_t *)(v228 + 264);
              v243 = *(_OWORD *)(v228 + 280);
              v76 = *(int8x16_t *)(v228 + 296);
              v244 = *(_OWORD *)(v228 + 312);
              *(int8x16_t *)(v227 + 296) = v76;
              *(_OWORD *)(v227 + 312) = v244;
              *(int32x4_t *)(v227 + 264) = v22;
              *(_OWORD *)(v227 + 280) = v243;
              v227 -= 328;
              _ZF = v228 == v208;
              v228 -= 328;
            }
            while (!_ZF);
            v186 = (char *)*a10;
            v202 = v217 + 328;
            *a10 = v227 + 328;
            a10[1] = (uint64_t)(v217 + 328);
            a10[2] = (uint64_t)&v213[328 * v212];
            if (v186)
LABEL_185:
              operator delete(v186);
          }
LABEL_186:
          a10[1] = (uint64_t)v202;
          if (v667)
            goto LABEL_194;
          goto LABEL_187;
        }
        v203 = atomic_load((unsigned __int8 *)&qword_25452B598);
        if ((v203 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
        {
          __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
          __cxa_guard_release(&qword_25452B598);
        }
        *(_QWORD *)&v644.__val_ = 15;
        v644.__cat_ = (const std::error_category *)&off_253E50C48;
        if (v667)
        {
          exception = __cxa_allocate_exception(8uLL);
          *exception = &off_24C072430;
          __cxa_throw(exception, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
        }
        sub_208212E0C((uint64_t)v648, __p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v204 = __p;
        else
          v204 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        v205 = strlen((const char *)v204);
        if (v205 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        v206 = v205;
        if (v205 >= 0x17)
        {
          v214 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v205 | 7) != 0x17)
            v214 = v205 | 7;
          v215 = v214 + 1;
          p_dst = (__int128 *)operator new(v214 + 1);
          *(_QWORD *)&v641 = v215 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
          *((_QWORD *)&__dst + 1) = v206;
          v30 = v563;
        }
        else
        {
          BYTE7(v641) = v205;
          p_dst = &__dst;
          if (!v205)
            goto LABEL_172;
        }
        memmove(p_dst, v204, v206);
LABEL_172:
        *((_BYTE *)p_dst + v206) = 0;
        sub_207D01528(&v644, (uint64_t)&__dst, (CFErrorRef *)a1);
        v28 = v567;
        if (SBYTE7(v641) < 0)
        {
          operator delete((void *)__dst);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_177:
            operator delete(__p[0].__r_.__value_.__l.__data_);
            if (v667)
              goto LABEL_194;
            goto LABEL_187;
          }
        }
        else if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_177;
        }
        if (v667)
          goto LABEL_194;
LABEL_187:
        if (!v652[4])
          goto LABEL_194;
        if (!BYTE12(v651))
        {
LABEL_191:
          if (v648[40])
            goto LABEL_192;
          goto LABEL_194;
        }
        if (SBYTE11(v651) < 0)
        {
          operator delete(*((void **)&v649 + 1));
          if ((v648[71] & 0x80000000) == 0)
            goto LABEL_191;
        }
        else if ((v648[71] & 0x80000000) == 0)
        {
          goto LABEL_191;
        }
        operator delete(*(void **)&v648[48]);
        if (v648[40])
        {
LABEL_192:
          if ((v648[39] & 0x80000000) != 0)
            operator delete(*(void **)&v648[16]);
        }
LABEL_194:
        if (!v184)
          goto LABEL_540;
        ++v152;
      }
      while (v152 != v28);
    }
    v59 = a10;
    if (a14)
    {
      v79 = *a13;
      v78 = a13[1];
      if (0xCF3CF3CF3CF3CF3DLL * (((char *)v78 - (char *)*a13) >> 6) >= 2)
      {
        v80 = *(_QWORD *)(v542 + 8 * v558);
        v81 = *(_QWORD *)(a2 + 432);
        __dst = 0uLL;
        *(_QWORD *)&v641 = 0;
        if (v81)
        {
          if (v81 >> 61)
            sub_207CA420C();
          v82 = (char *)operator new(8 * v81);
          *(_QWORD *)&v641 = &v82[8 * v81];
          *(_QWORD *)&__dst = v82;
          *((_QWORD *)&__dst + 1) = v641;
          if (v79 == v78)
            goto LABEL_256;
          v85 = 0;
          v86 = 0;
          v87 = (float)*(unint64_t *)(a2 + 360);
          v88 = (float)*(unint64_t *)(a2 + 352);
          v89 = (float)(v87 + -1.0) * 0.5;
          *(float *)v22.i32 = v88 + -1.0;
          v90 = (float)(v88 + -1.0) * 0.5;
          for (i = v81; i != v86; v81 = i)
          {
            v92 = *a13;
            v91 = a13[1];
            if (*a13 != v91)
            {
              v93 = *a10 + 328 * (-(uint64_t)v81 - 0x7063E7063E7063E7 * ((a10[1] - *a10) >> 3) + v86);
              v94 = v93 + 92;
              v95 = (float32x4_t *)(v93 + 264);
              do
              {
                if (*(_QWORD *)(v80 + 40) != *(_QWORD *)&v92[5])
                {
                  v103 = (float32x2_t *)(*(_QWORD *)(a2 + 760) + (v86 << 6));
                  *(float32x2_t *)v22.i8 = *v103;
                  v22.i32[2] = v103[1].i32[0];
                  *(float32x2_t *)v83.i8 = v103[2];
                  v83.i32[2] = v103[3].i32[0];
                  *(float32x2_t *)v84.f32 = v103[6];
                  v84.i32[2] = v103[7].i32[0];
                  v104 = (float32x2_t)vzip1q_s32(v22, v83).u64[0];
                  v105 = (int8x16_t)vnegq_f32(v84);
                  v106 = vmul_n_f32(v104, *(float *)v105.i32);
                  *(float32x2_t *)v107.f32 = v104;
                  v104.i32[0] = v103[5].i32[0];
                  v108 = (int8x16_t)vtrn2q_s32(v22, v83);
                  v108.i32[2] = HIDWORD(*(_QWORD *)&v103[4]);
                  v109 = vzip2q_s32(v22, v83);
                  v110 = v109;
                  v110.i32[2] = v104.i32[0];
                  *(float32x2_t *)v111.f32 = vmls_laneq_f32(vmls_lane_f32(v106, *(float32x2_t *)v108.i8, *(float32x2_t *)v84.f32, 1), *(float32x2_t *)v109.i8, v84, 2);
                  v111.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v103[4], *(float32x2_t *)v105.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v103[4], 1), *(float32x2_t *)v84.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL), v104).u32[0]);
                  v112 = vextq_s8(vextq_s8(v108, v108, 0xCuLL), (int8x16_t)v110, 8uLL);
                  v105.i64[0] = __PAIR64__(v112.u32[0], v108.u32[0]);
                  v105.i64[1] = v112.u32[1];
                  v108.i64[0] = v112.i64[1];
                  v108.i64[1] = vdupq_laneq_s32(v110, 2).u32[0];
                  v107.i64[1] = *(_QWORD *)&v103[4];
                  v113 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, COERCE_FLOAT(*(_OWORD *)v92[57].f32)), (float32x4_t)v105, v92[57], 1), (float32x4_t)v108, *(float32x4_t *)v92[57].f32, 2), v111, *(float32x4_t *)v92[57].f32, 3);
                  v114 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, COERCE_FLOAT(*(_OWORD *)v92[59].f32)), (float32x4_t)v105, v92[59], 1), (float32x4_t)v108, *(float32x4_t *)v92[59].f32, 2), v111, *(float32x4_t *)v92[59].f32, 3);
                  v115 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, COERCE_FLOAT(*(_OWORD *)v92[61].f32)), (float32x4_t)v105, v92[61], 1), (float32x4_t)v108, *(float32x4_t *)v92[61].f32, 2), v111, *(float32x4_t *)v92[61].f32, 3);
                  v591 = (float32x4_t)v105;
                  v596 = v107;
                  v601 = v111;
                  v116 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, COERCE_FLOAT(*(_OWORD *)v92[63].f32)), (float32x4_t)v105, v92[63], 1), (float32x4_t)v108, *(float32x4_t *)v92[63].f32, 2), v111, *(float32x4_t *)v92[63].f32, 3);
                  v568 = *(float32x4_t *)(v80 + 456);
                  v571 = *(float32x4_t *)(v80 + 472);
                  v576 = *(float32x4_t *)(v80 + 488);
                  v581 = *(float32x4_t *)(v80 + 504);
                  __szb = (float32x4_t)v108;
                  v117 = v95[1];
                  v118 = v95[2];
                  v119 = v95[3];
                  v120 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v95, v113.f32[0]), v117, *(float32x2_t *)v113.f32, 1), v118, v113, 2), v119, v113, 3);
                  v121 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v95, v114.f32[0]), v117, *(float32x2_t *)v114.f32, 1), v118, v114, 2), v119, v114, 3);
                  v122 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v95, v115.f32[0]), v117, *(float32x2_t *)v115.f32, 1), v118, v115, 2), v119, v115, 3);
                  v123 = vmlaq_lane_f32(vmulq_n_f32(*v95, v116.f32[0]), v117, *(float32x2_t *)v116.f32, 1);
                  *(float32x4_t *)v648 = v120;
                  *(float32x4_t *)&v648[16] = v121;
                  *(float32x4_t *)&v648[32] = v122;
                  *(float32x4_t *)&v648[48] = vmlaq_laneq_f32(vmlaq_laneq_f32(v123, v118, v116, 2), v119, v116, 3);
                  v626.i64[0] = 8;
                  v626.i64[1] = (uint64_t)&v92[21];
                  *(_QWORD *)v634 = 0;
                  v633 = 0;
                  sub_207DE48FC(v94, (float32x2_t *)v648, (unint64_t *)&v626, 0, (uint64_t *)&v633, (int8x16_t *)__p);
                  v124 = *(std::__shared_weak_count **)v634;
                  if (*(_QWORD *)v634)
                  {
                    v125 = (unint64_t *)(*(_QWORD *)v634 + 8);
                    do
                      v126 = __ldaxr(v125);
                    while (__stlxr(v126 - 1, v125));
                    if (!v126)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  *(float32x2_t *)v22.i8 = vmaxnm_f32((float32x2_t)__p[0].__r_.__value_.__l.__data_, 0);
                  v84.f32[0] = fminf(*(float *)&__p[0].__r_.__value_.__r.__words[1], v87);
                  v127 = fminf(*((float *)&__p[0].__r_.__value_.__r.__words[1] + 1), v88);
                  if (*(float *)v22.i32 < v84.f32[0] && *(float *)&v22.i32[1] < v127)
                  {
                    v130 = (int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v84.f32), 0);
                    v24 = (float32x4_t)v22;
                    v24.f32[1] = v127;
                    *(int8x8_t *)v24.f32 = vbsl_s8(v130, *(int8x8_t *)v24.f32, (int8x8_t)__PAIR64__(LODWORD(v127), v84.u32[0]));
                    *(int8x8_t *)v84.f32 = vbsl_s8(v130, (int8x8_t)__PAIR64__(v22.u32[1], v84.u32[0]), *(int8x8_t *)v22.i8);
                    if (*(float *)&v22.i32[1] > v127)
                    {
                      v84.f32[1] = v127;
                      v24.i32[1] = v22.i32[1];
                    }
                  }
                  else
                  {
                    v129 = atomic_load((unsigned __int8 *)&qword_253E50C58);
                    if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C58))
                    {
                      qword_25452BE08 = 0;
                      *(_QWORD *)&dword_25452BE10 = 0;
                      __cxa_guard_release(&qword_253E50C58);
                    }
                    v84.i64[0] = qword_25452BE08;
                    v24.i64[0] = *(_QWORD *)&dword_25452BE10;
                  }
                  *(float32x2_t *)v22.i8 = vsub_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v84.f32);
                  v131 = v24.f32[1];
                  v132 = v84.f32[1];
                  *(float *)v22.i32 = (float)(v24.f32[1] - v84.f32[1]) * *(float *)v22.i32;
                  if (*(float *)v22.i32 != 0.0)
                  {
                    v560 = (int32x4_t)v84;
                    v564 = (int8x16_t)v24;
                    v133 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v596, v568.f32[0]), v591, *(float32x2_t *)v568.f32, 1), __szb, v568, 2), v601, v568, 3);
                    v134 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v596, v571.f32[0]), v591, *(float32x2_t *)v571.f32, 1), __szb, v571, 2), v601, v571, 3);
                    v135 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v596, v576.f32[0]), v591, *(float32x2_t *)v576.f32, 1), __szb, v576, 2), v601, v576, 3);
                    v136 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v596, v581.f32[0]), v591, *(float32x2_t *)v581.f32, 1), __szb, v581, 2), v601, v581, 3);
                    v137 = v95[1];
                    v138 = v95[2];
                    v139 = v95[3];
                    v140 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v95, v133.f32[0]), v137, *(float32x2_t *)v133.f32, 1), v138, v133, 2), v139, v133, 3);
                    v141 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v95, v134.f32[0]), v137, *(float32x2_t *)v134.f32, 1), v138, v134, 2), v139, v134, 3);
                    v142 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v95, v135.f32[0]), v137, *(float32x2_t *)v135.f32, 1), v138, v135, 2), v139, v135, 3);
                    v143 = vmlaq_lane_f32(vmulq_n_f32(*v95, v136.f32[0]), v137, *(float32x2_t *)v136.f32, 1);
                    *(float32x4_t *)v648 = v140;
                    *(float32x4_t *)&v648[16] = v141;
                    *(float32x4_t *)&v648[32] = v142;
                    *(float32x4_t *)&v648[48] = vmlaq_laneq_f32(vmlaq_laneq_f32(v143, v138, v136, 2), v139, v136, 3);
                    v633 = (void *)8;
                    *(_QWORD *)v634 = v80 + 168;
                    v644.__cat_ = 0;
                    *(_QWORD *)&v644.__val_ = 0;
                    sub_207DE48FC(v94, (float32x2_t *)v648, (unint64_t *)&v633, 0, (uint64_t *)&v644.__val_, &v626);
                    cat = (std::__shared_weak_count *)v644.__cat_;
                    v23 = v564;
                    if (v644.__cat_)
                    {
                      v145 = (unint64_t *)&v644.__cat_[1];
                      do
                        v146 = __ldaxr(v145);
                      while (__stlxr(v146 - 1, v145));
                      if (!v146)
                      {
                        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
                        std::__shared_weak_count::__release_weak(cat);
                        v23 = v564;
                      }
                    }
                    v147 = fmaxf(*(float *)v626.i32, 0.0);
                    v99 = fmaxf(*(float *)&v626.i32[1], 0.0);
                    v97 = fminf(*(float *)&v626.i32[2], v87);
                    v148 = fminf(*(float *)&v626.i32[3], v88);
                    if (v147 < v97 && v99 < v148)
                    {
                      if (v147 <= v97)
                        v96 = v97;
                      else
                        v96 = v147;
                      if (v147 <= v97)
                        v97 = v147;
                      if (v99 > v148)
                        v98 = v99;
                      else
                        v98 = v148;
                      if (v99 > v148)
                        v99 = v148;
                    }
                    else
                    {
                      v150 = atomic_load((unsigned __int8 *)&qword_253E50C58);
                      if ((v150 & 1) == 0)
                      {
                        v151 = __cxa_guard_acquire(&qword_253E50C58);
                        v23 = v564;
                        if (v151)
                        {
                          qword_25452BE08 = 0;
                          *(_QWORD *)&dword_25452BE10 = 0;
                          __cxa_guard_release(&qword_253E50C58);
                          v23 = v564;
                        }
                      }
                      v99 = *((float *)&qword_25452BE08 + 1);
                      v97 = *(float *)&qword_25452BE08;
                      v96 = *(float *)&dword_25452BE10;
                      v98 = *(float *)&dword_25452BE14;
                    }
                    v100 = (float *)(__dst + 8 * v86);
                    v24.i32[3] = v560.i32[3];
                    v101 = 0.5 * vadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v560.i8).f32[0];
                    if (v97 >= *(float *)v23.i32)
                      v97 = *(float *)v23.i32;
                    if (*(float *)v560.i32 >= v96)
                      v96 = *(float *)v560.i32;
                    v102 = v96 - v87;
                    if (v101 <= v89)
                      v102 = v97;
                    if (fabsf(*v100) >= fabsf(v102))
                      v102 = *v100;
                    if (v99 >= v131)
                      v99 = v131;
                    if (v132 >= v98)
                      v98 = v132;
                    *(float *)v22.i32 = v98 - v88;
                    if ((float)((float)(v131 + v132) * 0.5) <= v90)
                      *(float *)v22.i32 = v99;
                    if (fabsf(v100[1]) >= fabsf(*(float *)v22.i32))
                      v22.i32[0] = (__int32)v100[1];
                    *v100 = v102;
                    v100[1] = *(float *)v22.i32;
                    v85 = 1;
                  }
                }
                v92 += 168;
              }
              while (v92 != v91);
            }
            ++v86;
          }
          v59 = a10;
          if ((v85 & 1) == 0)
          {
            v82 = (char *)__dst;
            v30 = v563;
            v28 = v567;
            if (!(_QWORD)__dst)
              goto LABEL_257;
LABEL_256:
            operator delete(v82);
            goto LABEL_257;
          }
          v246 = 0;
          v247 = 0;
          v248 = v87 + v88;
          v249 = (float *)(__dst + 4);
          v30 = v563;
          v28 = v567;
          do
          {
            v250 = fabsf(*(v249 - 1)) + fabsf(*v249);
            if (v250 < v248)
            {
              v248 = v250;
              v246 = v247;
            }
            ++v247;
            v249 += 2;
          }
          while (i != v247);
          v251 = *a10 + 328 * (-(uint64_t)i - 0x7063E7063E7063E7 * ((a10[1] - *a10) >> 3) + v246);
          v252 = **(_DWORD **)(v80 + 1104);
          v253 = (float *)(__dst + 8 * v246);
          v255 = *v253;
          v254 = v253[1];
          v256 = (char *)v623 + 36 * v246;
          v566 = *(float *)v256;
          v570 = *((float *)v256 + 4);
          v257 = *(float32x2_t *)(v256 + 24);
          v258 = *(_QWORD *)(a2 + 760) + (v246 << 6);
          v259 = *(float *)v251;
          v22.i64[0] = *(_QWORD *)(v251 + 128);
          v22.i32[2] = *(_DWORD *)(v251 + 136);
          v573 = (int8x16_t)v22;
          v22.i64[0] = *(_QWORD *)(v251 + 140);
          v22.i32[2] = *(_DWORD *)(v251 + 148);
          v578 = (int8x16_t)v22;
          v22.i64[0] = *(_QWORD *)(v251 + 152);
          v22.i32[2] = *(_DWORD *)(v251 + 160);
          v583 = (int8x16_t)v22;
          v22.i64[0] = *(_QWORD *)v258;
          v22.i32[2] = *(_DWORD *)(v258 + 8);
          v602 = (int8x16_t)v22;
          v22.i64[0] = *(_QWORD *)(v258 + 16);
          v22.i32[2] = *(_DWORD *)(v258 + 24);
          v592 = (int8x16_t)v22;
          v22.i64[0] = *(_QWORD *)(v258 + 32);
          v22.i32[2] = *(_DWORD *)(v258 + 40);
          __szc = (int8x16_t)v22;
          v22.i64[0] = *(_QWORD *)(v258 + 48);
          v22.i32[2] = *(_DWORD *)(v258 + 56);
          v597 = (float32x4_t)v22;
          operator delete((void *)__dst);
          if (!v544)
          {
            v260 = 0;
            v261 = 0;
            v266 = (int8x8_t)vceqz_f32((float32x2_t)__PAIR64__(LODWORD(v570), LODWORD(v566)));
            __asm { FMOV            V2.2S, #1.0 }
            v265 = (float32x2_t)vbsl_s8(v266, _D2, (int8x8_t)__PAIR64__(LODWORD(v570), LODWORD(v566)));
            _ZF = (v266.i8[0] & 1) == 0;
            *(float *)v266.i32 = 1.0 / v566;
            if (!_ZF)
              *(float *)v266.i32 = 1.0;
            v267 = 1.0 / v570;
            if ((v266.i8[4] & 1) != 0)
              v267 = 1.0;
            *(float32x2_t *)v268.i8 = vdiv_f32(vneg_f32(v257), v265);
            v268.i64[1] = v268.i64[0];
            v269 = v266.i32[0];
            LODWORD(v270) = 0;
            *((float *)&v270 + 1) = v267;
            __asm { FMOV            V2.4S, #1.0 }
            v272 = (int8x16_t)vmulq_n_f32((float32x4_t)v269, v259);
            v273 = (int8x16_t)vmulq_n_f32((float32x4_t)v270, v259);
            v274 = (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v268, _Q2, 8uLL), v259);
            v275 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v272.i8, *(float *)v573.i32), *(float32x2_t *)v273.i8, *(float32x2_t *)v573.i8, 1), *(float32x2_t *)v274.i8, (float32x4_t)v573, 2);
            v276 = (float32x2_t)vextq_s8(v272, v272, 8uLL).u64[0];
            v277 = (float32x2_t)vextq_s8(v273, v273, 8uLL).u64[0];
            v278 = (float32x4_t)vextq_s8(v274, v274, 8uLL);
            v279 = vmla_f32(vmla_lane_f32(vmul_f32(v276, *(float32x2_t *)v573.i8), v277, *(float32x2_t *)v573.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v573, v573, 8uLL), *(float32x2_t *)v278.f32);
            v280 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v272.i8, *(float *)v578.i32), *(float32x2_t *)v273.i8, *(float32x2_t *)v578.i8, 1), *(float32x2_t *)v274.i8, (float32x4_t)v578, 2);
            v281 = vmla_f32(vmla_lane_f32(vmul_f32(v276, *(float32x2_t *)v578.i8), v277, *(float32x2_t *)v578.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v578, v578, 8uLL), *(float32x2_t *)v278.f32);
            v282 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v272.i8, *(float *)v583.i32), *(float32x2_t *)v273.i8, *(float32x2_t *)v583.i8, 1), *(float32x2_t *)v274.i8, (float32x4_t)v583, 2);
            v284 = (float32x2_t)vextq_s8(v583, v583, 8uLL).u64[0];
            v283 = vmla_f32(vmla_lane_f32(vmul_f32(v276, *(float32x2_t *)v583.i8), v277, *(float32x2_t *)v583.i8, 1), v284, *(float32x2_t *)v278.f32);
            v284.i32[0] = 2.0;
            if (v252 != 6)
              v284.f32[0] = 1.0;
            v276.f32[0] = v89 + (float)(v255 / v284.f32[0]);
            v284.f32[0] = v90 + (float)(v254 / v284.f32[0]);
            v285 = vadd_f32(v282, vmla_n_f32(vmul_n_f32(v275, v276.f32[0]), v280, v284.f32[0]));
            v286 = vadd_f32(v283, vmla_f32(vmul_f32(v279, v276), v284, v281));
            *(float32x2_t *)v287.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v602.i8, v285.f32[0]), *(float32x2_t *)v592.i8, v285, 1), *(float32x2_t *)__szc.i8, v286.f32[0]);
            v288 = (float32x2_t)vextq_s8(v592, v592, 8uLL).u64[0];
            *(float32x2_t *)&v287.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v602, v602, 8uLL), v285), v288, v285, 1), v286, (float32x2_t)*(_OWORD *)&vextq_s8(__szc, __szc, 8uLL));
            v289 = (int32x4_t)vaddq_f32(v597, v287);
            v290 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v549.i8, 1);
            v291 = (float32x2_t)vdup_laneq_s32((int32x4_t)v549, 2);
            v292 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v289.i8, 1);
            v293 = vextq_s8(v549, v549, 8uLL);
            v294 = (float32x2_t)vdup_laneq_s32(v289, 2);
            v603 = *(float32x2_t *)v289.i8;
            v22 = (int32x4_t)vextq_s8((int8x16_t)v289, (int8x16_t)v289, 8uLL);
            v593 = v293;
            v598 = (float32x4_t)v22;
            v295 = v567;
            v296 = v540;
            while (1)
            {
              LOBYTE(v633) = 0;
              v634[4] = 0;
              v297 = *(_QWORD *)(a2 + 760);
              if ((v557 & 1) == 0)
              {
                v22.i64[0] = *(_QWORD *)(v297 + v260);
                v289.i64[0] = *(_QWORD *)(v297 + v260 + 16);
                v298 = (float32x2_t)vzip1_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v289.i8);
                v22.i32[2] = *(_DWORD *)(v297 + v260 + 8);
                v289.i32[2] = *(_DWORD *)(v297 + v260 + 24);
                v288.i32[0] = *(_DWORD *)(v297 + v260 + 40);
                v289.i64[0] = vtrn2q_s32(v22, v289).u64[0];
                v22.i32[3] = v289.i32[2];
                v293.i32[1] = v549.i32[1];
                v22 = (int32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
                v289.i32[3] = v593.i32[3];
                *(_DWORD *)v634 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)(v297 + v260 + 32), *(float32x2_t *)v549.i8), v290, *(float32x2_t *)(v297 + v260 + 32), 1), *(float32x2_t *)v593.i8, v288).u32[0];
                v633 = (void *)vmla_f32(vmla_f32(vmul_n_f32(v298, *(float *)v549.i32), v290, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v289.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v289.i8, 1), 0xCuLL)), v291, *(float32x2_t *)v22.i8);
                v634[4] = 1;
              }
              v299 = (int32x2_t *)(v297 + v260);
              *(int32x2_t *)v22.i8 = *v299;
              *(int32x2_t *)v289.i8 = v299[2];
              v300 = (float32x2_t)vzip1_s32(*v299, *(int32x2_t *)v289.i8);
              v22.i32[2] = v299[1].i32[0];
              v289.i32[2] = v299[3].i32[0];
              v293.i32[0] = v299[5].i32[0];
              v301 = (float32x2_t)v299[4];
              v302 = (float32x2_t)vtrn2q_s32(v22, v289).u64[0];
              v303 = (float32x2_t)vzip2q_s32(v22, v289).u64[0];
              *(int32x2_t *)v278.f32 = v299[6];
              v278.i32[2] = v299[7].i32[0];
              v304 = (int8x16_t)vnegq_f32(v278);
              *(float32x2_t *)v305.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v300, *(float *)v304.i32), v302, *(float32x2_t *)v278.f32, 1), v303, v278, 2);
              *(float32x2_t *)&v305.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v301, *(float32x2_t *)v304.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v301, 1), *(float32x2_t *)v278.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v304, v304, 8uLL), *(float32x2_t *)v293.i8);
              *(float32x2_t *)v306.f32 = vmla_f32(vmla_f32(vmul_n_f32(v300, v603.f32[0]), v292, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v302, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v302, 1), 0xCuLL)), v294, v303);
              v307 = v598;
              *(float32x2_t *)&v306.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v301, v603), v292, v301, 1), *(float32x2_t *)v598.f32, *(float32x2_t *)v293.i8);
              v308 = vaddq_f32(v306, v305);
              DWORD2(__dst) = v308.i32[2];
              *(_QWORD *)&__dst = v308.i64[0];
              v307.i32[0] = *(_DWORD *)(a2 + 572);
              sub_207DB78AC((uint64_t)v648, (uint64_t)v623 + v261, (int32x2_t *)&v633, (int32x2_t *)&__dst, *(_QWORD *)(a2 + 360), *(_QWORD *)(a2 + 352), v77, v307, *(float32x2_t *)v306.f32);
              v309 = v667;
              if (v667)
              {
                sub_207DB84D8((uint64_t)v648);
                v310 = *a10 + v296;
                *(_QWORD *)v310 = *(_QWORD *)v648;
                v311 = *(_QWORD *)&v648[8];
                *(_DWORD *)(v310 + 16) = *(_DWORD *)&v648[16];
                *(_QWORD *)(v310 + 8) = v311;
                v312 = *(_OWORD *)&v648[20];
                v313 = *(_OWORD *)&v648[36];
                *(_DWORD *)(v310 + 52) = *(_DWORD *)&v648[52];
                *(_OWORD *)(v310 + 36) = v313;
                *(_OWORD *)(v310 + 20) = v312;
                v314 = *(_OWORD *)&v648[56];
                v315 = v649;
                *(_DWORD *)(v310 + 88) = v650;
                *(_OWORD *)(v310 + 72) = v315;
                *(_OWORD *)(v310 + 56) = v314;
                v316 = v651;
                v317 = *(_OWORD *)v652;
                *(_DWORD *)(v310 + 124) = *(_DWORD *)&v652[16];
                *(_OWORD *)(v310 + 108) = v317;
                *(_OWORD *)(v310 + 92) = v316;
                v318 = v653;
                v319 = v654;
                *(_DWORD *)(v310 + 160) = v655;
                *(_OWORD *)(v310 + 128) = v318;
                *(_OWORD *)(v310 + 144) = v319;
                v320 = v656;
                v321 = v657;
                *(_DWORD *)(v310 + 196) = v658;
                *(_OWORD *)(v310 + 180) = v321;
                *(_OWORD *)(v310 + 164) = v320;
                v322 = v659;
                v323 = v660;
                v76 = v661;
                *(_OWORD *)(v310 + 248) = v662;
                *(int8x16_t *)(v310 + 232) = v76;
                *(_OWORD *)(v310 + 216) = v323;
                *(_OWORD *)(v310 + 200) = v322;
                v310 += 264;
                v22 = v663;
                v289 = v664;
                v76.i64[1] = *((_QWORD *)&v665 + 1);
                v293 = v666;
                *(_OWORD *)(v310 + 32) = v665;
                *(int8x16_t *)(v310 + 48) = v293;
                *(int32x4_t *)v310 = v22;
                *(int32x4_t *)(v310 + 16) = v289;
                if (!v667)
                  goto LABEL_238;
                goto LABEL_247;
              }
              v324 = atomic_load((unsigned __int8 *)&qword_25452B598);
              if ((v324 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
              {
                __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
                __cxa_guard_release(&qword_25452B598);
              }
              *(_QWORD *)&v644.__val_ = 15;
              v644.__cat_ = (const std::error_category *)&off_253E50C48;
              if (v667)
              {
                v535 = __cxa_allocate_exception(8uLL);
                *v535 = &off_24C072430;
                __cxa_throw(v535, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
              }
              sub_208212E0C((uint64_t)v648, __p);
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v325 = __p;
              else
                v325 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              v326 = strlen((const char *)v325);
              if (v326 > 0x7FFFFFFFFFFFFFF7)
                sub_207C95C50();
              v327 = v326;
              if (v326 >= 0x17)
                break;
              BYTE7(v641) = v326;
              v328 = &__dst;
              if (v326)
                goto LABEL_234;
LABEL_235:
              *((_BYTE *)v328 + v327) = 0;
              sub_207D01528(&v644, (uint64_t)&__dst, (CFErrorRef *)a1);
              v28 = v567;
              if (SBYTE7(v641) < 0)
              {
                operator delete((void *)__dst);
                if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_237:
                  if (!v667)
                    goto LABEL_238;
                  goto LABEL_247;
                }
              }
              else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_237;
              }
              operator delete(__p[0].__r_.__value_.__l.__data_);
              if (!v667)
              {
LABEL_238:
                if (v652[4])
                {
                  if (BYTE12(v651))
                  {
                    if (SBYTE11(v651) < 0)
                      operator delete(*((void **)&v649 + 1));
                    if ((v648[71] & 0x80000000) != 0)
                      operator delete(*(void **)&v648[48]);
                  }
                  if (v648[40] && (v648[39] & 0x80000000) != 0)
                    operator delete(*(void **)&v648[16]);
                }
              }
LABEL_247:
              if (!v309)
                goto LABEL_540;
              v296 += 328;
              v261 += 36;
              v260 += 64;
              --v295;
              v59 = a10;
              if (!v295)
                goto LABEL_257;
            }
            v329 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v326 | 7) != 0x17)
              v329 = v326 | 7;
            v330 = v329 + 1;
            v328 = (__int128 *)operator new(v329 + 1);
            *(_QWORD *)&v641 = v330 | 0x8000000000000000;
            *(_QWORD *)&__dst = v328;
            *((_QWORD *)&__dst + 1) = v327;
            v30 = v563;
LABEL_234:
            memmove(v328, v325, v327);
            goto LABEL_235;
          }
        }
      }
    }
LABEL_257:
    v331 = v558;
    if (!v544)
    {
      v332 = 0;
      v574 = *(_QWORD *)(a2 + 352) * *(_QWORD *)(a2 + 360);
      v604 = v558 * v28;
      do
      {
        v342 = v332 + v604;
        v343 = *v59;
        v344 = (_DWORD *)(*v59 + 328 * (v332 + v604));
        v345 = v612;
        if (v612 < v613)
        {
          *(_DWORD *)v612 = *v344;
          v346 = (uint64_t)(v345 + 4);
          goto LABEL_285;
        }
        v347 = (char *)v611;
        v348 = v612 - (_BYTE *)v611;
        v349 = (v612 - (_BYTE *)v611) >> 2;
        v350 = v349 + 1;
        if ((unint64_t)(v349 + 1) >> 62)
          sub_207D0CD58();
        v351 = v613 - (_BYTE *)v611;
        if ((v613 - (_BYTE *)v611) >> 1 > v350)
          v350 = v351 >> 1;
        if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFFCLL)
          v352 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v352 = v350;
        if (v352)
        {
          if (v352 >> 62)
            sub_207CA3AB8();
          v353 = (char *)operator new(4 * v352);
          v354 = &v353[4 * v349];
          *(_DWORD *)v354 = *v344;
          v346 = (uint64_t)(v354 + 4);
          v355 = v345 - v347;
          if (v345 == v347)
          {
LABEL_276:
            v59 = a10;
            goto LABEL_282;
          }
        }
        else
        {
          v353 = 0;
          v354 = (char *)(4 * v349);
          *(_DWORD *)(4 * v349) = *v344;
          v346 = 4 * v349 + 4;
          v355 = v345 - v347;
          if (v345 == v347)
            goto LABEL_276;
        }
        v356 = v355 - 4;
        if (v356 >= 0x2C)
        {
          v357 = v345 - v353 - v348;
          v59 = a10;
          if (v357 >= 0x20)
          {
            v358 = (v356 >> 2) + 1;
            v359 = 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
            v360 = &v345[-v359];
            v354 -= v359;
            v361 = &v353[4 * v349 - 16];
            v362 = v345 - 16;
            v363 = v358 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v364 = *(_OWORD *)v362;
              *((_OWORD *)v361 - 1) = *((_OWORD *)v362 - 1);
              *(_OWORD *)v361 = v364;
              v361 -= 32;
              v362 -= 32;
              v363 -= 8;
            }
            while (v363);
            v345 = v360;
            if (v358 == (v358 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_282;
          }
        }
        else
        {
          v59 = a10;
        }
        do
        {
          v365 = *((_DWORD *)v345 - 1);
          v345 -= 4;
          *((_DWORD *)v354 - 1) = v365;
          v354 -= 4;
        }
        while (v345 != v347);
LABEL_282:
        v611 = v354;
        v612 = (char *)v346;
        v613 = &v353[4 * v352];
        if (v347)
          operator delete(v347);
        v30 = v563;
LABEL_285:
        v612 = (char *)v346;
        v366 = (float32x4_t *)(v343 + 328 * v342 + 92);
        v367 = (float32x4_t *)v621;
        if (v621 >= v622)
        {
          v371 = (float32x4_t *)v620;
          v372 = 0x8E38E38E38E38E39 * ((v621 - (_BYTE *)v620) >> 2);
          v373 = v372 + 1;
          if (v372 + 1 > 0x71C71C71C71C71CLL)
            sub_207CA420C();
          if (0x1C71C71C71C71C72 * ((v622 - (_BYTE *)v620) >> 2) > v373)
            v373 = 0x1C71C71C71C71C72 * ((v622 - (_BYTE *)v620) >> 2);
          if (0x8E38E38E38E38E39 * ((v622 - (_BYTE *)v620) >> 2) >= 0x38E38E38E38E38ELL)
            v374 = 0x71C71C71C71C71CLL;
          else
            v374 = v373;
          if (v374)
          {
            if (v374 > 0x71C71C71C71C71CLL)
              sub_207CA3AB8();
            v375 = (char *)operator new(36 * v374);
          }
          else
          {
            v375 = 0;
          }
          v376 = (float32x4_t *)&v375[36 * v372];
          v377 = *v366;
          v369 = *(float32x4_t *)(v343 + 328 * v342 + 108);
          v376[2].i32[0] = *(_DWORD *)(v343 + 328 * v342 + 124);
          *v376 = v377;
          v376[1] = v369;
          v378 = v376;
          if (v367 == v371)
          {
            v59 = a10;
            v28 = v567;
          }
          else
          {
            v59 = a10;
            v28 = v567;
            do
            {
              v379 = *(float32x4_t *)((char *)v367 - 36);
              v369 = *(float32x4_t *)((char *)v367 - 20);
              v378[-1].i32[3] = v367[-1].i32[3];
              *(float32x4_t *)((char *)v378 - 20) = v369;
              *(float32x4_t *)((char *)v378 - 36) = v379;
              v378 = (float32x4_t *)((char *)v378 - 36);
              v367 = (float32x4_t *)((char *)v367 - 36);
            }
            while (v367 != v371);
            v367 = v371;
          }
          v370 = &v376[2].i8[4];
          v620 = v378;
          v621 = &v376[2].i8[4];
          v622 = &v375[36 * v374];
          if (v367)
            operator delete(v367);
        }
        else
        {
          v368 = *v366;
          v369 = *(float32x4_t *)(v343 + 328 * v342 + 108);
          *((_DWORD *)v621 + 8) = *(_DWORD *)(v343 + 328 * v342 + 124);
          *v367 = v368;
          v367[1] = v369;
          v370 = &v367[2].i8[4];
          v28 = v567;
        }
        v621 = v370;
        v609 = 0;
        v608 = 0;
        v610 = 0;
        if (*(_BYTE *)(a2 + 472))
        {
          v380 = v343 + 328 * v342;
          v381 = *(float32x4_t *)(v380 + 164);
          v382 = *(_DWORD *)(v380 + 196);
          v369 = *(float32x4_t *)(v380 + 180);
          v383 = (float32x4_t *)((char *)v614 + 36 * v332);
          v383[2].i32[0] = v382;
          *v383 = v381;
          v383[1] = v369;
          goto LABEL_431;
        }
        if (*(_BYTE *)(v550 + 24))
        {
          v606 = *(_QWORD *)(*(_QWORD *)v550 + 8 * v332);
          v607 = 1;
          v30 = v563;
          if (sub_2081FD320((double *)&v606))
          {
            v527 = atomic_load((unsigned __int8 *)&qword_25452B598);
            if ((v527 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
            {
              __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
              __cxa_guard_release(&qword_25452B598);
            }
            __p[0].__r_.__value_.__r.__words[0] = 1;
            __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&off_253E50C48;
            *(_QWORD *)v648 = operator new(0x30uLL);
            *(_OWORD *)&v648[8] = xmmword_20822C9C0;
            strcpy(*(char **)v648, "Ignoring expired sample before extracting patch");
            sub_207D01528((const std::error_condition *)__p, (uint64_t)v648, (CFErrorRef *)a1);
            goto LABEL_535;
          }
        }
        else
        {
          LOBYTE(v606) = 0;
          LOBYTE(v607) = 0;
        }
        v384 = (uint64_t)&v30[24 * v332];
        v385 = v574 * v342;
        v386 = *(_DWORD *)(a2 + 288);
        if (v386 == 1)
        {
          v398 = *(_QWORD *)(a2 + 352);
          v397 = *(_QWORD *)(a2 + 360);
          v399 = *(_QWORD *)(*(_QWORD *)(a2 + 712) + 16 * v332);
          v400 = (float32x2_t *)(*(_QWORD *)(a2 + 824) + 4 * v385);
          v648[0] = *(_BYTE *)(a2 + 568);
          *(_DWORD *)&v648[4] = 0;
          sub_207DFB738(v384, v343 + 328 * v342 + 128, v397, v398, v648, v399, v400, v21, v543, 1, (unint64_t *)&v608, 1);
          if (!*(_BYTE *)(a8 + 24))
            goto LABEL_340;
          sub_207DFCF08(*(_QWORD *)(a2 + 824) + 4 * v385, *(_QWORD *)(a2 + 360), *(_QWORD *)(a2 + 352), (uint64_t)&v608, (uint64_t)v648);
          v401 = a12[1];
          if (v401 >= a12[2])
          {
            v402 = sub_207DC45A8(a12, (uint64_t)v648);
          }
          else
          {
            sub_207D2E4A8(a12[1], (uint64_t)v648);
            v402 = v401 + 144;
            a12[1] = v401 + 144;
          }
          v28 = v567;
          a12[1] = v402;
          *(_QWORD *)v648 = &off_24C072BC8;
          if (*(_QWORD *)&v652[12])
          {
            *(_QWORD *)&v653 = *(_QWORD *)&v652[12];
            operator delete(*(void **)&v652[12]);
          }
          v409 = *(std::__shared_weak_count **)&v652[4];
          if (!*(_QWORD *)&v652[4])
            goto LABEL_336;
          v410 = (unint64_t *)(*(_QWORD *)&v652[4] + 8);
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
            std::__shared_weak_count::__release_weak(v409);
            v406 = *(std::__shared_weak_count **)((char *)&v651 + 4);
            if (!*(_QWORD *)((char *)&v651 + 4))
              goto LABEL_340;
          }
          else
          {
LABEL_336:
            v406 = *(std::__shared_weak_count **)((char *)&v651 + 4);
            if (!*(_QWORD *)((char *)&v651 + 4))
              goto LABEL_340;
          }
          v412 = (unint64_t *)&v406->__shared_owners_;
          do
            v408 = __ldaxr(v412);
          while (__stlxr(v408 - 1, v412));
        }
        else
        {
          if (v386)
            goto LABEL_340;
          v387 = (float32x2_t *)(v343 + 328 * v342 + 128);
          v389 = *(_QWORD *)(a2 + 352);
          v388 = *(_QWORD *)(a2 + 360);
          v390 = *(char **)(*(_QWORD *)(a2 + 712) + 16 * v332);
          v391 = (float32x2_t *)(*(_QWORD *)(a2 + 824) + 4 * v385);
          v392 = 4 * (v385 >> 2);
          v393 = *(_QWORD *)(a2 + 848) + v392;
          v394 = *(_QWORD *)(a2 + 872) + v392;
          v648[0] = *(_BYTE *)(a2 + 568);
          *(_DWORD *)&v648[4] = 0;
          sub_207DF9D6C(v384, v387, v388, v389, v648, v390, v391, v393, v394, v543, 1, (unint64_t *)&v608, 1u);
          if (!*(_BYTE *)(a8 + 24))
          {
LABEL_340:
            if (*(_BYTE *)(a2 + 704))
              goto LABEL_341;
            goto LABEL_428;
          }
          sub_207DFC450(*(_QWORD *)(a2 + 352), (float32x4_t *)(*(_QWORD *)(a2 + 824) + 4 * v385), *(_QWORD *)(a2 + 848) + v392, *(_QWORD *)(a2 + 872) + v392, *(_QWORD *)(a2 + 360), (float **)&v608, (uint64_t)v648);
          v395 = a12[1];
          if (v395 >= a12[2])
          {
            v396 = sub_207DC45A8(a12, (uint64_t)v648);
          }
          else
          {
            sub_207D2E4A8(a12[1], (uint64_t)v648);
            v396 = v395 + 144;
            a12[1] = v395 + 144;
          }
          v28 = v567;
          a12[1] = v396;
          *(_QWORD *)v648 = &off_24C072BC8;
          if (*(_QWORD *)&v652[12])
          {
            *(_QWORD *)&v653 = *(_QWORD *)&v652[12];
            operator delete(*(void **)&v652[12]);
          }
          v403 = *(std::__shared_weak_count **)&v652[4];
          if (!*(_QWORD *)&v652[4])
            goto LABEL_325;
          v404 = (unint64_t *)(*(_QWORD *)&v652[4] + 8);
          do
            v405 = __ldaxr(v404);
          while (__stlxr(v405 - 1, v404));
          if (!v405)
          {
            ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
            std::__shared_weak_count::__release_weak(v403);
            v406 = *(std::__shared_weak_count **)((char *)&v651 + 4);
            if (!*(_QWORD *)((char *)&v651 + 4))
              goto LABEL_340;
          }
          else
          {
LABEL_325:
            v406 = *(std::__shared_weak_count **)((char *)&v651 + 4);
            if (!*(_QWORD *)((char *)&v651 + 4))
              goto LABEL_340;
          }
          v407 = (unint64_t *)&v406->__shared_owners_;
          do
            v408 = __ldaxr(v407);
          while (__stlxr(v408 - 1, v407));
        }
        if (v408)
          goto LABEL_340;
        ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
        std::__shared_weak_count::__release_weak(v406);
        if (*(_BYTE *)(a2 + 704))
        {
LABEL_341:
          v413 = *(_QWORD *)(a2 + 824);
          v414 = *(_DWORD *)(a2 + 360);
          v415 = *(_DWORD *)(a2 + 352);
          std::to_string(__p, *(_QWORD *)a2);
          v416 = *(_BYTE *)(a2 + 703);
          if (v416 >= 0)
            v417 = (const std::string::value_type *)(a2 + 680);
          else
            v417 = *(const std::string::value_type **)(a2 + 680);
          if (v416 >= 0)
            v418 = *(unsigned __int8 *)(a2 + 703);
          else
            v418 = *(_QWORD *)(a2 + 688);
          v419 = std::string::insert(__p, 0, v417, v418);
          v420 = *(_OWORD *)&v419->__r_.__value_.__l.__data_;
          *(_QWORD *)&v641 = *((_QWORD *)&v419->__r_.__value_.__l + 2);
          __dst = v420;
          v419->__r_.__value_.__l.__size_ = 0;
          v419->__r_.__value_.__r.__words[2] = 0;
          v419->__r_.__value_.__r.__words[0] = 0;
          v421 = std::string::append((std::string *)&__dst, ".", 1uLL);
          v422 = *(_OWORD *)&v421->__r_.__value_.__l.__data_;
          *(_QWORD *)&v648[16] = *((_QWORD *)&v421->__r_.__value_.__l + 2);
          *(_OWORD *)v648 = v422;
          v421->__r_.__value_.__l.__size_ = 0;
          v421->__r_.__value_.__r.__words[2] = 0;
          v421->__r_.__value_.__r.__words[0] = 0;
          std::to_string((std::string *)&v626, v332);
          if ((SBYTE7(v627) & 0x80u) == 0)
            v423 = &v626;
          else
            v423 = (int8x16_t *)v626.i64[0];
          if ((SBYTE7(v627) & 0x80u) == 0)
            v424 = BYTE7(v627);
          else
            v424 = v626.u64[1];
          v425 = std::string::append((std::string *)v648, v423->i8, v424);
          v426 = *(_OWORD *)&v425->__r_.__value_.__l.__data_;
          v631 = v425->__r_.__value_.__r.__words[2];
          *(_OWORD *)v630 = v426;
          v425->__r_.__value_.__l.__size_ = 0;
          v425->__r_.__value_.__r.__words[2] = 0;
          v425->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE7(v627) < 0)
          {
            operator delete((void *)v626.i64[0]);
            if ((v648[23] & 0x80000000) != 0)
              goto LABEL_419;
LABEL_355:
            if ((SBYTE7(v641) & 0x80000000) == 0)
              goto LABEL_356;
LABEL_420:
            operator delete((void *)__dst);
            if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_357:
              sub_207CF7E1C();
              sub_207CF7B20();
              if (os_variant_has_internal_diagnostics())
              {
                *(_QWORD *)v648 = "cv3d.odt.";
                *(_QWORD *)&v648[8] = 9;
                v427 = (void *)HIBYTE(v631);
                v428 = v630;
                if (v631 < 0)
                {
                  v428 = (void **)v630[0];
                  v427 = v630[1];
                }
                *(_QWORD *)&v648[16] = v428;
                *(_QWORD *)&v648[24] = v427;
                sub_207CAC8F4((uint64_t)v648, (uint64_t)&v648[32], 0, 0, &v629);
                sub_207F0D4B0();
                v429 = (*(uint64_t (**)(void))(qword_254530900 + 48))();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v429 + 24))(v429))
                {
                  v626 = 0u;
                  v627 = 0u;
                  v628 = 733237316;
                  kdebug_trace();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v429 + 24))(v429))
                  {
                    *(_QWORD *)&v632 = (uint64_t)(v536 * 1000000000.0);
                    *((_QWORD *)&v632 + 1) = 2;
                    v430 = sub_207F0D4B0();
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v429 + 24))(v429))
                    {
                      LOBYTE(__dst) = 0;
                      v643 = 0;
                      v646[0] = 1;
                      v646[1] = v414;
                      v646[2] = v415;
                      v647 = 0x100000001;
                      LOBYTE(v644.__val_) = 0;
                      v645 = 0;
                      sub_20809F1D0((uint64_t)v648, v413, (__int128 *)v646, (__int128 *)&v644.__val_, &dword_208266D34, (uint64_t)&__dst);
                      if (v643)
                      {
                        v431 = (std::__shared_weak_count *)v641;
                        if ((_QWORD)v641)
                        {
                          v432 = (unint64_t *)(v641 + 8);
                          do
                            v433 = __ldaxr(v432);
                          while (__stlxr(v433 - 1, v432));
                          if (!v433)
                          {
                            ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
                            std::__shared_weak_count::__release_weak(v431);
                          }
                        }
                      }
                      sub_20809F344((uint64_t)v648, 0, 0, (uint64_t)__p);
                      if (v652[4])
                      {
                        v434 = (std::__shared_weak_count *)v649;
                        if ((_QWORD)v649)
                        {
                          v435 = (unint64_t *)(v649 + 8);
                          do
                            v436 = __ldaxr(v435);
                          while (__stlxr(v436 - 1, v435));
                          if (!v436)
                          {
                            ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
                            std::__shared_weak_count::__release_weak(v434);
                          }
                        }
                      }
                      v633 = (void *)0x6863746170;
                      *(_QWORD *)v634 = v668[0];
                      *(_QWORD *)&v634[7] = *(_QWORD *)((char *)v668 + 7);
                      v635 = 261;
                      v668[0] = 0;
                      *(_QWORD *)((char *)v668 + 7) = 0;
                      sub_207DC73D8(&v637, (uint64_t)__p, (__int128 *)&v633, &v632);
                      if (HIBYTE(v635) && (char)v635 < 0)
                        operator delete(v633);
                      v437 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
                      if (__p[0].__r_.__value_.__r.__words[2])
                      {
                        v438 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
                        do
                          v439 = __ldaxr(v438);
                        while (__stlxr(v439 - 1, v438));
                        if (!v439)
                        {
                          ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
                          std::__shared_weak_count::__release_weak(v437);
                        }
                      }
                      v440 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v429 + 56))(v429);
                      v441 = *v440;
                      v442 = (std::__shared_weak_count *)v440[1];
                      if (v442)
                      {
                        v443 = (unint64_t *)&v442->__shared_owners_;
                        do
                          v444 = __ldxr(v443);
                        while (__stxr(v444 + 1, v443));
                      }
                      v445 = v638;
                      v446 = v639;
                      *(_QWORD *)&__dst = &off_24C078D18;
                      *((_QWORD *)&__dst + 1) = v638;
                      *(_QWORD *)&v641 = v639;
                      v638 = 0;
                      v639 = 0;
                      *(_QWORD *)v648 = v441;
                      *(_QWORD *)&v648[8] = v442;
                      if (v442)
                      {
                        v447 = (unint64_t *)&v442->__shared_owners_;
                        do
                          v448 = __ldxr(v447);
                        while (__stxr(v448 + 1, v447));
                      }
                      *(_QWORD *)&v648[16] = &off_24C078D18;
                      *(_QWORD *)&v648[24] = v445;
                      *(_QWORD *)&v648[32] = v446;
                      if (v446)
                      {
                        v449 = (unint64_t *)&v446->__shared_owners_;
                        do
                          v450 = __ldxr(v449);
                        while (__stxr(v450 + 1, v449));
                      }
                      (*(void (**)(_QWORD *, _BYTE *))(*v430 + 16))(v430, v648);
                      v451 = *(std::__shared_weak_count **)&v648[32];
                      if (*(_QWORD *)&v648[32])
                      {
                        v452 = (unint64_t *)(*(_QWORD *)&v648[32] + 8);
                        do
                          v453 = __ldaxr(v452);
                        while (__stlxr(v453 - 1, v452));
                        if (!v453)
                        {
                          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                          std::__shared_weak_count::__release_weak(v451);
                        }
                      }
                      v454 = *(std::__shared_weak_count **)&v648[8];
                      if (*(_QWORD *)&v648[8])
                      {
                        v455 = (unint64_t *)(*(_QWORD *)&v648[8] + 8);
                        do
                          v456 = __ldaxr(v455);
                        while (__stlxr(v456 - 1, v455));
                        if (!v456)
                        {
                          ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                          std::__shared_weak_count::__release_weak(v454);
                        }
                      }
                      v457 = (std::__shared_weak_count *)v641;
                      if ((_QWORD)v641)
                      {
                        v458 = (unint64_t *)(v641 + 8);
                        do
                          v459 = __ldaxr(v458);
                        while (__stlxr(v459 - 1, v458));
                        if (!v459)
                        {
                          ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                          std::__shared_weak_count::__release_weak(v457);
                        }
                      }
                      if (v442)
                      {
                        v460 = (unint64_t *)&v442->__shared_owners_;
                        do
                          v461 = __ldaxr(v460);
                        while (__stlxr(v461 - 1, v460));
                        if (!v461)
                        {
                          ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
                          std::__shared_weak_count::__release_weak(v442);
                        }
                      }
                      v462 = v639;
                      if (v639)
                      {
                        v463 = (unint64_t *)&v639->__shared_owners_;
                        do
                          v464 = __ldaxr(v463);
                        while (__stlxr(v464 - 1, v463));
                        if (!v464)
                        {
                          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
                          std::__shared_weak_count::__release_weak(v462);
                        }
                      }
                    }
                  }
                  kdebug_trace();
                }
                if (SHIBYTE(v629.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v629.__r_.__value_.__l.__data_);
                v28 = v567;
              }
              if (SHIBYTE(v631) < 0)
                operator delete(v630[0]);
              goto LABEL_428;
            }
          }
          else
          {
            if ((v648[23] & 0x80000000) == 0)
              goto LABEL_355;
LABEL_419:
            operator delete(*(void **)v648);
            if (SBYTE7(v641) < 0)
              goto LABEL_420;
LABEL_356:
            if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_357;
          }
          operator delete(__p[0].__r_.__value_.__l.__data_);
          goto LABEL_357;
        }
LABEL_428:
        if ((_BYTE)v607 && sub_2081FD320((double *)&v606))
        {
          v528 = atomic_load((unsigned __int8 *)&qword_25452B598);
          if ((v528 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
          {
            __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
            __cxa_guard_release(&qword_25452B598);
          }
          __p[0].__r_.__value_.__r.__words[0] = 1;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&off_253E50C48;
          *(_QWORD *)v648 = operator new(0x30uLL);
          *(_OWORD *)&v648[8] = xmmword_20822ABD0;
          strcpy(*(char **)v648, "Ignoring expired sample after extracting patch");
          v30 = v563;
          sub_207D01528((const std::error_condition *)__p, (uint64_t)v648, (CFErrorRef *)a1);
LABEL_535:
          if ((v648[23] & 0x80000000) != 0)
            operator delete(*(void **)v648);
          v523 = v608;
          if (v608)
          {
            v609 = v608;
            goto LABEL_539;
          }
          goto LABEL_540;
        }
        v30 = v563;
LABEL_431:
        v465 = (int32x2_t *)(*(_QWORD *)(a2 + 760) + (v332 << 6));
        v466.i32[0] = v465[1].i32[0];
        *(int32x2_t *)v369.f32 = *v465;
        *(int32x2_t *)v76.i8 = v465[2];
        v467 = (float32x2_t)vzip1_s32(*v465, *(int32x2_t *)v76.i8);
        v468 = (float32x2_t)vzip2_s32(*v465, *(int32x2_t *)v76.i8);
        v469 = v369;
        v469.i32[2] = v466.i32[0];
        v470 = (float32x4_t)v76;
        v470.i32[2] = v465[3].i32[0];
        v76.i32[0] = v465[5].i32[0];
        *(int32x2_t *)v23.i8 = v465[4];
        *(int32x2_t *)v24.f32 = v465[6];
        v24.i32[2] = v465[7].i32[0];
        v471 = (int8x16_t)vnegq_f32(v24);
        v472 = (float32x4_t)v23;
        v472.i32[2] = v76.i32[0];
        v466.i32[1] = v470.i32[2];
        *(float32x2_t *)&v26 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v467, *(float *)v471.i32), v468, *(float32x2_t *)v24.f32, 1), v466, v24, 2);
        *(float32x2_t *)&v25 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v471.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1), *(float32x2_t *)v24.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v471, v471, 8uLL), *(float32x2_t *)v76.i8);
        v473 = *v59 + 328 * v342 + 264;
        v474 = (float32x2_t *)(*v59 + 328 * v604 + 200);
        v475 = v618;
        if (v618 >= v619)
        {
          v476 = (float32x4_t *)v617;
          v477 = ((char *)v618 - (_BYTE *)v617) >> 6;
          v478 = v477 + 1;
          if ((unint64_t)(v477 + 1) >> 58)
            sub_207CA420C();
          v479 = (char *)v619 - (_BYTE *)v617;
          if (((char *)v619 - (_BYTE *)v617) >> 5 > v478)
            v478 = v479 >> 5;
          if ((unint64_t)v479 >= 0x7FFFFFFFFFFFFFC0)
            v480 = 0x3FFFFFFFFFFFFFFLL;
          else
            v480 = v478;
          if (v480)
          {
            v579 = v472;
            v584 = v469;
            *(float32x4_t *)__szd = v470;
            v594 = v26;
            v599 = v25;
            if (v480 >> 58)
              sub_207CA3AB8();
            v481 = (char *)operator new(v480 << 6);
            v26 = v594;
            v25 = v599;
            v469 = v584;
            v470 = *(float32x4_t *)__szd;
            v472 = v579;
          }
          else
          {
            v481 = 0;
          }
          v482 = (float32x4_t *)&v481[64 * v477];
          v483 = *(float32x4_t *)(v473 + 16);
          v484 = *(float32x4_t *)(v473 + 32);
          v485 = *(float32x4_t *)(v473 + 48);
          v486 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v473, v469.f32[0]), v483, v470.f32[0]), v484, v472.f32[0]), (float32x4_t)0, v485);
          v23 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*(float32x4_t *)v473, *(float32x2_t *)v469.f32, 1), v483, *(float32x2_t *)v470.f32, 1), v484, *(float32x2_t *)v472.f32, 1), (float32x4_t)0, v485);
          v24 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)v473, v469, 2), v483, v470, 2), v484, v472, 2), (float32x4_t)0, v485);
          v22 = (int32x4_t)vaddq_f32(v485, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v473, *(float *)&v26), v483, *(float32x2_t *)&v26, 1), v484, *(float *)&v25));
          v487 = *(float32x4_t *)v474[6].f32;
          v488 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v486, COERCE_FLOAT(*(_OWORD *)v474[2].f32)), (float32x4_t)v23, v474[2], 1), v24, *(float32x4_t *)v474[2].f32, 2), (float32x4_t)v22, *(float32x4_t *)v474[2].f32, 3);
          v76 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v486, COERCE_FLOAT(*(_OWORD *)v474[4].f32)), (float32x4_t)v23, v474[4], 1), v24, *(float32x4_t *)v474[4].f32, 2), (float32x4_t)v22, *(float32x4_t *)v474[4].f32, 3);
          *v482 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v486, COERCE_FLOAT(*(_OWORD *)v474->f32)), (float32x4_t)v23, *v474, 1), v24, *(float32x4_t *)v474->f32, 2), (float32x4_t)v22, *(float32x4_t *)v474->f32, 3);
          v482[1] = v488;
          v482[2] = (float32x4_t)v76;
          v482[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v486, v487.f32[0]), (float32x4_t)v23, *(float32x2_t *)v487.f32, 1), v24, v487, 2), (float32x4_t)v22, v487, 3);
          v489 = (int8x16_t *)v482;
          if (v475 == v476)
          {
            v28 = v567;
            v492 = v482 + 4;
            v617 = v482;
            v618 = v482 + 4;
            v619 = (float32x4_t *)&v481[64 * v480];
            if (v475)
              goto LABEL_446;
          }
          else
          {
            v28 = v567;
            do
            {
              v22 = (int32x4_t)v475[-4];
              v490 = (int8x16_t)v475[-3];
              v76 = (int8x16_t)v475[-2];
              v491 = (int8x16_t)v475[-1];
              v489[-2] = v76;
              v489[-1] = v491;
              v489[-4] = (int8x16_t)v22;
              v489[-3] = v490;
              v489 -= 4;
              v475 -= 4;
            }
            while (v475 != v476);
            v475 = v476;
            v492 = v482 + 4;
            v617 = v489;
            v618 = v482 + 4;
            v619 = (float32x4_t *)&v481[64 * v480];
            if (v475)
LABEL_446:
              operator delete(v475);
          }
          v331 = v558;
          v618 = v492;
          v341 = v608;
          if (!v608)
            goto LABEL_261;
LABEL_260:
          v609 = v341;
          operator delete(v341);
          goto LABEL_261;
        }
        v333 = *(float32x4_t *)(*v59 + 328 * v342 + 280);
        v334 = *(float32x4_t *)(*v59 + 328 * v342 + 296);
        v335 = *(float32x4_t *)(*v59 + 328 * v342 + 312);
        v336 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)v473, v469.f32[0]), v333, v470.f32[0]), v334, v472.f32[0]), (float32x4_t)0, v335);
        v23 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*(float32x4_t *)v473, *(float32x2_t *)v469.f32, 1), v333, *(float32x2_t *)v470.f32, 1), v334, *(float32x2_t *)v472.f32, 1), (float32x4_t)0, v335);
        v24 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)v473, v469, 2), v333, v470, 2), v334, v472, 2), (float32x4_t)0, v335);
        v22 = (int32x4_t)vaddq_f32(v335, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v473, *(float *)&v26), v333, *(float32x2_t *)&v26, 1), v334, *(float *)&v25));
        v337 = *(float32x4_t *)(*v59 + 328 * v604 + 216);
        v338 = *(float32x4_t *)(*v59 + 328 * v604 + 232);
        v339 = *(float32x4_t *)(*v59 + 328 * v604 + 248);
        v340 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v336, v337.f32[0]), (float32x4_t)v23, *(float32x2_t *)v337.f32, 1), v24, v337, 2), (float32x4_t)v22, v337, 3);
        v76 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v336, v338.f32[0]), (float32x4_t)v23, *(float32x2_t *)v338.f32, 1), v24, v338, 2), (float32x4_t)v22, v338, 3);
        *v618 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v336, COERCE_FLOAT(*(_OWORD *)v474->f32)), (float32x4_t)v23, *v474, 1), v24, *(float32x4_t *)v474->f32, 2), (float32x4_t)v22, *(float32x4_t *)v474->f32, 3);
        v475[1] = v340;
        v475[2] = (float32x4_t)v76;
        v475[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v336, v339.f32[0]), (float32x4_t)v23, *(float32x2_t *)v339.f32, 1), v24, v339, 2), (float32x4_t)v22, v339, 3);
        v331 = v558;
        v618 = v475 + 4;
        v341 = v608;
        if (v608)
          goto LABEL_260;
LABEL_261:
        ++v332;
      }
      while (v332 != v28);
    }
    v61 = v331 + 1;
    a7 = v548;
    v64 = *v548;
    v65 = v548[1];
    v63 = v538;
    v540 += v537;
    v62 = a15;
  }
  while (v61 < (v65 - *v548) >> 3);
  v60 = *v548;
LABEL_458:
  v493 = 0x8F9C18F9C18F9C19 * ((v59[1] - *v59) >> 3);
  v494 = *(_QWORD *)(a2 + 432);
  if (v494 >= 2)
    v493 /= v494;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 784) + 179))
  {
    v495 = v65 - v60;
    if (v495)
    {
      v496 = 0;
      v497 = v495 >> 3;
      while (1)
      {
        v498 = **(unsigned int **)(*(_QWORD *)(*v548 + 8 * v496) + 1104);
        if (!(_DWORD)v498)
          goto LABEL_469;
        if ((_DWORD)v498 == 5)
          break;
        v499 = &v648[12];
        if ((_DWORD)v498 == 4)
        {
          v498 = 1;
LABEL_469:
          v499 = &v648[4 * v498];
        }
        if (v499 - v648 != 12)
          sub_207D61388(*(_QWORD *)(a2 + 784), v496, 1, *(double *)v22.i64);
        if (v497 == ++v496)
          goto LABEL_472;
      }
      v498 = 2;
      goto LABEL_469;
    }
  }
LABEL_472:
  if (*(_BYTE *)(a2 + 472))
  {
    v605 = v493;
    if (*(_DWORD *)(a2 + 288) != 1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 436, (uint64_t)"cfg_.inference.patch_format == PatchInferenceModelConfig::PatchFormat::GrayScale", 80, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    __dst = 0uLL;
    *(_QWORD *)&v641 = 0;
    if (v541 == v30)
      goto LABEL_518;
    v500 = 0xAAAAAAAAAAAAAAABLL * ((v541 - v30) >> 3);
    if (v500 > 0x492492492492492)
      sub_207CA420C();
    *(_QWORD *)&__dst = operator new(0x5555555555555568 * ((v541 - v30) >> 3));
    *((_QWORD *)&__dst + 1) = __dst;
    *(_QWORD *)&v641 = __dst + 0x5555555555555568 * ((v541 - v30) >> 3);
    if (v541 == v563)
    {
LABEL_518:
      v30 = v563;
      sub_207D66628(*(_QWORD *)(a2 + 784), (uint64_t *)&v614, (uint64_t *)&v623, (uint64_t *)(a2 + 896), (uint64_t *)&__dst, (uint64_t *)&v620, (uint64_t *)&v617, v605, a1, (uint64_t)&v611, a11);
    }
    else
    {
      v501 = 0;
      while (1)
      {
        if (*(_BYTE *)(v550 + 24))
        {
          v626.i64[0] = *(_QWORD *)(*(_QWORD *)v550 + 8 * v501);
          v626.i64[1] = 1;
          if (sub_2081FD320((double *)v626.i64))
          {
            v533 = atomic_load((unsigned __int8 *)&qword_25452B598);
            if ((v533 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
            {
              __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
              __cxa_guard_release(&qword_25452B598);
            }
            v633 = (void *)1;
            *(_QWORD *)v634 = &off_253E50C48;
            v30 = v563;
            *(_QWORD *)v648 = operator new(0x30uLL);
            *(_OWORD *)&v648[8] = xmmword_20822C9C0;
            strcpy(*(char **)v648, "Ignoring expired sample before copying Y buffer");
            sub_207D01528((const std::error_condition *)&v633, (uint64_t)v648, (CFErrorRef *)a1);
            goto LABEL_560;
          }
        }
        else
        {
          v626.i8[0] = 0;
          v626.i8[8] = 0;
        }
        sub_207DE54F8((uint64_t)&v563[24 * v501], *(unsigned __int8 *)(a2 + 401), (_QWORD *)(*(_QWORD *)(a2 + 936) + 40 * v501), (uint64_t)v648);
        v502 = *((_QWORD *)&__dst + 1);
        if (*((_QWORD *)&__dst + 1) >= (unint64_t)v641)
        {
          v505 = __dst;
          v506 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 3);
          v507 = v506 + 1;
          if ((unint64_t)(v506 + 1) > 0x492492492492492)
            sub_207CA420C();
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v641 - __dst) >> 3) > v507)
            v507 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v641 - __dst) >> 3);
          v508 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v641 - __dst) >> 3)) >= 0x249249249249249
               ? 0x492492492492492
               : v507;
          if (v508)
          {
            if (v508 > 0x492492492492492)
              sub_207CA3AB8();
            v509 = (char *)operator new(56 * v508);
          }
          else
          {
            v509 = 0;
          }
          v510 = &v509[56 * v506];
          v511 = &v509[56 * v508];
          *(_QWORD *)v510 = off_24C06E878;
          *(_OWORD *)(v510 + 8) = *(_OWORD *)&v648[8];
          *(_OWORD *)&v648[8] = 0uLL;
          *(_OWORD *)(v510 + 24) = *(_OWORD *)&v648[24];
          *(_OWORD *)(v510 + 38) = *(_OWORD *)&v648[38];
          v504 = v510 + 56;
          if (v502 == v505)
          {
            *(_QWORD *)&__dst = &v509[56 * v506];
            *((_QWORD *)&__dst + 1) = v510 + 56;
            *(_QWORD *)&v641 = v511;
          }
          else
          {
            do
            {
              *((_QWORD *)v510 - 7) = off_24C06E878;
              v510 -= 56;
              *(_OWORD *)(v510 + 8) = *(_OWORD *)(v502 - 48);
              *(_QWORD *)(v502 - 48) = 0;
              *(_QWORD *)(v502 - 40) = 0;
              v512 = *(_OWORD *)(v502 - 32);
              *(_OWORD *)(v510 + 38) = *(_OWORD *)(v502 - 18);
              *(_OWORD *)(v510 + 24) = v512;
              v502 -= 56;
            }
            while (v502 != v505);
            v513 = *((_QWORD *)&__dst + 1);
            v502 = __dst;
            *(_QWORD *)&__dst = v510;
            *((_QWORD *)&__dst + 1) = v504;
            *(_QWORD *)&v641 = v511;
            while (v513 != v502)
            {
              v514 = *(std::__shared_weak_count **)(v513 - 40);
              if (v514)
              {
                v515 = (unint64_t *)&v514->__shared_owners_;
                do
                  v516 = __ldaxr(v515);
                while (__stlxr(v516 - 1, v515));
                if (!v516)
                {
                  ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
                  std::__shared_weak_count::__release_weak(v514);
                }
              }
              v513 -= 56;
            }
          }
          if (v502)
            operator delete((void *)v502);
        }
        else
        {
          **((_QWORD **)&__dst + 1) = off_24C06E878;
          *(_OWORD *)(v502 + 8) = *(_OWORD *)&v648[8];
          *(_OWORD *)&v648[8] = 0uLL;
          v503 = *(_OWORD *)&v648[38];
          *(_OWORD *)(v502 + 24) = *(_OWORD *)&v648[24];
          *(_OWORD *)(v502 + 38) = v503;
          v504 = (char *)(v502 + 56);
        }
        *((_QWORD *)&__dst + 1) = v504;
        v517 = *(std::__shared_weak_count **)&v648[16];
        if (*(_QWORD *)&v648[16])
        {
          v518 = (unint64_t *)(*(_QWORD *)&v648[16] + 8);
          do
            v519 = __ldaxr(v518);
          while (__stlxr(v519 - 1, v518));
          if (!v519)
          {
            ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
            std::__shared_weak_count::__release_weak(v517);
          }
        }
        if (v626.i8[8] && sub_2081FD320((double *)v626.i64))
          break;
        if (++v501 >= v500)
          goto LABEL_518;
      }
      v520 = atomic_load((unsigned __int8 *)&qword_25452B598);
      if ((v520 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
      {
        __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
        __cxa_guard_release(&qword_25452B598);
      }
      v633 = (void *)1;
      *(_QWORD *)v634 = &off_253E50C48;
      v30 = v563;
      *(_QWORD *)v648 = operator new(0x30uLL);
      *(_OWORD *)&v648[8] = xmmword_20822ABD0;
      strcpy(*(char **)v648, "Ignoring expired sample after copying Y buffer");
      sub_207D01528((const std::error_condition *)&v633, (uint64_t)v648, (CFErrorRef *)a1);
LABEL_560:
      if ((v648[23] & 0x80000000) != 0)
        operator delete(*(void **)v648);
    }
    v521 = __dst;
    if ((_QWORD)__dst)
    {
      v522 = *((_QWORD *)&__dst + 1);
      v523 = (void *)__dst;
      if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
      {
        do
        {
          v524 = *(std::__shared_weak_count **)(v522 - 40);
          if (v524)
          {
            v525 = (unint64_t *)&v524->__shared_owners_;
            do
              v526 = __ldaxr(v525);
            while (__stlxr(v526 - 1, v525));
            if (!v526)
            {
              ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
              std::__shared_weak_count::__release_weak(v524);
            }
          }
          v522 -= 56;
        }
        while (v522 != v521);
        v523 = (void *)__dst;
      }
      *((_QWORD *)&__dst + 1) = v521;
LABEL_539:
      operator delete(v523);
    }
  }
  else
  {
    sub_207D6311C(*(_QWORD *)(a2 + 784), *(_QWORD *)(a2 + 824), *(_QWORD *)(a2 + 848), *(_QWORD *)(a2 + 872), (uint64_t *)&v620, (uint64_t *)&v617, v493, a11, a1);
  }
LABEL_540:
  if (v611)
  {
    v612 = (char *)v611;
    operator delete(v611);
  }
  if (v614)
  {
    v615 = (char *)v614;
    operator delete(v614);
  }
  if (v617)
  {
    v618 = (float32x4_t *)v617;
    operator delete(v617);
  }
  if (v620)
  {
    v621 = (char *)v620;
    operator delete(v620);
  }
  if (v623)
  {
    v624 = v623;
    operator delete(v623);
  }
  if (v30)
  {
    if (v541 != v30)
    {
      v529 = v541 - 24;
      v530 = v541 - 24;
      do
      {
        v531 = *(void (***)(char *))v530;
        v530 -= 24;
        (*v531)(v529);
        _ZF = v529 == v30;
        v529 = v530;
      }
      while (!_ZF);
    }
    operator delete(v30);
  }
  return kdebug_trace();
}

void sub_207DB72F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void (***a68)(_QWORD);
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void (***v74)(_QWORD);
  void (***v75)(_QWORD);
  void (***v76)(_QWORD);
  void (**v77)(_QWORD);
  BOOL v78;

  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  sub_207DB862C((void **)&STACK[0x400]);
  v69 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v69;
    operator delete(v69);
  }
  v70 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v70;
    operator delete(v70);
  }
  v71 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v71;
    operator delete(v71);
    v72 = (void *)STACK[0x2F0];
    if (!STACK[0x2F0])
    {
LABEL_9:
      v73 = (void *)STACK[0x308];
      if (!STACK[0x308])
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else
  {
    v72 = (void *)STACK[0x2F0];
    if (!STACK[0x2F0])
      goto LABEL_9;
  }
  STACK[0x2F8] = (unint64_t)v72;
  operator delete(v72);
  v73 = (void *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_10:
    v74 = a68;
    if (!a68)
      goto LABEL_20;
    goto LABEL_15;
  }
LABEL_14:
  STACK[0x310] = (unint64_t)v73;
  operator delete(v73);
  v74 = a68;
  if (!a68)
    goto LABEL_20;
LABEL_15:
  if ((void (***)(_QWORD))a28 != v74)
  {
    v75 = (void (***)(_QWORD))(a28 - 24);
    v76 = (void (***)(_QWORD))(a28 - 24);
    do
    {
      v77 = *v76;
      v76 -= 3;
      (*v77)(v75);
      v78 = v75 == v74;
      v75 = v76;
    }
    while (!v78);
  }
  operator delete(v74);
LABEL_20:
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_207DB7820(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)(a1 + 64) = &off_24C08A5D8;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (!v7)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(void))(a1 + 56))();
  return a1;
}

void sub_207DB78AC(uint64_t a1, uint64_t a2, int32x2_t *a3, int32x2_t *a4, unint64_t a5, unint64_t a6, float a7, float32x4_t a8, float32x2_t a9)
{
  float v10;
  float32x2_t v12;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  float32x2_t v21;
  int32x4_t v22;
  float v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float v31;
  float v32;
  float32x2_t v33;
  double v34;
  __int128 v35;
  int32x4_t v36;
  int8x16_t v37;
  float32x2_t v38;
  float32x2_t v39;
  int32x4_t v40;
  __int128 v41;
  __int128 v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  float32x2_t v47;
  __int128 v48;
  __int128 v49;
  float v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  void *v70;
  uint64_t v71;
  float v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  void *v76[2];
  char v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  char v83;
  char v84;
  _BYTE v85[20];
  _BYTE v86[12];
  __int32 v87;
  __int128 v88;
  char v89;
  char v90;
  void *v91;
  char v92;
  void *__p;
  char v94;
  char v95;
  char v96;
  __int128 v97;
  char v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  char v104;
  char v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unsigned __int8 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  char v116;

  v10 = a7 * a8.f32[0];
  if ((float)(a7 * a8.f32[0]) <= 0.0)
  {
    sub_207CCB5A4((uint64_t)&v97, "Patch diameter should be non-zero and non-negative.");
    v105 = 1;
    sub_207CCAFD0(0x59u, &v97, (uint64_t)&v106);
    *(_OWORD *)a1 = v106;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v116)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v16 = v109;
      if (v109)
      {
        *(_OWORD *)(a1 + 16) = v107;
        *(_QWORD *)(a1 + 32) = v108;
        v108 = 0;
        v107 = 0uLL;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v115)
      {
        v17 = v112;
        *(_QWORD *)(a1 + 64) = v111;
        *(_OWORD *)(a1 + 48) = v110;
        v110 = 0uLL;
        *(_QWORD *)(a1 + 72) = v17;
        *(_OWORD *)(a1 + 80) = v113;
        *(_QWORD *)(a1 + 96) = v114;
        v111 = 0;
        v113 = 0uLL;
        v114 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 328) = 0;
      if (v16 && SHIBYTE(v108) < 0)
        operator delete((void *)v107);
      if (!v105)
        return;
    }
    else
    {
      *(_BYTE *)(a1 + 328) = 0;
      if (!v105)
        return;
    }
    if (!v104)
      goto LABEL_38;
    if (v103 < 0)
    {
      operator delete(v102);
      if ((v101 & 0x80000000) == 0)
      {
LABEL_38:
        if (!v99)
          return;
        goto LABEL_39;
      }
    }
    else if ((v101 & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v100);
    if (!v99)
      return;
LABEL_39:
    if ((v98 & 0x80000000) == 0)
      return;
    v70 = (void *)v97;
    goto LABEL_78;
  }
  v12 = (float32x2_t)*a4;
  *(int32x2_t *)a8.f32 = vdup_lane_s32(*a4, 1);
  a9.i32[0] = a4[1].i32[0];
  v12.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(v12, v12), *(float32x2_t *)a8.f32, (float32x2_t)*a4, 1), a9, a9).f32[0]);
  a8.i32[0] = 897988541;
  if (v12.f32[0] == 0.0 || v12.f32[0] <= 0.000001)
  {
    sub_207CCB5A4((uint64_t)&v88, "Patch center should be non-zero.");
    v96 = 1;
    sub_207CCAFD0(0x59u, &v88, (uint64_t)&v106);
    *(_OWORD *)a1 = v106;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v116)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v14 = v109;
      if (v109)
      {
        *(_OWORD *)(a1 + 16) = v107;
        *(_QWORD *)(a1 + 32) = v108;
        v108 = 0;
        v107 = 0uLL;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v115)
      {
        v15 = v112;
        *(_QWORD *)(a1 + 64) = v111;
        *(_OWORD *)(a1 + 48) = v110;
        v110 = 0uLL;
        *(_QWORD *)(a1 + 72) = v15;
        *(_OWORD *)(a1 + 80) = v113;
        *(_QWORD *)(a1 + 96) = v114;
        v111 = 0;
        v113 = 0uLL;
        v114 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 328) = 0;
      if (v14 && SHIBYTE(v108) < 0)
        operator delete((void *)v107);
    }
    else
    {
      *(_BYTE *)(a1 + 328) = 0;
    }
    if (v96)
    {
      if (v95)
      {
        if (v94 < 0)
          operator delete(__p);
        if (v92 < 0)
          operator delete(v91);
      }
      if (v90 && v89 < 0)
      {
        v70 = (void *)v88;
LABEL_78:
        operator delete(v70);
        return;
      }
    }
    return;
  }
  sub_207D79D94(a4, a3, (uint64_t)v85, v12, a8);
  v21.i32[0] = v87;
  v22.i32[0] = a4[1].i32[0];
  v23 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v86[4], (float32x2_t)*a4), (float32x2_t)vdup_lane_s32(*a4, 1), *(float32x2_t *)&v86[4], 1), *(float32x2_t *)v22.i8, v21).f32[0];
  if (v23 > 0.0)
  {
    v22.i64[0] = *(_QWORD *)&v85[12];
    v24 = vzip1q_s32(*(int32x4_t *)v85, v22);
    v24.i32[2] = *(_DWORD *)&v86[4];
    v25 = vtrn2q_s32(*(int32x4_t *)v85, v22);
    v25.i32[2] = *(_DWORD *)&v86[8];
    v75 = v25;
    v26 = vdupq_laneq_s32(*(int32x4_t *)v85, 2);
    v26.i32[1] = *(_DWORD *)v86;
    v26.i32[2] = v87;
    v73 = v24;
    v74 = v26;
    v27 = (float)a6;
    if ((float)a5 >= (float)a6)
      v28 = (float)a5;
    else
      v28 = (float)a6;
    v72 = v23;
    v29 = sub_207D79C0C(v28, v10, v23);
    v30 = COERCE_FLOAT32X2_T(0.5);
    v31 = ((float)a5 + -1.0) * 0.5;
    v34 = v27;
    v32 = (v27 + -1.0) * 0.5;
    v33.f32[0] = 1.0 / v29;
    v44.i64[0] = *(_QWORD *)&v85[12];
    LODWORD(v34) = *(_DWORD *)v86;
    HIDWORD(v35) = 0;
    LODWORD(v35) = vdupq_lane_s32(*(int32x2_t *)(v85 + 12), 0).i32[3];
    DWORD1(v35) = *(_DWORD *)&v85[16];
    *(_DWORD *)(a1 + 36) = *(_DWORD *)&v85[16];
    v36 = v44;
    v36.i32[2] = LODWORD(v34);
    v37 = *(int8x16_t *)v85;
    v38 = *(float32x2_t *)&v86[4];
    v39.i32[0] = v87;
    v40 = *(int32x4_t *)v85;
    v40.i32[3] = 0;
    HIDWORD(v41) = 0;
    *(_QWORD *)&v41 = vdupq_n_s64(*(unint64_t *)(v86 + 4)).i64[1];
    *(_QWORD *)&v42 = vzip1q_s32(v40, v36).u64[0];
    DWORD2(v42) = *(_DWORD *)&v86[4];
    v43 = (int8x16_t)vtrn2q_s32(v40, v36);
    v43.i32[2] = *(_DWORD *)&v86[8];
    v45 = vzip2q_s32(v40, v36);
    *(float32x2_t *)v44.i8 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v42, (float32x2_t)0x8000000080000000), (float32x2_t)0x8000000080000000, *(float32x2_t *)v43.i8), (float32x2_t)0x8000000080000000, *(float32x2_t *)v45.i8);
    v45.i32[2] = v87;
    if (v29 == 0.0)
      v33.f32[0] = 1.0;
    v44.i32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v86[4], (float32x2_t)0x8000000080000000), (float32x2_t)0x8000000080000000, *(float32x2_t *)&v86[4], 1), (float32x2_t)0xBF80000080000000, v39).u32[0];
    LODWORD(v48) = v43.i32[0];
    v46 = vextq_s8(vextq_s8(v43, v43, 0xCuLL), (int8x16_t)v45, 8uLL);
    v47 = (float32x2_t)vdupq_laneq_s32(v45, 2).u64[0];
    DWORD1(v48) = v46.i32[0];
    *((_QWORD *)&v48 + 1) = v46.u32[1];
    *(_QWORD *)&v49 = v46.i64[1];
    *((_QWORD *)&v49 + 1) = v47.u32[0];
    if (v29 == 0.0)
      v50 = 1.0;
    else
      v50 = v29;
    v47.f32[0] = (float)-v31 / v50;
    v44.i32[3] = 1.0;
    v30.f32[0] = (float)-v32 / v50;
    *(float *)(a1 + 92) = v29;
    *(float *)(a1 + 108) = v29;
    *(float *)(a1 + 116) = v31;
    *(float *)(a1 + 120) = v32;
    v51 = (float32x2_t)vextq_s8(v37, v37, 8uLL).u64[0];
    v52.i32[1] = v73.i32[1];
    *(float *)a1 = v72;
    *(float *)(a1 + 4) = v10;
    *(_DWORD *)(a1 + 20) = v37.i32[0];
    DWORD2(v35) = LODWORD(v34);
    v53 = vmla_f32(vmul_n_f32(*(float32x2_t *)v37.i8, v33.f32[0]), 0, *(float32x2_t *)v36.i8);
    v54 = vmla_n_f32(vmul_f32(*(float32x2_t *)v37.i8, 0), *(float32x2_t *)v36.i8, v33.f32[0]);
    v55 = *(float32x2_t *)a2;
    *(_DWORD *)(a1 + 64) = v73.i32[2];
    *(_QWORD *)(a1 + 56) = v73.i64[0];
    v52.i32[0] = *(_DWORD *)(a2 + 8);
    v56 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v37.i8, v47.f32[0]), *(float32x2_t *)v36.i8, v30.f32[0]);
    v57 = vmla_f32(vmul_f32(v51, 0), v33, *(float32x2_t *)&v34);
    v58 = vmul_f32(v51, v33);
    v59 = vmul_f32(v51, v47);
    v47.i32[0] = *(_DWORD *)(a2 + 20);
    v60 = vmla_f32(v59, v30, *(float32x2_t *)&v34);
    v61 = *(float32x2_t *)(a2 + 24);
    v62 = vmla_f32(v53, 0, v38);
    v63 = vmla_f32(vmla_f32(v58, 0, *(float32x2_t *)&v34), 0, v39);
    v64 = *(float32x2_t *)(a2 + 12);
    v65.i32[1] = v75.i32[1];
    *(_DWORD *)(a1 + 76) = v75.i32[2];
    *(_QWORD *)(a1 + 68) = v75.i64[0];
    v65.i32[0] = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 88) = v74.i32[2];
    *(_QWORD *)(a1 + 80) = v74.i64[0];
    *(_DWORD *)(a1 + 136) = vmla_f32(vmla_lane_f32(vmul_f32(v52, v62), v47, v62, 1), v63, v65).u32[0];
    *(float32x2_t *)(a1 + 128) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v55, v62.f32[0]), v64, v62, 1), v61, v63.f32[0]);
    v66 = vmla_f32(v54, 0, v38);
    v67 = vmla_f32(v57, 0, v39);
    *(_DWORD *)(a1 + 148) = vmla_f32(vmla_lane_f32(vmul_f32(v52, v66), v47, v66, 1), v67, v65).u32[0];
    *(float32x2_t *)(a1 + 140) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v55, v66.f32[0]), v64, v66, 1), v61, v67.f32[0]);
    v68 = vadd_f32(v38, v56);
    DWORD2(v41) = v39.i32[0];
    *(_DWORD *)(a1 + 52) = v39.i32[0];
    v69 = vadd_f32(v39, v60);
    *(_DWORD *)(a1 + 160) = vmla_f32(vmla_lane_f32(vmul_f32(v52, v68), v47, v68, 1), v69, v65).u32[0];
    *(float32x2_t *)(a1 + 152) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v55, v68.f32[0]), v64, v68, 1), v61, v69.f32[0]);
    *(_DWORD *)(a1 + 172) = v63.i32[0];
    *(float32x2_t *)(a1 + 164) = v62;
    *(_DWORD *)(a1 + 184) = v67.i32[0];
    *(float32x2_t *)(a1 + 176) = v66;
    *(_DWORD *)(a1 + 196) = v69.i32[0];
    *(float32x2_t *)(a1 + 188) = v68;
    *(_OWORD *)(a1 + 248) = xmmword_208230220;
    *(int32x4_t *)(a1 + 200) = v40;
    *(_OWORD *)(a1 + 232) = v41;
    *(_OWORD *)(a1 + 216) = v35;
    HIDWORD(v42) = 0;
    *(_OWORD *)(a1 + 264) = v42;
    *(_OWORD *)(a1 + 280) = v48;
    *(_OWORD *)(a1 + 296) = v49;
    *(int32x4_t *)(a1 + 312) = v44;
    *(int32x2_t *)(a1 + 8) = *a4;
    *(_DWORD *)(a1 + 16) = a4[1].i32[0];
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 124) = 1065353216;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)&v85[4];
    *(_DWORD *)(a1 + 32) = *(_DWORD *)&v85[12];
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v86;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)&v86[8];
    *(_BYTE *)(a1 + 328) = 1;
    return;
  }
  sub_207CCB5A4((uint64_t)v76, "Patch distance should be non-zero and non-negative.");
  v84 = 1;
  sub_207CCAFD0(0x59u, (__int128 *)v76, (uint64_t)&v106);
  *(_OWORD *)a1 = v106;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v116)
  {
    *(_BYTE *)(a1 + 328) = 0;
    goto LABEL_69;
  }
  *(_BYTE *)(a1 + 40) = 0;
  if (v109)
  {
    *(_OWORD *)(a1 + 16) = v107;
    *(_QWORD *)(a1 + 32) = v108;
    v108 = 0;
    v107 = 0uLL;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v115)
  {
    v71 = v112;
    *(_QWORD *)(a1 + 64) = v111;
    *(_OWORD *)(a1 + 48) = v110;
    v110 = 0uLL;
    *(_QWORD *)(a1 + 72) = v71;
    *(_OWORD *)(a1 + 80) = v113;
    *(_QWORD *)(a1 + 96) = v114;
    v114 = 0;
    v111 = 0;
    v113 = 0uLL;
    *(_BYTE *)(a1 + 104) = 1;
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 328) = 0;
    if (SHIBYTE(v114) < 0)
    {
      operator delete((void *)v113);
      if ((SHIBYTE(v111) & 0x80000000) == 0)
      {
LABEL_47:
        if (!v109)
          goto LABEL_69;
        goto LABEL_67;
      }
    }
    else if ((SHIBYTE(v111) & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete((void *)v110);
    if (!v109)
      goto LABEL_69;
    goto LABEL_67;
  }
  *(_BYTE *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 328) = 0;
  if (!v109)
    goto LABEL_69;
LABEL_67:
  if (SHIBYTE(v108) < 0)
    operator delete((void *)v107);
LABEL_69:
  if (v84)
  {
    if (v83)
    {
      if (v82 < 0)
        operator delete(v81);
      if (v80 < 0)
        operator delete(v79);
    }
    if (v78 && v77 < 0)
    {
      v70 = v76[0];
      goto LABEL_78;
    }
  }
}

void sub_207DB8460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_207CCB148((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_207DB8474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_207CCB148((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_207DB8488(_Unwind_Exception *a1)
{
  sub_207CCB148((uint64_t)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_207DB849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207CCB148((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DB84B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_207CCB148((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_207DB84C4(_Unwind_Exception *a1)
{
  sub_207CCB148((uint64_t)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t sub_207DB84D8(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 328))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_207CCB3BC(v4, v1 + 1);
    sub_207CCB890((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C06F9D0, (void (*)(void *))sub_207CCB8E0);
  }
  return result;
}

void sub_207DB8554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB330((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DB8568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_207CCB330((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_207DB8584(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207DB8598(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 328) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_8:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void **sub_207DB862C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207DB86C4(uint64_t result, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t *a9, _QWORD *a10, char a11, char *a12, uint64_t a13)
{
  float32x2_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  float32x4_t *v45;
  uint64_t v46;
  unint64_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x2_t *v50;
  float32x2_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  float32x4_t *v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int v74;
  __int128 v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char v92;
  const void *v93;
  size_t v94;
  uint64_t **v95;
  uint64_t *v96;
  int v97;
  uint64_t *v98;
  unint64_t v99;
  size_t v100;
  int v101;
  uint64_t *v102;
  uint64_t **v103;
  uint64_t *v104;
  int v105;
  uint64_t **v106;
  size_t v107;
  size_t v108;
  int v109;
  uint64_t *v110;
  __int128 v111;
  int v112;
  const void *v113;
  size_t v114;
  size_t v115;
  int v116;
  int v117;
  char **v118;
  char *v119;
  char **v120;
  char v121;
  _BYTE *v122;
  size_t v123;
  char *v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  size_t v129;
  size_t v130;
  int v131;
  int v132;
  char *v133;
  _BYTE *v134;
  int v135;
  uint64_t *v136;
  int v137;
  const void *v138;
  size_t v139;
  size_t v140;
  int v141;
  int v142;
  int v143;
  const void *v144;
  size_t v145;
  size_t v146;
  int v147;
  int v148;
  __int128 v149;
  __int128 v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  _BYTE *v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  __int16 v169;
  unint64_t v170;
  __int128 v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *p_shared_owners;
  unint64_t v175;
  uint64_t v176;
  int v177;
  __int16 v178;
  unint64_t v179;
  uint64_t v180;
  char **v181;
  char *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  __int128 v191;
  char **v192;
  char **v193;
  char *v194;
  _BYTE *v195;
  size_t v196;
  char *v197;
  char *v198;
  char *v199;
  int v200;
  char *v201;
  size_t v202;
  size_t v203;
  int v204;
  int v205;
  char *v206;
  _BYTE *v207;
  __int128 v208;
  __int128 v209;
  char *v210;
  uint64_t v211;
  _BYTE *v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  char *v217;
  void **v218;
  uint64_t *v219;
  uint64_t v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  char v226;
  char **v227;
  float v228;
  char **v229;
  char *v230;
  int v231;
  char *v232;
  BOOL v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v236;
  char *v237;
  char **v238;
  float v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  char *v244;
  char **v245;
  float v246;
  int8x16_t v247;
  float32x4_t v248;
  int8x16_t v249;
  uint64_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float64x2_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int8x16_t v259;
  int8x16_t v260;
  float32x2_t v261;
  int8x16_t v262;
  int8x16_t v263;
  float32x2_t v264;
  int8x16_t v265;
  int8x16_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float v269;
  float v270;
  float32x2_t v271;
  float v272;
  float32x2_t v273;
  float v274;
  float32x2_t v275;
  float v276;
  float32x2_t v277;
  int8x16_t v278;
  int8x16_t v279;
  float32x4_t v280;
  float32x2_t v281;
  float32x4_t v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float32x2_t v290;
  float32x2_t v291;
  float32x2_t v292;
  float32x2_t v293;
  float32x2_t v294;
  float32x2_t v295;
  float32x2_t v296;
  float32x2_t v297;
  float32x2_t v298;
  float32x2_t v299;
  float32x2_t v300;
  float32x2_t v301;
  float32x4_t v302;
  float *v303;
  float *v304;
  float *v305;
  float v306;
  float *v307;
  float v308;
  float v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  int v318;
  float32x2_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  float32x2_t v328;
  float32x2_t v329;
  float32x2_t v330;
  double v331;
  uint64_t v332;
  uint64_t **v333;
  uint64_t v334;
  unint64_t v335;
  __int128 *v336;
  __int128 *v337;
  int v338;
  uint64_t **v339;
  uint64_t ***v340;
  uint64_t ***v341;
  int v342;
  uint64_t *v343;
  size_t v344;
  uint64_t **v345;
  uint64_t *v346;
  uint64_t *v347;
  int v348;
  uint64_t **v349;
  size_t v350;
  size_t v351;
  int v352;
  int v353;
  uint64_t **v354;
  _BYTE *v355;
  __int128 v356;
  __int128 v357;
  uint64_t *v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  uint64_t *v362;
  int v363;
  __int16 v364;
  unint64_t v365;
  uint64_t **v366;
  uint64_t *v367;
  uint64_t **v368;
  uint64_t v369;
  _BYTE *v370;
  int v371;
  uint64_t *v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t v379;
  char *v380;
  char **v381;
  char **v382;
  int v383;
  uint64_t *v384;
  size_t v385;
  char *v386;
  char *v387;
  char *v388;
  int v389;
  char *v390;
  size_t v391;
  size_t v392;
  int v393;
  int v394;
  char *v395;
  _BYTE *v396;
  __int128 v397;
  char *v398;
  char *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  _BYTE *v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  unint64_t v412;
  unint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  uint64_t *v420;
  uint64_t **v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  __int128 v427;
  uint64_t *v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  uint64_t **v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t **v436;
  int v437;
  __int16 v438;
  unint64_t v439;
  uint64_t **v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  char *v444;
  unint64_t v445;
  char *v446;
  char **v447;
  char **v448;
  int v449;
  uint64_t *v450;
  uint64_t *v451;
  char *v452;
  char *v453;
  char *v454;
  int v455;
  char *v456;
  uint64_t *v457;
  size_t v458;
  int v459;
  int v460;
  char *v461;
  _BYTE *v462;
  __int128 v463;
  char *v464;
  char *v465;
  uint64_t v466;
  char *v467;
  uint64_t v468;
  _BYTE *v469;
  int v470;
  uint64_t v471;
  int v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  _BYTE *v477;
  uint64_t v478;
  char *v479;
  BOOL v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  BOOL v487;
  uint64_t v488;
  _DWORD *v489;
  __int16 *v490;
  float16x4_t *v491;
  float32x4_t *v492;
  uint64_t v493;
  float16x8_t v494;
  float32x4_t v495;
  float32x4_t v496;
  int v497;
  __int16 v498;
  char *v503;
  char **v504;
  char **v505;
  int v506;
  uint64_t *v507;
  size_t v508;
  char *v509;
  char *v510;
  char *v511;
  int v512;
  char *v513;
  size_t v514;
  size_t v515;
  int v516;
  int v517;
  char *v518;
  _BYTE *v519;
  __int128 v520;
  char *v521;
  char *v522;
  uint64_t v523;
  char *v524;
  uint64_t v525;
  _BYTE *v526;
  int v527;
  uint64_t v528;
  int v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  char *v534;
  uint64_t v535;
  uint64_t **v536;
  uint64_t ***v537;
  uint64_t ***v538;
  int v539;
  uint64_t *v540;
  size_t v541;
  uint64_t **v542;
  uint64_t *v543;
  uint64_t *v544;
  int v545;
  uint64_t **v546;
  size_t v547;
  size_t v548;
  int v549;
  int v550;
  uint64_t **v551;
  _BYTE *v552;
  __int128 v553;
  uint64_t **v554;
  uint64_t *v555;
  uint64_t **v556;
  uint64_t v557;
  _BYTE *v558;
  int v559;
  uint64_t *v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t *v565;
  uint64_t v566;
  __int128 v567;
  __int128 v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  uint64_t **v584;
  int v585;
  std::string *v586;
  uint64_t **v587;
  void *v588;
  void **v589;
  void *v590;
  uint64_t ***v591;
  uint64_t **v592;
  int v593;
  uint64_t *v594;
  size_t v595;
  size_t v596;
  int v597;
  uint64_t **v598;
  uint64_t ***v599;
  uint64_t **v600;
  int v601;
  uint64_t ***v602;
  size_t v603;
  size_t v604;
  int v605;
  uint64_t **v606;
  int v607;
  uint64_t *v608;
  size_t v609;
  size_t v610;
  int v611;
  int v612;
  unsigned int v613;
  uint64_t v614;
  uint64_t *v615;
  uint64_t *v616;
  BOOL v617;
  uint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  unint64_t v625;
  uint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t *v640;
  unint64_t *v641;
  unint64_t v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unsigned __int8 v651;
  uint64_t v652;
  uint64_t nn;
  unsigned __int8 v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  uint64_t v658;
  char *v659;
  char *v660;
  uint64_t v661;
  unint64_t v662;
  unint64_t v663;
  unint64_t v664;
  unint64_t v665;
  _BYTE *v666;
  char *v667;
  char *v668;
  char *v669;
  char *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  char *v674;
  _OWORD *v675;
  char *v676;
  uint64_t v677;
  __int128 v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  std::__shared_weak_count *v682;
  unint64_t *v683;
  unint64_t v684;
  float *v685;
  float *v686;
  unint64_t v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  uint64_t v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  char *v697;
  _BYTE *v698;
  size_t v699;
  unint64_t v700;
  uint64_t v701;
  char *v702;
  uint64_t v703;
  unint64_t v704;
  unint64_t v705;
  char *v706;
  void *v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  _BYTE *v714;
  uint64_t v715;
  _BYTE *v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  unint64_t v721;
  _BYTE *v722;
  _QWORD *v723;
  char *v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  char *v728;
  _OWORD *v729;
  __int128 *v730;
  uint64_t v731;
  __int128 v732;
  uint64_t v733;
  uint64_t v734;
  _BYTE *v735;
  _BYTE *v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  char *v742;
  char *v743;
  int64_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  char *v748;
  char *v749;
  __int128 *v750;
  uint64_t v751;
  __int128 v752;
  uint64_t v753;
  char *v754;
  uint64_t v755;
  uint64_t v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unsigned __int8 v762;
  uint64_t v763;
  uint64_t i;
  unsigned __int8 v765;
  __int128 v766;
  std::__shared_weak_count *v767;
  unint64_t *v768;
  unint64_t v769;
  _BYTE *v770;
  void **v771;
  uint64_t v772;
  char *v773;
  unint64_t v774;
  unint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  char *v779;
  size_t v780;
  char *v781;
  char *v782;
  char *v783;
  char *v784;
  char *v785;
  char *v786;
  uint64_t v787;
  unint64_t v788;
  unint64_t v789;
  char *v790;
  char *v791;
  _QWORD *v792;
  _OWORD *v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unsigned __int8 v800;
  uint64_t v801;
  uint64_t j;
  unsigned __int8 v803;
  __int128 v804;
  std::__shared_weak_count *v805;
  unint64_t *v806;
  unint64_t v807;
  char *v808;
  _QWORD *v809;
  char *v810;
  char *v811;
  _BYTE *v812;
  void **v813;
  int64_t v814;
  unint64_t v815;
  unint64_t v816;
  char *v817;
  uint64_t v818;
  _QWORD *v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  char *v823;
  size_t v824;
  char *v825;
  char *v826;
  char *v827;
  char *v828;
  char *v829;
  unint64_t v830;
  char *v831;
  uint64_t v832;
  uint64_t v833;
  char *v834;
  char *v835;
  char *v836;
  uint64_t v837;
  __int128 v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  char *v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  char *v857;
  char *v858;
  char *v859;
  uint64_t v860;
  __int128 v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  char *v865;
  uint64_t v866;
  __int128 v867;
  uint64_t v868;
  __int128 v869;
  __int128 v870;
  uint64_t v871;
  uint64_t v872;
  void *v873;
  uint64_t v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  char *v881;
  char *v882;
  _QWORD *v883;
  char *v884;
  char *v885;
  char *v886;
  char *v887;
  void **v888;
  void *v889;
  unint64_t *v890;
  unint64_t *v891;
  unint64_t v892;
  uint64_t v893;
  unint64_t v894;
  unint64_t v895;
  uint64_t v896;
  unsigned __int8 v897;
  uint64_t v898;
  uint64_t k;
  unsigned __int8 v900;
  void *v901;
  std::__shared_weak_count *v902;
  unint64_t *v903;
  unint64_t v904;
  char *v905;
  _QWORD *v906;
  char *v907;
  uint64_t v908;
  _BYTE *v909;
  uint64_t v910;
  unint64_t v911;
  uint64_t v912;
  uint64_t v913;
  unint64_t v914;
  char *v915;
  size_t v916;
  char *v917;
  char *v918;
  char *v919;
  _QWORD *v920;
  char *v921;
  char *v922;
  char *v923;
  uint64_t v924;
  uint64_t v925;
  char *v926;
  char *v927;
  char *v928;
  uint64_t v929;
  __int128 v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  uint64_t v937;
  uint64_t v938;
  int64_t v939;
  unint64_t v940;
  char *v941;
  uint64_t v942;
  char *v943;
  uint64_t v944;
  _BYTE *v945;
  _BYTE *v946;
  int64_t v947;
  char *v948;
  __int128 v949;
  __int128 v950;
  size_t v951;
  size_t v952;
  _QWORD *v953;
  int v954;
  __int128 v955;
  int v956;
  uint64_t v957;
  int v958;
  BOOL v959;
  BOOL v960;
  unint64_t v961;
  unint64_t v962;
  unsigned __int8 v963;
  uint64_t v964;
  uint64_t m;
  unsigned __int8 v966;
  unint64_t v967;
  int v968;
  BOOL v969;
  int v970;
  BOOL v971;
  void *v972;
  uint64_t v973;
  uint64_t v974;
  unsigned __int8 v975;
  uint64_t v976;
  uint64_t n;
  unsigned __int8 v978;
  int v979;
  uint64_t v980;
  uint64_t v981;
  int v982;
  uint64_t v983;
  const void *v984;
  int v985;
  int v986;
  uint64_t v987;
  uint64_t v988;
  _DWORD *v989;
  _DWORD *v990;
  int v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  int v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  char *v1002;
  int v1003;
  _DWORD *v1004;
  _DWORD *v1005;
  _DWORD *v1006;
  _DWORD *v1007;
  _DWORD *v1008;
  _DWORD *v1009;
  _DWORD *v1010;
  _DWORD *v1011;
  int v1012;
  int v1013;
  int v1014;
  uint64_t v1015;
  uint64_t v1016;
  _DWORD *v1017;
  _DWORD *v1018;
  int v1019;
  char *v1020;
  char *v1021;
  size_t v1022;
  int v1023;
  int v1024;
  unsigned __int8 v1025;
  BOOL v1026;
  uint64_t v1027;
  uint64_t ii;
  unsigned __int8 v1029;
  int v1030;
  uint64_t v1031;
  uint64_t v1032;
  _DWORD *v1033;
  _DWORD *v1034;
  int v1035;
  uint64_t v1036;
  uint64_t v1037;
  int v1038;
  _DWORD *v1039;
  _DWORD *v1040;
  int v1041;
  _QWORD *v1042;
  __int128 v1043;
  __int128 v1044;
  size_t v1045;
  size_t v1046;
  int v1047;
  __int128 v1048;
  int v1049;
  uint64_t v1050;
  int v1051;
  BOOL v1052;
  BOOL v1053;
  unint64_t v1054;
  unint64_t v1055;
  unsigned __int8 v1056;
  uint64_t v1057;
  uint64_t jj;
  unsigned __int8 v1059;
  unint64_t v1060;
  int v1061;
  int v1062;
  BOOL v1063;
  BOOL v1064;
  void *v1065;
  uint64_t v1066;
  uint64_t v1067;
  unsigned __int8 v1068;
  uint64_t v1069;
  uint64_t kk;
  unsigned __int8 v1071;
  int v1072;
  uint64_t v1073;
  uint64_t v1074;
  int v1075;
  uint64_t v1076;
  const void *v1077;
  int v1078;
  int v1079;
  uint64_t v1080;
  uint64_t v1081;
  _DWORD *v1082;
  _DWORD *v1083;
  int v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  char *v1094;
  uint64_t v1095;
  int v1096;
  _DWORD *v1097;
  _DWORD *v1098;
  _DWORD *v1099;
  _DWORD *v1100;
  _DWORD *v1101;
  _DWORD *v1102;
  _DWORD *v1103;
  _DWORD *v1104;
  int v1105;
  int v1106;
  int v1107;
  uint64_t v1108;
  uint64_t v1109;
  _DWORD *v1110;
  _DWORD *v1111;
  int v1112;
  char *v1113;
  char *v1114;
  size_t v1115;
  int v1116;
  int v1117;
  unsigned __int8 v1118;
  BOOL v1119;
  uint64_t v1120;
  uint64_t mm;
  unsigned __int8 v1122;
  int v1123;
  uint64_t v1124;
  uint64_t v1125;
  _DWORD *v1126;
  _DWORD *v1127;
  int v1128;
  uint64_t v1129;
  uint64_t v1130;
  int v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  _DWORD *v1135;
  _DWORD *v1136;
  int v1137;
  _QWORD *v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  _QWORD *v1145;
  _BYTE *v1146;
  _BYTE *v1147;
  int64_t v1148;
  char *v1149;
  char *v1150;
  _BYTE *v1151;
  _BYTE *v1152;
  uint64_t v1153;
  char *v1154;
  size_t v1155;
  _BYTE *v1156;
  _BYTE *v1157;
  int64_t v1158;
  char *v1159;
  char *v1160;
  _QWORD *v1161;
  uint64_t v1162;
  uint64_t v1163;
  void *v1164;
  uint64_t v1165;
  void *v1166;
  void *v1167;
  std::__shared_weak_count *v1168;
  unint64_t *v1169;
  unint64_t v1170;
  std::__shared_weak_count *v1171;
  unint64_t *v1172;
  unint64_t v1173;
  unint64_t v1174;
  int v1175;
  uint64_t ***v1176;
  unint64_t v1177;
  unint64_t *v1178;
  uint64_t **v1179;
  char v1180;
  uint64_t **v1181;
  uint64_t **v1182;
  uint64_t ***v1183;
  _QWORD *v1184;
  BOOL v1186;
  int v1187;
  uint64_t **v1188;
  uint64_t v1189;
  uint64_t v1190;
  float v1191;
  _QWORD *v1192;
  uint64_t v1193;
  int v1194;
  unsigned __int8 v1195;
  uint64_t v1196;
  uint64_t i1;
  unsigned __int8 v1198;
  uint64_t *v1199;
  uint64_t **v1200;
  std::__shared_weak_count *v1201;
  unint64_t *v1202;
  unint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  int v1206;
  float32x4_t v1207;
  int v1208;
  uint64_t v1209;
  int v1210;
  int v1211;
  unsigned __int8 v1212;
  uint64_t v1213;
  uint64_t i2;
  unsigned __int8 v1215;
  BOOL v1216;
  int v1218;
  unsigned __int8 v1219;
  uint64_t v1220;
  uint64_t i3;
  unsigned __int8 v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  char *v1226;
  char *v1227;
  uint64_t v1228;
  float32x4_t v1229;
  unint64_t v1230;
  char *v1231;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  unint64_t v1235;
  char *v1236;
  char *v1237;
  char *v1238;
  uint64_t v1239;
  int v1240;
  char *v1241;
  uint64_t **v1242;
  unint64_t *v1243;
  uint64_t v1244;
  unint64_t v1245;
  unint64_t v1246;
  int v1247;
  int v1248;
  unsigned __int8 v1249;
  uint64_t v1250;
  uint64_t i4;
  unsigned __int8 v1252;
  uint64_t *v1253;
  uint64_t **v1254;
  std::__shared_weak_count *v1255;
  unint64_t *v1256;
  unint64_t v1257;
  unint64_t v1258;
  int v1259;
  unint64_t v1260;
  uint64_t v1261;
  uint64_t **v1262;
  int v1263;
  int v1264;
  uint64_t v1265;
  int v1266;
  unint64_t v1267;
  unsigned __int8 v1268;
  uint64_t i5;
  uint64_t v1270;
  unsigned __int8 v1271;
  unint64_t v1272;
  BOOL v1273;
  unsigned __int8 v1274;
  uint64_t v1275;
  uint64_t i6;
  unsigned __int8 v1277;
  unint64_t v1278;
  void *v1279;
  unint64_t v1280;
  _BOOL4 v1281;
  unint64_t v1282;
  unint64_t v1283;
  int v1284;
  unint64_t v1285;
  unint64_t v1286;
  int v1287;
  unsigned __int8 v1288;
  uint64_t v1289;
  uint64_t i7;
  unsigned __int8 v1291;
  BOOL v1292;
  BOOL v1293;
  unint64_t v1294;
  _BOOL4 v1295;
  unsigned int v1296;
  _BOOL8 v1297;
  unint64_t v1298;
  uint64_t v1299;
  unint64_t v1300;
  unsigned int v1301;
  unint64_t v1302;
  unint64_t v1303;
  unint64_t v1304;
  unint64_t v1305;
  unint64_t v1306;
  size_t v1307;
  int v1308;
  uint64_t v1309;
  unsigned int v1310;
  BOOL v1311;
  unint64_t v1312;
  _BOOL4 v1313;
  uint64_t v1314;
  unsigned __int8 v1315;
  uint64_t v1316;
  uint64_t i8;
  unsigned __int8 v1318;
  int v1319;
  uint64_t v1320;
  const void *v1321;
  int v1322;
  uint64_t v1323;
  int v1324;
  uint64_t v1325;
  uint64_t v1326;
  _DWORD *v1327;
  _DWORD *v1328;
  int v1329;
  uint64_t v1330;
  uint64_t v1331;
  int v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  char *v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  int v1342;
  _DWORD *v1343;
  _DWORD *v1344;
  _DWORD *v1345;
  _DWORD *v1346;
  _DWORD *v1347;
  _DWORD *v1348;
  _DWORD *v1349;
  _DWORD *v1350;
  int v1351;
  int v1352;
  int v1353;
  uint64_t v1354;
  _DWORD *v1355;
  _DWORD *v1356;
  int v1357;
  char *v1358;
  char *v1359;
  int v1360;
  unsigned __int8 v1361;
  BOOL v1362;
  uint64_t i9;
  uint64_t v1364;
  unsigned __int8 v1365;
  int v1366;
  uint64_t v1367;
  _DWORD *v1368;
  _DWORD *v1369;
  int v1370;
  uint64_t v1371;
  int v1372;
  uint64_t v1373;
  _DWORD *v1374;
  _DWORD *v1375;
  int v1376;
  char *v1377;
  char *v1378;
  void *v1379;
  uint64_t v1380;
  float32x4_t *v1381;
  uint64_t v1382;
  float *v1383;
  float v1384;
  float *v1385;
  float32x4_t v1387;
  float32x4_t *v1388;
  uint64_t v1389;
  float32x4_t v1390;
  int v1391;
  float v1392;
  uint64_t **v1393;
  unint64_t *v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  int v1398;
  int v1399;
  int v1400;
  unsigned __int8 v1401;
  uint64_t v1402;
  uint64_t i10;
  unsigned __int8 v1404;
  uint64_t *v1405;
  uint64_t **v1406;
  std::__shared_weak_count *v1407;
  unint64_t *v1408;
  unint64_t v1409;
  unint64_t v1410;
  int v1411;
  unint64_t v1412;
  uint64_t v1413;
  uint64_t **v1414;
  int v1415;
  int v1416;
  uint64_t v1417;
  uint64_t v1418;
  unsigned __int8 v1419;
  uint64_t i11;
  uint64_t v1421;
  unsigned __int8 v1422;
  unint64_t v1423;
  BOOL v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  unsigned __int8 v1428;
  uint64_t i12;
  uint64_t v1430;
  unsigned __int8 v1431;
  void *v1432;
  BOOL v1433;
  BOOL v1434;
  unint64_t v1435;
  unint64_t v1436;
  int v1437;
  int v1438;
  unint64_t v1439;
  unint64_t v1440;
  int v1441;
  unsigned __int8 v1442;
  uint64_t v1443;
  uint64_t i13;
  unsigned __int8 v1445;
  BOOL v1446;
  BOOL v1447;
  unint64_t v1448;
  int v1449;
  unsigned int v1450;
  _BOOL8 v1451;
  unint64_t v1452;
  uint64_t v1453;
  unint64_t v1454;
  unint64_t v1455;
  unint64_t v1456;
  unint64_t v1457;
  unint64_t v1458;
  unsigned int v1459;
  BOOL v1460;
  unint64_t v1461;
  int v1462;
  uint64_t v1463;
  unsigned __int8 v1464;
  uint64_t v1465;
  uint64_t i14;
  unsigned __int8 v1467;
  uint64_t v1468;
  int v1469;
  uint64_t v1470;
  const void *v1471;
  int v1472;
  uint64_t v1473;
  int v1474;
  uint64_t v1475;
  uint64_t v1476;
  _DWORD *v1477;
  _DWORD *v1478;
  int v1479;
  uint64_t v1480;
  uint64_t v1481;
  int v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  char *v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  int v1492;
  _DWORD *v1493;
  _DWORD *v1494;
  _DWORD *v1495;
  _DWORD *v1496;
  _DWORD *v1497;
  _DWORD *v1498;
  _DWORD *v1499;
  _DWORD *v1500;
  int v1501;
  int v1502;
  int v1503;
  uint64_t v1504;
  _DWORD *v1505;
  _DWORD *v1506;
  int v1507;
  char *v1508;
  char *v1509;
  int v1510;
  unsigned __int8 v1511;
  BOOL v1512;
  uint64_t i15;
  uint64_t v1514;
  unsigned __int8 v1515;
  int v1516;
  uint64_t v1517;
  _DWORD *v1518;
  _DWORD *v1519;
  int v1520;
  uint64_t v1521;
  int v1522;
  uint64_t v1523;
  uint64_t v1524;
  _DWORD *v1525;
  _DWORD *v1526;
  int v1527;
  char *v1528;
  char *v1529;
  void *v1530;
  unint64_t *v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  _BOOL4 v1535;
  BOOL v1536;
  unint64_t v1537;
  unint64_t v1538;
  int v1539;
  int v1540;
  _BOOL8 v1541;
  unint64_t v1542;
  _QWORD *v1543;
  uint64_t **v1544;
  std::__shared_weak_count *v1545;
  unint64_t *v1546;
  unint64_t v1547;
  unint64_t v1548;
  int v1549;
  int v1550;
  int v1551;
  void *v1552;
  int v1553;
  unsigned __int8 v1554;
  uint64_t v1555;
  uint64_t i16;
  unsigned __int8 v1557;
  BOOL v1558;
  BOOL v1559;
  void *v1560;
  int v1561;
  unsigned int v1562;
  _BOOL8 v1563;
  uint64_t v1564;
  uint64_t v1565;
  unint64_t v1566;
  unint64_t v1567;
  unint64_t v1568;
  unint64_t v1569;
  unint64_t v1570;
  uint64_t v1571;
  unsigned int v1572;
  BOOL v1573;
  unint64_t v1574;
  int v1575;
  uint64_t v1576;
  unsigned __int8 v1577;
  uint64_t v1578;
  uint64_t i17;
  unsigned __int8 v1580;
  int v1581;
  uint64_t v1582;
  const void *v1583;
  int v1584;
  uint64_t v1585;
  int v1586;
  uint64_t v1587;
  uint64_t v1588;
  _DWORD *v1589;
  _DWORD *v1590;
  int v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  int v1598;
  uint64_t v1599;
  uint64_t v1600;
  char *v1601;
  uint64_t v1602;
  int v1603;
  _DWORD *v1604;
  _DWORD *v1605;
  _DWORD *v1606;
  _DWORD *v1607;
  _DWORD *v1608;
  _DWORD *v1609;
  _DWORD *v1610;
  _DWORD *v1611;
  int v1612;
  int v1613;
  int v1614;
  uint64_t v1615;
  uint64_t v1616;
  _DWORD *v1617;
  _DWORD *v1618;
  int v1619;
  char *v1620;
  char *v1621;
  int v1622;
  unsigned __int8 v1623;
  BOOL v1624;
  uint64_t i18;
  uint64_t v1626;
  unsigned __int8 v1627;
  int v1628;
  uint64_t v1629;
  _DWORD *v1630;
  _DWORD *v1631;
  int v1632;
  uint64_t v1633;
  int v1634;
  _DWORD *v1635;
  _DWORD *v1636;
  int v1637;
  int v1638;
  uint64_t v1639;
  char *v1640;
  char *v1641;
  void *v1642;
  uint64_t v1643;
  uint64_t i19;
  uint64_t v1645;
  uint64_t v1646;
  _DWORD *v1647;
  char *v1648;
  unsigned int v1649;
  uint64_t v1650;
  float v1651;
  char *v1652;
  int v1653;
  int v1654;
  int v1655;
  float v1656;
  float v1657;
  uint64_t ***v1658;
  uint64_t **v1659;
  uint64_t ***v1660;
  unint64_t v1661;
  __int128 v1662;
  __int128 v1663;
  char *v1664;
  _QWORD *v1665;
  _QWORD *v1666;
  void *v1667;
  int32x4_t v1668;
  float *v1669;
  float32x4_t v1670;
  float v1671;
  float32x2_t v1672;
  float32x4_t v1673;
  int8x16_t v1674;
  int8x16_t v1675;
  int8x16_t v1676;
  float32x4_t v1677;
  float32x4_t v1678;
  float32x4_t v1679;
  int8x16_t v1680;
  int v1681;
  uint64_t *v1682;
  _QWORD *v1683;
  uint64_t v1685;
  uint64_t *v1689;
  float32x4_t v1690;
  float32x4_t v1691;
  float32x4_t v1692;
  float32x4_t v1693;
  unint64_t v1694;
  uint64_t v1695;
  int v1696;
  uint64_t v1697;
  unint64_t v1698;
  int8x16_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t **v1702;
  uint64_t v1703;
  int v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  int v1709;
  const float *v1710;
  BOOL v1711;
  char *v1712;
  char *v1713;
  uint64_t v1714;
  int v1715;
  int v1716;
  uint64_t v1717;
  size_t __len;
  uint64_t __lena;
  int __lenb;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  int v1725;
  int v1726;
  int v1727;
  int v1728;
  size_t v1729;
  uint64_t v1730;
  void *v1731;
  char *v1732;
  unint64_t v1733;
  unint64_t v1734;
  unint64_t *v1735;
  uint64_t *v1736;
  uint64_t v1737;
  uint64_t v1738;
  char *v1740;
  _BOOL4 v1741;
  uint64_t *v1742;
  int v1743;
  unint64_t v1744;
  char *v1745;
  char *v1746;
  unint64_t v1747;
  uint64_t *v1748;
  uint64_t v1749;
  char v1750;
  uint64_t v1751;
  size_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t *v1755;
  uint64_t v1756;
  int v1757;
  unint64_t v1758;
  void **v1759;
  uint64_t v1760;
  unint64_t v1761;
  uint64_t *v1762;
  unint64_t v1763;
  unint64_t v1764;
  unsigned int v1765;
  void **v1766;
  uint64_t v1767;
  int v1768;
  unint64_t v1769;
  unsigned int v1770;
  uint64_t v1771;
  uint64_t v1772;
  void *v1773;
  char v1774;
  float32x4_t v1775;
  size_t v1776;
  uint64_t v1777;
  _QWORD *v1778;
  void **v1779;
  int v1780;
  unint64_t v1783;
  float32x4_t v1784;
  int8x16_t v1785;
  uint64_t v1786;
  unint64_t v1787;
  _QWORD *v1788;
  unint64_t v1789;
  float32x4_t v1790;
  int8x16_t v1791;
  uint64_t v1792;
  _BYTE *v1793;
  _QWORD *v1794;
  char *v1795;
  uint64_t ***v1796;
  float32x4_t v1797;
  float32x4_t v1798;
  uint64_t v1799;
  size_t v1800;
  unint64_t v1801;
  char *v1802;
  uint64_t v1803;
  float32x4_t v1804;
  int v1805;
  size_t v1806;
  int v1807;
  size_t v1808;
  size_t v1809;
  float32x4_t v1810;
  unint64_t v1811;
  void *v1812;
  unint64_t v1813;
  uint64_t v1814;
  _QWORD *v1815;
  float v1816;
  unint64_t v1817;
  uint64_t v1818;
  unint64_t v1819;
  int v1820;
  unint64_t v1821;
  uint64_t v1822;
  void *v1823[2];
  uint64_t v1824;
  char v1825;
  _BYTE __p[88];
  _BYTE v1827[24];
  __int128 v1828;
  __int128 v1829;
  _BYTE v1830[64];
  uint64_t v1831;
  uint64_t v1832;
  void *v1833;
  uint64_t v1834;
  __int128 v1835;
  _QWORD v1836[5];
  uint64_t v1837;
  uint64_t v1838;
  void *v1839;
  uint64_t v1840;
  __int128 v1841;
  uint64_t v1842;
  int v1843;
  __int128 v1844;
  __int128 v1845;
  int v1846;
  __int128 v1847;
  __int128 v1848;
  __int128 v1849;
  __int128 v1850;
  __int128 __dst;
  _QWORD v1852[4];
  __int128 v1853;
  char *v1854;
  __int128 v1855;
  char v1856;
  void *memptr[2];
  __int128 v1858;
  __int128 v1859;
  __int128 v1860;
  __int128 v1861;
  _OWORD v1862[2];
  unsigned __int8 v1863;
  char **v1864;
  char *v1865;
  uint64_t v1866;
  uint64_t ***v1867;
  uint64_t **v1868;
  uint64_t v1869;
  void *v1870[10];
  float v1871;
  char **v1872;
  char *v1873;
  uint64_t v1874;
  void *v1875[2];
  void *v1876[2];
  __int128 v1877;
  int v1878;
  uint64_t v1879;
  void *v1880;
  float32x4_t *v1881;
  float32x4_t *v1882;
  _BYTE __src[33];
  _BYTE v1884[31];
  char v1885;
  _BYTE v1886[64];
  char v1887;
  int8x16_t *v1888;
  void *v1889;
  uint64_t v1890;
  __int128 v1891;
  __int128 v1892;
  _OWORD v1893[2];
  uint64_t v1894;

  v1683 = (_QWORD *)result;
  v1894 = *MEMORY[0x24BDAC8D0];
  v14 = a4[1] - *a4;
  if (!v14)
    goto LABEL_2507;
  v1695 = 0;
  v1685 = v14 >> 3;
  v1702 = (uint64_t **)(a6 + 1);
  v1710 = (const float *)(a2 + 588);
  v1698 = a2 + 592;
  do
  {
    kdebug_trace();
    v1703 = *(_QWORD *)(*a4 + 8 * v1695);
    if (a11)
    {
      v15 = a10;
      v17 = (char *)a10[1];
      v16 = a10[2];
      if ((unint64_t)v17 >= v16)
      {
        v19 = (char *)*a10;
        v20 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)&v17[-*a10] >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0x186186186186186)
          sub_207CA420C();
        v22 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v16 - (_QWORD)v19) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0xC30C30C30C30C3)
          v23 = 0x186186186186186;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 > 0x186186186186186)
            sub_207CA3AB8();
          v24 = (char *)operator new(168 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[168 * v20];
        *((_QWORD *)v25 + 20) = 0;
        *((_OWORD *)v25 + 8) = 0u;
        *((_OWORD *)v25 + 9) = 0u;
        v26 = &v24[168 * v23];
        *((_OWORD *)v25 + 6) = 0u;
        *((_OWORD *)v25 + 7) = 0u;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 5) = 0u;
        *((_OWORD *)v25 + 2) = 0u;
        *((_OWORD *)v25 + 3) = 0u;
        *(_OWORD *)v25 = 0u;
        *((_OWORD *)v25 + 1) = 0u;
        v18 = v25 + 168;
        if (v17 == v19)
        {
          *a10 = v25;
          a10[1] = v18;
          a10[2] = v26;
          v15 = a10;
        }
        else
        {
          v27 = 0;
          do
          {
            v28 = &v25[v27];
            v29 = &v17[v27];
            *((_QWORD *)v28 - 20) = 0;
            *((_QWORD *)v28 - 19) = 0;
            *(_OWORD *)(v28 - 168) = *(_OWORD *)&v17[v27 - 168];
            *((_QWORD *)v28 - 19) = *(_QWORD *)&v17[v27 - 152];
            *((_QWORD *)v29 - 20) = 0;
            *((_QWORD *)v29 - 19) = 0;
            *((_QWORD *)v29 - 21) = 0;
            *((_QWORD *)v28 - 18) = *(_QWORD *)&v17[v27 - 144];
            *((_QWORD *)v28 - 17) = *(_QWORD *)&v17[v27 - 136];
            *((_QWORD *)v28 - 16) = *(_QWORD *)&v17[v27 - 128];
            *((_QWORD *)v29 - 18) = 0;
            *((_QWORD *)v29 - 17) = 0;
            *((_QWORD *)v29 - 16) = 0;
            *((_QWORD *)v28 - 14) = 0;
            *((_QWORD *)v28 - 13) = 0;
            *(_OWORD *)(v28 - 120) = *(_OWORD *)&v17[v27 - 120];
            *((_QWORD *)v28 - 13) = *(_QWORD *)&v17[v27 - 104];
            *((_QWORD *)v29 - 15) = 0;
            *((_QWORD *)v29 - 14) = 0;
            *((_QWORD *)v29 - 13) = 0;
            *((_QWORD *)v28 - 11) = 0;
            *((_QWORD *)v28 - 10) = 0;
            *((_OWORD *)v28 - 6) = *(_OWORD *)&v17[v27 - 96];
            *((_QWORD *)v28 - 10) = *(_QWORD *)&v17[v27 - 80];
            *((_QWORD *)v29 - 12) = 0;
            *((_QWORD *)v29 - 11) = 0;
            *((_QWORD *)v29 - 10) = 0;
            *((_QWORD *)v28 - 8) = 0;
            *((_QWORD *)v28 - 7) = 0;
            *(_OWORD *)(v28 - 72) = *(_OWORD *)&v17[v27 - 72];
            *((_QWORD *)v28 - 7) = *(_QWORD *)&v17[v27 - 56];
            *((_QWORD *)v29 - 9) = 0;
            *((_QWORD *)v29 - 8) = 0;
            *((_QWORD *)v29 - 7) = 0;
            *((_QWORD *)v28 - 5) = 0;
            *((_QWORD *)v28 - 4) = 0;
            *((_OWORD *)v28 - 3) = *(_OWORD *)&v17[v27 - 48];
            *((_QWORD *)v28 - 4) = *(_QWORD *)&v17[v27 - 32];
            *((_QWORD *)v29 - 6) = 0;
            *((_QWORD *)v29 - 5) = 0;
            *((_QWORD *)v29 - 4) = 0;
            *((_QWORD *)v28 - 2) = 0;
            *((_QWORD *)v28 - 1) = 0;
            *(_OWORD *)(v28 - 24) = *(_OWORD *)&v17[v27 - 24];
            *((_QWORD *)v28 - 1) = *(_QWORD *)&v17[v27 - 8];
            *((_QWORD *)v29 - 3) = 0;
            *((_QWORD *)v29 - 2) = 0;
            *((_QWORD *)v29 - 1) = 0;
            v27 -= 168;
          }
          while (&v17[v27] != v19);
          v17 = (char *)*a10;
          v30 = (char *)a10[1];
          *a10 = &v25[v27];
          a10[1] = v18;
          a10[2] = v26;
          v15 = a10;
          if (v30 != v17)
          {
            do
            {
              v31 = (void *)*((_QWORD *)v30 - 3);
              if (v31)
              {
                *((_QWORD *)v30 - 2) = v31;
                operator delete(v31);
                v15 = a10;
              }
              v32 = *((_QWORD *)v30 - 6);
              if (v32)
              {
                v33 = *((_QWORD *)v30 - 5);
                v34 = (void *)*((_QWORD *)v30 - 6);
                if (v33 != v32)
                {
                  v35 = *((_QWORD *)v30 - 5);
                  do
                  {
                    v37 = *(void **)(v35 - 24);
                    v35 -= 24;
                    v36 = v37;
                    if (v37)
                    {
                      *(_QWORD *)(v33 - 16) = v36;
                      operator delete(v36);
                    }
                    v33 = v35;
                  }
                  while (v35 != v32);
                  v34 = (void *)*((_QWORD *)v30 - 6);
                }
                *((_QWORD *)v30 - 5) = v32;
                operator delete(v34);
                v15 = a10;
              }
              v38 = (void *)*((_QWORD *)v30 - 9);
              if (v38)
              {
                *((_QWORD *)v30 - 8) = v38;
                operator delete(v38);
                v15 = a10;
              }
              v39 = (void *)*((_QWORD *)v30 - 12);
              if (v39)
              {
                *((_QWORD *)v30 - 11) = v39;
                operator delete(v39);
                v15 = a10;
              }
              v40 = (void *)*((_QWORD *)v30 - 15);
              if (v40)
              {
                *((_QWORD *)v30 - 14) = v40;
                operator delete(v40);
                v15 = a10;
              }
              v41 = (void *)*((_QWORD *)v30 - 18);
              if (v41)
              {
                operator delete(v41);
                v15 = a10;
              }
              v42 = v30 - 168;
              v43 = (void *)*((_QWORD *)v30 - 21);
              if (v43)
              {
                *((_QWORD *)v30 - 20) = v43;
                operator delete(v43);
                v15 = a10;
              }
              v30 -= 168;
            }
            while (v42 != v17);
          }
        }
        if (v17)
        {
          operator delete(v17);
          v15 = a10;
        }
      }
      else
      {
        *((_QWORD *)v17 + 20) = 0;
        *((_OWORD *)v17 + 8) = 0u;
        *((_OWORD *)v17 + 9) = 0u;
        *((_OWORD *)v17 + 6) = 0u;
        *((_OWORD *)v17 + 7) = 0u;
        *((_OWORD *)v17 + 4) = 0u;
        *((_OWORD *)v17 + 5) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *((_OWORD *)v17 + 3) = 0u;
        v18 = v17 + 168;
        *(_OWORD *)v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
      }
      v15[1] = v18;
      v1783 = (unint64_t)(v18 - 168);
      v1774 = 1;
    }
    else
    {
      v1774 = 0;
      v1783 &= 0xFFFFFFFFFFFFFF00;
    }
    v1881 = 0;
    v1880 = 0;
    v1882 = 0;
    v44 = a5[1] - *a5;
    if (v44)
    {
      v45 = 0;
      v46 = 0;
      v47 = 0x8F9C18F9C18F9C19 * (v44 >> 3);
      while (1)
      {
        v49 = (float32x4_t *)(*a5 + 264);
        v50 = (float32x2_t *)(*(_QWORD *)(a2 + 760) + (v46 << 6));
        v51 = (float32x2_t *)(*a5 + 328 * v46);
        v52 = *(float32x4_t *)(*a5 + 280);
        v53 = *(float32x4_t *)(*a5 + 296);
        v54 = *(float32x4_t *)(*a5 + 312);
        v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v49, COERCE_FLOAT(*(_OWORD *)v50->f32)), v52, *v50, 1), v53, *(float32x4_t *)v50->f32, 2), v54, *(float32x4_t *)v50->f32, 3);
        v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v49, COERCE_FLOAT(*(_OWORD *)v50[2].f32)), v52, v50[2], 1), v53, *(float32x4_t *)v50[2].f32, 2), v54, *(float32x4_t *)v50[2].f32, 3);
        v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v49, COERCE_FLOAT(*(_OWORD *)v50[4].f32)), v52, v50[4], 1), v53, *(float32x4_t *)v50[4].f32, 2), v54, *(float32x4_t *)v50[4].f32, 3);
        v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v49, COERCE_FLOAT(*(_OWORD *)v50[6].f32)), v52, v50[6], 1), v53, *(float32x4_t *)v50[6].f32, 2), v54, *(float32x4_t *)v50[6].f32, 3);
        v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)v51[25].f32)), v56, v51[25], 1), v57, *(float32x4_t *)v51[25].f32, 2), v58, *(float32x4_t *)v51[25].f32, 3);
        v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)v51[27].f32)), v56, v51[27], 1), v57, *(float32x4_t *)v51[27].f32, 2), v58, *(float32x4_t *)v51[27].f32, 3);
        v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)v51[29].f32)), v56, v51[29], 1), v57, *(float32x4_t *)v51[29].f32, 2), v58, *(float32x4_t *)v51[29].f32, 3);
        v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)v51[31].f32)), v56, v51[31], 1), v57, *(float32x4_t *)v51[31].f32, 2), v58, *(float32x4_t *)v51[31].f32, 3);
        if (v45 >= v1882)
          break;
        *v45 = v59;
        v45[1] = v60;
        v48 = v45 + 4;
        v45[2] = v61;
        v45[3] = v62;
LABEL_50:
        v1881 = v48;
        ++v46;
        v45 = v48;
        if (v46 == v47)
          goto LABEL_67;
      }
      v63 = (float32x4_t *)v1880;
      v64 = ((char *)v45 - (_BYTE *)v1880) >> 6;
      v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 58)
        sub_207CA420C();
      v66 = (char *)v1882 - (_BYTE *)v1880;
      if (((char *)v1882 - (_BYTE *)v1880) >> 5 > v65)
        v65 = v66 >> 5;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFC0)
        v67 = 0x3FFFFFFFFFFFFFFLL;
      else
        v67 = v65;
      if (v67)
      {
        v1784 = v62;
        v1790 = v61;
        v1797 = v60;
        v1810 = v59;
        if (v67 >> 58)
          sub_207CA3AB8();
        v68 = (char *)operator new(v67 << 6);
        v69 = (float32x4_t *)&v68[64 * v64];
        *v69 = v1810;
        v69[1] = v1797;
        v69[2] = v1790;
        v69[3] = v1784;
        v70 = v69;
        if (v45 == v63)
          goto LABEL_65;
      }
      else
      {
        v68 = 0;
        v69 = (float32x4_t *)(v64 << 6);
        *v69 = v59;
        v69[1] = v60;
        v69[2] = v61;
        v69[3] = v62;
        v70 = (float32x4_t *)(v64 << 6);
        if (v45 == v63)
          goto LABEL_65;
      }
      do
      {
        v71 = v45[-4];
        v72 = v45[-3];
        v73 = v45[-1];
        v70[-2] = v45[-2];
        v70[-1] = v73;
        v70[-4] = v71;
        v70[-3] = v72;
        v70 -= 4;
        v45 -= 4;
      }
      while (v45 != v63);
      v45 = v63;
LABEL_65:
      v48 = v69 + 4;
      v1880 = v70;
      v1881 = v69 + 4;
      v1882 = (float32x4_t *)&v68[64 * v67];
      if (v45)
        operator delete(v45);
      goto LABEL_50;
    }
LABEL_67:
    v1879 = 0;
    *(float *)&v1878 = 1.0;
    v1877 = 0u;
    *(_OWORD *)v1876 = 0u;
    *(_OWORD *)v1875 = 0u;
    v74 = a12[64];
    if (a12[64])
    {
      v1750 = *a12;
      v75 = *(_OWORD *)(a12 + 17);
      v1891 = *(_OWORD *)(a12 + 1);
      v1892 = v75;
      v1893[0] = *(_OWORD *)(a12 + 33);
      *(_OWORD *)((char *)v1893 + 15) = *((_OWORD *)a12 + 3);
    }
    else
    {
      v1750 = 0;
    }
    v1873 = 0;
    v1874 = 0;
    v1872 = &v1873;
    v1889 = 0;
    v1888 = 0;
    v1890 = 0;
    sub_207CA5698((char *)&v1888, *(_QWORD *)(a2 + 408), *(_QWORD *)(a2 + 416), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 416) - *(_QWORD *)(a2 + 408)) >> 3));
    if (*(_OWORD *)(a2 + 384) == 0
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Patchbased3dModelTracker.cpp", 1113, (uint64_t)"num_6dof_kpts > 0 or num_5dof_kpts > 0", 38, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v79 = (void **)v1889;
    v80 = (uint64_t)v1888;
    if (v1889 == v1888)
      goto LABEL_378;
    v1766 = (void **)(v1703 + 360);
    v1759 = (void **)(v1703 + 384);
    v81 = (unint64_t)(((_BYTE *)v1889 - (_BYTE *)v1888) / 24) <= 1 ? 1 : ((_BYTE *)v1889 - (_BYTE *)v1888) / 24;
    v82 = (uint64_t)v1888;
    while (1)
    {
      v83 = *(unsigned __int8 *)(v82 + 23);
      v84 = (char)v83;
      if ((v83 & 0x80u) != 0)
        v83 = *(_QWORD *)(v82 + 8);
      if (v83 == 12)
      {
        v85 = v84 >= 0 ? v82 : *(_QWORD *)v82;
        v86 = *(_QWORD *)v85;
        v87 = *(unsigned int *)(v85 + 8);
        _ZF = v86 == 0x61746E656D676553 && v87 == 1852795252;
        if (_ZF)
          break;
      }
      v82 += 24;
      if (!--v81)
        goto LABEL_90;
    }
    v89 = v1888[1].i64[0];
    v76 = *v1888;
    v90 = *(_QWORD *)(v82 + 16);
    *v1888 = *(int8x16_t *)v82;
    *(_QWORD *)(v80 + 16) = v90;
    *(int8x16_t *)v82 = v76;
    *(_QWORD *)(v82 + 16) = v89;
    v80 = (uint64_t)v1888;
    v79 = (void **)v1889;
LABEL_90:
    if ((void **)v80 == v79)
    {
LABEL_378:
      v226 = 1;
      v218 = v79;
      v227 = v1872;
      goto LABEL_405;
    }
    while (2)
    {
      *(_OWORD *)memptr = xmmword_208236A40;
      v1858 = unk_208236A50;
      v1859 = xmmword_208236A60;
      v1860 = xmmword_208236A70[0];
      *(_QWORD *)&v1861 = 0x3F80000000000000;
      *((_QWORD *)&v1861 + 1) = 6;
      *(_QWORD *)&v1862[0] = 0;
      v91 = *v1702;
      v92 = *(_BYTE *)(v80 + 23);
      if (!*v1702)
        goto LABEL_131;
      if (v92 >= 0)
        v93 = (const void *)v80;
      else
        v93 = *(const void **)v80;
      if (v92 >= 0)
        v94 = *(unsigned __int8 *)(v80 + 23);
      else
        v94 = *(_QWORD *)(v80 + 8);
      v95 = v1702;
      v96 = *v1702;
      do
      {
        while (1)
        {
          v97 = *((char *)v96 + 55);
          v98 = v97 >= 0 ? v96 + 4 : (uint64_t *)v96[4];
          v99 = v97 >= 0 ? *((unsigned __int8 *)v96 + 55) : v96[5];
          v100 = v94 >= v99 ? v99 : v94;
          v101 = memcmp(v98, v93, v100);
          if (v101)
            break;
          if (v99 >= v94)
            goto LABEL_116;
LABEL_102:
          v96 = (uint64_t *)v96[1];
          if (!v96)
            goto LABEL_117;
        }
        if (v101 < 0)
          goto LABEL_102;
LABEL_116:
        v95 = (uint64_t **)v96;
        v96 = (uint64_t *)*v96;
      }
      while (v96);
LABEL_117:
      if (v95 == v1702)
        goto LABEL_131;
      v104 = v95[4];
      v103 = v95 + 4;
      v102 = v104;
      v105 = *((char *)v103 + 23);
      if (v105 >= 0)
        v106 = v103;
      else
        v106 = (uint64_t **)v102;
      if (v105 >= 0)
        v107 = *((unsigned __int8 *)v103 + 23);
      else
        v107 = (size_t)v103[1];
      if (v107 >= v94)
        v108 = v94;
      else
        v108 = v107;
      v109 = memcmp(v93, v106, v108);
      v110 = v91;
      if (!v109)
      {
        if (v94 < v107)
          goto LABEL_131;
        while (1)
        {
LABEL_134:
          v112 = *((char *)v110 + 55);
          if (v112 >= 0)
            v113 = v110 + 4;
          else
            v113 = (const void *)v110[4];
          if (v112 >= 0)
            v114 = *((unsigned __int8 *)v110 + 55);
          else
            v114 = v110[5];
          if (v114 >= v94)
            v115 = v94;
          else
            v115 = v114;
          v116 = memcmp(v93, v113, v115);
          if (v116)
          {
            if (v116 < 0)
              goto LABEL_133;
LABEL_147:
            v117 = memcmp(v113, v93, v115);
            if (!v117)
            {
              if (v114 < v94)
                goto LABEL_151;
LABEL_183:
              v135 = *((_DWORD *)v110 + 44);
              v136 = v91;
              if (v135 == 1)
              {
                while (1)
                {
                  v143 = *((char *)v91 + 55);
                  if (v143 >= 0)
                    v144 = v91 + 4;
                  else
                    v144 = (const void *)v91[4];
                  if (v143 >= 0)
                    v145 = *((unsigned __int8 *)v91 + 55);
                  else
                    v145 = v91[5];
                  if (v145 >= v94)
                    v146 = v94;
                  else
                    v146 = v145;
                  v147 = memcmp(v93, v144, v146);
                  if (v147)
                  {
                    if (v147 < 0)
                      goto LABEL_205;
                  }
                  else if (v94 < v145)
                  {
LABEL_205:
                    v91 = (uint64_t *)*v91;
                    if (!v91)
                      goto LABEL_2518;
                    continue;
                  }
                  v148 = memcmp(v144, v93, v146);
                  if (v148)
                  {
                    if ((v148 & 0x80000000) == 0)
                      goto LABEL_256;
                  }
                  else if (v145 >= v94)
                  {
LABEL_256:
                    if (*((_DWORD *)v91 + 44) != 1)
                      sub_207CA9F48();
                    v171 = *(_OWORD *)(v91 + 9);
                    *(_OWORD *)__p = *(_OWORD *)(v91 + 7);
                    *(_OWORD *)&__p[16] = v171;
                    *(_OWORD *)&__p[32] = *(_OWORD *)(v91 + 11);
                    *(_DWORD *)&__p[48] = *((_DWORD *)v91 + 26);
                    __p[56] = 0;
                    LOBYTE(v1828) = 0;
                    if (*((_BYTE *)v91 + 168))
                    {
                      *(_QWORD *)&__p[56] = off_24C06E878;
                      v172 = v91[15];
                      v173 = (std::__shared_weak_count *)v91[16];
                      if (v173)
                      {
                        p_shared_owners = (unint64_t *)&v173->__shared_owners_;
                        do
                          v175 = __ldxr(p_shared_owners);
                        while (__stxr(v175 + 1, p_shared_owners));
                        v176 = v91[19];
                        v177 = *((_DWORD *)v91 + 40);
                        v178 = *((_WORD *)v91 + 82);
                        do
                          v179 = __ldxr(p_shared_owners);
                        while (__stxr(v179 + 1, p_shared_owners));
                      }
                      else
                      {
                        v176 = v91[19];
                        v177 = *((_DWORD *)v91 + 40);
                        v178 = *((_WORD *)v91 + 82);
                      }
                      *(_QWORD *)&__p[64] = v172;
                      *(_QWORD *)&__p[72] = v173;
                      *(_QWORD *)&__p[80] = v91[17];
                      *(_DWORD *)v1827 = *((_DWORD *)v91 + 36);
                      *(_QWORD *)&v1827[8] = v176;
                      *(_DWORD *)&v1827[16] = v177;
                      *(_WORD *)&v1827[20] = v178;
                      if (v173)
                      {
                        v183 = (unint64_t *)&v173->__shared_owners_;
                        do
                          v184 = __ldaxr(v183);
                        while (__stlxr(v184 - 1, v183));
                        if (!v184)
                        {
                          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                          std::__shared_weak_count::__release_weak(v173);
                        }
                      }
                      LOBYTE(v1828) = 1;
                    }
                    v1886[0] = 0;
                    v1887 = 0;
                    if (v74)
                    {
                      v1886[0] = v1750;
                      *(_OWORD *)&v1886[1] = v1891;
                      *(_OWORD *)&v1886[17] = v1892;
                      *(_OWORD *)&v1886[33] = v1893[0];
                      *(_OWORD *)&v1886[48] = *(_OWORD *)((char *)v1893 + 15);
                      v1887 = 1;
                    }
                    sub_207DAC1E8((uint64_t)v1870, a2, (uint64_t)__p, (uint64_t *)v80, a5, v1766, v1759, &v1880, a3, v1695, (float *)&v1879 + 1, &v1879, (float *)&v1878, v1875, v1703, (float32x2_t *)memptr, (_QWORD *)v1783, v1774, (float32x4_t *)v1886);
                    LODWORD(v1861) = v1870[0];
                    *(_OWORD *)memptr = *(_OWORD *)((char *)v1870 + 4);
                    v1858 = *(_OWORD *)((char *)&v1870[2] + 4);
                    v1859 = *(_OWORD *)((char *)&v1870[4] + 4);
                    v1860 = *(_OWORD *)((char *)&v1870[6] + 4);
                    if ((_BYTE)v1828)
                    {
                      v185 = *(std::__shared_weak_count **)&__p[72];
                      if (*(_QWORD *)&__p[72])
                      {
                        v186 = (unint64_t *)(*(_QWORD *)&__p[72] + 8);
                        do
                          v187 = __ldaxr(v186);
                        while (__stlxr(v187 - 1, v186));
                        goto LABEL_298;
                      }
                    }
                    goto LABEL_299;
                  }
                  v91 = (uint64_t *)v91[1];
                  if (!v91)
LABEL_2518:
                    sub_207CA4018("map::at:  key not found");
                }
              }
              while (1)
              {
                v137 = *((char *)v136 + 55);
                if (v137 >= 0)
                  v138 = v136 + 4;
                else
                  v138 = (const void *)v136[4];
                if (v137 >= 0)
                  v139 = *((unsigned __int8 *)v136 + 55);
                else
                  v139 = v136[5];
                if (v139 >= v94)
                  v140 = v94;
                else
                  v140 = v139;
                v141 = memcmp(v93, v138, v140);
                if (v141)
                {
                  if (v141 < 0)
                    goto LABEL_185;
                }
                else if (v94 < v139)
                {
LABEL_185:
                  v136 = (uint64_t *)*v136;
                  if (!v136)
                    goto LABEL_2512;
                  continue;
                }
                v142 = memcmp(v138, v93, v140);
                if (v142)
                {
                  if ((v142 & 0x80000000) == 0)
                    goto LABEL_247;
                }
                else if (v139 >= v94)
                {
                  if (*((_DWORD *)v136 + 44) != 2)
                    goto LABEL_299;
                  v162 = sub_207DC4360((uint64_t **)v91, (const void **)v80);
                  if (*((_DWORD *)v162 + 30) != 2)
                    sub_207CA9F48();
                  *(_OWORD *)__p = *(_OWORD *)v162;
                  *(_OWORD *)&__p[16] = *((_OWORD *)v162 + 1);
                  *(_OWORD *)&__p[32] = *((_OWORD *)v162 + 2);
                  *(_DWORD *)&__p[48] = *((_DWORD *)v162 + 12);
                  __p[56] = 0;
                  LOBYTE(v1828) = 0;
                  if (*((_BYTE *)v162 + 112))
                  {
                    *(_QWORD *)&__p[56] = off_24C06E878;
                    v163 = v162[8];
                    v164 = (std::__shared_weak_count *)v162[9];
                    if (v164)
                    {
                      v165 = (unint64_t *)&v164->__shared_owners_;
                      do
                        v166 = __ldxr(v165);
                      while (__stxr(v166 + 1, v165));
                      v167 = v162[12];
                      v168 = *((_DWORD *)v162 + 26);
                      v169 = *((_WORD *)v162 + 54);
                      do
                        v170 = __ldxr(v165);
                      while (__stxr(v170 + 1, v165));
                    }
                    else
                    {
                      v167 = v162[12];
                      v168 = *((_DWORD *)v162 + 26);
                      v169 = *((_WORD *)v162 + 54);
                    }
                    *(_QWORD *)&__p[64] = v163;
                    *(_QWORD *)&__p[72] = v164;
                    *(_QWORD *)&__p[80] = v162[10];
                    *(_DWORD *)v1827 = *((_DWORD *)v162 + 22);
                    *(_QWORD *)&v1827[8] = v167;
                    *(_DWORD *)&v1827[16] = v168;
                    *(_WORD *)&v1827[20] = v169;
                    if (v164)
                    {
                      v188 = (unint64_t *)&v164->__shared_owners_;
                      do
                        v189 = __ldaxr(v188);
                      while (__stlxr(v189 - 1, v188));
                      if (!v189)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    LOBYTE(v1828) = 1;
                  }
                  __src[0] = 0;
                  v1885 = 0;
                  if (v74)
                  {
                    __src[0] = v1750;
                    *(_OWORD *)&__src[1] = v1891;
                    *(_OWORD *)&__src[17] = v1892;
                    *(_OWORD *)v1884 = v1893[0];
                    *(_OWORD *)&v1884[15] = *(_OWORD *)((char *)v1893 + 15);
                    v1885 = 1;
                  }
                  sub_207DA8668((uint64_t)v1870, a2, (uint64_t)__p, (uint64_t *)v80, a5, v1766, v1759, &v1880, a3, v1695, (float *)&v1879 + 1, (float *)&v1879, (float *)&v1878, v1875, v1703, (float32x2_t *)memptr, (_QWORD *)v1783, v1774, (float32x4_t *)__src);
                  LODWORD(v1861) = v1870[0];
                  *(_OWORD *)memptr = *(_OWORD *)((char *)v1870 + 4);
                  v1858 = *(_OWORD *)((char *)&v1870[2] + 4);
                  v1859 = *(_OWORD *)((char *)&v1870[4] + 4);
                  v1860 = *(_OWORD *)((char *)&v1870[6] + 4);
                  if (!(_BYTE)v1828)
                    goto LABEL_299;
                  v185 = *(std::__shared_weak_count **)&__p[72];
                  if (!*(_QWORD *)&__p[72])
                    goto LABEL_299;
LABEL_247:
                  v190 = (unint64_t *)(*(_QWORD *)&__p[72] + 8);
                  do
                    v187 = __ldaxr(v190);
                  while (__stlxr(v187 - 1, v190));
LABEL_298:
                  if (!v187)
                  {
                    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                    std::__shared_weak_count::__release_weak(v185);
                    if (*(char *)(v80 + 23) < 0)
                      goto LABEL_302;
LABEL_300:
                    v191 = *(_OWORD *)v80;
                    *(_QWORD *)&__p[16] = *(_QWORD *)(v80 + 16);
                    *(_OWORD *)__p = v191;
                  }
                  else
                  {
LABEL_299:
                    if ((*(char *)(v80 + 23) & 0x80000000) == 0)
                      goto LABEL_300;
LABEL_302:
                    sub_207CA40D8(__p, *(void **)v80, *(_QWORD *)(v80 + 8));
                  }
                  *(_OWORD *)&__p[24] = *(_OWORD *)memptr;
                  *(_OWORD *)&__p[40] = v1858;
                  *(_OWORD *)&__p[56] = v1859;
                  *(_OWORD *)&__p[72] = v1860;
                  v192 = &v1873;
                  *(_OWORD *)v1827 = v1861;
                  *(_QWORD *)&v1827[16] = *(_QWORD *)&v1862[0];
                  v193 = &v1873;
                  v194 = v1873;
                  if (!v1873)
                    goto LABEL_330;
                  v121 = __p[23];
                  if (__p[23] >= 0)
                    v195 = __p;
                  else
                    v195 = *(_BYTE **)__p;
                  if (__p[23] >= 0)
                    v196 = __p[23];
                  else
                    v196 = *(_QWORD *)&__p[8];
                  while (1)
                  {
                    v192 = (char **)v194;
                    v199 = (char *)*((_QWORD *)v194 + 4);
                    v197 = v194 + 32;
                    v198 = v199;
                    v200 = v197[23];
                    if (v200 >= 0)
                      v201 = v197;
                    else
                      v201 = v198;
                    if (v200 >= 0)
                      v202 = v197[23];
                    else
                      v202 = *((_QWORD *)v197 + 1);
                    if (v202 >= v196)
                      v203 = v196;
                    else
                      v203 = v202;
                    v204 = memcmp(v195, v201, v203);
                    if (v204)
                    {
                      if (v204 < 0)
                        goto LABEL_310;
                    }
                    else if (v196 < v202)
                    {
LABEL_310:
                      v194 = *v192;
                      v193 = v192;
                      if (!*v192)
                        goto LABEL_330;
                      continue;
                    }
                    v205 = memcmp(v201, v195, v203);
                    if (v205)
                    {
                      if ((v205 & 0x80000000) == 0)
                        goto LABEL_332;
                    }
                    else if (v202 >= v196)
                    {
LABEL_332:
                      if (v121 < 0)
                        goto LABEL_92;
                      goto LABEL_93;
                    }
                    v194 = v192[1];
                    if (!v194)
                    {
                      v193 = v192 + 1;
LABEL_330:
                      v206 = (char *)operator new(0x90uLL);
                      v207 = v206 + 32;
                      if ((__p[23] & 0x80000000) != 0)
                      {
                        sub_207CA40D8(v207, *(void **)__p, *(unint64_t *)&__p[8]);
                      }
                      else
                      {
                        *(_OWORD *)v207 = *(_OWORD *)__p;
                        *((_QWORD *)v206 + 6) = *(_QWORD *)&__p[16];
                      }
                      v208 = *(_OWORD *)&__p[40];
                      *(_OWORD *)(v206 + 56) = *(_OWORD *)&__p[24];
                      *(_OWORD *)(v206 + 72) = v208;
                      v209 = *(_OWORD *)&__p[72];
                      *(_OWORD *)(v206 + 88) = *(_OWORD *)&__p[56];
                      *(_OWORD *)(v206 + 104) = v209;
                      v76.i64[1] = *(_QWORD *)&v1827[8];
                      *(_OWORD *)(v206 + 120) = *(_OWORD *)v1827;
                      *((_QWORD *)v206 + 17) = *(_QWORD *)&v1827[16];
                      *(_QWORD *)v206 = 0;
                      *((_QWORD *)v206 + 1) = 0;
                      *((_QWORD *)v206 + 2) = v192;
                      *v193 = v206;
                      if (*v1872)
                      {
                        v1872 = (char **)*v1872;
                        v206 = *v193;
                      }
                      v210 = v1873;
                      _ZF = v206 == v1873;
                      v206[24] = v206 == v1873;
                      if (_ZF)
                        goto LABEL_360;
                      while (1)
                      {
                        v152 = *((_QWORD *)v206 + 2);
                        if (*(_BYTE *)(v152 + 24))
                          goto LABEL_360;
                        v153 = *(char **)(v152 + 16);
                        v211 = *(_QWORD *)v153;
                        if (*(_QWORD *)v153 == v152)
                        {
                          v214 = *((_QWORD *)v153 + 1);
                          if (!v214 || (v215 = *(unsigned __int8 *)(v214 + 24), v212 = (_BYTE *)(v214 + 24), v215))
                          {
                            if (*(char **)v152 == v206)
                            {
LABEL_349:
                              *(_BYTE *)(v152 + 24) = 1;
                              v153[24] = 0;
                              v161 = *(_QWORD *)(v152 + 8);
                              *(_QWORD *)v153 = v161;
                              if (!v161)
                                goto LABEL_244;
LABEL_243:
                              *(_QWORD *)(v161 + 16) = v153;
                              goto LABEL_244;
                            }
LABEL_240:
                            v159 = *(uint64_t **)(v152 + 8);
                            v160 = *v159;
                            *(_QWORD *)(v152 + 8) = *v159;
                            if (v160)
                            {
                              *(_QWORD *)(v160 + 16) = v152;
                              v153 = *(char **)(v152 + 16);
                            }
                            v159[2] = (uint64_t)v153;
                            *(_QWORD *)(*(_QWORD *)(v152 + 16) + 8 * (**(_QWORD **)(v152 + 16) != v152)) = v159;
                            *v159 = v152;
                            *(_QWORD *)(v152 + 16) = v159;
                            v153 = (char *)v159[2];
                            v152 = *(_QWORD *)v153;
                            *((_BYTE *)v159 + 24) = 1;
                            v153[24] = 0;
                            v161 = *(_QWORD *)(v152 + 8);
                            *(_QWORD *)v153 = v161;
                            if (v161)
                              goto LABEL_243;
LABEL_244:
                            *(_QWORD *)(v152 + 16) = *((_QWORD *)v153 + 2);
                            *(_QWORD *)(*((_QWORD *)v153 + 2) + 8 * (**((_QWORD **)v153 + 2) != (_QWORD)v153)) = v152;
                            *(_QWORD *)(v152 + 8) = v153;
LABEL_359:
                            *((_QWORD *)v153 + 2) = v152;
                            goto LABEL_360;
                          }
                        }
                        else if (!v211 || (v213 = *(unsigned __int8 *)(v211 + 24), v212 = (_BYTE *)(v211 + 24), v213))
                        {
                          if (*(char **)v152 == v206)
                          {
                            v216 = *((_QWORD *)v206 + 1);
                            *(_QWORD *)v152 = v216;
                            if (v216)
                            {
                              *(_QWORD *)(v216 + 16) = v152;
                              v153 = *(char **)(v152 + 16);
                            }
                            *((_QWORD *)v206 + 2) = v153;
                            *(_QWORD *)(*(_QWORD *)(v152 + 16) + 8 * (**(_QWORD **)(v152 + 16) != v152)) = v206;
                            *((_QWORD *)v206 + 1) = v152;
                            *(_QWORD *)(v152 + 16) = v206;
                            v153 = (char *)*((_QWORD *)v206 + 2);
                          }
                          else
                          {
                            v206 = (char *)*((_QWORD *)v206 + 2);
                          }
                          v206[24] = 1;
                          v153[24] = 0;
                          v152 = *((_QWORD *)v153 + 1);
                          v217 = *(char **)v152;
                          *((_QWORD *)v153 + 1) = *(_QWORD *)v152;
                          if (v217)
                            *((_QWORD *)v217 + 2) = v153;
                          *(_QWORD *)(v152 + 16) = *((_QWORD *)v153 + 2);
                          *(_QWORD *)(*((_QWORD *)v153 + 2) + 8 * (**((_QWORD **)v153 + 2) != (_QWORD)v153)) = v152;
                          *(_QWORD *)v152 = v153;
                          goto LABEL_359;
                        }
                        *(_BYTE *)(v152 + 24) = 1;
                        v206 = v153;
                        v153[24] = v153 == v210;
                        *v212 = 1;
                        if (v153 == v210)
                          goto LABEL_360;
                      }
                    }
                  }
                }
                v136 = (uint64_t *)v136[1];
                if (!v136)
                  goto LABEL_2512;
              }
            }
            if ((v117 & 0x80000000) == 0)
              goto LABEL_183;
LABEL_151:
            v110 = (uint64_t *)v110[1];
            if (!v110)
LABEL_2512:
              sub_207CA4018("map::at:  key not found");
          }
          else
          {
            if (v94 >= v114)
              goto LABEL_147;
LABEL_133:
            v110 = (uint64_t *)*v110;
            if (!v110)
              goto LABEL_2512;
          }
        }
      }
      if ((v109 & 0x80000000) == 0)
        goto LABEL_134;
LABEL_131:
      if (v92 < 0)
      {
        sub_207CA40D8(__p, *(void **)v80, *(_QWORD *)(v80 + 8));
      }
      else
      {
        v111 = *(_OWORD *)v80;
        *(_QWORD *)&__p[16] = *(_QWORD *)(v80 + 16);
        *(_OWORD *)__p = v111;
      }
      *(_OWORD *)&__p[24] = xmmword_208236A40;
      *(_OWORD *)&__p[40] = unk_208236A50;
      *(_OWORD *)&__p[56] = xmmword_208236A60;
      *(_OWORD *)&__p[72] = xmmword_208236A70[0];
      v118 = &v1873;
      *(_OWORD *)v1827 = v1861;
      *(_QWORD *)&v1827[16] = *(_QWORD *)&v1862[0];
      v119 = v1873;
      v120 = &v1873;
      if (!v1873)
        goto LABEL_181;
      v121 = __p[23];
      if (__p[23] >= 0)
        v122 = __p;
      else
        v122 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v123 = __p[23];
      else
        v123 = *(_QWORD *)&__p[8];
      do
      {
        while (2)
        {
          v118 = (char **)v119;
          v126 = (char *)*((_QWORD *)v119 + 4);
          v124 = v119 + 32;
          v125 = v126;
          v127 = v124[23];
          if (v127 >= 0)
            v128 = v124;
          else
            v128 = v125;
          if (v127 >= 0)
            v129 = v124[23];
          else
            v129 = *((_QWORD *)v124 + 1);
          if (v129 >= v123)
            v130 = v123;
          else
            v130 = v129;
          v131 = memcmp(v122, v128, v130);
          if (v131)
          {
            if (v131 < 0)
              goto LABEL_161;
          }
          else if (v123 < v129)
          {
LABEL_161:
            v119 = *v118;
            v120 = v118;
            if (!*v118)
              goto LABEL_181;
            continue;
          }
          break;
        }
        v132 = memcmp(v128, v122, v130);
        if (v132)
        {
          if ((v132 & 0x80000000) == 0)
            goto LABEL_332;
        }
        else if (v129 >= v123)
        {
          goto LABEL_332;
        }
        v119 = v118[1];
      }
      while (v119);
      v120 = v118 + 1;
LABEL_181:
      v133 = (char *)operator new(0x90uLL);
      v134 = v133 + 32;
      if ((__p[23] & 0x80000000) != 0)
      {
        sub_207CA40D8(v134, *(void **)__p, *(unint64_t *)&__p[8]);
      }
      else
      {
        *(_OWORD *)v134 = *(_OWORD *)__p;
        *((_QWORD *)v133 + 6) = *(_QWORD *)&__p[16];
      }
      v149 = *(_OWORD *)&__p[40];
      *(_OWORD *)(v133 + 56) = *(_OWORD *)&__p[24];
      *(_OWORD *)(v133 + 72) = v149;
      v150 = *(_OWORD *)&__p[72];
      *(_OWORD *)(v133 + 88) = *(_OWORD *)&__p[56];
      *(_OWORD *)(v133 + 104) = v150;
      v76.i64[1] = *(_QWORD *)&v1827[8];
      *(_OWORD *)(v133 + 120) = *(_OWORD *)v1827;
      *((_QWORD *)v133 + 17) = *(_QWORD *)&v1827[16];
      *(_QWORD *)v133 = 0;
      *((_QWORD *)v133 + 1) = 0;
      *((_QWORD *)v133 + 2) = v118;
      *v120 = v133;
      if (*v1872)
      {
        v1872 = (char **)*v1872;
        v133 = *v120;
      }
      v151 = v1873;
      _ZF = v133 == v1873;
      v133[24] = v133 == v1873;
      if (!_ZF)
      {
        do
        {
          v152 = *((_QWORD *)v133 + 2);
          if (*(_BYTE *)(v152 + 24))
            break;
          v153 = *(char **)(v152 + 16);
          v154 = *(_QWORD *)v153;
          if (*(_QWORD *)v153 == v152)
          {
            v157 = *((_QWORD *)v153 + 1);
            if (!v157 || (v158 = *(unsigned __int8 *)(v157 + 24), v155 = (_BYTE *)(v157 + 24), v158))
            {
              if (*(char **)v152 == v133)
                goto LABEL_349;
              goto LABEL_240;
            }
          }
          else if (!v154 || (v156 = *(unsigned __int8 *)(v154 + 24), v155 = (_BYTE *)(v154 + 24), v156))
          {
            if (*(char **)v152 == v133)
            {
              v180 = *((_QWORD *)v133 + 1);
              *(_QWORD *)v152 = v180;
              if (v180)
              {
                *(_QWORD *)(v180 + 16) = v152;
                v153 = *(char **)(v152 + 16);
              }
              *((_QWORD *)v133 + 2) = v153;
              *(_QWORD *)(*(_QWORD *)(v152 + 16) + 8 * (**(_QWORD **)(v152 + 16) != v152)) = v133;
              *((_QWORD *)v133 + 1) = v152;
              *(_QWORD *)(v152 + 16) = v133;
              v153 = (char *)*((_QWORD *)v133 + 2);
            }
            else
            {
              v133 = (char *)*((_QWORD *)v133 + 2);
            }
            v133[24] = 1;
            v153[24] = 0;
            v181 = (char **)*((_QWORD *)v153 + 1);
            v182 = *v181;
            *((_QWORD *)v153 + 1) = *v181;
            if (v182)
              *((_QWORD *)v182 + 2) = v153;
            v181[2] = (char *)*((_QWORD *)v153 + 2);
            *(_QWORD *)(*((_QWORD *)v153 + 2) + 8 * (**((_QWORD **)v153 + 2) != (_QWORD)v153)) = v181;
            *v181 = v153;
            *((_QWORD *)v153 + 2) = v181;
            ++v1874;
            if ((__p[23] & 0x80) == 0)
              goto LABEL_93;
            goto LABEL_92;
          }
          *(_BYTE *)(v152 + 24) = 1;
          v133 = v153;
          v153[24] = v153 == v151;
          *v155 = 1;
        }
        while (v153 != v151);
      }
LABEL_360:
      ++v1874;
      if ((__p[23] & 0x80) != 0)
LABEL_92:
        operator delete(*(void **)__p);
LABEL_93:
      v80 += 24;
      if ((void **)v80 != v79)
        continue;
      break;
    }
    v79 = (void **)v1888;
    v218 = (void **)v1889;
    if (v1888 == v1889)
      goto LABEL_378;
    v219 = (uint64_t *)v1888;
    while (1)
    {
      v220 = *((unsigned __int8 *)v219 + 23);
      v221 = (char)v220;
      if ((v220 & 0x80u) != 0)
        v220 = v219[1];
      if (v220 == 15)
      {
        v222 = v221 >= 0 ? v219 : (uint64_t *)*v219;
        v223 = *v222;
        v224 = *(uint64_t *)((char *)v222 + 7);
        if (v223 == 0x6E656469666E6F43 && v224 == 0x65726F635365636ELL)
          break;
      }
      v219 += 3;
      if (v219 == v1889)
      {
        v226 = 0;
        v227 = v1872;
        goto LABEL_405;
      }
    }
    v226 = 0;
    v227 = v1872;
    if (v219 != v1889 && v1872 != &v1873)
    {
      v228 = *(float *)&v1878;
      v229 = v1872;
      do
      {
        v230 = (char *)*((unsigned __int8 *)v229 + 55);
        v231 = (char)v230;
        if ((char)v230 < 0)
          v230 = v229[5];
        if (v230 == (char *)11
          && (v231 >= 0 ? (v232 = (char *)(v229 + 4)) : (v232 = v229[4]),
              *(_QWORD *)v232 == 0x696F5079654B4433
            ? (v233 = *(_QWORD *)(v232 + 3) == 0x73746E696F507965)
            : (v233 = 0),
              v233
           || ((v234 = *(_QWORD *)v232, v235 = *(_QWORD *)(v232 + 3), v234 == 0x746E696F5079654BLL)
             ? (v236 = v235 == 0x443373746E696F50)
             : (v236 = 0),
               v236)))
        {
          *((float *)v229 + 30) = v228 * *((float *)v229 + 30);
          *((float *)v229 + 31) = v228;
          v237 = v229[1];
          if (v237)
          {
            do
            {
LABEL_399:
              v238 = (char **)v237;
              v237 = *(char **)v237;
            }
            while (v237);
            goto LABEL_381;
          }
        }
        else
        {
          v237 = v229[1];
          if (v237)
            goto LABEL_399;
        }
        do
        {
          v238 = (char **)v229[2];
          _ZF = *v238 == (char *)v229;
          v229 = v238;
        }
        while (!_ZF);
LABEL_381:
        v229 = v238;
      }
      while (v238 != &v1873);
    }
LABEL_405:
    if (v79)
    {
      if ((v226 & 1) == 0)
      {
        do
        {
          if (*((char *)v218 - 1) < 0)
            operator delete(*(v218 - 3));
          v218 -= 3;
        }
        while (v218 != v79);
        v218 = (void **)v1888;
      }
      v1889 = v79;
      operator delete(v218);
      v227 = v1872;
    }
    if (v227 == &v1873)
    {
      v1696 = 6;
      v239 = 0.0;
      v76.i64[0] = 0x3F80000000000000;
      v1811 = 0x3F80000000000000;
      v241 = (float32x4_t)xmmword_208236A40;
      v240 = (float32x4_t)unk_208236A50;
      v1699 = v76;
      v243 = (float32x4_t)xmmword_208236A60;
      v242 = (float32x4_t)xmmword_208236A70[0];
    }
    else
    {
      v1811 = 0x3F80000000000000;
      v1696 = 6;
      v239 = 0.0;
      v241 = (float32x4_t)xmmword_208236A40;
      v240 = (float32x4_t)unk_208236A50;
      v243 = (float32x4_t)xmmword_208236A60;
      v242 = (float32x4_t)xmmword_208236A70[0];
      v77.i32[0] = 0;
      v1699 = v77;
      do
      {
        v77.i32[0] = *((_DWORD *)v227 + 30);
        if (*(float *)v77.i32 > *(float *)v1699.i32)
        {
          v242 = *(float32x4_t *)(v227 + 13);
          v243 = *(float32x4_t *)(v227 + 11);
          v240 = *(float32x4_t *)(v227 + 9);
          v241 = *(float32x4_t *)(v227 + 7);
          v1811 = (unint64_t)v227[15];
          v1696 = *((_DWORD *)v227 + 32);
          v1699 = v77;
          v239 = *((float *)v227 + 35);
        }
        v244 = v227[1];
        if (v244)
        {
          do
          {
            v245 = (char **)v244;
            v244 = *(char **)v244;
          }
          while (v244);
        }
        else
        {
          do
          {
            v245 = (char **)v227[2];
            _ZF = *v245 == (char *)v227;
            v227 = v245;
          }
          while (!_ZF);
        }
        v227 = v245;
      }
      while (v245 != &v1873);
    }
    if (!**(_DWORD **)(v1703 + 1104) && !*(_BYTE *)(v1703 + 924))
    {
      v246 = 1.0;
      if (*(float *)&v1879 >= 0.1)
        v246 = 0.0;
      v247 = v1699;
      *(float *)v247.i32 = *(float *)v1699.i32 * v246;
      v1699 = v247;
      v1811 = __PAIR64__(HIDWORD(v1811), v247.u32[0]);
    }
    *(_OWORD *)v1886 = xmmword_208236A40;
    *(_OWORD *)&v1886[16] = unk_208236A50;
    v248.i64[0] = *(_QWORD *)&xmmword_208236A70[0];
    *(_OWORD *)&v1886[32] = xmmword_208236A60;
    *(_OWORD *)&v1886[48] = xmmword_208236A70[0];
    v249 = v1699;
    v1689 = (uint64_t *)(v1703 + 408);
    if (*(float *)v1699.i32 <= 0.0)
    {
      v1692 = *(float32x4_t *)(v1703 + 488);
      v1693 = *(float32x4_t *)(v1703 + 504);
      v253 = *(float64x2_t *)(v1703 + 472);
      v1690 = *(float32x4_t *)(v1703 + 456);
      v1691 = (float32x4_t)v253;
      v1871 = v239;
      v303 = (float *)v1875[0];
      v304 = (float *)v1875[1];
      if (v1875[0] != v1875[1])
        goto LABEL_435;
    }
    else
    {
      *(float32x4_t *)v1886 = v241;
      *(float32x4_t *)&v1886[16] = v240;
      *(float32x4_t *)&v1886[32] = v243;
      *(float32x4_t *)&v1886[48] = v242;
      v250 = *a5 + 328 * v1695;
      v249 = *(int8x16_t *)(v250 + 200);
      v248 = *(float32x4_t *)(v250 + 216);
      v78 = *(float32x4_t *)(v250 + 232);
      v251 = *(float32x4_t *)(v250 + 248);
      v252 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v249, v241.f32[0]), v248, *(float32x2_t *)v241.f32, 1), v78, v241, 2), v251, v241, 3);
      v241 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v249, v240.f32[0]), v248, *(float32x2_t *)v240.f32, 1), v78, v240, 2), v251, v240, 3);
      v1690 = v252;
      v1691 = v241;
      v240 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v249, v243.f32[0]), v248, *(float32x2_t *)v243.f32, 1), v78, v243, 2), v251, v243, 3);
      v253 = (float64x2_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v249, v242.f32[0]), v248, *(float32x2_t *)v242.f32, 1), v78, v242, 2), v251, v242, 3);
      v1692 = v240;
      v1693 = (float32x4_t)v253;
      if (v1696 == 5 && *(_BYTE *)(v1703 + 420))
      {
        v254 = *(_QWORD *)(v1703 + 456);
        v255 = *(_DWORD *)(v1703 + 480);
        v256 = *(_QWORD *)(v1703 + 472);
        v257 = *(_DWORD *)(v1703 + 496);
        v258 = *(_QWORD *)(v1703 + 488);
        *(_DWORD *)&__p[8] = *(_DWORD *)(v1703 + 464);
        *(_QWORD *)__p = v254;
        *(_QWORD *)&__p[12] = v256;
        *(_DWORD *)&__p[20] = v255;
        *(_QWORD *)&__p[24] = v258;
        *(_DWORD *)&__p[32] = v257;
        v242.i64[0] = *v1689;
        v242.i32[2] = *(_DWORD *)(v1703 + 416);
        v1798 = v242;
        v259 = (int8x16_t)sub_207DEB2BC((float32x4_t *)memptr, (float *)__p);
        v259.i64[0] = *(uint64_t *)((char *)memptr + 4);
        v259.i32[2] = *(_DWORD *)((unint64_t)memptr | 0xC);
        v1785 = v259;
        v1791 = *(int8x16_t *)memptr;
        *(_DWORD *)&__p[8] = v1690.i32[2];
        *(_QWORD *)__p = v1690.i64[0];
        *(_DWORD *)&__p[20] = v1691.i32[2];
        *(_QWORD *)&__p[12] = v1691.i64[0];
        v259.i32[3] = v1692.i32[3];
        *(_DWORD *)&__p[32] = v1692.i32[2];
        *(_QWORD *)&__p[24] = v1692.i64[0];
        v259.i64[0] = *v1689;
        v259.i32[2] = *(_DWORD *)(v1703 + 416);
        v1775 = (float32x4_t)v259;
        sub_207DEB2BC((float32x4_t *)memptr, (float *)__p);
        v260 = (int8x16_t)v1775;
        v261 = (float32x2_t)vextq_s8(v260, v260, 8uLL).u64[0];
        v262 = (int8x16_t)vmulq_n_f32(v1775, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v260.i8, *(float32x2_t *)v260.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1775.f32, 1), *(float32x2_t *)v1775.f32, 1), v261, v261).f32[0]));
        v263 = (int8x16_t)v1798;
        v264 = (float32x2_t)vextq_s8(v263, v263, 8uLL).u64[0];
        v265 = (int8x16_t)vmulq_n_f32(v1798, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v263.i8, *(float32x2_t *)v263.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1798.f32, 1), *(float32x2_t *)v1798.f32, 1), v264, v264).f32[0]));
        v266 = (int8x16_t)vmulq_n_f32((float32x4_t)v265, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v1785.i8, *(float32x2_t *)v265.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v265.i8, 1), *(float32x2_t *)v1785.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v265, v265, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v1785, v1785, 8uLL)).f32[0]);
        v249 = v1791;
        v267 = (float32x4_t)vextq_s8(vextq_s8(v249, v249, 4uLL), v266, 0xCuLL);
        *(int32x2_t *)v240.f32 = vdup_lane_s32(*(int32x2_t *)v266.i8, 1);
        v263.i64[0] = vextq_s8(v266, v266, 8uLL).u64[0];
        *(float32x2_t *)v249.i8 = vmla_f32(vmla_lane_f32(vmla_f32(vmul_f32(*(float32x2_t *)v249.i8, *(float32x2_t *)v249.i8), *(float32x2_t *)v266.i8, *(float32x2_t *)v266.i8), *(float32x2_t *)v240.f32, *(float32x2_t *)v266.i8, 1), *(float32x2_t *)v263.i8, *(float32x2_t *)v263.i8);
        v268 = vmulq_n_f32(v267, 1.0 / sqrtf(*(float *)v249.i32));
        v253 = (float64x2_t)vmulq_f32(v268, v268);
        *(float *)v249.i32 = vmuls_lane_f32(v268.f32[1], *(float32x2_t *)v268.f32, 1);
        v269 = vmuls_lane_f32(v268.f32[2], v268, 2);
        v270 = vmuls_lane_f32(v268.f32[3], v268, 3);
        v271.f32[0] = (float)((float)(*(float *)v253.f64 + *(float *)v249.i32) - v269) - v270;
        *(float *)v263.i32 = vmuls_lane_f32(v268.f32[1], v268, 2);
        v272 = vmuls_lane_f32(v268.f32[0], v268, 3);
        v273.f32[0] = (float)(*(float *)v263.i32 + v272) + (float)(*(float *)v263.i32 + v272);
        v240.f32[0] = vmuls_lane_f32(v268.f32[1], v268, 3);
        v274 = vmuls_lane_f32(v268.f32[0], v268, 2);
        v275.f32[0] = (float)(v240.f32[0] - v274) + (float)(v240.f32[0] - v274);
        *(float *)v263.i32 = (float)(*(float *)v263.i32 - v272) + (float)(*(float *)v263.i32 - v272);
        v276 = *(float *)v253.f64 - *(float *)v249.i32;
        *(float *)v249.i32 = (float)(v269 + (float)(*(float *)v253.f64 - *(float *)v249.i32)) - v270;
        *(float *)v253.f64 = vmuls_lane_f32(v268.f32[2], v268, 3);
        v268.f32[0] = vmuls_lane_f32(v268.f32[0], *(float32x2_t *)v268.f32, 1);
        v248.f32[0] = (float)(*(float *)v253.f64 + v268.f32[0]) + (float)(*(float *)v253.f64 + v268.f32[0]);
        v240.f32[0] = (float)(v240.f32[0] + v274) + (float)(v240.f32[0] + v274);
        *(float *)v253.f64 = (float)(*(float *)v253.f64 - v268.f32[0]) + (float)(*(float *)v253.f64 - v268.f32[0]);
        v268.f32[0] = v270 + (float)(v276 - v269);
        v277.i32[0] = HIDWORD(memptr[1]);
        v278 = (int8x16_t)vmulq_n_f32((float32x4_t)v262, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)memptr + 4), *(float32x2_t *)v262.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v262.i8, 1), *(float32x2_t *)((char *)memptr + 4), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v262, v262, 8uLL), v277).f32[0]);
        v279 = *(int8x16_t *)memptr;
        v280 = (float32x4_t)vextq_s8(vextq_s8(v279, v279, 4uLL), v278, 0xCuLL);
        v281 = (float32x2_t)vextq_s8(v278, v278, 8uLL).u64[0];
        v282 = vmulq_n_f32(v280, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmla_f32(vmul_f32(*(float32x2_t *)v279.i8, *(float32x2_t *)v279.i8), *(float32x2_t *)v278.i8, *(float32x2_t *)v278.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v278.i8, 1), *(float32x2_t *)v278.i8, 1), v281, v281).f32[0]));
        *(float *)v279.i32 = vmulq_f32(v282, v282).f32[0];
        v283 = vmuls_lane_f32(v282.f32[1], *(float32x2_t *)v282.f32, 1);
        v284 = vmuls_lane_f32(v282.f32[2], v282, 2);
        v285 = vmuls_lane_f32(v282.f32[3], v282, 3);
        v286 = vmuls_lane_f32(v282.f32[1], v282, 2);
        v280.f32[0] = vmuls_lane_f32(v282.f32[1], v282, 3);
        v287 = vmuls_lane_f32(v282.f32[2], v282, 3);
        v288 = vmuls_lane_f32(v282.f32[0], *(float32x2_t *)v282.f32, 1);
        v289 = vmuls_lane_f32(v282.f32[0], v282, 2);
        v282.f32[0] = vmuls_lane_f32(v282.f32[0], v282, 3);
        v290.f32[0] = (float)((float)(*(float *)v279.i32 + v283) - v284) - v285;
        v291.f32[0] = (float)(v286 + v282.f32[0]) + (float)(v286 + v282.f32[0]);
        v281.f32[0] = (float)(v280.f32[0] - v289) + (float)(v280.f32[0] - v289);
        v292.f32[0] = (float)(v286 - v282.f32[0]) + (float)(v286 - v282.f32[0]);
        v293.f32[0] = (float)(v284 + (float)(*(float *)v279.i32 - v283)) - v285;
        v294.f32[0] = (float)(v287 + v288) + (float)(v287 + v288);
        v280.f32[0] = (float)(v280.f32[0] + v289) + (float)(v280.f32[0] + v289);
        v295.f32[0] = (float)(v287 - v288) + (float)(v287 - v288);
        v296.f32[0] = v285 + (float)((float)(*(float *)v279.i32 - v283) - v284);
        v297.i32[0] = *(_DWORD *)&__p[20];
        v13.i32[0] = *(_DWORD *)&__p[32];
        *(float32x2_t *)v282.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)__p, v290.f32[0]), *(float32x2_t *)&__p[12], v292.f32[0]), *(float32x2_t *)&__p[24], v280.f32[0]);
        v298 = (float32x2_t)vextq_s8(*(int8x16_t *)__p, *(int8x16_t *)__p, 8uLL).u64[0];
        *(float32x2_t *)v279.i8 = vmla_f32(vmla_f32(vmul_f32(v298, v290), v292, v297), *(float32x2_t *)v280.f32, v13);
        *(float32x2_t *)v280.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)__p, v291.f32[0]), *(float32x2_t *)&__p[12], v293.f32[0]), *(float32x2_t *)&__p[24], v295.f32[0]);
        v299 = vmla_f32(vmla_f32(vmul_f32(v298, v291), v293, v297), v295, v13);
        v300 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)__p, v281.f32[0]), *(float32x2_t *)&__p[12], v294.f32[0]), *(float32x2_t *)&__p[24], v296.f32[0]);
        v301 = vmla_f32(vmla_f32(vmul_f32(v298, v281), v294, v297), v296, v13);
        *(float32x2_t *)v302.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v282.f32, v271.f32[0]), *(float32x2_t *)v280.f32, v273.f32[0]), v300, v275.f32[0]);
        v302.i64[1] = __PAIR64__(v1690.u32[3], vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v279.i8, v271), v273, v299), v275, v301).u32[0]);
        *(float32x2_t *)v78.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v282.f32, *(float *)v263.i32), *(float32x2_t *)v280.f32, *(float *)v249.i32), v300, v248.f32[0]);
        v78.i64[1] = __PAIR64__(v1691.u32[3], vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v279.i8, *(float32x2_t *)v263.i8), *(float32x2_t *)v249.i8, v299), *(float32x2_t *)v248.f32, v301).u32[0]);
        *(float32x2_t *)v241.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v282.f32, v240.f32[0]), *(float32x2_t *)v280.f32, *(float *)v253.f64), v300, v268.f32[0]);
        *(float32x2_t *)v240.f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v279.i8, *(float32x2_t *)v240.f32), *(float32x2_t *)&v253.f64[0], v299), *(float32x2_t *)v268.f32, v301);
        v241.i64[1] = __PAIR64__(v1692.u32[3], v240.u32[0]);
        v1690 = v302;
        v1691 = v78;
        v1692 = v241;
        v1699.i64[0] = v1811;
      }
      v1871 = v239;
      v303 = (float *)v1875[0];
      v304 = (float *)v1875[1];
      if (v1875[0] != v1875[1])
      {
LABEL_435:
        v305 = v303 + 1;
        if (v303 + 1 != v304)
        {
          v306 = *v303;
          v307 = v303 + 1;
          do
          {
            v308 = *v307++;
            *(float *)v253.f64 = v308;
            if (v306 < v308)
            {
              v306 = *(float *)v253.f64;
              v303 = v305;
            }
            v305 = v307;
          }
          while (v307 != v304);
        }
        v309 = *v303;
LABEL_460:
        v1871 = v309;
        goto LABEL_461;
      }
    }
    v311 = *(_QWORD *)(a2 + 408);
    v310 = *(_QWORD *)(a2 + 416);
    if (v311 != v310)
    {
      while (1)
      {
        v312 = *(unsigned __int8 *)(v311 + 23);
        v313 = (char)v312;
        if ((v312 & 0x80u) != 0)
          v312 = *(_QWORD *)(v311 + 8);
        if (v312 == 14)
        {
          v314 = v313 >= 0 ? (uint64_t *)v311 : *(uint64_t **)v311;
          v315 = *v314;
          v316 = *(uint64_t *)((char *)v314 + 6);
          if (v315 == 0x6966697373616C43 && v316 == 0x6E6F697461636966)
            break;
        }
        v311 += 24;
        if (v311 == v310)
        {
          v311 = *(_QWORD *)(a2 + 416);
          break;
        }
      }
    }
    if (v311 != v310)
    {
      LODWORD(v253.f64[0]) = 1.0;
      v309 = 1.0 - *(float *)&v1879;
      goto LABEL_460;
    }
LABEL_461:
    v318 = HIDWORD(v1879);
    v319.i32[1] = v1693.i32[1];
    if (v1693.f32[2] <= 0.0
      || (sub_207DED0F8(v1703, (int32x4_t *)v1886, (int32x2_t **)&v1880, *(float *)(a2 + 648), v253.f64[0], *(double *)v240.i64, *(double *)v241.i64, (float32x4_t)v249, *(double *)v248.i64, *(int32x2_t *)v78.f32) & 1) == 0)
    {
      v319.i32[0] = 0;
      *(float32x2_t *)v1699.i8 = v319;
    }
    if (a11)
    {
      v320 = *(_QWORD *)(v1783 + 8) - *(_QWORD *)v1783;
      if (v320)
      {
        v321 = 0;
        v322 = 0;
        v323 = v320 >> 3;
        do
        {
          v324 = *(_QWORD *)(v1783 + 72);
          if (v322 >= (*(_QWORD *)(v1783 + 80) - v324) >> 3)
            sub_207CBA8AC();
          v325 = *(_QWORD *)(v324 + v321);
          if (0x8F9C18F9C18F9C19 * ((a5[1] - *a5) >> 3) <= v325)
            sub_207CBA8AC();
          v326 = *(_QWORD *)v1783;
          if (v322 >= (uint64_t)(*(_QWORD *)(v1783 + 8) - *(_QWORD *)v1783) >> 3)
            sub_207CBA8AC();
          v327 = *a5 + 328 * v325;
          v319.i32[0] = *(_DWORD *)(v326 + v321 + 4);
          LODWORD(v253.f64[0]) = *(_DWORD *)(v326 + v321);
          v240.i32[0] = *(_DWORD *)(v327 + 100);
          v249.i32[0] = *(_DWORD *)(v327 + 112);
          v78.i32[0] = *(_DWORD *)(v327 + 124);
          v328 = vadd_f32(*(float32x2_t *)(v327 + 116), vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v327 + 92), *(float *)v253.f64), *(float32x2_t *)(v327 + 104), v319.f32[0]));
          v329 = vmla_f32(vmul_f32(*(float32x2_t *)v240.f32, *(float32x2_t *)&v253.f64[0]), v319, *(float32x2_t *)v249.i8);
          v330 = vadd_f32(*(float32x2_t *)v78.f32, v329);
          v329.i32[0] = *(_DWORD *)(v327 + 136);
          v249.i32[0] = *(_DWORD *)(v327 + 148);
          v78.i32[0] = *(_DWORD *)(v327 + 160);
          *(float32x2_t *)&v253.f64[0] = vmla_f32(vmla_lane_f32(vmul_f32(v329, v328), *(float32x2_t *)v249.i8, v328, 1), v330, *(float32x2_t *)v78.f32);
          v331 = COERCE_DOUBLE(vdiv_f32(vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v327 + 128), v328.f32[0]), *(float32x2_t *)(v327 + 140), v328, 1), *(float32x2_t *)(v327 + 152), v330.f32[0]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v253.f64[0], 0)));
          *(double *)(v326 + v321) = v331;
          v332 = *(_QWORD *)(a2 + 712);
          if (v325 >= (*(_QWORD *)(a2 + 720) - v332) >> 4)
            sub_207CBA8AC();
          sub_207D7FE28((float *)(v326 + v321), (float *)(v326 + v321 + 4), *(_QWORD *)(v332 + 16 * v325), v331, v253);
          ++v322;
          v321 += 8;
          --v323;
        }
        while (v323);
      }
    }
    if (!*(_BYTE *)(a8 + 24))
      goto LABEL_2476;
    kdebug_trace();
    memset(v1870, 0, 32);
    *(int8x16_t *)&v1870[4] = vextq_s8(*(int8x16_t *)(v1703 + 32), *(int8x16_t *)(v1703 + 32), 8uLL);
    v1870[6] = *(void **)(v1703 + 48);
    v1870[7] = *(void **)(v1703 + 944);
    v1870[9] = (void *)**(int **)(v1703 + 1104);
    v1870[0] = (void *)__PAIR64__(HIDWORD(v1811), v1699.u32[0]);
    v1868 = 0;
    v1869 = 0;
    v1867 = &v1868;
    v1865 = 0;
    v1866 = 0;
    v1864 = &v1865;
    v333 = (uint64_t **)*a6;
    if ((uint64_t **)*a6 != v1702)
    {
      do
      {
        v336 = (__int128 *)(v333 + 4);
        v337 = (__int128 *)(v333 + 7);
        v338 = *((_DWORD *)v333 + 44);
        if (v338 != 1)
        {
          if (v338 != 2)
            goto LABEL_890;
          v339 = v1868;
          v340 = &v1868;
          v341 = &v1868;
          if (v1868)
          {
            v342 = *((char *)v333 + 55);
            if (v342 >= 0)
              v343 = (uint64_t *)(v333 + 4);
            else
              v343 = v333[4];
            if (v342 >= 0)
              v344 = *((unsigned __int8 *)v333 + 55);
            else
              v344 = (size_t)v333[5];
            while (1)
            {
              v340 = (uint64_t ***)v339;
              v347 = v339[4];
              v345 = v339 + 4;
              v346 = v347;
              v348 = *((char *)v345 + 23);
              if (v348 >= 0)
                v349 = v345;
              else
                v349 = (uint64_t **)v346;
              if (v348 >= 0)
                v350 = *((unsigned __int8 *)v345 + 23);
              else
                v350 = (size_t)v345[1];
              if (v350 >= v344)
                v351 = v344;
              else
                v351 = v350;
              v352 = memcmp(v343, v349, v351);
              if (v352)
              {
                if (v352 < 0)
                  goto LABEL_487;
LABEL_501:
                v353 = memcmp(v349, v343, v351);
                if (v353)
                {
                  if ((v353 & 0x80000000) == 0)
                    goto LABEL_607;
                }
                else if (v350 >= v344)
                {
                  goto LABEL_607;
                }
                v339 = v340[1];
                if (!v339)
                {
                  v341 = v340 + 1;
                  break;
                }
              }
              else
              {
                if (v344 >= v350)
                  goto LABEL_501;
LABEL_487:
                v339 = *v340;
                v341 = v340;
                if (!*v340)
                  break;
              }
            }
          }
          v354 = (uint64_t **)operator new(0xB0uLL);
          *(_QWORD *)__p = v354;
          *(_QWORD *)&__p[8] = &v1868;
          __p[16] = 0;
          v355 = v354 + 4;
          if (*((char *)v333 + 55) < 0)
          {
            sub_207CA40D8(v355, v333[4], (unint64_t)v333[5]);
          }
          else
          {
            v356 = *v336;
            v354[6] = v333[6];
            *(_OWORD *)v355 = v356;
          }
          *(_OWORD *)(v354 + 13) = 0u;
          v354[21] = 0;
          *(_OWORD *)(v354 + 19) = 0u;
          *(_OWORD *)(v354 + 17) = 0u;
          *(_OWORD *)(v354 + 15) = 0u;
          *(_OWORD *)(v354 + 11) = 0u;
          *(_OWORD *)(v354 + 9) = 0u;
          *(_OWORD *)(v354 + 7) = 0u;
          *((_DWORD *)v354 + 26) = 64;
          *((_BYTE *)v354 + 168) = 0;
          __p[16] = 1;
          *v354 = 0;
          v354[1] = 0;
          v354[2] = (uint64_t *)v340;
          *v341 = v354;
          if (*v1867)
          {
            v1867 = (uint64_t ***)*v1867;
            v354 = *v341;
          }
          v366 = v1868;
          _ZF = v354 == v1868;
          *((_BYTE *)v354 + 24) = v354 == v1868;
          if (!_ZF)
          {
            do
            {
              v367 = v354[2];
              if (*((_BYTE *)v367 + 24))
                break;
              v368 = (uint64_t **)v367[2];
              v369 = (uint64_t)*v368;
              if (*v368 == v367)
              {
                v372 = v368[1];
                if (!v372 || (v373 = *((unsigned __int8 *)v372 + 24), v370 = v372 + 3, v373))
                {
                  if ((uint64_t **)*v367 == v354)
                  {
                    *((_BYTE *)v367 + 24) = 1;
                    *((_BYTE *)v368 + 24) = 0;
                    v376 = (uint64_t *)v367[1];
                    *v368 = v376;
                    if (v376)
                      goto LABEL_534;
                  }
                  else
                  {
                    v374 = v367[1];
                    v375 = *(_QWORD *)v374;
                    v367[1] = *(_QWORD *)v374;
                    if (v375)
                    {
                      *(_QWORD *)(v375 + 16) = v367;
                      v368 = (uint64_t **)v367[2];
                    }
                    *(_QWORD *)(v374 + 16) = v368;
                    *(_QWORD *)(v367[2] + 8 * (*(_QWORD *)v367[2] != (_QWORD)v367)) = v374;
                    *(_QWORD *)v374 = v367;
                    v367[2] = v374;
                    v368 = *(uint64_t ***)(v374 + 16);
                    v367 = *v368;
                    *(_BYTE *)(v374 + 24) = 1;
                    *((_BYTE *)v368 + 24) = 0;
                    v376 = (uint64_t *)v367[1];
                    *v368 = v376;
                    if (v376)
LABEL_534:
                      v376[2] = (uint64_t)v368;
                  }
                  v367[2] = (uint64_t)v368[2];
                  v368[2][*v368[2] != (_QWORD)v368] = (uint64_t)v367;
                  v367[1] = (uint64_t)v368;
LABEL_605:
                  v368[2] = v367;
                  break;
                }
              }
              else if (!v369 || (v371 = *(unsigned __int8 *)(v369 + 24), v370 = (_BYTE *)(v369 + 24), v371))
              {
                if ((uint64_t **)*v367 == v354)
                {
                  v415 = v354[1];
                  *v367 = (uint64_t)v415;
                  if (v415)
                  {
                    v415[2] = (uint64_t)v367;
                    v368 = (uint64_t **)v367[2];
                  }
                  v354[2] = (uint64_t *)v368;
                  *(_QWORD *)(v367[2] + 8 * (*(_QWORD *)v367[2] != (_QWORD)v367)) = v354;
                  v354[1] = v367;
                  v367[2] = (uint64_t)v354;
                  v368 = (uint64_t **)v354[2];
                }
                else
                {
                  v354 = (uint64_t **)v354[2];
                }
                *((_BYTE *)v354 + 24) = 1;
                *((_BYTE *)v368 + 24) = 0;
                v367 = v368[1];
                v416 = *v367;
                v368[1] = (uint64_t *)*v367;
                if (v416)
                  *(_QWORD *)(v416 + 16) = v368;
                v367[2] = (uint64_t)v368[2];
                v368[2][*v368[2] != (_QWORD)v368] = (uint64_t)v367;
                *v367 = (uint64_t)v368;
                goto LABEL_605;
              }
              *((_BYTE *)v367 + 24) = 1;
              v354 = v368;
              *((_BYTE *)v368 + 24) = v368 == v366;
              *v370 = 1;
            }
            while (v368 != v366);
          }
          ++v1869;
          v340 = *(uint64_t ****)__p;
LABEL_607:
          v417 = *v337;
          v418 = *(_OWORD *)(v333 + 9);
          v419 = *(_OWORD *)(v333 + 11);
          *((_DWORD *)v340 + 26) = *((_DWORD *)v333 + 26);
          *(_OWORD *)(v340 + 11) = v419;
          *(_OWORD *)(v340 + 9) = v418;
          *(_OWORD *)(v340 + 7) = v417;
          if (*((unsigned __int8 *)v340 + 168) == *((unsigned __int8 *)v333 + 168))
          {
            if (!*((_BYTE *)v340 + 168))
              goto LABEL_890;
            v421 = (uint64_t **)v333[15];
            v420 = v333[16];
            if (v420)
            {
              v422 = (unint64_t *)(v420 + 1);
              do
                v423 = __ldxr(v422);
              while (__stxr(v423 + 1, v422));
            }
            v424 = (std::__shared_weak_count *)v340[16];
            v340[15] = v421;
            v340[16] = (uint64_t **)v420;
            if (v424)
            {
              v425 = (unint64_t *)&v424->__shared_owners_;
              do
                v426 = __ldaxr(v425);
              while (__stlxr(v426 - 1, v425));
              if (!v426)
              {
                ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
                std::__shared_weak_count::__release_weak(v424);
              }
            }
            v427 = *(_OWORD *)(v333 + 17);
            *(_OWORD *)((char *)v340 + 150) = *(_OWORD *)((char *)v333 + 150);
            *(_OWORD *)(v340 + 17) = v427;
            v428 = v333[1];
            if (v428)
            {
              do
              {
LABEL_891:
                v584 = (uint64_t **)v428;
                v428 = (uint64_t *)*v428;
              }
              while (v428);
              goto LABEL_477;
            }
          }
          else if (*((_BYTE *)v340 + 168))
          {
            v429 = (std::__shared_weak_count *)v340[16];
            if (!v429)
              goto LABEL_624;
            v430 = (unint64_t *)&v429->__shared_owners_;
            do
              v431 = __ldaxr(v430);
            while (__stlxr(v431 - 1, v430));
            if (!v431)
            {
              ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
              std::__shared_weak_count::__release_weak(v429);
              *((_BYTE *)v340 + 168) = 0;
              v428 = v333[1];
              if (v428)
                goto LABEL_891;
            }
            else
            {
LABEL_624:
              *((_BYTE *)v340 + 168) = 0;
              v428 = v333[1];
              if (v428)
                goto LABEL_891;
            }
          }
          else
          {
            v340[14] = (uint64_t **)off_24C06E878;
            v432 = (uint64_t **)v333[15];
            v433 = (std::__shared_weak_count *)v333[16];
            if (v433)
            {
              v434 = (unint64_t *)&v433->__shared_owners_;
              do
                v435 = __ldxr(v434);
              while (__stxr(v435 + 1, v434));
              v436 = (uint64_t **)v333[19];
              v437 = *((_DWORD *)v333 + 40);
              v438 = *((_WORD *)v333 + 82);
              do
                v439 = __ldxr(v434);
              while (__stxr(v439 + 1, v434));
            }
            else
            {
              v436 = (uint64_t **)v333[19];
              v437 = *((_DWORD *)v333 + 40);
              v438 = *((_WORD *)v333 + 82);
            }
            v340[15] = v432;
            v340[16] = (uint64_t **)v433;
            v440 = (uint64_t **)v333[17];
            *((_DWORD *)v340 + 36) = *((_DWORD *)v333 + 36);
            v340[17] = v440;
            v340[19] = v436;
            *((_DWORD *)v340 + 40) = v437;
            *((_WORD *)v340 + 82) = v438;
            if (!v433)
              goto LABEL_639;
            v441 = (unint64_t *)&v433->__shared_owners_;
            do
              v442 = __ldaxr(v441);
            while (__stlxr(v442 - 1, v441));
            if (!v442)
            {
              ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
              std::__shared_weak_count::__release_weak(v433);
              *((_BYTE *)v340 + 168) = 1;
              v428 = v333[1];
              if (v428)
                goto LABEL_891;
            }
            else
            {
LABEL_639:
              *((_BYTE *)v340 + 168) = 1;
              v428 = v333[1];
              if (v428)
                goto LABEL_891;
            }
          }
          goto LABEL_896;
        }
        v357 = *(_OWORD *)(v333 + 9);
        *(_OWORD *)__p = *v337;
        *(_OWORD *)&__p[16] = v357;
        *(_OWORD *)&__p[32] = *(_OWORD *)(v333 + 11);
        *(_DWORD *)&__p[48] = *((_DWORD *)v333 + 26);
        __p[56] = 0;
        LOBYTE(v1828) = 0;
        if (*((_BYTE *)v333 + 168))
        {
          *(_QWORD *)&__p[56] = off_24C06E878;
          v358 = v333[15];
          v359 = (std::__shared_weak_count *)v333[16];
          if (v359)
          {
            v360 = (unint64_t *)&v359->__shared_owners_;
            do
              v361 = __ldxr(v360);
            while (__stxr(v361 + 1, v360));
            v362 = v333[19];
            v363 = *((_DWORD *)v333 + 40);
            v364 = *((_WORD *)v333 + 82);
            do
              v365 = __ldxr(v360);
            while (__stxr(v365 + 1, v360));
          }
          else
          {
            v362 = v333[19];
            v363 = *((_DWORD *)v333 + 40);
            v364 = *((_WORD *)v333 + 82);
          }
          *(_QWORD *)&__p[64] = v358;
          *(_QWORD *)&__p[72] = v359;
          *(_QWORD *)&__p[80] = v333[17];
          *(_DWORD *)v1827 = *((_DWORD *)v333 + 36);
          *(_QWORD *)&v1827[8] = v362;
          *(_DWORD *)&v1827[16] = v363;
          *(_WORD *)&v1827[20] = v364;
          if (v359)
          {
            v377 = (unint64_t *)&v359->__shared_owners_;
            do
              v378 = __ldaxr(v377);
            while (__stlxr(v378 - 1, v377));
            if (!v378)
            {
              ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
              std::__shared_weak_count::__release_weak(v359);
            }
          }
          LOBYTE(v1828) = 1;
        }
        v379 = *(unsigned int *)&__p[36];
        v380 = v1865;
        v381 = &v1865;
        v382 = &v1865;
        if (v1865)
        {
          v383 = *((char *)v333 + 55);
          if (v383 >= 0)
            v384 = (uint64_t *)(v333 + 4);
          else
            v384 = v333[4];
          if (v383 >= 0)
            v385 = *((unsigned __int8 *)v333 + 55);
          else
            v385 = (size_t)v333[5];
          while (1)
          {
            v381 = (char **)v380;
            v388 = (char *)*((_QWORD *)v380 + 4);
            v386 = v380 + 32;
            v387 = v388;
            v389 = v386[23];
            if (v389 >= 0)
              v390 = v386;
            else
              v390 = v387;
            if (v389 >= 0)
              v391 = v386[23];
            else
              v391 = *((_QWORD *)v386 + 1);
            if (v391 >= v385)
              v392 = v385;
            else
              v392 = v391;
            v393 = memcmp(v384, v390, v392);
            if (v393)
            {
              if (v393 < 0)
                goto LABEL_550;
LABEL_564:
              v394 = memcmp(v390, v384, v392);
              if (v394)
              {
                if ((v394 & 0x80000000) == 0)
                  goto LABEL_592;
              }
              else if (v391 >= v385)
              {
LABEL_592:
                v395 = (char *)v381;
                v411 = v381[7];
                v410 = (uint64_t)(v381 + 7);
                v412 = (v381[8] - v411) >> 2;
                _CF = v379 >= v412;
                v414 = v379 - v412;
                if (v379 <= v412)
                  goto LABEL_593;
LABEL_649:
                sub_207D55DD4(v410, v414);
                goto LABEL_650;
              }
              v380 = v381[1];
              if (!v380)
              {
                v382 = v381 + 1;
                break;
              }
            }
            else
            {
              if (v385 >= v391)
                goto LABEL_564;
LABEL_550:
              v380 = *v381;
              v382 = v381;
              if (!*v381)
                break;
            }
          }
        }
        v395 = (char *)operator new(0x50uLL);
        v396 = v395 + 32;
        if (*((char *)v333 + 55) < 0)
        {
          sub_207CA40D8(v396, v333[4], (unint64_t)v333[5]);
        }
        else
        {
          v397 = *v336;
          *((_QWORD *)v395 + 6) = v333[6];
          *(_OWORD *)v396 = v397;
        }
        *((_QWORD *)v395 + 7) = 0;
        *((_QWORD *)v395 + 8) = 0;
        *((_QWORD *)v395 + 9) = 0;
        *(_QWORD *)v395 = 0;
        *((_QWORD *)v395 + 1) = 0;
        *((_QWORD *)v395 + 2) = v381;
        *v382 = v395;
        v398 = v395;
        if (*v1864)
        {
          v1864 = (char **)*v1864;
          v398 = *v382;
        }
        v399 = v1865;
        _ZF = v398 == v1865;
        v398[24] = v398 == v1865;
        if (!_ZF)
        {
          do
          {
            v400 = *((_QWORD *)v398 + 2);
            if (*(_BYTE *)(v400 + 24))
              break;
            v401 = *(char **)(v400 + 16);
            v402 = *(_QWORD *)v401;
            if (*(_QWORD *)v401 == v400)
            {
              v405 = *((_QWORD *)v401 + 1);
              if (!v405 || (v406 = *(unsigned __int8 *)(v405 + 24), v403 = (_BYTE *)(v405 + 24), v406))
              {
                if (*(char **)v400 == v398)
                {
                  *(_BYTE *)(v400 + 24) = 1;
                  v401[24] = 0;
                  v409 = *(_QWORD *)(v400 + 8);
                  *(_QWORD *)v401 = v409;
                  if (v409)
                    goto LABEL_590;
                }
                else
                {
                  v407 = *(uint64_t **)(v400 + 8);
                  v408 = *v407;
                  *(_QWORD *)(v400 + 8) = *v407;
                  if (v408)
                  {
                    *(_QWORD *)(v408 + 16) = v400;
                    v401 = *(char **)(v400 + 16);
                  }
                  v407[2] = (uint64_t)v401;
                  *(_QWORD *)(*(_QWORD *)(v400 + 16) + 8 * (**(_QWORD **)(v400 + 16) != v400)) = v407;
                  *v407 = v400;
                  *(_QWORD *)(v400 + 16) = v407;
                  v401 = (char *)v407[2];
                  v400 = *(_QWORD *)v401;
                  *((_BYTE *)v407 + 24) = 1;
                  v401[24] = 0;
                  v409 = *(_QWORD *)(v400 + 8);
                  *(_QWORD *)v401 = v409;
                  if (v409)
LABEL_590:
                    *(_QWORD *)(v409 + 16) = v401;
                }
                *(_QWORD *)(v400 + 16) = *((_QWORD *)v401 + 2);
                *(_QWORD *)(*((_QWORD *)v401 + 2) + 8 * (**((_QWORD **)v401 + 2) != (_QWORD)v401)) = v400;
                *(_QWORD *)(v400 + 8) = v401;
LABEL_647:
                *((_QWORD *)v401 + 2) = v400;
                break;
              }
            }
            else if (!v402 || (v404 = *(unsigned __int8 *)(v402 + 24), v403 = (_BYTE *)(v402 + 24), v404))
            {
              if (*(char **)v400 == v398)
              {
                v443 = *((_QWORD *)v398 + 1);
                *(_QWORD *)v400 = v443;
                if (v443)
                {
                  *(_QWORD *)(v443 + 16) = v400;
                  v401 = *(char **)(v400 + 16);
                }
                *((_QWORD *)v398 + 2) = v401;
                *(_QWORD *)(*(_QWORD *)(v400 + 16) + 8 * (**(_QWORD **)(v400 + 16) != v400)) = v398;
                *((_QWORD *)v398 + 1) = v400;
                *(_QWORD *)(v400 + 16) = v398;
                v401 = (char *)*((_QWORD *)v398 + 2);
              }
              else
              {
                v398 = (char *)*((_QWORD *)v398 + 2);
              }
              v398[24] = 1;
              v401[24] = 0;
              v400 = *((_QWORD *)v401 + 1);
              v444 = *(char **)v400;
              *((_QWORD *)v401 + 1) = *(_QWORD *)v400;
              if (v444)
                *((_QWORD *)v444 + 2) = v401;
              *(_QWORD *)(v400 + 16) = *((_QWORD *)v401 + 2);
              *(_QWORD *)(*((_QWORD *)v401 + 2) + 8 * (**((_QWORD **)v401 + 2) != (_QWORD)v401)) = v400;
              *(_QWORD *)v400 = v401;
              goto LABEL_647;
            }
            *(_BYTE *)(v400 + 24) = 1;
            v398 = v401;
            v401[24] = v401 == v399;
            *v403 = 1;
          }
          while (v401 != v399);
        }
        ++v1866;
        v411 = (char *)*((_QWORD *)v395 + 7);
        v410 = (uint64_t)(v395 + 56);
        v445 = (uint64_t)(*((_QWORD *)v395 + 8) - (_QWORD)v411) >> 2;
        _CF = v379 >= v445;
        v414 = v379 - v445;
        if (v379 > v445)
          goto LABEL_649;
LABEL_593:
        if (!_CF)
          *((_QWORD *)v395 + 8) = &v411[4 * v379];
LABEL_650:
        v446 = v1865;
        v447 = &v1865;
        v448 = &v1865;
        if (!v1865)
        {
LABEL_677:
          v461 = (char *)operator new(0x50uLL);
          v462 = v461 + 32;
          if (*((char *)v333 + 55) < 0)
          {
            sub_207CA40D8(v462, v333[4], (unint64_t)v333[5]);
          }
          else
          {
            v463 = *v336;
            *((_QWORD *)v461 + 6) = v333[6];
            *(_OWORD *)v462 = v463;
          }
          *((_QWORD *)v461 + 7) = 0;
          *((_QWORD *)v461 + 8) = 0;
          *((_QWORD *)v461 + 9) = 0;
          *(_QWORD *)v461 = 0;
          *((_QWORD *)v461 + 1) = 0;
          *((_QWORD *)v461 + 2) = v447;
          *v448 = v461;
          v464 = v461;
          if (*v1864)
          {
            v1864 = (char **)*v1864;
            v464 = *v448;
          }
          v465 = v1865;
          _ZF = v464 == v1865;
          v464[24] = v464 == v1865;
          if (!_ZF)
          {
            do
            {
              v466 = *((_QWORD *)v464 + 2);
              if (*(_BYTE *)(v466 + 24))
                break;
              v467 = *(char **)(v466 + 16);
              v468 = *(_QWORD *)v467;
              if (*(_QWORD *)v467 == v466)
              {
                v471 = *((_QWORD *)v467 + 1);
                if (!v471 || (v472 = *(unsigned __int8 *)(v471 + 24), v469 = (_BYTE *)(v471 + 24), v472))
                {
                  if (*(char **)v466 == v464)
                  {
                    *(_BYTE *)(v466 + 24) = 1;
                    v467[24] = 0;
                    v475 = *(_QWORD *)(v466 + 8);
                    *(_QWORD *)v467 = v475;
                    if (v475)
                      goto LABEL_697;
                  }
                  else
                  {
                    v473 = *(uint64_t **)(v466 + 8);
                    v474 = *v473;
                    *(_QWORD *)(v466 + 8) = *v473;
                    if (v474)
                    {
                      *(_QWORD *)(v474 + 16) = v466;
                      v467 = *(char **)(v466 + 16);
                    }
                    v473[2] = (uint64_t)v467;
                    *(_QWORD *)(*(_QWORD *)(v466 + 16) + 8 * (**(_QWORD **)(v466 + 16) != v466)) = v473;
                    *v473 = v466;
                    *(_QWORD *)(v466 + 16) = v473;
                    v467 = (char *)v473[2];
                    v466 = *(_QWORD *)v467;
                    *((_BYTE *)v473 + 24) = 1;
                    v467[24] = 0;
                    v475 = *(_QWORD *)(v466 + 8);
                    *(_QWORD *)v467 = v475;
                    if (v475)
LABEL_697:
                      *(_QWORD *)(v475 + 16) = v467;
                  }
                  *(_QWORD *)(v466 + 16) = *((_QWORD *)v467 + 2);
                  *(_QWORD *)(*((_QWORD *)v467 + 2) + 8 * (**((_QWORD **)v467 + 2) != (_QWORD)v467)) = v466;
                  *(_QWORD *)(v466 + 8) = v467;
LABEL_709:
                  *((_QWORD *)v467 + 2) = v466;
                  break;
                }
              }
              else if (!v468 || (v470 = *(unsigned __int8 *)(v468 + 24), v469 = (_BYTE *)(v468 + 24), v470))
              {
                if (*(char **)v466 == v464)
                {
                  v478 = *((_QWORD *)v464 + 1);
                  *(_QWORD *)v466 = v478;
                  if (v478)
                  {
                    *(_QWORD *)(v478 + 16) = v466;
                    v467 = *(char **)(v466 + 16);
                  }
                  *((_QWORD *)v464 + 2) = v467;
                  *(_QWORD *)(*(_QWORD *)(v466 + 16) + 8 * (**(_QWORD **)(v466 + 16) != v466)) = v464;
                  *((_QWORD *)v464 + 1) = v466;
                  *(_QWORD *)(v466 + 16) = v464;
                  v467 = (char *)*((_QWORD *)v464 + 2);
                }
                else
                {
                  v464 = (char *)*((_QWORD *)v464 + 2);
                }
                v464[24] = 1;
                v467[24] = 0;
                v466 = *((_QWORD *)v467 + 1);
                v479 = *(char **)v466;
                *((_QWORD *)v467 + 1) = *(_QWORD *)v466;
                if (v479)
                  *((_QWORD *)v479 + 2) = v467;
                *(_QWORD *)(v466 + 16) = *((_QWORD *)v467 + 2);
                *(_QWORD *)(*((_QWORD *)v467 + 2) + 8 * (**((_QWORD **)v467 + 2) != (_QWORD)v467)) = v466;
                *(_QWORD *)v466 = v467;
                goto LABEL_709;
              }
              *(_BYTE *)(v466 + 24) = 1;
              v464 = v467;
              v467[24] = v467 == v465;
              *v469 = 1;
            }
            while (v467 != v465);
          }
          ++v1866;
          v476 = *((_QWORD *)v461 + 7);
          v477 = &__p[40];
          if ((_BYTE)v1828)
            goto LABEL_711;
          goto LABEL_722;
        }
        v449 = *((char *)v333 + 55);
        if (v449 >= 0)
          v450 = (uint64_t *)(v333 + 4);
        else
          v450 = v333[4];
        if (v449 >= 0)
          v451 = (uint64_t *)*((unsigned __int8 *)v333 + 55);
        else
          v451 = v333[5];
        while (1)
        {
          while (1)
          {
            v447 = (char **)v446;
            v454 = (char *)*((_QWORD *)v446 + 4);
            v452 = v446 + 32;
            v453 = v454;
            v455 = v452[23];
            v456 = v455 >= 0 ? v452 : v453;
            v457 = v455 >= 0 ? (uint64_t *)v452[23] : (uint64_t *)*((_QWORD *)v452 + 1);
            v458 = (size_t)(v457 >= v451 ? v451 : v457);
            v459 = memcmp(v450, v456, v458);
            if (v459)
              break;
            if (v451 >= v457)
              goto LABEL_671;
LABEL_657:
            v446 = *v447;
            v448 = v447;
            if (!*v447)
              goto LABEL_677;
          }
          if (v459 < 0)
            goto LABEL_657;
LABEL_671:
          v460 = memcmp(v456, v450, v458);
          if (!v460)
            break;
          if ((v460 & 0x80000000) == 0)
            goto LABEL_699;
LABEL_675:
          v446 = v447[1];
          if (!v446)
          {
            v448 = v447 + 1;
            goto LABEL_677;
          }
        }
        if (v457 < v451)
          goto LABEL_675;
LABEL_699:
        v476 = (unint64_t)v447[7];
        v477 = &__p[40];
        if (!(_BYTE)v1828)
          goto LABEL_722;
LABEL_711:
        if (v1827[20])
          v480 = *(_QWORD *)&v1827[8] == 0;
        else
          v480 = 1;
        v477 = &v1827[8];
        if (!v480)
        {
          v481 = *(_QWORD *)&__p[64];
          v482 = *(std::__shared_weak_count **)&__p[72];
          if (*(_QWORD *)&__p[72])
          {
            v483 = (unint64_t *)(*(_QWORD *)&__p[72] + 8);
            do
              v484 = __ldxr(v483);
            while (__stxr(v484 + 1, v483));
            do
              v485 = __ldaxr(v483);
            while (__stlxr(v485 - 1, v483));
            if (!v485)
            {
              ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
              std::__shared_weak_count::__release_weak(v482);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v481 + 88))(v481, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v477 = &v1827[8];
        }
LABEL_722:
        if ((_DWORD)v379)
        {
          v486 = *(_QWORD *)v477;
          if (v379 < 0x10
            || (v476 < v486 + 2 * (v379 - 1) + 2
              ? (v487 = v486 >= v476 + 4 * (v379 - 1) + 4)
              : (v487 = 1),
                !v487))
          {
            LODWORD(v488) = 0;
            v489 = (_DWORD *)v476;
            v490 = (__int16 *)v486;
            goto LABEL_734;
          }
          v488 = v379 & 0xFFFFFFF0;
          v489 = (_DWORD *)(v476 + 4 * v488);
          v490 = (__int16 *)(v486 + 2 * v488);
          v491 = (float16x4_t *)(v486 + 16);
          v492 = (float32x4_t *)(v476 + 32);
          v493 = v488;
          do
          {
            v494 = *(float16x8_t *)v491[-2].i8;
            v495 = vcvtq_f32_f16(*v491);
            v496 = vcvt_hight_f32_f16(*(float16x8_t *)v491->i8);
            v492[-2] = vcvtq_f32_f16(*(float16x4_t *)v494.i8);
            v492[-1] = vcvt_hight_f32_f16(v494);
            *v492 = v495;
            v492[1] = v496;
            v492 += 4;
            v491 += 4;
            v493 -= 16;
          }
          while (v493);
          if (v488 != v379)
          {
LABEL_734:
            v497 = v379 - v488;
            do
            {
              v498 = *v490++;
              _H0 = v498;
              __asm { FCVT            S0, H0 }
              *v489++ = _S0;
              --v497;
            }
            while (v497);
          }
        }
        v503 = v1865;
        v504 = &v1865;
        v505 = &v1865;
        if (v1865)
        {
          v506 = *((char *)v333 + 55);
          if (v506 >= 0)
            v507 = (uint64_t *)(v333 + 4);
          else
            v507 = v333[4];
          if (v506 >= 0)
            v508 = *((unsigned __int8 *)v333 + 55);
          else
            v508 = (size_t)v333[5];
          while (1)
          {
            v504 = (char **)v503;
            v511 = (char *)*((_QWORD *)v503 + 4);
            v509 = v503 + 32;
            v510 = v511;
            v512 = v509[23];
            if (v512 >= 0)
              v513 = v509;
            else
              v513 = v510;
            if (v512 >= 0)
              v514 = v509[23];
            else
              v514 = *((_QWORD *)v509 + 1);
            if (v514 >= v508)
              v515 = v508;
            else
              v515 = v514;
            v516 = memcmp(v507, v513, v515);
            if (v516)
            {
              if (v516 < 0)
                goto LABEL_743;
LABEL_757:
              v517 = memcmp(v513, v507, v515);
              if (v517)
              {
                if ((v517 & 0x80000000) == 0)
                  goto LABEL_785;
              }
              else if (v514 >= v508)
              {
LABEL_785:
                v518 = (char *)v504;
                goto LABEL_796;
              }
              v503 = v504[1];
              if (!v503)
              {
                v505 = v504 + 1;
                break;
              }
            }
            else
            {
              if (v508 >= v514)
                goto LABEL_757;
LABEL_743:
              v503 = *v504;
              v505 = v504;
              if (!*v504)
                break;
            }
          }
        }
        v518 = (char *)operator new(0x50uLL);
        v519 = v518 + 32;
        if (*((char *)v333 + 55) < 0)
        {
          sub_207CA40D8(v519, v333[4], (unint64_t)v333[5]);
        }
        else
        {
          v520 = *v336;
          *((_QWORD *)v518 + 6) = v333[6];
          *(_OWORD *)v519 = v520;
        }
        *((_QWORD *)v518 + 7) = 0;
        *((_QWORD *)v518 + 8) = 0;
        *((_QWORD *)v518 + 9) = 0;
        *(_QWORD *)v518 = 0;
        *((_QWORD *)v518 + 1) = 0;
        *((_QWORD *)v518 + 2) = v504;
        *v505 = v518;
        v521 = v518;
        if (*v1864)
        {
          v1864 = (char **)*v1864;
          v521 = *v505;
        }
        v522 = v1865;
        _ZF = v521 == v1865;
        v521[24] = v521 == v1865;
        if (!_ZF)
        {
          do
          {
            v523 = *((_QWORD *)v521 + 2);
            if (*(_BYTE *)(v523 + 24))
              break;
            v524 = *(char **)(v523 + 16);
            v525 = *(_QWORD *)v524;
            if (*(_QWORD *)v524 == v523)
            {
              v528 = *((_QWORD *)v524 + 1);
              if (!v528 || (v529 = *(unsigned __int8 *)(v528 + 24), v526 = (_BYTE *)(v528 + 24), v529))
              {
                if (*(char **)v523 == v521)
                {
                  *(_BYTE *)(v523 + 24) = 1;
                  v524[24] = 0;
                  v532 = *(_QWORD *)(v523 + 8);
                  *(_QWORD *)v524 = v532;
                  if (v532)
                    goto LABEL_783;
                }
                else
                {
                  v530 = *(uint64_t **)(v523 + 8);
                  v531 = *v530;
                  *(_QWORD *)(v523 + 8) = *v530;
                  if (v531)
                  {
                    *(_QWORD *)(v531 + 16) = v523;
                    v524 = *(char **)(v523 + 16);
                  }
                  v530[2] = (uint64_t)v524;
                  *(_QWORD *)(*(_QWORD *)(v523 + 16) + 8 * (**(_QWORD **)(v523 + 16) != v523)) = v530;
                  *v530 = v523;
                  *(_QWORD *)(v523 + 16) = v530;
                  v524 = (char *)v530[2];
                  v523 = *(_QWORD *)v524;
                  *((_BYTE *)v530 + 24) = 1;
                  v524[24] = 0;
                  v532 = *(_QWORD *)(v523 + 8);
                  *(_QWORD *)v524 = v532;
                  if (v532)
LABEL_783:
                    *(_QWORD *)(v532 + 16) = v524;
                }
                *(_QWORD *)(v523 + 16) = *((_QWORD *)v524 + 2);
                *(_QWORD *)(*((_QWORD *)v524 + 2) + 8 * (**((_QWORD **)v524 + 2) != (_QWORD)v524)) = v523;
                *(_QWORD *)(v523 + 8) = v524;
LABEL_794:
                *((_QWORD *)v524 + 2) = v523;
                break;
              }
            }
            else if (!v525 || (v527 = *(unsigned __int8 *)(v525 + 24), v526 = (_BYTE *)(v525 + 24), v527))
            {
              if (*(char **)v523 == v521)
              {
                v533 = *((_QWORD *)v521 + 1);
                *(_QWORD *)v523 = v533;
                if (v533)
                {
                  *(_QWORD *)(v533 + 16) = v523;
                  v524 = *(char **)(v523 + 16);
                }
                *((_QWORD *)v521 + 2) = v524;
                *(_QWORD *)(*(_QWORD *)(v523 + 16) + 8 * (**(_QWORD **)(v523 + 16) != v523)) = v521;
                *((_QWORD *)v521 + 1) = v523;
                *(_QWORD *)(v523 + 16) = v521;
                v524 = (char *)*((_QWORD *)v521 + 2);
              }
              else
              {
                v521 = (char *)*((_QWORD *)v521 + 2);
              }
              v521[24] = 1;
              v524[24] = 0;
              v523 = *((_QWORD *)v524 + 1);
              v534 = *(char **)v523;
              *((_QWORD *)v524 + 1) = *(_QWORD *)v523;
              if (v534)
                *((_QWORD *)v534 + 2) = v524;
              *(_QWORD *)(v523 + 16) = *((_QWORD *)v524 + 2);
              *(_QWORD *)(*((_QWORD *)v524 + 2) + 8 * (**((_QWORD **)v524 + 2) != (_QWORD)v524)) = v523;
              *(_QWORD *)v523 = v524;
              goto LABEL_794;
            }
            *(_BYTE *)(v523 + 24) = 1;
            v521 = v524;
            v524[24] = v524 == v522;
            *v526 = 1;
          }
          while (v524 != v522);
        }
        ++v1866;
LABEL_796:
        v535 = *((_QWORD *)v518 + 7);
        LOBYTE(v1855) = 0;
        v1856 = 0;
        __src[0] = 0;
        v1884[23] = 0;
        sub_20809F1D0((uint64_t)memptr, v535, (__int128 *)__p, &v1855, &dword_208266D34, (uint64_t)__src);
        v536 = v1868;
        v537 = &v1868;
        v538 = &v1868;
        if (v1868)
        {
          v539 = *((char *)v333 + 55);
          if (v539 >= 0)
            v540 = (uint64_t *)(v333 + 4);
          else
            v540 = v333[4];
          if (v539 >= 0)
            v541 = *((unsigned __int8 *)v333 + 55);
          else
            v541 = (size_t)v333[5];
          while (1)
          {
            v537 = (uint64_t ***)v536;
            v544 = v536[4];
            v542 = v536 + 4;
            v543 = v544;
            v545 = *((char *)v542 + 23);
            if (v545 >= 0)
              v546 = v542;
            else
              v546 = (uint64_t **)v543;
            if (v545 >= 0)
              v547 = *((unsigned __int8 *)v542 + 23);
            else
              v547 = (size_t)v542[1];
            if (v547 >= v541)
              v548 = v541;
            else
              v548 = v547;
            v549 = memcmp(v540, v546, v548);
            if (v549)
            {
              if (v549 < 0)
                goto LABEL_803;
LABEL_817:
              v550 = memcmp(v546, v540, v548);
              if (v550)
              {
                if ((v550 & 0x80000000) == 0)
                  goto LABEL_855;
              }
              else if (v547 >= v541)
              {
                goto LABEL_855;
              }
              v536 = v537[1];
              if (!v536)
              {
                v538 = v537 + 1;
                break;
              }
            }
            else
            {
              if (v541 >= v547)
                goto LABEL_817;
LABEL_803:
              v536 = *v537;
              v538 = v537;
              if (!*v537)
                break;
            }
          }
        }
        v551 = (uint64_t **)operator new(0xB0uLL);
        v1888 = (int8x16_t *)v551;
        v1889 = &v1868;
        LOBYTE(v1890) = 0;
        v552 = v551 + 4;
        if (*((char *)v333 + 55) < 0)
        {
          sub_207CA40D8(v552, v333[4], (unint64_t)v333[5]);
        }
        else
        {
          v553 = *v336;
          v551[6] = v333[6];
          *(_OWORD *)v552 = v553;
        }
        *(_OWORD *)(v551 + 13) = 0u;
        v551[21] = 0;
        *(_OWORD *)(v551 + 19) = 0u;
        *(_OWORD *)(v551 + 17) = 0u;
        *(_OWORD *)(v551 + 15) = 0u;
        *(_OWORD *)(v551 + 11) = 0u;
        *(_OWORD *)(v551 + 9) = 0u;
        *(_OWORD *)(v551 + 7) = 0u;
        *((_DWORD *)v551 + 26) = 64;
        *((_BYTE *)v551 + 168) = 0;
        LOBYTE(v1890) = 1;
        *v551 = 0;
        v551[1] = 0;
        v551[2] = (uint64_t *)v537;
        *v538 = v551;
        if (*v1867)
        {
          v1867 = (uint64_t ***)*v1867;
          v551 = *v538;
        }
        v554 = v1868;
        _ZF = v551 == v1868;
        *((_BYTE *)v551 + 24) = v551 == v1868;
        if (!_ZF)
        {
          do
          {
            v555 = v551[2];
            if (*((_BYTE *)v555 + 24))
              break;
            v556 = (uint64_t **)v555[2];
            v557 = (uint64_t)*v556;
            if (*v556 == v555)
            {
              v560 = v556[1];
              if (!v560 || (v561 = *((unsigned __int8 *)v560 + 24), v558 = v560 + 3, v561))
              {
                if ((uint64_t **)*v555 == v551)
                {
                  *((_BYTE *)v555 + 24) = 1;
                  *((_BYTE *)v556 + 24) = 0;
                  v564 = (uint64_t *)v555[1];
                  *v556 = v564;
                  if (v564)
                    goto LABEL_843;
                }
                else
                {
                  v562 = v555[1];
                  v563 = *(_QWORD *)v562;
                  v555[1] = *(_QWORD *)v562;
                  if (v563)
                  {
                    *(_QWORD *)(v563 + 16) = v555;
                    v556 = (uint64_t **)v555[2];
                  }
                  *(_QWORD *)(v562 + 16) = v556;
                  *(_QWORD *)(v555[2] + 8 * (*(_QWORD *)v555[2] != (_QWORD)v555)) = v562;
                  *(_QWORD *)v562 = v555;
                  v555[2] = v562;
                  v556 = *(uint64_t ***)(v562 + 16);
                  v555 = *v556;
                  *(_BYTE *)(v562 + 24) = 1;
                  *((_BYTE *)v556 + 24) = 0;
                  v564 = (uint64_t *)v555[1];
                  *v556 = v564;
                  if (v564)
LABEL_843:
                    v564[2] = (uint64_t)v556;
                }
                v555[2] = (uint64_t)v556[2];
                v556[2][*v556[2] != (_QWORD)v556] = (uint64_t)v555;
                v555[1] = (uint64_t)v556;
LABEL_853:
                v556[2] = v555;
                break;
              }
            }
            else if (!v557 || (v559 = *(unsigned __int8 *)(v557 + 24), v558 = (_BYTE *)(v557 + 24), v559))
            {
              if ((uint64_t **)*v555 == v551)
              {
                v565 = v551[1];
                *v555 = (uint64_t)v565;
                if (v565)
                {
                  v565[2] = (uint64_t)v555;
                  v556 = (uint64_t **)v555[2];
                }
                v551[2] = (uint64_t *)v556;
                *(_QWORD *)(v555[2] + 8 * (*(_QWORD *)v555[2] != (_QWORD)v555)) = v551;
                v551[1] = v555;
                v555[2] = (uint64_t)v551;
                v556 = (uint64_t **)v551[2];
              }
              else
              {
                v551 = (uint64_t **)v551[2];
              }
              *((_BYTE *)v551 + 24) = 1;
              *((_BYTE *)v556 + 24) = 0;
              v555 = v556[1];
              v566 = *v555;
              v556[1] = (uint64_t *)*v555;
              if (v566)
                *(_QWORD *)(v566 + 16) = v556;
              v555[2] = (uint64_t)v556[2];
              v556[2][*v556[2] != (_QWORD)v556] = (uint64_t)v555;
              *v555 = (uint64_t)v556;
              goto LABEL_853;
            }
            *((_BYTE *)v555 + 24) = 1;
            v551 = v556;
            *((_BYTE *)v556 + 24) = v556 == v554;
            *v558 = 1;
          }
          while (v556 != v554);
        }
        ++v1869;
        v537 = (uint64_t ***)v1888;
LABEL_855:
        v567 = v1858;
        *(_OWORD *)(v537 + 7) = *(_OWORD *)memptr;
        *(_OWORD *)(v537 + 9) = v567;
        *(_OWORD *)(v537 + 11) = v1859;
        *((_DWORD *)v537 + 26) = v1860;
        if (*((unsigned __int8 *)v537 + 168) == v1863)
        {
          if (!*((_BYTE *)v537 + 168))
            goto LABEL_878;
          v568 = v1861;
          v1861 = 0uLL;
          v569 = (std::__shared_weak_count *)v537[16];
          *(_OWORD *)(v537 + 15) = v568;
          if (v569)
          {
            v570 = (unint64_t *)&v569->__shared_owners_;
            do
              v571 = __ldaxr(v570);
            while (__stlxr(v571 - 1, v570));
            if (!v571)
            {
              ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
              std::__shared_weak_count::__release_weak(v569);
            }
          }
          *(_OWORD *)(v537 + 17) = v1862[0];
          *(_OWORD *)((char *)v537 + 150) = *(_OWORD *)((char *)v1862 + 14);
          if (!v1863)
          {
LABEL_878:
            if (v1884[23])
              goto LABEL_879;
            goto LABEL_885;
          }
        }
        else if (*((_BYTE *)v537 + 168))
        {
          v572 = (std::__shared_weak_count *)v537[16];
          if (!v572)
            goto LABEL_869;
          v573 = (unint64_t *)&v572->__shared_owners_;
          do
            v574 = __ldaxr(v573);
          while (__stlxr(v574 - 1, v573));
          if (!v574)
          {
            ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
            std::__shared_weak_count::__release_weak(v572);
            *((_BYTE *)v537 + 168) = 0;
            if (!v1863)
              goto LABEL_878;
          }
          else
          {
LABEL_869:
            *((_BYTE *)v537 + 168) = 0;
            if (!v1863)
              goto LABEL_878;
          }
        }
        else
        {
          v537[14] = (uint64_t **)off_24C06E878;
          *(_OWORD *)(v537 + 15) = v1861;
          v1861 = 0uLL;
          *(_OWORD *)(v537 + 17) = v1862[0];
          *(_OWORD *)((char *)v537 + 150) = *(_OWORD *)((char *)v1862 + 14);
          *((_BYTE *)v537 + 168) = 1;
          if (!v1863)
            goto LABEL_878;
        }
        v575 = (std::__shared_weak_count *)*((_QWORD *)&v1861 + 1);
        if (!*((_QWORD *)&v1861 + 1))
          goto LABEL_878;
        v576 = (unint64_t *)(*((_QWORD *)&v1861 + 1) + 8);
        do
          v577 = __ldaxr(v576);
        while (__stlxr(v577 - 1, v576));
        if (v577)
          goto LABEL_878;
        ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
        std::__shared_weak_count::__release_weak(v575);
        if (v1884[23])
        {
LABEL_879:
          v578 = *(std::__shared_weak_count **)&__src[16];
          if (*(_QWORD *)&__src[16])
          {
            v579 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
            do
              v580 = __ldaxr(v579);
            while (__stlxr(v580 - 1, v579));
            if (!v580)
            {
              ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
              std::__shared_weak_count::__release_weak(v578);
            }
          }
        }
LABEL_885:
        if (!(_BYTE)v1828)
          goto LABEL_890;
        v581 = *(std::__shared_weak_count **)&__p[72];
        if (!*(_QWORD *)&__p[72])
          goto LABEL_890;
        v582 = (unint64_t *)(*(_QWORD *)&__p[72] + 8);
        do
          v583 = __ldaxr(v582);
        while (__stlxr(v583 - 1, v582));
        if (v583)
        {
LABEL_890:
          v428 = v333[1];
          if (v428)
            goto LABEL_891;
          goto LABEL_896;
        }
        ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
        std::__shared_weak_count::__release_weak(v581);
        v428 = v333[1];
        if (v428)
          goto LABEL_891;
        do
        {
LABEL_896:
          v584 = (uint64_t **)v333[2];
          _ZF = *v584 == (uint64_t *)v333;
          v333 = v584;
        }
        while (!_ZF);
LABEL_477:
        v333 = v584;
      }
      while (v584 != v1702);
    }
    if (!*(_BYTE *)(a2 + 472))
      goto LABEL_1005;
    v334 = *(_QWORD *)(a2 + 432);
    if (!v334)
      goto LABEL_1005;
    v335 = 0;
    while (2)
    {
      while (2)
      {
        std::to_string((std::string *)__p, v335);
        v586 = std::string::insert((std::string *)__p, 0, "image", 5uLL);
        *(_OWORD *)memptr = *(_OWORD *)&v586->__r_.__value_.__l.__data_;
        *(_QWORD *)&v1858 = *((_QWORD *)&v586->__r_.__value_.__l + 2);
        v586->__r_.__value_.__l.__size_ = 0;
        v586->__r_.__value_.__r.__words[2] = 0;
        v586->__r_.__value_.__r.__words[0] = 0;
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          v587 = v1868;
          v588 = (void *)BYTE7(v1858);
          v585 = SBYTE7(v1858);
          if (!v1868)
            goto LABEL_910;
        }
        else
        {
          v587 = v1868;
          v588 = (void *)BYTE7(v1858);
          v585 = SBYTE7(v1858);
          if (!v1868)
            goto LABEL_910;
        }
        if (v585 >= 0)
          v589 = memptr;
        else
          v589 = (void **)memptr[0];
        if (v585 >= 0)
          v590 = v588;
        else
          v590 = memptr[1];
        v591 = &v1868;
        v592 = v587;
        while (2)
        {
          while (2)
          {
            v593 = *((char *)v592 + 55);
            if (v593 >= 0)
              v594 = (uint64_t *)(v592 + 4);
            else
              v594 = v592[4];
            if (v593 >= 0)
              v595 = *((unsigned __int8 *)v592 + 55);
            else
              v595 = (size_t)v592[5];
            if ((unint64_t)v590 >= v595)
              v596 = v595;
            else
              v596 = (size_t)v590;
            v597 = memcmp(v594, v589, v596);
            if (v597)
            {
              if ((v597 & 0x80000000) == 0)
                break;
              goto LABEL_923;
            }
            if (v595 < (unint64_t)v590)
            {
LABEL_923:
              v592 = (uint64_t **)v592[1];
              if (!v592)
                goto LABEL_938;
              continue;
            }
            break;
          }
          v591 = (uint64_t ***)v592;
          v592 = (uint64_t **)*v592;
          if (v592)
            continue;
          break;
        }
LABEL_938:
        if (v591 == &v1868)
          goto LABEL_910;
        v600 = v591[4];
        v599 = v591 + 4;
        v598 = v600;
        v601 = *((char *)v599 + 23);
        if (v601 >= 0)
          v602 = v599;
        else
          v602 = (uint64_t ***)v598;
        if (v601 >= 0)
          v603 = *((unsigned __int8 *)v599 + 23);
        else
          v603 = (size_t)v599[1];
        if (v603 >= (unint64_t)v590)
          v604 = (size_t)v590;
        else
          v604 = v603;
        v605 = memcmp(v589, v602, v604);
        v606 = v587;
        if (v605)
        {
          if ((v605 & 0x80000000) == 0)
            goto LABEL_956;
          goto LABEL_910;
        }
        if ((unint64_t)v590 < v603)
          goto LABEL_910;
LABEL_956:
        while (2)
        {
          while (2)
          {
            v607 = *((char *)v606 + 55);
            if (v607 >= 0)
              v608 = (uint64_t *)(v606 + 4);
            else
              v608 = v606[4];
            if (v607 >= 0)
              v609 = *((unsigned __int8 *)v606 + 55);
            else
              v609 = (size_t)v606[5];
            if (v609 >= (unint64_t)v590)
              v610 = (size_t)v590;
            else
              v610 = v609;
            v611 = memcmp(v589, v608, v610);
            if (v611)
            {
              if (v611 < 0)
                goto LABEL_955;
            }
            else if ((unint64_t)v590 < v609)
            {
LABEL_955:
              v606 = (uint64_t **)*v606;
              if (!v606)
                goto LABEL_2515;
              continue;
            }
            break;
          }
          v612 = memcmp(v608, v589, v610);
          if (v612)
          {
            if ((v612 & 0x80000000) == 0)
              break;
            goto LABEL_973;
          }
          if (v609 < (unint64_t)v590)
          {
LABEL_973:
            v606 = (uint64_t **)v606[1];
            if (!v606)
LABEL_2515:
              sub_207CA4018("map::at:  key not found");
            continue;
          }
          break;
        }
        v613 = *((_DWORD *)v606 + 16);
        v614 = *((unsigned int *)sub_207DC4360(v587, (const void **)memptr) + 1);
        v615 = sub_207DC4360(v1868, (const void **)memptr);
        if (*((_BYTE *)v615 + 112))
        {
          v616 = v615 + 12;
          if (*((_BYTE *)v615 + 108))
            v617 = v615[12] == 0;
          else
            v617 = 1;
          if (!v617)
          {
            v618 = v615[8];
            v619 = (std::__shared_weak_count *)v615[9];
            if (v619)
            {
              v620 = (unint64_t *)&v619->__shared_owners_;
              do
                v621 = __ldxr(v620);
              while (__stxr(v621 + 1, v620));
              do
                v622 = __ldaxr(v620);
              while (__stlxr(v622 - 1, v620));
              if (!v622)
              {
                ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
                std::__shared_weak_count::__release_weak(v619);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v618 + 88))(v618, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          }
        }
        else
        {
          v616 = v615 + 5;
        }
        v623 = *v616;
        v624 = operator new(8uLL);
        *v624 = 0x3F80000000000000;
        *(_QWORD *)&__src[16] = v624 + 1;
        *(_QWORD *)__src = v624;
        *(_QWORD *)&__src[8] = v624 + 1;
        sub_207DFCF08(v623, v614, v613, (uint64_t)__src, (uint64_t)__p);
        v625 = a9[1];
        if (v625 >= a9[2])
        {
          v626 = sub_207DC45A8(a9, (uint64_t)__p);
        }
        else
        {
          sub_207D2E4A8(a9[1], (uint64_t)__p);
          v626 = v625 + 144;
          a9[1] = v625 + 144;
        }
        a9[1] = v626;
        *(_QWORD *)__p = &off_24C072BC8;
        if (*((_QWORD *)&v1828 + 1))
        {
          *(_QWORD *)&v1829 = *((_QWORD *)&v1828 + 1);
          operator delete(*((void **)&v1828 + 1));
        }
        v627 = (std::__shared_weak_count *)v1828;
        if (!(_QWORD)v1828)
          goto LABEL_997;
        v628 = (unint64_t *)(v1828 + 8);
        do
          v629 = __ldaxr(v628);
        while (__stlxr(v629 - 1, v628));
        if (!v629)
        {
          ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
          std::__shared_weak_count::__release_weak(v627);
          v630 = *(std::__shared_weak_count **)&v1827[8];
          if (*(_QWORD *)&v1827[8])
          {
LABEL_998:
            v631 = (unint64_t *)&v630->__shared_owners_;
            do
              v632 = __ldaxr(v631);
            while (__stlxr(v632 - 1, v631));
            if (!v632)
            {
              ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
              std::__shared_weak_count::__release_weak(v630);
            }
          }
        }
        else
        {
LABEL_997:
          v630 = *(std::__shared_weak_count **)&v1827[8];
          if (*(_QWORD *)&v1827[8])
            goto LABEL_998;
        }
        if (*(_QWORD *)__src)
          operator delete(*(void **)__src);
        LOBYTE(v585) = BYTE7(v1858);
LABEL_910:
        if ((v585 & 0x80) == 0)
        {
          if (++v335 == v334)
            goto LABEL_1005;
          continue;
        }
        break;
      }
      operator delete(memptr[0]);
      if (++v335 != v334)
        continue;
      break;
    }
LABEL_1005:
    if (a3)
    {
      v633 = 0;
      v634 = v1695 * a3;
      while (1)
      {
        v635 = v633 + v634;
        v636 = *a5;
        if (0x8F9C18F9C18F9C19 * ((a5[1] - *a5) >> 3) <= v633 + v634)
          sub_207CBA8AC();
        __p[16] = 0;
        v1827[0] = 0;
        memset(&__p[24], 0, 57);
        BYTE4(v1831) = 0;
        *(_OWORD *)&v1827[8] = 0u;
        v1828 = 0u;
        v1829 = 0u;
        memset(v1830, 0, 57);
        v1832 = 0;
        v1833 = 0;
        v1834 = 8;
        BYTE4(v1837) = 0;
        memset(v1836, 0, 33);
        v1835 = 0u;
        v1838 = 0;
        v1839 = 0;
        v1840 = 8;
        v1842 = 0;
        v1843 = 0;
        v1841 = 0uLL;
        v1847 = xmmword_208236A40;
        v1848 = unk_208236A50;
        v1849 = xmmword_208236A60;
        v1850 = xmmword_208236A70[0];
        v1854 = 0;
        v1853 = 0u;
        __dst = 0u;
        memset(v1852, 0, sizeof(v1852));
        *(_QWORD *)&__p[8] = &off_24C072BC8;
        *(_QWORD *)__p = v633;
        v637 = *a9;
        v638 = a9[1];
        v1734 = v633;
        if (*a9 != v638)
          break;
LABEL_1068:
        if (v633 >= ((char *)v1875[1] - (char *)v1875[0]) >> 2)
          v685 = &v1871;
        else
          v685 = (float *)((char *)v1875[0] + 4 * v633);
        if (v1875[1] == v1875[0])
          v686 = &v1871;
        else
          v686 = v685;
        v1843 = *(_DWORD *)v686;
        v687 = v636 + 328 * v635;
        v688 = *(_OWORD *)(v687 + 108);
        v689 = *(_OWORD *)(v687 + 92);
        v1846 = *(_DWORD *)(v687 + 124);
        v1844 = v689;
        v1845 = v688;
        v690 = *(_OWORD *)(v687 + 232);
        v691 = *(_OWORD *)(v687 + 216);
        v692 = *(_OWORD *)(v687 + 248);
        v1847 = *(_OWORD *)(v687 + 200);
        v1848 = v691;
        v1849 = v690;
        v1850 = v692;
        v693 = *(_QWORD *)v1703;
        if (*(_QWORD *)v1703 != *(_QWORD *)(v1703 + 8))
        {
          v694 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1703 + 368) - *(_QWORD *)(v1703 + 360)) >> 2);
          v695 = v694 * v633;
          v696 = v694 + v694 * v633;
          v697 = (char *)(v693 + 8 * v694 * v633);
          v698 = (_BYTE *)(v693 + 8 * v696);
          v699 = v698 - v697;
          v700 = (v698 - v697) >> 3;
          v701 = v1852[0];
          v702 = (char *)__dst;
          if (v700 <= (uint64_t)(v1852[0] - __dst) >> 3)
          {
            v705 = (uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 3;
            if (v705 >= v700)
              goto LABEL_1091;
            if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
            {
              memmove((void *)__dst, v697, *((_QWORD *)&__dst + 1) - __dst);
              v702 = (char *)*((_QWORD *)&__dst + 1);
            }
            v706 = &v697[8 * v705];
            v699 = v698 - v706;
            if (v698 != v706)
            {
              v707 = v702;
              goto LABEL_1093;
            }
          }
          else
          {
            if ((_QWORD)__dst)
            {
              *((_QWORD *)&__dst + 1) = __dst;
              operator delete((void *)__dst);
              v701 = 0;
              __dst = 0uLL;
              v1852[0] = 0;
            }
            if ((v699 & 0x8000000000000000) != 0)
              goto LABEL_2546;
            v703 = v701 >> 2;
            if (v701 >> 2 <= v700)
              v703 = (v698 - v697) >> 3;
            v704 = (unint64_t)v701 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v703;
            if (v704 >> 61)
LABEL_2546:
              sub_207CA420C();
            v702 = (char *)operator new(8 * v704);
            *(_QWORD *)&__dst = v702;
            *((_QWORD *)&__dst + 1) = v702;
            v1852[0] = &v702[8 * v704];
LABEL_1091:
            if (v696 != v695)
            {
              v707 = v702;
              v706 = v697;
LABEL_1093:
              memmove(v707, v706, v699);
            }
          }
          *((_QWORD *)&__dst + 1) = &v702[v699];
        }
        if (a11)
        {
          v708 = *(_QWORD *)(v1783 + 8) - *(_QWORD *)v1783;
          if (v708)
          {
            v709 = 0;
            v710 = v708 >> 3;
            while (2)
            {
              v712 = *(_QWORD *)(v1783 + 72);
              if (v709 >= (*(_QWORD *)(v1783 + 80) - v712) >> 3)
                sub_207CBA8AC();
              if (v635 != *(_QWORD *)(v712 + 8 * v709))
                goto LABEL_1100;
              v713 = *(_QWORD *)v1783;
              v714 = (_BYTE *)v1852[2];
              if (v1852[2] < v1852[3])
              {
                *(_QWORD *)v1852[2] = *(_QWORD *)(v713 + 8 * v709);
                v715 = (uint64_t)(v714 + 8);
                goto LABEL_1122;
              }
              v716 = (_BYTE *)v1852[1];
              v717 = v1852[2] - v1852[1];
              v718 = (uint64_t)(v1852[2] - v1852[1]) >> 3;
              v719 = v718 + 1;
              if ((unint64_t)(v718 + 1) >> 61)
                sub_207CA420C();
              v720 = v1852[3] - v1852[1];
              if ((uint64_t)(v1852[3] - v1852[1]) >> 2 > v719)
                v719 = v720 >> 2;
              if ((unint64_t)v720 >= 0x7FFFFFFFFFFFFFF8)
                v721 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v721 = v719;
              if (v721)
              {
                if (v721 >> 61)
                  goto LABEL_2528;
                v722 = operator new(8 * v721);
                v723 = &v722[8 * v718];
                *v723 = *(_QWORD *)(v713 + 8 * v709);
                v715 = (uint64_t)(v723 + 1);
                v724 = (char *)(v714 - v716);
                if (v714 != v716)
                {
LABEL_1114:
                  v725 = (unint64_t)(v724 - 8);
                  if (v725 < 0x58)
                    goto LABEL_2566;
                  if ((unint64_t)(v714 - v722 - v717) < 0x20)
                    goto LABEL_2566;
                  v726 = (v725 >> 3) + 1;
                  v727 = 8 * (v726 & 0x3FFFFFFFFFFFFFFCLL);
                  v728 = &v714[-v727];
                  v723 = (_QWORD *)((char *)v723 - v727);
                  v729 = &v722[v717 - 16];
                  v730 = (__int128 *)(v714 - 16);
                  v731 = v726 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v732 = *v730;
                    *(v729 - 1) = *(v730 - 1);
                    *v729 = v732;
                    v729 -= 2;
                    v730 -= 2;
                    v731 -= 4;
                  }
                  while (v731);
                  v714 = v728;
                  if (v726 != (v726 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_2566:
                    do
                    {
                      v733 = *((_QWORD *)v714 - 1);
                      v714 -= 8;
                      *--v723 = v733;
                    }
                    while (v714 != v716);
                  }
                  v714 = (_BYTE *)v1852[1];
                  v1852[1] = v723;
                  v1852[2] = v715;
                  v1852[3] = &v722[8 * v721];
                  if (v714)
LABEL_1121:
                    operator delete(v714);
LABEL_1122:
                  v1852[2] = v715;
                  v734 = *(_QWORD *)(v1783 + 48);
                  v735 = (_BYTE *)*((_QWORD *)&v1853 + 1);
                  if (*((_QWORD *)&v1853 + 1) < (unint64_t)v1854)
                  {
                    **((_QWORD **)&v1853 + 1) = *(_QWORD *)(v734 + 8 * v709);
                    v711 = (uint64_t)(v735 + 8);
                    goto LABEL_1099;
                  }
                  v736 = (_BYTE *)v1853;
                  v737 = *((_QWORD *)&v1853 + 1) - v1853;
                  v738 = (uint64_t)(*((_QWORD *)&v1853 + 1) - v1853) >> 3;
                  v739 = v738 + 1;
                  if ((unint64_t)(v738 + 1) >> 61)
                    sub_207CA420C();
                  v740 = (uint64_t)&v1854[-v1853];
                  if ((uint64_t)&v1854[-v1853] >> 2 > v739)
                    v739 = v740 >> 2;
                  if ((unint64_t)v740 >= 0x7FFFFFFFFFFFFFF8)
                    v741 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v741 = v739;
                  if (v741)
                  {
                    if (v741 >> 61)
LABEL_2528:
                      sub_207CA3AB8();
                    v742 = (char *)operator new(8 * v741);
                    v743 = &v742[8 * v738];
                    *(_QWORD *)v743 = *(_QWORD *)(v734 + 8 * v709);
                    v711 = (uint64_t)(v743 + 8);
                    v744 = v735 - v736;
                    if (v735 != v736)
                    {
LABEL_1132:
                      v745 = v744 - 8;
                      if (v745 < 0x58)
                        goto LABEL_2567;
                      if ((unint64_t)(v735 - v742 - v737) < 0x20)
                        goto LABEL_2567;
                      v746 = (v745 >> 3) + 1;
                      v747 = 8 * (v746 & 0x3FFFFFFFFFFFFFFCLL);
                      v748 = &v735[-v747];
                      v743 -= v747;
                      v749 = &v742[v737 - 16];
                      v750 = (__int128 *)(v735 - 16);
                      v751 = v746 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v752 = *v750;
                        *((_OWORD *)v749 - 1) = *(v750 - 1);
                        *(_OWORD *)v749 = v752;
                        v749 -= 32;
                        v750 -= 2;
                        v751 -= 4;
                      }
                      while (v751);
                      v735 = v748;
                      if (v746 != (v746 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_2567:
                        do
                        {
                          v753 = *((_QWORD *)v735 - 1);
                          v735 -= 8;
                          *((_QWORD *)v743 - 1) = v753;
                          v743 -= 8;
                        }
                        while (v735 != v736);
                      }
                      *(_QWORD *)&v1853 = v743;
                      *((_QWORD *)&v1853 + 1) = v711;
                      v1854 = &v742[8 * v741];
                      if (!v736)
                      {
LABEL_1099:
                        *((_QWORD *)&v1853 + 1) = v711;
LABEL_1100:
                        if (++v709 == v710)
                          goto LABEL_1146;
                        continue;
                      }
LABEL_1145:
                      operator delete(v736);
                      goto LABEL_1099;
                    }
                  }
                  else
                  {
                    v742 = 0;
                    v743 = (char *)(8 * v738);
                    *(_QWORD *)(8 * v738) = *(_QWORD *)(v734 + 8 * v709);
                    v711 = 8 * v738 + 8;
                    v744 = v735 - v736;
                    if (v735 != v736)
                      goto LABEL_1132;
                  }
                  *(_QWORD *)&v1853 = v743;
                  *((_QWORD *)&v1853 + 1) = v711;
                  v1854 = &v742[8 * v741];
                  if (!v736)
                    goto LABEL_1099;
                  goto LABEL_1145;
                }
              }
              else
              {
                v722 = 0;
                v723 = (_QWORD *)(8 * v718);
                *(_QWORD *)(8 * v718) = *(_QWORD *)(v713 + 8 * v709);
                v715 = 8 * v718 + 8;
                v724 = (char *)(v714 - v716);
                if (v714 != v716)
                  goto LABEL_1114;
              }
              break;
            }
            v1852[1] = v723;
            v1852[2] = v715;
            v1852[3] = &v722[8 * v721];
            if (v714)
              goto LABEL_1121;
            goto LABEL_1122;
          }
        }
LABEL_1146:
        v754 = (char *)v1870[2];
        if (v1870[2] < v1870[3])
        {
          *(_QWORD *)v1870[2] = *(_QWORD *)__p;
          *((_QWORD *)v754 + 1) = &off_24C072BC8;
          v754[16] = 0;
          v754[88] = 0;
          *((_OWORD *)v754 + 6) = 0u;
          *(_OWORD *)(v754 + 24) = 0u;
          *(_OWORD *)(v754 + 40) = 0u;
          *(_OWORD *)(v754 + 56) = 0u;
          *(_OWORD *)(v754 + 65) = 0u;
          *((_OWORD *)v754 + 7) = 0u;
          *((_OWORD *)v754 + 8) = 0u;
          *((_QWORD *)v754 + 18) = 0;
          v755 = *(_QWORD *)&__p[40];
          v756 = *(_QWORD *)&__p[48];
          v757 = *(_QWORD *)&__p[56];
          v758 = *(_QWORD *)&__p[24];
          v759 = *(_QWORD *)&__p[32];
          v760 = __p[16];
          if (__p[16])
            v761 = *(_QWORD *)&__p[40];
          else
            v761 = 0;
          if ((unint64_t)(*(_QWORD *)&__p[32] + *(_QWORD *)&__p[24] * *(_QWORD *)&__p[40] + v761) > *(_QWORD *)&__p[48])
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_208216974);
            v762 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v762 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v763 = qword_2545309E8;
              for (i = qword_2545309F0; v763 != i; v763 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v763)(*(_QWORD *)(v763 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            }
            v765 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v765 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              abort();
            qword_254530A00(*(_QWORD *)algn_254530A08, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          v766 = *(_OWORD *)&v1827[8];
          *(_OWORD *)&v1827[8] = 0uLL;
          v767 = (std::__shared_weak_count *)*((_QWORD *)v754 + 13);
          *((_OWORD *)v754 + 6) = v766;
          if (v767)
          {
            v768 = (unint64_t *)&v767->__shared_owners_;
            do
              v769 = __ldaxr(v768);
            while (__stlxr(v769 - 1, v768));
            if (!v769)
            {
              ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
              std::__shared_weak_count::__release_weak(v767);
            }
          }
          v771 = (void **)(v754 + 128);
          v770 = (_BYTE *)*((_QWORD *)v754 + 16);
          v754[16] = v760;
          *((_QWORD *)v754 + 5) = v755;
          *((_QWORD *)v754 + 6) = v756;
          *((_QWORD *)v754 + 7) = v757;
          *((_QWORD *)v754 + 3) = v758;
          *((_QWORD *)v754 + 4) = v759;
          v772 = *(_QWORD *)&__p[80];
          v754[88] = v1827[0];
          *((_QWORD *)v754 + 9) = v758 + v760;
          *((_QWORD *)v754 + 10) = v772;
          *((_QWORD *)v754 + 8) = v758 + v760 + v759;
          v773 = (char *)*((_QWORD *)v754 + 17);
          v774 = (v773 - v770) >> 3;
          v775 = v757 - v774;
          if (v757 <= v774)
          {
            if (v757 < v774)
              *((_QWORD *)v754 + 17) = &v770[8 * v757];
            if (v757)
              goto LABEL_1233;
          }
          else
          {
            v776 = *((_QWORD *)v754 + 18);
            if (v775 <= (v776 - (uint64_t)v773) >> 3)
            {
              bzero(*((void **)v754 + 17), 8 * v775);
              *((_QWORD *)v754 + 17) = &v773[8 * v775];
            }
            else
            {
              if (v757 >> 61)
                sub_207CA420C();
              v777 = v776 - (_QWORD)v770;
              v778 = v777 >> 2;
              if (v777 >> 2 <= v757)
                v778 = v757;
              if ((unint64_t)v777 >= 0x7FFFFFFFFFFFFFF8)
                v778 = 0x1FFFFFFFFFFFFFFFLL;
              if (v778 >> 61)
                sub_207CA3AB8();
              v1813 = v778;
              v779 = (char *)operator new(8 * v778);
              v780 = 8 * v775;
              v781 = v779;
              v782 = &v779[8 * v774];
              v1800 = v780;
              bzero(v782, v780);
              v783 = (char *)(v773 - v770);
              if (v773 == v770)
              {
                v785 = v782;
                v786 = v781;
              }
              else
              {
                v784 = v783 - 8;
                if ((unint64_t)(v783 - 8) < 0x58)
                {
                  v785 = v782;
                  v786 = v781;
                  goto LABEL_1229;
                }
                v786 = v781;
                v785 = v782;
                if ((unint64_t)(v770 - v781) < 0x20)
                  goto LABEL_2568;
                v832 = ((unint64_t)v784 >> 3) + 1;
                v833 = 8 * (v832 & 0x3FFFFFFFFFFFFFFCLL);
                v834 = &v773[-v833];
                v785 = &v782[-v833];
                v835 = &v781[v773 - v770 - 16];
                v836 = v773 - 16;
                v837 = v832 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v838 = *(_OWORD *)v836;
                  *((_OWORD *)v835 - 1) = *((_OWORD *)v836 - 1);
                  *(_OWORD *)v835 = v838;
                  v835 -= 32;
                  v836 -= 32;
                  v837 -= 4;
                }
                while (v837);
                v773 = v834;
                if (v832 != (v832 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_2568:
                  do
                  {
LABEL_1229:
                    v839 = *((_QWORD *)v773 - 1);
                    v773 -= 8;
                    *((_QWORD *)v785 - 1) = v839;
                    v785 -= 8;
                  }
                  while (v773 != v770);
                }
                v773 = (char *)*v771;
              }
              *((_QWORD *)v754 + 16) = v785;
              *((_QWORD *)v754 + 17) = &v782[v1800];
              *((_QWORD *)v754 + 18) = &v786[8 * v1813];
              if (v773)
                operator delete(v773);
            }
LABEL_1233:
            v840 = 0;
            v841 = 0;
            do
            {
              *((_QWORD *)*v771 + v841++) = *((_QWORD *)v754 + 12) + v840;
              v840 += v756;
            }
            while (v757 != v841);
          }
          memset(&__p[40], 0, 24);
          *((_QWORD *)v754 + 20) = 0;
          *((_QWORD *)v754 + 21) = 0;
          *((_QWORD *)v754 + 19) = 0;
          *(_OWORD *)(v754 + 152) = *(_OWORD *)&v1830[8];
          *((_QWORD *)v754 + 21) = *(_QWORD *)&v1830[24];
          memset(&v1830[8], 0, 24);
          v843 = *(_OWORD *)&v1830[32];
          v842 = *(_OWORD *)&v1830[48];
          *((_QWORD *)v754 + 26) = v1831;
          *((_OWORD *)v754 + 11) = v843;
          *((_OWORD *)v754 + 12) = v842;
          *((_QWORD *)v754 + 27) = v1832;
          *((_QWORD *)v754 + 28) = v1833;
          *((_QWORD *)v754 + 29) = v1834;
          v1832 = 0;
          v1833 = 0;
          v844 = v1835;
          *((_QWORD *)v754 + 32) = v1836[0];
          *((_OWORD *)v754 + 15) = v844;
          v845 = *(_OWORD *)&v1836[1];
          v846 = *(_OWORD *)&v1836[3];
          *((_QWORD *)v754 + 37) = v1837;
          *(_OWORD *)(v754 + 264) = v845;
          *(_OWORD *)(v754 + 280) = v846;
          *((_QWORD *)v754 + 38) = v1838;
          *((_QWORD *)v754 + 39) = v1839;
          *((_QWORD *)v754 + 40) = v1840;
          v1838 = 0;
          v1839 = 0;
          v847 = v1841;
          *((_QWORD *)v754 + 43) = v1842;
          *(_OWORD *)(v754 + 328) = v847;
          *((_DWORD *)v754 + 88) = v1843;
          v848 = v1844;
          v849 = v1845;
          *((_DWORD *)v754 + 97) = v1846;
          *(_OWORD *)(v754 + 356) = v848;
          *(_OWORD *)(v754 + 372) = v849;
          v850 = v1847;
          v851 = v1848;
          v852 = v1850;
          *(_OWORD *)(v754 + 424) = v1849;
          *(_OWORD *)(v754 + 440) = v852;
          *(_OWORD *)(v754 + 392) = v850;
          *(_OWORD *)(v754 + 408) = v851;
          *((_QWORD *)v754 + 58) = 0;
          *((_QWORD *)v754 + 59) = 0;
          *((_QWORD *)v754 + 57) = 0;
          *(_OWORD *)(v754 + 456) = __dst;
          __dst = 0uLL;
          *((_QWORD *)v754 + 59) = v1852[0];
          *((_QWORD *)v754 + 60) = 0;
          v1852[0] = 0;
          *((_QWORD *)v754 + 61) = 0;
          *((_QWORD *)v754 + 62) = 0;
          *((_OWORD *)v754 + 30) = *(_OWORD *)&v1852[1];
          *((_QWORD *)v754 + 62) = v1852[3];
          memset(&v1852[1], 0, 24);
          *((_QWORD *)v754 + 63) = 0;
          *((_QWORD *)v754 + 64) = 0;
          *((_QWORD *)v754 + 65) = 0;
          *(_OWORD *)(v754 + 504) = v1853;
          *((_QWORD *)v754 + 65) = v1854;
          v1853 = 0uLL;
          v1854 = 0;
          v1870[2] = v754 + 528;
          goto LABEL_1598;
        }
        v787 = 0xF83E0F83E0F83E1 * (((char *)v1870[2] - (char *)v1870[1]) >> 4);
        v788 = v787 + 1;
        if ((unint64_t)(v787 + 1) > 0x7C1F07C1F07C1FLL)
          sub_207CA420C();
        if (0x1F07C1F07C1F07C2 * (((char *)v1870[3] - (char *)v1870[1]) >> 4) > v788)
          v788 = 0x1F07C1F07C1F07C2 * (((char *)v1870[3] - (char *)v1870[1]) >> 4);
        if ((unint64_t)(0xF83E0F83E0F83E1 * (((char *)v1870[3] - (char *)v1870[1]) >> 4)) >= 0x3E0F83E0F83E0FLL)
          v789 = 0x7C1F07C1F07C1FLL;
        else
          v789 = v788;
        v1801 = v789;
        if (v789)
        {
          if (v789 > 0x7C1F07C1F07C1FLL)
            sub_207CA3AB8();
          v790 = (char *)operator new(528 * v789);
        }
        else
        {
          v790 = 0;
        }
        v1732 = v790;
        v1814 = v787;
        v791 = &v790[528 * v787];
        *(_QWORD *)v791 = *(_QWORD *)__p;
        *((_QWORD *)v791 + 1) = &off_24C072BC8;
        v791[16] = 0;
        v1793 = v791 + 16;
        *(_OWORD *)(v791 + 24) = 0u;
        v792 = v791 + 24;
        *((_OWORD *)v791 + 6) = 0u;
        v793 = v791 + 96;
        v791[88] = 0;
        *(_OWORD *)(v791 + 40) = 0u;
        *(_OWORD *)(v791 + 56) = 0u;
        *(_OWORD *)(v791 + 65) = 0u;
        *((_OWORD *)v791 + 7) = 0u;
        *((_OWORD *)v791 + 8) = 0u;
        v1713 = v791;
        *((_QWORD *)v791 + 18) = 0;
        v794 = *(_QWORD *)&__p[40];
        v795 = *(_QWORD *)&__p[48];
        v796 = *(_QWORD *)&__p[56];
        v797 = *(_QWORD *)&__p[24];
        v798 = __p[16];
        if (__p[16])
          v799 = *(_QWORD *)&__p[40];
        else
          v799 = 0;
        v1786 = *(_QWORD *)&__p[32];
        if ((unint64_t)(*(_QWORD *)&__p[32] + *(_QWORD *)&__p[24] * *(_QWORD *)&__p[40] + v799) > *(_QWORD *)&__p[48])
        {
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_208216974);
          v800 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v800 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10 || byte_254530A18)
          {
            v801 = qword_2545309E8;
            for (j = qword_2545309F0; v801 != j; v801 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v801)(*(_QWORD *)(v801 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
          }
          v803 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v803 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10)
            abort();
          qword_254530A00(*(_QWORD *)algn_254530A08, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        }
        v804 = *(_OWORD *)&v1827[8];
        *(_OWORD *)&v1827[8] = 0uLL;
        v805 = *(std::__shared_weak_count **)&v1732[528 * v1814 + 104];
        *v793 = v804;
        if (v805)
        {
          v806 = (unint64_t *)&v805->__shared_owners_;
          do
            v807 = __ldaxr(v806);
          while (__stlxr(v807 - 1, v806));
          if (!v807)
          {
            ((void (*)(std::__shared_weak_count *))v805->__on_zero_shared)(v805);
            std::__shared_weak_count::__release_weak(v805);
          }
        }
        v808 = &v1732[528 * v1814];
        v811 = (char *)*((_QWORD *)v808 + 17);
        v809 = v808 + 136;
        v810 = v811;
        *v1793 = v798;
        *(v809 - 13) = v1786;
        *(v809 - 12) = v794;
        *(v809 - 11) = v795;
        *(v809 - 10) = v796;
        *v792 = v797;
        *(v809 - 7) = *(_QWORD *)&__p[80];
        *((_BYTE *)v809 - 48) = v1827[0];
        *(v809 - 9) = v797 + v798 + v1786;
        *(v809 - 8) = v797 + v798;
        v813 = (void **)(v809 - 1);
        v812 = (_BYTE *)*(v809 - 1);
        v814 = v811 - v812;
        v815 = (v811 - v812) >> 3;
        v816 = v796 - v815;
        if (v796 <= v815)
        {
          v830 = v1801;
          if (v796 < v815)
            *v809 = &v812[8 * v796];
          if (!v796)
            goto LABEL_1246;
          goto LABEL_1244;
        }
        v817 = &v1732[528 * v1814];
        v820 = *((_QWORD *)v817 + 18);
        v819 = v817 + 144;
        v818 = v820;
        if (v816 > (v820 - (uint64_t)v810) >> 3)
        {
          if (v796 >> 61)
            sub_207CA420C();
          v1794 = v819;
          v821 = v818 - (_QWORD)v812;
          v822 = v821 >> 2;
          if (v821 >> 2 <= v796)
            v822 = v796;
          if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFF8)
            v822 = 0x1FFFFFFFFFFFFFFFLL;
          if (v822 >> 61)
            sub_207CA3AB8();
          v1787 = v822;
          v823 = (char *)operator new(8 * v822);
          v824 = 8 * v816;
          v825 = v823;
          v826 = &v823[8 * v815];
          v1776 = v824;
          bzero(v826, v824);
          v827 = (char *)(v810 - v812);
          if (v810 == v812)
          {
            v829 = v826;
            v830 = v1801;
            v831 = v825;
          }
          else
          {
            v828 = v827 - 8;
            if ((unint64_t)(v827 - 8) < 0x58)
            {
              v829 = v826;
              v830 = v1801;
              v831 = v825;
              goto LABEL_1240;
            }
            v831 = v825;
            v853 = &v825[v814];
            v854 = v810 - &v825[v814];
            v829 = v826;
            v830 = v1801;
            if (v854 < 0x20)
              goto LABEL_2569;
            v855 = ((unint64_t)v828 >> 3) + 1;
            v856 = 8 * (v855 & 0x3FFFFFFFFFFFFFFCLL);
            v857 = &v810[-v856];
            v829 = &v826[-v856];
            v858 = v853 - 16;
            v859 = v810 - 16;
            v860 = v855 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v861 = *(_OWORD *)v859;
              *((_OWORD *)v858 - 1) = *((_OWORD *)v859 - 1);
              *(_OWORD *)v858 = v861;
              v858 -= 32;
              v859 -= 32;
              v860 -= 4;
            }
            while (v860);
            v810 = v857;
            if (v855 != (v855 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_2569:
              do
              {
LABEL_1240:
                v862 = *((_QWORD *)v810 - 1);
                v810 -= 8;
                *((_QWORD *)v829 - 1) = v862;
                v829 -= 8;
              }
              while (v810 != v812);
            }
            v810 = (char *)*v813;
          }
          *v813 = v829;
          *v809 = &v826[v1776];
          *v1794 = &v831[8 * v1787];
          if (v810)
            operator delete(v810);
          goto LABEL_1244;
        }
        bzero(v810, 8 * v816);
        *v809 = &v810[8 * v816];
        v830 = v1801;
LABEL_1244:
        v863 = 0;
        v864 = 0;
        do
        {
          *((_QWORD *)*v813 + v864++) = *(_QWORD *)v793 + v863;
          v863 += v795;
        }
        while (v796 != v864);
LABEL_1246:
        memset(&__p[40], 0, 24);
        v865 = &v1732[528 * v1814];
        *(_OWORD *)(v865 + 152) = *(_OWORD *)&v1830[8];
        v866 = v1832;
        *((_QWORD *)v865 + 21) = *(_QWORD *)&v1830[24];
        memset(&v1830[8], 0, 24);
        v867 = *(_OWORD *)&v1830[48];
        *((_OWORD *)v865 + 11) = *(_OWORD *)&v1830[32];
        *((_OWORD *)v865 + 12) = v867;
        *((_QWORD *)v865 + 26) = v1831;
        *((_QWORD *)v865 + 27) = v866;
        v868 = v1834;
        *((_QWORD *)v865 + 28) = v1833;
        *((_QWORD *)v865 + 29) = v868;
        v1832 = 0;
        v1833 = 0;
        v869 = v1835;
        *((_QWORD *)v865 + 32) = v1836[0];
        *((_OWORD *)v865 + 15) = v869;
        v870 = *(_OWORD *)&v1836[3];
        v871 = v1837;
        *(_OWORD *)(v865 + 264) = *(_OWORD *)&v1836[1];
        *(_OWORD *)(v865 + 280) = v870;
        v872 = v1838;
        v873 = v1839;
        *((_QWORD *)v865 + 37) = v871;
        *((_QWORD *)v865 + 38) = v872;
        v874 = v1840;
        *((_QWORD *)v865 + 39) = v873;
        *((_QWORD *)v865 + 40) = v874;
        v1838 = 0;
        v1839 = 0;
        v875 = v1841;
        *((_QWORD *)v865 + 43) = v1842;
        *(_OWORD *)(v865 + 328) = v875;
        *((_DWORD *)v865 + 88) = v1843;
        v876 = v1844;
        v877 = v1845;
        *((_DWORD *)v865 + 97) = v1846;
        *(_OWORD *)(v865 + 356) = v876;
        *(_OWORD *)(v865 + 372) = v877;
        v878 = v1847;
        v879 = v1848;
        v880 = v1850;
        *(_OWORD *)(v865 + 424) = v1849;
        *(_OWORD *)(v865 + 440) = v880;
        *(_OWORD *)(v865 + 392) = v878;
        *(_OWORD *)(v865 + 408) = v879;
        *((_QWORD *)v865 + 58) = 0;
        *((_QWORD *)v865 + 59) = 0;
        *(_OWORD *)(v865 + 456) = __dst;
        *((_QWORD *)v865 + 59) = v1852[0];
        __dst = 0uLL;
        v1852[0] = 0;
        *((_QWORD *)v865 + 61) = 0;
        *((_QWORD *)v865 + 62) = 0;
        *((_OWORD *)v865 + 30) = *(_OWORD *)&v1852[1];
        v881 = v1854;
        *((_QWORD *)v865 + 62) = v1852[3];
        memset(&v1852[1], 0, 24);
        *((_QWORD *)v865 + 65) = 0;
        *((_QWORD *)v865 + 64) = 0;
        *(_OWORD *)(v865 + 504) = v1853;
        *((_QWORD *)v865 + 65) = v881;
        v1853 = 0uLL;
        v1854 = 0;
        v882 = v1713;
        v883 = v1870[2];
        v1740 = (char *)v1870[1];
        if (v1870[2] == v1870[1])
        {
          v1870[1] = v1713;
          v1870[2] = v1713 + 528;
          v1870[3] = &v1732[528 * v830];
          if (v883)
            goto LABEL_1595;
          goto LABEL_1596;
        }
        v1712 = &v1732[528 * v830];
        v1767 = 0;
        do
        {
          v1815 = v882;
          v884 = v882 - 528;
          *(_QWORD *)v884 = *(v883 - 66);
          *((_QWORD *)v882 - 65) = &off_24C072BC8;
          *(v882 - 512) = 0;
          v885 = v882 - 512;
          *(_OWORD *)(v882 - 504) = 0u;
          v886 = v882 - 504;
          v884[88] = 0;
          *((_OWORD *)v882 - 27) = 0u;
          v887 = v882 - 432;
          *(_OWORD *)(v884 + 40) = 0u;
          *(_OWORD *)(v884 + 56) = 0u;
          *(_OWORD *)(v884 + 65) = 0u;
          *((_OWORD *)v882 - 25) = 0u;
          v888 = (void **)(v882 - 400);
          *((_OWORD *)v884 + 7) = 0u;
          *((_QWORD *)v884 + 18) = 0;
          v889 = (void *)*(v883 - 54);
          memptr[0] = v889;
          v1802 = (char *)(v883 - 66);
          v890 = (unint64_t *)*(v883 - 53);
          memptr[1] = v890;
          if (v890)
          {
            v891 = v890 + 1;
            do
              v892 = __ldxr(v891);
            while (__stxr(v892 + 1, v891));
          }
          v1788 = v883;
          v893 = *(v883 - 61);
          v894 = *(v883 - 60);
          v895 = *(v883 - 59);
          v1751 = *((unsigned __int8 *)v883 - 512);
          if (*((_BYTE *)v883 - 512))
            v896 = *(v883 - 61);
          else
            v896 = 0;
          v1777 = *(v883 - 62);
          v1760 = *(v883 - 63);
          v1795 = v884;
          v1745 = v885;
          if (v1777 + v1760 * v893 + v896 > v894)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_208216974);
            v897 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v897 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v898 = qword_2545309E8;
              for (k = qword_2545309F0; v898 != k; v898 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v898)(*(_QWORD *)(v898 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            }
            v900 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v900 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              abort();
            qword_254530A00(*(_QWORD *)algn_254530A08, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            v889 = memptr[0];
            v885 = v1745;
          }
          v901 = memptr[1];
          memptr[1] = 0;
          memptr[0] = 0;
          *(_QWORD *)v887 = v889;
          v902 = (std::__shared_weak_count *)*(v1815 - 53);
          *(v1815 - 53) = v901;
          if (v902)
          {
            v903 = (unint64_t *)&v902->__shared_owners_;
            do
              v904 = __ldaxr(v903);
            while (__stlxr(v904 - 1, v903));
            if (!v904)
            {
              ((void (*)(std::__shared_weak_count *))v902->__on_zero_shared)(v902);
              std::__shared_weak_count::__release_weak(v902);
            }
          }
          v907 = (char *)*((_QWORD *)v884 + 17);
          v906 = v884 + 136;
          v905 = v907;
          *v885 = v1751;
          *(v906 - 13) = v1777;
          *(v906 - 12) = v893;
          *(v906 - 11) = v894;
          *(v906 - 10) = v895;
          *(_QWORD *)v886 = v1760;
          v908 = *(v1788 - 56);
          *((_BYTE *)v906 - 48) = *((_BYTE *)v1788 - 440);
          *(v906 - 7) = v908;
          *(v906 - 9) = v1760 + v1751 + v1777;
          *(v906 - 8) = v1760 + v1751;
          v909 = *v888;
          v910 = v907 - (_BYTE *)*v888;
          v911 = v895 - (v910 >> 3);
          if (v895 > v910 >> 3)
          {
            v912 = *(v1815 - 48);
            if (v911 <= (v912 - (uint64_t)v905) >> 3)
            {
              bzero(v905, 8 * v911);
              *v906 = &v905[8 * v911];
              v922 = v1795;
            }
            else
            {
              if (v895 >> 61)
                sub_207CA420C();
              v913 = v912 - (_QWORD)v909;
              v914 = v913 >> 2;
              if (v913 >> 2 <= v895)
                v914 = v895;
              if ((unint64_t)v913 >= 0x7FFFFFFFFFFFFFF8)
                v914 = 0x1FFFFFFFFFFFFFFFLL;
              if (v914 >> 61)
                sub_207CA3AB8();
              v1761 = v914;
              v915 = (char *)operator new(8 * v914);
              v916 = 8 * v911;
              v1746 = v915;
              v917 = &v915[8 * (v910 >> 3)];
              v1752 = v916;
              bzero(v917, v916);
              v918 = (char *)(v905 - v909);
              if (v905 == v909)
              {
                v921 = v917;
                v922 = v1795;
                v920 = v1815 - 48;
                v923 = v1746;
              }
              else
              {
                v919 = v918 - 8;
                v920 = v1815 - 48;
                if ((unint64_t)(v918 - 8) < 0x58)
                {
                  v921 = v917;
                  v922 = v1795;
                  v923 = v1746;
                  goto LABEL_1290;
                }
                v923 = v1746;
                v921 = v917;
                v922 = v1795;
                if ((unint64_t)(&v905[-v910] - v1746) < 0x20)
                  goto LABEL_2570;
                v924 = ((unint64_t)v919 >> 3) + 1;
                v925 = 8 * (v924 & 0x3FFFFFFFFFFFFFFCLL);
                v926 = &v905[-v925];
                v921 = &v917[-v925];
                v927 = &v1746[v910 - 16];
                v928 = v905 - 16;
                v929 = v924 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v930 = *(_OWORD *)v928;
                  *((_OWORD *)v927 - 1) = *((_OWORD *)v928 - 1);
                  *(_OWORD *)v927 = v930;
                  v927 -= 32;
                  v928 -= 32;
                  v929 -= 4;
                }
                while (v929);
                v905 = v926;
                if (v924 != (v924 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_2570:
                  do
                  {
LABEL_1290:
                    v931 = *((_QWORD *)v905 - 1);
                    v905 -= 8;
                    *((_QWORD *)v921 - 1) = v931;
                    v921 -= 8;
                  }
                  while (v905 != v909);
                }
                v905 = (char *)*v888;
              }
              *v888 = v921;
              *v906 = &v917[v1752];
              *v920 = &v923[8 * v1761];
              if (v905)
                operator delete(v905);
            }
LABEL_1294:
            v932 = 0;
            v933 = 0;
            do
            {
              *((_QWORD *)*v888 + v933++) = *(_QWORD *)v887 + v932;
              v932 += v894;
            }
            while (v895 != v933);
            goto LABEL_1296;
          }
          if (v895 < v910 >> 3)
            *v906 = &v909[8 * v895];
          v922 = v1795;
          if (v895)
            goto LABEL_1294;
LABEL_1296:
          v934 = (std::__shared_weak_count *)memptr[1];
          if (memptr[1])
          {
            v935 = (unint64_t *)((char *)memptr[1] + 8);
            do
              v936 = __ldaxr(v935);
            while (__stlxr(v936 - 1, v935));
            if (!v936)
            {
              ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
              std::__shared_weak_count::__release_weak(v934);
            }
          }
          *((_QWORD *)v922 + 19) = 0;
          *((_QWORD *)v922 + 20) = 0;
          v1778 = v922 + 160;
          *((_QWORD *)v922 + 21) = 0;
          v937 = *((_QWORD *)v1802 + 19);
          v938 = *((_QWORD *)v1802 + 20);
          v939 = v938 - v937;
          if (v938 != v937)
          {
            v940 = 0xAAAAAAAAAAAAAAABLL * (v939 >> 3);
            if (v940 > 0xAAAAAAAAAAAAAAALL)
              sub_207CA420C();
            v941 = (char *)operator new(v939);
            v942 = 0;
            *((_QWORD *)v922 + 19) = v941;
            *v1778 = v941;
            *((_QWORD *)v922 + 21) = &v941[24 * v940];
            do
            {
              v943 = &v941[v942];
              v944 = v937 + v942;
              *(_QWORD *)v943 = 0;
              *((_QWORD *)v943 + 1) = 0;
              *((_QWORD *)v943 + 2) = 0;
              v946 = *(_BYTE **)(v937 + v942);
              v945 = *(_BYTE **)(v937 + v942 + 8);
              v947 = v945 - v946;
              if (v945 != v946)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v947 >> 2) > 0x1555555555555555)
                  sub_207CA420C();
                v948 = (char *)operator new(v947);
                *(_QWORD *)v943 = v948;
                *((_QWORD *)v943 + 1) = v948;
                *((_QWORD *)v943 + 2) = &v948[4 * (v947 >> 2)];
                memcpy(v948, v946, 12 * ((v947 - 12) / 0xCuLL) + 12);
                *((_QWORD *)v943 + 1) = &v948[12 * ((v947 - 12) / 0xCuLL) + 12];
              }
              v942 += 24;
            }
            while (v944 + 24 != v938);
            *v1778 = &v941[v942];
            v922 = v1795;
          }
          v949 = *((_OWORD *)v1802 + 11);
          v950 = *((_OWORD *)v1802 + 12);
          *((_QWORD *)v922 + 26) = *((_QWORD *)v1802 + 26);
          *((_OWORD *)v922 + 11) = v949;
          *((_OWORD *)v922 + 12) = v950;
          v951 = *((_QWORD *)v1802 + 27);
          v952 = *((_QWORD *)v1802 + 29);
          *((_QWORD *)v922 + 29) = v952;
          *((_QWORD *)v922 + 27) = v951;
          *((_QWORD *)v922 + 28) = 0;
          v1779 = (void **)(v922 + 224);
          v953 = v1788;
          if (v951)
          {
            memptr[0] = 0;
            v954 = malloc_type_posix_memalign(memptr, v952, v951, 0x1F88E90uLL);
            if (v954)
              sub_2081FBF78(v954, *((_QWORD *)v922 + 29), v951);
            *v1779 = memptr[0];
          }
          v955 = *((_OWORD *)v1802 + 15);
          *((_QWORD *)v922 + 32) = *((_QWORD *)v1802 + 32);
          *((_OWORD *)v922 + 15) = v955;
          v956 = *((_DWORD *)v1802 + 65) >> 2;
          v957 = (*(_QWORD *)(v1802 + 252) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
          v958 = *((_DWORD *)v1802 + 62);
          if (*((_DWORD *)v1802 + 60))
            v959 = *((_DWORD *)v1802 + 61) == 0;
          else
            v959 = 1;
          v960 = v959 || v958 == 0;
          v961 = *((_QWORD *)v1802 + 30);
          if (v960)
          {
            v961 = 0;
            v958 = 0;
          }
          *(_QWORD *)__src = *((_QWORD *)v1802 + 28);
          *(_QWORD *)&__src[8] = v961;
          *(_QWORD *)&__src[20] = v957;
          *(_DWORD *)&__src[16] = v958;
          *(_DWORD *)&__src[28] = v956;
          if (v958 * v956 == -1)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
            v963 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v963 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v964 = qword_2545309E8;
              for (m = qword_2545309F0; v964 != m; v964 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v964)(*(_QWORD *)(v964 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            }
            v966 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v966 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
LABEL_2517:
              abort();
            qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            LODWORD(v962) = *(_DWORD *)&__src[12];
            v958 = *(_DWORD *)&__src[16];
            if (!*(_DWORD *)&__src[8])
              goto LABEL_1432;
          }
          else
          {
            v962 = HIDWORD(v961);
            if (!(_DWORD)v961)
              goto LABEL_1432;
          }
          if (!(_DWORD)v962 || !v958)
            goto LABEL_1432;
          v967 = *(_QWORD *)(v922 + 252);
          v968 = *((_DWORD *)v922 + 62);
          if (*((_DWORD *)v922 + 60))
            v969 = *((_DWORD *)v922 + 61) == 0;
          else
            v969 = 1;
          v970 = *((_DWORD *)v922 + 65) >> 2;
          v971 = v969 || v968 == 0;
          v972 = (void *)*((_QWORD *)v922 + 30);
          if (v971)
          {
            v972 = 0;
            v968 = 0;
          }
          memptr[0] = *v1779;
          memptr[1] = v972;
          *(_QWORD *)((char *)&v1858 + 4) = (v967 >> 2) & 0x3FFFFFFF3FFFFFFFLL;
          LODWORD(v1858) = v968;
          HIDWORD(v1858) = v970;
          if (v968 * v970 == -1)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
            v975 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v975 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v976 = qword_2545309E8;
              for (n = qword_2545309F0; v976 != n; v976 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v976)(*(_QWORD *)(v976 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            }
            v978 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v978 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_2517;
            qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            v973 = DWORD1(v1858);
            v974 = *(unsigned int *)&__src[20];
            if (*(_DWORD *)&__src[20] != 1)
            {
LABEL_1361:
              if (*(_DWORD *)&__src[8] && *(_DWORD *)&__src[12] && *(_DWORD *)&__src[16])
              {
                v985 = *(_DWORD *)&__src[8] - 1;
                v986 = *(_DWORD *)&__src[12] - 1;
                v987 = *(unsigned int *)&__src[24];
                v988 = DWORD2(v1858);
                v989 = *(_DWORD **)__src;
                v990 = memptr[0];
                v991 = *(_DWORD *)&__src[16] - 1;
                if (*(_DWORD *)&__src[16] == 1)
                  goto LABEL_1375;
                v992 = HIDWORD(v1858);
                v993 = *(unsigned int *)&__src[28];
                if (*(_DWORD *)&__src[12] == 1)
                {
                  if (*(_DWORD *)&__src[8] == 1)
                  {
                    do
                    {
                      *v990 = *v989;
                      v989 += v993;
                      v990 += v992;
                      --v991;
                    }
                    while (v991);
                  }
                  else
                  {
                    v1030 = 0;
                    v1031 = 4 * *(unsigned int *)&__src[28];
                    v1032 = 4 * HIDWORD(v1858);
                    do
                    {
                      v1033 = v990;
                      v1034 = v989;
                      v1035 = v985;
                      do
                      {
                        *v1033 = *v1034;
                        v1034 += v974;
                        v1033 += v973;
                        --v1035;
                      }
                      while (v1035);
                      *v1033 = *v1034;
                      v989 = (_DWORD *)((char *)v989 + v1031);
                      v990 = (_DWORD *)((char *)v990 + v1032);
                      ++v1030;
                    }
                    while (v1030 != v991);
LABEL_1417:
                    v1036 = 4 * v974;
                    v1037 = 4 * v973;
                    do
                    {
                      *v990 = *v989;
                      v989 = (_DWORD *)((char *)v989 + v1036);
                      v990 = (_DWORD *)((char *)v990 + v1037);
                      --v985;
                    }
                    while (v985);
                  }
                }
                else
                {
                  v994 = 4 * *(unsigned int *)&__src[28];
                  v995 = 4 * *(unsigned int *)&__src[24];
                  v996 = 4 * HIDWORD(v1858);
                  v997 = 4 * DWORD2(v1858);
                  if (*(_DWORD *)&__src[8] == 1)
                  {
                    v1038 = 0;
                    do
                    {
                      v1039 = v990;
                      v1040 = v989;
                      v1041 = v986;
                      do
                      {
                        *v1039 = *v1040;
                        v1040 = (_DWORD *)((char *)v1040 + v995);
                        v1039 = (_DWORD *)((char *)v1039 + v997);
                        --v1041;
                      }
                      while (v1041);
                      *v1039 = *v1040;
                      v989 = (_DWORD *)((char *)v989 + v994);
                      v990 = (_DWORD *)((char *)v990 + v996);
                      ++v1038;
                    }
                    while (v1038 != v991);
                    goto LABEL_1424;
                  }
                  v998 = 0;
                  v999 = 4 * v974;
                  v1000 = 4 * v973;
                  v1001 = *(_QWORD *)__src + v995;
                  v1002 = (char *)memptr[0] + v997;
                  do
                  {
                    v1003 = 0;
                    v1004 = v1002;
                    v1005 = (_DWORD *)v1001;
                    v1006 = v990;
                    v1007 = v989;
                    do
                    {
                      v1008 = v1005;
                      v1009 = v1004;
                      v1010 = v1006;
                      v1011 = v1007;
                      v1012 = v985;
                      do
                      {
                        *v1010 = *v1011;
                        v1011 = (_DWORD *)((char *)v1011 + v999);
                        v1010 = (_DWORD *)((char *)v1010 + v1000);
                        --v1012;
                      }
                      while (v1012);
                      *v1010 = *v1011;
                      v1007 = (_DWORD *)((char *)v1007 + v995);
                      v1006 = (_DWORD *)((char *)v1006 + v997);
                      ++v1003;
                      v1005 = &v1008[(unint64_t)v995 / 4];
                      v1004 = &v1009[(unint64_t)v997 / 4];
                    }
                    while (v1003 != v986);
                    v1013 = v985;
                    do
                    {
                      *v1009 = *v1008;
                      v1008 = (_DWORD *)((char *)v1008 + v999);
                      v1009 = (_DWORD *)((char *)v1009 + v1000);
                      --v1013;
                    }
                    while (v1013);
                    *v1009 = *v1008;
                    v989 = (_DWORD *)((char *)v989 + v994);
                    v990 = (_DWORD *)((char *)v990 + v996);
                    ++v998;
                    v1001 += v994;
                    v1002 += v996;
                  }
                  while (v998 != v991);
LABEL_1375:
                  if (v986)
                  {
                    v953 = v1788;
                    if (v985)
                    {
                      v1014 = 0;
                      v1015 = 4 * v987;
                      v1016 = 4 * v988;
                      do
                      {
                        v1017 = v990;
                        v1018 = v989;
                        v1019 = v985;
                        do
                        {
                          *v1017 = *v1018;
                          v1018 += v974;
                          v1017 += v973;
                          --v1019;
                        }
                        while (v1019);
                        *v1017 = *v1018;
                        v989 = (_DWORD *)((char *)v989 + v1015);
                        v990 = (_DWORD *)((char *)v990 + v1016);
                        ++v1014;
                      }
                      while (v1014 != v986);
                      goto LABEL_1417;
                    }
                    do
                    {
LABEL_1424:
                      *v990 = *v989;
                      v989 += v987;
                      v990 += v988;
                      --v986;
                    }
                    while (v986);
                  }
                  else
                  {
                    v953 = v1788;
                    if (v985)
                      goto LABEL_1417;
                  }
                }
                *v990 = *v989;
                goto LABEL_1432;
              }
              goto LABEL_1432;
            }
          }
          else
          {
            v973 = v967 >> 2;
            v974 = *(unsigned int *)&__src[20];
            if (*(_DWORD *)&__src[20] != 1)
              goto LABEL_1361;
          }
          if (v973 != 1)
            goto LABEL_1361;
          if (*(_DWORD *)&__src[24] != DWORD2(v1858))
          {
            v979 = *(_DWORD *)&__src[12];
LABEL_1383:
            v1888 = (int8x16_t *)*(unsigned int *)&__src[8];
            if (*(_DWORD *)&__src[8] && v979 && *(_DWORD *)&__src[16])
              sub_207D5CB40((uint64_t *)&v1888, (char **)__src, (char **)memptr);
            goto LABEL_1432;
          }
          v979 = *(_DWORD *)&__src[12];
          if (*(_DWORD *)&__src[24] != *(_DWORD *)&__src[8])
            goto LABEL_1383;
          v980 = *(unsigned int *)&__src[28];
          v981 = HIDWORD(v1858);
          if (*(_DWORD *)&__src[28] != HIDWORD(v1858))
          {
            v982 = *(_DWORD *)&__src[16];
LABEL_1388:
            v1753 = (*(_DWORD *)&__src[12] * *(_DWORD *)&__src[24]);
            if (*(_DWORD *)&__src[24] && *(_DWORD *)&__src[12] && v982)
            {
              v1020 = *(char **)__src;
              v1021 = (char *)memptr[0];
              v1022 = 4 * v1753;
              v1023 = v982 - 1;
              if (v982 == 1)
              {
LABEL_1426:
                if (!(_DWORD)v1753 || v1020)
                {
                  if (!(_DWORD)v1753)
                    goto LABEL_1432;
                }
                else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_2517;
                }
                memmove(v1021, v1020, v1022);
              }
              else if ((_DWORD)v1753)
              {
                v1024 = 0;
                while (1)
                {
                  if (!v1020)
                  {
                    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                    v1025 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v1025 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    if (byte_254530A10)
                      v1026 = byte_254530A18 == 0;
                    else
                      v1026 = 0;
                    if (!v1026)
                    {
                      v1027 = qword_2545309E8;
                      for (ii = qword_2545309F0; v1027 != ii; v1027 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1027)(*(_QWORD *)(v1027 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                    }
                    v1029 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v1029 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    v953 = v1788;
                    if (!byte_254530A10)
                      goto LABEL_2517;
                    qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                  }
                  memmove(v1021, v1020, v1022);
                  v1020 += 4 * v980;
                  v1021 += 4 * v981;
                  if (++v1024 == v1023)
                    goto LABEL_1426;
                }
              }
            }
            goto LABEL_1432;
          }
          v982 = *(_DWORD *)&__src[16];
          if (*(_DWORD *)&__src[28] != *(_DWORD *)&__src[12] * *(_DWORD *)&__src[24])
            goto LABEL_1388;
          v983 = (*(_DWORD *)&__src[28] * *(_DWORD *)&__src[16]);
          v984 = *(const void **)__src;
          if (!(_DWORD)v983 || *(_QWORD *)__src)
          {
            if (!(_DWORD)v983)
              goto LABEL_1432;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_2517;
          }
          memmove(memptr[0], v984, 4 * v983);
LABEL_1432:
          v1042 = v1815;
          v1043 = *(_OWORD *)(v953 - 33);
          v1044 = *(_OWORD *)(v953 - 31);
          *(v1815 - 29) = *(v953 - 29);
          *(_OWORD *)(v1815 - 31) = v1044;
          *(_OWORD *)(v1815 - 33) = v1043;
          v1045 = *(v953 - 28);
          v1046 = *(v953 - 26);
          *(v1815 - 28) = v1045;
          *(v1815 - 27) = 0;
          *(v1815 - 26) = v1046;
          if (v1045)
          {
            memptr[0] = 0;
            v1047 = malloc_type_posix_memalign(memptr, v1046, v1045, 0x1F88E90uLL);
            if (v1047)
              sub_2081FBF78(v1047, *(v1815 - 26), v1045);
            v1042 = v1815;
            *(v1815 - 27) = memptr[0];
          }
          v1048 = *(_OWORD *)(v953 - 25);
          *(v1042 - 23) = *(v953 - 23);
          *(_OWORD *)(v1042 - 25) = v1048;
          v1049 = *((_DWORD *)v953 - 45) >> 2;
          v1050 = (*(_QWORD *)((char *)v953 - 188) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
          v1051 = *((_DWORD *)v953 - 48);
          if (*((_DWORD *)v953 - 50))
            v1052 = *((_DWORD *)v953 - 49) == 0;
          else
            v1052 = 1;
          v1053 = v1052 || v1051 == 0;
          v1054 = *(v953 - 25);
          if (v1053)
          {
            v1054 = 0;
            v1051 = 0;
          }
          *(_QWORD *)__src = *(v953 - 27);
          *(_QWORD *)&__src[8] = v1054;
          *(_QWORD *)&__src[20] = v1050;
          *(_DWORD *)&__src[16] = v1051;
          *(_DWORD *)&__src[28] = v1049;
          if (v1051 * v1049 == -1)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
            v1056 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v1056 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v1057 = qword_2545309E8;
              for (jj = qword_2545309F0; v1057 != jj; v1057 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1057)(*(_QWORD *)(v1057 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            }
            v1059 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v1059 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
LABEL_2516:
              abort();
            qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            LODWORD(v1055) = *(_DWORD *)&__src[12];
            v1051 = *(_DWORD *)&__src[16];
            if (!*(_DWORD *)&__src[8])
              goto LABEL_1555;
          }
          else
          {
            v1055 = HIDWORD(v1054);
            if (!(_DWORD)v1054)
              goto LABEL_1555;
          }
          if (!(_DWORD)v1055 || !v1051)
            goto LABEL_1555;
          v1060 = *(_QWORD *)((char *)v1815 - 188);
          v1061 = *((_DWORD *)v1815 - 45) >> 2;
          v1062 = *((_DWORD *)v1815 - 48);
          if (*((_DWORD *)v1815 - 50))
            v1063 = *((_DWORD *)v1815 - 49) == 0;
          else
            v1063 = 1;
          v1064 = v1063 || v1062 == 0;
          v1065 = (void *)*(v1815 - 25);
          if (v1064)
          {
            v1065 = 0;
            v1062 = 0;
          }
          memptr[0] = *((void **)v1815 - 27);
          memptr[1] = v1065;
          *(_QWORD *)((char *)&v1858 + 4) = (v1060 >> 2) & 0x3FFFFFFF3FFFFFFFLL;
          LODWORD(v1858) = v1062;
          HIDWORD(v1858) = v1061;
          if (v1062 * v1061 == -1)
          {
            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
            v1068 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v1068 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10 || byte_254530A18)
            {
              v1069 = qword_2545309E8;
              for (kk = qword_2545309F0; v1069 != kk; v1069 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1069)(*(_QWORD *)(v1069 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            }
            v1071 = atomic_load((unsigned __int8 *)&qword_254530A20);
            if ((v1071 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
            {
              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
              __cxa_guard_release(&qword_254530A20);
            }
            if (!byte_254530A10)
              goto LABEL_2516;
            qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            v1066 = DWORD1(v1858);
            v1067 = *(unsigned int *)&__src[20];
            if (*(_DWORD *)&__src[20] != 1)
            {
LABEL_1484:
              if (*(_DWORD *)&__src[8] && *(_DWORD *)&__src[12] && *(_DWORD *)&__src[16])
              {
                v1078 = *(_DWORD *)&__src[8] - 1;
                v1079 = *(_DWORD *)&__src[12] - 1;
                v1080 = *(unsigned int *)&__src[24];
                v1081 = DWORD2(v1858);
                v1082 = *(_DWORD **)__src;
                v1083 = memptr[0];
                v1084 = *(_DWORD *)&__src[16] - 1;
                if (*(_DWORD *)&__src[16] == 1)
                  goto LABEL_1498;
                v1085 = HIDWORD(v1858);
                v1086 = *(unsigned int *)&__src[28];
                if (*(_DWORD *)&__src[12] == 1)
                {
                  if (*(_DWORD *)&__src[8] == 1)
                  {
                    do
                    {
                      *v1083 = *v1082;
                      v1082 += v1086;
                      v1083 += v1085;
                      --v1084;
                    }
                    while (v1084);
                  }
                  else
                  {
                    v1123 = 0;
                    v1124 = 4 * *(unsigned int *)&__src[28];
                    v1125 = 4 * HIDWORD(v1858);
                    do
                    {
                      v1126 = v1083;
                      v1127 = v1082;
                      v1128 = v1078;
                      do
                      {
                        *v1126 = *v1127;
                        v1127 += v1067;
                        v1126 += v1066;
                        --v1128;
                      }
                      while (v1128);
                      *v1126 = *v1127;
                      v1082 = (_DWORD *)((char *)v1082 + v1124);
                      v1083 = (_DWORD *)((char *)v1083 + v1125);
                      ++v1123;
                    }
                    while (v1123 != v1084);
LABEL_1540:
                    v1129 = 4 * v1067;
                    v1130 = 4 * v1066;
                    do
                    {
                      *v1083 = *v1082;
                      v1082 = (_DWORD *)((char *)v1082 + v1129);
                      v1083 = (_DWORD *)((char *)v1083 + v1130);
                      --v1078;
                    }
                    while (v1078);
                  }
                }
                else
                {
                  if (*(_DWORD *)&__src[8] == 1)
                  {
                    v1131 = 0;
                    v1132 = 4 * *(unsigned int *)&__src[28];
                    v1133 = 4 * HIDWORD(v1858);
                    v1134 = 4 * DWORD2(v1858);
                    do
                    {
                      v1135 = v1083;
                      v1136 = v1082;
                      v1137 = v1079;
                      do
                      {
                        *v1135 = *v1136;
                        v1136 += v1080;
                        v1135 = (_DWORD *)((char *)v1135 + v1134);
                        --v1137;
                      }
                      while (v1137);
                      *v1135 = *v1136;
                      v1082 = (_DWORD *)((char *)v1082 + v1132);
                      v1083 = (_DWORD *)((char *)v1083 + v1133);
                      ++v1131;
                    }
                    while (v1131 != v1084);
                    goto LABEL_1547;
                  }
                  v1087 = 0;
                  v1088 = 4 * *(unsigned int *)&__src[28];
                  v1089 = 4 * *(unsigned int *)&__src[24];
                  v1090 = 4 * v1067;
                  v1091 = 4 * HIDWORD(v1858);
                  v1092 = 4 * DWORD2(v1858);
                  v1093 = *(_QWORD *)__src + v1089;
                  v1094 = (char *)memptr[0] + v1092;
                  v1095 = 4 * v1066;
                  do
                  {
                    v1096 = 0;
                    v1097 = v1094;
                    v1098 = (_DWORD *)v1093;
                    v1099 = v1083;
                    v1100 = v1082;
                    do
                    {
                      v1101 = v1098;
                      v1102 = v1097;
                      v1103 = v1099;
                      v1104 = v1100;
                      v1105 = v1078;
                      do
                      {
                        *v1103 = *v1104;
                        v1104 = (_DWORD *)((char *)v1104 + v1090);
                        v1103 = (_DWORD *)((char *)v1103 + v1095);
                        --v1105;
                      }
                      while (v1105);
                      *v1103 = *v1104;
                      v1100 = (_DWORD *)((char *)v1100 + v1089);
                      v1099 = (_DWORD *)((char *)v1099 + v1092);
                      ++v1096;
                      v1098 = &v1101[(unint64_t)v1089 / 4];
                      v1097 = &v1102[(unint64_t)v1092 / 4];
                    }
                    while (v1096 != v1079);
                    v1106 = v1078;
                    do
                    {
                      *v1102 = *v1101;
                      v1101 = (_DWORD *)((char *)v1101 + v1090);
                      v1102 = (_DWORD *)((char *)v1102 + v1095);
                      --v1106;
                    }
                    while (v1106);
                    *v1102 = *v1101;
                    v1082 = (_DWORD *)((char *)v1082 + v1088);
                    v1083 = (_DWORD *)((char *)v1083 + v1091);
                    ++v1087;
                    v1093 += v1088;
                    v1094 += v1091;
                  }
                  while (v1087 != v1084);
LABEL_1498:
                  if (v1079)
                  {
                    v953 = v1788;
                    if (v1078)
                    {
                      v1107 = 0;
                      v1108 = 4 * v1080;
                      v1109 = 4 * v1081;
                      do
                      {
                        v1110 = v1083;
                        v1111 = v1082;
                        v1112 = v1078;
                        do
                        {
                          *v1110 = *v1111;
                          v1111 += v1067;
                          v1110 += v1066;
                          --v1112;
                        }
                        while (v1112);
                        *v1110 = *v1111;
                        v1082 = (_DWORD *)((char *)v1082 + v1108);
                        v1083 = (_DWORD *)((char *)v1083 + v1109);
                        ++v1107;
                      }
                      while (v1107 != v1079);
                      goto LABEL_1540;
                    }
                    do
                    {
LABEL_1547:
                      *v1083 = *v1082;
                      v1082 += v1080;
                      v1083 += v1081;
                      --v1079;
                    }
                    while (v1079);
                  }
                  else
                  {
                    v953 = v1788;
                    if (v1078)
                      goto LABEL_1540;
                  }
                }
                *v1083 = *v1082;
                goto LABEL_1555;
              }
              goto LABEL_1555;
            }
          }
          else
          {
            v1066 = v1060 >> 2;
            v1067 = *(unsigned int *)&__src[20];
            if (*(_DWORD *)&__src[20] != 1)
              goto LABEL_1484;
          }
          if (v1066 != 1)
            goto LABEL_1484;
          if (*(_DWORD *)&__src[24] != DWORD2(v1858))
          {
            v1072 = *(_DWORD *)&__src[12];
LABEL_1506:
            v1888 = (int8x16_t *)*(unsigned int *)&__src[8];
            if (*(_DWORD *)&__src[8] && v1072 && *(_DWORD *)&__src[16])
              sub_207D5CB40((uint64_t *)&v1888, (char **)__src, (char **)memptr);
            goto LABEL_1555;
          }
          v1072 = *(_DWORD *)&__src[12];
          if (*(_DWORD *)&__src[24] != *(_DWORD *)&__src[8])
            goto LABEL_1506;
          v1073 = *(unsigned int *)&__src[28];
          v1074 = HIDWORD(v1858);
          if (*(_DWORD *)&__src[28] != HIDWORD(v1858))
          {
            v1075 = *(_DWORD *)&__src[16];
LABEL_1511:
            v1754 = (*(_DWORD *)&__src[12] * *(_DWORD *)&__src[24]);
            if (*(_DWORD *)&__src[24] && *(_DWORD *)&__src[12] && v1075)
            {
              v1113 = *(char **)__src;
              v1114 = (char *)memptr[0];
              v1115 = 4 * v1754;
              v1116 = v1075 - 1;
              if (v1075 == 1)
              {
LABEL_1549:
                if (!(_DWORD)v1754 || v1113)
                {
                  if (!(_DWORD)v1754)
                    goto LABEL_1555;
                }
                else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_2516;
                }
                memmove(v1114, v1113, v1115);
              }
              else if ((_DWORD)v1754)
              {
                v1117 = 0;
                while (1)
                {
                  if (!v1113)
                  {
                    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                    v1118 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v1118 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    if (byte_254530A10)
                      v1119 = byte_254530A18 == 0;
                    else
                      v1119 = 0;
                    if (!v1119)
                    {
                      v1120 = qword_2545309E8;
                      for (mm = qword_2545309F0; v1120 != mm; v1120 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1120)(*(_QWORD *)(v1120 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                    }
                    v1122 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v1122 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    v953 = v1788;
                    if (!byte_254530A10)
                      goto LABEL_2516;
                    qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                  }
                  memmove(v1114, v1113, v1115);
                  v1113 += 4 * v1073;
                  v1114 += 4 * v1074;
                  if (++v1117 == v1116)
                    goto LABEL_1549;
                }
              }
            }
            goto LABEL_1555;
          }
          v1075 = *(_DWORD *)&__src[16];
          if (*(_DWORD *)&__src[28] != *(_DWORD *)&__src[12] * *(_DWORD *)&__src[24])
            goto LABEL_1511;
          v1076 = (*(_DWORD *)&__src[28] * *(_DWORD *)&__src[16]);
          v1077 = *(const void **)__src;
          if (!(_DWORD)v1076 || *(_QWORD *)__src)
          {
            if (!(_DWORD)v1076)
              goto LABEL_1555;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_2516;
          }
          memmove(memptr[0], v1077, 4 * v1076);
LABEL_1555:
          v1138 = v1815;
          *((_DWORD *)v1815 - 44) = *((_DWORD *)v953 - 44);
          v1139 = *(_OWORD *)((char *)v953 - 172);
          v1140 = *(_OWORD *)((char *)v953 - 156);
          *((_DWORD *)v1815 - 35) = *((_DWORD *)v953 - 35);
          *(_OWORD *)((char *)v1815 - 156) = v1140;
          *(_OWORD *)((char *)v1815 - 172) = v1139;
          v1141 = *(_OWORD *)(v953 - 17);
          v1142 = *(_OWORD *)(v953 - 15);
          v1143 = *(_OWORD *)(v953 - 13);
          v1144 = *(_OWORD *)(v953 - 11);
          *(v1815 - 9) = 0;
          v1145 = v1815 - 9;
          *(_OWORD *)(v1815 - 13) = v1143;
          *(_OWORD *)(v1815 - 11) = v1144;
          *(_OWORD *)(v1815 - 17) = v1141;
          *(_OWORD *)(v1815 - 15) = v1142;
          v1145[1] = 0;
          v1145[2] = 0;
          v1147 = (_BYTE *)*(v953 - 9);
          v1146 = (_BYTE *)*(v953 - 8);
          v1148 = v1146 - v1147;
          if (v1146 != v1147)
          {
            if (v1148 < 0)
              sub_207CA420C();
            v1149 = (char *)operator new(v1146 - v1147);
            v1138 = v1815;
            *(v1815 - 9) = v1149;
            *(v1815 - 8) = v1149;
            v1150 = &v1149[8 * (v1148 >> 3)];
            *(v1815 - 7) = v1150;
            memcpy(v1149, v1147, v1148);
            *(v1815 - 8) = v1150;
          }
          *(v1138 - 6) = 0;
          *(v1138 - 5) = 0;
          *(v1138 - 4) = 0;
          v1152 = (_BYTE *)*(v953 - 6);
          v1151 = (_BYTE *)*(v953 - 5);
          v1153 = v1151 - v1152;
          if (v1151 != v1152)
          {
            if (v1153 < 0)
              sub_207CA420C();
            v1154 = (char *)operator new(v1151 - v1152);
            v1138 = v1815;
            *(v1815 - 6) = v1154;
            *(v1815 - 5) = v1154;
            *(v1815 - 4) = &v1154[8 * (v1153 >> 3)];
            v1155 = v1153 & 0xFFFFFFFFFFFFFFF8;
            memcpy(v1154, v1152, v1155);
            *(v1815 - 5) = &v1154[v1155];
          }
          *(v1138 - 3) = 0;
          *(v1138 - 2) = 0;
          *(v1138 - 1) = 0;
          v1157 = (_BYTE *)*(v953 - 3);
          v1156 = (_BYTE *)*(v953 - 2);
          v1158 = v1156 - v1157;
          if (v1156 != v1157)
          {
            if (v1158 < 0)
              sub_207CA420C();
            v1159 = (char *)operator new(v1156 - v1157);
            *(v1815 - 3) = v1159;
            *(v1815 - 2) = v1159;
            v1160 = &v1159[8 * (v1158 >> 3)];
            *(v1815 - 1) = v1160;
            memcpy(v1159, v1157, v1158);
            *(v1815 - 2) = v1160;
          }
          v1767 -= 528;
          v883 = v1802;
          v882 = v1795;
        }
        while (v1802 != v1740);
        v883 = v1870[1];
        v1161 = v1870[2];
        v1870[1] = v1795;
        v1870[2] = v1713 + 528;
        for (v1870[3] = v1712; v1161 != v883; v1161 = sub_207D441B8(v1161 - 66))
          ;
        if (v883)
LABEL_1595:
          operator delete(v883);
LABEL_1596:
        v1870[2] = v1713 + 528;
        if ((_QWORD)v1853)
        {
          *((_QWORD *)&v1853 + 1) = v1853;
          operator delete((void *)v1853);
        }
LABEL_1598:
        if (v1852[1])
        {
          v1852[2] = v1852[1];
          operator delete((void *)v1852[1]);
        }
        if ((_QWORD)__dst)
        {
          *((_QWORD *)&__dst + 1) = __dst;
          operator delete((void *)__dst);
        }
        if (v1839)
          free(v1839);
        v1839 = 0;
        if (v1833)
          free(v1833);
        v1833 = 0;
        v1162 = *(_QWORD *)&v1830[8];
        if (*(_QWORD *)&v1830[8])
        {
          v1163 = *(_QWORD *)&v1830[16];
          v1164 = *(void **)&v1830[8];
          if (*(_QWORD *)&v1830[16] != *(_QWORD *)&v1830[8])
          {
            v1165 = *(_QWORD *)&v1830[16];
            do
            {
              v1167 = *(void **)(v1165 - 24);
              v1165 -= 24;
              v1166 = v1167;
              if (v1167)
              {
                *(_QWORD *)(v1163 - 16) = v1166;
                operator delete(v1166);
              }
              v1163 = v1165;
            }
            while (v1165 != v1162);
            v1164 = *(void **)&v1830[8];
          }
          *(_QWORD *)&v1830[16] = v1162;
          operator delete(v1164);
        }
        *(_QWORD *)&__p[8] = &off_24C072BC8;
        if ((_QWORD)v1829)
        {
          *((_QWORD *)&v1829 + 1) = v1829;
          operator delete((void *)v1829);
        }
        v1168 = (std::__shared_weak_count *)*((_QWORD *)&v1828 + 1);
        if (!*((_QWORD *)&v1828 + 1))
          goto LABEL_1620;
        v1169 = (unint64_t *)(*((_QWORD *)&v1828 + 1) + 8);
        do
          v1170 = __ldaxr(v1169);
        while (__stlxr(v1170 - 1, v1169));
        if (!v1170)
        {
          ((void (*)(std::__shared_weak_count *))v1168->__on_zero_shared)(v1168);
          std::__shared_weak_count::__release_weak(v1168);
          v1171 = *(std::__shared_weak_count **)&v1827[16];
          if (*(_QWORD *)&v1827[16])
          {
LABEL_1621:
            v1172 = (unint64_t *)&v1171->__shared_owners_;
            do
              v1173 = __ldaxr(v1172);
            while (__stlxr(v1173 - 1, v1172));
            if (!v1173)
            {
              ((void (*)(std::__shared_weak_count *))v1171->__on_zero_shared)(v1171);
              std::__shared_weak_count::__release_weak(v1171);
            }
          }
        }
        else
        {
LABEL_1620:
          v1171 = *(std::__shared_weak_count **)&v1827[16];
          if (*(_QWORD *)&v1827[16])
            goto LABEL_1621;
        }
        v633 = v1734 + 1;
        v634 = v1695 * a3;
        if (v1734 + 1 == a3)
        {
          v1174 = v1695 * a3;
          goto LABEL_1643;
        }
      }
      if (0x8E38E38E38E38E39 * ((v638 - v637) >> 4) <= v635)
        sub_207CBA8AC();
      v1799 = v636;
      v639 = v637 + 144 * v635;
      v1812 = *(void **)(v639 + 88);
      memptr[0] = v1812;
      v640 = *(unint64_t **)(v639 + 96);
      memptr[1] = v640;
      if (v640)
      {
        v641 = v640 + 1;
        do
          v642 = __ldxr(v641);
        while (__stxr(v642 + 1, v641));
      }
      v643 = v637 + 144 * v635;
      v645 = *(_QWORD *)(v643 + 32);
      v644 = *(_QWORD *)(v643 + 40);
      v646 = *(_QWORD *)(v643 + 48);
      v647 = *(_QWORD *)(v643 + 16);
      v648 = *(_QWORD *)(v643 + 24);
      v649 = *(unsigned __int8 *)(v639 + 8);
      if (*(_BYTE *)(v639 + 8))
        v650 = *(_QWORD *)(v643 + 32);
      else
        v650 = 0;
      if (v648 + v647 * v645 + v650 > v644)
      {
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_208216974);
        v1792 = v648;
        v651 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v651 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v652 = qword_2545309E8;
          for (nn = qword_2545309F0; v652 != nn; v652 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v652)(*(_QWORD *)(v652 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
        }
        v654 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v654 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        v648 = v1792;
        if (!byte_254530A10)
          abort();
        qword_254530A00(*(_QWORD *)algn_254530A08, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
      }
      memptr[1] = 0;
      memptr[0] = 0;
      v655 = *(std::__shared_weak_count **)&v1827[16];
      *(_QWORD *)&v1827[8] = v1812;
      *(_QWORD *)&v1827[16] = v640;
      if (v655)
      {
        v656 = (unint64_t *)&v655->__shared_owners_;
        do
          v657 = __ldaxr(v656);
        while (__stlxr(v657 - 1, v656));
        if (!v657)
        {
          ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
          std::__shared_weak_count::__release_weak(v655);
        }
      }
      __p[16] = v649;
      *(_QWORD *)&__p[40] = v645;
      *(_QWORD *)&__p[48] = v644;
      *(_QWORD *)&__p[56] = v646;
      *(_QWORD *)&__p[32] = v648;
      *(_QWORD *)&__p[24] = v647;
      v658 = *(_QWORD *)(v643 + 72);
      v1827[0] = *(_BYTE *)(v643 + 80);
      *(_QWORD *)&__p[80] = v658;
      *(_QWORD *)&__p[72] = v647 + v649;
      *(_QWORD *)&__p[64] = v647 + v649 + v648;
      v659 = (char *)*((_QWORD *)&v1829 + 1);
      v660 = (char *)v1829;
      v661 = *((_QWORD *)&v1829 + 1) - v1829;
      v662 = (uint64_t)(*((_QWORD *)&v1829 + 1) - v1829) >> 3;
      v663 = v646 - v662;
      if (v646 <= v662)
      {
        v636 = v1799;
        if (v646 < v662)
          *((_QWORD *)&v1829 + 1) = v1829 + 8 * v646;
        if (v646)
          goto LABEL_1060;
      }
      else
      {
        if (v663 <= (uint64_t)(*(_QWORD *)v1830 - *((_QWORD *)&v1829 + 1)) >> 3)
        {
          bzero(*((void **)&v1829 + 1), 8 * v663);
          *((_QWORD *)&v1829 + 1) = &v659[8 * v663];
          v636 = v1799;
        }
        else
        {
          if (v646 >> 61)
            sub_207CA420C();
          v664 = (uint64_t)(*(_QWORD *)v1830 - v1829) >> 2;
          if (v664 <= v646)
            v664 = v646;
          if (*(_QWORD *)v1830 - (_QWORD)v1829 >= 0x7FFFFFFFFFFFFFF8uLL)
            v665 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v665 = v664;
          if (v665 >> 61)
            sub_207CA3AB8();
          v666 = operator new(8 * v665);
          v667 = &v666[8 * v662];
          bzero(v667, 8 * v663);
          v668 = (char *)(v659 - v660);
          if (v659 == v660)
          {
            v670 = v667;
            goto LABEL_1049;
          }
          v669 = v668 - 8;
          if ((unint64_t)(v668 - 8) < 0x58)
          {
            v670 = v667;
            goto LABEL_1055;
          }
          v670 = v667;
          if ((unint64_t)(&v659[-v661] - v666) < 0x20)
            goto LABEL_1055;
          v672 = ((unint64_t)v669 >> 3) + 1;
          v673 = 8 * (v672 & 0x3FFFFFFFFFFFFFFCLL);
          v674 = &v659[-v673];
          v670 = &v667[-v673];
          v675 = &v666[v661 - 16];
          v676 = v659 - 16;
          v677 = v672 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v678 = *(_OWORD *)v676;
            *(v675 - 1) = *((_OWORD *)v676 - 1);
            *v675 = v678;
            v675 -= 2;
            v676 -= 32;
            v677 -= 4;
          }
          while (v677);
          v659 = v674;
          if (v672 == (v672 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v659 = v660;
LABEL_1049:
            v671 = 8 * v663;
          }
          else
          {
LABEL_1055:
            v671 = 8 * v663;
            do
            {
              v679 = *((_QWORD *)v659 - 1);
              v659 -= 8;
              *((_QWORD *)v670 - 1) = v679;
              v670 -= 8;
            }
            while (v659 != v660);
            v659 = v660;
          }
          *(_QWORD *)&v1829 = v670;
          *((_QWORD *)&v1829 + 1) = &v667[v671];
          *(_QWORD *)v1830 = &v666[8 * v665];
          v636 = v1799;
          if (v659)
            operator delete(v659);
        }
LABEL_1060:
        v680 = 0;
        v681 = 0;
        do
        {
          *(_QWORD *)(v1829 + 8 * v681++) = *(_QWORD *)&v1827[8] + v680;
          v680 += v644;
        }
        while (v646 != v681);
      }
      v682 = (std::__shared_weak_count *)memptr[1];
      if (memptr[1])
      {
        v683 = (unint64_t *)((char *)memptr[1] + 8);
        do
          v684 = __ldaxr(v683);
        while (__stlxr(v684 - 1, v683));
        if (!v684)
        {
          ((void (*)(std::__shared_weak_count *))v682->__on_zero_shared)(v682);
          std::__shared_weak_count::__release_weak(v682);
        }
      }
      v633 = v1734;
      goto LABEL_1068;
    }
    v1174 = 0;
LABEL_1643:
    v1789 = *(_QWORD *)(a2 + 432);
    v1175 = v1695;
    v1744 = v1174;
    if (v1789 <= 1)
      v1175 = v1174;
    v1780 = v1175;
    v1176 = v1867;
    if (v1867 != &v1868)
    {
      v1177 = a3;
      if (v1789 > 1)
        v1177 = 1;
      v1694 = v1177;
      if (v1177 <= 1)
        v1177 = 1;
      v1733 = v1177;
      do
      {
        v1178 = (unint64_t *)(v1176 + 4);
        v1179 = (uint64_t **)*((unsigned __int8 *)v1176 + 55);
        v1180 = (char)v1179;
        v1181 = v1176[5];
        if ((char)v1179 >= 0)
          v1182 = (uint64_t **)*((unsigned __int8 *)v1176 + 55);
        else
          v1182 = v1176[5];
        v1183 = v1176;
        v1796 = v1176;
        v1735 = (unint64_t *)(v1176 + 4);
        if (v1182 == (uint64_t **)11)
        {
          v1184 = (_QWORD *)*v1178;
          if ((char)v1179 >= 0)
            v1184 = v1176 + 4;
          if (*v1184 == 0x696F5079654B4433 && *(_QWORD *)((char *)v1184 + 3) == 0x73746E696F507965)
          {
            if (v1694)
              goto LABEL_1673;
          }
          else
          {
            if (*v1184 ^ 0x746E696F5079654BLL | *(_QWORD *)((char *)v1184 + 3) ^ 0x443373746E696F50)
              v1186 = 1;
            else
              v1186 = v1694 == 0;
            if (!v1186)
            {
LABEL_1673:
              v1189 = 0;
              v1762 = (uint64_t *)(v1176 + 19);
              v1755 = (uint64_t *)(v1176 + 12);
              do
              {
                v1190 = *a5 + 328 * (v1189 + v1744);
                v1191 = *(float *)v1190;
                v1816 = *(float *)(v1190 + 4);
                v1192 = operator new(0x18uLL);
                *v1192 = 0;
                v1192[1] = 0;
                v1192[2] = 0;
                v1193 = *(_QWORD *)(a2 + 392);
                v1803 = *(_QWORD *)(a2 + 384);
                if (v1789 <= 1)
                  v1194 = v1189;
                else
                  v1194 = 0;
                v1768 = v1194;
                if (((_BYTE)v1183[13] & 0x40) == 0)
                {
                  sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_208216974);
                  v1195 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1195 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10 || byte_254530A18)
                  {
                    v1196 = qword_2545309E8;
                    for (i1 = qword_2545309F0; v1196 != i1; v1196 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1196)(*(_QWORD *)(v1196 + 8), "format.Contains(FormatFlags::FLOAT32)", 37, "The DataView does not contain float data", 40);
                  }
                  v1198 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1198 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10)
LABEL_2514:
                    abort();
                  qword_254530A00(*(_QWORD *)algn_254530A08, "format.Contains(FormatFlags::FLOAT32)", 37, "The DataView does not contain float data", 40);
                }
                v1199 = v1755;
                if (*((_BYTE *)v1183 + 168))
                {
                  v1199 = v1762;
                  if (*((_BYTE *)v1183 + 164))
                  {
                    v1199 = v1762;
                    if (*v1762)
                    {
                      v1200 = v1183[15];
                      v1201 = (std::__shared_weak_count *)v1183[16];
                      if (v1201)
                      {
                        v1202 = (unint64_t *)&v1201->__shared_owners_;
                        do
                          v1203 = __ldxr(v1202);
                        while (__stxr(v1203 + 1, v1202));
                        do
                          v1204 = __ldaxr(v1202);
                        while (__stlxr(v1204 - 1, v1202));
                        if (!v1204)
                        {
                          ((void (*)(std::__shared_weak_count *))v1201->__on_zero_shared)(v1201);
                          std::__shared_weak_count::__release_weak(v1201);
                        }
                      }
                      ((void (*)(uint64_t **, _QWORD, const char *))(*v1200)[11])(v1200, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                      v1199 = v1762;
                    }
                  }
                }
                v1205 = 0;
                v1206 = 0;
                v1207 = *(float32x4_t *)(v1183 + 7);
                if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32((int32x4_t)v1207))) & 1) != 0)
                {
                  v1209 = *v1199;
                  v1211 = *((_DWORD *)v1183 + 22);
                  v1210 = *((_DWORD *)v1183 + 23);
                }
                else
                {
                  v1208 = 0;
                  if (*((_DWORD *)v1183 + 18))
                  {
                    v1205 = *(unint64_t *)((char *)v1183 + 60);
                    v1206 = HIDWORD(*(_OWORD *)(v1183 + 7));
                    v1208 = *((_DWORD *)v1183 + 18);
                  }
                  v1209 = *v1199;
                  v1211 = *((_DWORD *)v1183 + 22);
                  v1210 = *((_DWORD *)v1183 + 23);
                  if (v1208 * v1210 == -1)
                  {
                    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                    v1212 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v1212 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    if (!byte_254530A10 || byte_254530A18)
                    {
                      v1213 = qword_2545309E8;
                      for (i2 = qword_2545309F0; v1213 != i2; v1213 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1213)(*(_QWORD *)(v1213 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                    }
                    v1215 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v1215 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    v1183 = v1796;
                    if (!byte_254530A10)
                      goto LABEL_2514;
                    qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                  }
                }
                if (v1206)
                  v1216 = (_DWORD)v1205 == 0;
                else
                  v1216 = 1;
                if (v1216 || HIDWORD(v1205) == 0)
                  v1218 = 0;
                else
                  v1218 = v1206;
                if (v1218 * v1211 == -1)
                {
                  sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                  v1219 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1219 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10 || byte_254530A18)
                  {
                    v1220 = qword_2545309E8;
                    for (i3 = qword_2545309F0; v1220 != i3; v1220 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1220)(*(_QWORD *)(v1220 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                  }
                  v1222 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1222 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10)
                    goto LABEL_2514;
                  qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                }
                v1223 = v1193 + v1803;
                if (v1193 + v1803)
                {
                  v1224 = 0;
                  v1225 = v1209 + 4 * (v1210 * (v1768 + v1780));
                  v1226 = (char *)v1192[1];
                  do
                  {
                    v1228 = v1225 + 12 * v1224;
                    v1207.i64[0] = *(_QWORD *)v1228;
                    v1207.i32[2] = *(_DWORD *)(v1228 + 8);
                    v1229 = vmulq_n_f32(v1207, v1816);
                    v1229.f32[2] = v1191 + v1229.f32[2];
                    v1230 = v1192[2];
                    if ((unint64_t)v1226 < v1230)
                    {
                      *((_DWORD *)v1226 + 2) = v1229.i32[2];
                      *(_QWORD *)v1226 = v1229.i64[0];
                      v1227 = v1226 + 12;
                    }
                    else
                    {
                      v1231 = (char *)*v1192;
                      v1232 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v1226[-*v1192] >> 2);
                      v1233 = v1232 + 1;
                      if (v1232 + 1 > 0x1555555555555555)
                        sub_207CA420C();
                      v1234 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1230 - (_QWORD)v1231) >> 2);
                      if (2 * v1234 > v1233)
                        v1233 = 2 * v1234;
                      if (v1234 >= 0xAAAAAAAAAAAAAAALL)
                        v1235 = 0x1555555555555555;
                      else
                        v1235 = v1233;
                      if (v1235)
                      {
                        if (v1235 > 0x1555555555555555)
                          sub_207CA3AB8();
                        v1804 = v1229;
                        v1236 = (char *)operator new(12 * v1235);
                        v1229 = v1804;
                      }
                      else
                      {
                        v1236 = 0;
                      }
                      v1237 = &v1236[12 * v1232];
                      *(_QWORD *)v1237 = v1229.i64[0];
                      *((_DWORD *)v1237 + 2) = v1229.i32[2];
                      v1238 = v1237;
                      if (v1226 != v1231)
                      {
                        do
                        {
                          v1239 = *(_QWORD *)(v1226 - 12);
                          v1226 -= 12;
                          v1240 = *((_DWORD *)v1226 + 2);
                          *(_QWORD *)(v1238 - 12) = v1239;
                          v1238 -= 12;
                          *((_DWORD *)v1238 + 2) = v1240;
                        }
                        while (v1226 != v1231);
                        v1226 = (char *)*v1192;
                      }
                      v1227 = v1237 + 12;
                      *v1192 = v1238;
                      v1192[1] = v1237 + 12;
                      v1192[2] = &v1236[12 * v1235];
                      if (v1226)
                        operator delete(v1226);
                    }
                    v1192[1] = v1227;
                    ++v1224;
                    v1226 = v1227;
                  }
                  while (v1224 != v1223);
                }
                sub_207D95628((uint64_t)v1870[1] + 528 * v1189 + 152, (char **)v1192, (uint64_t)(v1192 + 3), 1uLL);
                v1241 = (char *)*v1192;
                if (*v1192)
                {
                  v1192[1] = v1241;
                  operator delete(v1241);
                }
                operator delete(v1192);
                ++v1189;
              }
              while (v1189 != v1733);
              v1179 = (uint64_t **)*((unsigned __int8 *)v1183 + 55);
              v1181 = v1183[5];
              v1180 = *((_BYTE *)v1183 + 55);
              v1178 = v1735;
              v1187 = v1180;
              if (v1180 >= 0)
                v1242 = (uint64_t **)*((unsigned __int8 *)v1183 + 55);
              else
                v1242 = v1183[5];
              if (v1242 != (uint64_t **)12)
                goto LABEL_2018;
              goto LABEL_1766;
            }
          }
        }
        v1187 = (char)v1179;
        if ((char)v1179 >= 0)
          v1188 = (uint64_t **)*((unsigned __int8 *)v1176 + 55);
        else
          v1188 = v1176[5];
        if (v1188 != (uint64_t **)12)
          goto LABEL_2018;
LABEL_1766:
        if (v1187 >= 0)
          v1243 = v1178;
        else
          v1243 = (unint64_t *)*v1178;
        if (a3 && !(*v1243 ^ 0x61746E656D676553 | *((unsigned int *)v1243 + 2) ^ 0x6E6F6974))
        {
          v1244 = 0;
          v1736 = (uint64_t *)(v1183 + 19);
          v1729 = (size_t)(v1183 + 12);
          while (1)
          {
            v1245 = *(_QWORD *)(a2 + 544);
            v1246 = *(_QWORD *)(a2 + 352);
            v1817 = *(_QWORD *)(a2 + 360);
            if (v1789 <= 1)
              v1247 = v1244;
            else
              v1247 = 0;
            v1805 = v1247;
            if (v1789 <= 1)
              v1248 = 0;
            else
              v1248 = v1244;
            if (((_BYTE)v1796[13] & 0x40) == 0)
            {
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_208216974);
              v1249 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1249 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v1250 = qword_2545309E8;
                for (i4 = qword_2545309F0; v1250 != i4; v1250 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1250)(*(_QWORD *)(v1250 + 8), "format.Contains(FormatFlags::FLOAT32)", 37, "The DataView does not contain float data", 40);
              }
              v1252 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1252 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
LABEL_2511:
                abort();
              qword_254530A00(*(_QWORD *)algn_254530A08, "format.Contains(FormatFlags::FLOAT32)", 37, "The DataView does not contain float data", 40);
            }
            v1253 = (uint64_t *)v1729;
            if (*((_BYTE *)v1796 + 168))
            {
              v1253 = v1736;
              if (*((_BYTE *)v1796 + 164))
              {
                v1253 = v1736;
                if (*v1736)
                {
                  v1254 = v1796[15];
                  v1255 = (std::__shared_weak_count *)v1796[16];
                  if (v1255)
                  {
                    v1256 = (unint64_t *)&v1255->__shared_owners_;
                    do
                      v1257 = __ldxr(v1256);
                    while (__stxr(v1257 + 1, v1256));
                    do
                      v1258 = __ldaxr(v1256);
                    while (__stlxr(v1258 - 1, v1256));
                    if (!v1258)
                    {
                      ((void (*)(std::__shared_weak_count *))v1255->__on_zero_shared)(v1255);
                      std::__shared_weak_count::__release_weak(v1255);
                    }
                  }
                  ((void (*)(uint64_t **, _QWORD, const char *))(*v1254)[11])(v1254, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                  v1253 = v1736;
                }
              }
            }
            v1259 = 0;
            v1260 = 0;
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1796 + 7)))) & 1) == 0
              && *((_DWORD *)v1796 + 18))
            {
              v1260 = *(unint64_t *)((char *)v1796 + 60);
              v1259 = *((_DWORD *)v1796 + 18);
            }
            v1261 = *v1253;
            v1262 = v1796[10];
            v1263 = *((_DWORD *)v1796 + 22);
            v1264 = *((_DWORD *)v1796 + 23);
            if (v1259 * v1264 == -1)
            {
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
              v1769 = v1245;
              v1265 = v1244;
              v1266 = v1248;
              v1267 = v1246;
              v1268 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1268 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v1270 = qword_2545309E8;
                for (i5 = qword_2545309F0; v1270 != i5; v1270 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1270)(*(_QWORD *)(v1270 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              }
              v1271 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1271 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              v1246 = v1267;
              v1248 = v1266;
              v1244 = v1265;
              v1245 = v1769;
              if (!byte_254530A10)
                goto LABEL_2511;
              qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            }
            v1272 = HIDWORD(v1260);
            if ((_DWORD)v1260)
              v1273 = v1272 == 0;
            else
              v1273 = 1;
            if (v1273)
              LODWORD(v1272) = 0;
            if ((_DWORD)v1272 * HIDWORD(v1262) == -1)
            {
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
              v1274 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1274 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v1275 = qword_2545309E8;
                for (i6 = qword_2545309F0; v1275 != i6; v1275 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1275)(*(_QWORD *)(v1275 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              }
              v1277 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1277 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_2511;
              qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
            }
            v1278 = v1817 / v1245;
            v1279 = (void *)(v1261 + 4 * (v1264 * (v1805 + v1780) + v1263 * v1248));
            v1280 = (v1817 / v1245) | ((v1246 / v1245) << 32);
            v1747 = v1246 / v1245;
            v1281 = (v1817 / v1245) != 0 && (v1246 / v1245) != 0;
            if (v1281)
              v1282 = v1280;
            else
              v1282 = 0;
            v1283 = HIDWORD(v1282);
            if (v1281)
              v1284 = HIDWORD(v1282) * v1282;
            else
              v1284 = 0;
            v1285 = v1282 << 32;
            if (!HIDWORD(v1282))
              v1285 = 0;
            memptr[0] = v1279;
            memptr[1] = (void *)v1282;
            *(_QWORD *)((char *)&v1858 + 4) = v1285 | ((_DWORD)v1282 != 0);
            LODWORD(v1858) = v1281;
            HIDWORD(v1858) = v1284;
            v1286 = HIDWORD(v1282);
            v1287 = v1282;
            if (v1281 && HIDWORD(v1282) * (_DWORD)v1282 == -1)
            {
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
              v1288 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1288 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v1289 = qword_2545309E8;
                for (i7 = qword_2545309F0; v1289 != i7; v1289 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1289)(*(_QWORD *)(v1289 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              }
              v1291 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1291 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
                goto LABEL_2511;
              qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              v1287 = (int)memptr[1];
              LODWORD(v1286) = HIDWORD(memptr[1]);
              v1281 = v1858;
              v1282 = (unint64_t)memptr[1];
              v1283 = (unint64_t)memptr[1] >> 32;
            }
            if (v1287)
              v1292 = (_DWORD)v1286 == 0;
            else
              v1292 = 1;
            v1293 = v1292 || !v1281;
            if (v1293)
              v1294 = 0;
            else
              v1294 = v1282;
            v1295 = !v1293 && v1281;
            v1741 = v1295;
            if (v1293)
              v1296 = 0;
            else
              v1296 = HIDWORD(v1294) * v1294;
            v1297 = (_DWORD)v1294 != 0;
            if (HIDWORD(v1294))
              v1298 = v1294 << 32;
            else
              v1298 = 0;
            v1299 = 4 * v1296;
            v1300 = v1299 - 1;
            v1770 = v1296;
            v1301 = v1296 * v1281;
            v1302 = 4 * v1301;
            _ZF = (v1299 & (v1299 - 1)) == 0;
            v1303 = 3;
            if (_ZF)
              v1303 = v1300;
            v1304 = v1303 | (v1303 >> 1) | ((v1303 | (v1303 >> 1)) >> 2);
            v1305 = v1304 | (v1304 >> 4) | ((v1304 | (v1304 >> 4)) >> 8);
            v1306 = v1305 | (v1305 >> 16) | ((v1305 | (v1305 >> 16)) >> 32);
            if (v1306 + 1 > 8)
              v1307 = v1306 + 1;
            else
              v1307 = 8;
            if (v1301)
            {
              *(_QWORD *)__p = 0;
              v1308 = malloc_type_posix_memalign((void **)__p, v1307, 4 * v1301, 0x1F88E90uLL);
              if (v1308)
                goto LABEL_2527;
              v1756 = *(_QWORD *)__p;
              v1282 = (unint64_t)memptr[1];
              v1281 = v1858;
              v1283 = (unint64_t)memptr[1] >> 32;
              v1763 = v1298 | v1297;
              v1309 = *(_QWORD *)__p;
              if (!LODWORD(memptr[1]))
                goto LABEL_1978;
            }
            else
            {
              v1756 = 0;
              v1763 = v1298 | v1297;
              v1309 = 0;
              if (!(_DWORD)v1282)
                goto LABEL_1978;
            }
            if ((_DWORD)v1283 && v1281)
            {
              v1310 = v1294 != 0;
              if (HIDWORD(v1282))
                v1311 = (_DWORD)v1282 == 0;
              else
                v1311 = 1;
              if (v1311)
                v1312 = 0;
              else
                v1312 = v1282;
              v1313 = !v1311 && v1281;
              *(_QWORD *)__p = v1309;
              *(_QWORD *)&__p[8] = v1312;
              *(_DWORD *)&__p[16] = v1313;
              *(_QWORD *)&__p[20] = v1763 & 0x3FFFFFFF00000001;
              *(_DWORD *)&__p[28] = v1770 & 0x3FFFFFFF;
              if (v1313 * (v1770 & 0x3FFFFFFF) == -1)
              {
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                v1315 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1315 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10 || byte_254530A18)
                {
                  v1316 = qword_2545309E8;
                  for (i8 = qword_2545309F0; v1316 != i8; v1316 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1316)(*(_QWORD *)(v1316 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                }
                v1318 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1318 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                v1309 = v1756;
                if (!byte_254530A10)
LABEL_2537:
                  abort();
                qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                v1310 = *(_DWORD *)&__p[20];
                v1726 = v1278;
                v1806 = v1307;
                v1314 = DWORD1(v1858);
                if (*(_DWORD *)&__p[20] == 1)
                  goto LABEL_1892;
              }
              else
              {
                v1726 = v1278;
                v1806 = v1307;
                v1314 = DWORD1(v1858);
                if (v1310 != 1)
                  goto LABEL_1901;
LABEL_1892:
                if ((_DWORD)v1314 == 1)
                {
                  if (DWORD2(v1858) != *(_DWORD *)&__p[24] || DWORD2(v1858) != LODWORD(memptr[1]))
                  {
                    *(_QWORD *)__src = LODWORD(memptr[1]);
                    if (LODWORD(memptr[1]) && HIDWORD(memptr[1]) && (_DWORD)v1858)
                      sub_207D5CB40((uint64_t *)__src, (char **)memptr, (char **)__p);
                    goto LABEL_1977;
                  }
                  v1818 = *(unsigned int *)&__p[28];
                  if (HIDWORD(v1858) == *(_DWORD *)&__p[28])
                  {
                    v1319 = v1858;
                    if (HIDWORD(v1858) == HIDWORD(memptr[1]) * DWORD2(v1858))
                    {
                      v1320 = (v1858 * HIDWORD(v1858));
                      v1321 = memptr[0];
                      if (!(_DWORD)v1320 || memptr[0])
                      {
                        if ((_DWORD)v1320)
                          goto LABEL_1974;
                      }
                      else
                      {
                        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                        {
                          goto LABEL_2537;
                        }
LABEL_1974:
                        memmove(*(void **)__p, v1321, 4 * v1320);
                      }
LABEL_1977:
                      v1307 = v1806;
                      LODWORD(v1278) = v1726;
                      goto LABEL_1978;
                    }
                  }
                  else
                  {
                    v1319 = v1858;
                  }
                  v1722 = HIDWORD(v1858);
                  v1714 = (HIDWORD(memptr[1]) * DWORD2(v1858));
                  if (!DWORD2(v1858) || !HIDWORD(memptr[1]) || !v1319)
                    goto LABEL_1977;
                  v1358 = (char *)memptr[0];
                  v1359 = *(char **)__p;
                  __len = 4 * v1714;
                  v1716 = v1319 - 1;
                  if (v1319 != 1)
                  {
                    if ((_DWORD)v1714)
                    {
                      v1360 = 0;
                      while (1)
                      {
                        if (!v1358)
                        {
                          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                          v1361 = atomic_load((unsigned __int8 *)&qword_254530A20);
                          if ((v1361 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                          {
                            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                            __cxa_guard_release(&qword_254530A20);
                          }
                          if (byte_254530A10)
                            v1362 = byte_254530A18 == 0;
                          else
                            v1362 = 0;
                          if (!v1362)
                          {
                            v1364 = qword_2545309E8;
                            for (i9 = qword_2545309F0; v1364 != i9; v1364 += 16)
                              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1364)(*(_QWORD *)(v1364 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                          }
                          v1365 = atomic_load((unsigned __int8 *)&qword_254530A20);
                          if ((v1365 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                          {
                            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                            __cxa_guard_release(&qword_254530A20);
                          }
                          v1309 = v1756;
                          if (!byte_254530A10)
                            goto LABEL_2534;
                          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                        }
                        memmove(v1359, v1358, __len);
                        v1358 += 4 * v1722;
                        v1359 += 4 * v1818;
                        if (++v1360 == v1716)
                          goto LABEL_1950;
                      }
                    }
                    goto LABEL_1977;
                  }
LABEL_1950:
                  if (!(_DWORD)v1714 || v1358)
                  {
                    if (!(_DWORD)v1714)
                      goto LABEL_1977;
                  }
                  else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
LABEL_2534:
                    abort();
                  }
                  memmove(v1359, v1358, __len);
                  goto LABEL_1977;
                }
              }
LABEL_1901:
              if (!LODWORD(memptr[1]) || !HIDWORD(memptr[1]) || !(_DWORD)v1858)
                goto LABEL_1977;
              v1819 = v1302;
              v1322 = LODWORD(memptr[1]) - 1;
              v1323 = v1310;
              v1324 = HIDWORD(memptr[1]) - 1;
              v1325 = DWORD2(v1858);
              v1326 = *(unsigned int *)&__p[24];
              v1327 = memptr[0];
              v1328 = *(_DWORD **)__p;
              v1329 = v1858 - 1;
              if ((_DWORD)v1858 == 1)
              {
                v1721 = *(unsigned int *)&__p[24];
                v1340 = v1310;
                if (HIDWORD(memptr[1]) != 1)
                  goto LABEL_1915;
                v1309 = v1756;
                v1323 = v1310;
LABEL_1959:
                if (v1322)
                {
                  v1371 = 4 * v1314;
                  do
                  {
                    *v1328 = *v1327;
                    v1327 = (_DWORD *)((char *)v1327 + v1371);
                    v1328 += v1323;
                    --v1322;
                  }
                  while (v1322);
                }
              }
              else
              {
                v1330 = *(unsigned int *)&__p[28];
                v1331 = HIDWORD(v1858);
                if (HIDWORD(memptr[1]) == 1)
                {
                  if (LODWORD(memptr[1]) != 1)
                  {
                    v1366 = 0;
                    v1367 = 4 * HIDWORD(v1858);
                    do
                    {
                      v1368 = v1328;
                      v1369 = v1327;
                      v1370 = v1322;
                      do
                      {
                        *v1368 = *v1369;
                        v1369 += v1314;
                        v1368 += v1323;
                        --v1370;
                      }
                      while (v1370);
                      *v1368 = *v1369;
                      v1327 = (_DWORD *)((char *)v1327 + v1367);
                      v1328 += v1330;
                      ++v1366;
                    }
                    while (v1366 != v1329);
                    goto LABEL_1959;
                  }
                  do
                  {
                    *v1328 = *v1327;
                    v1327 += v1331;
                    v1328 += v1330;
                    --v1329;
                  }
                  while (v1329);
                }
                else
                {
                  if (LODWORD(memptr[1]) == 1)
                  {
                    v1372 = 0;
                    v1373 = 4 * HIDWORD(v1858);
                    do
                    {
                      v1374 = v1328;
                      v1375 = v1327;
                      v1376 = v1324;
                      do
                      {
                        *v1374 = *v1375;
                        v1375 += v1325;
                        v1374 += v1326;
                        --v1376;
                      }
                      while (v1376);
                      *v1374 = *v1375;
                      v1327 = (_DWORD *)((char *)v1327 + v1373);
                      v1328 += v1330;
                      ++v1372;
                    }
                    while (v1372 != v1329);
                  }
                  else
                  {
                    v1332 = 0;
                    v1333 = 4 * HIDWORD(v1858);
                    v1334 = 4 * DWORD2(v1858);
                    v1335 = 4 * v1314;
                    v1336 = 4 * *(unsigned int *)&__p[28];
                    v1721 = *(unsigned int *)&__p[24];
                    v1337 = 4 * *(unsigned int *)&__p[24];
                    v1338 = (char *)memptr[0] + v1334;
                    v1339 = *(_QWORD *)__p + v1337;
                    v1340 = v1323;
                    v1341 = 4 * v1323;
                    do
                    {
                      v1342 = 0;
                      v1343 = (_DWORD *)v1339;
                      v1344 = v1338;
                      v1345 = v1328;
                      v1346 = v1327;
                      do
                      {
                        v1347 = v1344;
                        v1348 = v1343;
                        v1349 = v1345;
                        v1350 = v1346;
                        v1351 = v1322;
                        do
                        {
                          *v1349 = *v1350;
                          v1350 = (_DWORD *)((char *)v1350 + v1335);
                          v1349 = (_DWORD *)((char *)v1349 + v1341);
                          --v1351;
                        }
                        while (v1351);
                        *v1349 = *v1350;
                        v1346 = (_DWORD *)((char *)v1346 + v1334);
                        v1345 = (_DWORD *)((char *)v1345 + v1337);
                        ++v1342;
                        v1344 = &v1347[(unint64_t)v1334 / 4];
                        v1343 = &v1348[(unint64_t)v1337 / 4];
                      }
                      while (v1342 != v1324);
                      v1352 = v1322;
                      do
                      {
                        *v1348 = *v1347;
                        v1347 = (_DWORD *)((char *)v1347 + v1335);
                        v1348 = (_DWORD *)((char *)v1348 + v1341);
                        --v1352;
                      }
                      while (v1352);
                      *v1348 = *v1347;
                      v1327 = (_DWORD *)((char *)v1327 + v1333);
                      v1328 = (_DWORD *)((char *)v1328 + v1336);
                      ++v1332;
                      v1338 += v1333;
                      v1339 += v1336;
                    }
                    while (v1332 != v1329);
LABEL_1915:
                    v1309 = v1756;
                    if (v1322)
                    {
                      v1323 = v1340;
                      v1353 = 0;
                      v1354 = 4 * v1325;
                      do
                      {
                        v1355 = v1328;
                        v1356 = v1327;
                        v1357 = v1322;
                        do
                        {
                          *v1355 = *v1356;
                          v1356 += v1314;
                          v1355 += v1340;
                          --v1357;
                        }
                        while (v1357);
                        *v1355 = *v1356;
                        v1327 = (_DWORD *)((char *)v1327 + v1354);
                        v1328 += v1721;
                        ++v1353;
                      }
                      while (v1353 != v1324);
                      goto LABEL_1959;
                    }
                    v1326 = v1721;
                  }
                  do
                  {
                    *v1328 = *v1327;
                    v1327 += v1325;
                    v1328 += v1326;
                    --v1324;
                  }
                  while (v1324);
                }
              }
              *v1328 = *v1327;
              v1302 = v1819;
              goto LABEL_1977;
            }
LABEL_1978:
            v1377 = (char *)v1870[1] + 528 * v1244;
            *((_QWORD *)v1377 + 33) = v1294;
            v1378 = v1377 + 264;
            *((_DWORD *)v1377 + 68) = v1741;
            *(_QWORD *)(v1377 + 276) = v1763;
            *((_DWORD *)v1377 + 71) = v1770;
            v1377[288] = 0;
            v1377[300] = 0;
            *((_QWORD *)v1377 + 41) = v1282;
            *((_DWORD *)v1377 + 84) = v1281;
            *(_QWORD *)(v1377 + 340) = 4 * v1763;
            *((_DWORD *)v1377 + 87) = 4 * v1770;
            *((_QWORD *)v1377 + 38) = v1302;
            v1379 = (void *)*((_QWORD *)v1377 + 39);
            if (v1379)
              free(v1379);
            *((_QWORD *)v1378 + 6) = v1309;
            *((_QWORD *)v1378 + 7) = v1307;
            v1380 = (v1747 * v1278);
            v1178 = v1735;
            if (!(_DWORD)v1380)
              goto LABEL_1772;
            v1381 = (float32x4_t *)*((_QWORD *)v1870[1] + 66 * v1244 + 39);
            if (v1380 < 8)
            {
              LODWORD(v1382) = 0;
              v1383 = (float *)*((_QWORD *)v1870[1] + 66 * v1244 + 39);
              v1384 = 1.0;
              v1385 = (float *)v1710;
              goto LABEL_1991;
            }
            v1385 = (float *)v1710;
            if ((unint64_t)v1381 < v1698 && v1710 < &v1381->f32[(v1380 - 1) + 1])
            {
              LODWORD(v1382) = 0;
              v1383 = (float *)*((_QWORD *)v1870[1] + 66 * v1244 + 39);
              v1384 = 1.0;
LABEL_1991:
              v1391 = v1380 - v1382;
              do
              {
                if (*v1383 <= *v1385)
                  v1392 = 0.0;
                else
                  v1392 = v1384;
                *v1383++ = v1392;
                --v1391;
              }
              while (v1391);
              goto LABEL_1772;
            }
            v1382 = v1380 & 0xFFFFFFF8;
            v1383 = &v1381->f32[v1382];
            v1387 = vld1q_dup_f32(v1710);
            v1388 = v1381 + 1;
            v1389 = v1382;
            do
            {
              v1390 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vcgtq_f32(*v1388, v1387)), (int8x8_t)0x1000100010001)));
              v1388[-1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vcgtq_f32(v1388[-1], v1387)), (int8x8_t)0x1000100010001)));
              *v1388 = v1390;
              v1388 += 2;
              v1389 -= 8;
            }
            while (v1389);
            v1384 = 1.0;
            v1385 = (float *)v1710;
            if (v1382 != v1380)
              goto LABEL_1991;
LABEL_1772:
            if (++v1244 == a3)
            {
              v1183 = v1796;
              v1179 = (uint64_t **)*((unsigned __int8 *)v1796 + 55);
              v1181 = v1796[5];
              v1180 = *((_BYTE *)v1796 + 55);
              break;
            }
          }
        }
LABEL_2018:
        if (v1180 >= 0)
          v1393 = v1179;
        else
          v1393 = v1181;
        if (v1393 == (uint64_t **)8)
        {
          v1394 = v1180 >= 0 ? v1178 : (unint64_t *)*v1178;
          if (a3 && *v1394 == 0x7370614D74616548)
          {
            v1395 = 0;
            v1748 = (uint64_t *)(v1183 + 19);
            v1742 = (uint64_t *)(v1183 + 12);
            while (1)
            {
              v1396 = *(unsigned int *)(a2 + 360);
              v1397 = *(unsigned int *)(a2 + 352);
              v1398 = *(_DWORD *)(a2 + 384);
              if (v1789 <= 1)
                v1399 = v1395;
              else
                v1399 = 0;
              v1820 = v1399;
              v1400 = v1398 * v1395;
              if (v1789 <= 1)
                v1400 = 0;
              v1807 = v1400;
              if (((_BYTE)v1183[13] & 0x40) == 0)
              {
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 724, (uint64_t)"format.Contains(FormatFlags::FLOAT32)", 37, (uint64_t)"The DataView does not contain float data", 40, (void (*)(void **))sub_208216974);
                v1401 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1401 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10 || byte_254530A18)
                {
                  v1402 = qword_2545309E8;
                  for (i10 = qword_2545309F0; v1402 != i10; v1402 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1402)(*(_QWORD *)(v1402 + 8), "format.Contains(FormatFlags::FLOAT32)", 37, "The DataView does not contain float data", 40);
                }
                v1404 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1404 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10)
                  goto LABEL_2511;
                qword_254530A00(*(_QWORD *)algn_254530A08, "format.Contains(FormatFlags::FLOAT32)", 37, "The DataView does not contain float data", 40);
              }
              v1405 = v1742;
              if (*((_BYTE *)v1796 + 168))
              {
                v1405 = v1748;
                if (*((_BYTE *)v1796 + 164))
                {
                  v1405 = v1748;
                  if (*v1748)
                  {
                    v1406 = v1796[15];
                    v1407 = (std::__shared_weak_count *)v1796[16];
                    if (v1407)
                    {
                      v1408 = (unint64_t *)&v1407->__shared_owners_;
                      do
                        v1409 = __ldxr(v1408);
                      while (__stxr(v1409 + 1, v1408));
                      do
                        v1410 = __ldaxr(v1408);
                      while (__stlxr(v1410 - 1, v1408));
                      if (!v1410)
                      {
                        ((void (*)(std::__shared_weak_count *))v1407->__on_zero_shared)(v1407);
                        std::__shared_weak_count::__release_weak(v1407);
                      }
                    }
                    ((void (*)(uint64_t **, _QWORD, const char *))(*v1406)[11])(v1406, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v1405 = v1748;
                  }
                }
              }
              v1411 = 0;
              v1412 = 0;
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)(v1796 + 7)))) & 1) == 0
                && *((_DWORD *)v1796 + 18))
              {
                v1412 = *(unint64_t *)((char *)v1796 + 60);
                v1411 = *((_DWORD *)v1796 + 18);
              }
              v1413 = *v1405;
              v1414 = v1796[10];
              v1416 = *((_DWORD *)v1796 + 22);
              v1415 = *((_DWORD *)v1796 + 23);
              if (v1411 * v1415 == -1)
              {
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                v1771 = v1397;
                v1417 = v1396;
                v1418 = v1395;
                v1419 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1419 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10 || byte_254530A18)
                {
                  v1421 = qword_2545309E8;
                  for (i11 = qword_2545309F0; v1421 != i11; v1421 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1421)(*(_QWORD *)(v1421 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                }
                v1422 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1422 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                v1395 = v1418;
                v1396 = v1417;
                v1397 = v1771;
                if (!byte_254530A10)
                  goto LABEL_2511;
                qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              }
              v1423 = HIDWORD(v1412);
              if ((_DWORD)v1412)
                v1424 = v1423 == 0;
              else
                v1424 = 1;
              if (v1424)
                LODWORD(v1423) = 0;
              if ((_DWORD)v1423 * HIDWORD(v1414) == -1)
              {
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                v1425 = v1397;
                v1426 = v1396;
                v1427 = v1395;
                v1428 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1428 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10 || byte_254530A18)
                {
                  v1430 = qword_2545309E8;
                  for (i12 = qword_2545309F0; v1430 != i12; v1430 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1430)(*(_QWORD *)(v1430 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                }
                v1431 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1431 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10)
                  goto LABEL_2511;
                v1395 = v1427;
                v1396 = v1426;
                v1397 = v1425;
                qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              }
              v1432 = (void *)(v1413 + 4 * (v1416 * v1807 + v1415 * (v1820 + v1780)));
              if (v1396)
                v1433 = v1397 == 0;
              else
                v1433 = 1;
              v1434 = v1433 || v1398 == 0;
              if (v1434)
                v1435 = 0;
              else
                v1435 = v1396 | (v1397 << 32);
              v1436 = HIDWORD(v1435);
              if (v1434)
                v1437 = 0;
              else
                v1437 = v1398;
              v1438 = HIDWORD(v1435) * v1435;
              if (v1434)
                v1438 = 0;
              v1439 = v1435 << 32;
              if (!HIDWORD(v1435))
                v1439 = 0;
              memptr[0] = v1432;
              memptr[1] = (void *)v1435;
              *(_QWORD *)((char *)&v1858 + 4) = v1439 | ((_DWORD)v1435 != 0);
              LODWORD(v1858) = v1437;
              HIDWORD(v1858) = v1438;
              if (v1438 * v1437 == -1)
              {
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                v1442 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1442 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10 || byte_254530A18)
                {
                  v1443 = qword_2545309E8;
                  for (i13 = qword_2545309F0; v1443 != i13; v1443 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1443)(*(_QWORD *)(v1443 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                }
                v1445 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1445 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10)
                  goto LABEL_2511;
                qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                v1441 = (int)memptr[1];
                LODWORD(v1440) = HIDWORD(memptr[1]);
                v1437 = v1858;
                v1435 = (unint64_t)memptr[1];
                v1436 = (unint64_t)memptr[1] >> 32;
              }
              else
              {
                v1440 = HIDWORD(v1435);
                v1441 = v1435;
              }
              if (v1441)
                v1446 = (_DWORD)v1440 == 0;
              else
                v1446 = 1;
              v1447 = v1446 || v1437 == 0;
              if (v1447)
                v1448 = 0;
              else
                v1448 = v1435;
              if (v1447)
                v1449 = 0;
              else
                v1449 = v1437;
              v1757 = v1449;
              if (v1447)
                v1450 = 0;
              else
                v1450 = HIDWORD(v1448) * v1448;
              v1451 = (_DWORD)v1448 != 0;
              if (HIDWORD(v1448))
                v1452 = v1448 << 32;
              else
                v1452 = 0;
              v1453 = 4 * v1450;
              v1454 = v1453 - 1;
              v1302 = 4 * v1450 * v1437;
              _ZF = (v1453 & (v1453 - 1)) == 0;
              v1455 = 3;
              if (_ZF)
                v1455 = v1454;
              v1456 = v1455 | (v1455 >> 1) | ((v1455 | (v1455 >> 1)) >> 2);
              v1457 = v1456 | (v1456 >> 4) | ((v1456 | (v1456 >> 4)) >> 8);
              v1458 = v1457 | (v1457 >> 16) | ((v1457 | (v1457 >> 16)) >> 32);
              v1307 = v1458 + 1 > 8 ? v1458 + 1 : 8;
              if (v1450 * v1437)
                break;
              v1772 = 0;
              v1764 = v1452 | v1451;
              if ((_DWORD)v1435)
                goto LABEL_2133;
LABEL_2241:
              v1528 = (char *)v1870[1] + 528 * v1395;
              *((_QWORD *)v1528 + 22) = v1448;
              v1529 = v1528 + 176;
              *((_DWORD *)v1529 + 2) = v1757;
              *(_QWORD *)(v1529 + 12) = v1764;
              *((_DWORD *)v1529 + 5) = v1450;
              v1529[24] = 0;
              v1529[36] = 0;
              *((_QWORD *)v1529 + 8) = v1435;
              *((_DWORD *)v1529 + 18) = v1437;
              *(_QWORD *)(v1529 + 76) = 4 * v1764;
              *((_DWORD *)v1529 + 21) = 4 * v1450;
              *((_QWORD *)v1529 + 5) = v1302;
              v1530 = (void *)*((_QWORD *)v1529 + 6);
              if (v1530)
                free(v1530);
              *((_QWORD *)v1529 + 6) = v1772;
              *((_QWORD *)v1529 + 7) = v1307;
              ++v1395;
              v1183 = v1796;
              if (v1395 == a3)
              {
                v1179 = (uint64_t **)*((unsigned __int8 *)v1796 + 55);
                v1181 = v1796[5];
                v1180 = *((_BYTE *)v1796 + 55);
                v1178 = v1735;
                goto LABEL_2264;
              }
            }
            *(_QWORD *)__p = 0;
            v1308 = malloc_type_posix_memalign((void **)__p, v1307, 4 * v1450 * v1437, 0x1F88E90uLL);
            if (v1308)
              goto LABEL_2527;
            v1772 = *(_QWORD *)__p;
            v1435 = (unint64_t)memptr[1];
            v1437 = v1858;
            v1436 = (unint64_t)memptr[1] >> 32;
            v1764 = v1452 | v1451;
            if (!LODWORD(memptr[1]))
              goto LABEL_2241;
LABEL_2133:
            if (!(_DWORD)v1436 || !v1437)
              goto LABEL_2241;
            v1459 = v1448 != 0;
            if (HIDWORD(v1435))
              v1460 = (_DWORD)v1435 == 0;
            else
              v1460 = 1;
            if (v1460)
              v1461 = 0;
            else
              v1461 = v1435;
            if (v1460)
              v1462 = 0;
            else
              v1462 = v1437;
            *(_QWORD *)__p = v1772;
            *(_QWORD *)&__p[8] = v1461;
            *(_DWORD *)&__p[16] = v1462;
            *(_QWORD *)&__p[20] = v1764 & 0x3FFFFFFF00000001;
            *(_DWORD *)&__p[28] = v1450 & 0x3FFFFFFF;
            if (v1462 * (v1450 & 0x3FFFFFFF) == -1)
            {
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
              v1464 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1464 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v1465 = qword_2545309E8;
                for (i14 = qword_2545309F0; v1465 != i14; v1465 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1465)(*(_QWORD *)(v1465 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              }
              v1467 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v1467 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10)
LABEL_2538:
                abort();
              qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
              v1459 = *(_DWORD *)&__p[20];
              v1821 = v1302;
              v1808 = v1307;
              v1463 = DWORD1(v1858);
              if (*(_DWORD *)&__p[20] != 1)
                goto LABEL_2164;
            }
            else
            {
              v1821 = v1302;
              v1808 = v1307;
              v1463 = DWORD1(v1858);
              if (v1459 != 1)
                goto LABEL_2164;
            }
            if ((_DWORD)v1463 == 1)
            {
              if (DWORD2(v1858) != *(_DWORD *)&__p[24] || DWORD2(v1858) != LODWORD(memptr[1]))
              {
                *(_QWORD *)__src = LODWORD(memptr[1]);
                if (LODWORD(memptr[1]) && HIDWORD(memptr[1]) && (_DWORD)v1858)
                  sub_207D5CB40((uint64_t *)__src, (char **)memptr, (char **)__p);
                goto LABEL_2240;
              }
              v1468 = HIDWORD(v1858);
              v1737 = *(unsigned int *)&__p[28];
              if (HIDWORD(v1858) == *(_DWORD *)&__p[28])
              {
                v1469 = v1858;
                if (HIDWORD(v1858) == HIDWORD(memptr[1]) * DWORD2(v1858))
                {
                  v1470 = (v1858 * HIDWORD(v1858));
                  v1471 = memptr[0];
                  if ((_DWORD)v1470 && !memptr[0])
                  {
                    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
                      goto LABEL_2538;
                    }
                    goto LABEL_2237;
                  }
                  if ((_DWORD)v1470)
LABEL_2237:
                    memmove(*(void **)__p, v1471, 4 * v1470);
LABEL_2240:
                  v1307 = v1808;
                  v1302 = v1821;
                  goto LABEL_2241;
                }
              }
              else
              {
                v1469 = v1858;
              }
              __lena = (HIDWORD(memptr[1]) * DWORD2(v1858));
              if (!DWORD2(v1858) || !HIDWORD(memptr[1]) || !v1469)
                goto LABEL_2240;
              v1508 = (char *)memptr[0];
              v1509 = *(char **)__p;
              v1730 = 4 * __lena;
              v1727 = v1469 - 1;
              if (v1469 != 1)
              {
                if ((_DWORD)__lena)
                {
                  v1510 = 0;
                  v1724 = v1395;
                  while (1)
                  {
                    if (!v1508)
                    {
                      sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                      v1511 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v1511 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      if (byte_254530A10)
                        v1512 = byte_254530A18 == 0;
                      else
                        v1512 = 0;
                      if (!v1512)
                      {
                        v1514 = qword_2545309E8;
                        for (i15 = qword_2545309F0; v1514 != i15; v1514 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1514)(*(_QWORD *)(v1514 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                      }
                      v1515 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v1515 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      v1395 = v1724;
                      if (!byte_254530A10)
                        goto LABEL_2535;
                      qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                    }
                    memmove(v1509, v1508, v1730);
                    v1508 += 4 * v1468;
                    v1509 += 4 * v1737;
                    if (++v1510 == v1727)
                      goto LABEL_2213;
                  }
                }
                goto LABEL_2240;
              }
LABEL_2213:
              if (!(_DWORD)__lena || v1508)
              {
                if (!(_DWORD)__lena)
                  goto LABEL_2240;
              }
              else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
LABEL_2535:
                abort();
              }
              memmove(v1509, v1508, v1730);
              goto LABEL_2240;
            }
LABEL_2164:
            if (!LODWORD(memptr[1]) || !HIDWORD(memptr[1]) || !(_DWORD)v1858)
              goto LABEL_2240;
            v1472 = LODWORD(memptr[1]) - 1;
            v1473 = v1459;
            v1474 = HIDWORD(memptr[1]) - 1;
            v1475 = DWORD2(v1858);
            v1476 = *(unsigned int *)&__p[24];
            v1477 = memptr[0];
            v1478 = *(_DWORD **)__p;
            v1479 = v1858 - 1;
            if ((_DWORD)v1858 == 1)
            {
              v1738 = *(unsigned int *)&__p[24];
              v1490 = v1473;
              v1723 = v1395;
              if (HIDWORD(memptr[1]) == 1)
                goto LABEL_2222;
            }
            else
            {
              v1480 = *(unsigned int *)&__p[28];
              v1481 = HIDWORD(v1858);
              if (HIDWORD(memptr[1]) == 1)
              {
                if (LODWORD(memptr[1]) != 1)
                {
                  v1516 = 0;
                  v1517 = 4 * *(unsigned int *)&__p[28];
                  do
                  {
                    v1518 = v1478;
                    v1519 = v1477;
                    v1520 = v1472;
                    do
                    {
                      *v1518 = *v1519;
                      v1519 += v1463;
                      v1518 += v1473;
                      --v1520;
                    }
                    while (v1520);
                    *v1518 = *v1519;
                    v1477 += v1481;
                    v1478 = (_DWORD *)((char *)v1478 + v1517);
                    ++v1516;
                  }
                  while (v1516 != v1479);
LABEL_2222:
                  if (v1472)
                  {
                    v1521 = 4 * v1463;
                    do
                    {
                      *v1478 = *v1477;
                      v1477 = (_DWORD *)((char *)v1477 + v1521);
                      v1478 += v1473;
                      --v1472;
                    }
                    while (v1472);
                  }
                  goto LABEL_2239;
                }
                do
                {
                  *v1478 = *v1477;
                  v1477 += v1481;
                  v1478 += v1480;
                  --v1479;
                }
                while (v1479);
LABEL_2239:
                *v1478 = *v1477;
                goto LABEL_2240;
              }
              if (LODWORD(memptr[1]) == 1)
              {
                v1522 = 0;
                v1523 = 4 * HIDWORD(v1858);
                v1524 = 4 * *(unsigned int *)&__p[28];
                do
                {
                  v1525 = v1478;
                  v1526 = v1477;
                  v1527 = v1474;
                  do
                  {
                    *v1525 = *v1526;
                    v1526 += v1475;
                    v1525 += v1476;
                    --v1527;
                  }
                  while (v1527);
                  *v1525 = *v1526;
                  v1477 = (_DWORD *)((char *)v1477 + v1523);
                  v1478 = (_DWORD *)((char *)v1478 + v1524);
                  ++v1522;
                }
                while (v1522 != v1479);
                do
                {
LABEL_2232:
                  *v1478 = *v1477;
                  v1477 += v1475;
                  v1478 += v1476;
                  --v1474;
                }
                while (v1474);
                goto LABEL_2239;
              }
              v1723 = v1395;
              v1482 = 0;
              v1483 = 4 * HIDWORD(v1858);
              v1484 = 4 * DWORD2(v1858);
              v1485 = 4 * v1463;
              v1486 = 4 * *(unsigned int *)&__p[28];
              v1738 = *(unsigned int *)&__p[24];
              v1487 = 4 * *(unsigned int *)&__p[24];
              v1488 = (char *)memptr[0] + v1484;
              v1489 = *(_QWORD *)__p + v1487;
              v1490 = v1473;
              v1491 = 4 * v1473;
              do
              {
                v1492 = 0;
                v1493 = (_DWORD *)v1489;
                v1494 = v1488;
                v1495 = v1478;
                v1496 = v1477;
                do
                {
                  v1497 = v1494;
                  v1498 = v1493;
                  v1499 = v1495;
                  v1500 = v1496;
                  v1501 = v1472;
                  do
                  {
                    *v1499 = *v1500;
                    v1500 = (_DWORD *)((char *)v1500 + v1485);
                    v1499 = (_DWORD *)((char *)v1499 + v1491);
                    --v1501;
                  }
                  while (v1501);
                  *v1499 = *v1500;
                  v1496 = (_DWORD *)((char *)v1496 + v1484);
                  v1495 = (_DWORD *)((char *)v1495 + v1487);
                  ++v1492;
                  v1494 = &v1497[(unint64_t)v1484 / 4];
                  v1493 = &v1498[(unint64_t)v1487 / 4];
                }
                while (v1492 != v1474);
                v1502 = v1472;
                do
                {
                  *v1498 = *v1497;
                  v1497 = (_DWORD *)((char *)v1497 + v1485);
                  v1498 = (_DWORD *)((char *)v1498 + v1491);
                  --v1502;
                }
                while (v1502);
                *v1498 = *v1497;
                v1477 = (_DWORD *)((char *)v1477 + v1483);
                v1478 = (_DWORD *)((char *)v1478 + v1486);
                ++v1482;
                v1488 += v1483;
                v1489 += v1486;
              }
              while (v1482 != v1479);
            }
            v1395 = v1723;
            if (v1472)
            {
              v1473 = v1490;
              v1503 = 0;
              v1504 = 4 * v1475;
              do
              {
                v1505 = v1478;
                v1506 = v1477;
                v1507 = v1472;
                do
                {
                  *v1505 = *v1506;
                  v1506 += v1463;
                  v1505 += v1490;
                  --v1507;
                }
                while (v1507);
                *v1505 = *v1506;
                v1477 = (_DWORD *)((char *)v1477 + v1504);
                v1478 += v1738;
                ++v1503;
              }
              while (v1503 != v1474);
              goto LABEL_2222;
            }
            v1476 = v1738;
            goto LABEL_2232;
          }
        }
LABEL_2264:
        if (v1180 < 0)
          v1179 = v1181;
        if (v1179 == (uint64_t **)12)
        {
          v1531 = (unint64_t *)*v1178;
          if (v1180 >= 0)
            v1531 = v1178;
          if (a3 && !(*v1531 ^ 0x7370614D74616548 | *((unsigned int *)v1531 + 2) ^ 0x656E694CLL))
          {
            v1532 = 0;
            v1533 = *(_QWORD *)(a2 + 352);
            v1534 = *(unsigned int *)(a2 + 360);
            v1535 = *(_QWORD *)(a2 + 352) == 0;
            if (!*(_DWORD *)(a2 + 360))
              v1535 = 1;
            v1711 = v1535;
            v1536 = !v1535;
            if (v1535)
              v1537 = 0;
            else
              v1537 = v1534 | (*(_QWORD *)(a2 + 352) << 32);
            v1538 = HIDWORD(v1537);
            if (v1536)
              v1539 = 3;
            else
              v1539 = 0;
            if (v1536)
              v1540 = HIDWORD(v1537) * v1537;
            else
              v1540 = 0;
            v1541 = (_DWORD)v1537 != 0;
            v1731 = (void *)v1537;
            v1542 = v1537 << 32;
            v1728 = v1538;
            if (!(_DWORD)v1538)
              v1542 = 0;
            v1717 = v1542 | v1541;
            v1725 = v1539;
            __lenb = v1540;
            v1715 = v1540 * v1539;
            do
            {
              v1543 = v1796 + 12;
              if (*((_BYTE *)v1796 + 168))
              {
                v1543 = v1796 + 19;
                if (*((_BYTE *)v1796 + 164))
                {
                  v1543 = v1796 + 19;
                  if (v1796[19])
                  {
                    v1544 = v1796[15];
                    v1545 = (std::__shared_weak_count *)v1796[16];
                    if (v1545)
                    {
                      v1546 = (unint64_t *)&v1545->__shared_owners_;
                      do
                        v1547 = __ldxr(v1546);
                      while (__stxr(v1547 + 1, v1546));
                      do
                        v1548 = __ldaxr(v1546);
                      while (__stlxr(v1548 - 1, v1546));
                      if (!v1548)
                      {
                        ((void (*)(std::__shared_weak_count *))v1545->__on_zero_shared)(v1545);
                        std::__shared_weak_count::__release_weak(v1545);
                      }
                    }
                    ((void (*)(uint64_t **, _QWORD, const char *))(*v1544)[11])(v1544, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v1543 = v1796 + 19;
                  }
                }
              }
              memptr[0] = (void *)(*v1543 + 4 * 3 * v1534 * v1533 * (v1532 + v1744));
              v1549 = (int)v1731;
              memptr[1] = v1731;
              *(_QWORD *)((char *)&v1858 + 4) = v1717;
              v1550 = v1728;
              LODWORD(v1543) = v1728;
              v1551 = (int)v1731;
              v1552 = v1731;
              v1553 = v1725;
              LODWORD(v1858) = v1725;
              HIDWORD(v1858) = __lenb;
              if (v1715 == -1)
              {
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                v1554 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1554 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10 || byte_254530A18)
                {
                  v1555 = qword_2545309E8;
                  for (i16 = qword_2545309F0; v1555 != i16; v1555 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1555)(*(_QWORD *)(v1555 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                }
                v1557 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v1557 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10)
                  goto LABEL_2511;
                qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                v1549 = (int)memptr[1];
                v1550 = HIDWORD(memptr[1]);
                v1553 = v1858;
                v1551 = (int)memptr[1];
                v1543 = (_QWORD *)((unint64_t)memptr[1] >> 32);
                v1552 = memptr[1];
              }
              if (v1549)
                v1558 = v1550 == 0;
              else
                v1558 = 1;
              v1559 = v1558 || v1553 == 0;
              if (v1559)
                v1560 = 0;
              else
                v1560 = v1552;
              if (v1559)
                v1561 = 0;
              else
                v1561 = v1553;
              if (v1559)
                v1562 = 0;
              else
                v1562 = HIDWORD(v1560) * (_DWORD)v1560;
              v1563 = (_DWORD)v1560 != 0;
              v1773 = v1560;
              if (HIDWORD(v1560))
                v1564 = (_QWORD)v1560 << 32;
              else
                v1564 = 0;
              v1565 = 4 * v1562;
              v1566 = v1565 - 1;
              v1765 = v1562;
              _ZF = (v1565 & (v1565 - 1)) == 0;
              v1567 = 3;
              if (_ZF)
                v1567 = v1566;
              v1568 = v1567 | (v1567 >> 1) | ((v1567 | (v1567 >> 1)) >> 2);
              v1569 = v1568 | (v1568 >> 4) | ((v1568 | (v1568 >> 4)) >> 8);
              v1570 = v1569 | (v1569 >> 16) | ((v1569 | (v1569 >> 16)) >> 32);
              if (v1570 + 1 > 8)
                v1307 = v1570 + 1;
              else
                v1307 = 8;
              v1822 = 4 * v1562 * v1553;
              v1743 = v1561;
              if (v1562 * v1553)
              {
                *(_QWORD *)__p = 0;
                v1308 = malloc_type_posix_memalign((void **)__p, v1307, 4 * v1562 * v1553, 0x1F88E90uLL);
                if (v1308)
                {
                  v1302 = v1822;
LABEL_2527:
                  sub_2081FBF78(v1308, v1307, v1302);
                }
                v1571 = *(_QWORD *)__p;
                v1553 = v1858;
                v1543 = (_QWORD *)((unint64_t)memptr[1] >> 32);
                v1758 = (unint64_t)memptr[1];
                v1749 = v1564 | v1563;
                if (!LODWORD(memptr[1]))
                  goto LABEL_2439;
              }
              else
              {
                v1758 = (unint64_t)v1552;
                v1571 = 0;
                v1749 = v1564 | v1563;
                if (!v1551)
                  goto LABEL_2439;
              }
              if ((_DWORD)v1543 && v1553)
              {
                v1572 = (_DWORD)v1773 != 0;
                if (HIDWORD(v1758))
                  v1573 = (_DWORD)v1758 == 0;
                else
                  v1573 = 1;
                if (v1573)
                  v1574 = 0;
                else
                  v1574 = v1758;
                if (v1573)
                  v1575 = 0;
                else
                  v1575 = v1553;
                *(_QWORD *)__p = v1571;
                *(_QWORD *)&__p[8] = v1574;
                *(_DWORD *)&__p[16] = v1575;
                *(_QWORD *)&__p[20] = v1749 & 0x3FFFFFFF00000001;
                *(_DWORD *)&__p[28] = v1765 & 0x3FFFFFFF;
                if (v1575 * (v1765 & 0x3FFFFFFF) == -1)
                {
                  sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
                  v1577 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1577 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10 || byte_254530A18)
                  {
                    v1578 = qword_2545309E8;
                    for (i17 = qword_2545309F0; v1578 != i17; v1578 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1578)(*(_QWORD *)(v1578 + 8), "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                  }
                  v1580 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v1580 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10)
LABEL_2536:
                    abort();
                  qword_254530A00(*(_QWORD *)algn_254530A08, "total_size < std::numeric_limits<uint32_t>::max()", 49, "Given data block is too big to be represented by uint32_t indexed ArrayView", 75);
                  v1572 = *(_DWORD *)&__p[20];
                  v1809 = v1307;
                  v1576 = DWORD1(v1858);
                  if (*(_DWORD *)&__p[20] == 1)
                    goto LABEL_2355;
                }
                else
                {
                  v1809 = v1307;
                  v1576 = DWORD1(v1858);
                  if (v1572 != 1)
                    goto LABEL_2364;
LABEL_2355:
                  if ((_DWORD)v1576 == 1)
                  {
                    if (DWORD2(v1858) != *(_DWORD *)&__p[24] || DWORD2(v1858) != LODWORD(memptr[1]))
                    {
                      *(_QWORD *)__src = LODWORD(memptr[1]);
                      if (LODWORD(memptr[1]) && HIDWORD(memptr[1]) && (_DWORD)v1858)
                        sub_207D5CB40((uint64_t *)__src, (char **)memptr, (char **)__p);
                      goto LABEL_2438;
                    }
                    v1708 = *(unsigned int *)&__p[28];
                    if (HIDWORD(v1858) == *(_DWORD *)&__p[28])
                    {
                      v1581 = v1858;
                      if (HIDWORD(v1858) == HIDWORD(memptr[1]) * DWORD2(v1858))
                      {
                        v1582 = (v1858 * HIDWORD(v1858));
                        v1583 = memptr[0];
                        if (!(_DWORD)v1582 || memptr[0])
                        {
                          if ((_DWORD)v1582)
                            goto LABEL_2435;
                        }
                        else
                        {
                          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                          {
                            goto LABEL_2536;
                          }
LABEL_2435:
                          memmove(*(void **)__p, v1583, 4 * v1582);
                        }
LABEL_2438:
                        v1307 = v1809;
                        goto LABEL_2439;
                      }
                    }
                    else
                    {
                      v1581 = v1858;
                    }
                    v1707 = HIDWORD(v1858);
                    v1697 = (HIDWORD(memptr[1]) * DWORD2(v1858));
                    if (!DWORD2(v1858) || !HIDWORD(memptr[1]) || !v1581)
                      goto LABEL_2438;
                    v1620 = (char *)memptr[0];
                    v1621 = *(char **)__p;
                    v1705 = 4 * v1697;
                    v1704 = v1581 - 1;
                    if (v1581 != 1)
                    {
                      if ((_DWORD)v1697)
                      {
                        v1622 = 0;
                        v1701 = v1571;
                        while (1)
                        {
                          if (!v1620)
                          {
                            sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                            v1623 = atomic_load((unsigned __int8 *)&qword_254530A20);
                            if ((v1623 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                            {
                              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                              __cxa_guard_release(&qword_254530A20);
                            }
                            if (byte_254530A10)
                              v1624 = byte_254530A18 == 0;
                            else
                              v1624 = 0;
                            if (!v1624)
                            {
                              v1626 = qword_2545309E8;
                              for (i18 = qword_2545309F0; v1626 != i18; v1626 += 16)
                                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v1626)(*(_QWORD *)(v1626 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                            }
                            v1627 = atomic_load((unsigned __int8 *)&qword_254530A20);
                            if ((v1627 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                            {
                              __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                              __cxa_guard_release(&qword_254530A20);
                            }
                            v1571 = v1701;
                            if (!byte_254530A10)
                              goto LABEL_2533;
                            qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                          }
                          memmove(v1621, v1620, v1705);
                          v1620 += 4 * v1707;
                          v1621 += 4 * v1708;
                          if (++v1622 == v1704)
                            goto LABEL_2413;
                        }
                      }
                      goto LABEL_2438;
                    }
LABEL_2413:
                    if (!(_DWORD)v1697 || v1620)
                    {
                      if (!(_DWORD)v1697)
                        goto LABEL_2438;
                    }
                    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
LABEL_2533:
                      abort();
                    }
                    memmove(v1621, v1620, v1705);
                    goto LABEL_2438;
                  }
                }
LABEL_2364:
                if (!LODWORD(memptr[1]) || !HIDWORD(memptr[1]) || !(_DWORD)v1858)
                  goto LABEL_2438;
                v1709 = v1553;
                v1584 = LODWORD(memptr[1]) - 1;
                v1585 = v1572;
                v1586 = HIDWORD(memptr[1]) - 1;
                v1587 = DWORD2(v1858);
                v1588 = *(unsigned int *)&__p[24];
                v1589 = memptr[0];
                v1590 = *(_DWORD **)__p;
                v1591 = v1858 - 1;
                if ((_DWORD)v1858 == 1)
                {
                  v1706 = v1572;
                  v1700 = v1571;
                  if (HIDWORD(memptr[1]) != 1)
                    goto LABEL_2378;
                  v1585 = v1572;
LABEL_2422:
                  if (v1584)
                  {
                    v1633 = 4 * v1576;
                    do
                    {
                      *v1590 = *v1589;
                      v1589 = (_DWORD *)((char *)v1589 + v1633);
                      v1590 += v1585;
                      --v1584;
                    }
                    while (v1584);
                  }
                }
                else
                {
                  v1592 = *(unsigned int *)&__p[28];
                  v1593 = HIDWORD(v1858);
                  if (HIDWORD(memptr[1]) == 1)
                  {
                    if (LODWORD(memptr[1]) != 1)
                    {
                      v1628 = 0;
                      v1629 = 4 * *(unsigned int *)&__p[28];
                      do
                      {
                        v1630 = v1590;
                        v1631 = v1589;
                        v1632 = v1584;
                        do
                        {
                          *v1630 = *v1631;
                          v1631 += v1576;
                          v1630 += v1585;
                          --v1632;
                        }
                        while (v1632);
                        *v1630 = *v1631;
                        v1589 += v1593;
                        v1590 = (_DWORD *)((char *)v1590 + v1629);
                        ++v1628;
                      }
                      while (v1628 != v1591);
                      goto LABEL_2422;
                    }
                    do
                    {
                      *v1590 = *v1589;
                      v1589 += v1593;
                      v1590 += v1592;
                      --v1591;
                    }
                    while (v1591);
                  }
                  else
                  {
                    v1594 = 4 * HIDWORD(v1858);
                    v1595 = 4 * DWORD2(v1858);
                    v1596 = 4 * *(unsigned int *)&__p[28];
                    v1597 = 4 * *(unsigned int *)&__p[24];
                    if (LODWORD(memptr[1]) == 1)
                    {
                      v1634 = 0;
                      do
                      {
                        v1635 = v1590;
                        v1636 = v1589;
                        v1637 = v1586;
                        do
                        {
                          *v1635 = *v1636;
                          v1636 = (_DWORD *)((char *)v1636 + v1595);
                          v1635 = (_DWORD *)((char *)v1635 + v1597);
                          --v1637;
                        }
                        while (v1637);
                        *v1635 = *v1636;
                        v1589 = (_DWORD *)((char *)v1589 + v1594);
                        v1590 = (_DWORD *)((char *)v1590 + v1596);
                        ++v1634;
                      }
                      while (v1634 != v1591);
                    }
                    else
                    {
                      v1700 = v1571;
                      v1598 = 0;
                      v1599 = 4 * v1576;
                      v1706 = v1585;
                      v1600 = 4 * v1585;
                      v1601 = (char *)memptr[0] + v1595;
                      v1602 = *(_QWORD *)__p + v1597;
                      do
                      {
                        v1603 = 0;
                        v1604 = (_DWORD *)v1602;
                        v1605 = v1601;
                        v1606 = v1590;
                        v1607 = v1589;
                        do
                        {
                          v1608 = v1605;
                          v1609 = v1604;
                          v1610 = v1606;
                          v1611 = v1607;
                          v1612 = v1584;
                          do
                          {
                            *v1610 = *v1611;
                            v1611 = (_DWORD *)((char *)v1611 + v1599);
                            v1610 = (_DWORD *)((char *)v1610 + v1600);
                            --v1612;
                          }
                          while (v1612);
                          *v1610 = *v1611;
                          v1607 = (_DWORD *)((char *)v1607 + v1595);
                          v1606 = (_DWORD *)((char *)v1606 + v1597);
                          ++v1603;
                          v1605 = &v1608[(unint64_t)v1595 / 4];
                          v1604 = &v1609[(unint64_t)v1597 / 4];
                        }
                        while (v1603 != v1586);
                        v1613 = v1584;
                        do
                        {
                          *v1609 = *v1608;
                          v1608 = (_DWORD *)((char *)v1608 + v1599);
                          v1609 = (_DWORD *)((char *)v1609 + v1600);
                          --v1613;
                        }
                        while (v1613);
                        *v1609 = *v1608;
                        v1589 = (_DWORD *)((char *)v1589 + v1594);
                        v1590 = (_DWORD *)((char *)v1590 + v1596);
                        ++v1598;
                        v1601 += v1594;
                        v1602 += v1596;
                      }
                      while (v1598 != v1591);
LABEL_2378:
                      v1571 = v1700;
                      v1585 = v1706;
                      if (v1584)
                      {
                        v1614 = 0;
                        v1615 = 4 * v1587;
                        v1616 = 4 * v1588;
                        do
                        {
                          v1617 = v1590;
                          v1618 = v1589;
                          v1619 = v1584;
                          do
                          {
                            *v1617 = *v1618;
                            v1618 += v1576;
                            v1617 += v1706;
                            --v1619;
                          }
                          while (v1619);
                          *v1617 = *v1618;
                          v1589 = (_DWORD *)((char *)v1589 + v1615);
                          v1590 = (_DWORD *)((char *)v1590 + v1616);
                          ++v1614;
                        }
                        while (v1614 != v1586);
                        goto LABEL_2422;
                      }
                    }
                    do
                    {
                      *v1590 = *v1589;
                      v1589 += v1587;
                      v1590 += v1588;
                      --v1586;
                    }
                    while (v1586);
                  }
                }
                *v1590 = *v1589;
                v1553 = v1709;
                goto LABEL_2438;
              }
LABEL_2439:
              v1638 = v1553;
              v1639 = v1571;
              v1640 = (char *)v1870[1] + 528 * v1532;
              *((_QWORD *)v1640 + 22) = v1773;
              v1641 = v1640 + 176;
              *((_DWORD *)v1641 + 2) = v1743;
              *(_QWORD *)(v1641 + 12) = v1749;
              *((_DWORD *)v1641 + 5) = v1765;
              v1641[24] = 0;
              v1641[36] = 0;
              *((_QWORD *)v1641 + 8) = v1758;
              *((_DWORD *)v1641 + 18) = v1638;
              *(_QWORD *)(v1641 + 76) = 4 * v1749;
              *((_DWORD *)v1641 + 21) = 4 * v1765;
              *((_QWORD *)v1641 + 5) = v1822;
              v1642 = (void *)*((_QWORD *)v1641 + 6);
              if (v1642)
                free(v1642);
              *((_QWORD *)v1641 + 6) = v1639;
              *((_QWORD *)v1641 + 7) = v1307;
              if (!v1711)
              {
                v1643 = 0;
                for (i19 = 0; i19 != v1533; ++i19)
                {
                  v1645 = 0;
                  v1646 = v1643;
                  do
                  {
                    v1647 = v1870[1];
                    v1648 = (char *)v1870[1] + 528 * v1532;
                    v1649 = *((_DWORD *)v1648 + 47) * v1645 + *((_DWORD *)v1648 + 48) * i19;
                    v1650 = *((_QWORD *)v1648 + 28);
                    v1651 = *(float *)(v1650 + 4 * v1649);
                    if (v1651 > 0.2)
                    {
                      *(_BYTE *)(*((_QWORD *)v1870[1] + 66 * v1532 + 12) + v1646) = vcvts_n_s32_f32(v1651, 7uLL);
                      v1647 = v1870[1];
                      v1652 = (char *)v1870[1] + 528 * v1532;
                      v1653 = *((_DWORD *)v1652 + 47);
                      v1654 = *((_DWORD *)v1652 + 48);
                      v1650 = *((_QWORD *)v1652 + 28);
                      v1649 = v1653 * v1645 + v1654 * i19;
                    }
                    v1655 = v1647[132 * v1532 + 49];
                    v1656 = *(float *)(v1650 + 4 * (v1655 + v1649));
                    if (v1656 <= 0.2)
                    {
                      v1657 = *(float *)(v1650 + 4 * (v1649 + 2 * v1655));
                      if (v1657 <= 0.2)
                        goto LABEL_2445;
                    }
                    else
                    {
                      *(_BYTE *)(*(_QWORD *)&v1647[132 * v1532 + 24] + v1646 + 1) = (int)(float)(v1656 * 255.0);
                      v1647 = v1870[1];
                      v1657 = *(float *)(*((_QWORD *)v1870[1] + 66 * v1532 + 28)
                                       + 4
                                       * (*((_DWORD *)v1870[1] + 132 * v1532 + 47) * v1645
                                                      + *((_DWORD *)v1870[1] + 132 * v1532 + 48) * i19
                                                      + 2 * *((_DWORD *)v1870[1] + 132 * v1532 + 49)));
                      if (v1657 <= 0.2)
                        goto LABEL_2445;
                    }
                    *(_BYTE *)(*(_QWORD *)&v1647[132 * v1532 + 24] + v1646 + 2) = (int)(float)(v1657 * 255.0);
LABEL_2445:
                    ++v1645;
                    v1646 += 3;
                  }
                  while (v1534 != v1645);
                  v1643 += 3 * v1534;
                }
              }
              ++v1532;
            }
            while (v1532 != a3);
          }
        }
        v1658 = v1796;
        v1659 = v1796[1];
        if (v1659)
        {
          do
          {
            v1660 = (uint64_t ***)v1659;
            v1659 = (uint64_t **)*v1659;
          }
          while (v1659);
        }
        else
        {
          do
          {
            v1660 = (uint64_t ***)v1658[2];
            _ZF = *v1660 == (uint64_t **)v1658;
            v1658 = v1660;
          }
          while (!_ZF);
        }
        v1176 = v1660;
      }
      while (v1660 != &v1868);
    }
    v1661 = *(_QWORD *)(a8 + 8);
    if (v1661 >= *(_QWORD *)(a8 + 16))
    {
      v1664 = sub_207D43FFC((void **)a8, (uint64_t)v1870);
    }
    else
    {
      *(void **)v1661 = v1870[0];
      *(_QWORD *)(v1661 + 8) = 0;
      *(_QWORD *)(v1661 + 16) = 0;
      *(_QWORD *)(v1661 + 24) = 0;
      *(_OWORD *)(v1661 + 8) = *(_OWORD *)&v1870[1];
      *(void **)(v1661 + 24) = v1870[3];
      memset(&v1870[1], 0, 24);
      v1663 = *(_OWORD *)&v1870[6];
      v1662 = *(_OWORD *)&v1870[8];
      *(_OWORD *)(v1661 + 32) = *(_OWORD *)&v1870[4];
      *(_OWORD *)(v1661 + 48) = v1663;
      *(_OWORD *)(v1661 + 64) = v1662;
      v1664 = (char *)(v1661 + 80);
    }
    *(_QWORD *)(a8 + 8) = v1664;
    sub_207DC9CD4(v1865);
    sub_207DC9C34((uint64_t)v1868);
    v1665 = v1870[1];
    if (v1870[1])
    {
      v1666 = v1870[2];
      v1667 = v1870[1];
      if (v1870[2] != v1870[1])
      {
        do
          v1666 = sub_207D441B8(v1666 - 66);
        while (v1666 != v1665);
        v1667 = v1870[1];
      }
      v1870[2] = v1665;
      operator delete(v1667);
    }
    kdebug_trace();
LABEL_2476:
    *(float32x4_t *)(v1703 + 456) = v1690;
    *(float32x4_t *)(v1703 + 472) = v1691;
    v1668.i32[3] = v1692.i32[3];
    *(float32x4_t *)(v1703 + 488) = v1692;
    *(float32x4_t *)(v1703 + 504) = v1693;
    v1669 = (float *)v1703;
    *(_DWORD *)(v1703 + 928) = v1696;
    v1670.i32[1] = v1699.i32[1];
    *(_DWORD *)(v1703 + 88) = v1699.i32[0];
    if (*(_BYTE *)(a7 + 64))
    {
      if (*(_BYTE *)(v1703 + 440) && *(_BYTE *)(v1703 + 1024))
      {
        v1671 = *(double *)(v1703 + 1016);
        v1668.i32[3] = v1693.i32[3];
        v1670 = vmulq_n_f32(v1693, v1671);
        v1670.i32[3] = v1693.i32[3];
        v1693 = v1670;
      }
      v1668.i64[0] = *(_QWORD *)a7;
      v1668.i32[2] = *(_DWORD *)(a7 + 8);
      v241.i64[0] = *(_QWORD *)(a7 + 16);
      v241.i32[2] = *(_DWORD *)(a7 + 24);
      v1672 = *(float32x2_t *)(a7 + 32);
      v1670.i32[0] = *(_DWORD *)(a7 + 40);
      v249.i64[0] = *(_QWORD *)(a7 + 48);
      v249.i32[2] = *(_DWORD *)(a7 + 56);
      if (!*(_BYTE *)(v1703 + 652))
        *(_BYTE *)(v1703 + 652) = 1;
      v1673.i64[0] = vzip1q_s32(v1668, (int32x4_t)v241).u64[0];
      v1674 = (int8x16_t)vnegq_f32((float32x4_t)v249);
      v1673.i64[1] = v1672.u32[0];
      v1675 = (int8x16_t)vtrn2q_s32(v1668, (int32x4_t)v241);
      v1675.i32[2] = v1672.i32[1];
      v1676 = (int8x16_t)vzip2q_s32(v1668, (int32x4_t)v241);
      *(float32x2_t *)v1677.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v1673.f32, *(float *)v1674.i32), *(float32x2_t *)v1675.i8, *(float32x2_t *)v249.i8, 1), *(float32x2_t *)v1676.i8, (float32x4_t)v249, 2);
      v1676.i32[2] = v1670.i32[0];
      v1677.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v1672, *(float32x2_t *)v1674.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v1672, 1), *(float32x2_t *)v249.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v1674, v1674, 8uLL), *(float32x2_t *)v1670.f32).u32[0]);
      v1678.i32[3] = 0;
      v1678.i32[0] = v1675.i32[0];
      v1680 = vextq_s8(vextq_s8(v1675, v1675, 0xCuLL), v1676, 8uLL);
      v1679.i64[0] = v1680.i64[1];
      *(uint64_t *)((char *)v1678.i64 + 4) = v1680.i64[0];
      v1679.i64[1] = vdupq_laneq_s32((int32x4_t)v1676, 2).u32[0];
      *(float32x4_t *)(v1703 + 588) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1673, v1690.f32[0]), v1678, *(float32x2_t *)v1690.f32, 1), v1679, v1690, 2), v1677, v1690, 3);
      *(float32x4_t *)(v1703 + 604) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1673, v1691.f32[0]), v1678, *(float32x2_t *)v1691.f32, 1), v1679, v1691, 2), v1677, v1691, 3);
      *(float32x4_t *)(v1703 + 620) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1673, v1692.f32[0]), v1678, *(float32x2_t *)v1692.f32, 1), v1679, v1692, 2), v1677, v1692, 3);
      *(float32x4_t *)(v1703 + 636) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1673, v1693.f32[0]), v1678, *(float32x2_t *)v1693.f32, 1), v1679, v1693, 2), v1677, v1693, 3);
      v1669 = (float *)v1703;
    }
    *((_DWORD *)v1669 + 30) = v318;
    v1681 = v1879;
    v1669[23] = v1871;
    *((_DWORD *)v1669 + 24) = v1681;
    __p[0] = 0;
    __p[24] = 0;
    v1682 = (uint64_t *)(a13 + 16);
    do
    {
      v1682 = (uint64_t *)*v1682;
      if (!v1682)
      {
        LOBYTE(v1823[0]) = 0;
        goto LABEL_2494;
      }
    }
    while (v1682[5] != *(_QWORD *)(v1703 + 32));
    if (*((char *)v1682 + 39) < 0)
    {
      sub_207CA40D8(__p, (void *)v1682[2], v1682[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v1682 + 1);
      *(_QWORD *)&__p[16] = v1682[4];
    }
    __p[24] = 1;
    LOBYTE(v1823[0]) = 0;
    v1825 = 0;
    if ((__p[23] & 0x80000000) != 0)
    {
      sub_207CA40D8(v1823, *(void **)__p, *(unint64_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v1823 = *(_OWORD *)__p;
      v1824 = *(_QWORD *)&__p[16];
    }
    LOBYTE(v1682) = 1;
LABEL_2494:
    v1825 = (char)v1682;
    sub_207D0CAFC(v1703 + 56, v1823);
    if (v1825 && SHIBYTE(v1824) < 0)
      operator delete(v1823[0]);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    sub_207DC9BDC(v1873);
    if (v1876[1])
      operator delete(v1876[1]);
    if (v1875[0])
      operator delete(v1875[0]);
    if (v1880)
    {
      v1881 = (float32x4_t *)v1880;
      operator delete(v1880);
    }
    result = kdebug_trace();
    ++v1695;
  }
  while (v1695 != v1685);
LABEL_2507:
  *v1683 = 0;
  v1683[1] = 0;
  return result;
}

void sub_207DC33AC(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;

  sub_207DC9BDC((char *)STACK[0x740]);
  if (STACK[0x768])
  {
    operator delete((void *)STACK[0x768]);
    v2 = (void *)STACK[0x750];
    if (!STACK[0x750])
    {
LABEL_3:
      v3 = (void *)STACK[0x790];
      if (!STACK[0x790])
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v2 = (void *)STACK[0x750];
    if (!STACK[0x750])
      goto LABEL_3;
  }
  operator delete(v2);
  v3 = (void *)STACK[0x790];
  if (!STACK[0x790])
  {
LABEL_5:
    kdebug_trace();
    _Unwind_Resume(a1);
  }
LABEL_4:
  STACK[0x798] = (unint64_t)v3;
  operator delete(v3);
  goto LABEL_5;
}

uint64_t sub_207DC3CDC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 112))
  {
    v2 = *(std::__shared_weak_count **)(result + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_207DC3D4C@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, char **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>, double a9@<D0>, float32x2_t **a10, char a11, uint64_t **a12, char a13, int32x4_t *a14, uint64_t a15)
{
  char *v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  void *v43;
  char *v44;
  void (***v45)(char *);
  void (**v46)(char *);
  BOOL v47;
  unint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _OWORD v56[4];
  char v57;
  int32x4_t v58[4];
  char v59;
  __int128 v60;
  void *__p;
  char *v62;
  uint64_t v63;
  unsigned int **v64;
  unsigned int *v65[2];
  uint64_t v66[3];
  void *v67;
  _QWORD *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  int v72;

  v70 = 0u;
  v71 = 0u;
  v72 = 733236992;
  kdebug_trace();
  v23 = *a5;
  v24 = a5[1];
  v68 = 0;
  v69 = 0;
  v67 = 0;
  v25 = v24 - v23;
  if (v24 != v23)
  {
    if (v25 < 0)
      sub_207CA420C();
    v26 = operator new(v24 - v23);
    v67 = v26;
    v69 = (char *)v26 + 8 * (v25 >> 3);
    if ((unint64_t)(v25 - 8) < 0x18)
      goto LABEL_8;
    if ((unint64_t)((char *)v26 - v23) < 0x20)
      goto LABEL_8;
    v27 = ((unint64_t)(v25 - 8) >> 3) + 1;
    v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v23[v28];
    v30 = (_QWORD *)((char *)v26 + v28);
    v31 = v26 + 1;
    v32 = (__int128 *)(v23 + 16);
    v33 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v34 = *v32;
      *(v31 - 1) = *(v32 - 1);
      *v31 = v34;
      v31 += 2;
      v32 += 2;
      v33 -= 4;
    }
    while (v33);
    v23 = v29;
    v26 = v30;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_8:
      v30 = v26;
      do
      {
        v35 = *(_QWORD *)v23;
        v23 += 8;
        *v30++ = v35;
      }
      while (v23 != v24);
    }
    v68 = v30;
  }
  memset(v66, 0, sizeof(v66));
  v65[0] = 0;
  v65[1] = 0;
  v64 = v65;
  __p = 0;
  v62 = 0;
  v63 = 0;
  v58[0].i8[0] = 0;
  v59 = 0;
  if (a14[4].i8[0])
  {
    v36 = a14[1];
    v58[0] = *a14;
    v58[1] = v36;
    v37 = a14[3];
    v58[2] = a14[2];
    v58[3] = v37;
    v59 = 1;
  }
  sub_207DB3B44((uint64_t)&v60, (uint64_t)a1, a2, a6, a3, a4, &v67, a7, a9, v66, (uint64_t **)&v64, &__p, a10, a11, v58);
  v38 = v60;
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_18;
  v39 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
  do
    v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
  do
    v41 = __ldaxr(v39);
  while (__stlxr(v41 - 1, v39));
  if (!v41)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 16))(*((_QWORD *)&v38 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
    if ((_QWORD)v38)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if ((_QWORD)v38)
    {
LABEL_19:
      *a8 = v60;
      goto LABEL_20;
    }
  }
  v49 = a1[54];
  LOBYTE(v56[0]) = 0;
  v57 = 0;
  if (a14[4].i8[0])
  {
    v50 = a14[1];
    v56[0] = *a14;
    v56[1] = v50;
    v51 = a14[3];
    v56[2] = a14[2];
    v56[3] = v51;
    v57 = 1;
  }
  sub_207DB86C4((uint64_t)a8, (uint64_t)a1, v49, a5, v66, &v64, a6, a7, (uint64_t *)&__p, a12, a13, (char *)v56, a15);
  sub_207DAFD24((uint64_t)(a1 + 85), *a1, (uint64_t)&v64, a2, a12, a13, a9);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
LABEL_20:
  v42 = (char *)__p;
  if (__p)
  {
    v43 = __p;
    if (v62 != __p)
    {
      v44 = v62 - 144;
      v45 = (void (***)(char *))(v62 - 144);
      do
      {
        v46 = *v45;
        v45 -= 18;
        (*v46)(v44);
        v47 = v44 == v42;
        v44 = (char *)v45;
      }
      while (!v47);
      v43 = __p;
    }
    v62 = v42;
    operator delete(v43);
  }
  sub_207DC9DE0(v65[0]);
  if (v66[0])
    operator delete((void *)v66[0]);
  if (v67)
    operator delete(v67);
  return kdebug_trace();
}

void sub_207DC40C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v42;
  void *v43;

  sub_207C99D78(v39);
  sub_207C99D78((uint64_t)&a37);
  sub_207DC4158(&a39);
  sub_207DC9DE0(*(unsigned int **)(v40 - 208));
  v42 = *(void **)(v40 - 192);
  if (v42)
  {
    operator delete(v42);
    v43 = *(void **)(v40 - 168);
    if (!v43)
    {
LABEL_3:
      sub_207CD822C(v40 - 144);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v43 = *(void **)(v40 - 168);
    if (!v43)
      goto LABEL_3;
  }
  operator delete(v43);
  sub_207CD822C(v40 - 144);
  _Unwind_Resume(a1);
}

void sub_207DC4144(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CD822C(v1 - 144);
  _Unwind_Resume(a1);
}

void **sub_207DC4158(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3 - 144;
      v6 = v3 - 144;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 144;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_207DC41C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 __p;
  uint64_t v16;
  unsigned __int8 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;

  if (*(_BYTE *)(a1 + 816))
  {
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  LOBYTE(v5) = 0;
  v13 = 0;
  sub_207D2365C(0xCu, &v5, (uint64_t)&v14);
  *(_OWORD *)a2 = v14;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v24)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v13)
      return;
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v3 = v17;
  if (v17)
  {
    *(_OWORD *)(a2 + 16) = __p;
    *(_QWORD *)(a2 + 32) = v16;
    v16 = 0;
    __p = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v23)
  {
    v4 = v20;
    *(_QWORD *)(a2 + 64) = v19;
    *(_OWORD *)(a2 + 48) = v18;
    v18 = 0uLL;
    *(_QWORD *)(a2 + 72) = v4;
    *(_OWORD *)(a2 + 80) = v21;
    *(_QWORD *)(a2 + 96) = v22;
    v19 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v3 && SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  if (v13)
  {
LABEL_15:
    if (v12)
    {
      if (v11 < 0)
        operator delete(v10);
      if (v9 < 0)
        operator delete(v8);
    }
    if (v7)
    {
      if (v6 < 0)
        operator delete((void *)v5);
    }
  }
}

void sub_207DC434C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_207DC4360(uint64_t **a1, const void **a2)
{
  uint64_t **v2;
  int v3;
  const void *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  size_t v9;
  int v10;
  int v11;

  if (!a1)
LABEL_27:
    sub_207CA4018("map::at:  key not found");
  v2 = a1;
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = a2;
  else
    v4 = *a2;
  if (v3 >= 0)
    v5 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  else
    v5 = (uint64_t *)a2[1];
  while (1)
  {
    while (1)
    {
      v6 = *((char *)v2 + 55);
      v7 = v6 >= 0 ? (uint64_t *)(v2 + 4) : v2[4];
      v8 = v6 >= 0 ? (uint64_t *)*((unsigned __int8 *)v2 + 55) : v2[5];
      v9 = (size_t)(v8 >= v5 ? v5 : v8);
      v10 = memcmp(v4, v7, v9);
      if (v10)
        break;
      if (v5 >= v8)
        goto LABEL_22;
LABEL_8:
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_27;
    }
    if (v10 < 0)
      goto LABEL_8;
LABEL_22:
    v11 = memcmp(v7, v4, v9);
    if (v11)
    {
      if ((v11 & 0x80000000) == 0)
        return (uint64_t *)(v2 + 7);
      goto LABEL_26;
    }
    if (v8 >= v5)
      return (uint64_t *)(v2 + 7);
LABEL_26:
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_27;
  }
}

char ***sub_207DC443C(char ***a1, __int128 *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v10 = *v4;
    v11 = 0x8E38E38E38E38E39 * ((v6 - *v4) >> 2);
    v12 = v11 + 1;
    if (v11 + 1 > 0x71C71C71C71C71CLL)
      sub_207CA420C();
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (_QWORD)v10) >> 2);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x38E38E38E38E38ELL)
      v14 = 0x71C71C71C71C71CLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x71C71C71C71C71CLL)
        sub_207CA3AB8();
      v15 = (char *)operator new(36 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[36 * v11];
    v17 = a2[1];
    *(_OWORD *)v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((_DWORD *)v16 + 8) = *((_DWORD *)a2 + 8);
    v9 = v16 + 36;
    if (v6 != v10)
    {
      do
      {
        v18 = *(_OWORD *)(v6 - 36);
        v19 = *(_OWORD *)(v6 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v6 - 1);
        *(_OWORD *)(v16 - 20) = v19;
        *(_OWORD *)(v16 - 36) = v18;
        v16 -= 36;
        v6 -= 36;
      }
      while (v6 != v10);
      v6 = *v4;
    }
    *v4 = v16;
    v4[1] = v9;
    v4[2] = &v15[36 * v14];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *((_DWORD *)v6 + 8) = *((_DWORD *)a2 + 8);
    *(_OWORD *)v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    v9 = v6 + 36;
  }
  v4[1] = v9;
  return a1;
}

uint64_t sub_207DC45A8(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  BOOL v16;
  uint64_t v18;
  __int128 v19;

  v3 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    sub_207CA420C();
  if (0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3)
    v6 = 0x1C71C71C71C71C7;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7)
      sub_207CA3AB8();
    v7 = (char *)operator new(144 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[144 * v3];
  *((_QWORD *)&v19 + 1) = &v7[144 * v6];
  sub_207D2E4A8(v18, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_207D5D250(v8 + v18, v8 + i))
    v8 -= 144;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = v18 + v8;
  *(_QWORD *)&v19 = v18 + 144;
  *(_OWORD *)(a1 + 1) = v19;
  if (v11 != v12)
  {
    v13 = v11 - 144;
    v14 = v11 - 144;
    do
    {
      v15 = *(void (***)(char *))v14;
      v14 -= 144;
      (*v15)(v13);
      v16 = v13 == v12;
      v13 = v14;
    }
    while (!v16);
  }
  if (v12)
    operator delete(v12);
  return v18 + 144;
}

void sub_207DC4730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207DC477C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DC477C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 144);
    *(_QWORD *)(a1 + 16) = i - 144;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_207DC47D0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  float v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  unint64_t v35;
  float v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  BOOL v56;
  unint64_t v57;
  float v58;
  unint64_t v59;
  unint64_t v60;
  float v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *v76;
  void *v77;
  float v78;
  float v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  void *v97;
  _OWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  float v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  float v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  unint64_t v132;
  uint64_t v133;
  int64_t v134;
  __int128 *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  float v142;
  uint64_t v143;
  __int128 v144;
  float v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  _OWORD *v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  void *v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  float v162;
  __int128 v163;
  uint64_t *v164;
  uint64_t *v165;
  __int128 v166;
  __int128 v167;
  uint64_t *v168;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;

LABEL_1:
  v168 = (uint64_t *)(a2 - 104);
  v164 = (uint64_t *)(a2 - 312);
  v165 = (uint64_t *)(a2 - 208);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v78 = *(float *)(a2 - 96);
        v79 = *(float *)(v7 + 8);
        if (v78 > v79)
        {
          v80 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)(a2 - 104);
          *(_QWORD *)(a2 - 104) = v80;
          *(float *)(v7 + 8) = v78;
          *(float *)(a2 - 96) = v79;
          v206 = *(_OWORD *)(v7 + 44);
          v214 = *(_OWORD *)(v7 + 60);
          v190 = *(_OWORD *)(v7 + 12);
          v198 = *(_OWORD *)(v7 + 28);
          v81 = *(_OWORD *)(a2 - 92);
          v82 = *(_OWORD *)(a2 - 76);
          v83 = *(_OWORD *)(a2 - 60);
          *(_OWORD *)(v7 + 60) = *(_OWORD *)(a2 - 44);
          *(_OWORD *)(v7 + 44) = v83;
          *(_OWORD *)(v7 + 28) = v82;
          *(_OWORD *)(v7 + 12) = v81;
          *(_OWORD *)(a2 - 44) = v214;
          *(_OWORD *)(a2 - 60) = v206;
          *(_OWORD *)(a2 - 76) = v198;
          *(_OWORD *)(a2 - 92) = v190;
          v84 = *(_QWORD *)(v7 + 80);
          *(_QWORD *)(v7 + 80) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v84;
          v85 = *(_QWORD *)(v7 + 88);
          *(_QWORD *)(v7 + 88) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v85;
          v86 = *(_QWORD *)(v7 + 96);
          *(_QWORD *)(v7 + 96) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v86;
        }
        return;
      case 3:
        sub_207DC5A0C((uint64_t *)v7, (uint64_t *)(v7 + 104), v168);
        return;
      case 4:
        sub_207DC5FF0(v7, v7 + 104, v7 + 208, (uint64_t)v168);
        return;
      case 5:
        sub_207DC575C(v7, v7 + 104, v7 + 208, v7 + 312, (uint64_t)v168);
        return;
      default:
        if (v8 <= 2495)
        {
          v87 = v7 + 104;
          v89 = v7 == a2 || v87 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v89)
            {
              v90 = 0;
              v91 = v7;
              do
              {
                v92 = v87;
                v93 = *(float *)(v91 + 112);
                if (v93 > *(float *)(v91 + 8))
                {
                  v94 = *(_QWORD *)v87;
                  v207 = *(_OWORD *)(v91 + 148);
                  v215 = *(_OWORD *)(v91 + 164);
                  v191 = *(_OWORD *)(v91 + 116);
                  v199 = *(_OWORD *)(v91 + 132);
                  v95 = *(_QWORD *)(v91 + 184);
                  v96 = *(_OWORD *)(v91 + 192);
                  *(_QWORD *)(v91 + 192) = 0;
                  *(_QWORD *)(v91 + 200) = 0;
                  *(_QWORD *)(v91 + 184) = 0;
                  v97 = *(void **)(v87 + 80);
                  *(_QWORD *)v87 = *(_QWORD *)v91;
                  *(_DWORD *)(v87 + 8) = *(_DWORD *)(v91 + 8);
                  *(_OWORD *)(v87 + 44) = *(_OWORD *)(v91 + 44);
                  *(_OWORD *)(v87 + 28) = *(_OWORD *)(v91 + 28);
                  *(_OWORD *)(v87 + 12) = *(_OWORD *)(v91 + 12);
                  *(_OWORD *)(v87 + 60) = *(_OWORD *)(v91 + 60);
                  if (v97)
                  {
                    *(_QWORD *)(v87 + 88) = v97;
                    v173 = v96;
                    operator delete(v97);
                    v96 = v173;
                    *(_QWORD *)(v92 + 88) = 0;
                    *(_QWORD *)(v92 + 96) = 0;
                  }
                  v98 = (_OWORD *)(v91 + 12);
                  v99 = (_QWORD *)(v91 + 80);
                  *(_OWORD *)(v92 + 80) = *(_OWORD *)(v91 + 80);
                  *(_QWORD *)(v92 + 96) = *(_QWORD *)(v91 + 96);
                  *(_QWORD *)(v91 + 80) = 0;
                  *(_QWORD *)(v91 + 88) = 0;
                  *(_QWORD *)(v91 + 96) = 0;
                  if (v91 == v7)
                  {
                    v91 = v7;
                  }
                  else if (v93 > *(float *)(v91 - 96))
                  {
                    v100 = v90;
                    while (1)
                    {
                      v101 = v7 + v100;
                      v102 = *(_QWORD *)(v7 + v100 - 104);
                      *(_DWORD *)(v101 + 8) = *(_DWORD *)(v7 + v100 - 96);
                      *(_OWORD *)(v101 + 12) = *(_OWORD *)(v7 + v100 - 92);
                      *(_OWORD *)(v101 + 28) = *(_OWORD *)(v7 + v100 - 76);
                      *(_OWORD *)(v101 + 44) = *(_OWORD *)(v7 + v100 - 60);
                      *(_OWORD *)(v101 + 60) = *(_OWORD *)(v7 + v100 - 44);
                      *(_OWORD *)(v101 + 80) = *(_OWORD *)(v7 + v100 - 24);
                      *(_QWORD *)(v101 + 96) = *(_QWORD *)(v7 + v100 - 8);
                      *(_QWORD *)(v101 - 24) = 0;
                      *(_QWORD *)(v101 - 16) = 0;
                      *(_QWORD *)(v101 - 8) = 0;
                      *(_QWORD *)v101 = v102;
                      v100 -= 104;
                      if (!v100)
                        break;
                      if (v93 <= *(float *)(v101 - 200))
                      {
                        v91 = v7 + v100;
                        goto LABEL_87;
                      }
                    }
                    v91 = v7;
LABEL_87:
                    v99 = (_QWORD *)(v101 - 24);
                    v98 = (_OWORD *)(v101 - 92);
                  }
                  *(_QWORD *)v91 = v94;
                  *(float *)(v91 + 8) = v93;
                  v98[2] = v207;
                  v98[3] = v215;
                  *v98 = v191;
                  v98[1] = v199;
                  *v99 = v95;
                  *(_OWORD *)(v91 + 88) = v96;
                }
                v87 = v92 + 104;
                v90 += 104;
                v91 = v92;
              }
              while (v92 + 104 != a2);
            }
          }
          else if (!v89)
          {
            v150 = v7 - 200;
            do
            {
              v152 = v87;
              v153 = *(float *)(a1 + 112);
              if (v153 > *(float *)(a1 + 8))
              {
                v154 = *(_QWORD *)v87;
                v210 = *(_OWORD *)(a1 + 148);
                v218 = *(_OWORD *)(a1 + 164);
                v194 = *(_OWORD *)(a1 + 116);
                v202 = *(_OWORD *)(a1 + 132);
                v155 = *(_QWORD *)(a1 + 184);
                v156 = *(_OWORD *)(a1 + 192);
                *(_QWORD *)(a1 + 192) = 0;
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 184) = 0;
                v157 = *(void **)(v87 + 80);
                *(_QWORD *)v87 = *(_QWORD *)a1;
                *(_DWORD *)(v87 + 8) = *(_DWORD *)(a1 + 8);
                *(_OWORD *)(v87 + 44) = *(_OWORD *)(a1 + 44);
                *(_OWORD *)(v87 + 28) = *(_OWORD *)(a1 + 28);
                *(_OWORD *)(v87 + 12) = *(_OWORD *)(a1 + 12);
                *(_OWORD *)(v87 + 60) = *(_OWORD *)(a1 + 60);
                if (v157)
                {
                  *(_QWORD *)(v87 + 88) = v157;
                  v174 = v156;
                  operator delete(v157);
                  v156 = v174;
                  *(_QWORD *)(v152 + 88) = 0;
                  *(_QWORD *)(v152 + 96) = 0;
                }
                v158 = (_QWORD *)(a1 + 80);
                *(_OWORD *)(v152 + 80) = *(_OWORD *)(a1 + 80);
                *(_QWORD *)(v152 + 96) = *(_QWORD *)(a1 + 96);
                *(_QWORD *)(a1 + 80) = 0;
                *(_QWORD *)(a1 + 88) = 0;
                *(_QWORD *)(a1 + 96) = 0;
                if (v153 <= *(float *)(a1 - 96))
                {
                  v151 = (_OWORD *)(a1 + 12);
                }
                else
                {
                  v159 = v150;
                  do
                  {
                    v160 = *(_QWORD *)(v159 + 96);
                    *(_DWORD *)(v159 + 208) = *(_DWORD *)(v159 + 104);
                    *(_OWORD *)(v159 + 212) = *(_OWORD *)(v159 + 108);
                    *(_OWORD *)(v159 + 228) = *(_OWORD *)(v159 + 124);
                    *(_OWORD *)(v159 + 244) = *(_OWORD *)(v159 + 140);
                    *(_OWORD *)(v159 + 260) = *(_OWORD *)(v159 + 156);
                    *(_QWORD *)(v159 + 296) = *(_QWORD *)(v159 + 192);
                    v161 = (_OWORD *)(v159 + 280);
                    v162 = *(float *)v159;
                    v163 = *(_OWORD *)(v159 + 176);
                    *(_QWORD *)(v159 + 176) = 0;
                    *(_QWORD *)(v159 + 184) = 0;
                    *(_QWORD *)(v159 + 192) = 0;
                    *(_QWORD *)(v159 + 200) = v160;
                    v159 -= 104;
                    *v161 = v163;
                  }
                  while (v153 > v162);
                  a1 = v159 + 200;
                  v158 = (_QWORD *)(v159 + 280);
                  v151 = (_OWORD *)(v159 + 212);
                }
                *(_QWORD *)a1 = v154;
                *(float *)(a1 + 8) = v153;
                v151[2] = v210;
                v151[3] = v218;
                *v151 = v194;
                v151[1] = v202;
                *v158 = v155;
                *(_OWORD *)(a1 + 88) = v156;
              }
              v87 = v152 + 104;
              v150 += 104;
              a1 = v152;
            }
            while (v152 + 104 != a2);
          }
          return;
        }
        if (a3)
        {
          v10 = (unint64_t)v9 >> 1;
          v11 = v7 + 104 * ((unint64_t)v9 >> 1);
          if ((unint64_t)v8 >= 0x3401)
          {
            sub_207DC5A0C((uint64_t *)a1, (uint64_t *)v11, v168);
            v12 = 104 * v10;
            sub_207DC5A0C((uint64_t *)(a1 + 104), (uint64_t *)(v12 + a1 - 104), v165);
            sub_207DC5A0C((uint64_t *)(a1 + 208), (uint64_t *)(a1 + 104 + v12), v164);
            sub_207DC5A0C((uint64_t *)(v12 + a1 - 104), (uint64_t *)v11, (uint64_t *)(a1 + 104 + v12));
            v13 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v11;
            *(_QWORD *)v11 = v13;
            v14 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = v14;
            v203 = *(_OWORD *)(a1 + 44);
            v211 = *(_OWORD *)(a1 + 60);
            v187 = *(_OWORD *)(a1 + 12);
            v195 = *(_OWORD *)(a1 + 28);
            v15 = *(_OWORD *)(v11 + 12);
            v16 = *(_OWORD *)(v11 + 28);
            v17 = *(_OWORD *)(v11 + 44);
            *(_OWORD *)(a1 + 60) = *(_OWORD *)(v11 + 60);
            *(_OWORD *)(a1 + 44) = v17;
            *(_OWORD *)(a1 + 28) = v16;
            *(_OWORD *)(a1 + 12) = v15;
            *(_OWORD *)(v11 + 60) = v211;
            *(_OWORD *)(v11 + 44) = v203;
            *(_OWORD *)(v11 + 28) = v195;
            *(_OWORD *)(v11 + 12) = v187;
            v18 = *(_OWORD *)(a1 + 80);
            *(_OWORD *)(a1 + 80) = *(_OWORD *)(v11 + 80);
            *(_OWORD *)(v11 + 80) = v18;
            v19 = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v11 + 96);
            *(_QWORD *)(v11 + 96) = v19;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v20 = *(float *)(a1 + 8);
            if (*(float *)(a1 - 96) > v20)
              goto LABEL_14;
            v21 = *(_QWORD *)a1;
            v181 = *(_OWORD *)(a1 + 44);
            v184 = *(_OWORD *)(a1 + 60);
            v175 = *(_OWORD *)(a1 + 12);
            v178 = *(_OWORD *)(a1 + 28);
            v22 = *(_QWORD *)(a1 + 80);
            v23 = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 80) = 0;
            *(_QWORD *)(a1 + 88) = 0;
            *(_QWORD *)(a1 + 96) = 0;
            if (v20 <= *(float *)(a2 - 96))
            {
              v57 = a1 + 104;
              do
              {
                v7 = v57;
                if (v57 >= a2)
                  break;
                v58 = *(float *)(v57 + 8);
                v57 += 104;
              }
              while (v20 <= v58);
            }
            else
            {
              v24 = a1;
              do
              {
                v7 = v24 + 104;
                v25 = *(float *)(v24 + 112);
                v24 += 104;
              }
              while (v20 <= v25);
            }
            v59 = a2;
            if (v7 < a2)
            {
              v60 = a2;
              do
              {
                v59 = v60 - 104;
                v61 = *(float *)(v60 - 96);
                v60 -= 104;
              }
              while (v20 > v61);
            }
            while (v7 < v59)
            {
              v62 = *(_QWORD *)v7;
              *(_QWORD *)v7 = *(_QWORD *)v59;
              *(_QWORD *)v59 = v62;
              v63 = *(_DWORD *)(v7 + 8);
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v59 + 8);
              *(_DWORD *)(v59 + 8) = v63;
              v205 = *(_OWORD *)(v7 + 44);
              v213 = *(_OWORD *)(v7 + 60);
              v189 = *(_OWORD *)(v7 + 12);
              v197 = *(_OWORD *)(v7 + 28);
              v64 = *(_OWORD *)(v59 + 12);
              v65 = *(_OWORD *)(v59 + 28);
              v66 = *(_OWORD *)(v59 + 44);
              *(_OWORD *)(v7 + 60) = *(_OWORD *)(v59 + 60);
              *(_OWORD *)(v7 + 44) = v66;
              *(_OWORD *)(v7 + 28) = v65;
              *(_OWORD *)(v7 + 12) = v64;
              *(_OWORD *)(v59 + 60) = v213;
              *(_OWORD *)(v59 + 44) = v205;
              *(_OWORD *)(v59 + 28) = v197;
              *(_OWORD *)(v59 + 12) = v189;
              v67 = *(_QWORD *)(v7 + 80);
              *(_QWORD *)(v7 + 80) = *(_QWORD *)(v59 + 80);
              *(_QWORD *)(v59 + 80) = v67;
              v68 = *(_QWORD *)(v7 + 88);
              *(_QWORD *)(v7 + 88) = *(_QWORD *)(v59 + 88);
              *(_QWORD *)(v59 + 88) = v68;
              v69 = *(_QWORD *)(v7 + 96);
              *(_QWORD *)(v7 + 96) = *(_QWORD *)(v59 + 96);
              *(_QWORD *)(v59 + 96) = v69;
              do
              {
                v70 = *(float *)(v7 + 112);
                v7 += 104;
              }
              while (v20 <= v70);
              do
              {
                v71 = *(float *)(v59 - 96);
                v59 -= 104;
              }
              while (v20 > v71);
            }
            v72 = (__int128 *)(v7 - 92);
            if (v7 - 104 == a1)
            {
              v77 = *(void **)(v7 - 24);
              *(_QWORD *)a1 = v21;
              *(float *)(v7 - 96) = v20;
              *(_OWORD *)(v7 - 60) = v181;
              *(_OWORD *)(v7 - 44) = v184;
              *v72 = v175;
              *(_OWORD *)(v7 - 76) = v178;
              if (v77)
              {
                *(_QWORD *)(v7 - 16) = v77;
                v172 = v23;
                operator delete(v77);
                v23 = v172;
                *(_QWORD *)(v7 - 24) = 0;
              }
            }
            else
            {
              *(_QWORD *)a1 = *(_QWORD *)(v7 - 104);
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 96);
              v73 = *v72;
              v74 = *(_OWORD *)(v7 - 76);
              v75 = *(_OWORD *)(v7 - 44);
              *(_OWORD *)(a1 + 44) = *(_OWORD *)(v7 - 60);
              *(_OWORD *)(a1 + 60) = v75;
              *(_OWORD *)(a1 + 12) = v73;
              *(_OWORD *)(a1 + 28) = v74;
              v76 = *(void **)(a1 + 80);
              if (v76)
              {
                *(_QWORD *)(a1 + 88) = v76;
                v171 = v23;
                operator delete(v76);
                v23 = v171;
                *(_QWORD *)(a1 + 80) = 0;
                *(_QWORD *)(a1 + 88) = 0;
                *(_QWORD *)(a1 + 96) = 0;
              }
              *(_OWORD *)(a1 + 80) = *(_OWORD *)(v7 - 24);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(v7 - 8);
              *(_QWORD *)(v7 - 24) = 0;
              *(_QWORD *)(v7 - 16) = 0;
              *(_QWORD *)(v7 - 8) = 0;
              *(_QWORD *)(v7 - 104) = v21;
              *(float *)(v7 - 96) = v20;
              *(_OWORD *)(v7 - 60) = v181;
              *(_OWORD *)(v7 - 44) = v184;
              *v72 = v175;
              *(_OWORD *)(v7 - 76) = v178;
            }
            a4 = 0;
            *(_QWORD *)(v7 - 24) = v22;
            *(_OWORD *)(v7 - 16) = v23;
            continue;
          }
          sub_207DC5A0C((uint64_t *)v11, (uint64_t *)a1, v168);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v20 = *(float *)(a1 + 8);
LABEL_14:
          v26 = 0;
          v27 = *(_QWORD *)a1;
          v182 = *(_OWORD *)(a1 + 44);
          v185 = *(_OWORD *)(a1 + 60);
          v176 = *(_OWORD *)(a1 + 12);
          v179 = *(_OWORD *)(a1 + 28);
          v28 = *(_QWORD *)(a1 + 80);
          v29 = *(_OWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          do
          {
            v30 = *(float *)(a1 + v26 + 112);
            v26 += 104;
          }
          while (v30 > v20);
          v31 = a1 + v26;
          v32 = a2;
          if (v26 == 104)
          {
            v35 = a2;
            while (v31 < v35)
            {
              v33 = v35 - 104;
              v36 = *(float *)(v35 - 96);
              v35 -= 104;
              if (v36 > v20)
                goto LABEL_22;
            }
            v33 = v35;
            v7 = v31;
          }
          else
          {
            do
            {
              v33 = v32 - 104;
              v34 = *(float *)(v32 - 96);
              v32 -= 104;
            }
            while (v34 <= v20);
LABEL_22:
            v7 = v31;
            if (v31 < v33)
            {
              v37 = v33;
              do
              {
                v38 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v37;
                *(_QWORD *)v37 = v38;
                v39 = *(_DWORD *)(v7 + 8);
                *(_DWORD *)(v7 + 8) = *(_DWORD *)(v37 + 8);
                *(_DWORD *)(v37 + 8) = v39;
                v204 = *(_OWORD *)(v7 + 44);
                v212 = *(_OWORD *)(v7 + 60);
                v188 = *(_OWORD *)(v7 + 12);
                v196 = *(_OWORD *)(v7 + 28);
                v40 = *(_OWORD *)(v37 + 12);
                v41 = *(_OWORD *)(v37 + 28);
                v42 = *(_OWORD *)(v37 + 44);
                *(_OWORD *)(v7 + 60) = *(_OWORD *)(v37 + 60);
                *(_OWORD *)(v7 + 44) = v42;
                *(_OWORD *)(v7 + 28) = v41;
                *(_OWORD *)(v7 + 12) = v40;
                *(_OWORD *)(v37 + 60) = v212;
                *(_OWORD *)(v37 + 44) = v204;
                *(_OWORD *)(v37 + 28) = v196;
                *(_OWORD *)(v37 + 12) = v188;
                v43 = *(_QWORD *)(v7 + 80);
                *(_QWORD *)(v7 + 80) = *(_QWORD *)(v37 + 80);
                *(_QWORD *)(v37 + 80) = v43;
                v44 = *(_QWORD *)(v7 + 88);
                *(_QWORD *)(v7 + 88) = *(_QWORD *)(v37 + 88);
                *(_QWORD *)(v37 + 88) = v44;
                v45 = *(_QWORD *)(v7 + 96);
                *(_QWORD *)(v7 + 96) = *(_QWORD *)(v37 + 96);
                *(_QWORD *)(v37 + 96) = v45;
                do
                {
                  v46 = *(float *)(v7 + 112);
                  v7 += 104;
                }
                while (v46 > v20);
                do
                {
                  v47 = *(float *)(v37 - 96);
                  v37 -= 104;
                }
                while (v47 <= v20);
              }
              while (v7 < v37);
            }
          }
          v170 = a3;
          v48 = (__int128 *)(v7 - 92);
          if (v7 - 104 == a1)
          {
            v55 = *(void **)(v7 - 24);
            *(_QWORD *)a1 = v27;
            *(float *)(v7 - 96) = v20;
            *(_OWORD *)(v7 - 60) = v182;
            *(_OWORD *)(v7 - 44) = v185;
            *v48 = v176;
            *(_OWORD *)(v7 - 76) = v179;
            if (v55)
            {
              *(_QWORD *)(v7 - 16) = v55;
              v167 = v29;
              operator delete(v55);
              v29 = v167;
              *(_QWORD *)(v7 - 24) = 0;
            }
          }
          else
          {
            *(_QWORD *)a1 = *(_QWORD *)(v7 - 104);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 96);
            v49 = *v48;
            v50 = *(_OWORD *)(v7 - 76);
            v51 = *(_OWORD *)(v7 - 44);
            *(_OWORD *)(a1 + 44) = *(_OWORD *)(v7 - 60);
            *(_OWORD *)(a1 + 60) = v51;
            *(_OWORD *)(a1 + 12) = v49;
            *(_OWORD *)(a1 + 28) = v50;
            v52 = *(void **)(a1 + 80);
            if (v52)
            {
              *(_QWORD *)(a1 + 88) = v52;
              v166 = v29;
              v53 = a2;
              v54 = v27;
              operator delete(v52);
              v27 = v54;
              a2 = v53;
              v29 = v166;
              *(_QWORD *)(a1 + 80) = 0;
              *(_QWORD *)(a1 + 88) = 0;
              *(_QWORD *)(a1 + 96) = 0;
            }
            *(_OWORD *)(a1 + 80) = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 96) = *(_QWORD *)(v7 - 8);
            *(_QWORD *)(v7 - 24) = 0;
            *(_QWORD *)(v7 - 16) = 0;
            *(_QWORD *)(v7 - 8) = 0;
            *(_QWORD *)(v7 - 104) = v27;
            *(float *)(v7 - 96) = v20;
            *(_OWORD *)(v7 - 60) = v182;
            *(_OWORD *)(v7 - 44) = v185;
            *v48 = v176;
            *(_OWORD *)(v7 - 76) = v179;
          }
          *(_QWORD *)(v7 - 24) = v28;
          *(_OWORD *)(v7 - 16) = v29;
          a3 = v170;
          if (v31 < v33)
            goto LABEL_37;
          v56 = sub_207DC5D08(a1, v7 - 104);
          if (!sub_207DC5D08(v7, a2))
          {
            if (v56)
              continue;
LABEL_37:
            sub_207DC47D0(a1, v7 - 104, v170, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v7 - 104;
          if (v56)
            return;
          goto LABEL_1;
        }
        if (v7 != a2)
        {
          v103 = (unint64_t)(v9 - 2) >> 1;
          v104 = v103;
          do
          {
            v105 = v104;
            if (v103 >= v104)
            {
              v106 = (2 * v104) | 1;
              v107 = v7 + 104 * v106;
              if (2 * v105 + 2 < v9 && *(float *)(v107 + 8) > *(float *)(v107 + 112))
              {
                v107 += 104;
                v106 = 2 * v105 + 2;
              }
              v108 = v7 + 104 * v105;
              v109 = *(float *)(v108 + 8);
              if (*(float *)(v107 + 8) <= v109)
              {
                v110 = *(_QWORD *)v108;
                v208 = *(_OWORD *)(v108 + 44);
                v216 = *(_OWORD *)(v108 + 60);
                v192 = *(_OWORD *)(v108 + 12);
                v200 = *(_OWORD *)(v108 + 28);
                v111 = *(_OWORD *)(v108 + 80);
                v112 = *(_QWORD *)(v108 + 96);
                *(_QWORD *)(v108 + 88) = 0;
                *(_QWORD *)(v108 + 96) = 0;
                *(_QWORD *)(v108 + 80) = 0;
                v113 = *(float *)(v107 + 8);
                do
                {
                  v114 = v108;
                  v108 = v107;
                  *(_QWORD *)v114 = *(_QWORD *)v107;
                  *(float *)(v114 + 8) = v113;
                  v115 = *(_OWORD *)(v107 + 12);
                  v116 = *(_OWORD *)(v107 + 28);
                  v117 = *(_OWORD *)(v107 + 44);
                  *(_OWORD *)(v114 + 60) = *(_OWORD *)(v107 + 60);
                  *(_OWORD *)(v114 + 44) = v117;
                  *(_OWORD *)(v114 + 28) = v116;
                  *(_OWORD *)(v114 + 12) = v115;
                  *(_OWORD *)(v114 + 80) = *(_OWORD *)(v107 + 80);
                  *(_QWORD *)(v114 + 96) = *(_QWORD *)(v107 + 96);
                  *(_QWORD *)(v107 + 80) = 0;
                  *(_QWORD *)(v107 + 88) = 0;
                  *(_QWORD *)(v107 + 96) = 0;
                  if (v103 < v106)
                    break;
                  v118 = 2 * v106;
                  v106 = (2 * v106) | 1;
                  v107 = v7 + 104 * v106;
                  v119 = v118 + 2;
                  if (v119 < v9 && *(float *)(v107 + 8) > *(float *)(v107 + 112))
                  {
                    v107 += 104;
                    v106 = v119;
                  }
                  v113 = *(float *)(v107 + 8);
                }
                while (v113 <= v109);
                *(_QWORD *)v108 = v110;
                *(float *)(v108 + 8) = v109;
                *(_OWORD *)(v108 + 44) = v208;
                *(_OWORD *)(v108 + 60) = v216;
                *(_OWORD *)(v108 + 12) = v192;
                *(_OWORD *)(v108 + 28) = v200;
                *(_OWORD *)(v108 + 80) = v111;
                *(_QWORD *)(v108 + 96) = v112;
              }
            }
            v104 = v105 - 1;
          }
          while (v105);
          v120 = v8 / 0x68uLL;
          do
          {
            v122 = 0;
            v123 = *(_QWORD *)v7;
            v124 = *(_DWORD *)(v7 + 8);
            v183 = *(_OWORD *)(v7 + 44);
            v186 = *(_OWORD *)(v7 + 60);
            v177 = *(_OWORD *)(v7 + 12);
            v180 = *(_OWORD *)(v7 + 28);
            v125 = *(_QWORD *)(v7 + 80);
            v126 = *(_QWORD *)(v7 + 88);
            v127 = *(_QWORD *)(v7 + 96);
            *(_QWORD *)(v7 + 88) = 0;
            *(_QWORD *)(v7 + 96) = 0;
            v128 = v7;
            *(_QWORD *)(v7 + 80) = 0;
            do
            {
              v132 = v128;
              v128 += 104 * v122 + 104;
              v133 = 2 * v122;
              v122 = (2 * v122) | 1;
              v134 = v133 + 2;
              if (v134 < v120 && *(float *)(v128 + 8) > *(float *)(v128 + 112))
              {
                v128 += 104;
                v122 = v134;
              }
              *(_QWORD *)v132 = *(_QWORD *)v128;
              *(_DWORD *)(v132 + 8) = *(_DWORD *)(v128 + 8);
              v129 = *(_OWORD *)(v128 + 12);
              v130 = *(_OWORD *)(v128 + 28);
              v131 = *(_OWORD *)(v128 + 44);
              *(_OWORD *)(v132 + 60) = *(_OWORD *)(v128 + 60);
              *(_OWORD *)(v132 + 44) = v131;
              *(_OWORD *)(v132 + 28) = v130;
              *(_OWORD *)(v132 + 12) = v129;
              *(_OWORD *)(v132 + 80) = *(_OWORD *)(v128 + 80);
              *(_QWORD *)(v132 + 96) = *(_QWORD *)(v128 + 96);
              *(_QWORD *)(v128 + 80) = 0;
              *(_QWORD *)(v128 + 88) = 0;
              *(_QWORD *)(v128 + 96) = 0;
            }
            while (v122 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
            v135 = (__int128 *)(v128 + 12);
            if (v128 == a2 - 104)
            {
              *(_QWORD *)v128 = v123;
              *(_DWORD *)(v128 + 8) = v124;
              *(_OWORD *)(v128 + 44) = v183;
              *(_OWORD *)(v128 + 60) = v186;
              *v135 = v177;
              *(_OWORD *)(v128 + 28) = v180;
              *(_QWORD *)(v128 + 80) = v125;
              *(_QWORD *)(v128 + 88) = v126;
            }
            else
            {
              *(_QWORD *)v128 = *(_QWORD *)(a2 - 104);
              *(_DWORD *)(v128 + 8) = *(_DWORD *)(a2 - 96);
              v136 = *(_OWORD *)(a2 - 92);
              v137 = *(_OWORD *)(a2 - 76);
              v138 = *(_OWORD *)(a2 - 44);
              *(_OWORD *)(v128 + 44) = *(_OWORD *)(a2 - 60);
              *(_OWORD *)(v128 + 60) = v138;
              *v135 = v136;
              *(_OWORD *)(v128 + 28) = v137;
              *(_OWORD *)(v128 + 80) = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v128 + 96) = *(_QWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 104) = v123;
              *(_DWORD *)(a2 - 96) = v124;
              *(_OWORD *)(a2 - 44) = v186;
              *(_OWORD *)(a2 - 60) = v183;
              *(_OWORD *)(a2 - 76) = v180;
              *(_OWORD *)(a2 - 92) = v177;
              *(_QWORD *)(a2 - 24) = v125;
              *(_QWORD *)(a2 - 16) = v126;
              *(_QWORD *)(a2 - 8) = v127;
              v139 = v128 - v7 + 104;
              if (v139 < 105)
                goto LABEL_106;
              v140 = (v139 / 0x68uLL - 2) >> 1;
              v141 = v7 + 104 * v140;
              v142 = *(float *)(v128 + 8);
              if (*(float *)(v141 + 8) <= v142)
                goto LABEL_106;
              v143 = *(_QWORD *)v128;
              v209 = *(_OWORD *)(v128 + 44);
              v217 = *(_OWORD *)(v128 + 60);
              v193 = *v135;
              v201 = *(_OWORD *)(v128 + 28);
              v144 = *(_OWORD *)(v128 + 80);
              v127 = *(_QWORD *)(v128 + 96);
              *(_QWORD *)(v128 + 80) = 0;
              *(_QWORD *)(v128 + 88) = 0;
              *(_QWORD *)(v128 + 96) = 0;
              v145 = *(float *)(v141 + 8);
              do
              {
                v146 = v128;
                v128 = v141;
                *(_QWORD *)v146 = *(_QWORD *)v141;
                *(float *)(v146 + 8) = v145;
                v147 = *(_OWORD *)(v141 + 12);
                v148 = *(_OWORD *)(v141 + 28);
                v149 = *(_OWORD *)(v141 + 44);
                *(_OWORD *)(v146 + 60) = *(_OWORD *)(v141 + 60);
                *(_OWORD *)(v146 + 44) = v149;
                *(_OWORD *)(v146 + 28) = v148;
                *(_OWORD *)(v146 + 12) = v147;
                *(_OWORD *)(v146 + 80) = *(_OWORD *)(v141 + 80);
                *(_QWORD *)(v146 + 96) = *(_QWORD *)(v141 + 96);
                *(_QWORD *)(v141 + 80) = 0;
                *(_QWORD *)(v141 + 88) = 0;
                *(_QWORD *)(v141 + 96) = 0;
                if (!v140)
                  break;
                v140 = (v140 - 1) >> 1;
                v141 = v7 + 104 * v140;
                v145 = *(float *)(v141 + 8);
              }
              while (v145 > v142);
              *(_QWORD *)v128 = v143;
              *(float *)(v128 + 8) = v142;
              *(_OWORD *)(v128 + 44) = v209;
              *(_OWORD *)(v128 + 60) = v217;
              *(_OWORD *)(v128 + 12) = v193;
              *(_OWORD *)(v128 + 28) = v201;
              *(_OWORD *)(v128 + 80) = v144;
            }
            *(_QWORD *)(v128 + 96) = v127;
LABEL_106:
            a2 -= 104;
          }
          while (v120-- > 2);
        }
        return;
    }
  }
}

  v129 = (uint64_t *)(a2 - 40);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v59 = *(float *)(a2 - 32);
        v60 = *(float *)(v7 + 8);
        if (v59 > v60)
        {
          v61 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)(a2 - 40);
          *(_QWORD *)(a2 - 40) = v61;
          *(float *)(v7 + 8) = v59;
          *(float *)(a2 - 32) = v60;
          v62 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v62;
          v63 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v63;
          v64 = *(_QWORD *)(v7 + 32);
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v64;
        }
        return;
      case 3:
        sub_207DC6ECC((uint64_t *)v7, (uint64_t *)(v7 + 40), v129);
        return;
      case 4:
        sub_207DC729C(v7, v7 + 40, v7 + 80, (uint64_t)v129);
        return;
      case 5:
        sub_207DC6D2C(v7, v7 + 40, v7 + 80, v7 + 120, (uint64_t)v129);
        return;
      default:
        if (v8 <= 959)
        {
          v65 = v7 + 40;
          v67 = v7 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v7;
              do
              {
                v70 = v65;
                v71 = *(float *)(v69 + 48);
                v72 = *(float *)(v69 + 8);
                if (v71 > v72)
                {
                  v73 = *(_QWORD *)v65;
                  v74 = *(_QWORD *)(v69 + 56);
                  v75 = *(_OWORD *)(v69 + 64);
                  *(_QWORD *)(v69 + 64) = 0;
                  *(_QWORD *)(v69 + 72) = 0;
                  *(_QWORD *)(v69 + 56) = 0;
                  v76 = *(void **)(v65 + 16);
                  *(_QWORD *)v65 = *(_QWORD *)v69;
                  *(float *)(v65 + 8) = v72;
                  if (v76)
                  {
                    *(_QWORD *)(v65 + 24) = v76;
                    v133 = v75;
                    operator delete(v76);
                    v75 = v133;
                    *(_QWORD *)(v70 + 24) = 0;
                    *(_QWORD *)(v70 + 32) = 0;
                  }
                  v77 = (_QWORD *)(v69 + 16);
                  *(_OWORD *)(v70 + 16) = *(_OWORD *)(v69 + 16);
                  *(_QWORD *)(v70 + 32) = *(_QWORD *)(v69 + 32);
                  *(_QWORD *)(v69 + 16) = 0;
                  *(_QWORD *)(v69 + 24) = 0;
                  *(_QWORD *)(v69 + 32) = 0;
                  if (v69 == v7)
                  {
                    v69 = v7;
                  }
                  else if (v71 > *(float *)(v69 - 32))
                  {
                    v78 = v68;
                    while (1)
                    {
                      v79 = v7 + v78;
                      v80 = *(_QWORD *)(v7 + v78 - 40);
                      *(_DWORD *)(v79 + 8) = *(_DWORD *)(v7 + v78 - 32);
                      *(_OWORD *)(v79 + 16) = *(_OWORD *)(v7 + v78 - 24);
                      *(_QWORD *)(v79 + 32) = *(_QWORD *)(v7 + v78 - 8);
                      *(_QWORD *)(v79 - 24) = 0;
                      *(_QWORD *)(v79 - 16) = 0;
                      *(_QWORD *)(v79 - 8) = 0;
                      *(_QWORD *)v79 = v80;
                      v78 -= 40;
                      if (!v78)
                        break;
                      if (v71 <= *(float *)(v79 - 72))
                      {
                        v69 = v7 + v78;
                        goto LABEL_88;
                      }
                    }
                    v69 = v7;
LABEL_88:
                    v77 = (_QWORD *)(v79 - 24);
                  }
                  *(_QWORD *)v69 = v73;
                  *(float *)(v69 + 8) = v71;
                  *v77 = v74;
                  *(_OWORD *)(v69 + 24) = v75;
                }
                v65 = v70 + 40;
                v68 += 40;
                v69 = v70;
              }
              while (v70 + 40 != a2);
            }
          }
          else if (!v67)
          {
            v114 = (_QWORD *)(v7 + 32);
            do
            {
              v115 = v65;
              v116 = *(float *)(a1 + 48);
              v117 = *(float *)(a1 + 8);
              if (v116 > v117)
              {
                v118 = *(_QWORD *)v65;
                v119 = *(_QWORD *)(a1 + 56);
                v120 = *(_OWORD *)(a1 + 64);
                *(_QWORD *)(a1 + 64) = 0;
                *(_QWORD *)(a1 + 72) = 0;
                *(_QWORD *)(a1 + 56) = 0;
                v121 = *(void **)(v65 + 16);
                *(_QWORD *)v65 = *(_QWORD *)a1;
                *(float *)(v65 + 8) = v117;
                if (v121)
                {
                  *(_QWORD *)(v65 + 24) = v121;
                  v134 = v120;
                  operator delete(v121);
                  v120 = v134;
                  *(_QWORD *)(v115 + 24) = 0;
                  *(_QWORD *)(v115 + 32) = 0;
                }
                v122 = (_QWORD *)(a1 + 16);
                *(_OWORD *)(v115 + 16) = *(_OWORD *)(a1 + 16);
                *(_QWORD *)(v115 + 32) = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                if (v116 > *(float *)(a1 - 32))
                {
                  v123 = v114;
                  v124 = v114;
                  do
                  {
                    *(v123 - 4) = *(v123 - 9);
                    *((_DWORD *)v123 - 6) = *((_DWORD *)v123 - 16);
                    v125 = *((float *)v123 - 26);
                    *((_OWORD *)v123 - 1) = *(_OWORD *)(v123 - 7);
                    v126 = *(v124 - 5);
                    v124 -= 5;
                    *v123 = v126;
                    *(v123 - 7) = 0;
                    *(v123 - 6) = 0;
                    v123 = v124;
                    *v124 = 0;
                  }
                  while (v116 > v125);
                  a1 = (uint64_t)(v124 - 4);
                  v122 = v124 - 2;
                }
                *(_QWORD *)a1 = v118;
                *(float *)(a1 + 8) = v116;
                *v122 = v119;
                *(_OWORD *)(a1 + 24) = v120;
              }
              v65 = v115 + 40;
              v114 += 5;
              a1 = v115;
            }
            while (v115 + 40 != a2);
          }
          return;
        }
        if (a3)
        {
          v10 = (unint64_t)v9 >> 1;
          v11 = v7 + 40 * ((unint64_t)v9 >> 1);
          if ((unint64_t)v8 >= 0x1401)
          {
            sub_207DC6ECC((uint64_t *)a1, (uint64_t *)v11, v129);
            v12 = 40 * v10;
            sub_207DC6ECC((uint64_t *)(a1 + 40), (uint64_t *)(v12 + a1 - 40), (uint64_t *)(a2 - 80));
            sub_207DC6ECC((uint64_t *)(a1 + 80), (uint64_t *)(a1 + 40 + v12), (uint64_t *)(a2 - 120));
            sub_207DC6ECC((uint64_t *)(v12 + a1 - 40), (uint64_t *)v11, (uint64_t *)(a1 + 40 + v12));
            v13 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v11;
            *(_QWORD *)v11 = v13;
            v14 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v11 + 8);
            *(_DWORD *)(v11 + 8) = v14;
            v15 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v11 + 16);
            *(_OWORD *)(v11 + 16) = v15;
            v16 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v11 + 32);
            *(_QWORD *)(v11 + 32) = v16;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_13;
LABEL_7:
            v17 = *(float *)(a1 + 8);
            if (*(float *)(a1 - 32) > v17)
              goto LABEL_14;
            v18 = *(_QWORD *)a1;
            v19 = *(_QWORD *)(a1 + 16);
            v20 = *(_OWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            if (v17 <= *(float *)(a2 - 32))
            {
              v45 = a1 + 40;
              do
              {
                v7 = v45;
                if (v45 >= a2)
                  break;
                v46 = *(float *)(v45 + 8);
                v45 += 40;
              }
              while (v17 <= v46);
            }
            else
            {
              v21 = a1;
              do
              {
                v7 = v21 + 40;
                v22 = *(float *)(v21 + 48);
                v21 += 40;
              }
              while (v17 <= v22);
            }
            v47 = a2;
            if (v7 < a2)
            {
              v48 = a2;
              do
              {
                v47 = v48 - 40;
                v49 = *(float *)(v48 - 32);
                v48 -= 40;
              }
              while (v17 > v49);
            }
            while (v7 < v47)
            {
              v50 = *(_QWORD *)v7;
              *(_QWORD *)v7 = *(_QWORD *)v47;
              *(_QWORD *)v47 = v50;
              v51 = *(_DWORD *)(v7 + 8);
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v47 + 8);
              *(_DWORD *)(v47 + 8) = v51;
              v52 = *(_QWORD *)(v7 + 16);
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(v47 + 16);
              *(_QWORD *)(v47 + 16) = v52;
              v53 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)(v7 + 24) = *(_QWORD *)(v47 + 24);
              *(_QWORD *)(v47 + 24) = v53;
              v54 = *(_QWORD *)(v7 + 32);
              *(_QWORD *)(v7 + 32) = *(_QWORD *)(v47 + 32);
              *(_QWORD *)(v47 + 32) = v54;
              do
              {
                v55 = *(float *)(v7 + 48);
                v7 += 40;
              }
              while (v17 <= v55);
              do
              {
                v56 = *(float *)(v47 - 32);
                v47 -= 40;
              }
              while (v17 > v56);
            }
            if (v7 - 40 == a1)
            {
              v58 = *(void **)(v7 - 24);
              *(_QWORD *)a1 = v18;
              *(float *)(v7 - 32) = v17;
              if (v58)
              {
                *(_QWORD *)(v7 - 16) = v58;
                v132 = v20;
                operator delete(v58);
                v20 = v132;
                *(_QWORD *)(v7 - 24) = 0;
              }
            }
            else
            {
              *(_QWORD *)a1 = *(_QWORD *)(v7 - 40);
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 32);
              v57 = *(void **)(a1 + 16);
              if (v57)
              {
                *(_QWORD *)(a1 + 24) = v57;
                v131 = v20;
                operator delete(v57);
                v20 = v131;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
              }
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 - 24);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
              *(_QWORD *)(v7 - 24) = 0;
              *(_QWORD *)(v7 - 40) = v18;
              *(float *)(v7 - 32) = v17;
            }
            a4 = 0;
            *(_QWORD *)(v7 - 24) = v19;
            *(_OWORD *)(v7 - 16) = v20;
            continue;
          }
          sub_207DC6ECC((uint64_t *)v11, (uint64_t *)a1, v129);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_7;
LABEL_13:
          v17 = *(float *)(a1 + 8);
LABEL_14:
          v23 = 0;
          v24 = *(_QWORD *)a1;
          v25 = *(_QWORD *)(a1 + 16);
          v26 = *(_OWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          do
          {
            v27 = *(float *)(a1 + v23 + 48);
            v23 += 40;
          }
          while (v27 > v17);
          v28 = a1 + v23;
          v29 = a2;
          if (v23 == 40)
          {
            v32 = a2;
            while (v28 < v32)
            {
              v30 = v32 - 40;
              v33 = *(float *)(v32 - 32);
              v32 -= 40;
              if (v33 > v17)
                goto LABEL_22;
            }
            v30 = v32;
            v7 = v28;
          }
          else
          {
            do
            {
              v30 = v29 - 40;
              v31 = *(float *)(v29 - 32);
              v29 -= 40;
            }
            while (v31 <= v17);
LABEL_22:
            v7 = v28;
            if (v28 < v30)
            {
              v34 = v30;
              do
              {
                v35 = *(_QWORD *)v7;
                *(_QWORD *)v7 = *(_QWORD *)v34;
                *(_QWORD *)v34 = v35;
                v36 = *(_DWORD *)(v7 + 8);
                *(_DWORD *)(v7 + 8) = *(_DWORD *)(v34 + 8);
                *(_DWORD *)(v34 + 8) = v36;
                v37 = *(_QWORD *)(v7 + 16);
                *(_QWORD *)(v7 + 16) = *(_QWORD *)(v34 + 16);
                *(_QWORD *)(v34 + 16) = v37;
                v38 = *(_QWORD *)(v7 + 24);
                *(_QWORD *)(v7 + 24) = *(_QWORD *)(v34 + 24);
                *(_QWORD *)(v34 + 24) = v38;
                v39 = *(_QWORD *)(v7 + 32);
                *(_QWORD *)(v7 + 32) = *(_QWORD *)(v34 + 32);
                *(_QWORD *)(v34 + 32) = v39;
                do
                {
                  v40 = *(float *)(v7 + 48);
                  v7 += 40;
                }
                while (v40 > v17);
                do
                {
                  v41 = *(float *)(v34 - 32);
                  v34 -= 40;
                }
                while (v41 <= v17);
              }
              while (v7 < v34);
            }
          }
          if (v7 - 40 == a1)
          {
            v43 = *(void **)(v7 - 24);
            *(_QWORD *)a1 = v24;
            *(float *)(v7 - 32) = v17;
            if (v43)
            {
              *(_QWORD *)(v7 - 16) = v43;
              v128 = v26;
              operator delete(v43);
              v26 = v128;
              *(_QWORD *)(v7 - 24) = 0;
            }
          }
          else
          {
            *(_QWORD *)a1 = *(_QWORD *)(v7 - 40);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 - 32);
            v42 = *(void **)(a1 + 16);
            if (v42)
            {
              *(_QWORD *)(a1 + 24) = v42;
              v127 = v26;
              operator delete(v42);
              v26 = v127;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 32) = 0;
            }
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
            *(_QWORD *)(v7 - 24) = 0;
            *(_QWORD *)(v7 - 40) = v24;
            *(float *)(v7 - 32) = v17;
          }
          *(_QWORD *)(v7 - 24) = v25;
          *(_OWORD *)(v7 - 16) = v26;
          if (v28 < v30)
            goto LABEL_37;
          v44 = sub_207DC7068(a1, v7 - 40);
          if (!sub_207DC7068(v7, a2))
          {
            if (v44)
              continue;
LABEL_37:
            sub_207DC6210(a1, v7 - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v7 - 40;
          if (v44)
            return;
          goto LABEL_1;
        }
        if (v7 != a2)
        {
          v81 = (unint64_t)(v9 - 2) >> 1;
          v82 = v81;
          do
          {
            if (v81 >= v82)
            {
              v84 = (2 * v82) | 1;
              v85 = v7 + 40 * v84;
              if (2 * v82 + 2 < v9 && *(float *)(v85 + 8) > *(float *)(v85 + 48))
              {
                v85 += 40;
                v84 = 2 * v82 + 2;
              }
              v86 = v7 + 40 * v82;
              v87 = *(float *)(v86 + 8);
              if (*(float *)(v85 + 8) <= v87)
              {
                v88 = *(_QWORD *)v86;
                v89 = *(_OWORD *)(v86 + 16);
                v90 = *(_QWORD *)(v86 + 32);
                *(_QWORD *)(v86 + 24) = 0;
                *(_QWORD *)(v86 + 32) = 0;
                *(_QWORD *)(v86 + 16) = 0;
                v91 = *(float *)(v85 + 8);
                do
                {
                  v92 = v86;
                  v86 = v85;
                  *(_QWORD *)v92 = *(_QWORD *)v85;
                  *(float *)(v92 + 8) = v91;
                  *(_OWORD *)(v92 + 16) = *(_OWORD *)(v85 + 16);
                  *(_QWORD *)(v92 + 32) = *(_QWORD *)(v85 + 32);
                  *(_QWORD *)(v85 + 16) = 0;
                  *(_QWORD *)(v85 + 24) = 0;
                  *(_QWORD *)(v85 + 32) = 0;
                  if (v81 < v84)
                    break;
                  v93 = 2 * v84;
                  v84 = (2 * v84) | 1;
                  v85 = v7 + 40 * v84;
                  v94 = v93 + 2;
                  if (v94 < v9 && *(float *)(v85 + 8) > *(float *)(v85 + 48))
                  {
                    v85 += 40;
                    v84 = v94;
                  }
                  v91 = *(float *)(v85 + 8);
                }
                while (v91 <= v87);
                *(_QWORD *)v86 = v88;
                *(float *)(v86 + 8) = v87;
                *(_OWORD *)(v86 + 16) = v89;
                *(_QWORD *)(v86 + 32) = v90;
              }
            }
            v83 = v82-- <= 0;
          }
          while (!v83);
          v95 = v8 / 0x28uLL;
          do
          {
            v96 = 0;
            v97 = *(_QWORD *)v7;
            v98 = *(_DWORD *)(v7 + 8);
            v99 = *(_QWORD *)(v7 + 16);
            v100 = *(_QWORD *)(v7 + 24);
            v101 = *(_QWORD *)(v7 + 32);
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            v102 = v7;
            *(_QWORD *)(v7 + 32) = 0;
            do
            {
              v103 = v102;
              v102 += 40 * v96 + 40;
              v104 = 2 * v96;
              v96 = (2 * v96) | 1;
              v105 = v104 + 2;
              if (v105 < v95 && *(float *)(v102 + 8) > *(float *)(v102 + 48))
              {
                v102 += 40;
                v96 = v105;
              }
              *(_QWORD *)v103 = *(_QWORD *)v102;
              *(_DWORD *)(v103 + 8) = *(_DWORD *)(v102 + 8);
              *(_OWORD *)(v103 + 16) = *(_OWORD *)(v102 + 16);
              *(_QWORD *)(v103 + 32) = *(_QWORD *)(v102 + 32);
              *(_QWORD *)(v102 + 16) = 0;
              *(_QWORD *)(v102 + 24) = 0;
              *(_QWORD *)(v102 + 32) = 0;
            }
            while (v96 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
            if (v102 == a2 - 40)
            {
              *(_QWORD *)v102 = v97;
              *(_DWORD *)(v102 + 8) = v98;
              *(_QWORD *)(v102 + 16) = v99;
              *(_QWORD *)(v102 + 24) = v100;
            }
            else
            {
              *(_QWORD *)v102 = *(_QWORD *)(a2 - 40);
              *(_DWORD *)(v102 + 8) = *(_DWORD *)(a2 - 32);
              *(_OWORD *)(v102 + 16) = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v102 + 32) = *(_QWORD *)(a2 - 8);
              *(_QWORD *)(a2 - 40) = v97;
              *(_DWORD *)(a2 - 32) = v98;
              *(_QWORD *)(a2 - 24) = v99;
              *(_QWORD *)(a2 - 16) = v100;
              *(_QWORD *)(a2 - 8) = v101;
              v106 = v102 - v7 + 40;
              if (v106 < 41)
                goto LABEL_107;
              v107 = (v106 / 0x28uLL - 2) >> 1;
              v108 = v7 + 40 * v107;
              v109 = *(float *)(v102 + 8);
              if (*(float *)(v108 + 8) <= v109)
                goto LABEL_107;
              v110 = *(_QWORD *)v102;
              v111 = *(_OWORD *)(v102 + 16);
              v101 = *(_QWORD *)(v102 + 32);
              *(_QWORD *)(v102 + 16) = 0;
              *(_QWORD *)(v102 + 24) = 0;
              *(_QWORD *)(v102 + 32) = 0;
              v112 = *(float *)(v108 + 8);
              do
              {
                v113 = v102;
                v102 = v108;
                *(_QWORD *)v113 = *(_QWORD *)v108;
                *(float *)(v113 + 8) = v112;
                *(_OWORD *)(v113 + 16) = *(_OWORD *)(v108 + 16);
                *(_QWORD *)(v113 + 32) = *(_QWORD *)(v108 + 32);
                *(_QWORD *)(v108 + 16) = 0;
                *(_QWORD *)(v108 + 24) = 0;
                *(_QWORD *)(v108 + 32) = 0;
                if (!v107)
                  break;
                v107 = (v107 - 1) >> 1;
                v108 = v7 + 40 * v107;
                v112 = *(float *)(v108 + 8);
              }
              while (v112 > v109);
              *(_QWORD *)v102 = v110;
              *(float *)(v102 + 8) = v109;
              *(_OWORD *)(v102 + 16) = v111;
            }
            *(_QWORD *)(v102 + 32) = v101;
LABEL_107:
            a2 -= 40;
            v83 = v95-- <= 2;
          }
          while (!v83);
        }
        return;
    }
  }
}

  while (2)
  {
    v37 = a1;
    v38 = a4;
    v36 = *(_QWORD **)(a1 + 48);
    v5 = v36[6];
    v4 = v36[7];
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v7 = a2[12];
    v33 = v7;
    v34 = a3;
    if (v7 >= v6)
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v32 = v7;
    v8 = v7 - a3;
    v9 = v6 - a3;
    if (v6 < a3)
      v9 = 0;
    if ((uint64_t)v6 < v9)
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3);
    v10 = (unsigned __int8 *)(v5 + 24 * (v6 - v9));
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v10) >> 3);
    if (v11 >= v8)
      v11 = v8;
    v12 = &v10[24 * v11];
    v35 = a2;
    sub_207F03BC4((uint64_t)v39, a2, a3, v8);
    v13 = v40;
    v14 = v41;
    v15 = v42;
    v16 = v43;
    v17 = v44;
    v18 = v45;
    v19 = v46;
    v20 = v47;
LABEL_11:
    while (1)
    {
      if (v10 == v12)
      {
        v21 = v20 == v18 && v15 == v13;
        if (v21 || v14 == v19)
          break;
      }
      if ((char)v10[23] < 0)
      {
        v22 = *(unsigned __int8 **)v10;
        if (v16 != *((_QWORD *)v10 + 1))
          goto LABEL_28;
      }
      else
      {
        v22 = v10;
        if (v16 != v10[23])
          goto LABEL_28;
      }
      if (memcmp(v14, v22, v16))
      {
LABEL_28:
        a4 = v38;
        if (*(_QWORD *)v38 != v37)
          return 0;
        v25 = v36[9];
        if (v25)
        {
          *(_QWORD *)v38 = v25;
          a1 = v36[9];
          a3 = v34;
          a2 = v35;
          goto LABEL_1;
        }
        return 1;
      }
      v10 += 24;
      v15 = &v14[v16];
      v14 = v13;
      v16 = 0;
      if (v15 != v13)
      {
        v16 = 0;
        v23 = v15 + 1;
        v14 = v13;
        if (v15 + 1 != v13)
        {
          v16 = 0;
          do
          {
            if (v23[v16] == v17)
            {
              v14 = v15 + 1;
              goto LABEL_11;
            }
            ++v16;
          }
          while (v13 - v23 != v16);
          v14 = v15 + 1;
          v16 = v13 - v23;
        }
      }
    }
    if (v33 > v6)
    {
      *(_QWORD *)v38 = v37;
      v26 = *(_QWORD *)(v37 + 48);
      v27 = *(_QWORD **)(v26 + 80);
      v28 = (_QWORD *)(v26 + 88);
      if (v27 != (_QWORD *)(v26 + 88))
      {
        do
        {
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 56) - *(_QWORD *)(*(_QWORD *)(v27[4] + 48) + 48)) >> 3) <= v35[12]
            && (sub_207F038FC() & 1) != 0)
          {
            break;
          }
          v29 = (_QWORD *)v27[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v27[2];
              v21 = *v30 == (_QWORD)v27;
              v27 = v30;
            }
            while (!v21);
          }
          v27 = v30;
        }
        while (v30 != v28);
      }
      return 1;
    }
    if (v6 > v33)
    {
      v31 = v36[9];
      a4 = v38;
      if (v31)
      {
        *(_QWORD *)v38 = v31;
        a1 = v36[9];
        a2 = v35;
        a3 = v32;
        continue;
      }
      return 1;
    }
    break;
  }
  *(_QWORD *)v38 = v37;
  result = 1;
  *(_BYTE *)(v38 + 8) = 1;
  return result;
}

  v8 = (_QWORD *)(a2 - 264);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xF83E0F83E0F83E1 * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v74 = *(double *)v9;
        if (*(double *)v8 < *(double *)v9)
        {
          v354 = *(_OWORD *)(v9 + 8);
          v362 = *(_OWORD *)(v9 + 24);
          v386 = *(_OWORD *)(v9 + 72);
          v394 = *(_OWORD *)(v9 + 88);
          v370 = *(_OWORD *)(v9 + 40);
          v378 = *(_OWORD *)(v9 + 56);
          v283 = *(_OWORD *)(v9 + 104);
          v263 = *(_QWORD *)(v9 + 136);
          v255 = *(_OWORD *)(v9 + 120);
          v241 = *(_OWORD *)(v9 + 144);
          v343 = *(_QWORD *)(v9 + 176);
          v335 = *(_OWORD *)(v9 + 160);
          v227 = *(_OWORD *)(v9 + 184);
          v324 = *(_QWORD *)(v9 + 216);
          v316 = *(_OWORD *)(v9 + 200);
          v213 = *(_OWORD *)(v9 + 224);
          v305 = *(_QWORD *)(v9 + 256);
          v297 = *(_OWORD *)(v9 + 240);
          *(_QWORD *)v9 = *v8;
          v75 = *(_OWORD *)(a2 - 256);
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 - 240);
          *(_OWORD *)(v9 + 8) = v75;
          v76 = *(_OWORD *)(a2 - 224);
          v77 = *(_OWORD *)(a2 - 208);
          v78 = *(_OWORD *)(a2 - 192);
          *(_OWORD *)(v9 + 88) = *(_OWORD *)(a2 - 176);
          *(_OWORD *)(v9 + 72) = v78;
          *(_OWORD *)(v9 + 56) = v77;
          *(_OWORD *)(v9 + 40) = v76;
          *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 - 160);
          v79 = *(_OWORD *)(a2 - 144);
          *(_QWORD *)(v9 + 136) = *(_QWORD *)(a2 - 128);
          *(_OWORD *)(v9 + 120) = v79;
          *(_OWORD *)(v9 + 144) = *(_OWORD *)(a2 - 120);
          v80 = *(_OWORD *)(a2 - 104);
          *(_QWORD *)(v9 + 176) = *(_QWORD *)(a2 - 88);
          *(_OWORD *)(v9 + 160) = v80;
          *(_OWORD *)(v9 + 184) = *(_OWORD *)(a2 - 80);
          v81 = *(_OWORD *)(a2 - 64);
          *(_QWORD *)(v9 + 216) = *(_QWORD *)(a2 - 48);
          *(_OWORD *)(v9 + 200) = v81;
          *(_OWORD *)(v9 + 224) = *(_OWORD *)(a2 - 40);
          v82 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v9 + 256) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v9 + 240) = v82;
          *(double *)v8 = v74;
          *(_OWORD *)(a2 - 256) = v354;
          *(_OWORD *)(a2 - 240) = v362;
          *(_OWORD *)(a2 - 192) = v386;
          *(_OWORD *)(a2 - 176) = v394;
          *(_OWORD *)(a2 - 224) = v370;
          *(_OWORD *)(a2 - 208) = v378;
          *(_OWORD *)(a2 - 160) = v283;
          *(_OWORD *)(a2 - 144) = v255;
          *(_QWORD *)(a2 - 128) = v263;
          *(_OWORD *)(a2 - 120) = v241;
          *(_QWORD *)(a2 - 88) = v343;
          *(_OWORD *)(a2 - 104) = v335;
          *(_OWORD *)(a2 - 80) = v227;
          *(_OWORD *)(a2 - 64) = v316;
          *(_QWORD *)(a2 - 48) = v324;
          *(_OWORD *)(a2 - 40) = v213;
          *(_QWORD *)(a2 - 8) = v305;
          *(_OWORD *)(a2 - 24) = v297;
        }
        return;
      case 3:
        sub_208125EDC(v9, v9 + 264, a2 - 264);
        return;
      case 4:
        sub_208126B34(v9, v9 + 264, v9 + 528, a2 - 264);
        return;
      case 5:
        sub_208127088(v9, v9 + 264, v9 + 528, v9 + 792, a2 - 264);
        return;
      default:
        if (v10 <= 6335)
        {
          v83 = v9 + 264;
          v85 = v9 == a2 || v83 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v85)
            {
              v86 = 0;
              v87 = v9;
              do
              {
                v89 = v83;
                v90 = *(double *)(v87 + 264);
                if (v90 < *(double *)v87)
                {
                  v371 = *(_OWORD *)(v87 + 304);
                  v379 = *(_OWORD *)(v87 + 320);
                  v387 = *(_OWORD *)(v87 + 336);
                  v395 = *(_OWORD *)(v87 + 352);
                  v355 = *(_OWORD *)(v87 + 272);
                  v363 = *(_OWORD *)(v87 + 288);
                  v284 = *(_OWORD *)(v87 + 368);
                  v256 = *(_OWORD *)(v87 + 384);
                  v242 = *(_OWORD *)(v87 + 408);
                  v336 = *(_OWORD *)(v87 + 424);
                  v228 = *(_OWORD *)(v87 + 448);
                  v317 = *(_OWORD *)(v87 + 464);
                  v214 = *(_OWORD *)(v87 + 488);
                  v264 = *(_QWORD *)(v87 + 400);
                  v344 = *(_QWORD *)(v87 + 440);
                  v325 = *(_QWORD *)(v87 + 480);
                  v306 = *(_QWORD *)(v87 + 520);
                  v298 = *(_OWORD *)(v87 + 504);
                  v91 = v86;
                  v92 = *(double *)v87;
                  do
                  {
                    v93 = v9 + v91;
                    *(double *)(v93 + 264) = v92;
                    v94 = *(_OWORD *)(v9 + v91 + 56);
                    *(_OWORD *)(v93 + 304) = *(_OWORD *)(v9 + v91 + 40);
                    *(_OWORD *)(v93 + 320) = v94;
                    v95 = *(_OWORD *)(v9 + v91 + 88);
                    *(_OWORD *)(v93 + 336) = *(_OWORD *)(v9 + v91 + 72);
                    *(_OWORD *)(v93 + 352) = v95;
                    v96 = *(_OWORD *)(v9 + v91 + 24);
                    *(_OWORD *)(v93 + 272) = *(_OWORD *)(v9 + v91 + 8);
                    *(_OWORD *)(v93 + 288) = v96;
                    v97 = *(_OWORD *)(v9 + v91 + 120);
                    *(_OWORD *)(v93 + 368) = *(_OWORD *)(v9 + v91 + 104);
                    *(_OWORD *)(v93 + 384) = v97;
                    v98 = *(_OWORD *)(v9 + v91 + 160);
                    *(_OWORD *)(v9 + v91 + 408) = *(_OWORD *)(v9 + v91 + 144);
                    *(_OWORD *)(v9 + v91 + 424) = v98;
                    v99 = *(_OWORD *)(v9 + v91 + 200);
                    *(_OWORD *)(v93 + 448) = *(_OWORD *)(v9 + v91 + 184);
                    *(_OWORD *)(v93 + 464) = v99;
                    v100 = *(_OWORD *)(v9 + v91 + 240);
                    *(_OWORD *)(v9 + v91 + 488) = *(_OWORD *)(v9 + v91 + 224);
                    *(_QWORD *)(v93 + 400) = *(_QWORD *)(v9 + v91 + 136);
                    *(_QWORD *)(v93 + 440) = *(_QWORD *)(v9 + v91 + 176);
                    *(_QWORD *)(v93 + 480) = *(_QWORD *)(v9 + v91 + 216);
                    *(_QWORD *)(v93 + 520) = *(_QWORD *)(v9 + v91 + 256);
                    *(_OWORD *)(v9 + v91 + 504) = v100;
                    if (!v91)
                    {
                      v88 = (double *)v9;
                      goto LABEL_67;
                    }
                    v91 -= 264;
                    v92 = *(double *)(v91 + v9);
                  }
                  while (v90 < v92);
                  v88 = (double *)(v9 + v91 + 264);
LABEL_67:
                  *v88 = v90;
                  *(_OWORD *)(v93 + 8) = v355;
                  *(_OWORD *)(v93 + 24) = v363;
                  *(_OWORD *)(v93 + 88) = v395;
                  *(_OWORD *)(v93 + 72) = v387;
                  *(_OWORD *)(v93 + 56) = v379;
                  *(_OWORD *)(v93 + 40) = v371;
                  *(_OWORD *)(v93 + 104) = v284;
                  *(_OWORD *)(v93 + 120) = v256;
                  *(_QWORD *)(v93 + 136) = v264;
                  *(_OWORD *)(v93 + 144) = v242;
                  *(_QWORD *)(v93 + 176) = v344;
                  *(_OWORD *)(v93 + 160) = v336;
                  *(_OWORD *)(v93 + 184) = v228;
                  *(_OWORD *)(v93 + 200) = v317;
                  *(_QWORD *)(v93 + 216) = v325;
                  *(_OWORD *)(v93 + 224) = v214;
                  *(_QWORD *)(v93 + 256) = v306;
                  *(_OWORD *)(v93 + 240) = v298;
                }
                v83 = v89 + 264;
                v86 += 264;
                v87 = v89;
              }
              while (v89 + 264 != a2);
            }
          }
          else if (!v85)
          {
            v187 = v9 - 264;
            do
            {
              v188 = v83;
              v189 = *(double *)(a1 + 264);
              if (v189 < *(double *)a1)
              {
                v374 = *(_OWORD *)(a1 + 304);
                v382 = *(_OWORD *)(a1 + 320);
                v390 = *(_OWORD *)(a1 + 336);
                v398 = *(_OWORD *)(a1 + 352);
                v358 = *(_OWORD *)(a1 + 272);
                v366 = *(_OWORD *)(a1 + 288);
                v287 = *(_OWORD *)(a1 + 368);
                v259 = *(_OWORD *)(a1 + 384);
                v245 = *(_OWORD *)(a1 + 408);
                v339 = *(_OWORD *)(a1 + 424);
                v231 = *(_OWORD *)(a1 + 448);
                v320 = *(_OWORD *)(a1 + 464);
                v217 = *(_OWORD *)(a1 + 488);
                v267 = *(_QWORD *)(a1 + 400);
                v347 = *(_QWORD *)(a1 + 440);
                v328 = *(_QWORD *)(a1 + 480);
                v309 = *(_QWORD *)(a1 + 520);
                v301 = *(_OWORD *)(a1 + 504);
                v190 = v187;
                v191 = *(double *)a1;
                do
                {
                  *(double *)(v190 + 528) = v191;
                  v192 = *(_OWORD *)(v190 + 320);
                  *(_OWORD *)(v190 + 568) = *(_OWORD *)(v190 + 304);
                  *(_OWORD *)(v190 + 584) = v192;
                  v193 = *(_OWORD *)(v190 + 352);
                  *(_OWORD *)(v190 + 600) = *(_OWORD *)(v190 + 336);
                  *(_OWORD *)(v190 + 616) = v193;
                  v194 = *(_OWORD *)(v190 + 288);
                  *(_OWORD *)(v190 + 536) = *(_OWORD *)(v190 + 272);
                  *(_OWORD *)(v190 + 552) = v194;
                  v195 = *(_OWORD *)(v190 + 384);
                  *(_OWORD *)(v190 + 632) = *(_OWORD *)(v190 + 368);
                  *(_QWORD *)(v190 + 664) = *(_QWORD *)(v190 + 400);
                  *(_OWORD *)(v190 + 648) = v195;
                  v196 = *(_OWORD *)(v190 + 408);
                  *(_QWORD *)(v190 + 704) = *(_QWORD *)(v190 + 440);
                  v197 = *(_OWORD *)(v190 + 424);
                  *(_OWORD *)(v190 + 672) = v196;
                  *(_OWORD *)(v190 + 688) = v197;
                  v198 = *(_OWORD *)(v190 + 464);
                  *(_OWORD *)(v190 + 712) = *(_OWORD *)(v190 + 448);
                  *(_QWORD *)(v190 + 744) = *(_QWORD *)(v190 + 480);
                  *(_OWORD *)(v190 + 728) = v198;
                  v199 = *(_OWORD *)(v190 + 488);
                  *(_QWORD *)(v190 + 784) = *(_QWORD *)(v190 + 520);
                  v200 = *(_OWORD *)(v190 + 504);
                  *(_OWORD *)(v190 + 752) = v199;
                  *(_OWORD *)(v190 + 768) = v200;
                  v191 = *(double *)v190;
                  v190 -= 264;
                }
                while (v189 < v191);
                *(double *)(v190 + 528) = v189;
                *(_OWORD *)(v190 + 536) = v358;
                *(_OWORD *)(v190 + 552) = v366;
                *(_OWORD *)(v190 + 600) = v390;
                *(_OWORD *)(v190 + 616) = v398;
                *(_OWORD *)(v190 + 568) = v374;
                *(_OWORD *)(v190 + 584) = v382;
                *(_OWORD *)(v190 + 632) = v287;
                *(_OWORD *)(v190 + 648) = v259;
                *(_QWORD *)(v190 + 664) = v267;
                *(_OWORD *)(v190 + 672) = v245;
                *(_QWORD *)(v190 + 704) = v347;
                *(_OWORD *)(v190 + 688) = v339;
                *(_OWORD *)(v190 + 712) = v231;
                *(_OWORD *)(v190 + 728) = v320;
                *(_QWORD *)(v190 + 744) = v328;
                *(_OWORD *)(v190 + 752) = v217;
                *(_QWORD *)(v190 + 784) = v309;
                *(_OWORD *)(v190 + 768) = v301;
              }
              v83 += 264;
              v187 += 264;
              a1 = v188;
            }
            while (v188 + 264 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v101 = (unint64_t)(v11 - 2) >> 1;
            v102 = v101;
            do
            {
              v112 = v102;
              if (v101 >= v102)
              {
                v113 = (2 * v102) | 1;
                v114 = v9 + 264 * v113;
                if (2 * v112 + 2 < v11 && *(double *)v114 < *(double *)(v114 + 264))
                {
                  v114 += 264;
                  v113 = 2 * v112 + 2;
                }
                v115 = v9 + 264 * v112;
                v116 = *(double *)v114;
                v117 = *(double *)v115;
                if (*(double *)v114 >= *(double *)v115)
                {
                  v356 = *(_OWORD *)(v115 + 8);
                  v364 = *(_OWORD *)(v115 + 24);
                  v388 = *(_OWORD *)(v115 + 72);
                  v396 = *(_OWORD *)(v115 + 88);
                  v372 = *(_OWORD *)(v115 + 40);
                  v380 = *(_OWORD *)(v115 + 56);
                  v285 = *(_OWORD *)(v115 + 104);
                  v265 = *(_QWORD *)(v115 + 136);
                  v257 = *(_OWORD *)(v115 + 120);
                  v243 = *(_OWORD *)(v115 + 144);
                  v345 = *(_QWORD *)(v115 + 176);
                  v337 = *(_OWORD *)(v115 + 160);
                  v229 = *(_OWORD *)(v115 + 184);
                  v326 = *(_QWORD *)(v115 + 216);
                  v318 = *(_OWORD *)(v115 + 200);
                  v215 = *(_OWORD *)(v115 + 224);
                  v307 = *(_QWORD *)(v115 + 256);
                  v299 = *(_OWORD *)(v115 + 240);
                  do
                  {
                    v118 = v115;
                    v115 = v114;
                    *(double *)v118 = v116;
                    v119 = *(_OWORD *)(v114 + 8);
                    *(_OWORD *)(v118 + 24) = *(_OWORD *)(v114 + 24);
                    *(_OWORD *)(v118 + 8) = v119;
                    v120 = *(_OWORD *)(v114 + 40);
                    v121 = *(_OWORD *)(v114 + 56);
                    v122 = *(_OWORD *)(v114 + 72);
                    *(_OWORD *)(v118 + 88) = *(_OWORD *)(v114 + 88);
                    *(_OWORD *)(v118 + 72) = v122;
                    *(_OWORD *)(v118 + 56) = v121;
                    *(_OWORD *)(v118 + 40) = v120;
                    *(_OWORD *)(v118 + 104) = *(_OWORD *)(v114 + 104);
                    v123 = *(_OWORD *)(v114 + 120);
                    *(_QWORD *)(v118 + 136) = *(_QWORD *)(v114 + 136);
                    *(_OWORD *)(v118 + 120) = v123;
                    *(_OWORD *)(v118 + 144) = *(_OWORD *)(v114 + 144);
                    v124 = *(_OWORD *)(v114 + 160);
                    *(_QWORD *)(v118 + 176) = *(_QWORD *)(v114 + 176);
                    *(_OWORD *)(v118 + 160) = v124;
                    *(_OWORD *)(v118 + 184) = *(_OWORD *)(v114 + 184);
                    v125 = *(_OWORD *)(v114 + 200);
                    *(_QWORD *)(v118 + 216) = *(_QWORD *)(v114 + 216);
                    *(_OWORD *)(v118 + 200) = v125;
                    *(_OWORD *)(v118 + 224) = *(_OWORD *)(v114 + 224);
                    v126 = *(_OWORD *)(v114 + 240);
                    *(_QWORD *)(v118 + 256) = *(_QWORD *)(v114 + 256);
                    *(_OWORD *)(v118 + 240) = v126;
                    if (v101 < v113)
                      break;
                    v127 = 2 * v113;
                    v113 = (2 * v113) | 1;
                    v114 = v9 + 264 * v113;
                    v128 = v127 + 2;
                    if (v128 < v11 && *(double *)v114 < *(double *)(v114 + 264))
                    {
                      v114 += 264;
                      v113 = v128;
                    }
                    v116 = *(double *)v114;
                  }
                  while (*(double *)v114 >= v117);
                  v103 = (_OWORD *)(v115 + 8);
                  *(double *)v115 = v117;
                  v104 = (_OWORD *)(v115 + 104);
                  v105 = v115 + 120;
                  v106 = (_OWORD *)(v115 + 144);
                  v107 = v115 + 160;
                  v108 = (_OWORD *)(v115 + 184);
                  v109 = v115 + 200;
                  v110 = (_OWORD *)(v115 + 224);
                  v111 = v115 + 240;
                  *v103 = v356;
                  v103[1] = v364;
                  v103[4] = v388;
                  v103[5] = v396;
                  v103[2] = v372;
                  v103[3] = v380;
                  *v104 = v285;
                  *(_QWORD *)(v105 + 16) = v265;
                  *(_OWORD *)v105 = v257;
                  *v106 = v243;
                  *(_QWORD *)(v107 + 16) = v345;
                  *(_OWORD *)v107 = v337;
                  *v108 = v229;
                  *(_QWORD *)(v109 + 16) = v326;
                  *(_OWORD *)v109 = v318;
                  *v110 = v215;
                  *(_QWORD *)(v111 + 16) = v307;
                  *(_OWORD *)v111 = v299;
                }
              }
              v102 = v112 - 1;
            }
            while (v112);
            v129 = v10 / 0x108uLL;
            v130 = (__int128 *)(v9 + 240);
            do
            {
              if (v129 >= 2)
              {
                v132 = 0;
                v133 = *(double *)a1;
                v258 = *(_OWORD *)(a1 + 8);
                v266 = *(_OWORD *)(a1 + 24);
                v276 = *(_OWORD *)(a1 + 72);
                v279 = *(_OWORD *)(a1 + 88);
                v270 = *(_OWORD *)(a1 + 40);
                v273 = *(_OWORD *)(a1 + 56);
                v251 = *(_OWORD *)(a1 + 104);
                v248 = *(_QWORD *)(a1 + 136);
                v237 = *(_OWORD *)(a1 + 144);
                v244 = *(_OWORD *)(a1 + 120);
                v234 = *(_QWORD *)(a1 + 176);
                v223 = *(_OWORD *)(a1 + 184);
                v230 = *(_OWORD *)(a1 + 160);
                v220 = *(_QWORD *)(a1 + 216);
                v209 = *(_OWORD *)(a1 + 224);
                v216 = *(_OWORD *)(a1 + 200);
                v206 = *(_QWORD *)(a1 + 256);
                v134 = a1;
                v203 = *v130;
                do
                {
                  v143 = v134;
                  v134 += 264 * v132 + 264;
                  v144 = 2 * v132;
                  v132 = (2 * v132) | 1;
                  v145 = v144 + 2;
                  if (v145 < v129 && *(double *)v134 < *(double *)(v134 + 264))
                  {
                    v134 += 264;
                    v132 = v145;
                  }
                  *(_QWORD *)v143 = *(_QWORD *)v134;
                  v135 = *(_OWORD *)(v134 + 8);
                  *(_OWORD *)(v143 + 24) = *(_OWORD *)(v134 + 24);
                  *(_OWORD *)(v143 + 8) = v135;
                  v136 = *(_OWORD *)(v134 + 40);
                  v137 = *(_OWORD *)(v134 + 56);
                  v138 = *(_OWORD *)(v134 + 72);
                  *(_OWORD *)(v143 + 88) = *(_OWORD *)(v134 + 88);
                  *(_OWORD *)(v143 + 72) = v138;
                  *(_OWORD *)(v143 + 56) = v137;
                  *(_OWORD *)(v143 + 40) = v136;
                  *(_OWORD *)(v143 + 104) = *(_OWORD *)(v134 + 104);
                  v139 = *(_OWORD *)(v134 + 120);
                  *(_QWORD *)(v143 + 136) = *(_QWORD *)(v134 + 136);
                  *(_OWORD *)(v143 + 120) = v139;
                  *(_OWORD *)(v143 + 144) = *(_OWORD *)(v134 + 144);
                  v140 = *(_OWORD *)(v134 + 160);
                  *(_QWORD *)(v143 + 176) = *(_QWORD *)(v134 + 176);
                  *(_OWORD *)(v143 + 160) = v140;
                  *(_OWORD *)(v143 + 184) = *(_OWORD *)(v134 + 184);
                  v141 = *(_OWORD *)(v134 + 200);
                  *(_QWORD *)(v143 + 216) = *(_QWORD *)(v134 + 216);
                  *(_OWORD *)(v143 + 200) = v141;
                  *(_OWORD *)(v143 + 224) = *(_OWORD *)(v134 + 224);
                  v142 = *(_OWORD *)(v134 + 240);
                  *(_QWORD *)(v143 + 256) = *(_QWORD *)(v134 + 256);
                  *(_OWORD *)(v143 + 240) = v142;
                }
                while (v132 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                v146 = (__int128 *)(v134 + 8);
                v147 = (__int128 *)(v134 + 104);
                v148 = (__int128 *)(v134 + 120);
                v149 = (__int128 *)(v134 + 144);
                v150 = (__int128 *)(v134 + 160);
                v151 = (__int128 *)(v134 + 184);
                v152 = (__int128 *)(v134 + 200);
                v153 = (__int128 *)(v134 + 224);
                v154 = (__int128 *)(v134 + 240);
                v155 = (_QWORD *)(a2 - 264);
                if (v134 == a2 - 264)
                {
                  *(double *)v134 = v133;
                  *v146 = v258;
                  *(_OWORD *)(v134 + 24) = v266;
                  *(_OWORD *)(v134 + 72) = v276;
                  *(_OWORD *)(v134 + 88) = v279;
                  *(_OWORD *)(v134 + 40) = v270;
                  *(_OWORD *)(v134 + 56) = v273;
                  *v147 = v251;
                  *v148 = v244;
                  *(_QWORD *)(v134 + 136) = v248;
                  *v149 = v237;
                  *(_QWORD *)(v134 + 176) = v234;
                  *v150 = v230;
                  *v151 = v223;
                  *v152 = v216;
                  *(_QWORD *)(v134 + 216) = v220;
                  *v153 = v209;
                  *(_QWORD *)(v134 + 256) = v206;
                  *v154 = v203;
                }
                else
                {
                  *(_QWORD *)v134 = *v155;
                  v156 = *(_OWORD *)(a2 - 240);
                  *v146 = *(_OWORD *)(a2 - 256);
                  *(_OWORD *)(v134 + 24) = v156;
                  v157 = *(_OWORD *)(a2 - 224);
                  v158 = *(_OWORD *)(a2 - 208);
                  v159 = *(_OWORD *)(a2 - 176);
                  *(_OWORD *)(v134 + 72) = *(_OWORD *)(a2 - 192);
                  *(_OWORD *)(v134 + 88) = v159;
                  *(_OWORD *)(v134 + 40) = v157;
                  *(_OWORD *)(v134 + 56) = v158;
                  *v147 = *(_OWORD *)(a2 - 160);
                  v160 = *(_OWORD *)(a2 - 144);
                  *(_QWORD *)(v134 + 136) = *(_QWORD *)(a2 - 128);
                  *v148 = v160;
                  *v149 = *(_OWORD *)(a2 - 120);
                  v161 = *(_OWORD *)(a2 - 104);
                  *(_QWORD *)(v134 + 176) = *(_QWORD *)(a2 - 88);
                  *v150 = v161;
                  *v151 = *(_OWORD *)(a2 - 80);
                  v162 = *(_OWORD *)(a2 - 64);
                  *(_QWORD *)(v134 + 216) = *(_QWORD *)(a2 - 48);
                  *v152 = v162;
                  *v153 = *(_OWORD *)(a2 - 40);
                  v163 = *(_OWORD *)(a2 - 24);
                  *(_QWORD *)(v134 + 256) = *(_QWORD *)(a2 - 8);
                  *v154 = v163;
                  *(double *)v155 = v133;
                  *(_OWORD *)(a2 - 256) = v258;
                  *(_OWORD *)(a2 - 240) = v266;
                  *(_OWORD *)(a2 - 192) = v276;
                  *(_OWORD *)(a2 - 176) = v279;
                  *(_OWORD *)(a2 - 224) = v270;
                  *(_OWORD *)(a2 - 208) = v273;
                  *(_OWORD *)(a2 - 160) = v251;
                  *(_OWORD *)(a2 - 144) = v244;
                  *(_QWORD *)(a2 - 128) = v248;
                  *(_OWORD *)(a2 - 120) = v237;
                  *(_QWORD *)(a2 - 88) = v234;
                  *(_OWORD *)(a2 - 104) = v230;
                  *(_OWORD *)(a2 - 80) = v223;
                  *(_OWORD *)(a2 - 64) = v216;
                  *(_QWORD *)(a2 - 48) = v220;
                  *(_OWORD *)(a2 - 40) = v209;
                  *(_QWORD *)(a2 - 8) = v206;
                  *(_OWORD *)(a2 - 24) = v203;
                  v164 = v134 - a1 + 264;
                  if (v164 >= 265)
                  {
                    v165 = (v164 / 0x108uLL - 2) >> 1;
                    v166 = a1 + 264 * v165;
                    v167 = *(double *)v166;
                    v168 = *(double *)v134;
                    if (*(double *)v166 < *(double *)v134)
                    {
                      v357 = *v146;
                      v365 = *(_OWORD *)(v134 + 24);
                      v389 = *(_OWORD *)(v134 + 72);
                      v397 = *(_OWORD *)(v134 + 88);
                      v373 = *(_OWORD *)(v134 + 40);
                      v381 = *(_OWORD *)(v134 + 56);
                      v350 = *v147;
                      v346 = *(_QWORD *)(v134 + 136);
                      v338 = *v148;
                      v331 = *v149;
                      v327 = *(_QWORD *)(v134 + 176);
                      v319 = *v150;
                      v312 = *v151;
                      v308 = *(_QWORD *)(v134 + 216);
                      v300 = *v152;
                      v293 = *v153;
                      v290 = *(_QWORD *)(v134 + 256);
                      v286 = *v154;
                      do
                      {
                        v169 = v134;
                        v134 = v166;
                        *(double *)v169 = v167;
                        v170 = *(_OWORD *)(v166 + 8);
                        *(_OWORD *)(v169 + 24) = *(_OWORD *)(v166 + 24);
                        *(_OWORD *)(v169 + 8) = v170;
                        v171 = *(_OWORD *)(v166 + 40);
                        v172 = *(_OWORD *)(v166 + 56);
                        v173 = *(_OWORD *)(v166 + 72);
                        *(_OWORD *)(v169 + 88) = *(_OWORD *)(v166 + 88);
                        *(_OWORD *)(v169 + 72) = v173;
                        *(_OWORD *)(v169 + 56) = v172;
                        *(_OWORD *)(v169 + 40) = v171;
                        *(_OWORD *)(v169 + 104) = *(_OWORD *)(v166 + 104);
                        v174 = *(_OWORD *)(v166 + 120);
                        *(_QWORD *)(v169 + 136) = *(_QWORD *)(v166 + 136);
                        *(_OWORD *)(v169 + 120) = v174;
                        *(_OWORD *)(v169 + 144) = *(_OWORD *)(v166 + 144);
                        v175 = *(_OWORD *)(v166 + 160);
                        *(_QWORD *)(v169 + 176) = *(_QWORD *)(v166 + 176);
                        *(_OWORD *)(v169 + 160) = v175;
                        *(_OWORD *)(v169 + 184) = *(_OWORD *)(v166 + 184);
                        v176 = *(_OWORD *)(v166 + 200);
                        *(_QWORD *)(v169 + 216) = *(_QWORD *)(v166 + 216);
                        *(_OWORD *)(v169 + 200) = v176;
                        *(_OWORD *)(v169 + 224) = *(_OWORD *)(v166 + 224);
                        v177 = *(_OWORD *)(v166 + 240);
                        *(_QWORD *)(v169 + 256) = *(_QWORD *)(v166 + 256);
                        *(_OWORD *)(v169 + 240) = v177;
                        if (!v165)
                          break;
                        v165 = (v165 - 1) >> 1;
                        v166 = a1 + 264 * v165;
                        v167 = *(double *)v166;
                      }
                      while (*(double *)v166 < v168);
                      v178 = (_OWORD *)(v134 + 8);
                      *(double *)v134 = v168;
                      v179 = (_OWORD *)(v134 + 104);
                      v180 = v134 + 120;
                      v181 = (_OWORD *)(v134 + 144);
                      v182 = v134 + 160;
                      v183 = (_OWORD *)(v134 + 184);
                      v184 = v134 + 200;
                      v185 = (_OWORD *)(v134 + 224);
                      v186 = v134 + 240;
                      *v178 = v357;
                      v178[1] = v365;
                      v178[4] = v389;
                      v178[5] = v397;
                      v178[2] = v373;
                      v178[3] = v381;
                      *v179 = v350;
                      *(_QWORD *)(v180 + 16) = v346;
                      *(_OWORD *)v180 = v338;
                      *v181 = v331;
                      *(_QWORD *)(v182 + 16) = v327;
                      *(_OWORD *)v182 = v319;
                      *v183 = v312;
                      *(_QWORD *)(v184 + 16) = v308;
                      *(_OWORD *)v184 = v300;
                      *v185 = v293;
                      *(_QWORD *)(v186 + 16) = v290;
                      *(_OWORD *)v186 = v286;
                    }
                  }
                }
              }
              a2 -= 264;
            }
            while ((unint64_t)v129-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_QWORD *)(v9 + 264 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x8401)
        {
          sub_208125EDC((uint64_t)v13, a1, a2 - 264);
          --a3;
          v28 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          sub_208125EDC(a1, (uint64_t)v13, a2 - 264);
          v14 = 264 * v12;
          v15 = a1 + 264 * v12;
          sub_208125EDC(a1 + 264, v15 - 264, a2 - 528);
          v16 = a1 + 264 + v14;
          sub_208125EDC(a1 + 528, v16, a2 - 792);
          sub_208125EDC(v15 - 264, (uint64_t)v13, v16);
          v17 = *(double *)a1;
          v351 = *(_OWORD *)(a1 + 8);
          v359 = *(_OWORD *)(a1 + 24);
          v383 = *(_OWORD *)(a1 + 72);
          v391 = *(_OWORD *)(a1 + 88);
          v367 = *(_OWORD *)(a1 + 40);
          v375 = *(_OWORD *)(a1 + 56);
          v280 = *(_OWORD *)(a1 + 104);
          v260 = *(_QWORD *)(a1 + 136);
          v252 = *(_OWORD *)(a1 + 120);
          v238 = *(_OWORD *)(a1 + 144);
          v340 = *(_QWORD *)(a1 + 176);
          v332 = *(_OWORD *)(a1 + 160);
          v224 = *(_OWORD *)(a1 + 184);
          v321 = *(_QWORD *)(a1 + 216);
          v313 = *(_OWORD *)(a1 + 200);
          v210 = *(_OWORD *)(a1 + 224);
          v302 = *(_QWORD *)(a1 + 256);
          v294 = *(_OWORD *)(a1 + 240);
          *(_QWORD *)a1 = *v13;
          v18 = *(_OWORD *)(v15 + 8);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v15 + 24);
          *(_OWORD *)(a1 + 8) = v18;
          v19 = *(_OWORD *)(v15 + 40);
          v20 = *(_OWORD *)(v15 + 56);
          v21 = *(_OWORD *)(v15 + 72);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(v15 + 88);
          *(_OWORD *)(a1 + 72) = v21;
          *(_OWORD *)(a1 + 56) = v20;
          *(_OWORD *)(a1 + 40) = v19;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(v15 + 104);
          v22 = *(_OWORD *)(v15 + 120);
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(v15 + 136);
          *(_OWORD *)(a1 + 120) = v22;
          v23 = *(_OWORD *)(v15 + 144);
          v24 = *(_OWORD *)(v15 + 160);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(v15 + 176);
          *(_OWORD *)(a1 + 144) = v23;
          *(_OWORD *)(a1 + 160) = v24;
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(v15 + 184);
          v25 = *(_OWORD *)(v15 + 200);
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(v15 + 216);
          *(_OWORD *)(a1 + 200) = v25;
          v26 = *(_OWORD *)(v15 + 224);
          v27 = *(_OWORD *)(v15 + 240);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(v15 + 256);
          *(_OWORD *)(a1 + 224) = v26;
          *(_OWORD *)(a1 + 240) = v27;
          *(double *)v13 = v17;
          *(_OWORD *)(v15 + 8) = v351;
          *(_OWORD *)(v15 + 24) = v359;
          *(_OWORD *)(v15 + 88) = v391;
          *(_OWORD *)(v15 + 72) = v383;
          *(_OWORD *)(v15 + 56) = v375;
          *(_OWORD *)(v15 + 40) = v367;
          *(_OWORD *)(v15 + 104) = v280;
          *(_OWORD *)(v15 + 120) = v252;
          *(_QWORD *)(v15 + 136) = v260;
          *(_OWORD *)(v15 + 144) = v238;
          *(_QWORD *)(v15 + 176) = v340;
          *(_OWORD *)(v15 + 160) = v332;
          *(_OWORD *)(v15 + 184) = v224;
          *(_OWORD *)(v15 + 200) = v313;
          *(_QWORD *)(v15 + 216) = v321;
          *(_OWORD *)(v15 + 224) = v210;
          *(_QWORD *)(v15 + 256) = v302;
          *(_OWORD *)(v15 + 240) = v294;
          --a3;
          v28 = *(double *)a1;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (*(double *)(a1 - 264) >= v28)
        {
          v254 = *(_OWORD *)(a1 + 8);
          v262 = *(_OWORD *)(a1 + 24);
          v275 = *(_OWORD *)(a1 + 72);
          v278 = *(_OWORD *)(a1 + 88);
          v269 = *(_OWORD *)(a1 + 40);
          v272 = *(_OWORD *)(a1 + 56);
          v250 = *(_OWORD *)(a1 + 104);
          v247 = *(_QWORD *)(a1 + 136);
          v236 = *(_OWORD *)(a1 + 144);
          v240 = *(_OWORD *)(a1 + 120);
          v233 = *(_QWORD *)(a1 + 176);
          v222 = *(_OWORD *)(a1 + 184);
          v226 = *(_OWORD *)(a1 + 160);
          v219 = *(_QWORD *)(a1 + 216);
          v208 = *(_OWORD *)(a1 + 224);
          v212 = *(_OWORD *)(a1 + 200);
          v205 = *(_QWORD *)(a1 + 256);
          v202 = *(_OWORD *)(a1 + 240);
          if (v28 >= *(double *)v8)
          {
            v54 = a1 + 264;
            do
            {
              v9 = v54;
              if (v54 >= a2)
                break;
              v54 += 264;
            }
            while (v28 >= *(double *)v9);
          }
          else
          {
            v52 = a1;
            do
            {
              v9 = v52 + 264;
              v53 = *(double *)(v52 + 264);
              v52 += 264;
            }
            while (v28 >= v53);
          }
          v55 = a2;
          if (v9 < a2)
          {
            v55 = a2;
            do
              v55 -= 264;
            while (v28 < *(double *)v55);
          }
          if (v9 < v55)
          {
            v56 = *(double *)v9;
            do
            {
              v353 = *(_OWORD *)(v9 + 8);
              v361 = *(_OWORD *)(v9 + 24);
              v385 = *(_OWORD *)(v9 + 72);
              v393 = *(_OWORD *)(v9 + 88);
              v369 = *(_OWORD *)(v9 + 40);
              v377 = *(_OWORD *)(v9 + 56);
              v349 = *(_OWORD *)(v9 + 104);
              v342 = *(_QWORD *)(v9 + 136);
              v330 = *(_OWORD *)(v9 + 144);
              v334 = *(_OWORD *)(v9 + 120);
              v323 = *(_QWORD *)(v9 + 176);
              v311 = *(_OWORD *)(v9 + 184);
              v315 = *(_OWORD *)(v9 + 160);
              v304 = *(_QWORD *)(v9 + 216);
              v292 = *(_OWORD *)(v9 + 224);
              v296 = *(_OWORD *)(v9 + 200);
              v289 = *(_QWORD *)(v9 + 256);
              v282 = *(_OWORD *)(v9 + 240);
              *(_QWORD *)v9 = *(_QWORD *)v55;
              v57 = *(_OWORD *)(v55 + 8);
              *(_OWORD *)(v9 + 24) = *(_OWORD *)(v55 + 24);
              *(_OWORD *)(v9 + 8) = v57;
              v58 = *(_OWORD *)(v55 + 40);
              v59 = *(_OWORD *)(v55 + 56);
              v60 = *(_OWORD *)(v55 + 72);
              *(_OWORD *)(v9 + 88) = *(_OWORD *)(v55 + 88);
              *(_OWORD *)(v9 + 72) = v60;
              *(_OWORD *)(v9 + 56) = v59;
              *(_OWORD *)(v9 + 40) = v58;
              *(_OWORD *)(v9 + 104) = *(_OWORD *)(v55 + 104);
              v61 = *(_OWORD *)(v55 + 120);
              *(_QWORD *)(v9 + 136) = *(_QWORD *)(v55 + 136);
              *(_OWORD *)(v9 + 120) = v61;
              *(_OWORD *)(v9 + 144) = *(_OWORD *)(v55 + 144);
              v62 = *(_OWORD *)(v55 + 160);
              *(_QWORD *)(v9 + 176) = *(_QWORD *)(v55 + 176);
              *(_OWORD *)(v9 + 160) = v62;
              *(_OWORD *)(v9 + 184) = *(_OWORD *)(v55 + 184);
              v63 = *(_OWORD *)(v55 + 200);
              *(_QWORD *)(v9 + 216) = *(_QWORD *)(v55 + 216);
              *(_OWORD *)(v9 + 200) = v63;
              *(_OWORD *)(v9 + 224) = *(_OWORD *)(v55 + 224);
              v64 = *(_OWORD *)(v55 + 240);
              *(_QWORD *)(v9 + 256) = *(_QWORD *)(v55 + 256);
              *(_OWORD *)(v9 + 240) = v64;
              *(double *)v55 = v56;
              *(_OWORD *)(v55 + 8) = v353;
              *(_OWORD *)(v55 + 24) = v361;
              *(_OWORD *)(v55 + 88) = v393;
              *(_OWORD *)(v55 + 72) = v385;
              *(_OWORD *)(v55 + 56) = v377;
              *(_OWORD *)(v55 + 40) = v369;
              *(_OWORD *)(v55 + 104) = v349;
              *(_QWORD *)(v55 + 136) = v342;
              *(_OWORD *)(v55 + 120) = v334;
              *(_QWORD *)(v55 + 176) = v323;
              *(_OWORD *)(v55 + 144) = v330;
              *(_OWORD *)(v55 + 160) = v315;
              *(_OWORD *)(v55 + 184) = v311;
              *(_QWORD *)(v55 + 216) = v304;
              *(_OWORD *)(v55 + 200) = v296;
              *(_QWORD *)(v55 + 256) = v289;
              *(_OWORD *)(v55 + 224) = v292;
              *(_OWORD *)(v55 + 240) = v282;
              do
              {
                v56 = *(double *)(v9 + 264);
                v9 += 264;
              }
              while (v28 >= v56);
              do
                v55 -= 264;
              while (v28 < *(double *)v55);
            }
            while (v9 < v55);
          }
          v65 = (_QWORD *)(v9 - 264);
          if (v9 - 264 != a1)
          {
            *(_QWORD *)a1 = *v65;
            v66 = *(_OWORD *)(v9 - 240);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 256);
            *(_OWORD *)(a1 + 24) = v66;
            v67 = *(_OWORD *)(v9 - 224);
            v68 = *(_OWORD *)(v9 - 208);
            v69 = *(_OWORD *)(v9 - 176);
            *(_OWORD *)(a1 + 72) = *(_OWORD *)(v9 - 192);
            *(_OWORD *)(a1 + 88) = v69;
            *(_OWORD *)(a1 + 40) = v67;
            *(_OWORD *)(a1 + 56) = v68;
            *(_OWORD *)(a1 + 104) = *(_OWORD *)(v9 - 160);
            v70 = *(_OWORD *)(v9 - 144);
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(v9 - 128);
            *(_OWORD *)(a1 + 120) = v70;
            *(_OWORD *)(a1 + 144) = *(_OWORD *)(v9 - 120);
            v71 = *(_OWORD *)(v9 - 104);
            *(_QWORD *)(a1 + 176) = *(_QWORD *)(v9 - 88);
            *(_OWORD *)(a1 + 160) = v71;
            *(_OWORD *)(a1 + 184) = *(_OWORD *)(v9 - 80);
            v72 = *(_OWORD *)(v9 - 64);
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(v9 - 48);
            *(_OWORD *)(a1 + 200) = v72;
            *(_OWORD *)(a1 + 224) = *(_OWORD *)(v9 - 40);
            v73 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 256) = *(_QWORD *)(v9 - 8);
            *(_OWORD *)(a1 + 240) = v73;
          }
          a4 = 0;
          *(double *)v65 = v28;
          *(_OWORD *)(v9 - 256) = v254;
          *(_OWORD *)(v9 - 240) = v262;
          *(_OWORD *)(v9 - 160) = v250;
          *(_OWORD *)(v9 - 144) = v240;
          *(_QWORD *)(v9 - 128) = v247;
          *(_OWORD *)(v9 - 120) = v236;
          *(_QWORD *)(v9 - 88) = v233;
          *(_OWORD *)(v9 - 104) = v226;
          *(_OWORD *)(v9 - 80) = v222;
          *(_OWORD *)(v9 - 64) = v212;
          *(_QWORD *)(v9 - 48) = v219;
          *(_OWORD *)(v9 - 40) = v208;
          *(_QWORD *)(v9 - 8) = v205;
          *(_OWORD *)(v9 - 192) = v275;
          *(_OWORD *)(v9 - 176) = v278;
          *(_OWORD *)(v9 - 224) = v269;
          *(_OWORD *)(v9 - 208) = v272;
          *(_OWORD *)(v9 - 24) = v202;
          continue;
        }
LABEL_10:
        v29 = 0;
        v253 = *(_OWORD *)(a1 + 8);
        v261 = *(_OWORD *)(a1 + 24);
        v274 = *(_OWORD *)(a1 + 72);
        v277 = *(_OWORD *)(a1 + 88);
        v268 = *(_OWORD *)(a1 + 40);
        v271 = *(_OWORD *)(a1 + 56);
        v249 = *(_OWORD *)(a1 + 104);
        v246 = *(_QWORD *)(a1 + 136);
        v235 = *(_OWORD *)(a1 + 144);
        v239 = *(_OWORD *)(a1 + 120);
        v232 = *(_QWORD *)(a1 + 176);
        v221 = *(_OWORD *)(a1 + 184);
        v225 = *(_OWORD *)(a1 + 160);
        v218 = *(_QWORD *)(a1 + 216);
        v207 = *(_OWORD *)(a1 + 224);
        v211 = *(_OWORD *)(a1 + 200);
        v204 = *(_QWORD *)(a1 + 256);
        v201 = *(_OWORD *)(a1 + 240);
        do
        {
          v30 = *(double *)(a1 + v29 + 264);
          v29 += 264;
        }
        while (v30 < v28);
        v31 = a1 + v29;
        v32 = (double *)a2;
        if (v29 == 264)
        {
          v32 = (double *)a2;
          do
          {
            if (v31 >= (unint64_t)v32)
              break;
            v32 -= 33;
          }
          while (*v32 >= v28);
        }
        else
        {
          do
            v32 -= 33;
          while (*v32 >= v28);
        }
        v9 = a1 + v29;
        if (v31 < (unint64_t)v32)
        {
          v33 = v32;
          do
          {
            v352 = *(_OWORD *)(v9 + 8);
            v360 = *(_OWORD *)(v9 + 24);
            v384 = *(_OWORD *)(v9 + 72);
            v392 = *(_OWORD *)(v9 + 88);
            v368 = *(_OWORD *)(v9 + 40);
            v376 = *(_OWORD *)(v9 + 56);
            v348 = *(_OWORD *)(v9 + 104);
            v341 = *(_QWORD *)(v9 + 136);
            v329 = *(_OWORD *)(v9 + 144);
            v333 = *(_OWORD *)(v9 + 120);
            v322 = *(_QWORD *)(v9 + 176);
            v310 = *(_OWORD *)(v9 + 184);
            v314 = *(_OWORD *)(v9 + 160);
            v303 = *(_QWORD *)(v9 + 216);
            v291 = *(_OWORD *)(v9 + 224);
            v295 = *(_OWORD *)(v9 + 200);
            v288 = *(_QWORD *)(v9 + 256);
            v281 = *(_OWORD *)(v9 + 240);
            *(double *)v9 = *v33;
            v34 = *(_OWORD *)(v33 + 1);
            *(_OWORD *)(v9 + 24) = *(_OWORD *)(v33 + 3);
            *(_OWORD *)(v9 + 8) = v34;
            v35 = *(_OWORD *)(v33 + 5);
            v36 = *(_OWORD *)(v33 + 7);
            v37 = *(_OWORD *)(v33 + 9);
            *(_OWORD *)(v9 + 88) = *(_OWORD *)(v33 + 11);
            *(_OWORD *)(v9 + 72) = v37;
            *(_OWORD *)(v9 + 56) = v36;
            *(_OWORD *)(v9 + 40) = v35;
            *(_OWORD *)(v9 + 104) = *(_OWORD *)(v33 + 13);
            v38 = *(_OWORD *)(v33 + 15);
            *(double *)(v9 + 136) = v33[17];
            *(_OWORD *)(v9 + 120) = v38;
            *(_OWORD *)(v9 + 144) = *((_OWORD *)v33 + 9);
            v39 = *((_OWORD *)v33 + 10);
            *(double *)(v9 + 176) = v33[22];
            *(_OWORD *)(v9 + 160) = v39;
            *(_OWORD *)(v9 + 184) = *(_OWORD *)(v33 + 23);
            v40 = *(_OWORD *)(v33 + 25);
            *(double *)(v9 + 216) = v33[27];
            *(_OWORD *)(v9 + 200) = v40;
            *(_OWORD *)(v9 + 224) = *((_OWORD *)v33 + 14);
            v41 = *((_OWORD *)v33 + 15);
            *(double *)(v9 + 256) = v33[32];
            *(_OWORD *)(v9 + 240) = v41;
            *v33 = v30;
            *(_OWORD *)(v33 + 1) = v352;
            *(_OWORD *)(v33 + 3) = v360;
            *(_OWORD *)(v33 + 11) = v392;
            *(_OWORD *)(v33 + 9) = v384;
            *(_OWORD *)(v33 + 7) = v376;
            *(_OWORD *)(v33 + 5) = v368;
            *(_OWORD *)(v33 + 13) = v348;
            *((_QWORD *)v33 + 17) = v341;
            *(_OWORD *)(v33 + 15) = v333;
            *((_QWORD *)v33 + 22) = v322;
            *((_OWORD *)v33 + 9) = v329;
            *((_OWORD *)v33 + 10) = v314;
            *(_OWORD *)(v33 + 23) = v310;
            *((_QWORD *)v33 + 27) = v303;
            *(_OWORD *)(v33 + 25) = v295;
            *((_QWORD *)v33 + 32) = v288;
            *((_OWORD *)v33 + 14) = v291;
            *((_OWORD *)v33 + 15) = v281;
            do
            {
              v30 = *(double *)(v9 + 264);
              v9 += 264;
            }
            while (v30 < v28);
            do
              v33 -= 33;
            while (*v33 >= v28);
          }
          while (v9 < (unint64_t)v33);
        }
        v42 = (_QWORD *)(v9 - 264);
        if (v9 - 264 != a1)
        {
          *(_QWORD *)a1 = *v42;
          v43 = *(_OWORD *)(v9 - 240);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v9 - 256);
          *(_OWORD *)(a1 + 24) = v43;
          v44 = *(_OWORD *)(v9 - 224);
          v45 = *(_OWORD *)(v9 - 208);
          v46 = *(_OWORD *)(v9 - 176);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(v9 - 192);
          *(_OWORD *)(a1 + 88) = v46;
          *(_OWORD *)(a1 + 40) = v44;
          *(_OWORD *)(a1 + 56) = v45;
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(v9 - 160);
          v47 = *(_OWORD *)(v9 - 144);
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(v9 - 128);
          *(_OWORD *)(a1 + 120) = v47;
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(v9 - 120);
          v48 = *(_OWORD *)(v9 - 104);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(v9 - 88);
          *(_OWORD *)(a1 + 160) = v48;
          *(_OWORD *)(a1 + 184) = *(_OWORD *)(v9 - 80);
          v49 = *(_OWORD *)(v9 - 64);
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(v9 - 48);
          *(_OWORD *)(a1 + 200) = v49;
          *(_OWORD *)(a1 + 224) = *(_OWORD *)(v9 - 40);
          v50 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(v9 - 8);
          *(_OWORD *)(a1 + 240) = v50;
        }
        *(double *)v42 = v28;
        *(_OWORD *)(v9 - 256) = v253;
        *(_OWORD *)(v9 - 240) = v261;
        *(_OWORD *)(v9 - 192) = v274;
        *(_OWORD *)(v9 - 176) = v277;
        *(_OWORD *)(v9 - 224) = v268;
        *(_OWORD *)(v9 - 208) = v271;
        *(_OWORD *)(v9 - 160) = v249;
        *(_OWORD *)(v9 - 144) = v239;
        *(_QWORD *)(v9 - 128) = v246;
        *(_OWORD *)(v9 - 120) = v235;
        *(_QWORD *)(v9 - 88) = v232;
        *(_OWORD *)(v9 - 104) = v225;
        *(_OWORD *)(v9 - 80) = v221;
        *(_OWORD *)(v9 - 64) = v211;
        *(_QWORD *)(v9 - 48) = v218;
        *(_OWORD *)(v9 - 40) = v207;
        *(_QWORD *)(v9 - 8) = v204;
        *(_OWORD *)(v9 - 24) = v201;
        if (v31 < (unint64_t)v32)
        {
LABEL_29:
          sub_20812459C(a1, v9 - 264, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v51 = sub_208126688(a1, v9 - 264);
        if (!sub_208126688(v9, a2))
        {
          if (v51)
            continue;
          goto LABEL_29;
        }
        a2 = v9 - 264;
        if (!v51)
          goto LABEL_1;
        return;
    }
  }
}

__n128 sub_207DC575C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  float v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  result = sub_207DC5FF0(a1, a2, a3, a4);
  result.n128_u32[0] = *(_DWORD *)(a5 + 8);
  v11 = *(float *)(a4 + 8);
  if (result.n128_f32[0] > v11)
  {
    v12 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v12;
    *(_DWORD *)(a4 + 8) = result.n128_u32[0];
    *(float *)(a5 + 8) = v11;
    result = *(__n128 *)(a4 + 60);
    v13 = *(_OWORD *)(a4 + 44);
    v14 = *(_OWORD *)(a4 + 28);
    v15 = *(_OWORD *)(a4 + 12);
    v16 = *(_OWORD *)(a5 + 28);
    v17 = *(_OWORD *)(a5 + 44);
    v18 = *(_OWORD *)(a5 + 60);
    *(_OWORD *)(a4 + 12) = *(_OWORD *)(a5 + 12);
    *(_OWORD *)(a4 + 60) = v18;
    *(_OWORD *)(a4 + 44) = v17;
    *(_OWORD *)(a4 + 28) = v16;
    *(_OWORD *)(a5 + 12) = v15;
    *(_OWORD *)(a5 + 28) = v14;
    *(_OWORD *)(a5 + 44) = v13;
    *(__n128 *)(a5 + 60) = result;
    v19 = *(_QWORD *)(a4 + 80);
    *(_QWORD *)(a4 + 80) = *(_QWORD *)(a5 + 80);
    *(_QWORD *)(a5 + 80) = v19;
    v20 = *(_QWORD *)(a4 + 88);
    *(_QWORD *)(a4 + 88) = *(_QWORD *)(a5 + 88);
    *(_QWORD *)(a5 + 88) = v20;
    v21 = *(_QWORD *)(a4 + 96);
    *(_QWORD *)(a4 + 96) = *(_QWORD *)(a5 + 96);
    *(_QWORD *)(a5 + 96) = v21;
    result.n128_u32[0] = *(_DWORD *)(a4 + 8);
    v22 = *(float *)(a3 + 8);
    if (result.n128_f32[0] > v22)
    {
      v23 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v23;
      *(_DWORD *)(a3 + 8) = result.n128_u32[0];
      *(float *)(a4 + 8) = v22;
      result = *(__n128 *)(a3 + 60);
      v24 = *(_OWORD *)(a3 + 44);
      v25 = *(_OWORD *)(a3 + 28);
      v26 = *(_OWORD *)(a3 + 12);
      v27 = *(_OWORD *)(a4 + 44);
      v28 = *(_OWORD *)(a4 + 60);
      v29 = *(_OWORD *)(a4 + 28);
      *(_OWORD *)(a3 + 12) = *(_OWORD *)(a4 + 12);
      *(_OWORD *)(a3 + 60) = v28;
      *(_OWORD *)(a3 + 44) = v27;
      *(_OWORD *)(a3 + 28) = v29;
      *(_OWORD *)(a4 + 12) = v26;
      *(_OWORD *)(a4 + 28) = v25;
      *(_OWORD *)(a4 + 44) = v24;
      *(__n128 *)(a4 + 60) = result;
      v30 = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(a4 + 80);
      *(_QWORD *)(a4 + 80) = v30;
      v31 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(a4 + 88);
      *(_QWORD *)(a4 + 88) = v31;
      v32 = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 96);
      *(_QWORD *)(a4 + 96) = v32;
      result.n128_u32[0] = *(_DWORD *)(a3 + 8);
      v33 = *(float *)(a2 + 8);
      if (result.n128_f32[0] > v33)
      {
        v34 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v34;
        *(_DWORD *)(a2 + 8) = result.n128_u32[0];
        *(float *)(a3 + 8) = v33;
        result = *(__n128 *)(a2 + 60);
        v35 = *(_OWORD *)(a2 + 44);
        v36 = *(_OWORD *)(a2 + 28);
        v37 = *(_OWORD *)(a2 + 12);
        v38 = *(_OWORD *)(a3 + 44);
        v39 = *(_OWORD *)(a3 + 60);
        v40 = *(_OWORD *)(a3 + 28);
        *(_OWORD *)(a2 + 12) = *(_OWORD *)(a3 + 12);
        *(_OWORD *)(a2 + 60) = v39;
        *(_OWORD *)(a2 + 44) = v38;
        *(_OWORD *)(a2 + 28) = v40;
        *(_OWORD *)(a3 + 12) = v37;
        *(_OWORD *)(a3 + 28) = v36;
        *(_OWORD *)(a3 + 44) = v35;
        *(__n128 *)(a3 + 60) = result;
        v41 = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
        *(_QWORD *)(a3 + 80) = v41;
        v42 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
        *(_QWORD *)(a3 + 88) = v42;
        v43 = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
        *(_QWORD *)(a3 + 96) = v43;
        result.n128_u32[0] = *(_DWORD *)(a2 + 8);
        v44 = *(float *)(a1 + 8);
        if (result.n128_f32[0] > v44)
        {
          v45 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v45;
          *(_DWORD *)(a1 + 8) = result.n128_u32[0];
          *(float *)(a2 + 8) = v44;
          result = *(__n128 *)(a1 + 60);
          v46 = *(_OWORD *)(a1 + 44);
          v47 = *(_OWORD *)(a1 + 28);
          v48 = *(_OWORD *)(a1 + 12);
          v49 = *(_OWORD *)(a2 + 44);
          v50 = *(_OWORD *)(a2 + 60);
          v51 = *(_OWORD *)(a2 + 28);
          *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
          *(_OWORD *)(a1 + 60) = v50;
          *(_OWORD *)(a1 + 44) = v49;
          *(_OWORD *)(a1 + 28) = v51;
          *(_OWORD *)(a2 + 12) = v48;
          *(_OWORD *)(a2 + 28) = v47;
          *(_OWORD *)(a2 + 44) = v46;
          *(__n128 *)(a2 + 60) = result;
          v52 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
          *(_QWORD *)(a2 + 80) = v52;
          v53 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a2 + 88) = v53;
          v54 = *(_QWORD *)(a1 + 96);
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
          *(_QWORD *)(a2 + 96) = v54;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_207DC5A0C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  float v3;
  float v4;
  float v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  float v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v3 = *((float *)a2 + 2);
  v4 = *((float *)result + 2);
  v5 = *((float *)a3 + 2);
  if (v3 > v4)
  {
    v6 = (__int128 *)((char *)result + 12);
    v7 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v7;
      *((float *)result + 2) = v3;
      *((float *)a2 + 2) = v4;
      v43 = *(_OWORD *)((char *)result + 44);
      v42 = *(_OWORD *)((char *)result + 60);
      v45 = *v6;
      v44 = *(_OWORD *)((char *)result + 28);
      v46 = *(_OWORD *)((char *)a2 + 28);
      v47 = *(_OWORD *)((char *)a2 + 60);
      v48 = *(_OWORD *)((char *)a2 + 12);
      *(_OWORD *)((char *)result + 44) = *(_OWORD *)((char *)a2 + 44);
      *(_OWORD *)((char *)result + 60) = v47;
      *v6 = v48;
      *(_OWORD *)((char *)result + 28) = v46;
      *(_OWORD *)((char *)a2 + 12) = v45;
      *(_OWORD *)((char *)a2 + 28) = v44;
      *(_OWORD *)((char *)a2 + 44) = v43;
      *(_OWORD *)((char *)a2 + 60) = v42;
      v49 = result[10];
      result[10] = a2[10];
      a2[10] = v49;
      v50 = result[11];
      result[11] = a2[11];
      a2[11] = v50;
      v17 = a2 + 12;
      v51 = result[12];
      result[12] = a2[12];
      a2[12] = v51;
      v52 = *((float *)a3 + 2);
      v53 = *((float *)a2 + 2);
      if (v52 <= v53)
        return result;
      v54 = *a2;
      *a2 = *a3;
      *a3 = v54;
      *((float *)a2 + 2) = v52;
      *((float *)a3 + 2) = v53;
      v56 = *(_OWORD *)((char *)a2 + 44);
      v55 = *(_OWORD *)((char *)a2 + 60);
      v58 = *(_OWORD *)((char *)a2 + 12);
      v57 = *(_OWORD *)((char *)a2 + 28);
      v59 = *(_OWORD *)((char *)a3 + 28);
      v60 = *(_OWORD *)((char *)a3 + 60);
      v61 = *(_OWORD *)((char *)a3 + 12);
      *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)((char *)a3 + 44);
      *(_OWORD *)((char *)a2 + 60) = v60;
      *(_OWORD *)((char *)a2 + 12) = v61;
      *(_OWORD *)((char *)a2 + 28) = v59;
      *(_OWORD *)((char *)a3 + 12) = v58;
      *(_OWORD *)((char *)a3 + 28) = v57;
      *(_OWORD *)((char *)a3 + 44) = v56;
      *(_OWORD *)((char *)a3 + 60) = v55;
      v62 = a2[10];
      a2[10] = a3[10];
      a3[10] = v62;
      v63 = a2[11];
      a2[11] = a3[11];
      a3[11] = v63;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      *((float *)result + 2) = v5;
      *((float *)a3 + 2) = v4;
      v9 = *(_OWORD *)((char *)result + 44);
      v8 = *(_OWORD *)((char *)result + 60);
      v11 = *v6;
      v10 = *(_OWORD *)((char *)result + 28);
      v12 = *(_OWORD *)((char *)a3 + 28);
      v13 = *(_OWORD *)((char *)a3 + 60);
      v14 = *(_OWORD *)((char *)a3 + 12);
      *(_OWORD *)((char *)result + 44) = *(_OWORD *)((char *)a3 + 44);
      *(_OWORD *)((char *)result + 60) = v13;
      *v6 = v14;
      *(_OWORD *)((char *)result + 28) = v12;
      *(_OWORD *)((char *)a3 + 12) = v11;
      *(_OWORD *)((char *)a3 + 28) = v10;
      *(_OWORD *)((char *)a3 + 44) = v9;
      *(_OWORD *)((char *)a3 + 60) = v8;
      v15 = result[10];
      result[10] = a3[10];
      a3[10] = v15;
      v16 = result[11];
      result[11] = a3[11];
      a3[11] = v16;
      v17 = result + 12;
    }
    v29 = a3 + 12;
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    v18 = *a2;
    *a2 = *a3;
    *a3 = v18;
    *((float *)a2 + 2) = v5;
    *((float *)a3 + 2) = v3;
    v19 = *(_OWORD *)((char *)a2 + 60);
    v20 = *(_OWORD *)((char *)a2 + 44);
    v21 = *(_OWORD *)((char *)a2 + 28);
    v22 = *(_OWORD *)((char *)a2 + 12);
    v23 = *(_OWORD *)((char *)a3 + 28);
    v24 = *(_OWORD *)((char *)a3 + 44);
    v25 = *(_OWORD *)((char *)a3 + 60);
    *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)((char *)a3 + 12);
    *(_OWORD *)((char *)a2 + 60) = v25;
    *(_OWORD *)((char *)a2 + 44) = v24;
    *(_OWORD *)((char *)a2 + 28) = v23;
    *(_OWORD *)((char *)a3 + 12) = v22;
    *(_OWORD *)((char *)a3 + 28) = v21;
    *(_OWORD *)((char *)a3 + 44) = v20;
    *(_OWORD *)((char *)a3 + 60) = v19;
    v26 = a2[10];
    a2[10] = a3[10];
    a3[10] = v26;
    v27 = a2[11];
    a2[11] = a3[11];
    a3[11] = v27;
    v29 = a2 + 12;
    v28 = a2[12];
    a2[12] = a3[12];
    a3[12] = v28;
    v30 = *((float *)a2 + 2);
    v31 = *((float *)result + 2);
    if (v30 > v31)
    {
      v32 = *result;
      *result = *a2;
      *a2 = v32;
      *((float *)result + 2) = v30;
      *((float *)a2 + 2) = v31;
      v33 = *(_OWORD *)((char *)result + 60);
      v34 = *(_OWORD *)((char *)result + 44);
      v35 = *(_OWORD *)((char *)result + 28);
      v36 = *(_OWORD *)((char *)result + 12);
      v37 = *(_OWORD *)((char *)a2 + 44);
      v38 = *(_OWORD *)((char *)a2 + 60);
      v39 = *(_OWORD *)((char *)a2 + 28);
      *(_OWORD *)((char *)result + 12) = *(_OWORD *)((char *)a2 + 12);
      *(_OWORD *)((char *)result + 60) = v38;
      *(_OWORD *)((char *)result + 44) = v37;
      *(_OWORD *)((char *)result + 28) = v39;
      *(_OWORD *)((char *)a2 + 12) = v36;
      *(_OWORD *)((char *)a2 + 28) = v35;
      *(_OWORD *)((char *)a2 + 44) = v34;
      *(_OWORD *)((char *)a2 + 60) = v33;
      v40 = result[10];
      result[10] = a2[10];
      a2[10] = v40;
      v41 = result[11];
      result[11] = a2[11];
      a2[11] = v41;
      v17 = result + 12;
LABEL_10:
      v64 = *v17;
      *v17 = *v29;
      *v29 = v64;
    }
  }
  return result;
}

BOOL sub_207DC5D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 96);
      v7 = *(float *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 104);
        *(_QWORD *)(a2 - 104) = v8;
        *(float *)(a1 + 8) = v6;
        *(float *)(a2 - 96) = v7;
        v9 = *(_OWORD *)(a1 + 60);
        v10 = *(_OWORD *)(a1 + 44);
        v11 = *(_OWORD *)(a1 + 28);
        v12 = *(_OWORD *)(a1 + 12);
        v13 = *(_OWORD *)(a2 - 76);
        v14 = *(_OWORD *)(a2 - 60);
        v15 = *(_OWORD *)(a2 - 44);
        *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 - 92);
        *(_OWORD *)(a1 + 60) = v15;
        *(_OWORD *)(a1 + 44) = v14;
        *(_OWORD *)(a1 + 28) = v13;
        *(_OWORD *)(a2 - 92) = v12;
        *(_OWORD *)(a2 - 76) = v11;
        *(_OWORD *)(a2 - 60) = v10;
        *(_OWORD *)(a2 - 44) = v9;
        v16 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v16;
        v17 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v17;
        v18 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v18;
      }
      return result;
    case 3:
      sub_207DC5A0C((uint64_t *)a1, (uint64_t *)(a1 + 104), (uint64_t *)(a2 - 104));
      return 1;
    case 4:
      sub_207DC5FF0(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      sub_207DC575C(a1, a1 + 104, a1 + 208, a1 + 312, a2 - 104);
      return 1;
    default:
      v19 = a1 + 208;
      sub_207DC5A0C((uint64_t *)a1, (uint64_t *)(a1 + 104), (uint64_t *)(a1 + 208));
      v20 = a1 + 312;
      if (a1 + 312 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v24 = *(float *)(v20 + 8);
    if (v24 > *(float *)(v19 + 8))
    {
      v25 = *(_QWORD *)v20;
      v35 = *(_OWORD *)(v20 + 12);
      v36 = *(_OWORD *)(v20 + 28);
      v37 = *(_OWORD *)(v20 + 44);
      v38 = *(_OWORD *)(v20 + 60);
      v26 = *(_QWORD *)(v20 + 80);
      v27 = *(_OWORD *)(v20 + 88);
      *(_QWORD *)(v20 + 80) = 0;
      *(_QWORD *)(v20 + 88) = 0;
      v28 = v21;
      *(_QWORD *)(v20 + 96) = 0;
      do
      {
        v29 = a1 + v28;
        v30 = (_OWORD *)(a1 + v28 + 220);
        v31 = (_OWORD *)(a1 + v28 + 324);
        v32 = *(_OWORD *)(a1 + v28 + 236);
        *v31 = *v30;
        v31[1] = v32;
        v33 = *(_OWORD *)(a1 + v28 + 268);
        v31[2] = *(_OWORD *)(a1 + v28 + 252);
        v31[3] = v33;
        *(_OWORD *)(a1 + v28 + 392) = *(_OWORD *)(a1 + v28 + 288);
        *(_QWORD *)(v29 + 408) = *(_QWORD *)(a1 + v28 + 304);
        v34 = *(_QWORD *)(a1 + v28 + 208);
        *(_DWORD *)(v29 + 320) = *(_DWORD *)(a1 + v28 + 216);
        *(_QWORD *)(v29 + 288) = 0;
        *(_QWORD *)(v29 + 296) = 0;
        *(_QWORD *)(v29 + 304) = 0;
        *(_QWORD *)(v29 + 312) = v34;
        if (v28 == -208)
        {
          v23 = a1;
          goto LABEL_7;
        }
        v28 -= 104;
      }
      while (v24 > *(float *)(v29 + 112));
      v23 = a1 + v28 + 312;
LABEL_7:
      *(_QWORD *)v23 = v25;
      *(float *)(v23 + 8) = v24;
      *(_OWORD *)(v29 + 220) = v35;
      *(_OWORD *)(v29 + 236) = v36;
      *(_OWORD *)(v29 + 252) = v37;
      v30[3] = v38;
      *(_QWORD *)(v29 + 288) = v26;
      ++v22;
      *(_OWORD *)(v23 + 88) = v27;
      if (v22 == 8)
        return v20 + 104 == a2;
    }
    v19 = v20;
    v21 += 104;
    v20 += 104;
    if (v20 == a2)
      return 1;
  }
}

__n128 sub_207DC5FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  float v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_207DC5A0C((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 8);
  v9 = *(float *)(a3 + 8);
  if (result.n128_f32[0] > v9)
  {
    v10 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a3 + 8) = result.n128_u32[0];
    *(float *)(a4 + 8) = v9;
    result = *(__n128 *)(a3 + 60);
    v11 = *(_OWORD *)(a3 + 44);
    v12 = *(_OWORD *)(a3 + 28);
    v13 = *(_OWORD *)(a3 + 12);
    v14 = *(_OWORD *)(a4 + 28);
    v15 = *(_OWORD *)(a4 + 44);
    v16 = *(_OWORD *)(a4 + 60);
    *(_OWORD *)(a3 + 12) = *(_OWORD *)(a4 + 12);
    *(_OWORD *)(a3 + 60) = v16;
    *(_OWORD *)(a3 + 44) = v15;
    *(_OWORD *)(a3 + 28) = v14;
    *(_OWORD *)(a4 + 12) = v13;
    *(_OWORD *)(a4 + 28) = v12;
    *(_OWORD *)(a4 + 44) = v11;
    *(__n128 *)(a4 + 60) = result;
    v17 = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(a4 + 80);
    *(_QWORD *)(a4 + 80) = v17;
    v18 = *(_QWORD *)(a3 + 88);
    *(_QWORD *)(a3 + 88) = *(_QWORD *)(a4 + 88);
    *(_QWORD *)(a4 + 88) = v18;
    v19 = *(_QWORD *)(a3 + 96);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(a4 + 96);
    *(_QWORD *)(a4 + 96) = v19;
    result.n128_u32[0] = *(_DWORD *)(a3 + 8);
    v20 = *(float *)(a2 + 8);
    if (result.n128_f32[0] > v20)
    {
      v21 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v21;
      *(_DWORD *)(a2 + 8) = result.n128_u32[0];
      *(float *)(a3 + 8) = v20;
      result = *(__n128 *)(a2 + 60);
      v22 = *(_OWORD *)(a2 + 44);
      v23 = *(_OWORD *)(a2 + 28);
      v24 = *(_OWORD *)(a2 + 12);
      v25 = *(_OWORD *)(a3 + 44);
      v26 = *(_OWORD *)(a3 + 60);
      v27 = *(_OWORD *)(a3 + 28);
      *(_OWORD *)(a2 + 12) = *(_OWORD *)(a3 + 12);
      *(_OWORD *)(a2 + 60) = v26;
      *(_OWORD *)(a2 + 44) = v25;
      *(_OWORD *)(a2 + 28) = v27;
      *(_OWORD *)(a3 + 12) = v24;
      *(_OWORD *)(a3 + 28) = v23;
      *(_OWORD *)(a3 + 44) = v22;
      *(__n128 *)(a3 + 60) = result;
      v28 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
      *(_QWORD *)(a3 + 80) = v28;
      v29 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = v29;
      v30 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
      *(_QWORD *)(a3 + 96) = v30;
      result.n128_u32[0] = *(_DWORD *)(a2 + 8);
      v31 = *(float *)(a1 + 8);
      if (result.n128_f32[0] > v31)
      {
        v32 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v32;
        *(_DWORD *)(a1 + 8) = result.n128_u32[0];
        *(float *)(a2 + 8) = v31;
        result = *(__n128 *)(a1 + 60);
        v33 = *(_OWORD *)(a1 + 44);
        v34 = *(_OWORD *)(a1 + 28);
        v35 = *(_OWORD *)(a1 + 12);
        v36 = *(_OWORD *)(a2 + 44);
        v37 = *(_OWORD *)(a2 + 60);
        v38 = *(_OWORD *)(a2 + 28);
        *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
        *(_OWORD *)(a1 + 60) = v37;
        *(_OWORD *)(a1 + 44) = v36;
        *(_OWORD *)(a1 + 28) = v38;
        *(_OWORD *)(a2 + 12) = v35;
        *(_OWORD *)(a2 + 28) = v34;
        *(_OWORD *)(a2 + 44) = v33;
        *(__n128 *)(a2 + 60) = result;
        v39 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a2 + 80) = v39;
        v40 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a2 + 88) = v40;
        v41 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a2 + 96) = v41;
      }
    }
  }
  return result;
}

void sub_207DC6210(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  unint64_t v32;
  float v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  void *v42;
  void *v43;
  BOOL v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  void *v57;
  void *v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  BOOL v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  float v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  float v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  float v109;
  uint64_t v110;
  __int128 v111;
  float v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  void *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  float v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t *v129;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;

uint64_t *sub_207DC6D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  result = sub_207DC729C(a1, a2, a3, a4);
  v11 = *(float *)(a5 + 8);
  v12 = *(float *)(a4 + 8);
  if (v11 > v12)
  {
    v13 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    *(float *)(a4 + 8) = v11;
    *(float *)(a5 + 8) = v12;
    v14 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v14;
    v15 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v15;
    v16 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(a5 + 32);
    *(_QWORD *)(a5 + 32) = v16;
    v17 = *(float *)(a4 + 8);
    v18 = *(float *)(a3 + 8);
    if (v17 > v18)
    {
      v19 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v19;
      *(float *)(a3 + 8) = v17;
      *(float *)(a4 + 8) = v18;
      v20 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v20;
      v21 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v21;
      v22 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      *(_QWORD *)(a4 + 32) = v22;
      v23 = *(float *)(a3 + 8);
      v24 = *(float *)(a2 + 8);
      if (v23 > v24)
      {
        v25 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v25;
        *(float *)(a2 + 8) = v23;
        *(float *)(a3 + 8) = v24;
        v26 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v26;
        v27 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v27;
        v28 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
        *(_QWORD *)(a3 + 32) = v28;
        v29 = *(float *)(a2 + 8);
        v30 = *(float *)(a1 + 8);
        if (v29 > v30)
        {
          v31 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v31;
          *(float *)(a1 + 8) = v29;
          *(float *)(a2 + 8) = v30;
          v32 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v32;
          v33 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v33;
          v34 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a2 + 32) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_207DC6ECC(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((float *)a2 + 2);
  v4 = *((float *)result + 2);
  v5 = *((float *)a3 + 2);
  if (v3 > v4)
  {
    v6 = result + 4;
    v7 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v7;
      *((float *)result + 2) = v3;
      *((float *)a2 + 2) = v4;
      v20 = result[2];
      result[2] = a2[2];
      a2[2] = v20;
      v21 = result[3];
      result[3] = a2[3];
      v6 = a2 + 4;
      v22 = a2[4];
      a2[3] = v21;
      v23 = result[4];
      result[4] = v22;
      a2[4] = v23;
      v24 = *((float *)a3 + 2);
      if (v24 <= v4)
        return result;
      *a2 = *a3;
      *a3 = v7;
      *((float *)a2 + 2) = v24;
      *((float *)a3 + 2) = v4;
      v25 = a2[2];
      a2[2] = a3[2];
      a3[2] = v25;
      v9 = a2[3];
      a2[3] = a3[3];
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      *((float *)result + 2) = v5;
      *((float *)a3 + 2) = v4;
      v8 = result[2];
      result[2] = a3[2];
      a3[2] = v8;
      v9 = result[3];
      result[3] = a3[3];
    }
    a3[3] = v9;
    v14 = a3 + 4;
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    v10 = *a2;
    *a2 = *a3;
    *a3 = v10;
    *((float *)a2 + 2) = v5;
    *((float *)a3 + 2) = v3;
    v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    v12 = a2[3];
    a2[3] = a3[3];
    a3[3] = v12;
    v14 = a2 + 4;
    v13 = a2[4];
    a2[4] = a3[4];
    a3[4] = v13;
    v15 = *((float *)a2 + 2);
    v16 = *((float *)result + 2);
    if (v15 > v16)
    {
      v17 = *result;
      *result = *a2;
      *a2 = v17;
      *((float *)result + 2) = v15;
      *((float *)a2 + 2) = v16;
      v18 = result[2];
      result[2] = a2[2];
      a2[2] = v18;
      v19 = result[3];
      result[3] = a2[3];
      a2[3] = v19;
      v6 = result + 4;
LABEL_10:
      v26 = *v6;
      *v6 = *v14;
      *v14 = v26;
    }
  }
  return result;
}

BOOL sub_207DC7068(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v18 = *(float *)(a2 - 32);
      v19 = *(float *)(a1 + 8);
      if (v18 > v19)
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 40);
        *(_QWORD *)(a2 - 40) = v20;
        *(float *)(a1 + 8) = v18;
        *(float *)(a2 - 32) = v19;
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v21;
        v22 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v22;
        v23 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v23;
      }
      return result;
    case 3uLL:
      sub_207DC6ECC((uint64_t *)a1, (uint64_t *)(a1 + 40), (uint64_t *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_207DC729C(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_207DC6D2C(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v6 = a1 + 80;
      sub_207DC6ECC((uint64_t *)a1, (uint64_t *)(a1 + 40), (uint64_t *)(a1 + 80));
      v7 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)(v7 + 8);
    if (v11 > *(float *)(v6 + 8))
    {
      v12 = *(_QWORD *)v7;
      v13 = *(_QWORD *)(v7 + 16);
      v14 = *(_OWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v15 = v8;
      *(_QWORD *)(v7 + 16) = 0;
      do
      {
        v16 = a1 + v15;
        v17 = *(_QWORD *)(a1 + v15 + 80);
        *(_DWORD *)(v16 + 128) = *(_DWORD *)(a1 + v15 + 88);
        *(_OWORD *)(v16 + 136) = *(_OWORD *)(a1 + v15 + 96);
        *(_QWORD *)(v16 + 152) = *(_QWORD *)(a1 + v15 + 112);
        *(_QWORD *)(v16 + 96) = 0;
        *(_QWORD *)(v16 + 104) = 0;
        *(_QWORD *)(v16 + 112) = 0;
        *(_QWORD *)(v16 + 120) = v17;
        if (v15 == -80)
        {
          v10 = a1;
          goto LABEL_6;
        }
        v15 -= 40;
      }
      while (v11 > *(float *)(v16 + 48));
      v10 = a1 + v15 + 120;
LABEL_6:
      *(_QWORD *)v10 = v12;
      *(float *)(v10 + 8) = v11;
      *(_QWORD *)(v16 + 96) = v13;
      *(_OWORD *)(v10 + 24) = v14;
      if (++v9 == 8)
        return v7 + 40 == a2;
    }
    v6 = v7;
    v8 += 40;
    v7 += 40;
    if (v7 == a2)
      return 1;
  }
}

uint64_t *sub_207DC729C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = sub_207DC6ECC((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v9 = *(float *)(a4 + 8);
  v10 = *(float *)(a3 + 8);
  if (v9 > v10)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    *(float *)(a3 + 8) = v9;
    *(float *)(a4 + 8) = v10;
    v12 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v12;
    v13 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = v13;
    v14 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 32) = v14;
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a2 + 8);
    if (v15 > v16)
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v17;
      *(float *)(a2 + 8) = v15;
      *(float *)(a3 + 8) = v16;
      v18 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v18;
      v19 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v19;
      v20 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = v20;
      v21 = *(float *)(a2 + 8);
      v22 = *(float *)(a1 + 8);
      if (v21 > v22)
      {
        v23 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v23;
        *(float *)(a1 + 8) = v21;
        *(float *)(a2 + 8) = v22;
        v24 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v24;
        v25 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v25;
        v26 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = v26;
      }
    }
  }
  return result;
}

uint64_t sub_207DC73D8(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  _OWORD v39[2];
  mach_timebase_info info;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  _QWORD v49[2];
  char v50;
  _QWORD v51[2];
  __int128 v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  __int128 v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_2545308B0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
  {
    mach_timebase_info(&info);
    LODWORD(v36) = info.numer;
    LODWORD(v37) = info.denom;
    *(double *)&qword_2545308A8 = (double)v36 / (double)v37;
    __cxa_guard_release(&qword_2545308B0);
  }
  v51[0] = llround(*(double *)&qword_2545308A8 * (double)v8);
  v51[1] = 2;
  LOBYTE(v52) = 0;
  v54 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v52 = *a3;
    v53 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v54 = 1;
  }
  v55 = 0;
  v56 = 0;
  v57 = *a4;
  v58 = 1;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v10 = (char *)operator new(0x110uLL);
  info = (mach_timebase_info)&off_24C0736D0;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v12 = *(std::__shared_weak_count **)(a2 + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v11 = *(_QWORD *)(a2 + 8);
      v16 = *(std::__shared_weak_count **)(a2 + 16);
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 - 1, v17));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v11 + 32))(v49, v11);
    v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v49[0] + 48))(v49[0]);
    v21 = (std::__shared_weak_count_vtbl *)v49[0];
    if (v49[0])
    {
      v22 = (std::__shared_weak_count *)operator new(0x20uLL);
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073880;
      v22->__shared_owners_ = 0;
      v22->__shared_weak_owners_ = 0;
      v22[1].__vftable = v21;
    }
    else
    {
      v22 = 0;
    }
    v23 = *(_DWORD *)(a2 + 48);
    v24 = *(_WORD *)(a2 + 52);
    v41 = v21;
    v42 = v22;
    v25 = *(_QWORD *)(a2 + 24);
    v43 = 0;
    v44 = v25;
    v45 = *(_DWORD *)(a2 + 32);
    v46 = v20;
    v47 = v23;
    v48 = v24;
  }
  else
  {
    v49[0] = &v50;
    v49[1] = a2;
    sub_2081A3100(*(_DWORD *)(a2 + 48));
  }
  sub_207D56E28((uint64_t)&info, (uint64_t)&v38);
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_QWORD *)v10 = off_24C073B78;
  *((_QWORD *)v10 + 1) = &off_24C073BC8;
  v29 = v38;
  v38 = 0uLL;
  v30 = v39[0];
  *((_OWORD *)v10 + 1) = v29;
  *((_OWORD *)v10 + 2) = v30;
  *(_OWORD *)(v10 + 46) = *(_OWORD *)((char *)v39 + 14);
  sub_207D47D34((uint64_t)(v10 + 64), (uint64_t)v51);
  *(_QWORD *)v10 = off_24C073728;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  *(_QWORD *)v10 = off_24C078EA0;
  info = 0;
  *a1 = &off_24C078D18;
  a1[1] = v10;
  v34 = operator new(0x20uLL);
  *v34 = &off_24C078E28;
  v34[1] = 0;
  v34[2] = 0;
  v34[3] = v10;
  a1[2] = v34;
  return sub_207D49CF4((uint64_t)v51);
}

void sub_207DC7770(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545308B0);
  _Unwind_Resume(a1);
}

void sub_207DC7788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_207EFF84C(v27);
  sub_207D56CB8(&a16);
  sub_207D49CF4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_207DC77AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v27[1] = v28;
  v30 = (std::__shared_weak_count *)v27[3];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  sub_207D56D4C(&a9);
  operator delete(v27);
  sub_207D49CF4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_207DC780C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  sub_207D56DC0((uint64_t)&a16);
  operator delete(v27);
  sub_207D49CF4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_207DC7830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  operator delete(v27);
  sub_207D49CF4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_207DC784C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_207D49CF4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_207DC7860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  if (a24)
    (*(void (**)(uint64_t))(*(_QWORD *)a24 + 8))(a24);
  operator delete(v27);
  sub_207D49CF4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_207DC7894(_QWORD *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  unint64_t v25;
  unint64_t v26;
  mach_timebase_info info;
  __int128 v28;
  _BYTE v29[30];
  _QWORD v30[2];
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_2545308B0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2545308B0))
  {
    mach_timebase_info(&info);
    LODWORD(v25) = info.numer;
    LODWORD(v26) = info.denom;
    *(double *)&qword_2545308A8 = (double)v25 / (double)v26;
    __cxa_guard_release(&qword_2545308B0);
  }
  v30[0] = llround(*(double *)&qword_2545308A8 * (double)v8);
  v30[1] = 2;
  LOBYTE(v31) = 0;
  v33 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v31 = *a3;
    v32 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v33 = 1;
  }
  v34 = 0;
  v35 = 0;
  v36 = *a4;
  v37 = 1;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v10 = (char *)operator new(0x110uLL);
  info = (mach_timebase_info)&off_24C073BC8;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(std::__shared_weak_count **)(a2 + 16);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_DWORD *)(a2 + 48);
    v17 = *(_WORD *)(a2 + 52);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_DWORD *)(a2 + 48);
    v17 = *(_WORD *)(a2 + 52);
  }
  *(_QWORD *)&v28 = v11;
  *((_QWORD *)&v28 + 1) = v12;
  *(_QWORD *)v29 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v29[8] = *(_DWORD *)(a2 + 32);
  *(_QWORD *)&v29[16] = v15;
  *(_DWORD *)&v29[24] = v16;
  *(_WORD *)&v29[28] = v17;
  if (v12)
  {
    v19 = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)v10 = off_24C073B78;
  *((_QWORD *)v10 + 1) = &off_24C073BC8;
  v21 = v28;
  v28 = 0uLL;
  v22 = *(_OWORD *)v29;
  *((_OWORD *)v10 + 1) = v21;
  *((_OWORD *)v10 + 2) = v22;
  *(_OWORD *)(v10 + 46) = *(_OWORD *)&v29[14];
  sub_207D47D34((uint64_t)(v10 + 64), (uint64_t)v30);
  *(_QWORD *)v10 = off_24C078EA0;
  info = 0;
  *a1 = &off_24C078D18;
  a1[1] = v10;
  v23 = operator new(0x20uLL);
  *v23 = &off_24C078E28;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v10;
  a1[2] = v23;
  return sub_207D49CF4((uint64_t)v30);
}

void sub_207DC7B08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545308B0);
  _Unwind_Resume(a1);
}

void sub_207DC7B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  _QWORD *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_207EFF84C(v2);
  sub_207D56CB8((_QWORD **)va);
  sub_207D49CF4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207DC7B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v2[1] = v3;
  v5 = (std::__shared_weak_count *)v2[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207D56D4C((uint64_t *)va);
  operator delete(v2);
  sub_207D49CF4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207DC7BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207D49CF4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207DC7BB8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C074C28;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207DC7C2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void sub_207DC7C34(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C074C28;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DC7CA8(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_207DC7CB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_207DC7CC4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_QWORD *sub_207DC7D40(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C074D18;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207DC7DB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C074D18;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207DC7E30(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207DC7E38(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C074CD8, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_20807F93C(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_207DC7EE0(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_207DC918C();
  sub_207DC7F94(a1);
  sub_207D49528(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_207DC7F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207DC7F94(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BCE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BCE0))
  {
    v4 = sub_207DC8DDC();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_25452BCC8, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25452BCD8 = *(_QWORD *)(v9 - 8);
      xmmword_25452BCC8 = v7;
    }
    sub_207C99DE0(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BCC8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BCE0);
  }
  return sub_207DC954C(&xmmword_25452BCC8, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)"}");
}

void sub_207DC80A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  __cxa_guard_abort(&qword_25452BCE0);
  _Unwind_Resume(a1);
}

void sub_207DC80C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BCE0);
  _Unwind_Resume(a1);
}

void sub_207DC80DC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 3;
}

void sub_207DC8108(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 3, a2);
}

_QWORD *sub_207DC8140(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C074D18;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207DC81B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C074D18;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207DC8230(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207DC8878();
  return sub_207DC8384(v2, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_207DC8288(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207DC85B0((uint64_t)v5, (uint64_t)v2, (_BYTE **)(a1 + 8));
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C074B88[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C074B40[v3])(v5, v2);
  return result;
}

void sub_207DC8320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C074B40[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207DC8358(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207DC8384(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207DC85B0((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C074B58[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C074B58[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C074B88[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C074B40[v16])(&p_dst, &__dst);
  return result;
}

void sub_207DC8520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC8538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC8560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC8574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC8588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC859C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC85B0(uint64_t a1, uint64_t a2, _BYTE **a3)
{
  _OWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v24 = v5;
  v6 = sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_208205930(v6, v23);
  sub_207CBAB98(v7, (uint64_t)",", 1);
  v23[0] = v5 + 1;
  sub_208080FF8(**a3, (uint64_t)a3, (uint64_t)v23);
  sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)"}", 1);
  v8 = *((_DWORD *)v5 + 30);
  if ((v8 & 0x10) != 0)
  {
    v11 = *((_QWORD *)v5 + 14);
    v12 = *((_QWORD *)v5 + 9);
    if (v11 < v12)
    {
      *((_QWORD *)v5 + 14) = v12;
      v11 = v12;
    }
    v13 = (const void *)*((_QWORD *)v5 + 8);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = (const void *)*((_QWORD *)v5 + 5);
    v9 = *((_QWORD *)v5 + 7) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v16 + 16);
    operator delete(v16);
  }
  v23[0] = a2;
  v23[1] = __dst;
  v23[2] = a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_207CA9F48();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24C074B70[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_207DC883C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207DC8864(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2082155DC((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_207DC8878()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BB80);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BB80))
    return &xmmword_25452BB68;
  v2 = sub_207DC8954();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452BB68, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452BB78 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452BB68 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BB68, &dword_207C77000);
  __cxa_guard_release(&qword_25452BB80);
  return &xmmword_25452BB68;
}

void sub_207DC893C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BB80);
  _Unwind_Resume(a1);
}

std::string *sub_207DC8954()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BBA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BBA0))
    return &stru_25452BB88;
  sub_207DC8BF8((uint64_t)__p);
  sub_207DC8A44((char *)__p, &stru_25452BB88);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BB88, &dword_207C77000);
  __cxa_guard_release(&qword_25452BBA0);
  return &stru_25452BB88;
}

void sub_207DC8A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BBA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BBA0);
  _Unwind_Resume(a1);
}

void sub_207DC8A44(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207DC8DDC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207DC8BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207DC8BF8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BC60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BC60))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Points<2>>]", qword_25452BC48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BC48, &dword_207C77000);
    __cxa_guard_release(&qword_25452BC60);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452BC80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452BC80))
  {
    v5 = sub_207D49434(qword_25452BC48, "<", 0);
    sub_207D49330(qword_25452BC48, 0, v5, qword_25452BC68);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BC68, &dword_207C77000);
    __cxa_guard_release(&qword_25452BC80);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452BCA0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452BCA0))
  {
    sub_208215C6C((uint64_t)qword_25452BC68, (uint64_t)&xmmword_25452BC88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BC88, &dword_207C77000);
    __cxa_guard_release(&qword_25452BCA0);
  }
  if (byte_25452BC9F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452BC88, *((unint64_t *)&xmmword_25452BC88 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452BC88;
    *(_QWORD *)(a1 + 16) = unk_25452BC98;
  }
}

void sub_207DC8D94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BCA0);
  _Unwind_Resume(a1);
}

void sub_207DC8DAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BC80);
  _Unwind_Resume(a1);
}

void sub_207DC8DC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BC60);
  _Unwind_Resume(a1);
}

__int128 *sub_207DC8DDC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BBC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BBC0))
    return &xmmword_25452BBA8;
  v2 = sub_207DC8EB8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452BBA8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452BBB8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452BBA8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BBA8, &dword_207C77000);
  __cxa_guard_release(&qword_25452BBC0);
  return &xmmword_25452BBA8;
}

void sub_207DC8EA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BBC0);
  _Unwind_Resume(a1);
}

std::string *sub_207DC8EB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BBE0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BBE0))
    return &stru_25452BBC8;
  sub_207DC8FA8((uint64_t)__p);
  sub_207D50234((char *)__p, &stru_25452BBC8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BBC8, &dword_207C77000);
  __cxa_guard_release(&qword_25452BBE0);
  return &stru_25452BBC8;
}

void sub_207DC8F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BBE0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BBE0);
  _Unwind_Resume(a1);
}

void sub_207DC8FA8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BC00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BC00))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Points<2>]", qword_25452BBE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BBE8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BC00);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452BC20);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452BC20))
  {
    v5 = sub_207D49434(qword_25452BBE8, "<", 0);
    sub_207D49330(qword_25452BBE8, 0, v5, qword_25452BC08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BC08, &dword_207C77000);
    __cxa_guard_release(&qword_25452BC20);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452BC40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452BC40))
  {
    sub_208215C6C((uint64_t)qword_25452BC08, (uint64_t)&xmmword_25452BC28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BC28, &dword_207C77000);
    __cxa_guard_release(&qword_25452BC40);
  }
  if (byte_25452BC3F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452BC28, *((unint64_t *)&xmmword_25452BC28 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452BC28;
    *(_QWORD *)(a1 + 16) = unk_25452BC38;
  }
}

void sub_207DC9144(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BC40);
  _Unwind_Resume(a1);
}

void sub_207DC915C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BC20);
  _Unwind_Resume(a1);
}

void sub_207DC9174(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BC00);
  _Unwind_Resume(a1);
}

std::string *sub_207DC918C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452BCC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BCC0))
  {
    sub_207C96EE8(v9, "viz::PackageData");
    v2 = sub_207DC8DDC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_207DC9454();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_207CAA110(v8, (uint64_t)__dst, 4uLL);
    sub_208215D20((char *)v9, (uint64_t *)v8, &stru_25452BCA8, v6, v7);
    sub_207C99DE0(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BCA8, &dword_207C77000);
        __cxa_guard_release(&qword_25452BCC0);
        return &stru_25452BCA8;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25452BCA8;
}

void sub_207DC9370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_207C99DE0(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25452BCC0);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25452BCC0);
  _Unwind_Resume(a1);
}

std::string *sub_207DC9454()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BB60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BB60))
    return &stru_25452BB48;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 3U]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452BB48);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BB48, &dword_207C77000);
  __cxa_guard_release(&qword_25452BB60);
  return &stru_25452BB48;
}

void sub_207DC950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BB60);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BB60);
  _Unwind_Resume(a1);
}

uint64_t sub_207DC954C(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207DC85B0((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C074B58[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C074B88[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C074B40[v11])(&p_dst, &__dst);
  return result;
}

void sub_207DC968C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC96A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC96B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC96CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC96E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DC96F8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DC970C(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t sub_207DC974C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207DC97BC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_207DC97F0()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_207DC983C(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_207DC97BC;
  return result;
}

__n128 sub_207DC9878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_207DC97BC;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_207DC98A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN3cva6MatrixIfLj2ELj1ELb1EEENS_9allocatorIS4_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208236A20)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_207DC9924(__int128 *a1, __int128 *a2)
{
  BOOL v4;
  char v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  void (**v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;

  if (*((_BYTE *)a1 + 32))
    v4 = *((_BYTE *)a2 + 32) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v14 = *(void (***)(uint64_t))a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v14;
    v15 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v15;
    return;
  }
  if (*((_BYTE *)a1 + 32))
  {
    if (!*((_BYTE *)a2 + 32))
    {
      v5 = *((_BYTE *)a2 + 8);
      v7 = *((_QWORD *)a2 + 2);
      v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      (**(void (***)(__int128 *))a2)(a2);
      *a2 = *a1;
      *(_QWORD *)a1 = off_24C06E9E8;
      *((_QWORD *)a1 + 1) = 0;
      *((_BYTE *)a1 + 8) = v5;
      *((_QWORD *)a1 + 2) = v7;
      *((_QWORD *)a1 + 3) = v6;
      if (v6)
      {
        v10 = (unint64_t *)&v6->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v12 = *((_BYTE *)a1 + 32);
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        *((_BYTE *)a2 + 32) = v12;
        do
          v13 = __ldaxr(v10);
        while (__stlxr(v13 - 1, v10));
        if (v13)
          return;
LABEL_47:
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        return;
      }
LABEL_23:
      v21 = *((_BYTE *)a1 + 32);
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      *((_BYTE *)a2 + 32) = v21;
      return;
    }
  }
  else if (*((_BYTE *)a2 + 32))
  {
    v40 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v17 = *((_QWORD *)a1 + 2);
    v16 = *((_QWORD *)a1 + 3);
    v18 = *((_BYTE *)a1 + 8);
    *(_QWORD *)a2 = off_24C06E9E8;
    *((_BYTE *)a2 + 8) = v18;
    *((_QWORD *)a2 + 2) = v17;
    *((_QWORD *)a2 + 3) = v16;
    if (v16)
    {
      v19 = (unint64_t *)(v16 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    (**(void (***)(uint64_t))a1)((uint64_t)a1);
    *a1 = v40;
    goto LABEL_23;
  }
  v22 = *((_BYTE *)a1 + 8);
  v23 = *((_QWORD *)a1 + 2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 3);
  if (v6)
  {
    v24 = (unint64_t *)&v6->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v27 = *((_QWORD *)a2 + 2);
  v26 = *((_QWORD *)a2 + 3);
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = v27;
  *((_QWORD *)a1 + 3) = v26;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *((_BYTE *)a2 + 8) = v22;
  if (v6)
  {
    v33 = (unint64_t *)&v6->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 2) = v23;
  *((_QWORD *)a2 + 3) = v6;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v6)
  {
    v38 = (unint64_t *)&v6->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
      goto LABEL_47;
  }
}

void sub_207DC9BDC(char *a1)
{
  if (a1)
  {
    sub_207DC9BDC(*(_QWORD *)a1);
    sub_207DC9BDC(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_207DC9C34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_207DC9C34(*(_QWORD *)a1);
    sub_207DC9C34(*(_QWORD *)(a1 + 8));
    if (!*(_BYTE *)(a1 + 168))
      goto LABEL_7;
    v2 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v2)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_8:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

void sub_207DC9CD4(char *a1)
{
  void *v2;

  if (a1)
  {
    sub_207DC9CD4(*(_QWORD *)a1);
    sub_207DC9CD4(*((_QWORD *)a1 + 1));
    v2 = (void *)*((_QWORD *)a1 + 7);
    if (v2)
    {
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v2);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_207DC9D3C(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_9:
      operator delete((void *)v1);
      return;
    }
    if (!*(_BYTE *)(v1 + 168))
      goto LABEL_8;
    v2 = *(std::__shared_weak_count **)(v1 + 128);
    if (!v2)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(v1 + 55) & 0x80000000) == 0)
        goto LABEL_9;
    }
    else
    {
LABEL_8:
      if ((*(char *)(v1 + 55) & 0x80000000) == 0)
        goto LABEL_9;
    }
    operator delete(*(void **)(v1 + 32));
    operator delete((void *)v1);
  }
}

void sub_207DC9DE0(unsigned int *a1)
{
  uint64_t v2;
  char v3;

  if (a1)
  {
    sub_207DC9DE0(*(_QWORD *)a1);
    sub_207DC9DE0(*((_QWORD *)a1 + 1));
    v2 = a1[44];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C074C00[v2])(&v3, a1 + 14);
    a1[44] = -1;
    if (*((char *)a1 + 55) < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_207DC9E60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x4_t v13;

  v2 = result;
  if ((*(_BYTE *)(result + 48) & 0x20) == 0)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/DataView.h", 727, (uint64_t)"format.Contains(FormatFlags::FLOAT16)", 37, (uint64_t)"The DataView does not contain half data", 39, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
      goto LABEL_22;
  }
  if (*(_BYTE *)(v2 + 112))
  {
    if (*(_BYTE *)(v2 + 108) && *(_QWORD *)(v2 + 96))
    {
      v4 = *(_QWORD *)(v2 + 64);
      v5 = *(std::__shared_weak_count **)(v2 + 72);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v9 = (uint64_t *)(v2 + 96);
  }
  else
  {
    v9 = (uint64_t *)(v2 + 40);
  }
  v10 = *v9;
  v11 = *(_DWORD *)(v2 + 36);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)v2))) & 1) != 0 || (v12 = *(_DWORD *)(v2 + 16)) == 0)
  {
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    v13 = *(int32x4_t *)v2;
  }
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(v2 + 20);
  *(_QWORD *)a2 = v10;
  *(int32x4_t *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 24) = v12;
  *(_DWORD *)(a2 + 44) = v11;
  if (v12 * v11 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974);
    if ((_DWORD)result)
LABEL_22:
      abort();
  }
  return result;
}

void sub_207DCA020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  _QWORD *v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint8x8_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  size_t prime;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD **v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint8x8_t v70;
  _QWORD **v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  _BOOL8 v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  int8x16_t v87;
  float32x2_t v88;
  int8x16_t v89;
  float32x2_t v90;
  int8x16_t v91;
  float32x2_t v92;
  int8x16_t v93;
  float32x2_t v94;
  float v95;
  int v96;
  float32x4_t v97;
  float v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  double v107;
  uint64_t *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  float64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  float64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  int v136;
  float64x2_t v137[8];
  float64x2_t __p;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  char v146;

  ++*(_QWORD *)(a1 + 144);
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  v132 = 0u;
  v131 = 1065353216;
  LODWORD(v133) = 1065353216;
  DWORD1(v134) = 1065353216;
  v136 = 1065353216;
  *(_QWORD *)&__p.f64[0] = a3;
  *(_QWORD *)&__p.f64[1] = &v131;
  if (!sub_207DCAD50((float **)&__p))
  {
    v126 = a2;
    v12 = *(_QWORD **)(a2 + 32);
    if (v12)
    {
      v8.i64[0] = *(_QWORD *)a3;
      v8.i32[2] = *(_DWORD *)(a3 + 8);
      v9.i64[0] = *(_QWORD *)(a3 + 16);
      v9.i32[2] = *(_DWORD *)(a3 + 24);
      v10.i64[0] = *(_QWORD *)(a3 + 32);
      v10.i32[2] = *(_DWORD *)(a3 + 40);
      v11.i64[0] = *(_QWORD *)(a3 + 48);
      v11.i32[2] = *(_DWORD *)(a3 + 56);
      v13.i64[0] = vzip1q_s32(v8, v9).u64[0];
      v14 = (int8x16_t)vnegq_f32(v11);
      v15 = (int8x16_t)vtrn2q_s32(v8, v9);
      v15.i32[2] = v10.i32[1];
      v16 = (int8x16_t)vzip2q_s32(v8, v9);
      *(float32x2_t *)v17.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v13.f32, *(float *)v14.i32), *(float32x2_t *)v15.i8, *(float32x2_t *)v11.f32, 1), *(float32x2_t *)v16.i8, v11, 2);
      v16.i32[2] = v10.i32[2];
      v17.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v11.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).u32[0]);
      v18.i32[3] = 0;
      v18.i32[0] = v15.i32[0];
      v20 = vextq_s8(vextq_s8(v15, v15, 0xCuLL), v16, 8uLL);
      v19.i64[0] = v20.i64[1];
      *(uint64_t *)((char *)v18.i64 + 4) = v20.i64[0];
      v19.i64[1] = vdupq_laneq_s32((int32x4_t)v16, 2).u32[0];
      v127 = v18;
      v128 = v19;
      v13.i64[1] = *(_QWORD *)(a3 + 32);
      v21 = (uint64_t *)(a1 + 16);
      v129 = v17;
      v130 = v13;
      do
      {
        v22 = v12[3];
        v23 = v12[4];
        while (v22 != v23)
        {
          v24 = **(_DWORD **)(v22 + 1104);
          if (*(float *)(v22 + 88) <= 0.0)
          {
            if (v24 != 7)
              goto LABEL_7;
            goto LABEL_15;
          }
          if (v24 == 7)
          {
LABEL_15:
            v29 = *(int8x8_t *)(a1 + 8);
            if (!*(_QWORD *)&v29)
              goto LABEL_7;
            v30 = *(_QWORD *)(v22 + 40);
            v31 = (uint8x8_t)vcnt_s8(v29);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              v32 = *(_QWORD *)(v22 + 40);
              if (v30 >= *(_QWORD *)&v29)
                v32 = v30 % *(_QWORD *)&v29;
            }
            else
            {
              v32 = (*(_QWORD *)&v29 - 1) & v30;
            }
            v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
            if (!v33)
              goto LABEL_7;
            v34 = (_QWORD *)*v33;
            if (!*v33)
              goto LABEL_7;
            v35 = *(_QWORD *)&v29 - 1;
            if (v31.u32[0] < 2uLL)
            {
              while (1)
              {
                v36 = v34[1];
                if (v36 == v30)
                {
                  if (v34[2] == v30)
                    goto LABEL_93;
                }
                else if ((v36 & v35) != v32)
                {
                  goto LABEL_7;
                }
                v34 = (_QWORD *)*v34;
                if (!v34)
                  goto LABEL_7;
              }
            }
            while (1)
            {
              v37 = v34[1];
              if (v37 == v30)
                break;
              if (v37 >= *(_QWORD *)&v29)
                v37 %= *(_QWORD *)&v29;
              if (v37 != v32)
                goto LABEL_7;
LABEL_30:
              v34 = (_QWORD *)*v34;
              if (!v34)
                goto LABEL_7;
            }
            if (v34[2] != v30)
              goto LABEL_30;
LABEL_93:
            if (v31.u32[0] > 1uLL)
            {
              v57 = *(_QWORD *)(v22 + 40);
              if (*(_QWORD *)&v29 <= v30)
                v57 = v30 % *(_QWORD *)&v29;
            }
            else
            {
              v57 = v35 & v30;
            }
            v58 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v57);
            if (v58)
            {
              v59 = *v58;
              if (*v58)
              {
                if (v31.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v60 = v59[1];
                    if (v60 == v30)
                    {
                      if (v59[2] == v30)
                        goto LABEL_228;
                    }
                    else if ((v60 & v35) != v57)
                    {
                      goto LABEL_7;
                    }
                    v59 = (_QWORD *)*v59;
                    if (!v59)
                      goto LABEL_7;
                  }
                }
                do
                {
                  v61 = v59[1];
                  if (v61 == v30)
                  {
                    if (v59[2] == v30)
                    {
LABEL_228:
                      sub_207D46B24((uint64_t)&__p, (_QWORD *)a1, v59);
                      v115 = __p.f64[0];
                      if (*(_QWORD *)&__p.f64[0])
                      {
                        if (LOBYTE(v139.f64[0]))
                        {
                          v116 = *(uint64_t **)(*(_QWORD *)&__p.f64[0] + 24);
                          *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 24) = 0;
                          if (v116)
                          {
                            v117 = sub_207D43990(v116);
                            operator delete(v117);
                          }
                        }
                        operator delete(*(void **)&v115);
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v61 >= *(_QWORD *)&v29)
                      v61 %= *(_QWORD *)&v29;
                    if (v61 != v57)
                      break;
                  }
                  v59 = (_QWORD *)*v59;
                }
                while (v59);
              }
            }
LABEL_7:
            v22 += 1344;
          }
          else
          {
            v25 = *(_QWORD *)(v22 + 40);
            v26 = *(_QWORD *)(a1 + 8);
            if (v26)
            {
              v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
              v27.i16[0] = vaddlv_u8(v27);
              if (v27.u32[0] > 1uLL)
              {
                v28 = *(_QWORD *)(v22 + 40);
                if (v25 >= v26)
                  v28 = v25 % v26;
              }
              else
              {
                v28 = (v26 - 1) & v25;
              }
              v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
              if (v38)
              {
                v39 = (_QWORD *)*v38;
                if (v39)
                {
                  if (v27.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v41 = v39[1];
                      if (v41 == v25)
                      {
                        if (v39[2] == v25)
                          goto LABEL_143;
                      }
                      else if ((v41 & (v26 - 1)) != v28)
                      {
                        goto LABEL_53;
                      }
                      v39 = (_QWORD *)*v39;
                      if (!v39)
                        goto LABEL_53;
                    }
                  }
                  do
                  {
                    v40 = v39[1];
                    if (v40 == v25)
                    {
                      if (v39[2] == v25)
                        goto LABEL_143;
                    }
                    else
                    {
                      if (v40 >= v26)
                        v40 %= v26;
                      if (v40 != v28)
                        break;
                    }
                    v39 = (_QWORD *)*v39;
                  }
                  while (v39);
                }
              }
            }
LABEL_53:
            v42 = operator new(0xA0uLL);
            sub_207DCC5E0((uint64_t)v42, (__int128 *)(a1 + 40));
            v26 = *(_QWORD *)(a1 + 8);
            if (!v26)
              goto LABEL_73;
            v43 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
            v43.i16[0] = vaddlv_u8(v43);
            if (v43.u32[0] > 1uLL)
            {
              v4 = v25;
              if (v26 <= v25)
                v4 = v25 % v26;
            }
            else
            {
              v4 = (v26 - 1) & v25;
            }
            v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
            if (!v44 || (v45 = (_QWORD *)*v44) == 0)
            {
LABEL_73:
              v3 = (uint64_t)operator new(0x20uLL);
              *(_QWORD *)&__p.f64[0] = v3;
              *(_QWORD *)&__p.f64[1] = a1 + 16;
              *(_QWORD *)v3 = 0;
              *(_QWORD *)(v3 + 8) = v25;
              *(_QWORD *)(v3 + 16) = v25;
              *(_QWORD *)(v3 + 24) = v42;
              LOBYTE(v139.f64[0]) = 1;
              v48 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
              v49 = *(float *)(a1 + 32);
              if (!v26 || (float)(v49 * (float)v26) < v48)
              {
                v50 = v26 < 3 || (v26 & (v26 - 1)) != 0;
                v51 = v50 | (2 * v26);
                v52 = vcvtps_u32_f32(v48 / v49);
                if (v51 <= v52)
                  prime = v52;
                else
                  prime = v51;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v26 = *(_QWORD *)(a1 + 8);
                }
                if (prime > v26)
                  goto LABEL_86;
                if (prime < v26)
                {
                  v54 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
                  if (v26 < 3
                    || (v55 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
                  {
                    v54 = std::__next_prime(v54);
                  }
                  else
                  {
                    v56 = 1 << -(char)__clz(v54 - 1);
                    if (v54 >= 2)
                      v54 = v56;
                  }
                  if (prime <= v54)
                    prime = v54;
                  if (prime < v26)
LABEL_86:
                    sub_207CA6B84(a1, prime);
                }
                v26 = *(_QWORD *)(a1 + 8);
                v66 = v26 - 1;
                if ((v26 & (v26 - 1)) == 0)
                {
                  v4 = v66 & v25;
                  v67 = *(_QWORD *)a1;
                  v68 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v66 & v25));
                  if (!v68)
                  {
LABEL_134:
                    *(_QWORD *)v3 = *v21;
                    *v21 = v3;
                    *(_QWORD *)(v67 + 8 * v4) = v21;
                    if (*(_QWORD *)v3)
                    {
                      v69 = *(_QWORD *)(*(_QWORD *)v3 + 8);
                      if ((v26 & (v26 - 1)) != 0)
                      {
                        if (v69 >= v26)
                          v69 %= v26;
                      }
                      else
                      {
                        v69 &= v26 - 1;
                      }
                      v68 = (uint64_t *)(*(_QWORD *)a1 + 8 * v69);
LABEL_140:
                      *v68 = v3;
                    }
                    ++*(_QWORD *)(a1 + 24);
                    goto LABEL_142;
                  }
LABEL_132:
                  *(_QWORD *)v3 = *v68;
                  goto LABEL_140;
                }
                if (v26 <= v25)
                {
                  v4 = v25 % v26;
                  v67 = *(_QWORD *)a1;
                  v68 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v25 % v26));
                  if (!v68)
                    goto LABEL_134;
                  goto LABEL_132;
                }
                v4 = v25;
              }
              v67 = *(_QWORD *)a1;
              v68 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
              if (!v68)
                goto LABEL_134;
              goto LABEL_132;
            }
            if (v43.u32[0] < 2uLL)
            {
              while (1)
              {
                v47 = v45[1];
                if (v47 == v25)
                {
                  if (v45[2] == v25)
                    goto LABEL_113;
                }
                else if ((v47 & (v26 - 1)) != v4)
                {
                  goto LABEL_73;
                }
                v45 = (_QWORD *)*v45;
                if (!v45)
                  goto LABEL_73;
              }
            }
            while (1)
            {
              v46 = v45[1];
              if (v46 == v25)
                break;
              if (v46 >= v26)
                v46 %= v26;
              if (v46 != v4)
                goto LABEL_73;
LABEL_63:
              v45 = (_QWORD *)*v45;
              if (!v45)
                goto LABEL_73;
            }
            if (v45[2] != v25)
              goto LABEL_63;
LABEL_113:
            v62 = v42[3];
            if (v62)
            {
              v4 = v42[4];
              v63 = (void *)v42[3];
              if (v4 != v62)
              {
                do
                {
                  v3 = *(_QWORD *)(v4 - 8);
                  if (v3)
                  {
                    v64 = (unint64_t *)(v3 + 8);
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
                      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
                    }
                  }
                  v4 -= 16;
                }
                while (v4 != v62);
                v63 = (void *)v42[3];
              }
              v42[4] = v62;
              operator delete(v63);
            }
            if (v42[2])
            {
              v110 = *v42;
              v3 = v42[1];
              v111 = *(_QWORD *)v3;
              *(_QWORD *)(v111 + 8) = *(_QWORD *)(*v42 + 8);
              **(_QWORD **)(v110 + 8) = v111;
              v42[2] = 0;
              if ((_QWORD *)v3 != v42)
              {
                do
                {
                  v4 = *(_QWORD *)(v3 + 8);
                  v112 = *(std::__shared_weak_count **)(v3 + 24);
                  if (v112)
                  {
                    p_shared_owners = (unint64_t *)&v112->__shared_owners_;
                    do
                      v114 = __ldaxr(p_shared_owners);
                    while (__stlxr(v114 - 1, p_shared_owners));
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                  }
                  operator delete((void *)v3);
                  v3 = v4;
                }
                while ((_QWORD *)v4 != v42);
              }
            }
            operator delete(v42);
            v26 = *(_QWORD *)(a1 + 8);
LABEL_142:
            v25 = *(_QWORD *)(v22 + 40);
LABEL_143:
            if (v26)
            {
              v70 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
              v70.i16[0] = vaddlv_u8(v70);
              if (v70.u32[0] > 1uLL)
              {
                v3 = v25;
                if (v26 <= v25)
                  v3 = v25 % v26;
              }
              else
              {
                v3 = (v26 - 1) & v25;
              }
              v71 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
              if (v71)
              {
                v72 = *v71;
                if (*v71)
                {
                  if (v70.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v74 = v72[1];
                      if (v74 == v25)
                      {
                        if (v72[2] == v25)
                          goto LABEL_202;
                      }
                      else if ((v74 & (v26 - 1)) != v3)
                      {
                        goto LABEL_163;
                      }
                      v72 = (_QWORD *)*v72;
                      if (!v72)
                        goto LABEL_163;
                    }
                  }
                  do
                  {
                    v73 = v72[1];
                    if (v73 == v25)
                    {
                      if (v72[2] == v25)
                        goto LABEL_202;
                    }
                    else
                    {
                      if (v73 >= v26)
                        v73 %= v26;
                      if (v73 != v3)
                        break;
                    }
                    v72 = (_QWORD *)*v72;
                  }
                  while (v72);
                }
              }
            }
LABEL_163:
            v72 = operator new(0x20uLL);
            *(_QWORD *)&__p.f64[0] = v72;
            *(_QWORD *)&__p.f64[1] = a1 + 16;
            *v72 = 0;
            v72[1] = v25;
            v72[2] = v25;
            v72[3] = 0;
            LOBYTE(v139.f64[0]) = 1;
            v75 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
            v76 = *(float *)(a1 + 32);
            if (v26 && (float)(v76 * (float)v26) >= v75)
            {
              v25 = v3;
            }
            else
            {
              v77 = v26 < 3 || (v26 & (v26 - 1)) != 0;
              v78 = v77 | (2 * v26);
              v79 = vcvtps_u32_f32(v75 / v76);
              if (v78 <= v79)
                v80 = v79;
              else
                v80 = v78;
              if (v80 == 1)
              {
                v80 = 2;
              }
              else if ((v80 & (v80 - 1)) != 0)
              {
                v80 = std::__next_prime(v80);
                v26 = *(_QWORD *)(a1 + 8);
              }
              if (v80 > v26)
                goto LABEL_187;
              if (v80 < v26)
              {
                v81 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
                if (v26 < 3
                  || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
                {
                  v81 = std::__next_prime(v81);
                }
                else
                {
                  v83 = 1 << -(char)__clz(v81 - 1);
                  if (v81 >= 2)
                    v81 = v83;
                }
                if (v80 <= v81)
                  v80 = v81;
                if (v80 < v26)
LABEL_187:
                  sub_207CA6B84(a1, v80);
              }
              v26 = *(_QWORD *)(a1 + 8);
              if ((v26 & (v26 - 1)) != 0)
              {
                if (v26 <= v25)
                  v25 %= v26;
              }
              else
              {
                v25 &= v26 - 1;
              }
            }
            v84 = *(_QWORD *)a1;
            v85 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v25);
            if (v85)
            {
              *v72 = *v85;
              goto LABEL_200;
            }
            *v72 = *v21;
            *v21 = (uint64_t)v72;
            *(_QWORD *)(v84 + 8 * v25) = v21;
            if (*v72)
            {
              v86 = *(_QWORD *)(*v72 + 8);
              if ((v26 & (v26 - 1)) != 0)
              {
                if (v86 >= v26)
                  v86 %= v26;
              }
              else
              {
                v86 &= v26 - 1;
              }
              v85 = (_QWORD *)(*(_QWORD *)a1 + 8 * v86);
LABEL_200:
              *v85 = v72;
            }
            ++*(_QWORD *)(a1 + 24);
LABEL_202:
            v3 = v22 + 456;
            if (*(_BYTE *)(v22 + 652))
            {
              v87.i64[0] = *(_QWORD *)(v22 + 588);
              v88 = *(float32x2_t *)(v22 + 596);
              v89.i64[0] = *(_QWORD *)(v22 + 604);
              v90 = *(float32x2_t *)(v22 + 612);
              v91.i64[0] = *(_QWORD *)(v22 + 620);
              v92 = *(float32x2_t *)(v22 + 628);
              v93.i64[0] = *(_QWORD *)(v22 + 636);
              v94 = *(float32x2_t *)(v22 + 644);
              v95 = *(float *)(v22 + 88);
              v96 = *(_DWORD *)(v22 + 928);
            }
            else
            {
              v97 = *(float32x4_t *)(v22 + 504);
              if (*(_BYTE *)(v22 + 440) && *(_BYTE *)(v22 + 1024))
              {
                v98 = *(double *)(v22 + 1016);
                v99 = vmulq_n_f32(v97, v98);
                v99.i32[3] = HIDWORD(*(_OWORD *)(v22 + 504));
                v97 = v99;
              }
              v95 = *(float *)(v22 + 88);
              v96 = *(_DWORD *)(v22 + 928);
              v100 = *(float32x4_t *)(v22 + 472);
              v101 = *(float32x4_t *)(v22 + 488);
              v102 = *(float32x4_t *)v3;
              *(_BYTE *)(v22 + 652) = 1;
              v87 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v102.f32[0]), v127, *(float32x2_t *)v102.f32, 1), v128, v102, 2), v129, v102, 3);
              v89 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v100.f32[0]), v127, *(float32x2_t *)v100.f32, 1), v128, v100, 2), v129, v100, 3);
              v91 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v101.f32[0]), v127, *(float32x2_t *)v101.f32, 1), v128, v101, 2), v129, v101, 3);
              v93 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v130, v97.f32[0]), v127, *(float32x2_t *)v97.f32, 1), v128, v97, 2), v129, v97, 3);
              *(int8x16_t *)(v22 + 588) = v87;
              *(int8x16_t *)(v22 + 604) = v89;
              *(int8x16_t *)(v22 + 620) = v91;
              *(int8x16_t *)(v22 + 636) = v93;
              v88 = (float32x2_t)vextq_s8(v87, v87, 8uLL).u64[0];
              v90 = (float32x2_t)vextq_s8(v89, v89, 8uLL).u64[0];
              v92 = (float32x2_t)vextq_s8(v91, v91, 8uLL).u64[0];
              v94 = (float32x2_t)vextq_s8(v93, v93, 8uLL).u64[0];
            }
            v103 = vcvtq_f64_f32(v92);
            v104 = vcvtq_f64_f32(*(float32x2_t *)v91.i8);
            v105 = vcvtq_f64_f32(*(float32x2_t *)v89.i8);
            v106 = vcvtq_f64_f32(*(float32x2_t *)v87.i8);
            v107 = v95;
            v108 = (uint64_t *)v72[3];
            v137[0] = v106;
            v137[1] = vcvtq_f64_f32(v88);
            v137[2] = v105;
            v137[3] = vcvtq_f64_f32(v90);
            v137[4] = v104;
            v137[5] = v103;
            v137[6] = vcvtq_f64_f32(*(float32x2_t *)v93.i8);
            v137[7] = vcvtq_f64_f32(v94);
            if (v96 == 5)
              v106.f64[0] = v107 * 0.5;
            else
              v106.f64[0] = v107;
            sub_207DCCBF4(v108, v137, *(_QWORD *)(a1 + 144), (uint64_t)&__p, v106, v105, v104, v103);
            if (v146)
            {
              if (!*(_BYTE *)(a1 + 136))
                goto LABEL_7;
              v109 = *(unsigned __int8 *)(v22 + 652);
              *(float32x4_t *)(v22 + 588) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(__p), v139);
              *(float32x4_t *)(v22 + 604) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v140), v141);
              *(float32x4_t *)(v22 + 620) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v142), v143);
              *(float32x4_t *)(v22 + 636) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v144), v145);
              if (v109)
                goto LABEL_7;
              *(_BYTE *)(v22 + 652) = 1;
              v22 += 1344;
            }
            else
            {
              if (!*(_BYTE *)(a1 + 137))
                goto LABEL_7;
              *(_DWORD *)(v22 + 88) = 0;
              v22 += 1344;
            }
          }
        }
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    v118 = *(_QWORD **)(a1 + 16);
    if (v118)
    {
      do
      {
LABEL_235:
        v119 = *(_QWORD **)(v126 + 32);
        if (v119)
        {
          v120 = v119[3];
          v121 = v119[4];
          if (v120 != v121)
            goto LABEL_239;
LABEL_237:
          while (1)
          {
            v119 = (_QWORD *)*v119;
            if (!v119)
              break;
            v120 = v119[3];
            v121 = v119[4];
            if (v120 != v121)
            {
LABEL_239:
              while (*(_QWORD *)(v120 + 40) != v118[2])
              {
                v120 += 1344;
                if (v120 == v121)
                  goto LABEL_237;
              }
              v118 = (_QWORD *)*v118;
              if (!v118)
                return;
              goto LABEL_235;
            }
          }
        }
        v122 = (_QWORD *)*v118;
        sub_207D46B24((uint64_t)&__p, (_QWORD *)a1, v118);
        v123 = __p.f64[0];
        if (*(_QWORD *)&__p.f64[0])
        {
          if (LOBYTE(v139.f64[0]))
          {
            v124 = *(uint64_t **)(*(_QWORD *)&__p.f64[0] + 24);
            *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 24) = 0;
            if (v124)
            {
              v125 = sub_207D43990(v124);
              operator delete(v125);
            }
          }
          operator delete(*(void **)&v123);
        }
        v118 = v122;
      }
      while (v122);
    }
  }
}

void sub_207DCACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_207DCAE64((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_207DCAD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_207DCAE64((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_207DCAD24(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v3;

  v3 = sub_207D43990(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_207DCAD3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_207DCAD50(float **a1)
{
  float *v1;
  float *v2;

  v1 = *a1;
  v2 = a1[1];
  return **a1 == *v2
      && v1[1] == v2[1]
      && v1[2] == v2[2]
      && v1[3] == v2[3]
      && v1[4] == v2[4]
      && v1[5] == v2[5]
      && v1[6] == v2[6]
      && v1[7] == v2[7]
      && v1[8] == v2[8]
      && v1[9] == v2[9]
      && v1[10] == v2[10]
      && v1[11] == v2[11]
      && v1[12] == v2[12]
      && v1[13] == v2[13]
      && v1[14] == v2[14]
      && v1[15] == v2[15];
}

uint64_t sub_207DCAE64(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (uint64_t *)v2[3];
      v2[3] = 0;
      if (v3)
      {
        v4 = sub_207D43990(v3);
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_207DCAEB4(uint64_t a1, uint64_t (**a2)(uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  float *v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  if (!*a2 || (v3 = (uint64_t *)(*a2)(3)) == 0)
    sub_207DCBF24();
  v4 = *v3;
  v5 = HIDWORD(*v3);
  v6 = (float *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_23;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v7 <= v4)
      v9 = v4 % v7;
  }
  else
  {
    v9 = ((_DWORD)v7 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*(_QWORD *)v6 + 8 * v9);
  if (!v10 || (v11 = *v10) == 0)
  {
LABEL_23:
    sub_207DCBF78(v6, v4, v4);
    v15 = (float *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (v16)
      goto LABEL_24;
    goto LABEL_47;
  }
  if (v8.u32[0] < 2uLL)
  {
    v12 = v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == v4)
      {
        if (*((_DWORD *)v11 + 4) == (_DWORD)v4)
          goto LABEL_44;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_23;
      }
      v11 = (uint64_t *)*v11;
      if (!v11)
        goto LABEL_23;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == v4)
      break;
    if (v13 >= v7)
      v13 %= v7;
    if (v13 != v9)
      goto LABEL_23;
LABEL_13:
    v11 = (uint64_t *)*v11;
    if (!v11)
      goto LABEL_23;
  }
  if (*((_DWORD *)v11 + 4) != (_DWORD)v4)
    goto LABEL_13;
LABEL_44:
  v24 = *((_DWORD *)v11 + 5);
  if (v24 >= v5)
    v24 = v5;
  *((_DWORD *)v11 + 5) = v24;
  v15 = (float *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  if (!v16)
    goto LABEL_47;
LABEL_24:
  v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = v4;
    if (v16 <= v4)
      v18 = v4 % v16;
  }
  else
  {
    v18 = ((_DWORD)v16 - 1) & v4;
  }
  v19 = *(uint64_t ***)(*(_QWORD *)v15 + 8 * v18);
  if (!v19 || (v20 = *v19) == 0)
  {
LABEL_47:
    sub_207DCBF78(v15, v4, v4);
    return;
  }
  if (v17.u32[0] < 2uLL)
  {
    v21 = v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == v4)
      {
        if (*((_DWORD *)v20 + 4) == (_DWORD)v4)
          goto LABEL_48;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_47;
      }
      v20 = (uint64_t *)*v20;
      if (!v20)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v22 = v20[1];
    if (v22 == v4)
      break;
    if (v22 >= v16)
      v22 %= v16;
    if (v22 != v18)
      goto LABEL_47;
LABEL_33:
    v20 = (uint64_t *)*v20;
    if (!v20)
      goto LABEL_47;
  }
  if (*((_DWORD *)v20 + 4) != (_DWORD)v4)
    goto LABEL_33;
LABEL_48:
  v25 = *((_DWORD *)v20 + 5);
  if (v25 <= v5)
    v25 = v5;
  *((_DWORD *)v20 + 5) = v25;
}

void sub_207DCB108(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  _OWORD *v4;
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  xpc_object_t (*v8)(uint64_t);
  void *v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    qmemcpy(v5, "T3D.NumInstancescom.apple.ODT.OD", sizeof(v5));
    v3 = MEMORY[0x24BDAC760];
    do
    {
      v4 = operator new(0x28uLL);
      *v4 = v5[1];
      v4[1] = v5[0];
      *((_BYTE *)v4 + 32) = 0;
      v6 = v3;
      v7 = 0x40000000;
      v8 = sub_207DCB1D0;
      v9 = &unk_24C074D68;
      v10 = a1;
      v11 = v1;
      analytics_send_event_lazy();
      operator delete(v4);
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
}

void sub_207DCB1BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

xpc_object_t sub_207DCB1D0(uint64_t a1)
{
  int8x8_t *v2;
  xpc_object_t empty;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *(int8x8_t **)(a1 + 32);
  empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "class_id", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 16));
  xpc_dictionary_set_uint64(empty, "min_num", *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20));
  v4 = v2[7];
  if (!*(_QWORD *)&v4)
    goto LABEL_22;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 16);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 16);
    if (*(_QWORD *)&v4 <= v5)
      v7 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v7 = (v4.i32[0] - 1) & v5;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)&v2[6] + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
LABEL_22:
    sub_207CA4018("unordered_map::at: key not found");
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == v5)
      {
        if (*((_DWORD *)v9 + 4) == (_DWORD)v5)
          goto LABEL_21;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_22;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == v5)
      break;
    if (v11 >= *(_QWORD *)&v4)
      v11 %= *(_QWORD *)&v4;
    if (v11 != v7)
      goto LABEL_22;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_22;
  }
  if (*((_DWORD *)v9 + 4) != (_DWORD)v5)
    goto LABEL_11;
LABEL_21:
  xpc_dictionary_set_uint64(empty, "max_num", *((unsigned int *)v9 + 5));
  return empty;
}

void sub_207DCB328(uint64_t a1, char a2)
{
  unsigned int v3;
  uint64_t **i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if ((a2 & 1) != 0 || (v3 = *(_DWORD *)(a1 + 40), v3 > 0x707))
  {
    for (i = *(uint64_t ***)(a1 + 16); i; i = (uint64_t **)*i)
      (*(void (**)(uint64_t *))(*i[4] + 24))(i[4]);
    if (*(_QWORD *)(a1 + 24))
    {
      v5 = *(_QWORD **)(a1 + 16);
      while (v5)
      {
        v8 = v5;
        v5 = (_QWORD *)*v5;
        v9 = (std::__shared_weak_count *)v8[5];
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        operator delete(v8);
      }
      *(_QWORD *)(a1 + 16) = 0;
      v6 = *(_QWORD *)(a1 + 8);
      if (v6)
      {
        for (j = 0; j != v6; ++j)
          *(_QWORD *)(*(_QWORD *)a1 + 8 * j) = 0;
      }
      *(_QWORD *)(a1 + 24) = 0;
    }
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 40) = v3 + 1;
  }
}

xpc_object_t sub_207DCB420(uint64_t a1)
{
  xpc_object_t empty;

  empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_int64(empty, "class_id", *(unsigned int *)(a1 + 32));
  return empty;
}

void sub_207DCB458(uint64_t *a1, int a2, float a3)
{
  unint64_t v3;
  unsigned int v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  _QWORD *v60;
  _QWORD *v61;
  float v62;
  float v63;
  uint64_t v64;
  _QWORD *v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t prime;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  size_t v75;
  size_t v76;
  _QWORD *i;
  size_t v78;
  uint64_t v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  _QWORD v92[2];
  char v93;
  void (*v94)(int);
  int v95;
  unsigned int v96;
  void (*v97)(int);
  int v98;
  unsigned int v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x1DB372ECEC6D157FLL;
      if (*(_QWORD *)&v7 <= 0x1DB372ECEC6D157FuLL)
        v9 = 0x1DB372ECEC6D157FuLL % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & 0x1DB372ECEC6D157FLL;
    }
    v10 = *(_QWORD **)(*a1 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v13 = v11[1];
            if (v13 == 0x1DB372ECEC6D157FLL)
            {
              if (v11[3] == 32)
              {
                v14 = (uint64_t *)v11[2];
                v16 = *v14;
                v15 = v14[1];
                v17 = v14[2];
                v18 = v14[3];
                v19 = v16 == 0x6C7070612E6D6F63 && v15 == 0x444F2E54444F2E65;
                v20 = v19 && v17 == 0x496D754E2E443354;
                if (v20 && v18 == 0x7365636E6174736ELL)
                  goto LABEL_25;
              }
            }
            else if ((v13 & v12) != v9)
            {
              goto LABEL_46;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_46;
          }
        }
        do
        {
          v23 = v11[1];
          if (v23 == 0x1DB372ECEC6D157FLL)
          {
            if (v11[3] == 32)
            {
              v24 = (uint64_t *)v11[2];
              v26 = *v24;
              v25 = v24[1];
              v27 = v24[2];
              v28 = v24[3];
              v29 = v26 == 0x6C7070612E6D6F63 && v25 == 0x444F2E54444F2E65;
              v30 = v29 && v27 == 0x496D754E2E443354;
              if (v30 && v28 == 0x7365636E6174736ELL)
              {
LABEL_25:
                v22 = v11[4];
                v98 = a2;
                v99 = v6;
                v97 = sub_207DCC408;
                (*(void (**)(uint64_t, void (**)(int)))(*(_QWORD *)v22 + 16))(v22, &v97);
                if (v97)
                  v97(0);
                return;
              }
            }
          }
          else
          {
            if (v23 >= *(_QWORD *)&v7)
              v23 %= *(_QWORD *)&v7;
            if (v23 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_46:
  v32 = (std::__shared_weak_count *)operator new(0x70uLL);
  v32->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)off_24C074E20;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C074DC8;
  *(_OWORD *)&v32[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v32[3].__shared_owners_ = 0u;
  v32[4].std::__shared_count = 0u;
  *(_OWORD *)&v32[1].__shared_owners_ = 0u;
  v32[2].std::__shared_count = 0u;
  LODWORD(v32[2].__shared_weak_owners_) = 1065353216;
  v32[3].std::__shared_count = 0u;
  *(_OWORD *)&v32[3].__shared_weak_owners_ = 0u;
  LODWORD(v32[4].__shared_owners_) = 1065353216;
  v91 = v32;
  v95 = a2;
  v96 = v6;
  v94 = sub_207DCC408;
  sub_207DCAEB4((uint64_t)&v32[1], (uint64_t (**)(uint64_t))&v94);
  if (v94)
    v94(0);
  do
    v34 = __ldxr(p_shared_owners);
  while (__stxr(v34 + 1, p_shared_owners));
  v35 = sub_207CA77C0((uint64_t)v92, (uint64_t *)"com.apple.ODT.ODT3D.NumInstances", 0x20uLL);
  v36 = v35;
  v37 = a1[1];
  if (!v37)
    goto LABEL_96;
  v38 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
  v38.i16[0] = vaddlv_u8(v38);
  if (v38.u32[0] > 1uLL)
  {
    v3 = v35;
    if (v35 >= v37)
      v3 = v35 % v37;
  }
  else
  {
    v3 = (v37 - 1) & v35;
  }
  v39 = *(_QWORD **)(*a1 + 8 * v3);
  if (!v39 || (v40 = (_QWORD *)*v39) == 0)
  {
LABEL_96:
    v60 = operator new(0x30uLL);
    v61 = a1 + 2;
    v92[0] = v60;
    v92[1] = a1 + 2;
    *v60 = 0;
    v60[1] = v36;
    *((_OWORD *)v60 + 1) = xmmword_24C074D58;
    v60[4] = v32 + 1;
    v60[5] = v32;
    v93 = 1;
    v62 = (float)(unint64_t)(a1[3] + 1);
    v63 = *((float *)a1 + 8);
    if (v37 && (float)(v63 * (float)v37) >= v62)
    {
      v64 = *a1;
      v65 = *(_QWORD **)(*a1 + 8 * v3);
      if (v65)
      {
LABEL_99:
        *v60 = *v65;
        goto LABEL_165;
      }
LABEL_159:
      *v60 = *v61;
      *v61 = v60;
      *(_QWORD *)(v64 + 8 * v3) = v61;
      if (!*v60)
      {
LABEL_166:
        ++a1[3];
        goto LABEL_167;
      }
      v88 = *(_QWORD *)(*v60 + 8);
      if ((v37 & (v37 - 1)) != 0)
      {
        if (v88 >= v37)
          v88 %= v37;
      }
      else
      {
        v88 &= v37 - 1;
      }
      v65 = (_QWORD *)(*a1 + 8 * v88);
LABEL_165:
      *v65 = v60;
      goto LABEL_166;
    }
    v66 = 1;
    if (v37 >= 3)
      v66 = (v37 & (v37 - 1)) != 0;
    v67 = v66 | (2 * v37);
    v68 = vcvtps_u32_f32(v62 / v63);
    if (v67 <= v68)
      prime = v68;
    else
      prime = v67;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v37 = a1[1];
    }
    if (prime > v37)
    {
LABEL_110:
      if (prime >> 61)
        sub_207CA3AB8();
      v70 = operator new(8 * prime);
      v71 = (void *)*a1;
      *a1 = (uint64_t)v70;
      if (v71)
        operator delete(v71);
      v72 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v72++) = 0;
      while (prime != v72);
      v73 = (_QWORD *)*v61;
      if (!*v61)
        goto LABEL_142;
      v74 = v73[1];
      v75 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v76 = v74 & v75;
        *(_QWORD *)(*a1 + 8 * v76) = v61;
        for (i = (_QWORD *)*v73; *v73; i = (_QWORD *)*v73)
        {
          v78 = i[1] & v75;
          if (v78 == v76)
          {
            v73 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v78))
          {
            *v73 = *i;
            v79 = 8 * v78;
            *i = **(_QWORD **)(*a1 + v79);
            **(_QWORD **)(*a1 + v79) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v78) = v73;
            v73 = i;
            v76 = v78;
          }
        }
        goto LABEL_142;
      }
      if (v74 >= prime)
        v74 %= prime;
      *(_QWORD *)(*a1 + 8 * v74) = v61;
      v83 = (_QWORD *)*v73;
      if (!*v73)
      {
LABEL_142:
        v37 = prime;
        v86 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_143;
        goto LABEL_158;
      }
      while (1)
      {
        v85 = v83[1];
        if (v85 >= prime)
          v85 %= prime;
        if (v85 == v74)
          goto LABEL_136;
        if (*(_QWORD *)(*a1 + 8 * v85))
        {
          *v73 = *v83;
          v84 = 8 * v85;
          *v83 = **(_QWORD **)(*a1 + v84);
          **(_QWORD **)(*a1 + v84) = v83;
          v83 = v73;
LABEL_136:
          v73 = v83;
          v83 = (_QWORD *)*v83;
          if (!v83)
            goto LABEL_142;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v85) = v73;
          v73 = v83;
          v83 = (_QWORD *)*v83;
          v74 = v85;
          if (!v83)
            goto LABEL_142;
        }
      }
    }
    if (prime < v37)
    {
      v80 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v37 < 3 || (v81 = (uint8x8_t)vcnt_s8((int8x8_t)v37), v81.i16[0] = vaddlv_u8(v81), v81.u32[0] > 1uLL))
      {
        v80 = std::__next_prime(v80);
      }
      else
      {
        v82 = 1 << -(char)__clz(v80 - 1);
        if (v80 >= 2)
          v80 = v82;
      }
      if (prime <= v80)
        prime = v80;
      if (prime < v37)
      {
        if (!prime)
        {
          v87 = (void *)*a1;
          *a1 = 0;
          if (v87)
            operator delete(v87);
          v37 = 0;
          a1[1] = 0;
          v86 = -1;
          goto LABEL_158;
        }
        goto LABEL_110;
      }
      v37 = a1[1];
    }
    v86 = v37 - 1;
    if ((v37 & (v37 - 1)) != 0)
    {
LABEL_143:
      if (v36 >= v37)
      {
        v3 = v36 % v37;
        v64 = *a1;
        v65 = *(_QWORD **)(*a1 + 8 * (v36 % v37));
        if (v65)
          goto LABEL_99;
      }
      else
      {
        v3 = v36;
        v64 = *a1;
        v65 = *(_QWORD **)(*a1 + 8 * v36);
        if (v65)
          goto LABEL_99;
      }
      goto LABEL_159;
    }
LABEL_158:
    v3 = v86 & v36;
    v64 = *a1;
    v65 = *(_QWORD **)(*a1 + 8 * (v86 & v36));
    if (v65)
      goto LABEL_99;
    goto LABEL_159;
  }
  if (v38.u32[0] < 2uLL)
  {
    while (1)
    {
      v41 = v40[1];
      if (v41 == v35)
      {
        if (v40[3] == 32)
        {
          v42 = (uint64_t *)v40[2];
          v43 = *v42;
          v44 = v42[1];
          v46 = v42[2];
          v45 = v42[3];
          v47 = v43 == 0x6C7070612E6D6F63 && v44 == 0x444F2E54444F2E65;
          v48 = v47 && v46 == 0x496D754E2E443354;
          if (v48 && v45 == 0x7365636E6174736ELL)
            goto LABEL_74;
        }
      }
      else if ((v41 & (v37 - 1)) != v3)
      {
        goto LABEL_96;
      }
      v40 = (_QWORD *)*v40;
      if (!v40)
        goto LABEL_96;
    }
  }
  while (1)
  {
    v51 = v40[1];
    if (v51 == v35)
      break;
    if (v51 >= v37)
      v51 %= v37;
    if (v51 != v3)
      goto LABEL_96;
LABEL_79:
    v40 = (_QWORD *)*v40;
    if (!v40)
      goto LABEL_96;
  }
  if (v40[3] != 32)
    goto LABEL_79;
  v52 = (uint64_t *)v40[2];
  v53 = *v52;
  v54 = v52[1];
  v56 = v52[2];
  v55 = v52[3];
  v57 = v53 == 0x6C7070612E6D6F63 && v54 == 0x444F2E54444F2E65;
  v58 = v57 && v56 == 0x496D754E2E443354;
  if (!v58 || v55 != 0x7365636E6174736ELL)
    goto LABEL_79;
  do
LABEL_74:
    v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_167:
  if (v91)
  {
    v89 = (unint64_t *)&v91->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_207DCBD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

void sub_207DCBDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_207D50BA0((void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DCBDC4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_207DCBE2C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *a1 = &off_24C074DC8;
  v2 = (_QWORD *)a1[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[1];
  a1[1] = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_207DCBEA8(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *__p = &off_24C074DC8;
  v2 = (_QWORD *)__p[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[6];
  __p[6] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)__p[3];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)__p[1];
  __p[1] = 0;
  if (v7)
    operator delete(v7);
  operator delete(__p);
}

void sub_207DCBF24()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = sub_207DCBF50(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB728], (void (*)(void *))std::exception::~exception);
}

std::bad_cast *sub_207DCBF50(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB8A8] + 16);
  return result;
}

void sub_207DCBF78(float *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  unint64_t v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  v13[2] = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    v16 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v13 = *v17;
LABEL_90:
    *v17 = v13;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_207CA3AB8();
    v22 = operator new(8 * prime);
    v23 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = 0;
    while (prime != v24);
    v26 = (uint64_t *)(a1 + 4);
    v25 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v25)
      goto LABEL_68;
    v27 = v25[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v26;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
        {
          *v25 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v32);
          **(_QWORD **)(*(_QWORD *)a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v25;
          v25 = i;
          v29 = v31;
        }
      }
      goto LABEL_68;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v26;
    v36 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v6 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 == v27)
        goto LABEL_62;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
      {
        *v25 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*(_QWORD *)a1 + v37);
        **(_QWORD **)(*(_QWORD *)a1 + v37) = v36;
        v36 = v25;
LABEL_62:
        v25 = v36;
        v36 = (_QWORD *)*v36;
        if (!v36)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v25;
        v25 = v36;
        v36 = (_QWORD *)*v36;
        v27 = v38;
        if (!v36)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v33 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (prime <= v33)
      prime = v33;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = *((_QWORD *)a1 + 1);
  }
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v6)
    v6 %= v7;
  v16 = *(_QWORD **)a1;
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v16[v6] = a1 + 4;
  if (*v13)
  {
    v40 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*((_QWORD *)a1 + 3);
}

void sub_207DCC3F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207DCC408(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_207DCC43C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_207DCC450(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t result;
  void (*v5)(int);

  result = 0;
  v5 = *(void (**)(int))(v3 + 8);
  *a3 = sub_207DCC408;
  a3[1] = v5;
  return result;
}

uint64_t sub_207DCC470(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  _QWORD *v3;
  uint64_t result;
  void (*v5)(int);

  result = 0;
  v5 = (void (*)(int))v3[1];
  *a3 = sub_207DCC408;
  a3[1] = v5;
  *v3 = 0;
  return result;
}

uint64_t sub_207DCC494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208236C33)
    {
      if (((v6 & 0x8000000208236C33 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208236C33))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208236C33 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208236C48)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_207DCC524(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C074E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DCC534(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C074E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DCC554(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_207DCC564(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207DCC5E0(uint64_t a1, __int128 *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char **v36;
  char *v37;
  std::__shared_weak_count *v38;

  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  v36 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 1;
  *(_BYTE *)(a1 + 154) = 0;
  if (*(_QWORD *)a2)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 128, (uint64_t)"config.num_buckets > 0", 22, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1 + 40);
    v4 = *(char **)(a1 + 24);
  }
  v6 = (unint64_t *)(a1 + 56);
  v7 = *a2;
  v8 = a2[2];
  *(_OWORD *)(a1 + 72) = a2[1];
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 104) = v9;
  v12 = *(_QWORD *)(a1 + 56);
  if (v12 > (v5 - (uint64_t)v4) >> 4)
  {
    if (v12 >> 60)
      sub_207CA420C();
    v13 = *(char **)(a1 + 32);
    v14 = (char *)operator new(16 * v12);
    v15 = &v14[16 * v12];
    v16 = &v14[v13 - v4];
    if (v13 == v4)
    {
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 40) = v15;
    }
    else
    {
      v17 = &v14[v13 - v4];
      do
      {
        v18 = *((_OWORD *)v13 - 1);
        v13 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
      }
      while (v13 != v4);
      v4 = *(char **)(a1 + 24);
      v19 = *(char **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v17;
      *(_QWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 40) = v15;
      while (v19 != v4)
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v19 -= 16;
      }
    }
    if (v4)
      operator delete(v4);
  }
  if (*v6)
  {
    v23 = 0;
    do
    {
      v24 = (char *)operator new(0x118uLL);
      *(_OWORD *)(v24 + 88) = xmmword_208236D40;
      *(_OWORD *)(v24 + 104) = unk_208236D50;
      *(_OWORD *)(v24 + 120) = xmmword_208236D60;
      *(_OWORD *)(v24 + 136) = unk_208236D70;
      *(_OWORD *)(v24 + 24) = xmmword_208236D00;
      *(_OWORD *)(v24 + 40) = *(_OWORD *)algn_208236D10;
      *(_OWORD *)(v24 + 56) = xmmword_208236D20;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_24C074E70;
      *(_OWORD *)(v24 + 72) = unk_208236D30;
      *((_QWORD *)v24 + 33) = 0;
      *(_OWORD *)(v24 + 248) = 0u;
      *(_OWORD *)(v24 + 232) = 0u;
      *(_OWORD *)(v24 + 216) = 0u;
      *(_OWORD *)(v24 + 200) = 0u;
      *(_OWORD *)(v24 + 184) = 0u;
      *(_OWORD *)(v24 + 168) = 0u;
      *(_OWORD *)(v24 + 152) = 0u;
      *((_WORD *)v24 + 136) = 1;
      v25 = *((double *)a2 + 4);
      v24[274] = 0;
      if (v25 < 0.0)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 115, (uint64_t)"config.base_pose_smoothing_factor >= 0", 38, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_53;
        }
        v25 = *((double *)a2 + 4);
      }
      if (v25 > 1.0
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 116, (uint64_t)"config.base_pose_smoothing_factor <= 1", 38, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_53;
      }
      v26 = *((double *)a2 + 3);
      if (v26 < 0.0)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 117, (uint64_t)"config.base_weight_smoothing_factor >= 0", 40, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_53;
        }
        v26 = *((double *)a2 + 3);
      }
      if (v26 > 1.0
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 118, (uint64_t)"config.base_weight_smoothing_factor <= 1", 40, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| !*((_QWORD *)a2 + 9)&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 119, (uint64_t)"config.max_frame_interval > 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| !*((_QWORD *)a2 + 10)&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp",
             120,
             (uint64_t)"config.min_bucket_activation_hit_count > 0",
             42,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_208216974)
        || *((double *)a2 + 11) <= 0.0
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 121, (uint64_t)"config.min_bucket_activation_weight > 0", 39, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_53;
      }
      v27 = *((double *)a2 + 6);
      if (v27 < 0.0)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 122, (uint64_t)"config.min_pose_smoothing_factor >= 0", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_53;
        }
        v27 = *((double *)a2 + 6);
      }
      if (v27 > 1.0
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 123, (uint64_t)"config.min_pose_smoothing_factor <= 1", 37, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_53:
        abort();
      }
      v28 = *(__int128 *)((char *)a2 + 56);
      *(_OWORD *)(v24 + 216) = *(__int128 *)((char *)a2 + 40);
      *(_OWORD *)(v24 + 232) = v28;
      *(_OWORD *)(v24 + 248) = *(__int128 *)((char *)a2 + 72);
      *(_OWORD *)(v24 + 259) = *(__int128 *)((char *)a2 + 83);
      v29 = *(__int128 *)((char *)a2 + 24);
      *(_OWORD *)(v24 + 184) = *(__int128 *)((char *)a2 + 8);
      *(_OWORD *)(v24 + 200) = v29;
      v37 = v24 + 24;
      v38 = (std::__shared_weak_count *)v24;
      v30 = *(_QWORD **)(a1 + 32);
      if ((unint64_t)v30 < *(_QWORD *)(a1 + 40))
      {
        *v30 = v24 + 24;
        v30[1] = v24;
        *(_QWORD *)(a1 + 32) = v30 + 2;
      }
      else
      {
        v31 = sub_207D434E8(v36, (uint64_t)&v37);
        v32 = v38;
        *(_QWORD *)(a1 + 32) = v31;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      ++v23;
    }
    while (v23 < *v6);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_207DCCADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t *v10;

  sub_207CBE108(a10);
  sub_207DCCB4C(v10);
  _Unwind_Resume(a1);
}

void sub_207DCCB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_207CBE108(a10);
  sub_207DCCB4C(v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_207DCCB4C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (std::__shared_weak_count *)v3[3];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void sub_207DCCBF4(uint64_t *a1@<X0>, float64x2_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, float64x2_t _Q0@<Q0>, float64x2_t a6@<Q2>, float64x2_t _Q3@<Q3>, float64x2_t a8@<Q7>)
{
  unint64_t v8;
  double v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t *v24;
  double v25;
  double v26;
  uint64_t *v27;
  float64x2_t *v28;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t v59;
  double v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v71;
  double v72;
  double v74;
  double v76;
  float64x2_t v77;
  float64x2_t v81;
  float64x2_t v83;
  float64x2_t v84;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  __double2 v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v119;
  double v120;
  double cosval;
  double v122;
  __double2 v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64_t v128;
  float64_t v129;
  float64_t v130;
  float64_t v131;
  float64_t v132;
  double v133;
  float64_t v134;
  float64_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  double v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  double v170;
  __double2 v171;
  double v172;
  double v173;
  double v174;
  __double2 v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64_t v188;
  double v189;
  double v190;
  float64_t v191;
  double v192;
  double v193;
  float64_t v194;
  float64_t v195;
  float64_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  uint64_t v203;
  double v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  double v211;
  float64x2_t v212;
  uint64_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64_t v219;
  float64x2_t v220;
  float64_t v221;
  float64x2_t v222;
  float64x2_t v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  double v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231[2];
  float64x2_t *v232;
  uint64_t v233;
  float64x2_t *v234;
  uint64_t v235;
  float64x2_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  float64x2_t v242;
  __int128 v243;
  uint64_t v244;

  v8 = a3;
  v9 = _Q0.f64[0];
  v244 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    a1[6] = a3;
    v13 = (uint64_t *)a1[1];
    if (v13 != a1)
    {
      do
      {
        while (1)
        {
LABEL_7:
          v15 = v13 + 2;
          v14 = v13[2];
          if (*(_QWORD *)(v14 + 152) >= v8
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 32, (uint64_t)"current_frame_idx > last_frame_idx_", 35, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_104;
          }
          if (*(double *)(v14 + 128) <= 0.0 || v8 - *(_QWORD *)(v14 + 152) > *(_QWORD *)(v14 + 224))
            break;
          v13 = (uint64_t *)v13[1];
          if (v13 == a1)
            goto LABEL_20;
        }
        v16 = *v15;
        *(_OWORD *)(v16 + 128) = 0u;
        *(_OWORD *)(v16 + 144) = 0u;
        v17 = (_OWORD *)a1[4];
        if ((unint64_t)v17 >= a1[5])
        {
          v19 = sub_207D434E8((char **)a1 + 3, (uint64_t)(v13 + 2));
          v18 = (std::__shared_weak_count *)v13[3];
        }
        else
        {
          v18 = 0;
          *v17 = *(_OWORD *)v15;
          v19 = (char *)(v17 + 1);
          *v15 = 0;
          v13[3] = 0;
        }
        a1[4] = (uint64_t)v19;
        v20 = *v13;
        v21 = (uint64_t *)v13[1];
        *(_QWORD *)(v20 + 8) = v21;
        *(_QWORD *)v13[1] = v20;
        --a1[2];
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        operator delete(v13);
        v13 = v21;
      }
      while (v21 != a1);
LABEL_20:
      v24 = (uint64_t *)a1[1];
      if (v24 != a1)
      {
        v25 = 1.79769313e308;
        v26 = -1.79769313e308;
        v27 = a1;
        do
        {
          v28 = (float64x2_t *)v24[2];
          if (v28[8].f64[0] < 0.0
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 49, (uint64_t)"accumulated_weight_ >= 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_104;
          }
          _Q0.f64[0] = a2[7].f64[0];
          a6.f64[0] = v28[7].f64[0];
          _Q3 = v28[6];
          a6 = vsubq_f64(_Q0, a6);
          _Q1 = vsubq_f64(a2[6], _Q3);
          _Q0 = vmulq_f64(_Q1, _Q1);
          _Q3.f64[0] = _Q1.f64[1];
          __asm { FMLA            D0, D3, V1.D[1] }
          _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], a6.f64[0], a6.f64[0]);
          if (_Q0.f64[0] < v28[10].f64[1])
          {
            _Q1.f64[0] = a2[1].f64[0];
            a8.f64[0] = v28[1].f64[0];
            a6 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, v28->f64[0]), a2[2], v28[2].f64[0]), a2[4], v28[4].f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a2, *v28, 1), a2[2], v28[2], 1), a2[4], v28[4], 1), 1));
            _Q1.f64[0] = (vmulq_f64(_Q1, a8).f64[0]
                        + a2[3].f64[0] * v28[3].f64[0]
                        + a2[5].f64[0] * v28[5].f64[0]
                        + a6.f64[0]
                        + -1.0)
                       * 0.5;
            _NF = _Q1.f64[0] > v28[10].f64[0] && v26 < _Q1.f64[0];
            if (_NF && v25 > _Q0.f64[0])
            {
              v25 = _Q0.f64[0];
              v26 = _Q1.f64[0];
              v27 = v24;
            }
          }
          v24 = (uint64_t *)v24[1];
        }
        while (v24 != a1);
        if (v27 != a1)
        {
          v35 = (uint64_t *)a1[1];
          if (v27 == v35)
          {
            v38 = 1;
            v39 = a1[1];
            if (*((_BYTE *)a1 + 154))
              goto LABEL_54;
          }
          else
          {
            v36 = v27[2];
            v27[2] = v35[2];
            v35[2] = v36;
            v37 = v27[3];
            v27[3] = v35[3];
            v35[3] = v37;
            v38 = 1;
            v39 = a1[1];
            if (*((_BYTE *)a1 + 154))
              goto LABEL_54;
          }
          goto LABEL_57;
        }
      }
    }
  }
  else
  {
    v8 = a1[6] + 1;
    a1[6] = v8;
    v13 = (uint64_t *)a1[1];
    if (v13 != a1)
      goto LABEL_7;
  }
  v40 = a1[4];
  if (a1[3] == v40)
  {
    v46 = (char *)*a1;
    v47 = a1[1];
    if (*a1 != v47)
    {
      v48 = *((_QWORD *)v46 + 2);
      *((_QWORD *)v46 + 2) = *(_QWORD *)(v47 + 16);
      *(_QWORD *)(v47 + 16) = v48;
      v49 = *((_QWORD *)v46 + 3);
      *((_QWORD *)v46 + 3) = *(_QWORD *)(v47 + 24);
      *(_QWORD *)(v47 + 24) = v49;
      v46 = (char *)a1[1];
    }
    v38 = 0;
    v50 = *((_QWORD *)v46 + 2);
    *(_OWORD *)(v50 + 128) = 0u;
    *(_OWORD *)(v50 + 144) = 0u;
    v39 = a1[1];
    if (*((_BYTE *)a1 + 154))
    {
LABEL_54:
      v55 = a1[4] - a1[3];
      v57 = a1 + 6;
      v56 = a1[6];
      v58 = v57[1] - 1 == v55 >> 4;
      v59 = *(_QWORD *)(v39 + 16);
      if (*(_QWORD *)(v59 + 152) < v56)
        goto LABEL_59;
      goto LABEL_58;
    }
  }
  else
  {
    v41 = operator new(0x20uLL);
    v41[2] = *(_QWORD *)(v40 - 16);
    v42 = *(_QWORD *)(v40 - 8);
    v41[3] = v42;
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      v40 = a1[4];
      v45 = *(std::__shared_weak_count **)(v40 - 8);
    }
    else
    {
      v45 = 0;
    }
    v51 = (_QWORD *)a1[1];
    *v41 = a1;
    v41[1] = v51;
    *v51 = v41;
    v52 = a1[2] + 1;
    a1[1] = (uint64_t)v41;
    a1[2] = v52;
    if (v45)
    {
      v53 = (unint64_t *)&v45->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v38 = 0;
    a1[4] = v40 - 16;
    v39 = a1[1];
    if (*((_BYTE *)a1 + 154))
      goto LABEL_54;
  }
LABEL_57:
  v58 = 0;
  v59 = *(_QWORD *)(v39 + 16);
  v56 = a1[6];
  if (*(_QWORD *)(v59 + 152) < v56)
    goto LABEL_59;
LABEL_58:
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 63, (uint64_t)"frame_idx > last_frame_idx_", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_104;
  }
LABEL_59:
  v60 = *(double *)(v59 + 128);
  if (v60 == 0.0)
  {
    v61 = *a2;
    v62 = a2[1];
    v63 = a2[3];
    *(float64x2_t *)(v59 + 32) = a2[2];
    *(float64x2_t *)(v59 + 48) = v63;
    *(float64x2_t *)v59 = v61;
    *(float64x2_t *)(v59 + 16) = v62;
    v64 = a2[4];
    v65 = a2[5];
    v66 = a2[7];
    *(float64x2_t *)(v59 + 96) = a2[6];
    *(float64x2_t *)(v59 + 112) = v66;
    *(float64x2_t *)(v59 + 64) = v64;
    *(float64x2_t *)(v59 + 80) = v65;
    v67 = 1;
    *(_QWORD *)(v59 + 136) = (unint64_t)v9;
    *(_QWORD *)(v59 + 144) = 1;
    *(double *)(v59 + 128) = v9;
    *(_QWORD *)(v59 + 152) = v56;
    if (v58)
      goto LABEL_98;
    goto LABEL_95;
  }
  v240 = xmmword_208236D40;
  v241 = unk_208236D50;
  v242 = (float64x2_t)xmmword_208236D60;
  v243 = unk_208236D70;
  v236 = (float64x2_t)xmmword_208236D00;
  v237 = *(_OWORD *)algn_208236D10;
  v68.f64[1] = 1.0;
  v238 = xmmword_208236D20;
  v239 = unk_208236D30;
  v68.f64[0] = a2[1].f64[0];
  _Q3.f64[0] = a2[3].f64[0];
  v69 = a2[2];
  _D5 = a2[5].f64[0];
  v71 = a2[4];
  a8.f64[0] = *(float64_t *)(v59 + 16);
  v72 = *(double *)(v59 + 48);
  _Q18 = *(float64x2_t *)(v59 + 32);
  v74 = *(double *)(v59 + 80);
  _Q20 = *(float64x2_t *)(v59 + 64);
  v76 = vmlad_n_f64(vmlad_n_f64(v68.f64[0] * *(double *)v59, _Q3.f64[0], _Q18.f64[0]), _D5, _Q20.f64[0]);
  v77 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a2, *(float64x2_t *)v59, 1), v69, _Q18, 1), v71, _Q20, 1);
  __asm
  {
    FMLA            D16, D3, V18.D[1]
    FMLA            D16, D5, V20.D[1]
  }
  _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, a8.f64[0]), v69, v72), v71, v74);
  v81 = vmulq_f64(v68, a8);
  v236 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, *(double *)v59), v69, _Q18.f64[0]), v71, _Q20.f64[0]);
  *(double *)&v237 = v76;
  v238 = (__int128)v77;
  *(_QWORD *)&v239 = _D16;
  v240 = (__int128)_Q2;
  *(double *)&v241 = v81.f64[0] + _Q3.f64[0] * v72 + _D5 * v74;
  _Q3.f64[0] = *(float64_t *)(v59 + 112);
  _Q4 = *(float64x2_t *)(v59 + 96);
  v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v236, _Q4.f64[0]), v77, _Q4, 1), _Q2, _Q3.f64[0]);
  __asm { FMLA            D2, D16, V4.D[1] }
  v81.f64[0] = _Q2.f64[0] + *(double *)&v241 * _Q3.f64[0];
  _Q2.f64[0] = a2[7].f64[0];
  v84 = a2[6];
  v242 = vsubq_f64(v84, v83);
  *(_QWORD *)&v243 = *(_OWORD *)&vsubq_f64(_Q2, v81);
  *(_QWORD *)&v81.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q3);
  _Q4.f64[0] = vsubq_f64(v84, _Q4).f64[1];
  __asm { FMLA            D3, D4, V2.D[1] }
  if (vmlad_n_f64(_D3, v81.f64[0], v81.f64[0]) >= *(double *)(v59 + 168)
    || (v236.f64[0] + *((double *)&v238 + 1) + *(double *)&v241 + -1.0) * 0.5 <= *(double *)(v59 + 160))
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 75, (uint64_t)"dist_T < config_.max_translation_square && cos_angle > config_.min_cosine_angle", 79, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v60 = *(double *)(v59 + 128);
  }
  v86 = v9 / v60;
  v87 = *(double *)(v59 + 184);
  v88 = v86 * *(double *)(v59 + 176);
  v89 = *(double *)(v59 + 216);
  if (*(double *)(v59 + 208) < v88)
    v88 = *(double *)(v59 + 208);
  v90 = *(double *)(v59 + 200);
  if (v88 < *(double *)(v59 + 192))
    v88 = *(double *)(v59 + 192);
  *(_QWORD *)(v59 + 136) = (unint64_t)((v9 - (double)*(unint64_t *)(v59 + 136)) * v88
                                            + (double)*(unint64_t *)(v59 + 136));
  v91 = v86 * v87;
  if (v89 < v91)
    v91 = v89;
  memset(v231, 0, sizeof(v231));
  v230 = 0u;
  if (v91 < v90)
    v91 = v90;
  v224 = v91;
  v234 = &v236;
  v235 = 0;
  v232 = &v230;
  v233 = 0;
  sub_207DCDCE0(&v234, (double **)&v232);
  v94.f64[0] = v231[0].f64[0];
  _Q18 = v230;
  v96 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
  _Q0 = vmulq_f64(_Q18, _Q18);
  _Q1.f64[0] = v230.f64[1];
  __asm { FMLA            D0, D1, V18.D[1] }
  v99 = _Q0.f64[0] + v94.f64[0] * v94.f64[0];
  if (v99 < 0.0000002635)
  {
    _Q0.f64[0] = 0.5 - v99 * (v99 / -720.0 + 0.0416666667);
    _Q1.f64[0] = 0.166666667 - v99 * (v99 / -5040.0 + 0.00833333333);
    v100 = 1.0 - v99 * _Q1.f64[0];
    v101 = v224;
    if (v99 >= 2.775e-15)
      goto LABEL_76;
LABEL_80:
    _Q0.f64[0] = v99 * 0.0000330687831 + v99 * 0.00138888889 + 0.0833333333;
    goto LABEL_81;
  }
  v103 = sqrt(v99);
  v218 = v230;
  v221 = v231[0].f64[0];
  v215 = v96;
  v104 = __sincos_stret(v103);
  v96 = v215;
  _Q18 = v218;
  v94.f64[0] = v221;
  v101 = v224;
  v100 = v104.__sinval / v103;
  _Q0.f64[0] = 1.0 / v99 * (1.0 - v104.__cosval);
  _Q1.f64[0] = 1.0 / v99 * (1.0 - v104.__sinval / v103);
  if (v99 < 2.775e-15)
    goto LABEL_80;
LABEL_76:
  v102 = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v100;
  _Q0.f64[0] = (_Q0.f64[0] + v100 * -0.5) / (v99 * _Q0.f64[0]);
  if (v99 <= 9.0)
    _Q0.f64[0] = v102;
LABEL_81:
  *(_QWORD *)&_Q1.f64[0] = v243;
  v105.f64[0] = v96.f64[0];
  v105.f64[1] = v94.f64[0];
  v106 = (float64x2_t)vextq_s8((int8x16_t)v242, (int8x16_t)_Q1, 8uLL);
  _Q5 = vsubq_f64(vmulq_laneq_f64(_Q18, v242, 1), vmulq_f64(v96, v242));
  __asm { FMOV            V7.2D, #-0.5 }
  v109 = vaddq_f64(_Q1, vmulq_f64(_Q5, _Q7));
  _Q1.f64[1] = v242.f64[0];
  v94.f64[1] = _Q18.f64[0];
  v110 = vsubq_f64(vmulq_f64(v105, _Q1), vmulq_f64(v94, v106));
  v111 = (float64x2_t)vextq_s8((int8x16_t)v110, (int8x16_t)_Q5, 8uLL);
  _Q5.f64[1] = v110.f64[0];
  v112 = vmulq_f64(v94, v111);
  v113 = vmulq_n_f64(vsubq_f64(vmulq_f64(v105, _Q5), v112), _Q0.f64[0]);
  *(float64x2_t *)((char *)v231 + 8) = vaddq_f64(vaddq_f64(v242, vmulq_f64(v110, _Q7)), v113);
  *(_QWORD *)&v231[1].f64[1] = *(_OWORD *)&vaddq_f64(v109, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q18, v110, 1), vmulq_f64(v96, v110))));
  _Q30 = (int8x16_t)vmulq_n_f64(v230, v101);
  v115 = (float64x2_t)vextq_s8(_Q30, _Q30, 8uLL);
  v116 = vmulq_n_f64(v231[1], v101);
  v117 = vmulq_n_f64(v231[0], v101);
  v92.f64[0] = v116.f64[1];
  v93.f64[0] = v117.f64[1];
  _D0 = _Q30.i64[1];
  __asm { FMLA            D5, D0, V30.D[1] }
  v119 = vmlad_n_f64(_Q5.f64[0], v117.f64[0], v117.f64[0]);
  v225 = _Q7;
  if (v119 >= 0.0000002635)
  {
    v122 = sqrt(v119);
    v219 = v117.f64[0];
    v222 = v115;
    v214 = v116;
    v216 = v92;
    v212 = v93;
    v213 = _Q30.i64[0];
    v211 = v119;
    v123 = __sincos_stret(v122);
    cosval = v123.__cosval;
    v93 = v212;
    _Q30.i64[0] = v213;
    v116 = v214;
    v92 = v216;
    v117.f64[0] = v219;
    v115 = v222;
    v120 = v123.__sinval / v122;
    v112.f64[0] = 1.0 / v211 * (1.0 - v123.__cosval);
    v113.f64[0] = 1.0 / v211 * (1.0 - v123.__sinval / v122);
  }
  else
  {
    v112.f64[0] = 0.5 - v119 * (v119 / -720.0 + 0.0416666667);
    v113.f64[0] = 0.166666667 - v119 * (v119 / -5040.0 + 0.00833333333);
    v120 = 1.0 - v119 * v113.f64[0];
    cosval = 1.0 - v119 * v112.f64[0];
  }
  *(_QWORD *)&v125.f64[1] = unk_208236D58;
  *(_QWORD *)&v124.f64[1] = unk_208236D78;
  *(_QWORD *)&v126.f64[0] = _Q30.i64[0];
  v126.f64[1] = v115.f64[0];
  v127.f64[0] = *(double *)_Q30.i64 * (*(double *)_Q30.i64 * v112.f64[0]) + cosval;
  v128 = v115.f64[0] * (v115.f64[0] * v112.f64[0]) + cosval;
  v129 = v117.f64[0] * (v117.f64[0] * v112.f64[0]) + cosval;
  v130 = v115.f64[0] * (*(double *)_Q30.i64 * v112.f64[0]);
  v131 = v117.f64[0] * (*(double *)_Q30.i64 * v112.f64[0]);
  v132 = v117.f64[0] * (v115.f64[0] * v112.f64[0]);
  v133 = *(double *)_Q30.i64 * v120;
  v134 = v115.f64[0] * v120;
  v135 = v117.f64[0] * v120;
  v136.f64[0] = v130 - v117.f64[0] * v120;
  v137.f64[0] = v131 + v134;
  v127.f64[1] = v130 + v135;
  *(_QWORD *)&v139.f64[1] = unk_208236D38;
  v138.f64[1] = 0.0;
  v138.f64[0] = v131 - v134;
  v136.f64[1] = v128;
  v139.f64[0] = v132 + v133;
  v137.f64[1] = v132 - v133;
  v125.f64[0] = v129;
  v140.f64[0] = v115.f64[0];
  v140.f64[1] = v117.f64[0];
  v141.f64[0] = v92.f64[0];
  v141.f64[1] = v93.f64[0];
  v142.f64[0] = v93.f64[0];
  v142.f64[1] = v116.f64[0];
  *(_QWORD *)&v117.f64[1] = _Q30.i64[0];
  v143.f64[0] = v116.f64[0];
  v143.f64[1] = v92.f64[0];
  v144 = vsubq_f64(vmulq_f64(v140, v141), vmulq_f64(v117, v143));
  v145 = vsubq_f64(vmulq_f64(v126, v116), vmulq_f64(v115, v93));
  v146 = vaddq_f64(v142, vmulq_n_f64(v144, v112.f64[0]));
  v147 = vaddq_f64(v92, vmulq_f64(v145, v112));
  v148 = (float64x2_t)vextq_s8((int8x16_t)v144, (int8x16_t)v145, 8uLL);
  v145.f64[1] = v144.f64[0];
  v149 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(v126, v144, 1), vmulq_f64(v115, v144)), v113);
  v150 = vaddq_f64(v146, vmulq_n_f64(vsubq_f64(vmulq_f64(v140, v145), vmulq_f64(v117, v148)), v113.f64[0]));
  *(_QWORD *)&v124.f64[0] = *(_OWORD *)&vaddq_f64(v147, v149);
  v151 = *(float64x2_t *)(v59 + 16);
  v153 = *(float64x2_t *)(v59 + 32);
  v152 = *(float64x2_t *)(v59 + 48);
  v155 = *(float64x2_t *)(v59 + 64);
  v154 = *(float64x2_t *)(v59 + 80);
  v157 = *(float64x2_t *)(v59 + 96);
  v156 = *(float64x2_t *)(v59 + 112);
  v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, *(double *)v59), v139, *(float64x2_t *)v59, 1), v125, v151.f64[0]), v124, v151, 1);
  *(float64x2_t *)v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, *(double *)v59), v136, *(float64x2_t *)v59, 1), v137, v151.f64[0]), v150, v151, 1);
  *(float64x2_t *)(v59 + 16) = v158;
  *(float64x2_t *)(v59 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v153.f64[0]), v136, v153, 1), v137, v152.f64[0]), v150, v152, 1);
  *(float64x2_t *)(v59 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, v153.f64[0]), v139, v153, 1), v125, v152.f64[0]), v124, v152, 1);
  *(float64x2_t *)(v59 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v155.f64[0]), v136, v155, 1), v137, v154.f64[0]), v150, v154, 1);
  *(float64x2_t *)(v59 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, v155.f64[0]), v139, v155, 1), v125, v154.f64[0]), v124, v154, 1);
  *(float64x2_t *)(v59 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v157.f64[0]), v136, v157, 1), v137, v156.f64[0]), v150, v156, 1);
  *(float64x2_t *)(v59 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, v157.f64[0]), v139, v157, 1), v125, v156.f64[0]), v124, v156, 1);
  memset(v231, 0, sizeof(v231));
  v230 = 0u;
  v234 = (float64x2_t *)v59;
  v235 = 0;
  v232 = &v230;
  v233 = 0;
  sub_207DCDCE0(&v234, (double **)&v232);
  _Q26 = v230;
  _D12 = v230.f64[1];
  _Q0 = vmulq_f64(_Q26, _Q26);
  __asm { FMLA            D0, D12, V26.D[1] }
  v165 = _Q0.f64[0] + v231[0].f64[0] * v231[0].f64[0];
  v228 = v231[0].f64[0];
  v229 = v230;
  if (v165 >= 0.0000002635)
  {
    v170 = sqrt(v165);
    v171 = __sincos_stret(v170);
    _Q26 = v229;
    v159.f64[0] = v171.__sinval / v170;
    _Q0.f64[0] = 1.0 / v165 * (1.0 - v171.__cosval);
    v166 = 1.0 / v165 * (1.0 - v171.__sinval / v170);
    v167 = (float64x2_t)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL);
    if (v165 >= 2.775e-15)
      goto LABEL_86;
LABEL_90:
    v160.f64[0] = v165 * 0.0000330687831 + v165 * 0.00138888889 + 0.0833333333;
    v161.f64[0] = *(float64_t *)(v59 + 112);
    v168 = *(float64x2_t *)(v59 + 96);
    v169 = (float64x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL);
    if (v165 < 0.0000002635)
      goto LABEL_91;
    goto LABEL_93;
  }
  _Q0.f64[0] = 0.5 - v165 * (v165 / -720.0 + 0.0416666667);
  v166 = 0.166666667 - v165 * (v165 / -5040.0 + 0.00833333333);
  v159.f64[0] = 1.0 - v165 * v166;
  v167 = (float64x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL);
  if (v165 < 2.775e-15)
    goto LABEL_90;
LABEL_86:
  if (v165 > 9.0)
  {
    v160.f64[0] = (_Q0.f64[0] + v159.f64[0] * -0.5) / (v165 * _Q0.f64[0]);
    v161.f64[0] = *(float64_t *)(v59 + 112);
    v168 = *(float64x2_t *)(v59 + 96);
    v169 = (float64x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL);
    if (v165 >= 0.0000002635)
      goto LABEL_93;
LABEL_91:
    _Q0.f64[0] = 0.5 - v165 * (v165 / -720.0 + 0.0416666667);
    v159.f64[0] = 0.166666667 - v165 * (v165 / -5040.0 + 0.00833333333);
    v172 = 1.0 - v165 * v159.f64[0];
    v173 = 1.0 - v165 * _Q0.f64[0];
    goto LABEL_94;
  }
  v160.f64[0] = (_Q0.f64[0] * 0.5 - v166) / v159.f64[0];
  v161.f64[0] = *(float64_t *)(v59 + 112);
  v168 = *(float64x2_t *)(v59 + 96);
  v169 = (float64x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL);
  if (v165 < 0.0000002635)
    goto LABEL_91;
LABEL_93:
  v174 = sqrt(v165);
  v226 = v160;
  v227 = v167;
  v220 = v168;
  v223 = v161;
  v217 = v169;
  v175 = __sincos_stret(v174);
  v173 = v175.__cosval;
  v169 = v217;
  v168 = v220;
  v161 = v223;
  v160 = v226;
  v167 = v227;
  _Q26 = v229;
  v172 = v175.__sinval / v174;
  _Q0.f64[0] = 1.0 / v165 * (1.0 - v175.__cosval);
  v159.f64[0] = 1.0 / v165 * (1.0 - v175.__sinval / v174);
LABEL_94:
  v176.f64[0] = v167.f64[0];
  v176.f64[1] = v228;
  v177.f64[0] = v161.f64[0];
  v177.f64[1] = v168.f64[0];
  v178.f64[0] = v168.f64[0];
  v178.f64[1] = v169.f64[0];
  v179 = vmulq_f64(v176, v177);
  v180 = vmulq_f64(_Q26, v169);
  v177.f64[0] = v228;
  v177.f64[1] = _Q26.f64[0];
  v169.f64[1] = v161.f64[0];
  v181 = vsubq_f64(v179, vmulq_f64(v177, v169));
  v182 = vsubq_f64(v180, vmulq_f64(v167, v168));
  v183 = vaddq_f64(v178, vmulq_f64(v181, v225));
  v184 = vaddq_f64(v161, vmulq_f64(v182, v225));
  v185 = (float64x2_t)vextq_s8((int8x16_t)v181, (int8x16_t)v182, 8uLL);
  v182.f64[1] = v181.f64[0];
  v186 = vaddq_f64(v184, vmulq_f64(v160, vsubq_f64(vmulq_laneq_f64(_Q26, v181, 1), vmulq_f64(v167, v181))));
  v187 = vaddq_f64(v183, vmulq_n_f64(vsubq_f64(vmulq_f64(v176, v182), vmulq_f64(v177, v185)), v160.f64[0]));
  v188 = _Q26.f64[0] * (_Q26.f64[0] * _Q0.f64[0]) + v173;
  v189 = _D12 * (_D12 * _Q0.f64[0]) + v173;
  v190 = v228 * (v228 * _Q0.f64[0]) + v173;
  v185.f64[0] = _D12 * (_Q26.f64[0] * _Q0.f64[0]);
  v182.f64[0] = v228 * (_Q26.f64[0] * _Q0.f64[0]);
  v184.f64[0] = v228 * (_D12 * _Q0.f64[0]);
  v191 = _Q26.f64[0] * v172;
  v192 = _D12 * v172;
  v193 = v228 * v172;
  v194 = v185.f64[0] - v193;
  v195 = v182.f64[0] + v192;
  v196 = v185.f64[0] + v193;
  v185.f64[0] = v184.f64[0] - v191;
  v182.f64[0] = v182.f64[0] - v192;
  v184.f64[0] = v184.f64[0] + v191;
  v197 = (float64x2_t)vextq_s8((int8x16_t)v187, (int8x16_t)v186, 8uLL);
  v198 = vsubq_f64(vmulq_laneq_f64(_Q26, v187, 1), vmulq_f64(v167, v187));
  v199 = vaddq_f64(v186, vmulq_f64(v198, _Q0));
  v186.f64[1] = v187.f64[0];
  v200 = vsubq_f64(vmulq_f64(v176, v186), vmulq_f64(v177, v197));
  v201 = vaddq_f64(v187, vmulq_n_f64(v200, _Q0.f64[0]));
  v202 = (float64x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)v198, 8uLL);
  v198.f64[1] = v200.f64[0];
  *(float64_t *)v59 = v188;
  *(float64_t *)(v59 + 8) = v196;
  *(float64_t *)(v59 + 16) = v182.f64[0];
  *(_QWORD *)(v59 + 24) = 0;
  *(float64_t *)(v59 + 32) = v194;
  *(double *)(v59 + 40) = v189;
  *(float64_t *)(v59 + 48) = v184.f64[0];
  *(_QWORD *)(v59 + 56) = 0;
  *(float64_t *)(v59 + 64) = v195;
  *(float64_t *)(v59 + 72) = v185.f64[0];
  *(double *)(v59 + 80) = v190;
  *(_QWORD *)(v59 + 88) = 0;
  *(_QWORD *)(v59 + 112) = *(_OWORD *)&vaddq_f64(v199, vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q26, v200, 1), vmulq_f64(v167, v200)), v159));
  *(float64x2_t *)(v59 + 96) = vaddq_f64(v201, vmulq_n_f64(vsubq_f64(vmulq_f64(v176, v198), vmulq_f64(v177, v202)), v159.f64[0]));
  *(_QWORD *)(v59 + 120) = 0x3FF0000000000000;
  v9 = *(double *)(v59 + 128) + v9;
  *(double *)(v59 + 128) = v9;
  v67 = *(_QWORD *)(v59 + 144) + 1;
  *(_QWORD *)(v59 + 144) = v67;
  *(_QWORD *)(v59 + 152) = v56;
  if (v58)
    goto LABEL_98;
LABEL_95:
  if (v67 < *(_QWORD *)(v59 + 232) || v9 < *(double *)(v59 + 240))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 144) = 0;
    return;
  }
LABEL_98:
  v203 = *(_QWORD *)(v39 + 16);
  v204 = *(double *)(v203 + 128);
  v205 = v203;
  if (v204 < 0.0)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 105, (uint64_t)"accumulated_weight_ >= 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_104;
    }
    v205 = *(_QWORD *)(v39 + 16);
    v204 = *(double *)(v205 + 128);
  }
  v240 = *(_OWORD *)(v203 + 64);
  v241 = *(_OWORD *)(v203 + 80);
  v242 = *(float64x2_t *)(v203 + 96);
  v243 = *(_OWORD *)(v203 + 112);
  v236 = *(float64x2_t *)v203;
  v237 = *(_OWORD *)(v203 + 16);
  v238 = *(_OWORD *)(v203 + 32);
  v239 = *(_OWORD *)(v203 + 48);
  if (v204 < 0.0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImageDetectionAndTracking/src/PoseBucketFilter.cpp", 110, (uint64_t)"accumulated_weight_ >= 0", 24, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_104:
    abort();
  }
  v206 = *(_QWORD *)(v205 + 136);
  v207 = v241;
  *(_OWORD *)(a4 + 64) = v240;
  *(_OWORD *)(a4 + 80) = v207;
  v208 = v243;
  *(float64x2_t *)(a4 + 96) = v242;
  *(_OWORD *)(a4 + 112) = v208;
  v209 = v237;
  *(float64x2_t *)a4 = v236;
  *(_OWORD *)(a4 + 16) = v209;
  v210 = v239;
  *(_OWORD *)(a4 + 32) = v238;
  *(_OWORD *)(a4 + 48) = v210;
  *(_QWORD *)(a4 + 128) = v206;
  *(_BYTE *)(a4 + 136) = v38;
  *(_BYTE *)(a4 + 144) = 1;
}

void sub_207DCDCE0(float64x2_t **a1, double **a2)
{
  float64x2_t *v2;
  double v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;

  v2 = *a1;
  v3 = ((*a1)[3].f64[0] - (*a1)[4].f64[1]) * 0.5;
  v4 = *a2;
  *v4 = v3;
  v5 = (v2[4].f64[0] - v2[1].f64[0]) * 0.5;
  v4[1] = v5;
  v6 = (v2->f64[1] - v2[2].f64[0]) * 0.5;
  v4[2] = v6;
  v7 = v2->f64[0];
  v8 = v2[2].f64[1];
  v9 = v2[5].f64[0];
  v10 = -1.0;
  v11 = (v2->f64[0] + v8 + v9 + -1.0) * 0.5;
  v12 = v3 * v3 + v5 * v5 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001)
      v13 = 0;
    if (v11 > 0.99 || v13)
    {
      v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
      *v4 = v3 * v15;
      v4[1] = v5 * v15;
LABEL_12:
      v4[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      v15 = acos(v11) / sqrt(v12);
      *v4 = v3 * v15;
      v4[1] = v5 * v15;
      goto LABEL_12;
    }
    v10 = (v2->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  v16 = asin(sqrt(v12));
  v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  v18 = (v7 - v10) * v17;
  v19 = (v8 - v10) * v17;
  v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      v32 = sqrt(v20);
      if (v6 < 0.0)
        v32 = -v32;
      v4[2] = v32;
      v33.f64[0] = v2[1].f64[0];
      v33.f64[1] = v2[3].f64[0];
      *(float64x2_t *)v4 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(v2[4], v33), v25), 1.0 / v32);
    }
    else
    {
      v26 = sqrt(v19);
      if (v5 < 0.0)
        v26 = -v26;
      v4[1] = v26;
      v27 = 1.0 / v26;
      v28 = v2[4].f64[1] + v2[3].f64[0];
      *v4 = v27 * (v25 * (v2[2].f64[0] + v2->f64[1]));
      v4[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    v21 = v17 * 0.5;
    v22 = v21 * (v2[4].f64[0] + v2[1].f64[0]);
    if (v18 <= v20)
    {
      v29 = sqrt(v20);
      if (v6 < 0.0)
        v29 = -v29;
      v4[2] = v29;
      v30 = 1.0 / v29;
      v31 = v30 * (v21 * (v2[4].f64[1] + v2[3].f64[0]));
      *v4 = v30 * v22;
      v4[1] = v31;
    }
    else
    {
      v23 = sqrt(v18);
      if (v3 < 0.0)
        v23 = -v23;
      *v4 = v23;
      v24 = 1.0 / v23;
      v4[1] = v24 * (v21 * (v2[2].f64[0] + v2->f64[1]));
      v4[2] = v24 * v22;
    }
  }
}

void sub_207DCDFF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C074E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DCE000(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C074E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DCE028(uint64_t a1, size_t __sz)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v12;
  char *v13;
  __int128 v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;

  *(_OWORD *)a1 = *(_OWORD *)__sz;
  v4 = *(_OWORD *)(__sz + 16);
  v5 = *(_OWORD *)(__sz + 32);
  v6 = *(_OWORD *)(__sz + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(__sz + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 264) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 464) = _Q0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  v12 = *(_QWORD *)(__sz + 8);
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  if (v12)
  {
    if (v12 >> 61)
      sub_207CA420C();
    v13 = (char *)operator new(8 * v12);
    *(_QWORD *)(a1 + 504) = v13;
    *(_QWORD *)(a1 + 520) = &v13[8 * v12];
    bzero(v13, 8 * v12);
    *(_QWORD *)(a1 + 512) = &v13[8 * v12];
  }
  *(_QWORD *)(a1 + 544) = 0;
  v14 = 0uLL;
  *(_OWORD *)(a1 + 528) = 0u;
  v15 = *(_QWORD *)(__sz + 8);
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  if (v15)
  {
    if (v15 >> 61)
      sub_207CA420C();
    v16 = (char *)operator new(8 * v15);
    *(_QWORD *)(a1 + 552) = v16;
    *(_QWORD *)(a1 + 568) = &v16[8 * v15];
    bzero(v16, 8 * v15);
    *(_QWORD *)(a1 + 560) = &v16[8 * v15];
    v14 = 0uLL;
  }
  *(_OWORD *)(a1 + 640) = v14;
  *(_OWORD *)(a1 + 656) = v14;
  *(_OWORD *)(a1 + 608) = v14;
  *(_OWORD *)(a1 + 624) = v14;
  *(_OWORD *)(a1 + 576) = v14;
  *(_OWORD *)(a1 + 592) = v14;
  *(_OWORD *)(a1 + 665) = v14;
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
    if (v17 >> 61)
      sub_207CA420C();
    v18 = (char *)operator new(8 * v17);
    *(_QWORD *)(a1 + 600) = v18;
    *(_QWORD *)(a1 + 608) = v18;
    *(_QWORD *)(a1 + 616) = &v18[8 * v17];
    v19 = (char *)operator new(8 * v17);
    *(_QWORD *)(a1 + 624) = v19;
    *(_QWORD *)(a1 + 632) = v19;
    *(_QWORD *)(a1 + 640) = &v19[8 * v17];
  }
  return a1;
}

void sub_207DCE1B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 560) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_4;
  }
  *(_QWORD *)(v1 + 512) = v6;
  operator delete(v6);
  goto LABEL_4;
}

double sub_207DCE250(uint64_t a1, float32x2_t *a2, float32x2_t *a3, _BYTE *a4)
{
  double v5;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float64x2_t v95;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  double v138;
  double v139;
  double v140;
  double v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  double *v151;
  double *v152;
  double *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  double *v160;
  double *v161;
  unint64_t v162;
  unint64_t v163;
  double *v164;
  double *v165;
  unint64_t i;
  double v167;
  double v168;
  double *v169;
  double *v170;
  unint64_t v171;
  double *v172;
  double *v173;
  double v174;
  double v175;
  double v176;
  int v177;
  double v178;
  double v179;
  double *v180;
  double *v181;
  double *v182;
  double v183;
  double v184;
  double v185;
  double *v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double *v193;
  double v194;
  double *v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double *v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double *v209;
  double v210;
  double v211;
  double *v212;
  double *v213;
  double *v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  uint64_t v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  unint64_t v232;
  double v233;
  unint64_t v234;
  double *v235;
  double *v236;
  unint64_t v237;
  double v238;
  double v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;

  v5 = a2[6].f32[0];
  _Q25 = vcvtq_f64_f32(*a2);
  _Q23 = vcvtq_f64_f32(a2[2]);
  _Q18 = vcvtq_f64_f32(a2[4]);
  _D19 = a2[6].f32[1];
  v10 = a2[1].f32[0];
  v11 = a2[3].f32[0];
  v12 = a2[5].f32[0];
  v13 = a2[7].f32[0];
  v14 = a3[6].f32[0];
  _Q16 = vcvtq_f64_f32(*a3);
  _Q6 = vcvtq_f64_f32(a3[2]);
  _Q1 = vcvtq_f64_f32(a3[4]);
  _D3 = a3[6].f32[1];
  v19 = a3[1].f32[0];
  v20 = a3[3].f32[0];
  v21 = a3[5].f32[0];
  v22 = a3[7].f32[0];
  *a4 = 0;
  if (!*(_BYTE *)(a1 + 264))
  {
    *(float64x2_t *)(a1 + 72) = _Q25;
    *(float64x2_t *)(a1 + 104) = _Q23;
    *(float64x2_t *)(a1 + 136) = _Q18;
    __asm { FMLA            D26, D19, V25.D[1] }
    *(double *)(a1 + 88) = v10;
    *(double *)(a1 + 96) = -(_D26 + v10 * v13);
    __asm { FMLA            D24, D19, V23.D[1] }
    *(double *)(a1 + 120) = v11;
    *(double *)(a1 + 128) = -(_D24 + v11 * v13);
    __asm { FMLA            D21, D19, V18.D[1] }
    *(double *)(a1 + 152) = v12;
    *(double *)(a1 + 160) = -(_D21 + v12 * v13);
    *(float64x2_t *)(a1 + 168) = _Q16;
    *(float64x2_t *)(a1 + 200) = _Q6;
    *(float64x2_t *)(a1 + 232) = _Q1;
    __asm { FMLA            D17, D3, V16.D[1] }
    *(double *)(a1 + 184) = v19;
    *(double *)(a1 + 192) = -(_D17 + v19 * v22);
    __asm { FMLA            D7, D3, V6.D[1] }
    *(double *)(a1 + 216) = v20;
    *(double *)(a1 + 224) = -(_D7 + v20 * v22);
    __asm { FMLA            D4, D3, V1.D[1] }
    *(double *)(a1 + 248) = v21;
    *(double *)(a1 + 256) = -(_D4 + v21 * v22);
    v86 = *(_OWORD *)(a1 + 104);
    v87 = *(_OWORD *)(a1 + 72);
    v88 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 352) = v88;
    v89 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 304) = v86;
    *(_OWORD *)(a1 + 320) = v89;
    v90 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a1 + 272) = v87;
    *(_OWORD *)(a1 + 288) = v90;
    v91 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 384) = v91;
    v92 = *(_OWORD *)(a1 + 200);
    v93 = *(_OWORD *)(a1 + 216);
    v94 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a1 + 448) = v94;
    *(_OWORD *)(a1 + 400) = v92;
    *(_OWORD *)(a1 + 416) = v93;
    *(_BYTE *)(a1 + 264) = 1;
LABEL_10:
    v109 = a1 + 472;
    return *(double *)v109;
  }
  v23 = *(double *)(a1 + 168);
  v24 = *(double *)(a1 + 192);
  v25 = *(double *)(a1 + 256);
  v26 = *(double *)(a1 + 224);
  v27 = v24 * _Q16.f64[0] + v14 + v25 * _Q1.f64[0] + v26 * _Q6.f64[0];
  v28 = v26 * v20;
  v29.f64[0] = v26;
  v29.f64[1] = v25;
  v30 = (float64x2_t)vzip2q_s64((int64x2_t)_Q6, (int64x2_t)_Q1);
  v31 = vmulq_f64(v29, v30);
  v32 = v31.f64[0] + v31.f64[1] + vmuld_lane_f64(v24, _Q16, 1) + _D3;
  v33 = v28 + v24 * v19 + v25 * v21 + v22;
  v34 = sqrt(v27 * v27 + v32 * v32 + v33 * v33);
  if (v34 < *(double *)(a1 + 56))
    goto LABEL_10;
  v35 = *(double *)(a1 + 392);
  v36 = *(double *)(a1 + 456);
  v37.f64[0] = *(float64_t *)(a1 + 424);
  v38 = v35 * _Q16.f64[0] + v14 + v36 * _Q1.f64[0] + v37.f64[0] * _Q6.f64[0];
  v37.f64[1] = v36;
  v39 = vmulq_f64(v37, v30);
  v40 = v37.f64[0] * v20 + v35 * v19 + v36 * v21 + v22;
  if (sqrt(v38 * v38+ (v39.f64[0] + v39.f64[1] + v35 * _Q16.f64[1] + _D3) * (v39.f64[0] + v39.f64[1] + v35 * _Q16.f64[1] + _D3)+ v40 * v40) < *(double *)(a1 + 64))goto LABEL_10;
  v41 = *(double *)(a1 + 200);
  v247 = *(double *)(a1 + 232);
  v42 = *(double *)(a1 + 248);
  v249 = *(double *)(a1 + 240);
  v250 = *(double *)(a1 + 208);
  v248 = *(double *)(a1 + 176);
  v244 = *(double *)(a1 + 184);
  v246 = *(double *)(a1 + 104);
  v43 = *(double *)(a1 + 96);
  v44 = *(double *)(a1 + 160);
  v45 = *(double *)(a1 + 128);
  v243 = *(double *)(a1 + 136);
  v46 = v43 * _Q25.f64[0] + v5 + v44 * _Q18.f64[0] + v45 * _Q23.f64[0];
  v47 = vmuld_lane_f64(v45, _Q23, 1) + vmuld_lane_f64(v44, _Q18, 1) + vmuld_lane_f64(v43, _Q25, 1) + _D19;
  v245 = *(double *)(a1 + 216);
  v48 = v45 * v11 + v43 * v10 + v44 * v12 + v13;
  *(float64x2_t *)(a1 + 272) = _Q25;
  *(double *)(a1 + 288) = v10;
  *(float64x2_t *)(a1 + 304) = _Q23;
  *(double *)(a1 + 320) = v11;
  *(float64x2_t *)(a1 + 336) = _Q18;
  *(double *)(a1 + 352) = v12;
  _Q29 = *(_OWORD *)(a1 + 272);
  __asm { FMLA            D31, D19, V29.D[1] }
  *(double *)(a1 + 296) = -(_D31 + *(double *)(a1 + 288) * v13);
  _Q29 = *(_OWORD *)(a1 + 304);
  __asm { FMLA            D31, D19, V29.D[1] }
  *(double *)(a1 + 328) = -(_D31 + *(double *)(a1 + 320) * v13);
  _Q29 = *(_OWORD *)(a1 + 336);
  __asm { FMLA            D31, D19, V29.D[1] }
  *(double *)(a1 + 360) = -(_D31 + *(double *)(a1 + 352) * v13);
  *(float64x2_t *)(a1 + 368) = _Q16;
  *(double *)(a1 + 384) = v19;
  *(float64x2_t *)(a1 + 400) = _Q6;
  *(double *)(a1 + 416) = v20;
  *(float64x2_t *)(a1 + 432) = _Q1;
  *(double *)(a1 + 448) = v21;
  _Q29 = *(_OWORD *)(a1 + 368);
  __asm { FMLA            D31, D3, V29.D[1] }
  *(double *)(a1 + 392) = -(_D31 + *(double *)(a1 + 384) * v22);
  _Q29 = *(_OWORD *)(a1 + 400);
  __asm { FMLA            D31, D3, V29.D[1] }
  *(double *)(a1 + 424) = -(_D31 + *(double *)(a1 + 416) * v22);
  _Q29 = *(_OWORD *)(a1 + 432);
  __asm { FMLA            D31, D3, V29.D[1] }
  v65 = *(double *)(a1 + 72);
  *(double *)(a1 + 456) = -(_D31 + *(double *)(a1 + 448) * v22);
  v68 = v27 * v46 + v32 * v47 + v33 * v48;
  v71 = sqrt(v46 * v46 + v47 * v47 + v48 * v48);
  if (v68 / (v34 * v71) < *(double *)(a1 + 48))
  {
    *(float64x2_t *)(a1 + 72) = _Q25;
    *(float64x2_t *)(a1 + 104) = _Q23;
    *(float64x2_t *)(a1 + 136) = _Q18;
    __asm { FMLA            D26, D19, V25.D[1] }
    *(double *)(a1 + 88) = v10;
    *(double *)(a1 + 96) = -(_D26 + v10 * v13);
    __asm { FMLA            D24, D19, V23.D[1] }
    *(double *)(a1 + 120) = v11;
    *(double *)(a1 + 128) = -(_D24 + v11 * v13);
    __asm { FMLA            D21, D19, V18.D[1] }
    *(double *)(a1 + 152) = v12;
    *(double *)(a1 + 160) = -(_D21 + v12 * v13);
    *(float64x2_t *)(a1 + 168) = _Q16;
    *(float64x2_t *)(a1 + 200) = _Q6;
    *(float64x2_t *)(a1 + 232) = _Q1;
    __asm { FMLA            D17, D3, V16.D[1] }
    *(double *)(a1 + 184) = v19;
    *(double *)(a1 + 192) = -(_D17 + v19 * v22);
    __asm { FMLA            D7, D3, V6.D[1] }
    *(double *)(a1 + 216) = v20;
    *(double *)(a1 + 224) = -(_D7 + v20 * v22);
    __asm { FMLA            D4, D3, V1.D[1] }
    *(double *)(a1 + 248) = v21;
    *(double *)(a1 + 256) = -(_D4 + v21 * v22);
LABEL_9:
    v102 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 288) = v102;
    v103 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 352) = v103;
    v104 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a1 + 320) = v104;
    v105 = *(_OWORD *)(a1 + 200);
    v106 = *(_OWORD *)(a1 + 216);
    v107 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a1 + 448) = v107;
    *(_OWORD *)(a1 + 400) = v105;
    *(_OWORD *)(a1 + 416) = v106;
    v108 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 384) = v108;
    goto LABEL_10;
  }
  v240 = v34;
  v95 = vaddq_f64(vaddq_f64(vmulq_n_f64(_Q16, v23), vmulq_n_f64(_Q6, v41)), vmulq_n_f64(_Q1, v247));
  v241 = vaddq_f64(vaddq_f64(vmulq_n_f64(_Q16, v248), vmulq_n_f64(_Q6, v250)), vmulq_n_f64(_Q1, v249));
  v242 = vaddq_f64(vaddq_f64(vmulq_n_f64(_Q16, v244), vmulq_n_f64(_Q1, v42)), vmulq_n_f64(_Q6, v245));
  v69 = *(double *)(a1 + 144);
  v72 = *(double *)(a1 + 112);
  v66 = *(double *)(a1 + 88);
  v70 = *(double *)(a1 + 152);
  v73 = *(double *)(a1 + 120);
  v67 = *(double *)(a1 + 80);
  if (((v41 * v20 + v23 * v19 + v247 * v21) * (v246 * v11 + v65 * v10 + v243 * v12)
      + (v250 * v20 + v248 * v19 + v249 * v21) * (v72 * v11 + v67 * v10 + v69 * v12)
      + (v244 * v19 + v42 * v21 + v245 * v20) * (v66 * v10 + v70 * v12 + v73 * v11)
      + vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v95, v65 * _Q25.f64[0] + v246 * _Q23.f64[0] + v243 * _Q18.f64[0]), v241, v67 * _Q25.f64[0] + v72 * _Q23.f64[0] + v69 * _Q18.f64[0]), v242, v66 * _Q25.f64[0] + v70 * _Q18.f64[0] + v73 * _Q23.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v95, vmuld_lane_f64(v65, _Q25, 1)+ vmuld_lane_f64(v246, _Q23, 1)+ vmuld_lane_f64(v243, _Q18, 1)), v241, vmuld_lane_f64(v67, _Q25, 1)+ vmuld_lane_f64(v72, _Q23, 1)+ vmuld_lane_f64(v69, _Q18, 1)),
                                      v242,
                                      vmuld_lane_f64(v73, _Q23, 1)
                                    + vmuld_lane_f64(v66, _Q25, 1)
                                    + vmuld_lane_f64(v70, _Q18, 1)),
                         1)).f64[0]
      + -1.0)
     * 0.5 < *(double *)(a1 + 40))
  {
    *(float64x2_t *)(a1 + 72) = _Q25;
    *(double *)(a1 + 88) = v10;
    *(float64x2_t *)(a1 + 104) = _Q23;
    *(double *)(a1 + 120) = v11;
    *(float64x2_t *)(a1 + 136) = _Q18;
    *(double *)(a1 + 152) = v12;
    __asm { FMLA            D26, D19, V25.D[1] }
    *(double *)(a1 + 96) = -(_D26 + v10 * v13);
    __asm { FMLA            D24, D19, V23.D[1] }
    *(double *)(a1 + 128) = -(_D24 + v11 * v13);
    __asm { FMLA            D21, D19, V18.D[1] }
    *(double *)(a1 + 160) = -(_D21 + v12 * v13);
    *(float64x2_t *)(a1 + 168) = _Q16;
    *(double *)(a1 + 184) = v19;
    *(float64x2_t *)(a1 + 200) = _Q6;
    *(double *)(a1 + 216) = v20;
    *(float64x2_t *)(a1 + 232) = _Q1;
    *(double *)(a1 + 248) = v21;
    __asm { FMLA            D17, D3, V16.D[1] }
    *(double *)(a1 + 192) = -(_D17 + v19 * v22);
    __asm { FMLA            D7, D3, V6.D[1] }
    *(double *)(a1 + 224) = -(_D7 + v20 * v22);
    __asm { FMLA            D4, D3, V1.D[1] }
    *(double *)(a1 + 256) = -(_D4 + v21 * v22);
    goto LABEL_9;
  }
  v111 = *(_QWORD *)(a1 + 544);
  v112 = *(_QWORD *)(a1 + 504);
  if (v111 == *(_QWORD *)(a1 + 8))
  {
    v113 = *(_QWORD *)(a1 + 576);
    v114 = *(_QWORD *)(a1 + 552);
    v115 = *(double *)(a1 + 488);
    *(double *)(a1 + 496) = *(double *)(a1 + 496) - *(double *)(v114 + 8 * v113);
    v116 = *(_QWORD *)(a1 + 528);
    *(double *)(a1 + 488) = v115 - *(double *)(v112 + 8 * v116);
    *(_QWORD *)(v112 + 8 * v116) = 0;
    v117 = (*(_QWORD *)(a1 + 512) - v112) >> 3;
    v118 = v116 + 1;
    if (v118 >= v117)
      v119 = (*(_QWORD *)(a1 + 512) - v112) >> 3;
    else
      v119 = 0;
    *(_QWORD *)(a1 + 528) = v118 - v119;
    --v111;
    *(_QWORD *)(v114 + 8 * v113) = 0;
    *(_QWORD *)(a1 + 544) = v111;
    v120 = (*(_QWORD *)(a1 + 560) - v114) >> 3;
    v121 = v113 + 1;
    if (v121 < v120)
      v120 = 0;
    *(_QWORD *)(a1 + 576) = v121 - v120;
    --*(_QWORD *)(a1 + 592);
  }
  else
  {
    v117 = (*(_QWORD *)(a1 + 512) - v112) >> 3;
  }
  v122 = v240 + *(double *)(a1 + 496);
  *(double *)(a1 + 488) = v71 + *(double *)(a1 + 488);
  *(double *)(a1 + 496) = v122;
  v123 = *(_QWORD *)(a1 + 536);
  *(double *)(v112 + 8 * v123) = v71;
  v124 = v123 + 1;
  if (v123 + 1 >= v117)
    v125 = v117;
  else
    v125 = 0;
  *(_QWORD *)(a1 + 536) = v124 - v125;
  if (v111 == v117)
  {
    v126 = *(_QWORD *)(a1 + 528) + 1;
    if (v126 >= v117)
      v127 = v117;
    else
      v127 = 0;
    *(_QWORD *)(a1 + 528) = v126 - v127;
  }
  else
  {
    *(_QWORD *)(a1 + 544) = v111 + 1;
  }
  v128 = *(_QWORD *)(a1 + 584);
  v129 = *(_QWORD *)(a1 + 552);
  *(double *)(v129 + 8 * v128) = v240;
  v130 = *(_QWORD *)(a1 + 560) - v129;
  v131 = v130 >> 3;
  v132 = v128 + 1;
  if (v132 >= v130 >> 3)
    v133 = v130 >> 3;
  else
    v133 = 0;
  *(_QWORD *)(a1 + 584) = v132 - v133;
  v134 = *(_QWORD *)(a1 + 592);
  if (v134 == v131)
  {
    v135 = *(_QWORD *)(a1 + 576) + 1;
    if (v135 >= v131)
      v136 = v131;
    else
      v136 = 0;
    *(_QWORD *)(a1 + 576) = v135 - v136;
  }
  else
  {
    v131 = v134 + 1;
    *(_QWORD *)(a1 + 592) = v134 + 1;
  }
  v137 = (*(_DWORD *)(a1 + 480) + 1);
  *(_DWORD *)(a1 + 480) = v137;
  if (*(_QWORD *)(a1 + 32) > v137)
    goto LABEL_10;
  *a4 = 1;
  *(_BYTE *)(a1 + 680) = 1;
  v139 = *(double *)(a1 + 488);
  v138 = *(double *)(a1 + 496);
  if (v139 == 0.0)
    v140 = 1.0;
  else
    v140 = 1.0 / v139;
  v141 = v138 * v140;
  *(double *)(a1 + 464) = v138 * v140;
  if (!*(_BYTE *)a1)
  {
    v109 = a1 + 464;
    *(double *)(a1 + 672) = v141;
    return *(double *)v109;
  }
  v142 = *(_QWORD *)(a1 + 16);
  v143 = *(double *)(a1 + 24);
  v144 = *(_QWORD *)(a1 + 600);
  v145 = (*(_QWORD *)(a1 + 608) - v144) >> 3;
  if (v131 <= v145)
  {
    if (v131 < v145)
      *(_QWORD *)(a1 + 608) = v144 + 8 * v131;
  }
  else
  {
    sub_207DCF204(a1 + 600, v131 - v145);
  }
  v146 = *(_QWORD *)(a1 + 624);
  v147 = (*(_QWORD *)(a1 + 632) - v146) >> 3;
  if (v131 <= v147)
  {
    if (v131 < v147)
      *(_QWORD *)(a1 + 632) = v146 + 8 * v131;
  }
  else
  {
    sub_207DCF204(a1 + 624, v131 - v147);
  }
  v148 = *(_QWORD *)(a1 + 648);
  v149 = (*(_QWORD *)(a1 + 656) - v148) >> 3;
  if (v131 <= v149)
  {
    if (v131 < v149)
      *(_QWORD *)(a1 + 656) = v148 + 8 * v131;
  }
  else
  {
    sub_207DCF204(a1 + 648, v131 - v149);
  }
  if (v142)
  {
    v150 = 0;
    v151 = *(double **)(a1 + 624);
    v152 = &v151[v131 >> 1];
    v153 = *(double **)(a1 + 632);
    v154 = *(_QWORD *)(a1 + 528);
    v155 = *(_QWORD *)(a1 + 504);
    v156 = (*(_QWORD *)(a1 + 512) - v155) >> 3;
    v157 = *(_QWORD *)(a1 + 576);
    v158 = *(_QWORD *)(a1 + 552);
    v159 = (*(_QWORD *)(a1 + 560) - v158) >> 3;
    v160 = *(double **)(a1 + 600);
    v161 = *(double **)(a1 + 648);
    while (1)
    {
      v162 = v154;
      v163 = v157;
      v164 = v160;
      v165 = v151;
      for (i = v131; i; --i)
      {
        v167 = v141 * *(double *)(v155 + 8 * (v162 % v156));
        v168 = *(double *)(v158 + 8 * (v163 % v159));
        *v164++ = v167 - v168;
        *v165++ = vabdd_f64(v167, v168);
        ++v163;
        ++v162;
      }
      if (v152 != v153)
        break;
LABEL_149:
      if (*v152 * 2.9652 >= 0.000001)
        v220 = *v152 * 2.9652;
      else
        v220 = 0.000001;
      if (v131)
      {
        v221 = 0;
        v222 = 0.0;
        v223 = 0.0;
        v224 = 0.0;
        do
        {
          v228 = fabs(v160[v221]);
          v229 = 0.0;
          if (v228 < v220)
            v229 = (1.0 - v228 / v220 * (v228 / v220)) * (1.0 - v228 / v220 * (v228 / v220));
          v161[v221] = v229;
          v225 = v160[v221];
          v222 = v222 + v225 * (v229 * v225);
          v226 = *(double *)(v155 + 8 * ((v154 + v221) % v156));
          v227 = v229 * v226;
          v224 = v224 + v226 * v227;
          v223 = v223 + v225 * v227;
          ++v221;
        }
        while (v131 != v221);
        v230 = 1.0 / v224;
        if (v224 == 0.0)
          v230 = 1.0;
        v231 = v141 - v223 * v230;
        v232 = v154;
        v233 = 0.0;
        v234 = v157;
        v235 = v160;
        v236 = v161;
        v237 = v131;
        do
        {
          v238 = v231 * *(double *)(v155 + 8 * (v232 % v156)) - *(double *)(v158 + 8 * (v234 % v159));
          *v235++ = v238;
          v239 = *v236++;
          v233 = v233 + v238 * (v238 * v239);
          ++v234;
          ++v232;
          --v237;
        }
        while (v237);
        if (v233 > v222)
          goto LABEL_168;
      }
      else
      {
        v231 = v141;
      }
      if (v231 <= 0.0)
        goto LABEL_168;
      if (vabdd_f64(v141, v231) >= v143 * v231)
      {
        ++v150;
        v141 = v231;
        if (v150 != v142)
          continue;
      }
      goto LABEL_169;
    }
    v169 = v151;
    v170 = v153;
    while (1)
    {
      v171 = v170 - v169;
      if (v171 < 2)
        goto LABEL_149;
      if (v171 == 3)
      {
        v204 = *v169;
        v205 = v169[1];
        v206 = *(v170 - 1);
        if (v205 >= *v169)
        {
          if (v206 < v205)
          {
            v169[1] = v206;
            *(v170 - 1) = v205;
            v218 = *v169;
            v217 = v169[1];
            if (v217 < *v169)
            {
              *v169 = v217;
              v169[1] = v218;
            }
          }
        }
        else
        {
          if (v206 >= v205)
          {
            *v169 = v205;
            v169[1] = v204;
            v219 = *(v170 - 1);
            if (v219 >= v204)
              goto LABEL_149;
            v169[1] = v219;
          }
          else
          {
            *v169 = v206;
          }
          *(v170 - 1) = v204;
        }
        goto LABEL_149;
      }
      if (v171 == 2)
      {
        v207 = *(v170 - 1);
        v208 = *v169;
        if (v207 < *v169)
        {
          *v169 = v207;
          *(v170 - 1) = v208;
        }
        goto LABEL_149;
      }
      if ((char *)v170 - (char *)v169 <= 63)
      {
        while (v169 != v170 - 1)
        {
          v209 = v169++;
          if (v209 != v170 && v169 != v170)
          {
            v210 = *v209;
            v211 = *v209;
            v212 = v169;
            v213 = v209;
            v214 = v169;
            do
            {
              v215 = *v214++;
              v216 = v215;
              if (v215 < v211)
              {
                v211 = v216;
                v213 = v212;
              }
              v212 = v214;
            }
            while (v214 != v170);
            if (v213 != v209)
            {
              *v209 = *v213;
              *v213 = v210;
            }
          }
        }
        goto LABEL_149;
      }
      v172 = &v169[v171 >> 1];
      v173 = v170 - 1;
      v174 = *(v170 - 1);
      v175 = *v172;
      v176 = *v169;
      if (*v172 >= *v169)
      {
        if (v174 >= v175)
        {
          v177 = 0;
          v178 = *v169;
          v179 = *v172;
          if (*v169 >= *v172)
            goto LABEL_87;
          goto LABEL_69;
        }
        *v172 = v174;
        *v173 = v175;
        v189 = *v169;
        if (*v172 < *v169)
        {
          *v169 = *v172;
          *v172 = v189;
          goto LABEL_84;
        }
      }
      else
      {
        if (v174 < v175)
        {
          *v169 = v174;
          *v173 = v176;
          v177 = 1;
          v178 = *v169;
          v179 = *v172;
          if (*v169 >= *v172)
            goto LABEL_87;
          goto LABEL_69;
        }
        *v169 = v175;
        *v172 = v176;
        if (*v173 < v176)
        {
          *v172 = *v173;
          *v173 = v176;
LABEL_84:
          v177 = 2;
          v178 = *v169;
          v179 = *v172;
          if (*v169 >= *v172)
            goto LABEL_87;
          goto LABEL_69;
        }
      }
      v177 = 1;
      v178 = *v169;
      v179 = *v172;
      if (*v169 >= *v172)
      {
LABEL_87:
        v180 = v170 - 1;
        while (--v180 != v169)
        {
          if (*v180 < v179)
          {
            *v169 = *v180;
            *v180 = v178;
            ++v177;
            v181 = v169 + 1;
            if (v169 + 1 < v180)
              goto LABEL_70;
            goto LABEL_91;
          }
        }
        v193 = v169 + 1;
        if (v178 >= *v173)
        {
          if (v193 == v173)
            goto LABEL_149;
          while (1)
          {
            v194 = *v193;
            if (v178 < *v193)
              break;
            if (++v193 == v173)
              goto LABEL_149;
          }
          *v193++ = *v173;
          *v173 = v194;
        }
        if (v193 == v173)
          goto LABEL_149;
        while (1)
        {
          v198 = *v169;
          do
          {
            v199 = *v193++;
            v200 = v199;
          }
          while (v198 >= v199);
          v201 = v193 - 1;
          do
          {
            v202 = *--v173;
            v203 = v202;
          }
          while (v198 < v202);
          if (v201 >= v173)
            break;
          *v201 = v203;
          *v173 = v200;
        }
        v169 = v193 - 1;
        if (v201 > v152)
          goto LABEL_149;
        goto LABEL_125;
      }
LABEL_69:
      v180 = v170 - 1;
      v181 = v169 + 1;
      if (v169 + 1 >= v170 - 1)
      {
LABEL_91:
        v186 = v181;
      }
      else
      {
LABEL_70:
        v182 = v181;
        while (1)
        {
          v183 = *v172;
          do
          {
            v184 = *v182++;
            v185 = v184;
          }
          while (v184 < v183);
          v186 = v182 - 1;
          do
          {
            v187 = *--v180;
            v188 = v187;
          }
          while (v187 >= v183);
          if (v186 >= v180)
            break;
          *v186 = v188;
          *v180 = v185;
          ++v177;
          if (v186 == v172)
            v172 = v180;
        }
      }
      if (v186 != v172)
      {
        v190 = *v186;
        if (*v172 < *v186)
        {
          *v186 = *v172;
          *v172 = v190;
          ++v177;
        }
      }
      if (v186 == v152)
        goto LABEL_149;
      if (!v177)
      {
        if (v186 <= v152)
        {
          v195 = v186 + 1;
          while (v195 != v170)
          {
            v197 = *(v195 - 1);
            v196 = *v195++;
            if (v196 < v197)
              goto LABEL_97;
          }
        }
        else
        {
          while (v181 != v186)
          {
            v192 = *(v181 - 1);
            v191 = *v181++;
            if (v191 < v192)
              goto LABEL_97;
          }
        }
        goto LABEL_149;
      }
LABEL_97:
      if (v186 <= v152)
        v169 = v186 + 1;
      else
        v170 = v186;
LABEL_125:
      if (v170 == v152)
        goto LABEL_149;
    }
  }
LABEL_168:
  v231 = v141;
LABEL_169:
  v109 = a1 + 472;
  *(double *)(a1 + 472) = v231;
  *(double *)(a1 + 672) = v231;
  return *(double *)v109;
}

void sub_207DCF204(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_207CA420C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_207CA3AB8();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_207DCF3A0()
{
  sub_207C95C64("vector");
}

void sub_207DCF3B4(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__dst;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v24 = 0;
    v25 = 0;
    if ((a2 & 0x8000000000000000) != 0)
      sub_207D159B0();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_207D1C104((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 + v5;
    v24 = v13 + v5;
    v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      v16 = (char *)__dst;
    }
    else
    {
      v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v17);
      v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(_QWORD *)v16 = *(_QWORD *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((_QWORD *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = (char *)__dst;
      v14 = v24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    __dst = v12;
    v24 = v13;
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    v25 = v18;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v16 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v17 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v19 = v5;
        else
          v19 = (64 - v17);
        *(_QWORD *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        memset(v16, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(_QWORD *)&v16[v20] = v21;
      }
    }
    else
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v22 = v5;
        else
          v22 = (64 - v17);
        *(_QWORD *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        bzero(v16, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void sub_207DCF614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DCF62C(char *a1, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = a2 % 0x5A0;
  if (a2 % 0x5A0)
  {
    v5 = operator new(8 * ((v2 - 1) >> 6) + 8);
    v6 = v5;
    if (v2 >= 0x41)
      v7 = (v2 - 1) >> 6;
    else
      v7 = 0;
    v5[v7] = 0;
    if (v2 >= 0x40)
      bzero(v5, 8 * (v2 >> 6));
    if ((v2 & 0x3F) != 0)
      v6[v2 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
    v8 = 0;
    do
    {
      while (1)
      {
        v9 = v8 >> 6;
        v10 = 1 << v8;
        if (((1 << v8) & *(_QWORD *)&a1[8 * (v8 >> 6)]) != 0)
          break;
        v6[v9] &= ~v10;
        if (v2 == ++v8)
          goto LABEL_13;
      }
      v6[v9] |= v10;
      ++v8;
    }
    while (v2 != v8);
LABEL_13:
    sub_207DDD388(a1, v2);
    v11 = 0;
    v12 = 1440 * (a2 / 0x5A0) - a2;
    do
    {
      while (1)
      {
        v13 = (v12 + v11 + 1440) >> 6;
        v14 = 1 << (v12 + v11 - 96);
        if (((*(_QWORD *)((char *)v6 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
          break;
        *(_QWORD *)&a1[8 * v13] &= ~v14;
        ++v11;
        if (!(v12 + v11))
          goto LABEL_17;
      }
      *(_QWORD *)&a1[8 * v13] |= v14;
      ++v11;
    }
    while (v12 + v11);
LABEL_17:
    operator delete(v6);
  }
}

uint64_t sub_207DCF7D8()
{
  unsigned int v0;
  uint64_t v1;
  char v2;
  char v3;
  unint64_t *v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  unint64_t size;
  void *v34;
  int v35;
  int v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned int v57;
  float v58;
  char *v59;
  float v60;
  float v61;
  BOOL v62;
  _BYTE *v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  uint64_t v67;
  void **v68;
  uint64_t *v69;
  float *v70;
  float *v71;
  uint64_t v72;
  char *v73;
  void *v74;
  _BYTE *v75;
  int64_t v76;
  int64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  _BYTE *v81;
  float *v82;
  int64_t v83;
  unint64_t v84;
  uint64_t v85;
  float *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  float *v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  char *v105;
  void *v106;
  _BYTE *v107;
  int64_t v108;
  int64_t v109;
  unint64_t v110;
  int64_t v111;
  unint64_t v112;
  _BYTE *v113;
  float *v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _OWORD *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  char *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  size_t v131;
  _BYTE *v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  _OWORD *v139;
  float *v140;
  uint64_t v141;
  __int128 v142;
  int v143;
  void **v144;
  uint64_t *v145;
  float *v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  float *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  float *v158;
  int64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float *v164;
  _OWORD *v165;
  float *v166;
  uint64_t v167;
  __int128 v168;
  int v169;
  _QWORD *v170;
  char *v171;
  uint64_t *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  size_t v180;
  size_t v181;
  _BYTE *v182;
  char *v183;
  unint64_t v184;
  _OWORD *v185;
  char *v186;
  unint64_t v187;
  __int128 v188;
  _QWORD *v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  _OWORD *v193;
  __int128 *v194;
  unint64_t v195;
  __int128 v196;
  _QWORD *v197;
  uint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  char v202;
  char *v203;
  char *v204;
  unint64_t v205;
  int64_t v206;
  unint64_t v207;
  size_t v208;
  char *v209;
  char *v210;
  char *v211;
  unint64_t v212;
  char *v213;
  char *v214;
  unint64_t v215;
  __int128 v216;
  char *v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  char v222;
  char *v223;
  char v224;
  void **v225;
  _BYTE *v226;
  uint64_t *v227;
  _BYTE *v228;
  uint64_t v229;
  _BYTE *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  size_t v234;
  char *v235;
  char *v236;
  unint64_t v237;
  char *v238;
  __int128 *v239;
  unint64_t v240;
  __int128 v241;
  char *v242;
  uint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  char *v246;
  char v247;
  uint64_t v248;
  void *v249;
  float *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  float *v254;
  float v255;
  float *v256;
  float *v257;
  float *v258;
  float *v259;
  float *v260;
  float v261;
  float v262;
  int v263;
  int v264;
  void *v265;
  float *v266;
  float *v267;
  float *v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  unint64_t v273;
  float v274;
  uint64_t v275;
  float v276;
  float v277;
  float v278;
  float v279;
  __n128 v280;
  uint64_t v281;
  uint64_t v282;
  void **v283;
  void **v284;
  char *v285;
  void **v286;
  float *v287;
  float *v288;
  float *v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  _BYTE *v292;
  BOOL v294;
  float *v296;
  float v297;
  int v298;
  float v299;
  _BYTE *v300;
  float *v301;
  unint64_t v302;
  float *v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  unint64_t v307;
  _BYTE *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char *v314;
  float *v315;
  uint64_t v316;
  int64_t v317;
  unint64_t v318;
  int v319;
  _QWORD *v320;
  unint64_t v321;
  int v322;
  int v323;
  uint64_t *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  __n128 *v332;
  __n128 *v333;
  uint64_t v334;
  int v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  _BYTE *v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unsigned __int8 *v344;
  unint64_t v345;
  uint64_t *v346;
  _QWORD *v347;
  unint64_t v348;
  int v349;
  int v350;
  uint64_t *v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  unint64_t v359;
  unsigned int *v360;
  unsigned int *v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  uint64_t v366;
  int32x4_t *v367;
  uint64_t v368;
  int32x4_t v369;
  int32x4_t v370;
  unint64_t v371;
  char *v372;
  unsigned int *v373;
  unsigned int *v374;
  unsigned int *v375;
  char *v376;
  uint64_t v377;
  unsigned int *v378;
  uint64_t v379;
  float v380;
  unsigned int *v381;
  uint64_t v382;
  uint64_t v383;
  size_t v384;
  unint64_t v385;
  _BYTE *v386;
  void **v387;
  char **v388;
  _BYTE *v389;
  _BYTE *v390;
  char *v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  char *v398;
  char *v399;
  __int128 *v400;
  uint64_t v401;
  __int128 v402;
  int v403;
  uint64_t v404;
  unsigned int *v405;
  void **v406;
  void **v407;
  void **v408;
  unint64_t v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  _QWORD *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  _BYTE *v420;
  _DWORD *v421;
  int64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  __n128 *v428;
  __n128 *v429;
  uint64_t v430;
  unsigned __int32 v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t *v436;
  _QWORD *v437;
  unint64_t v438;
  int v439;
  int v440;
  uint64_t *v441;
  _QWORD *v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t *v453;
  _QWORD *v454;
  unint64_t v455;
  int v456;
  int v457;
  uint64_t *v458;
  _QWORD *v459;
  uint64_t v460;
  uint64_t v461;
  _QWORD *v462;
  unint64_t v463;
  uint64_t v464;
  void **v465;
  unint64_t v466;
  uint64_t v467;
  float v468;
  float *v469;
  float *v470;
  float *v471;
  float *v472;
  float v473;
  float v474;
  void *v475;
  void **v476;
  unint64_t v477;
  uint64_t v478;
  void **v479;
  unint64_t v480;
  uint64_t v481;
  void **v482;
  unint64_t v483;
  uint64_t v484;
  void **v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  void **v494;
  int8x16_t *v495;
  void **v496;
  float *v497;
  float *v498;
  unint64_t v499;
  _QWORD *v500;
  int v501;
  _QWORD *v502;
  float v503;
  unint64_t v504;
  unint64_t v505;
  int8x16_t *v506;
  uint64_t v507;
  unsigned int v508;
  unint64_t v509;
  uint64_t v510;
  void **v511;
  void **v512;
  unint64_t v513;
  uint64_t v514;
  void *v515;
  void **v516;
  void **v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  void *v521;
  void **v522;
  void **v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  void *v527;
  void **v528;
  void **v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  void *v533;
  void **v534;
  void **v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  void *v539;
  _QWORD *v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  _QWORD *v546;
  int8x16_t *v547;
  uint64_t *v548;
  __int128 v549;
  int8x16_t v550;
  __int128 v551;
  int8x16_t v552;
  __int128 v553;
  __int128 v554;
  int8x16_t *v555;
  int8x16_t v556;
  __int128 v557;
  __int128 v558;
  int8x16_t v559;
  uint64_t v560;
  int8x16_t v561;
  int8x16_t v562;
  int8x16_t v563;
  int8x16_t v564;
  uint64_t v565;
  int8x16_t v566;
  int8x16_t v567;
  int8x8_t v568;
  uint64_t v569;
  int8x8_t v570;
  int8x8_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  __int128 v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x8_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  __int128 v584;
  int8x16_t v585;
  uint8x8_t v586;
  uint8x8_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  _QWORD *v591;
  float **v592;
  _QWORD *v593;
  _QWORD *v594;
  _QWORD *v595;
  float *v596;
  float *v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  uint64_t v603;
  unint64_t v604;
  _BOOL4 v605;
  BOOL v606;
  uint64_t v607;
  unint64_t v608;
  unint64_t v609;
  uint64_t v610;
  unint64_t v611;
  float *v612;
  unint64_t i;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  BOOL v617;
  unint64_t v618;
  BOOL v619;
  unint64_t v620;
  uint64_t v621;
  unint64_t v622;
  unint64_t v623;
  uint64_t v624;
  char v625;
  unint64_t v626;
  void *v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  unint64_t v635;
  uint64_t v636;
  unint64_t v637;
  void *v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v643;
  unsigned int v644;
  unint64_t v645;
  unint64_t v646;
  unsigned int v647;
  unsigned int v649;
  uint64_t *v650;
  uint64_t *v651;
  uint64_t v652;
  int v653;
  BOOL v654;
  uint64_t v655;
  BOOL v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  void **v660;
  _BYTE *v661;
  void *v662;
  unint64_t v663;
  _QWORD *v664;
  float *v665;
  _QWORD *v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unsigned int v671;
  uint64_t *v672;
  uint64_t *v673;
  uint64_t v674;
  int v675;
  BOOL v676;
  uint64_t v677;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t j;
  unint64_t v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t k;
  uint64_t v691;
  unint64_t v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  float v699;
  float v700;
  uint64_t v701;
  unint64_t v702;
  uint64_t v703;
  _QWORD *v704;
  uint64_t v705;
  int64x2_t v706;
  float *v707;
  unint64_t v708;
  unint64_t v709;
  unint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  char *v723;
  unint64_t v724;
  uint64_t v725;
  float v726;
  int v727;
  int v728;
  unint64_t v729;
  uint64_t v730;
  unint64_t v731;
  unint64_t v732;
  uint64_t v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v737;
  uint64_t *v738;
  uint64_t *v739;
  uint64_t v740;
  int v741;
  BOOL v742;
  uint64_t v743;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  _BYTE *v748;
  void **v749;
  void *v750;
  unsigned int v751;
  uint64_t *v752;
  uint64_t *v753;
  uint64_t v754;
  int v755;
  BOOL v756;
  uint64_t v757;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  void **v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t *v767;
  uint64_t *v768;
  unint64_t v769;
  uint64_t *v770;
  unint64_t v771;
  unint64_t v772;
  uint64_t *v773;
  uint64_t *v774;
  unint64_t v775;
  uint64_t *v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  char *v780;
  uint64_t v781;
  uint64_t v782;
  unint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t *v788;
  unint64_t v789;
  unint64_t v790;
  unint64_t v791;
  uint64_t *v792;
  uint64_t *v793;
  unint64_t v794;
  void **v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t *v798;
  uint64_t *v799;
  unint64_t v800;
  uint64_t *v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  char *v807;
  unint64_t v808;
  uint64_t v809;
  uint64_t v810;
  char *v811;
  int v812;
  char *v813;
  _BYTE *v814;
  int v815;
  char *v816;
  unint64_t v818;
  void *v819;
  _OWORD *v820;
  unint64_t *v821;
  unint64_t v822;
  unint64_t v823;
  _DWORD *v824;
  uint64_t v825;
  __int128 *v826;
  _OWORD *v827;
  unint64_t v828;
  __int128 v829;
  unint64_t v830;
  char *v831;
  int v832;
  unint64_t v833;
  unint64_t v834;
  void *v835;
  char *v836;
  int v837;
  char *v838;
  _BYTE *v839;
  int v840;
  char *v841;
  unint64_t v843;
  void *v844;
  _OWORD *v845;
  unint64_t v846;
  unint64_t v847;
  _DWORD *v848;
  uint64_t v849;
  __int128 *v850;
  _OWORD *v851;
  unint64_t v852;
  __int128 v853;
  unint64_t v854;
  char *v855;
  int v856;
  unint64_t v857;
  _QWORD *v858;
  unint64_t v859;
  void *v860;
  unsigned int v861;
  unsigned int v862;
  int8x16_t v863;
  uint64_t v864;
  std::__shared_weak_count *v865;
  unint64_t *v866;
  unint64_t v867;
  unint64_t v868;
  unint64_t v869;
  unsigned __int8 *v870;
  unint64_t v871;
  uint64_t v872;
  uint64_t v873;
  BOOL v874;
  void *v875;
  unint64_t v876;
  int v877;
  int v878;
  int v879;
  size_t v880;
  void *v881;
  unint64_t v882;
  unsigned int v883;
  unsigned int v884;
  int8x16_t v885;
  uint64_t v886;
  std::__shared_weak_count *v887;
  unint64_t *v888;
  unint64_t v889;
  unint64_t v890;
  unint64_t v891;
  unsigned __int8 *v892;
  unint64_t v893;
  uint64_t v894;
  unsigned __int8 *v895;
  _DWORD *v896;
  int v897;
  char *v898;
  unint64_t v899;
  unint64_t v900;
  unsigned __int8 *v901;
  int v902;
  unsigned __int8 *v903;
  int v904;
  int v905;
  BOOL v906;
  uint64_t v907;
  unint64_t v908;
  uint64_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t *v914;
  int8x16_t v915;
  int8x16_t *v916;
  uint64_t v917;
  uint64_t v918;
  BOOL v919;
  void *v920;
  unint64_t v921;
  int v922;
  int v923;
  int v924;
  size_t v925;
  void *v926;
  unint64_t v927;
  uint64_t v928;
  unsigned __int8 *v929;
  _DWORD *v930;
  int v931;
  char *v932;
  unint64_t v933;
  unint64_t v934;
  unsigned __int8 *v935;
  int v936;
  unsigned __int8 *v937;
  int v938;
  int v939;
  BOOL v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  int8x16_t *v948;
  int8x16_t v949;
  int8x16_t *v950;
  uint64_t v951;
  uint64_t v952;
  int v953;
  char v954;
  unint64_t *v955;
  uint64_t v956;
  unint64_t v957;
  unint64_t v958;
  uint64_t v959;
  _QWORD *v960;
  uint64_t v961;
  _BYTE *v962;
  void **v963;
  _QWORD *v964;
  char *v965;
  unsigned __int8 *v966;
  unsigned int *v967;
  _QWORD *v968;
  uint64_t v969;
  float *v970;
  unint64_t *v971;
  _QWORD *v972;
  uint64_t v973;
  int v974;
  void **v975;
  _QWORD *v976;
  _BYTE *v977;
  unsigned __int8 *v978;
  unint64_t *v979;
  int v980;
  unsigned int v981;
  void *v982;
  unint64_t *v983;
  int v984;
  char *v985;
  _QWORD *v986;
  void **v987;
  unsigned int v988;
  float *v989;
  void **v990;
  uint64_t v991;
  float *v992;
  _QWORD *v993;
  char *v994;
  _BYTE *v995;
  unint64_t *v996;
  uint64_t v997;
  _BYTE *v998;
  unint64_t v999;
  void **v1000;
  unint64_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  _BYTE v1005[32];
  __int128 v1006;
  void *v1007[2];
  void *v1008[2];
  __int128 v1009;
  void *v1010[2];
  __int128 v1011;
  __int128 v1012;
  void *v1013[2];
  __int128 v1014;
  __int128 v1015;
  void *v1016[2];
  __int128 v1017;
  __int128 v1018;
  void *v1019;
  unint64_t v1020;
  unint64_t v1021;
  void *__src[2];
  void *v1023[2];
  __int128 v1024;
  void *v1025[2];
  void *v1026[2];
  __int128 v1027;
  void *v1028[2];
  uint64_t v1029;
  void *v1030[2];
  void *v1031[2];
  __int128 v1032;
  void *v1033[2];
  void *v1034[2];
  __int128 v1035;
  void *v1036[2];
  uint64_t v1037;
  void *v1038[4];
  __int128 v1039;
  void *v1040[2];
  void *v1041[2];
  __int128 v1042;
  void *v1043[2];
  uint64_t v1044;
  __int128 v1045;
  char v1046;
  char v1047;
  void *v1048;
  char v1049;
  void *v1050;
  char v1051;
  char v1052;
  char v1053;
  void *v1054[4];
  __int128 v1055;
  void *v1056[2];
  void *v1057[2];
  __int128 v1058;
  void *v1059[2];
  uint64_t v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  void *v1064[2];
  void *v1065[2];
  __int128 v1066;
  void *v1067[2];
  uint64_t v1068;
  void *v1069[4];
  __int128 v1070;
  void *v1071[2];
  __int128 v1072;
  __int128 v1073;
  void *v1074[2];
  uint64_t v1075;
  void *v1076[2];
  void *v1077[2];
  __int128 v1078;
  void *v1079[2];
  void *v1080[2];
  __int128 v1081;
  void *v1082[2];
  uint64_t v1083;
  void *v1084[2];
  __int128 v1085;
  int v1086;
  __int128 __dst;
  _BYTE v1088[7];
  char v1089;
  char v1090;
  void *v1091;
  char v1092;
  void *v1093;
  char v1094;
  char v1095;
  char v1096;
  uint64_t *v1097;
  _BYTE v1098[32];
  __int128 v1099;
  void *v1100[2];
  void *v1101[2];
  __int128 v1102;
  void *v1103[2];
  uint64_t v1104;
  void *v1105[2];
  void *__p[2];
  __int128 v1107;
  void *v1108[2];
  void *v1109[2];
  __int128 v1110;
  void *v1111[2];
  uint64_t (**v1112)();
  uint64_t v1113;
  std::__shared_weak_count *v1114;

  v1 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v955 = v4;
  v6 = v5;
  v8 = v7;
  v956 = v1;
  *(_OWORD *)v1077 = 0u;
  *(_OWORD *)v1076 = 0u;
  LODWORD(v1078) = 733221712;
  kdebug_trace();
  v954 = v3;
  v1105[0] = &off_24C0750D8;
  sub_207DD91FC((uint64_t)(v8 + 36), (uint64_t *)&v1105[1]);
  v1108[1] = &off_24C0750D8;
  sub_207DD91FC((uint64_t)(v8 + 47), (uint64_t *)v1109);
  v1112 = &off_24C0750D8;
  sub_207DD91FC((uint64_t)(v8 + 58), &v1113);
  *(_QWORD *)v1098 = &off_24C0753F8;
  sub_207DDD610((uint64_t)(v8 + 14), (uint64_t *)&v1098[8]);
  *(_QWORD *)v1005 = &off_24C0753F8;
  sub_207DDD610((uint64_t)(v8 + 25), (uint64_t *)&v1005[8]);
  sub_207DE24CC(v8, (uint64_t)v1105, (uint64_t)v1098, (uint64_t)v1005, (uint64_t)v1069);
  v9 = *(std::__shared_weak_count **)&v1005[16];
  if (*(_QWORD *)&v1005[16])
  {
    v10 = (unint64_t *)(*(_QWORD *)&v1005[16] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__shared_weak_count **)&v1098[16];
  if (*(_QWORD *)&v1098[16])
  {
    v13 = (unint64_t *)(*(_QWORD *)&v1098[16] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v1114;
  if (v1114)
  {
    p_shared_owners = (unint64_t *)&v1114->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v1109[1];
  if (!v1109[1])
    goto LABEL_20;
  v19 = (unint64_t *)((char *)v1109[1] + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = (std::__shared_weak_count *)__p[0];
    if (!__p[0])
      goto LABEL_24;
  }
  else
  {
LABEL_20:
    v21 = (std::__shared_weak_count *)__p[0];
    if (!__p[0])
      goto LABEL_24;
  }
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_24:
    v993 = v8;
    v24 = LOBYTE(v1069[1]);
    if (!LOBYTE(v1069[1]))
      goto LABEL_59;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  v993 = v8;
  v24 = LOBYTE(v1069[1]);
  if (!LOBYTE(v1069[1]))
    goto LABEL_59;
LABEL_25:
  LOWORD(v1038[0]) = v24;
  sub_207DD5C1C((unsigned __int16 *)v1038);
  v25 = std::string::insert((std::string *)&v1061, 0, "Segmentation failed with error code ", 0x24uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1005[16] = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)v1005 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append((std::string *)v1005, " and message: ", 0xEuLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&v1098[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)v1098 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = *((char *)v1069[2] + 23);
  if (v29 >= 0)
    v30 = (const std::string::value_type *)v1069[2];
  else
    v30 = *(const std::string::value_type **)v1069[2];
  if (v29 >= 0)
    v31 = *((unsigned __int8 *)v1069[2] + 23);
  else
    v31 = *((_QWORD *)v1069[2] + 1);
  v32 = std::string::append((std::string *)v1098, v30, v31);
  v34 = (void *)v32->__r_.__value_.__r.__words[0];
  size = v32->__r_.__value_.__l.__size_;
  LODWORD(v1054[0]) = v32->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v1054 + 3) = *(_DWORD *)((char *)&v32->__r_.__value_.__r.__words[2] + 3);
  v35 = SHIBYTE(v32->__r_.__value_.__r.__words[2]);
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (v35 < 0)
  {
    sub_207CA40D8(&__dst, v34, size);
  }
  else
  {
    *(_QWORD *)&__dst = v34;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v1088 = v1054[0];
    *(_DWORD *)&v1088[3] = *(_DWORD *)((char *)v1054 + 3);
    v1089 = v35;
  }
  v1090 = 1;
  LOBYTE(v1091) = 0;
  v1095 = 0;
  v1096 = 1;
  sub_207DD5934((uint64_t)v1105, 1u, &__dst);
  *(_OWORD *)v956 = *(_OWORD *)v1105;
  *(_BYTE *)(v956 + 16) = 0;
  *(_BYTE *)(v956 + 112) = 0;
  if (!(_BYTE)v1112)
  {
    *(_BYTE *)(v956 + 120) = 0;
    if (!v1096)
      goto LABEL_55;
LABEL_49:
    if (!v1095)
      goto LABEL_52;
    if (v1094 < 0)
    {
      operator delete(v1093);
      if ((v1092 & 0x80000000) == 0)
      {
LABEL_52:
        if (!v1090)
          goto LABEL_55;
LABEL_53:
        if (v1089 < 0)
          operator delete((void *)__dst);
        goto LABEL_55;
      }
    }
    else if ((v1092 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    operator delete(v1091);
    if (!v1090)
      goto LABEL_55;
    goto LABEL_53;
  }
  *(_BYTE *)(v956 + 40) = 0;
  v36 = BYTE8(v1107);
  if (BYTE8(v1107))
  {
    *(_OWORD *)(v956 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(v956 + 32) = v1107;
    __p[1] = 0;
    *(_QWORD *)&v1107 = 0;
    __p[0] = 0;
    *(_BYTE *)(v956 + 40) = 1;
  }
  *(_BYTE *)(v956 + 48) = 0;
  *(_BYTE *)(v956 + 104) = 0;
  if (LOBYTE(v1111[1]))
  {
    v37 = v1109[1];
    *(void **)(v956 + 64) = v1109[0];
    *(_OWORD *)(v956 + 48) = *(_OWORD *)v1108;
    v1108[0] = 0;
    v1108[1] = 0;
    *(_QWORD *)(v956 + 72) = v37;
    *(_OWORD *)(v956 + 80) = v1110;
    *(void **)(v956 + 96) = v1111[0];
    v1109[0] = 0;
    v1110 = 0uLL;
    v1111[0] = 0;
    *(_BYTE *)(v956 + 104) = 1;
  }
  *(_BYTE *)(v956 + 112) = 1;
  *(_BYTE *)(v956 + 120) = 0;
  if (v36 && SBYTE7(v1107) < 0)
    operator delete(__p[0]);
  if (v1096)
    goto LABEL_49;
LABEL_55:
  if ((v35 & 0x80000000) == 0)
  {
    if ((v1098[23] & 0x80000000) == 0)
      goto LABEL_57;
LABEL_65:
    operator delete(*(void **)v1098);
    if ((v1005[23] & 0x80000000) == 0)
    {
LABEL_58:
      if ((SBYTE7(v1062) & 0x80000000) == 0)
        goto LABEL_59;
LABEL_67:
      operator delete((void *)v1061);
      v1069[0] = off_24C06E9E8;
      v38 = (std::__shared_weak_count *)v1069[3];
      if (!v1069[3])
        goto LABEL_68;
      goto LABEL_60;
    }
    goto LABEL_66;
  }
  operator delete(v34);
  if ((v1098[23] & 0x80000000) != 0)
    goto LABEL_65;
LABEL_57:
  if ((v1005[23] & 0x80000000) == 0)
    goto LABEL_58;
LABEL_66:
  operator delete(*(void **)v1005);
  if (SBYTE7(v1062) < 0)
    goto LABEL_67;
LABEL_59:
  v1069[0] = off_24C06E9E8;
  v38 = (std::__shared_weak_count *)v1069[3];
  if (!v1069[3])
    goto LABEL_68;
LABEL_60:
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_68:
  result = kdebug_trace();
  if (v24)
    return result;
  v1085 = 0u;
  *(_OWORD *)v1084 = 0u;
  v1086 = 733221736;
  kdebug_trace();
  v1083 = 0;
  *(_OWORD *)v1082 = 0u;
  v1081 = 0u;
  *(_OWORD *)v1080 = 0u;
  *(_OWORD *)v1079 = 0u;
  v1078 = 0u;
  *(_OWORD *)v1077 = 0u;
  *(_OWORD *)v1076 = 0u;
  v1075 = 0;
  *(_OWORD *)v1074 = 0u;
  v1073 = 0u;
  v1072 = 0u;
  *(_OWORD *)v1071 = 0u;
  v1070 = 0u;
  memset(v1069, 0, sizeof(v1069));
  v1068 = 0;
  *(_OWORD *)v1067 = 0u;
  v1066 = 0u;
  *(_OWORD *)v1065 = 0u;
  *(_OWORD *)v1064 = 0u;
  v1063 = 0u;
  v1062 = 0u;
  v1061 = 0u;
  v1060 = 0;
  *(_OWORD *)v1059 = 0u;
  *(_OWORD *)v1057 = 0u;
  v1058 = 0u;
  v1055 = 0u;
  *(_OWORD *)v1056 = 0u;
  memset(v1054, 0, sizeof(v1054));
  v42 = v993[15];
  v43 = (std::__shared_weak_count *)v993[16];
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if (v42)
        goto LABEL_75;
LABEL_89:
      v1105[0] = 0;
      v47 = v993[26];
      v48 = (std::__shared_weak_count *)v993[27];
      if (!v48)
        goto LABEL_90;
      goto LABEL_77;
    }
  }
  if (!v42)
    goto LABEL_89;
LABEL_75:
  if (*((_BYTE *)v993 + 193))
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v993[15] + 96))(v1105, v993[15], 1);
    v47 = v993[26];
    v48 = (std::__shared_weak_count *)v993[27];
    if (v48)
      goto LABEL_77;
LABEL_90:
    if (!v47)
      goto LABEL_91;
    goto LABEL_82;
  }
  v1105[0] = 0;
  v47 = v993[26];
  v48 = (std::__shared_weak_count *)v993[27];
  if (!v48)
    goto LABEL_90;
LABEL_77:
  v49 = (unint64_t *)&v48->__shared_owners_;
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
  do
    v51 = __ldaxr(v49);
  while (__stlxr(v51 - 1, v49));
  if (v51)
  {
    if (v47)
      goto LABEL_82;
LABEL_91:
    *(_QWORD *)v1098 = 0;
    v52 = v993;
    v973 = *((unsigned int *)v993 + 44);
    v53 = (char *)v993[18];
    if (!*((_BYTE *)v993 + 192))
      goto LABEL_100;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
  std::__shared_weak_count::__release_weak(v48);
  if (!v47)
    goto LABEL_91;
LABEL_82:
  v52 = v993;
  if (*((_BYTE *)v993 + 281))
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v993[26] + 96))(v1098, v993[26], 1);
    v973 = *((unsigned int *)v993 + 44);
    v53 = (char *)v993[18];
    if (!*((_BYTE *)v993 + 192))
      goto LABEL_100;
  }
  else
  {
    *(_QWORD *)v1098 = 0;
    v973 = *((unsigned int *)v993 + 44);
    v53 = (char *)v993[18];
    if (!*((_BYTE *)v993 + 192))
      goto LABEL_100;
  }
LABEL_98:
  if (v53)
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v52[15] + 88))(v52[15], 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v53 = (char *)v52[18];
  }
LABEL_100:
  if (*((_BYTE *)v52 + 280) && v52[29])
    (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v52[26] + 88))(v52[26], 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
  v953 = v6;
  v969 = *((unsigned int *)v52 + 47);
  v54 = (*((_DWORD *)v52 + 45) * v969);
  if ((_DWORD)v54 && v973)
  {
    v55 = 0;
    v965 = &v53[v54];
    v961 = *((unsigned int *)v52 + 69);
    v56 = (_BYTE *)v52[29];
    do
    {
      v57 = 0;
      v981 = v55;
      v58 = (float)v55;
      v59 = &v53[v973];
      v985 = v53;
      v977 = v56;
      v994 = &v53[v973];
      do
      {
        if (*v53 <= 1u)
        {
          v60 = (float)v57;
          v61 = (float)((float)(v58 + -63.5) * (float)(v58 + -63.5))
              + (float)((float)((float)v57 + -63.5) * (float)((float)v57 + -63.5));
          v998 = v56;
          if (v61 <= 961.0)
          {
            v73 = (char *)v1076[1];
            if (v1076[1] < v1077[0])
            {
              *(float *)v1076[1] = v60;
              v74 = v73 + 4;
              goto LABEL_169;
            }
            v75 = v1076[0];
            v76 = (char *)v1076[1] - (char *)v1076[0];
            v77 = ((char *)v1076[1] - (char *)v1076[0]) >> 2;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 62)
              goto LABEL_1518;
            v79 = (char *)v1077[0] - (char *)v1076[0];
            if (((char *)v1077[0] - (char *)v1076[0]) >> 1 > v78)
              v78 = v79 >> 1;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
              v80 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v80 = v78;
            if (v80)
            {
              if (v80 >> 62)
                goto LABEL_1515;
              v81 = operator new(4 * v80);
              v82 = (float *)&v81[4 * v77];
              *v82 = v60;
              v74 = v82 + 1;
              v83 = v73 - v75;
              if (v73 != v75)
              {
LABEL_145:
                v84 = v83 - 4;
                if (v84 < 0x2C)
                  goto LABEL_1528;
                if ((unint64_t)(v73 - v81 - v76) < 0x20)
                  goto LABEL_1528;
                v97 = (v84 >> 2) + 1;
                v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
                v99 = &v73[-v98];
                v82 = (float *)((char *)v82 - v98);
                v100 = &v81[4 * v77 - 16];
                v101 = v73 - 16;
                v102 = v97 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v103 = *(_OWORD *)v101;
                  *(v100 - 1) = *((_OWORD *)v101 - 1);
                  *v100 = v103;
                  v100 -= 2;
                  v101 -= 32;
                  v102 -= 8;
                }
                while (v102);
                v73 = v99;
                if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1528:
                  do
                  {
                    v104 = *((_DWORD *)v73 - 1);
                    v73 -= 4;
                    *((_DWORD *)v82-- - 1) = v104;
                  }
                  while (v73 != v75);
                }
              }
            }
            else
            {
              v81 = 0;
              v82 = (float *)(4 * v77);
              *(float *)(4 * v77) = v60;
              v74 = (void *)(4 * v77 + 4);
              v83 = v73 - v75;
              if (v73 != v75)
                goto LABEL_145;
            }
            v1076[0] = v82;
            v1076[1] = v74;
            v1077[0] = &v81[4 * v80];
            if (v75)
              operator delete(v75);
LABEL_169:
            v1076[1] = v74;
            v105 = (char *)v1069[1];
            if (v1069[1] < v1069[2])
            {
              *(float *)v1069[1] = v58;
              v106 = v105 + 4;
              goto LABEL_191;
            }
            v107 = v1069[0];
            v108 = (char *)v1069[1] - (char *)v1069[0];
            v109 = ((char *)v1069[1] - (char *)v1069[0]) >> 2;
            v110 = v109 + 1;
            if ((unint64_t)(v109 + 1) >> 62)
              goto LABEL_1518;
            v111 = (char *)v1069[2] - (char *)v1069[0];
            if (((char *)v1069[2] - (char *)v1069[0]) >> 1 > v110)
              v110 = v111 >> 1;
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
              v112 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v112 = v110;
            if (v112)
            {
              if (v112 >> 62)
                goto LABEL_1515;
              v113 = operator new(4 * v112);
              v114 = (float *)&v113[4 * v109];
              *v114 = v58;
              v106 = v114 + 1;
              v115 = v105 - v107;
              if (v105 != v107)
              {
LABEL_180:
                v116 = v115 - 4;
                if (v116 < 0x2C)
                  goto LABEL_1529;
                if ((unint64_t)(v105 - v113 - v108) < 0x20)
                  goto LABEL_1529;
                v117 = (v116 >> 2) + 1;
                v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
                v119 = &v105[-v118];
                v114 = (float *)((char *)v114 - v118);
                v120 = &v113[4 * v109 - 16];
                v121 = v105 - 16;
                v122 = v117 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v123 = *(_OWORD *)v121;
                  *(v120 - 1) = *((_OWORD *)v121 - 1);
                  *v120 = v123;
                  v120 -= 2;
                  v121 -= 32;
                  v122 -= 8;
                }
                while (v122);
                v105 = v119;
                if (v117 != (v117 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1529:
                  do
                  {
                    v124 = *((_DWORD *)v105 - 1);
                    v105 -= 4;
                    *((_DWORD *)v114-- - 1) = v124;
                  }
                  while (v105 != v107);
                }
              }
            }
            else
            {
              v113 = 0;
              v114 = (float *)(4 * v109);
              *(float *)(4 * v109) = v58;
              v106 = (void *)(4 * v109 + 4);
              v115 = v105 - v107;
              if (v105 != v107)
                goto LABEL_180;
            }
            v1069[0] = v114;
            v1069[1] = v106;
            v1069[2] = &v113[4 * v112];
            if (v107)
              operator delete(v107);
LABEL_191:
            v1069[1] = v106;
            v125 = (char *)*((_QWORD *)&v1061 + 1);
            if (*((_QWORD *)&v1061 + 1) < (unint64_t)v1062)
            {
              **((_BYTE **)&v1061 + 1) = *v53;
              v126 = (uint64_t)(v125 + 1);
              goto LABEL_277;
            }
            v127 = (char *)v1061;
            v128 = *((_QWORD *)&v1061 + 1) - v1061;
            v129 = *((_QWORD *)&v1061 + 1) - v1061 + 1;
            if (v129 < 0)
              goto LABEL_1519;
            v130 = v1062 - v1061;
            if (2 * ((_QWORD)v1062 - (_QWORD)v1061) > (unint64_t)v129)
              v129 = 2 * v130;
            if (v130 >= 0x3FFFFFFFFFFFFFFFLL)
              v131 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v131 = v129;
            if (v131)
            {
              v132 = operator new(v131);
              v133 = &v132[v128];
              v132[v128] = *v53;
              v126 = (uint64_t)&v132[v128 + 1];
              if (v125 != v127)
              {
LABEL_201:
                if (v128 >= 8 && (unint64_t)(v127 - v132) >= 0x20)
                {
                  if (v128 >= 0x20)
                  {
                    v134 = v128 & 0xFFFFFFFFFFFFFFE0;
                    v185 = &v132[v128 - 16];
                    v186 = v125 - 16;
                    v187 = v128 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v188 = *(_OWORD *)v186;
                      *(v185 - 1) = *((_OWORD *)v186 - 1);
                      *v185 = v188;
                      v185 -= 2;
                      v186 -= 32;
                      v187 -= 32;
                    }
                    while (v187);
                    if (v128 == v134)
                      goto LABEL_275;
                    if ((v128 & 0x18) != 0)
                      goto LABEL_260;
                    v133 -= v134;
                    v125 -= v134;
                  }
                  else
                  {
                    v134 = 0;
LABEL_260:
                    v133 -= v128 & 0xFFFFFFFFFFFFFFF8;
                    v189 = &v132[&v125[-v134] - v127 - 8];
                    v190 = &v125[-v134 - 8];
                    v191 = v134 - (v128 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v192 = *(_QWORD *)v190;
                      v190 -= 8;
                      *v189-- = v192;
                      v191 += 8;
                    }
                    while (v191);
                    v125 -= v128 & 0xFFFFFFFFFFFFFFF8;
                    if (v128 == (v128 & 0xFFFFFFFFFFFFFFF8))
                    {
LABEL_275:
                      v125 = (char *)v1061;
                      *(_QWORD *)&v1061 = v132;
                      *((_QWORD *)&v1061 + 1) = v126;
                      *(_QWORD *)&v1062 = &v132[v131];
                      if (v125)
LABEL_276:
                        operator delete(v125);
LABEL_277:
                      *((_QWORD *)&v1061 + 1) = v126;
                      v203 = (char *)v1054[1];
                      if (v1054[1] < v1054[2])
                      {
                        *(_BYTE *)v1054[1] = *v56;
                        v1054[1] = v203 + 1;
                        goto LABEL_109;
                      }
                      v204 = (char *)v1054[0];
                      v205 = (char *)v1054[1] - (char *)v1054[0];
                      v206 = (char *)v1054[1] - (char *)v1054[0] + 1;
                      if (v206 < 0)
                        goto LABEL_1519;
                      v207 = (char *)v1054[2] - (char *)v1054[0];
                      if (2 * ((char *)v1054[2] - (char *)v1054[0]) > (unint64_t)v206)
                        v206 = 2 * v207;
                      if (v207 >= 0x3FFFFFFFFFFFFFFFLL)
                        v208 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v208 = v206;
                      if (v208)
                      {
                        v209 = (char *)operator new(v208);
                        v210 = &v209[v205];
                        v209[v205] = *v56;
                        v211 = &v209[v205 + 1];
                        if (v203 == v204)
                          goto LABEL_304;
LABEL_288:
                        if (v205 >= 8 && (unint64_t)(v204 - v209) >= 0x20)
                        {
                          if (v205 >= 0x20)
                          {
                            v212 = v205 & 0xFFFFFFFFFFFFFFE0;
                            v213 = &v209[v205 - 16];
                            v214 = v203 - 16;
                            v215 = v205 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              v216 = *(_OWORD *)v214;
                              *((_OWORD *)v213 - 1) = *((_OWORD *)v214 - 1);
                              *(_OWORD *)v213 = v216;
                              v213 -= 32;
                              v214 -= 32;
                              v215 -= 32;
                            }
                            while (v215);
                            if (v205 == v212)
                              goto LABEL_303;
                            if ((v205 & 0x18) != 0)
                              goto LABEL_296;
                            v210 -= v212;
                            v203 -= v212;
                          }
                          else
                          {
                            v212 = 0;
LABEL_296:
                            v210 -= v205 & 0xFFFFFFFFFFFFFFF8;
                            v217 = &v209[&v203[-v212] - v204 - 8];
                            v218 = &v203[-v212 - 8];
                            v219 = v212 - (v205 & 0xFFFFFFFFFFFFFFF8);
                            do
                            {
                              v220 = *(_QWORD *)v218;
                              v218 -= 8;
                              *(_QWORD *)v217 = v220;
                              v217 -= 8;
                              v219 += 8;
                            }
                            while (v219);
                            v203 -= v205 & 0xFFFFFFFFFFFFFFF8;
                            if (v205 == (v205 & 0xFFFFFFFFFFFFFFF8))
                            {
LABEL_303:
                              v203 = (char *)v1054[0];
                              v210 = v209;
                              goto LABEL_304;
                            }
                          }
                        }
                        v221 = v210 - 1;
                        do
                        {
                          v222 = *--v203;
                          *v221-- = v222;
                        }
                        while (v203 != v204);
                        goto LABEL_303;
                      }
                      v209 = 0;
                      v210 = (char *)((char *)v1054[1] - (char *)v1054[0]);
                      *(_BYTE *)v205 = *v56;
                      v211 = (char *)(v205 + 1);
                      if (v203 != v204)
                        goto LABEL_288;
LABEL_304:
                      v1054[0] = v210;
                      v1054[1] = v211;
                      v1054[2] = &v209[v208];
                      if (v203)
                        operator delete(v203);
                      v1054[1] = v211;
                      goto LABEL_109;
                    }
                  }
                }
                v201 = v133 - 1;
                do
                {
                  v202 = *--v125;
                  *v201-- = v202;
                }
                while (v125 != v127);
                goto LABEL_275;
              }
            }
            else
            {
              v132 = 0;
              v133 = (char *)(*((_QWORD *)&v1061 + 1) - v1061);
              *(_BYTE *)v128 = *v53;
              v126 = v128 + 1;
              if (v125 != v127)
                goto LABEL_201;
            }
            *(_QWORD *)&v1061 = v133;
            *((_QWORD *)&v1061 + 1) = v126;
            *(_QWORD *)&v1062 = &v132[v131];
            if (v125)
              goto LABEL_276;
            goto LABEL_277;
          }
          v62 = v61 < 1089.0 || v61 > 1521.0;
          v63 = &unk_208237930;
          if (!v62
            || (v61 >= 1681.0 ? (v64 = v61 > 2209.0) : (v64 = 1),
                (v63 = &unk_208237938, !v64)
             || (v61 >= 2401.0 ? (v65 = v61 > 2809.0) : (v65 = 1),
                 (v63 = &unk_208237940, !v65)
              || (v61 >= 3025.0 ? (v66 = v61 > 3600.0) : (v66 = 1), v63 = &unk_208237948, !v66))))
          {
            v988 = v57;
            v67 = (v63 - (_BYTE *)&unk_208237928) >> 3;
            v68 = &v1076[3 * v67];
            v69 = (uint64_t *)(v68 + 1);
            v70 = (float *)v68[1];
            v71 = (float *)v68[2];
            if (v70 < v71)
            {
              *v70 = v60;
              v72 = (uint64_t)(v70 + 1);
              goto LABEL_216;
            }
            v85 = v67;
            v86 = (float *)*v68;
            v87 = (char *)v70 - (_BYTE *)*v68;
            v88 = v87 >> 2;
            v89 = (v87 >> 2) + 1;
            if (v89 >> 62)
              goto LABEL_1518;
            v90 = (char *)v71 - (char *)v86;
            if (v90 >> 1 > v89)
              v89 = v90 >> 1;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
              v91 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            if (v91)
            {
              if (v91 >> 62)
                goto LABEL_1515;
              v92 = v91;
              v93 = operator new(4 * v91);
              v91 = v92;
              v94 = (float *)&v93[4 * v88];
              *v94 = v60;
              v72 = (uint64_t)(v94 + 1);
              v95 = (char *)v70 - (char *)v86;
              if (v70 != v86)
              {
LABEL_156:
                v96 = v95 - 4;
                if (v96 < 0x2C)
                {
                  v67 = v85;
                  v56 = v998;
                  goto LABEL_213;
                }
                v135 = (char *)v70 - &v93[v87];
                v67 = v85;
                v56 = v998;
                if (v135 < 0x20)
                  goto LABEL_1530;
                v136 = (v96 >> 2) + 1;
                v137 = 4 * (v136 & 0x7FFFFFFFFFFFFFF8);
                v138 = &v70[v137 / 0xFFFFFFFFFFFFFFFCLL];
                v94 = (float *)((char *)v94 - v137);
                v139 = &v93[4 * v88 - 16];
                v140 = v70 - 4;
                v141 = v136 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v142 = *(_OWORD *)v140;
                  *(v139 - 1) = *((_OWORD *)v140 - 1);
                  *v139 = v142;
                  v139 -= 2;
                  v140 -= 8;
                  v141 -= 8;
                }
                while (v141);
                v70 = v138;
                if (v136 != (v136 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1530:
                  do
                  {
LABEL_213:
                    v143 = *((_DWORD *)v70-- - 1);
                    *((_DWORD *)v94-- - 1) = v143;
                  }
                  while (v70 != v86);
                }
LABEL_214:
                *v68 = v94;
                *v69 = v72;
                v68[2] = &v93[4 * v91];
                if (v86)
                  operator delete(v86);
LABEL_216:
                *v69 = v72;
                v144 = &v1069[3 * v67];
                v145 = (uint64_t *)(v144 + 1);
                v146 = (float *)v144[1];
                v147 = (float *)v144[2];
                if (v146 < v147)
                {
                  *v146 = v58;
                  v148 = (uint64_t)(v146 + 1);
                  goto LABEL_238;
                }
                v149 = v67;
                v150 = (float *)*v144;
                v151 = (char *)v146 - (_BYTE *)*v144;
                v152 = v151 >> 2;
                v153 = (v151 >> 2) + 1;
                if (v153 >> 62)
LABEL_1518:
                  sub_207D0CD58();
                v154 = (char *)v147 - (char *)v150;
                if (v154 >> 1 > v153)
                  v153 = v154 >> 1;
                if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                  v155 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v155 = v153;
                if (v155)
                {
                  if (v155 >> 62)
LABEL_1515:
                    sub_207CA3AB8();
                  v156 = v155;
                  v157 = operator new(4 * v155);
                  v155 = v156;
                  v158 = (float *)&v157[4 * v152];
                  *v158 = v58;
                  v148 = (uint64_t)(v158 + 1);
                  v159 = (char *)v146 - (char *)v150;
                  if (v146 != v150)
                  {
LABEL_227:
                    v160 = v159 - 4;
                    if (v160 < 0x2C)
                    {
                      v67 = v149;
                      v56 = v998;
                      goto LABEL_235;
                    }
                    v161 = (char *)v146 - v157 - v151;
                    v67 = v149;
                    v56 = v998;
                    if (v161 < 0x20)
                      goto LABEL_1531;
                    v162 = (v160 >> 2) + 1;
                    v163 = 4 * (v162 & 0x7FFFFFFFFFFFFFF8);
                    v164 = &v146[v163 / 0xFFFFFFFFFFFFFFFCLL];
                    v158 = (float *)((char *)v158 - v163);
                    v165 = &v157[4 * v152 - 16];
                    v166 = v146 - 4;
                    v167 = v162 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v168 = *(_OWORD *)v166;
                      *(v165 - 1) = *((_OWORD *)v166 - 1);
                      *v165 = v168;
                      v165 -= 2;
                      v166 -= 8;
                      v167 -= 8;
                    }
                    while (v167);
                    v146 = v164;
                    if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_1531:
                      do
                      {
LABEL_235:
                        v169 = *((_DWORD *)v146-- - 1);
                        *((_DWORD *)v158-- - 1) = v169;
                      }
                      while (v146 != v150);
                    }
LABEL_236:
                    *v144 = v158;
                    *v145 = v148;
                    v144[2] = &v157[4 * v155];
                    if (v150)
                      operator delete(v150);
LABEL_238:
                    *v145 = v148;
                    v170 = (_QWORD *)&v1061 + 3 * v67;
                    v172 = v170 + 1;
                    v171 = (char *)v170[1];
                    v174 = v170 + 2;
                    v173 = v170[2];
                    if ((unint64_t)v171 < v173)
                    {
                      *v171 = *v53;
                      v175 = (uint64_t)(v171 + 1);
                      goto LABEL_312;
                    }
                    v176 = (char *)*v170;
                    v177 = (unint64_t)&v171[-*v170];
                    v178 = v177 + 1;
                    if ((uint64_t)(v177 + 1) < 0)
                      goto LABEL_1519;
                    v179 = v173 - (_QWORD)v176;
                    if (2 * v179 > v178)
                      v178 = 2 * v179;
                    if (v179 >= 0x3FFFFFFFFFFFFFFFLL)
                      v180 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v180 = v178;
                    if (v180)
                    {
                      v181 = v180;
                      v182 = operator new(v180);
                      v180 = v181;
                      v183 = &v182[v177];
                      v182[v177] = *v53;
                      v175 = (uint64_t)&v182[v177 + 1];
                      if (v171 != v176)
                        goto LABEL_248;
LABEL_251:
                      v56 = v998;
                      *v170 = v183;
                      *v172 = v175;
                      *v174 = &v182[v180];
                      if (!v171)
                      {
LABEL_312:
                        *v172 = v175;
                        v225 = &v1054[3 * v67];
                        v227 = (uint64_t *)(v225 + 1);
                        v226 = v225[1];
                        v228 = v225[2];
                        if (v226 < v228)
                        {
                          *v226 = *v56;
                          v229 = (uint64_t)(v226 + 1);
                          goto LABEL_342;
                        }
                        v230 = *v225;
                        v231 = v226 - (_BYTE *)*v225;
                        v232 = v231 + 1;
                        if ((uint64_t)(v231 + 1) < 0)
LABEL_1519:
                          sub_207CF94B8();
                        v233 = v228 - v230;
                        if (2 * v233 > v232)
                          v232 = 2 * v233;
                        if (v233 >= 0x3FFFFFFFFFFFFFFFLL)
                          v234 = 0x7FFFFFFFFFFFFFFFLL;
                        else
                          v234 = v232;
                        if (v234)
                        {
                          v235 = (char *)operator new(v234);
                          v56 = v998;
                          v236 = &v235[v231];
                          v235[v231] = *v998;
                          v229 = (uint64_t)&v235[v231 + 1];
                          if (v226 == v230)
                          {
LABEL_340:
                            *v225 = v236;
                            *v227 = v229;
                            v225[2] = &v235[v234];
                            if (v226)
                              operator delete(v226);
LABEL_342:
                            *v227 = v229;
                            v57 = v988;
LABEL_109:
                            v59 = v994;
                            goto LABEL_110;
                          }
                        }
                        else
                        {
                          v235 = 0;
                          v236 = (char *)(v226 - (_BYTE *)*v225);
                          *(_BYTE *)v231 = *v56;
                          v229 = v231 + 1;
                          if (v226 == v230)
                            goto LABEL_340;
                        }
                        if (v231 >= 8 && (unint64_t)(v230 - v235) >= 0x20)
                        {
                          if (v231 >= 0x20)
                          {
                            v237 = v231 & 0xFFFFFFFFFFFFFFE0;
                            v238 = &v235[v231 - 16];
                            v239 = (__int128 *)(v226 - 16);
                            v240 = v231 & 0xFFFFFFFFFFFFFFE0;
                            do
                            {
                              v241 = *v239;
                              *((_OWORD *)v238 - 1) = *(v239 - 1);
                              *(_OWORD *)v238 = v241;
                              v238 -= 32;
                              v239 -= 2;
                              v240 -= 32;
                            }
                            while (v240);
                            if (v231 == v237)
                              goto LABEL_339;
                            if ((v231 & 0x18) != 0)
                              goto LABEL_332;
                            v236 -= v237;
                            v226 -= v237;
                          }
                          else
                          {
                            v237 = 0;
LABEL_332:
                            v236 -= v231 & 0xFFFFFFFFFFFFFFF8;
                            v242 = &v235[&v226[-v237] - v230 - 8];
                            v243 = (uint64_t *)&v226[-v237 - 8];
                            v244 = v237 - (v231 & 0xFFFFFFFFFFFFFFF8);
                            do
                            {
                              v245 = *v243--;
                              *(_QWORD *)v242 = v245;
                              v242 -= 8;
                              v244 += 8;
                            }
                            while (v244);
                            v226 -= v231 & 0xFFFFFFFFFFFFFFF8;
                            if (v231 == (v231 & 0xFFFFFFFFFFFFFFF8))
                            {
LABEL_339:
                              v226 = *v225;
                              v236 = v235;
                              goto LABEL_340;
                            }
                          }
                        }
                        v246 = v236 - 1;
                        do
                        {
                          v247 = *--v226;
                          *v246-- = v247;
                        }
                        while (v226 != v230);
                        goto LABEL_339;
                      }
LABEL_311:
                      operator delete(v171);
                      goto LABEL_312;
                    }
                    v182 = 0;
                    v183 = &v171[-*v170];
                    *(_BYTE *)v177 = *v53;
                    v175 = v177 + 1;
                    if (v171 == v176)
                      goto LABEL_251;
LABEL_248:
                    if (v177 < 8)
                    {
                      v56 = v998;
                      goto LABEL_308;
                    }
                    v56 = v998;
                    if ((unint64_t)(v176 - v182) < 0x20)
                      goto LABEL_308;
                    if (v177 >= 0x20)
                    {
                      v184 = v177 & 0xFFFFFFFFFFFFFFE0;
                      v193 = &v182[v177 - 16];
                      v194 = (__int128 *)(v171 - 16);
                      v195 = v177 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v196 = *v194;
                        *(v193 - 1) = *(v194 - 1);
                        *v193 = v196;
                        v193 -= 2;
                        v194 -= 2;
                        v195 -= 32;
                      }
                      while (v195);
                      if (v177 != v184)
                      {
                        if ((v177 & 0x18) == 0)
                        {
                          v183 -= v184;
                          v171 -= v184;
                          goto LABEL_308;
                        }
                        goto LABEL_268;
                      }
                    }
                    else
                    {
                      v184 = 0;
LABEL_268:
                      v183 -= v177 & 0xFFFFFFFFFFFFFFF8;
                      v197 = &v182[&v171[-v184] - v176 - 8];
                      v198 = (uint64_t *)&v171[-v184 - 8];
                      v199 = v184 - (v177 & 0xFFFFFFFFFFFFFFF8);
                      do
                      {
                        v200 = *v198--;
                        *v197-- = v200;
                        v199 += 8;
                      }
                      while (v199);
                      v171 -= v177 & 0xFFFFFFFFFFFFFFF8;
                      if (v177 != (v177 & 0xFFFFFFFFFFFFFFF8))
                      {
LABEL_308:
                        v223 = v183 - 1;
                        do
                        {
                          v224 = *--v171;
                          *v223-- = v224;
                        }
                        while (v171 != v176);
                      }
                    }
                    v171 = (char *)*v170;
                    *v170 = v182;
                    *v172 = v175;
                    *v174 = &v182[v180];
                    if (!v171)
                      goto LABEL_312;
                    goto LABEL_311;
                  }
                }
                else
                {
                  v157 = 0;
                  v158 = (float *)(4 * v152);
                  *(float *)(4 * v152) = v58;
                  v148 = 4 * v152 + 4;
                  v159 = (char *)v146 - (char *)v150;
                  if (v146 != v150)
                    goto LABEL_227;
                }
                v67 = v149;
                v56 = v998;
                goto LABEL_236;
              }
            }
            else
            {
              v93 = 0;
              v94 = (float *)(4 * v88);
              *(float *)(4 * v88) = v60;
              v72 = 4 * v88 + 4;
              v95 = (char *)v70 - (char *)v86;
              if (v70 != v86)
                goto LABEL_156;
            }
            v67 = v85;
            v56 = v998;
            goto LABEL_214;
          }
        }
LABEL_110:
        ++v53;
        ++v56;
        ++v57;
      }
      while (v53 != v59);
      v53 = &v985[v969];
      v56 = &v977[v961];
      v55 = v981 + 1;
    }
    while (&v985[v969] != v965);
  }
  v248 = *(_QWORD *)v1098;
  *(_QWORD *)v1098 = 0;
  if (v248)
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
  v249 = v1105[0];
  v1105[0] = 0;
  if (v249)
    (*(void (**)(void *))(*(_QWORD *)v249 + 8))(v249);
  v250 = (float *)v1076[0];
  v251 = v1077[1] == (void *)v1078;
  if (v1076[0] == v1076[1])
    ++v251;
  if (v1079[0] == v1079[1])
    ++v251;
  if (v1080[1] == (void *)v1081)
    v252 = v251 + 1;
  else
    v252 = v251;
  if (v1082[0] == v1082[1])
    v253 = -1;
  else
    v253 = 0;
  v952 = v253;
  if (v252 == v253)
  {
    if (v1076[0] == v1076[1] || (v254 = (float *)((char *)v1076[0] + 4), (char *)v1076[0] + 4 == v1076[1]))
    {
      v256 = (float *)v1076[0];
      v254 = (float *)v1076[0];
    }
    else
    {
      v255 = *((float *)v1076[0] + 1);
      if (v255 >= *(float *)v1076[0])
        v256 = (float *)v1076[0];
      else
        v256 = (float *)((char *)v1076[0] + 4);
      if (v255 < *(float *)v1076[0])
        v254 = (float *)v1076[0];
      v257 = (float *)((char *)v1076[0] + 8);
      if ((char *)v1076[0] + 8 != v1076[1])
      {
        if (v255 >= *(float *)v1076[0])
          v255 = *(float *)v1076[0];
        while (1)
        {
          v259 = v257;
          v260 = v257 + 1;
          if (v260 == v1076[1])
            break;
          v262 = *v259;
          v261 = v259[1];
          if (v261 >= *v259)
          {
            v258 = v250 + 3;
            if (v262 < v255)
            {
              v255 = *v259;
              v256 = v259;
            }
            if (v261 >= *v254)
              v254 = v258;
            v257 = v259 + 2;
            v250 = v259;
            if (v259 + 2 == v1076[1])
              goto LABEL_391;
          }
          else
          {
            v255 = *v256;
            if (v261 < *v256)
            {
              v255 = v259[1];
              v256 = v260;
            }
            if (v262 >= *v254)
              v254 = v259;
            v257 = v259 + 2;
            v250 = v259;
            if (v259 + 2 == v1076[1])
              goto LABEL_391;
          }
        }
        if (*v259 >= *v256)
        {
          if (*v259 >= *v254)
            v254 = v259;
        }
        else
        {
          v256 = v259;
        }
      }
    }
LABEL_391:
    v266 = (float *)v1069[0];
    v267 = (float *)((char *)v1069[0] + 4);
    if (v1069[0] == v1069[1] || v267 == v1069[1])
    {
      v269 = (float *)v1069[0];
      v267 = (float *)v1069[0];
    }
    else
    {
      v468 = *((float *)v1069[0] + 1);
      if (v468 >= *(float *)v1069[0])
        v269 = (float *)v1069[0];
      else
        v269 = (float *)((char *)v1069[0] + 4);
      if (v468 < *(float *)v1069[0])
        v267 = (float *)v1069[0];
      v469 = (float *)((char *)v1069[0] + 8);
      if ((char *)v1069[0] + 8 != v1069[1])
      {
        if (v468 >= *(float *)v1069[0])
          v468 = *(float *)v1069[0];
        while (1)
        {
          v471 = v469;
          v472 = v469 + 1;
          if (v472 == v1069[1])
            break;
          v474 = *v471;
          v473 = v471[1];
          if (v473 >= *v471)
          {
            v470 = v266 + 3;
            if (v474 < v468)
            {
              v468 = *v471;
              v269 = v471;
            }
            if (v473 >= *v267)
              v267 = v470;
            v469 = v471 + 2;
            v266 = v471;
            if (v471 + 2 == v1069[1])
              goto LABEL_397;
          }
          else
          {
            v468 = *v269;
            if (v473 < *v269)
            {
              v468 = v471[1];
              v269 = v472;
            }
            if (v474 >= *v267)
              v267 = v471;
            v469 = v471 + 2;
            v266 = v471;
            if (v471 + 2 == v1069[1])
              goto LABEL_397;
          }
        }
        if (*v471 >= *v269)
        {
          if (*v471 >= *v267)
            v267 = v471;
        }
        else
        {
          v269 = v471;
        }
      }
    }
LABEL_397:
    v951 = v252;
    v270 = 0;
    v271 = 0;
    v272 = 0;
    v273 = 0;
    v274 = *v254;
    v275 = 0;
    v276 = *v269;
    v277 = *v267;
    v278 = *v256 + (float)((float)(v274 - *v256) * 0.5);
    v1044 = 0;
    v1042 = 0u;
    *(_OWORD *)v1043 = 0u;
    v279 = v276 + (float)((float)(v277 - v276) * 0.5);
    *(_OWORD *)v1040 = 0u;
    *(_OWORD *)v1041 = 0u;
    v1039 = 0u;
    memset(v1038, 0, sizeof(v1038));
    v1037 = 0;
    v1035 = 0u;
    *(_OWORD *)v1036 = 0u;
    *(_OWORD *)v1033 = 0u;
    *(_OWORD *)v1034 = 0u;
    *(_OWORD *)v1031 = 0u;
    v1032 = 0u;
    *(_OWORD *)v1030 = 0u;
    v1029 = 0;
    v1027 = 0u;
    *(_OWORD *)v1028 = 0u;
    *(_OWORD *)v1025 = 0u;
    *(_OWORD *)v1026 = 0u;
    *(_OWORD *)v1023 = 0u;
    v1024 = 0u;
    *(_OWORD *)__src = 0u;
    v1105[1] = 0;
    v1105[0] = 0;
    __p[0] = 0;
    memset(v1098, 0, 24);
    memset(v1005, 0, 24);
    v1019 = 0;
    v1020 = 0;
    v1021 = 0;
    v280 = (__n128)xmmword_208235350;
    while (1)
    {
      v281 = *(_QWORD *)v1098;
      *(_QWORD *)&v1098[8] = *(_QWORD *)v1098;
      *(_QWORD *)&v1005[8] = 0;
      v1020 = 0;
      v959 = v275;
      v282 = 3 * v275;
      v283 = &v1076[v282];
      v284 = &v1069[v282];
      v285 = (char *)&v1061 + v282 * 8;
      v286 = &v1054[v282];
      v287 = (float *)*v283;
      v289 = (float *)*v284;
      v288 = (float *)v284[1];
      v291 = *(unsigned __int8 **)v285;
      v290 = (unsigned __int8 *)*((_QWORD *)v285 + 1);
      v292 = *v286;
      v982 = v283[1];
      v966 = v290;
      v970 = v288;
      v294 = *v283 == v982 && v289 == v288 && v291 == v290;
      v962 = v286[1];
      if (!v294 || v292 != v286[1])
      {
        v296 = v289;
        v999 = 0;
        while (1)
        {
          v995 = v292;
          v986 = v272;
          v989 = v296;
          v280.n128_f32[0] = atan2f(*v287 - v278, *v296 - v279) * 57.296;
          if (v280.n128_f32[0] < 0.0)
            v280.n128_f32[0] = v280.n128_f32[0] + 360.0;
          if (v280.n128_f32[0] >= 0.001)
            v297 = v280.n128_f32[0];
          else
            v297 = 360.0;
          v298 = *v291;
          LOBYTE(v0) = *v292;
          v299 = *((float *)v993 + 26);
          v300 = *(_BYTE **)&v1098[8];
          if (*(_QWORD *)&v1098[8] < *(_QWORD *)&v1098[16])
          {
            v301 = v287;
            **(float **)&v1098[8] = v297;
            v302 = v999;
            *(_QWORD *)&v1098[8] = v300 + 4;
            if (v999 != v273 << 6)
              goto LABEL_465;
            goto LABEL_418;
          }
          v978 = v291;
          v305 = v271;
          v306 = v270;
          v307 = v273;
          v308 = *(_BYTE **)v1098;
          v309 = *(_QWORD *)&v1098[8] - *(_QWORD *)v1098;
          v310 = (uint64_t)(*(_QWORD *)&v1098[8] - *(_QWORD *)v1098) >> 2;
          v311 = v310 + 1;
          if ((unint64_t)(v310 + 1) >> 62)
            sub_207D0CD58();
          v312 = *(_QWORD *)&v1098[16] - *(_QWORD *)v1098;
          if ((uint64_t)(*(_QWORD *)&v1098[16] - *(_QWORD *)v1098) >> 1 > v311)
            v311 = v312 >> 1;
          v313 = (unint64_t)v312 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v311;
          v974 = v298;
          if (v313)
          {
            if (v313 >> 62)
              sub_207CA3AB8();
            v314 = (char *)operator new(4 * v313);
            v301 = v287;
            v315 = (float *)&v314[4 * v310];
            *v315 = v297;
            v316 = (uint64_t)(v315 + 1);
            v317 = v300 - v308;
            if (v300 == v308)
            {
LABEL_456:
              v273 = v307;
              v270 = v306;
              v271 = v305;
              goto LABEL_462;
            }
          }
          else
          {
            v301 = v287;
            v314 = 0;
            v315 = (float *)(4 * v310);
            *(float *)(4 * v310) = v297;
            v316 = 4 * v310 + 4;
            v317 = v300 - v308;
            if (v300 == v308)
              goto LABEL_456;
          }
          v318 = v317 - 4;
          if (v318 < 0x2C)
            break;
          v328 = v300 - v314 - v309;
          v273 = v307;
          v270 = v306;
          v271 = v305;
          if (v328 < 0x20)
            goto LABEL_461;
          v329 = (v318 >> 2) + 1;
          v330 = 4 * (v329 & 0x7FFFFFFFFFFFFFF8);
          v331 = &v300[-v330];
          v315 = (float *)((char *)v315 - v330);
          v332 = (__n128 *)&v314[4 * v310 - 16];
          v333 = (__n128 *)(v300 - 16);
          v334 = v329 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v280 = *v333;
            v332[-1] = v333[-1];
            *v332 = v280;
            v332 -= 2;
            v333 -= 2;
            v334 -= 8;
          }
          while (v334);
          v300 = v331;
          if (v329 != (v329 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_461;
LABEL_462:
          *(_QWORD *)v1098 = v315;
          *(_QWORD *)&v1098[8] = v316;
          *(_QWORD *)&v1098[16] = &v314[4 * v313];
          if (v308)
            operator delete(v308);
          v291 = v978;
          v302 = v999;
          v298 = v974;
          *(_QWORD *)&v1098[8] = v316;
          if (v999 != v273 << 6)
          {
LABEL_465:
            v303 = v301;
            goto LABEL_466;
          }
LABEL_418:
          if ((uint64_t)(v302 + 1) < 0)
            goto LABEL_1507;
          v303 = v301;
          if (v302 >= 0x3FFFFFFFFFFFFFFFLL)
          {
            v304 = 0x7FFFFFFFFFFFFFFFLL;
            if (v302 >= 0x7FFFFFFFFFFFFFFFLL)
            {
              v302 = -1;
              goto LABEL_466;
            }
          }
          else
          {
            v304 = v273 << 7;
            if (v273 << 7 <= v302 + 64)
              v304 = v302 + 64;
            if (v304 < 0)
LABEL_1507:
              sub_207D159B0();
          }
          v319 = v298;
          v273 = ((unint64_t)(v304 - 1) >> 6) + 1;
          v320 = operator new(8 * v273);
          v302 = v999;
          v321 = (v999 - 1) >> 6;
          if (v999 < 0x41)
            v321 = 0;
          v270 = v320;
          v320[v321] = 0;
          if (v999 > 0x3F || (v999 & 0x3F) != 0)
          {
            v322 = 0;
            v323 = 0;
            v324 = v320;
            v325 = v986;
            do
            {
              v326 = 1 << v322;
              if (((*v325 >> v323) & 1) != 0)
                v327 = *v324 | v326;
              else
                v327 = *v324 & ~v326;
              *v324 = v327;
              v325 += v323 == 63;
              if (v323 == 63)
                v323 = 0;
              else
                ++v323;
              v324 += v322 == 63;
              if (v322 == 63)
                v322 = 0;
              else
                ++v322;
            }
            while (v323 != (v999 & 0x3F) || v325 != &v986[v999 >> 6]);
          }
          *(_QWORD *)v1005 = v320;
          *(_QWORD *)&v1005[16] = v273;
          if (v986)
          {
            operator delete(v986);
            v302 = *(_QWORD *)&v1005[8];
            v270 = *(_QWORD **)v1005;
          }
          v271 = v270;
          v298 = v319;
LABEL_466:
          v336 = v302 >> 6;
          v337 = 1 << v302;
          v338 = v302 + 1;
          *(_QWORD *)&v1005[8] = v302 + 1;
          if (v298 == 1)
          {
            v339 = v995;
            v271[v336] |= v337;
            v341 = v1020;
            v340 = v1021;
            v342 = v1020 >> 6;
            if (v1020 != v1021 << 6)
              goto LABEL_496;
          }
          else
          {
            v339 = v995;
            v271[v336] &= ~v337;
            v341 = v1020;
            v340 = v1021;
            v342 = v1020 >> 6;
            if (v1020 != v1021 << 6)
              goto LABEL_496;
          }
          if ((uint64_t)(v341 + 1) < 0)
            goto LABEL_1508;
          if (v341 <= 0x3FFFFFFFFFFFFFFELL)
          {
            v343 = v340 << 7;
            if (v343 <= (v341 & 0xFFFFFFFFFFFFFFC0) + 64)
              v343 = (v341 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v341 >= v343)
              goto LABEL_496;
            if ((v343 & 0x8000000000000000) != 0)
LABEL_1508:
              sub_207D159B0();
LABEL_478:
            v344 = v291;
            v345 = ((v343 - 1) >> 6) + 1;
            v346 = (uint64_t *)operator new(8 * v345);
            v347 = v1019;
            v348 = (v341 - 1) >> 6;
            if (v341 < 0x41)
              v348 = 0;
            v346[v348] = 0;
            if (v341 > 0x3F || (v341 & 0x3F) != 0)
            {
              v349 = 0;
              v350 = 0;
              v351 = v346;
              v352 = v347;
              do
              {
                v353 = 1 << v349;
                if (((*v352 >> v350) & 1) != 0)
                  v354 = *v351 | v353;
                else
                  v354 = *v351 & ~v353;
                *v351 = v354;
                v352 += v350 == 63;
                if (v350 == 63)
                  v350 = 0;
                else
                  ++v350;
                v351 += v349 == 63;
                if (v349 == 63)
                  v349 = 0;
                else
                  ++v349;
              }
              while (v350 != (v341 & 0x3F) || v352 != &v347[v342]);
            }
            v1019 = v346;
            v1021 = v345;
            v291 = v344;
            v339 = v995;
            if (v347)
              operator delete(v347);
            goto LABEL_496;
          }
          v343 = 0x7FFFFFFFFFFFFFFFLL;
          if (v341 < 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_478;
LABEL_496:
          v280.n128_f32[0] = (float)v0 / 255.0;
          v1020 = v341 + 1;
          v355 = 1 << v341;
          v999 = v338;
          if (v280.n128_f32[0] <= v299)
            v356 = *((_QWORD *)v1019 + v342) | v355;
          else
            v356 = *((_QWORD *)v1019 + v342) & ~v355;
          *((_QWORD *)v1019 + v342) = v356;
          v287 = v303 + 1;
          v296 = v989 + 1;
          ++v291;
          v292 = v339 + 1;
          v272 = v271;
          if (v287 == v982)
          {
            v272 = v271;
            if (v296 == v970)
            {
              v272 = v271;
              if (v291 == v966)
              {
                v272 = v271;
                if (v292 == v962)
                {
                  v357 = *(_QWORD *)&v1098[8];
                  v281 = *(_QWORD *)v1098;
                  v358 = v271;
                  v272 = v271;
                  goto LABEL_506;
                }
              }
            }
          }
        }
        v273 = v307;
        v270 = v306;
        v271 = v305;
        do
        {
LABEL_461:
          v335 = *((_DWORD *)v300 - 1);
          v300 -= 4;
          *((_DWORD *)v315-- - 1) = v335;
        }
        while (v300 != v308);
        goto LABEL_462;
      }
      v358 = v271;
      v357 = *(_QWORD *)v1098;
LABEL_506:
      v359 = (v357 - v281) >> 2;
      v360 = (unsigned int *)v1105[1];
      v361 = (unsigned int *)v1105[0];
      v362 = ((char *)v1105[1] - (char *)v1105[0]) >> 2;
      if (v359 <= v362)
      {
        if (v359 < v362)
        {
          v360 = (unsigned int *)((char *)v1105[0] + 4 * v359);
          v1105[1] = v360;
        }
      }
      else
      {
        sub_207CB9B90((uint64_t)v1105, v359 - v362);
        v361 = (unsigned int *)v1105[0];
        v360 = (unsigned int *)v1105[1];
      }
      if (v361 != v360)
      {
        v363 = (char *)v360 - (char *)v361 - 4;
        if (v363 < 0x1C)
        {
          LODWORD(v364) = 0;
          v365 = v361;
          do
          {
LABEL_516:
            *v365++ = v364;
            LODWORD(v364) = v364 + 1;
          }
          while (v365 != v360);
          goto LABEL_517;
        }
        v366 = (v363 >> 2) + 1;
        v364 = v366 & 0x7FFFFFFFFFFFFFF8;
        v365 = &v361[v366 & 0x7FFFFFFFFFFFFFF8];
        v367 = (int32x4_t *)(v361 + 4);
        v368 = v366 & 0x7FFFFFFFFFFFFFF8;
        v280 = (__n128)xmmword_208235350;
        v369.i64[0] = 0x400000004;
        v369.i64[1] = 0x400000004;
        v370.i64[0] = 0x800000008;
        v370.i64[1] = 0x800000008;
        do
        {
          v367[-1] = (int32x4_t)v280;
          *v367 = vaddq_s32((int32x4_t)v280, v369);
          v280 = (__n128)vaddq_s32((int32x4_t)v280, v370);
          v367 += 2;
          v368 -= 8;
        }
        while (v368);
        if (v366 != v364)
          goto LABEL_516;
      }
LABEL_517:
      v957 = v273;
      v1097 = (uint64_t *)v1098;
      if ((char *)v360 - (char *)v361 < 513)
      {
LABEL_521:
        sub_207DD9654(v361, v360, &v1097, v360 - v361, 0, 0, v280);
        v373 = (unsigned int *)v1105[0];
        v374 = (unsigned int *)v1105[1];
        v375 = (unsigned int *)v1105[0];
        v273 = v957;
        if (v1105[0] == v1105[1])
          goto LABEL_534;
LABEL_524:
        v377 = *(_QWORD *)v1098;
        v378 = v373 + 1;
        do
        {
          if (v378 == v374)
          {
            v375 = v374;
            goto LABEL_534;
          }
          v379 = *(v378 - 1);
          v380 = *(float *)(*(_QWORD *)v1098 + 4 * *v378++);
        }
        while (*(float *)(*(_QWORD *)v1098 + 4 * v379) != v380);
        v381 = v378 - 2;
        while (v378 != v374)
        {
          v382 = *v378;
          if (*(float *)(v377 + 4 * v379) != *(float *)(v377 + 4 * v382))
          {
            v381[1] = v382;
            ++v381;
            v379 = v382;
          }
          ++v378;
        }
        v375 = v381 + 1;
        goto LABEL_534;
      }
      v371 = v360 - v361;
      while (1)
      {
        v372 = (char *)operator new(4 * v371, MEMORY[0x24BEDB6B8]);
        if (v372)
          break;
        v62 = v371 > 1;
        v371 >>= 1;
        if (!v62)
          goto LABEL_521;
      }
      v376 = v372;
      sub_207DD9654(v361, v360, &v1097, v360 - v361, v372, v371, v280);
      operator delete(v376);
      v373 = (unsigned int *)v1105[0];
      v374 = (unsigned int *)v1105[1];
      v375 = (unsigned int *)v1105[0];
      v273 = v957;
      if (v1105[0] != v1105[1])
        goto LABEL_524;
LABEL_534:
      v383 = v959;
      v967 = v375;
      v384 = (char *)v375 - (char *)v373;
      v385 = v375 - v373;
      v990 = &v1038[3 * v959 + 2];
      v975 = &v1038[3 * v959];
      v386 = *v975;
      if (v385 > ((_BYTE *)*v990 - (_BYTE *)*v975) >> 2)
      {
        if ((v384 & 0x8000000000000000) != 0)
          sub_207D0CD58();
        v387 = &v1038[3 * v959];
        v390 = v387[1];
        v388 = (char **)(v387 + 1);
        v389 = v390;
        v391 = (char *)operator new(v384);
        v392 = v390 - v386;
        v393 = &v391[(v390 - v386) & 0xFFFFFFFFFFFFFFFCLL];
        v394 = v393;
        if (v390 != v386)
        {
          if ((unint64_t)(v392 - 4) < 0x2C)
          {
            v394 = &v391[(v389 - v386) & 0xFFFFFFFFFFFFFFFCLL];
            goto LABEL_543;
          }
          v394 = &v391[(v389 - v386) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(v389 - &v391[v392 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
            goto LABEL_1532;
          v395 = v392 >> 2;
          v396 = ((unint64_t)(v392 - 4) >> 2) + 1;
          v397 = 4 * (v396 & 0x7FFFFFFFFFFFFFF8);
          v398 = &v389[-v397];
          v394 = &v393[-v397];
          v399 = &v391[4 * v395 - 16];
          v400 = (__int128 *)(v389 - 16);
          v401 = v396 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v402 = *v400;
            *((_OWORD *)v399 - 1) = *(v400 - 1);
            *(_OWORD *)v399 = v402;
            v399 -= 32;
            v400 -= 2;
            v401 -= 8;
          }
          while (v401);
          v389 = v398;
          if (v396 != (v396 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1532:
            do
            {
LABEL_543:
              v403 = *((_DWORD *)v389 - 1);
              v389 -= 4;
              *((_DWORD *)v394 - 1) = v403;
              v394 -= 4;
            }
            while (v389 != v386);
          }
        }
        *v975 = v394;
        *v388 = v393;
        *v990 = &v391[4 * v385];
        v383 = v959;
        if (v386)
        {
          operator delete(v386);
          v383 = v959;
        }
      }
      v963 = &v1030[3 * v383];
      v404 = v383;
      sub_207D1C104((uint64_t)v963, v385);
      v987 = &__src[3 * v404];
      sub_207D1C104((uint64_t)v987, v385);
      v405 = v967;
      v271 = v358;
      if (v373 != v967)
      {
        v406 = v963;
        v407 = &v1030[3 * v959];
        v996 = (unint64_t *)(v407 + 1);
        v1000 = &v1038[3 * v959 + 1];
        v408 = &__src[3 * v959];
        v979 = (unint64_t *)(v408 + 2);
        v983 = (unint64_t *)(v407 + 2);
        v971 = (unint64_t *)(v408 + 1);
        while (1)
        {
          v409 = *v373;
          v410 = *(_QWORD *)v1098;
          v411 = (char *)*v1000;
          if (*v1000 < *v990)
          {
            v280.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v1098 + 4 * v409);
            *(_DWORD *)v411 = v280.n128_u32[0];
            v412 = (uint64_t)(v411 + 4);
            goto LABEL_572;
          }
          v413 = v270;
          v414 = (char *)*v975;
          v415 = v411 - (_BYTE *)*v975;
          v416 = v415 >> 2;
          v417 = (v415 >> 2) + 1;
          if (v417 >> 62)
            sub_207D0CD58();
          v418 = (_BYTE *)*v990 - v414;
          if (v418 >> 1 > v417)
            v417 = v418 >> 1;
          if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL)
            v419 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v419 = v417;
          if (v419)
          {
            if (v419 >> 62)
              sub_207CA3AB8();
            v420 = operator new(4 * v419);
            v421 = &v420[4 * v416];
            v280.n128_u32[0] = *(_DWORD *)(v410 + 4 * v409);
            *v421 = v280.n128_u32[0];
            v412 = (uint64_t)(v421 + 1);
            v422 = v411 - v414;
            if (v411 == v414)
            {
LABEL_563:
              v405 = v967;
              goto LABEL_569;
            }
          }
          else
          {
            v420 = 0;
            v421 = (_DWORD *)(4 * v416);
            v280.n128_u32[0] = *(_DWORD *)(*(_QWORD *)v1098 + 4 * v409);
            *(_DWORD *)(4 * v416) = v280.n128_u32[0];
            v412 = 4 * v416 + 4;
            v422 = v411 - v414;
            if (v411 == v414)
              goto LABEL_563;
          }
          v423 = v422 - 4;
          if (v423 >= 0x2C)
          {
            v424 = v411 - v420 - v415;
            v405 = v967;
            if (v424 >= 0x20)
            {
              v425 = (v423 >> 2) + 1;
              v426 = 4 * (v425 & 0x7FFFFFFFFFFFFFF8);
              v427 = &v411[-v426];
              v421 = (_DWORD *)((char *)v421 - v426);
              v428 = (__n128 *)&v420[4 * v416 - 16];
              v429 = (__n128 *)(v411 - 16);
              v430 = v425 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v280 = *v429;
                v428[-1] = v429[-1];
                *v428 = v280;
                v428 -= 2;
                v429 -= 2;
                v430 -= 8;
              }
              while (v430);
              v411 = v427;
              if (v425 == (v425 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_569;
            }
          }
          else
          {
            v405 = v967;
          }
          do
          {
            v431 = *((_DWORD *)v411 - 1);
            v411 -= 4;
            v280.n128_u32[0] = v431;
            *--v421 = v431;
          }
          while (v411 != v414);
LABEL_569:
          *v975 = v421;
          *v1000 = (void *)v412;
          *v990 = &v420[4 * v419];
          if (v414)
            operator delete(v414);
          v270 = v413;
          v406 = v963;
LABEL_572:
          *v1000 = (void *)v412;
          v432 = v270[v409 >> 6];
          v433 = *v996;
          if (*v996 != *v983 << 6)
            goto LABEL_600;
          if ((uint64_t)(v433 + 1) < 0)
            goto LABEL_1505;
          if (v433 > 0x3FFFFFFFFFFFFFFELL)
          {
            v434 = 0x7FFFFFFFFFFFFFFFLL;
            if (v433 >= 0x7FFFFFFFFFFFFFFFLL)
            {
              v433 = -1;
              goto LABEL_600;
            }
            goto LABEL_581;
          }
          v434 = *v983 << 7;
          if (v434 <= (v433 & 0xFFFFFFFFFFFFFFC0) + 64)
            v434 = (v433 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v433 < v434)
          {
            if ((v434 & 0x8000000000000000) != 0)
LABEL_1505:
              sub_207D159B0();
LABEL_581:
            v435 = ((v434 - 1) >> 6) + 1;
            v436 = (uint64_t *)operator new(8 * v435);
            v437 = *v406;
            v438 = (v433 - 1) >> 6;
            if (v433 < 0x41)
              v438 = 0;
            v436[v438] = 0;
            if (v433 > 0x3F || (v433 & 0x3F) != 0)
            {
              v439 = 0;
              v440 = 0;
              v441 = v436;
              v442 = v437;
              do
              {
                v443 = 1 << v439;
                if (((*v442 >> v440) & 1) != 0)
                  v444 = *v441 | v443;
                else
                  v444 = *v441 & ~v443;
                *v441 = v444;
                v442 += v440 == 63;
                if (v440 == 63)
                  v440 = 0;
                else
                  ++v440;
                v441 += v439 == 63;
                if (v439 == 63)
                  v439 = 0;
                else
                  ++v439;
              }
              while (v440 != (v433 & 0x3F) || v442 != &v437[v433 >> 6]);
            }
            *v406 = v436;
            *v983 = v435;
            if (v437)
            {
              operator delete(v437);
              v433 = *v996;
            }
          }
LABEL_600:
          *v996 = v433 + 1;
          v445 = *v406;
          v446 = v433 >> 6;
          v447 = 1 << v433;
          if ((v432 & (1 << v409)) != 0)
            v448 = v445[v446] | v447;
          else
            v448 = v445[v446] & ~v447;
          v445[v446] = v448;
          v449 = *((_QWORD *)v1019 + (v409 >> 6));
          v450 = *v971;
          if (*v971 == *v979 << 6)
          {
            if ((uint64_t)(v450 + 1) < 0)
              goto LABEL_1506;
            if (v450 <= 0x3FFFFFFFFFFFFFFELL)
            {
              v451 = *v979 << 7;
              if (v451 <= (v450 & 0xFFFFFFFFFFFFFFC0) + 64)
                v451 = (v450 & 0xFFFFFFFFFFFFFFC0) + 64;
              if (v450 >= v451)
                goto LABEL_631;
              if ((v451 & 0x8000000000000000) != 0)
LABEL_1506:
                sub_207D159B0();
LABEL_612:
              v452 = ((v451 - 1) >> 6) + 1;
              v453 = (uint64_t *)operator new(8 * v452);
              v454 = *v987;
              v455 = (v450 - 1) >> 6;
              if (v450 < 0x41)
                v455 = 0;
              v453[v455] = 0;
              if (v450 > 0x3F || (v450 & 0x3F) != 0)
              {
                v456 = 0;
                v457 = 0;
                v458 = v453;
                v459 = v454;
                do
                {
                  v460 = 1 << v456;
                  if (((*v459 >> v457) & 1) != 0)
                    v461 = *v458 | v460;
                  else
                    v461 = *v458 & ~v460;
                  *v458 = v461;
                  v459 += v457 == 63;
                  if (v457 == 63)
                    v457 = 0;
                  else
                    ++v457;
                  v458 += v456 == 63;
                  if (v456 == 63)
                    v456 = 0;
                  else
                    ++v456;
                }
                while (v457 != (v450 & 0x3F) || v459 != &v454[v450 >> 6]);
              }
              *v987 = v453;
              *v979 = v452;
              if (v454)
              {
                operator delete(v454);
                v450 = *v971;
              }
              goto LABEL_631;
            }
            v451 = 0x7FFFFFFFFFFFFFFFLL;
            if (v450 < 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_612;
            v450 = -1;
          }
LABEL_631:
          *v971 = v450 + 1;
          v462 = *v987;
          v463 = v450 >> 6;
          v464 = 1 << v450;
          if ((v449 & (1 << v409)) != 0)
          {
            v462[v463] |= v464;
            if (++v373 == v405)
            {
LABEL_398:
              v271 = v270;
              v272 = v270;
              v273 = v957;
              break;
            }
          }
          else
          {
            v462[v463] &= ~v464;
            if (++v373 == v405)
              goto LABEL_398;
          }
        }
      }
      v275 = v959 + 1;
      if (v959 == 4)
      {
        if (v1019)
          operator delete(v1019);
        if (*(_QWORD *)v1005)
          operator delete(*(void **)v1005);
        if (*(_QWORD *)v1098)
        {
          *(_QWORD *)&v1098[8] = *(_QWORD *)v1098;
          operator delete(*(void **)v1098);
        }
        if (v1105[0])
        {
          v1105[1] = v1105[0];
          operator delete(v1105[0]);
        }
        v1017 = 0u;
        v1018 = 0u;
        v1015 = 0u;
        *(_OWORD *)v1016 = 0u;
        *(_OWORD *)v1013 = 0u;
        v1014 = 0u;
        v1011 = 0u;
        v1012 = 0u;
        v1009 = 0u;
        *(_OWORD *)v1010 = 0u;
        *(_OWORD *)v1007 = 0u;
        *(_OWORD *)v1008 = 0u;
        v1006 = 0u;
        memset(v1005, 0, sizeof(v1005));
        sub_207DDE2B0((uint64_t)v1038, (uint64_t)v1105);
        v465 = *(void ***)&v1005[8];
        *((_QWORD *)&v1006 + 1) = 0;
        v466 = *(_QWORD *)&v1005[16] - *(_QWORD *)&v1005[8];
        if (*(_QWORD *)&v1005[16] - *(_QWORD *)&v1005[8] >= 0x11uLL)
        {
          do
          {
            operator delete(*v465);
            v465 = (void **)(*(_QWORD *)&v1005[8] + 8);
            *(_QWORD *)&v1005[8] = v465;
            v466 = *(_QWORD *)&v1005[16] - (_QWORD)v465;
          }
          while (*(_QWORD *)&v1005[16] - (_QWORD)v465 > 0x10uLL);
        }
        if (v466 >> 3 == 1)
        {
          v467 = 512;
LABEL_680:
          *(_QWORD *)&v1006 = v467;
        }
        else if (v466 >> 3 == 2)
        {
          v467 = 1024;
          goto LABEL_680;
        }
        sub_207DDD980(v1005);
        if (*(_QWORD *)&v1005[16] != *(_QWORD *)&v1005[8])
          *(_QWORD *)&v1005[16] += (*(_QWORD *)&v1005[8] - *(_QWORD *)&v1005[16] + 7) & 0xFFFFFFFFFFFFFFF8;
        sub_207DDDA50((uint64_t)v1005);
        *(_OWORD *)v1005 = *(_OWORD *)v1105;
        *(_OWORD *)&v1005[16] = *(_OWORD *)__p;
        v1006 = v1107;
        sub_207DDE2B0((uint64_t)&v1038[3], (uint64_t)v1105);
        v476 = (void **)v1007[1];
        *((_QWORD *)&v1009 + 1) = 0;
        v477 = (char *)v1008[0] - (char *)v1007[1];
        if ((void *)((char *)v1008[0] - (char *)v1007[1]) >= (void *)0x11)
        {
          do
          {
            operator delete(*v476);
            v476 = (void **)((char *)v1007[1] + 8);
            v1007[1] = v476;
            v477 = (char *)v1008[0] - (char *)v476;
          }
          while ((void *)((char *)v1008[0] - (char *)v476) > (void *)0x10);
        }
        if (v477 >> 3 == 1)
        {
          v478 = 512;
LABEL_689:
          *(_QWORD *)&v1009 = v478;
        }
        else if (v477 >> 3 == 2)
        {
          v478 = 1024;
          goto LABEL_689;
        }
        sub_207DDD980(v1007);
        if (v1008[0] != v1007[1])
          v1008[0] = (char *)v1008[0] + (((char *)v1007[1] - (char *)v1008[0] + 7) & 0xFFFFFFFFFFFFFFF8);
        sub_207DDDA50((uint64_t)v1007);
        *(_OWORD *)v1007 = *(_OWORD *)v1105;
        *(_OWORD *)v1008 = *(_OWORD *)__p;
        v1009 = v1107;
        sub_207DDE2B0((uint64_t)v1040, (uint64_t)v1105);
        v479 = (void **)v1010[1];
        *((_QWORD *)&v1012 + 1) = 0;
        v480 = v1011 - (unint64_t)v1010[1];
        if ((unint64_t)v1011 - (unint64_t)v1010[1] >= 0x11)
        {
          do
          {
            operator delete(*v479);
            v479 = (void **)((char *)v1010[1] + 8);
            v1010[1] = v479;
            v480 = v1011 - (_QWORD)v479;
          }
          while ((_QWORD)v1011 - (_QWORD)v479 > 0x10uLL);
        }
        if (v480 >> 3 == 1)
        {
          v481 = 512;
LABEL_698:
          *(_QWORD *)&v1012 = v481;
        }
        else if (v480 >> 3 == 2)
        {
          v481 = 1024;
          goto LABEL_698;
        }
        sub_207DDD980(v1010);
        if ((void *)v1011 != v1010[1])
          *(_QWORD *)&v1011 = v1011 + (((unint64_t)v1010[1] - v1011 + 7) & 0xFFFFFFFFFFFFFFF8);
        sub_207DDDA50((uint64_t)v1010);
        *(_OWORD *)v1010 = *(_OWORD *)v1105;
        v1011 = *(_OWORD *)__p;
        v1012 = v1107;
        sub_207DDE2B0((uint64_t)&v1041[1], (uint64_t)v1105);
        v482 = (void **)v1013[1];
        *((_QWORD *)&v1015 + 1) = 0;
        v483 = v1014 - (unint64_t)v1013[1];
        if ((unint64_t)v1014 - (unint64_t)v1013[1] >= 0x11)
        {
          do
          {
            operator delete(*v482);
            v482 = (void **)((char *)v1013[1] + 8);
            v1013[1] = v482;
            v483 = v1014 - (_QWORD)v482;
          }
          while ((_QWORD)v1014 - (_QWORD)v482 > 0x10uLL);
        }
        if (v483 >> 3 == 1)
        {
          v484 = 512;
LABEL_707:
          *(_QWORD *)&v1015 = v484;
        }
        else if (v483 >> 3 == 2)
        {
          v484 = 1024;
          goto LABEL_707;
        }
        sub_207DDD980(v1013);
        if ((void *)v1014 != v1013[1])
          *(_QWORD *)&v1014 = v1014 + (((unint64_t)v1013[1] - v1014 + 7) & 0xFFFFFFFFFFFFFFF8);
        sub_207DDDA50((uint64_t)v1013);
        *(_OWORD *)v1013 = *(_OWORD *)v1105;
        v1014 = *(_OWORD *)__p;
        v1015 = v1107;
        sub_207DDE2B0((uint64_t)v1043, (uint64_t)v1105);
        v485 = (void **)v1016[1];
        *((_QWORD *)&v1018 + 1) = 0;
        v486 = v1017 - (unint64_t)v1016[1];
        if ((unint64_t)v1017 - (unint64_t)v1016[1] >= 0x11)
        {
          do
          {
            operator delete(*v485);
            v485 = (void **)((char *)v1016[1] + 8);
            v1016[1] = v485;
            v486 = v1017 - (_QWORD)v485;
          }
          while ((_QWORD)v1017 - (_QWORD)v485 > 0x10uLL);
        }
        if (v486 >> 3 == 1)
        {
          v487 = 512;
LABEL_716:
          *(_QWORD *)&v1018 = v487;
        }
        else if (v486 >> 3 == 2)
        {
          v487 = 1024;
          goto LABEL_716;
        }
        sub_207DDD980(v1016);
        if ((void *)v1017 != v1016[1])
          *(_QWORD *)&v1017 = v1017 + (((unint64_t)v1016[1] - v1017 + 7) & 0xFFFFFFFFFFFFFFF8);
        sub_207DDDA50((uint64_t)v1016);
        v488 = 0;
        *(_OWORD *)v1016 = *(_OWORD *)v1105;
        v1017 = *(_OWORD *)__p;
        v1018 = v1107;
        do
        {
          sub_207DD5D44(&v1005[48 * v488], (uint64_t)&v993[23 * v488 + 184], (uint64_t)&v993[23 * v488 + 414], 1);
          v494 = &v1038[3 * v488];
          v495 = (int8x16_t *)&v993[23 * v488 + 529];
          sub_207DD66A8();
          v496 = &__src[3 * v488];
          v497 = (float *)*v494;
          v498 = (float *)v494[1];
          v500 = *v496;
          v499 = (unint64_t)v496[1];
          bzero(v1105, 0x1680uLL);
          bzero(v1098, 0x1680uLL);
          v501 = 0;
          v502 = &v500[v499 >> 6];
          while (v497 != v498 || v500 != v502 || v501 != (v499 & 0x3F))
          {
            v503 = *v497++;
            v504 = 4 * (vcvts_n_u32_f32(v503, 2uLL) % 0x5A0);
            ++*(_DWORD *)((char *)v1105 + v504);
            *(_DWORD *)&v1098[v504] += (*v500 >> v501) & 1;
            v500 += v501 == 63;
            if (v501 == 63)
              v501 = 0;
            else
              ++v501;
          }
          v505 = 0;
          v506 = (int8x16_t *)&v993[23 * v488 + 644];
          v506[11].i64[0] = (unint64_t)v506[11].u32[1] << 32;
          v506[9] = 0u;
          v506[10] = 0u;
          v506[7] = 0u;
          v506[8] = 0u;
          v506[5] = 0u;
          v506[6] = 0u;
          v506[3] = 0u;
          v506[4] = 0u;
          v506[1] = 0u;
          v506[2] = 0u;
          *v506 = 0u;
          do
          {
            v508 = *((_DWORD *)v1105 + v505);
            if (v508)
            {
              v509 = v505 >> 6;
              v510 = 1 << v505;
              if (v508 >= 2 * *(_DWORD *)&v1098[4 * v505])
                v507 = v506->i64[v509] & ~v510;
              else
                v507 = v506->i64[v509] | v510;
              v506->i64[v509] = v507;
            }
            ++v505;
          }
          while (v505 != 1440);
          v489 = vorrq_s8(v506[1], v495[1]);
          *v506 = vorrq_s8(*v506, *v495);
          v506[1] = v489;
          v490 = vorrq_s8(v506[3], v495[3]);
          v506[2] = vorrq_s8(v506[2], v495[2]);
          v506[3] = v490;
          v491 = vorrq_s8(v506[5], v495[5]);
          v506[4] = vorrq_s8(v506[4], v495[4]);
          v506[5] = v491;
          v492 = vorrq_s8(v506[7], v495[7]);
          v506[6] = vorrq_s8(v506[6], v495[6]);
          v506[7] = v492;
          v493 = vorrq_s8(v506[9], v495[9]);
          v506[8] = vorrq_s8(v506[8], v495[8]);
          v506[9] = v493;
          v506[10] = vorrq_s8(v506[10], v495[10]);
          ++v488;
          v506[11].i64[0] |= v495[11].u64[0];
        }
        while (v488 != 5);
        v511 = (void **)v1016[1];
        v512 = (void **)v1017;
        *((_QWORD *)&v1018 + 1) = 0;
        if ((unint64_t)v1017 - (unint64_t)v1016[1] < 0x11)
        {
          v263 = v953;
          v252 = v951;
          v513 = ((unint64_t)v1017 - (unint64_t)v1016[1]) >> 3;
          if (v513 != 1)
            goto LABEL_739;
        }
        else
        {
          v263 = v953;
          v252 = v951;
          do
          {
            operator delete(*v511);
            v512 = (void **)v1017;
            v511 = (void **)((char *)v1016[1] + 8);
            v1016[1] = v511;
          }
          while ((_QWORD)v1017 - (_QWORD)v511 > 0x10uLL);
          v513 = ((_QWORD)v1017 - (_QWORD)v511) >> 3;
          if (v513 != 1)
          {
LABEL_739:
            if (v513 == 2)
            {
              v514 = 1024;
              goto LABEL_743;
            }
            goto LABEL_744;
          }
        }
        v514 = 512;
LABEL_743:
        *(_QWORD *)&v1018 = v514;
LABEL_744:
        if (v511 != v512)
        {
          do
          {
            v515 = *v511++;
            operator delete(v515);
          }
          while (v511 != v512);
          if ((void *)v1017 != v1016[1])
            *(_QWORD *)&v1017 = v1017 + (((unint64_t)v1016[1] - v1017 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v1016[0])
          operator delete(v1016[0]);
        v516 = (void **)v1013[1];
        v517 = (void **)v1014;
        *((_QWORD *)&v1015 + 1) = 0;
        v518 = v1014 - (unint64_t)v1013[1];
        if ((unint64_t)v1014 - (unint64_t)v1013[1] >= 0x11)
        {
          do
          {
            operator delete(*v516);
            v517 = (void **)v1014;
            v516 = (void **)((char *)v1013[1] + 8);
            v1013[1] = v516;
            v518 = v1014 - (_QWORD)v516;
          }
          while ((_QWORD)v1014 - (_QWORD)v516 > 0x10uLL);
        }
        v519 = v518 >> 3;
        if (v519 == 1)
        {
          v520 = 512;
LABEL_756:
          *(_QWORD *)&v1015 = v520;
        }
        else if (v519 == 2)
        {
          v520 = 1024;
          goto LABEL_756;
        }
        if (v516 != v517)
        {
          do
          {
            v521 = *v516++;
            operator delete(v521);
          }
          while (v516 != v517);
          if ((void *)v1014 != v1013[1])
            *(_QWORD *)&v1014 = v1014 + (((unint64_t)v1013[1] - v1014 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v1013[0])
          operator delete(v1013[0]);
        v522 = (void **)v1010[1];
        v523 = (void **)v1011;
        *((_QWORD *)&v1012 + 1) = 0;
        v524 = v1011 - (unint64_t)v1010[1];
        if ((unint64_t)v1011 - (unint64_t)v1010[1] >= 0x11)
        {
          do
          {
            operator delete(*v522);
            v523 = (void **)v1011;
            v522 = (void **)((char *)v1010[1] + 8);
            v1010[1] = v522;
            v524 = v1011 - (_QWORD)v522;
          }
          while ((_QWORD)v1011 - (_QWORD)v522 > 0x10uLL);
        }
        v525 = v524 >> 3;
        if (v525 == 1)
        {
          v526 = 512;
LABEL_769:
          *(_QWORD *)&v1012 = v526;
        }
        else if (v525 == 2)
        {
          v526 = 1024;
          goto LABEL_769;
        }
        if (v522 != v523)
        {
          do
          {
            v527 = *v522++;
            operator delete(v527);
          }
          while (v522 != v523);
          if ((void *)v1011 != v1010[1])
            *(_QWORD *)&v1011 = v1011 + (((unint64_t)v1010[1] - v1011 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v1010[0])
          operator delete(v1010[0]);
        v528 = (void **)v1007[1];
        v529 = (void **)v1008[0];
        *((_QWORD *)&v1009 + 1) = 0;
        v530 = (char *)v1008[0] - (char *)v1007[1];
        if ((void *)((char *)v1008[0] - (char *)v1007[1]) >= (void *)0x11)
        {
          do
          {
            operator delete(*v528);
            v529 = (void **)v1008[0];
            v528 = (void **)((char *)v1007[1] + 8);
            v1007[1] = v528;
            v530 = (char *)v1008[0] - (char *)v528;
          }
          while ((void *)((char *)v1008[0] - (char *)v528) > (void *)0x10);
        }
        v531 = v530 >> 3;
        if (v531 == 1)
        {
          v532 = 512;
LABEL_782:
          *(_QWORD *)&v1009 = v532;
        }
        else if (v531 == 2)
        {
          v532 = 1024;
          goto LABEL_782;
        }
        if (v528 != v529)
        {
          do
          {
            v533 = *v528++;
            operator delete(v533);
          }
          while (v528 != v529);
          if (v1008[0] != v1007[1])
            v1008[0] = (char *)v1008[0] + (((char *)v1007[1] - (char *)v1008[0] + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v1007[0])
          operator delete(v1007[0]);
        v535 = *(void ***)&v1005[16];
        v534 = *(void ***)&v1005[8];
        *((_QWORD *)&v1006 + 1) = 0;
        v536 = *(_QWORD *)&v1005[16] - *(_QWORD *)&v1005[8];
        if (*(_QWORD *)&v1005[16] - *(_QWORD *)&v1005[8] >= 0x11uLL)
        {
          do
          {
            operator delete(*v534);
            v535 = *(void ***)&v1005[16];
            v534 = (void **)(*(_QWORD *)&v1005[8] + 8);
            *(_QWORD *)&v1005[8] = v534;
            v536 = *(_QWORD *)&v1005[16] - (_QWORD)v534;
          }
          while (*(_QWORD *)&v1005[16] - (_QWORD)v534 > 0x10uLL);
        }
        v537 = v536 >> 3;
        if (v537 == 1)
        {
          v538 = 512;
LABEL_795:
          *(_QWORD *)&v1006 = v538;
        }
        else if (v537 == 2)
        {
          v538 = 1024;
          goto LABEL_795;
        }
        if (v534 != v535)
        {
          do
          {
            v539 = *v534++;
            operator delete(v539);
          }
          while (v534 != v535);
          if (*(_QWORD *)&v1005[16] != *(_QWORD *)&v1005[8])
            *(_QWORD *)&v1005[16] += (*(_QWORD *)&v1005[8] - *(_QWORD *)&v1005[16] + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        if (*(_QWORD *)v1005)
          operator delete(*(void **)v1005);
        if (v1028[0])
          operator delete(v1028[0]);
        if (v1026[1])
          operator delete(v1026[1]);
        if (v1025[0])
          operator delete(v1025[0]);
        if (v1023[1])
          operator delete(v1023[1]);
        if (__src[0])
          operator delete(__src[0]);
        if (v1036[0])
          operator delete(v1036[0]);
        if (v1034[1])
          operator delete(v1034[1]);
        if (v1033[0])
          operator delete(v1033[0]);
        if (v1031[1])
          operator delete(v1031[1]);
        if (v1030[0])
          operator delete(v1030[0]);
        if (v1043[0])
        {
          v1043[1] = v1043[0];
          operator delete(v1043[0]);
        }
        if (v1041[1])
        {
          *(void **)&v1042 = v1041[1];
          operator delete(v1041[1]);
        }
        if (v1040[0])
        {
          v1040[1] = v1040[0];
          operator delete(v1040[0]);
        }
        if (v1038[3])
        {
          *(void **)&v1039 = v1038[3];
          operator delete(v1038[3]);
        }
        v475 = v1038[0];
        if (v1038[0])
        {
          v1038[1] = v1038[0];
LABEL_832:
          operator delete(v475);
        }
        goto LABEL_833;
      }
    }
  }
  sub_207CCB5A4((uint64_t)&v1045, "Not enough pixels to update the tag's centroid");
  v263 = v953;
  v1053 = 1;
  sub_207DD5934((uint64_t)v1105, 2u, &v1045);
  *(_OWORD *)v956 = *(_OWORD *)v1105;
  *(_BYTE *)(v956 + 16) = 0;
  *(_BYTE *)(v956 + 112) = 0;
  if ((_BYTE)v1112)
  {
    *(_BYTE *)(v956 + 40) = 0;
    v264 = BYTE8(v1107);
    if (BYTE8(v1107))
    {
      *(_OWORD *)(v956 + 16) = *(_OWORD *)__p;
      *(_QWORD *)(v956 + 32) = v1107;
      __p[1] = 0;
      *(_QWORD *)&v1107 = 0;
      __p[0] = 0;
      *(_BYTE *)(v956 + 40) = 1;
    }
    *(_BYTE *)(v956 + 48) = 0;
    *(_BYTE *)(v956 + 104) = 0;
    if (LOBYTE(v1111[1]))
    {
      v265 = v1109[1];
      *(void **)(v956 + 64) = v1109[0];
      *(_OWORD *)(v956 + 48) = *(_OWORD *)v1108;
      v1108[0] = 0;
      v1108[1] = 0;
      *(_QWORD *)(v956 + 72) = v265;
      *(_OWORD *)(v956 + 80) = v1110;
      *(void **)(v956 + 96) = v1111[0];
      v1109[0] = 0;
      v1110 = 0uLL;
      v1111[0] = 0;
      *(_BYTE *)(v956 + 104) = 1;
    }
    *(_BYTE *)(v956 + 112) = 1;
    *(_BYTE *)(v956 + 120) = 0;
    if (v264 && SBYTE7(v1107) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(v956 + 120) = 0;
  }
  if (v1053)
  {
    if (v1052)
    {
      if (v1051 < 0)
        operator delete(v1050);
      if (v1049 < 0)
        operator delete(v1048);
    }
    if (v1047 && v1046 < 0)
    {
      v475 = (void *)v1045;
      goto LABEL_832;
    }
  }
LABEL_833:
  if (v1059[0])
  {
    v1059[1] = v1059[0];
    operator delete(v1059[0]);
  }
  if (v1057[1])
  {
    *(void **)&v1058 = v1057[1];
    operator delete(v1057[1]);
  }
  if (v1056[0])
  {
    v1056[1] = v1056[0];
    operator delete(v1056[0]);
  }
  if (v1054[3])
  {
    *(void **)&v1055 = v1054[3];
    operator delete(v1054[3]);
  }
  if (v1054[0])
  {
    v1054[1] = v1054[0];
    operator delete(v1054[0]);
  }
  if (v1067[0])
  {
    v1067[1] = v1067[0];
    operator delete(v1067[0]);
  }
  if (v1065[1])
  {
    *(void **)&v1066 = v1065[1];
    operator delete(v1065[1]);
  }
  if (v1064[0])
  {
    v1064[1] = v1064[0];
    operator delete(v1064[0]);
  }
  if (*((_QWORD *)&v1062 + 1))
  {
    *(_QWORD *)&v1063 = *((_QWORD *)&v1062 + 1);
    operator delete(*((void **)&v1062 + 1));
  }
  if ((_QWORD)v1061)
  {
    *((_QWORD *)&v1061 + 1) = v1061;
    operator delete((void *)v1061);
  }
  if (v1074[0])
  {
    v1074[1] = v1074[0];
    operator delete(v1074[0]);
  }
  if (*((_QWORD *)&v1072 + 1))
  {
    *(_QWORD *)&v1073 = *((_QWORD *)&v1072 + 1);
    operator delete(*((void **)&v1072 + 1));
  }
  if (v1071[0])
  {
    v1071[1] = v1071[0];
    operator delete(v1071[0]);
  }
  if (v1069[3])
  {
    *(void **)&v1070 = v1069[3];
    operator delete(v1069[3]);
  }
  if (v1069[0])
  {
    v1069[1] = v1069[0];
    operator delete(v1069[0]);
  }
  if (v1082[0])
  {
    v1082[1] = v1082[0];
    operator delete(v1082[0]);
  }
  if (v1080[1])
  {
    *(void **)&v1081 = v1080[1];
    operator delete(v1080[1]);
  }
  if (v1079[0])
  {
    v1079[1] = v1079[0];
    operator delete(v1079[0]);
  }
  if (v1077[1])
  {
    *(void **)&v1078 = v1077[1];
    operator delete(v1077[1]);
  }
  if (v1076[0])
  {
    v1076[1] = v1076[0];
    operator delete(v1076[0]);
  }
  result = kdebug_trace();
  if (v252 != v952)
    return result;
  v540 = v993;
  if (v263)
  {
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v1105 = 0u;
    LODWORD(v1107) = 733221744;
    kdebug_trace();
    sub_207DCF62C((char *)v993 + 1472, 0x578uLL);
    sub_207DCF62C((char *)v993 + 2392, 0x578uLL);
    sub_207DCF62C((char *)v993 + 3312, 0x578uLL);
    sub_207DCF62C((char *)v993 + 4232, 0x578uLL);
    sub_207DCF62C((char *)v993 + 5152, 0x578uLL);
    sub_207DCF62C((char *)v993 + 1656, 0x578uLL);
    sub_207DCF62C((char *)v993 + 2576, 0x578uLL);
    sub_207DCF62C((char *)v993 + 3496, 0x578uLL);
    sub_207DCF62C((char *)v993 + 4416, 0x578uLL);
    sub_207DCF62C((char *)v993 + 5336, 0x578uLL);
    sub_207DCF62C((char *)v993 + 1840, 0x578uLL);
    sub_207DCF62C((char *)v993 + 2760, 0x578uLL);
    sub_207DCF62C((char *)v993 + 3680, 0x578uLL);
    sub_207DCF62C((char *)v993 + 4600, 0x578uLL);
    sub_207DCF62C((char *)v993 + 5520, 0x578uLL);
    sub_207DCF62C((char *)v993 + 2024, 0x578uLL);
    sub_207DCF62C((char *)v993 + 2944, 0x578uLL);
    sub_207DCF62C((char *)v993 + 3864, 0x578uLL);
    sub_207DCF62C((char *)v993 + 4784, 0x578uLL);
    sub_207DCF62C((char *)v993 + 5704, 0x578uLL);
    sub_207DCF62C((char *)v993 + 2208, 0x578uLL);
    sub_207DCF62C((char *)v993 + 3128, 0x578uLL);
    sub_207DCF62C((char *)v993 + 4048, 0x578uLL);
    sub_207DCF62C((char *)v993 + 4968, 0x578uLL);
    sub_207DCF62C((char *)v993 + 5888, 0x578uLL);
    v541 = 0;
    v542 = 0;
    v543 = 1440;
    do
    {
      v544 = 0;
      v545 = 0;
      do
      {
        v546 = &v540[v544];
        v547 = (int8x16_t *)&v540[v544 + 69];
        v548 = &v540[v544 + 74];
        v549 = *(_OWORD *)&v540[v544 + 192];
        v550 = *(int8x16_t *)&v540[v544 + 190];
        v551 = *(_OWORD *)&v540[v544 + 194];
        v552 = *(int8x16_t *)&v540[v544 + 81];
        v553 = *(_OWORD *)&v540[v544 + 200];
        v554 = *(_OWORD *)&v540[v544 + 198];
        v555 = (int8x16_t *)&v540[v544 + 89];
        v556.i64[0] = LODWORD(v540[v544 + 91]);
        v557 = *(_OWORD *)&v540[v544 + 202];
        v558 = *(_OWORD *)&v540[v544 + 205];
        v559.i64[0] = *((_QWORD *)&v558 + 1);
        v560 = v540[v544 + 187];
        v561 = vbicq_s8((int8x16_t)v551, *(int8x16_t *)&v540[v544 + 79]);
        v562 = vbicq_s8((int8x16_t)v557, *(int8x16_t *)&v540[v544 + 87]);
        v563 = vbicq_s8(v550, *(int8x16_t *)&v540[v544 + 75]);
        v564 = vbicq_s8((int8x16_t)v554, *(int8x16_t *)&v540[v544 + 83]);
        v565 = v540[v544 + 188];
        v566 = vbicq_s8((int8x16_t)v549, *(int8x16_t *)&v540[v544 + 77]);
        v567 = vbicq_s8((int8x16_t)v553, *(int8x16_t *)&v540[v544 + 85]);
        v568 = (int8x8_t)(v560 & ~v540[v544 + 72]);
        v569 = v540[v544 + 186];
        v570 = (int8x8_t)(v565 & ~v540[v544 + 73]);
        v571 = (int8x8_t)(v569 & ~v540[v544 + 71]);
        v572 = v540[v544 + 184];
        v573 = v540[v544 + 185];
        *((_QWORD *)&v575 + 1) = v573;
        *(_QWORD *)&v575 = v572;
        v574 = v575 >> 1;
        v576.i64[0] = v572;
        v577 = *v555;
        v578 = *v547;
        v579 = v571;
        v580 = v550.i64[1];
        *((_QWORD *)&v575 + 1) = v546[204];
        *(_QWORD *)&v575 = *((_QWORD *)&v557 + 1);
        v581 = v575 >> 1;
        v582 = v550.i64[0];
        v556.i64[1] = *v548;
        *((_QWORD *)&v575 + 1) = v558;
        *(_QWORD *)&v575 = v546[204];
        v583 = v575 >> 1;
        v550.i64[0] = v575;
        v584 = *((_OWORD *)v546 + 98);
        v550.i64[1] = v558;
        v559.i64[1] = v546[189];
        v576.i64[1] = v573;
        v585 = vandq_s8(veorq_s8(v556, (int8x16_t)xmmword_208236E40), v559);
        *(int8x8_t *)v559.i8 = vcnt_s8(v570);
        v559.i16[0] = vaddlv_u8(*(uint8x8_t *)v559.i8);
        v586 = (uint8x8_t)vcnt_s8(v568);
        v586.i16[0] = vaddlv_u8(v586);
        v587 = (uint8x8_t)vcnt_s8(v579);
        v587.i16[0] = vaddlv_u8(v587);
        v546[184] = v574;
        v540 = v993;
        *((_QWORD *)&v575 + 1) = v569;
        *(_QWORD *)&v575 = v573;
        v546[185] = v575 >> 1;
        *((_QWORD *)&v575 + 1) = v560;
        *(_QWORD *)&v575 = v569;
        v546[186] = v575 >> 1;
        *((_QWORD *)&v575 + 1) = v565;
        *(_QWORD *)&v575 = v560;
        v546[187] = v575 >> 1;
        *((_QWORD *)&v575 + 1) = v559.i64[1];
        *(_QWORD *)&v575 = v565;
        v588 = v575 >> 1;
        *((_QWORD *)&v575 + 1) = v582;
        *(_QWORD *)&v575 = v559.i64[1];
        v546[188] = v588;
        v546[189] = v575 >> 1;
        v546[190] = (__int128)__PAIR128__(v580, v582) >> 1;
        *((_QWORD *)&v575 + 1) = v549;
        *(_QWORD *)&v575 = v580;
        v589 = v575 >> 1;
        v546[192] = v549 >> 1;
        *((_QWORD *)&v575 + 1) = v551;
        *(_QWORD *)&v575 = *((_QWORD *)&v549 + 1);
        v546[191] = v589;
        v546[193] = v575 >> 1;
        v546[194] = v551 >> 1;
        *((_QWORD *)&v575 + 1) = v584;
        *(_QWORD *)&v575 = *((_QWORD *)&v551 + 1);
        v546[195] = v575 >> 1;
        *((_QWORD *)&v575 + 1) = v554;
        *(_QWORD *)&v575 = *((_QWORD *)&v584 + 1);
        v546[196] = v584 >> 1;
        v546[197] = v575 >> 1;
        v546[198] = v554 >> 1;
        *((_QWORD *)&v575 + 1) = v553;
        *(_QWORD *)&v575 = *((_QWORD *)&v554 + 1);
        v546[199] = v575 >> 1;
        v546[200] = v553 >> 1;
        *((_QWORD *)&v575 + 1) = v557;
        *(_QWORD *)&v575 = *((_QWORD *)&v553 + 1);
        v546[201] = v575 >> 1;
        v546[202] = v557 >> 1;
        v546[203] = v581;
        v546[204] = v583;
        v546[205] = v558 >> 1;
        v546[206] = *((_QWORD *)&v558 + 1) & 0xFFFFFFFF00000000 | (DWORD2(v558) >> 1) | ((_DWORD)v572 << 31);
        v545 += vaddvq_s64(vaddq_s64((int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v585)))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vbicq_s8((int8x16_t)v584, v552))))), vaddq_s64(vaddq_s64((int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v566)))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v567)))), vaddq_s64((int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v563)))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v564)))), (int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v561)))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v562)))))), (int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vbicq_s8(v550, v577))))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vbicq_s8(v576, v578))))))))
              + v587.u32[0]
              + v586.u32[0]
              + (unint64_t)v559.u32[0];
        v544 += 23;
      }
      while (v544 != 115);
      if (v545 < v543)
      {
        v543 = v545;
        v541 = v542;
      }
      ++v542;
    }
    while (v542 != 80);
    sub_207DCF62C((char *)v993 + 1472, v541 + 1360);
    sub_207DCF62C((char *)v993 + 2392, v541);
    sub_207DCF62C((char *)v993 + 3312, v541);
    sub_207DCF62C((char *)v993 + 4232, v541);
    sub_207DCF62C((char *)v993 + 5152, v541);
    sub_207DCF62C((char *)v993 + 1656, v541 + 1360);
    sub_207DCF62C((char *)v993 + 2576, v541);
    sub_207DCF62C((char *)v993 + 3496, v541);
    sub_207DCF62C((char *)v993 + 4416, v541);
    sub_207DCF62C((char *)v993 + 5336, v541);
    sub_207DCF62C((char *)v993 + 1840, v541 + 1360);
    sub_207DCF62C((char *)v993 + 2760, v541);
    sub_207DCF62C((char *)v993 + 3680, v541);
    sub_207DCF62C((char *)v993 + 4600, v541);
    sub_207DCF62C((char *)v993 + 5520, v541);
    sub_207DCF62C((char *)v993 + 2024, v541 + 1360);
    sub_207DCF62C((char *)v993 + 2944, v541);
    sub_207DCF62C((char *)v993 + 3864, v541);
    sub_207DCF62C((char *)v993 + 4784, v541);
    sub_207DCF62C((char *)v993 + 5704, v541);
    sub_207DCF62C((char *)v993 + 2208, v541 + 1360);
    sub_207DCF62C((char *)v993 + 3128, v541);
    sub_207DCF62C((char *)v993 + 4048, v541);
    sub_207DCF62C((char *)v993 + 4968, v541);
    sub_207DCF62C((char *)v993 + 5888, v541);
    kdebug_trace();
  }
  v1062 = 0u;
  v1061 = 0u;
  LODWORD(v1063) = 733221752;
  kdebug_trace();
  v590 = 0;
  v1112 = 0;
  *(_OWORD *)v1111 = 0u;
  v1110 = 0u;
  *(_OWORD *)v1109 = 0u;
  *(_OWORD *)v1108 = 0u;
  v1107 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v1105 = 0u;
  *(_OWORD *)v1103 = 0u;
  v1102 = 0u;
  *(_OWORD *)v1101 = 0u;
  *(_OWORD *)v1100 = 0u;
  v1099 = 0u;
  memset(v1098, 0, sizeof(v1098));
  v1009 = 0u;
  *(_OWORD *)v1010 = 0u;
  *(_OWORD *)v1007 = 0u;
  *(_OWORD *)v1008 = 0u;
  v1006 = 0u;
  v972 = v540 + 414;
  v976 = v540 + 184;
  memset(v1005, 0, sizeof(v1005));
  v968 = v540 + 644;
  *(_OWORD *)v1082 = 0u;
  v960 = v540 + 529;
  v964 = v540 + 299;
  v1081 = 0u;
  *(_OWORD *)v1080 = 0u;
  *(_OWORD *)v1079 = 0u;
  v1078 = 0u;
  *(_OWORD *)v1077 = 0u;
  *(_OWORD *)v1076 = 0u;
  v1104 = 0;
  *(_QWORD *)&v1011 = 0;
  v1083 = 0;
  while (2)
  {
    v592 = (float **)(&off_24C074EB0 + 2 * v590);
    v593 = &v976[23 * v590];
    v594 = &v972[23 * v590];
    v595 = &v968[23 * v590];
    memset(v1054, 0, 24);
    memset(v1038, 0, 24);
    v596 = *v592;
    v597 = *v592 + 1;
    v997 = v590;
    v1001 = (unint64_t)v592[1];
    v598 = vcvts_n_u32_f32(**v592, 2uLL);
    v991 = (uint64_t)&(*v592)[v1001];
    v599 = v598 + 1;
    v600 = vcvts_n_u32_f32(*(float *)(v991 - 4), 2uLL);
    v601 = v600;
    if (v600 > 0x59F)
    {
      if (v600 - 1440 == v599)
      {
LABEL_889:
        v603 = 1;
      }
      else
      {
        v602 = v600 - 1441;
        while (1)
        {
          ++v602;
          if (((*(_QWORD *)((char *)v593 + ((v602 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v602) & 1) == 0)
            break;
          if (v598 == v602)
            goto LABEL_889;
        }
        v603 = 0;
      }
      v1054[0] = operator new(8uLL);
      *(int64x2_t *)&v1054[1] = vdupq_n_s64(1uLL);
      *(_QWORD *)v1054[0] = v603;
      v607 = 1;
      if (v600 - 1440 != v598 + 1)
      {
        v608 = v600 - 1441;
        while (1)
        {
          v609 = (v608 + 1) >> 6;
          v610 = 1 << (v608 + 1);
          if ((v610 & v594[v609]) != 0 || (v595[v609] & v610) == 0)
            break;
          if (v598 == ++v608)
          {
            v607 = 1;
            goto LABEL_909;
          }
        }
        v607 = 0;
      }
LABEL_909:
      v984 = 0;
      v980 = 0;
      v1038[0] = operator new(8uLL);
      *(int64x2_t *)&v1038[1] = vdupq_n_s64(1uLL);
      *(_QWORD *)v1038[0] = v607;
      v611 = 1;
      v612 = (float *)v991;
      if (v1001 >= 3)
        goto LABEL_910;
LABEL_988:
      if (v600 > 0x59F)
        goto LABEL_989;
LABEL_951:
      v632 = v997;
      if (v611 == (uint64_t)v1054[2] << 6)
      {
        if ((uint64_t)(v611 + 1) < 0)
          goto LABEL_1525;
        v633 = (uint64_t)v1054[2] << 7;
        if ((uint64_t)v1054[2] << 7 <= v611 + 64)
          v633 = v611 + 64;
        if (v611 >= 0x3FFFFFFFFFFFFFFFLL)
          v634 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v634 = v633;
        sub_207D1C104((uint64_t)v1054, v634);
        v611 = (unint64_t)v1054[1];
      }
      v1054[1] = (void *)(v611 + 1);
      v635 = v611 >> 6;
      v636 = 1 << v611;
      if (v984)
      {
        *((_QWORD *)v1054[0] + v635) |= v636;
        v637 = (unint64_t)v1038[1];
        v638 = v1038[2];
        if (v1038[1] != (void *)((uint64_t)v1038[2] << 6))
          goto LABEL_970;
      }
      else
      {
        *((_QWORD *)v1054[0] + v635) &= ~v636;
        v637 = (unint64_t)v1038[1];
        v638 = v1038[2];
        if (v1038[1] != (void *)((uint64_t)v1038[2] << 6))
          goto LABEL_970;
      }
      if ((uint64_t)(v637 + 1) >= 0)
      {
        if (v637 > 0x3FFFFFFFFFFFFFFELL)
        {
          v641 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v639 = (_QWORD)v638 << 7;
          v640 = (v637 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v639 <= v640)
            v641 = v640;
          else
            v641 = v639;
        }
        sub_207D1C104((uint64_t)v1038, v641);
        v637 = (unint64_t)v1038[1];
LABEL_970:
        v1038[1] = (void *)(v637 + 1);
        v642 = v637 >> 6;
        v643 = 1 << v637;
        if (v980)
        {
          *((_QWORD *)v1038[0] + v642) |= v643;
          v611 = (unint64_t)v1054[1];
          v644 = (uint64_t)v1054[1] & 0x3F;
          if (v1054[1] <= (void *)0x3F)
            goto LABEL_990;
        }
        else
        {
          *((_QWORD *)v1038[0] + v642) &= ~v643;
          v611 = (unint64_t)v1054[1];
          v644 = (uint64_t)v1054[1] & 0x3F;
          if (v1054[1] <= (void *)0x3F)
            goto LABEL_990;
        }
        goto LABEL_1031;
      }
LABEL_1525:
      sub_207D159B0();
    }
    do
    {
      if (((*(_QWORD *)((char *)v593 + ((v601 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v601) & 1) == 0)
      {
        v984 = 0;
        goto LABEL_976;
      }
      ++v601;
    }
    while (v601 != 1440);
    if (v598 == -1)
    {
      v984 = 1;
    }
    else
    {
      v604 = 0;
      do
      {
        v605 = ((1 << v604) & *(_QWORD *)((char *)v593 + ((v604 >> 3) & 0x1FFFFFFFFFFFFFF8))) != 0;
        v606 = ((1 << v604) & *(_QWORD *)((char *)v593 + ((v604 >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0 || v598 == v604;
        ++v604;
      }
      while (!v606);
      v984 = v605;
    }
LABEL_976:
    v645 = v600;
    v612 = (float *)v991;
    do
    {
      if (((1 << v645) & v594[v645 >> 6]) != 0 || (v595[v645 >> 6] & (1 << v645)) == 0)
        goto LABEL_987;
      ++v645;
    }
    while (v645 != 1440);
    if (v599)
    {
      v646 = 0;
      while (((1 << v646) & v594[v646 >> 6]) == 0 && (v595[v646 >> 6] & (1 << v646)) != 0)
      {
        if (v599 == ++v646)
          goto LABEL_985;
      }
LABEL_987:
      v980 = 0;
      v611 = 0;
      if (v1001 >= 3)
        goto LABEL_910;
      goto LABEL_988;
    }
LABEL_985:
    v980 = 1;
    v611 = 0;
    if (v1001 < 3)
      goto LABEL_988;
LABEL_910:
    v958 = v600;
    for (i = 2; i < v1001; i += 2)
    {
      while (1)
      {
        v614 = vcvts_n_u32_f32(*v597, 2uLL);
        v615 = vcvts_n_u32_f32(v597[1], 2uLL);
        v616 = v615 + 1;
        if (v615 + 1 == v614)
        {
          v617 = 0;
        }
        else
        {
          v618 = v614;
          do
          {
            v617 = ((1 << v618) & *(_QWORD *)((char *)v593 + ((v618 >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0;
            v619 = ((1 << v618) & *(_QWORD *)((char *)v593 + ((v618 >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0
                || v615 == v618;
            ++v618;
          }
          while (!v619);
        }
        v620 = (unint64_t)v1054[1];
        if (v1054[1] == (void *)((uint64_t)v1054[2] << 6))
        {
          if ((uint64_t)v1054[1] + 1 < 0)
            sub_207D159B0();
          v621 = (uint64_t)v1054[2] << 7;
          if ((uint64_t)v1054[2] << 7 <= ((unint64_t)v1054[1] & 0xFFFFFFFFFFFFFFC0) + 64)
            v621 = ((unint64_t)v1054[1] & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v1054[1] <= (void *)0x3FFFFFFFFFFFFFFELL)
            v622 = v621;
          else
            v622 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)v1054, v622);
          v620 = (unint64_t)v1054[1];
        }
        v1054[1] = (void *)(v620 + 1);
        v623 = v620 >> 6;
        v624 = 1 << v620;
        if (v617)
        {
          *((_QWORD *)v1054[0] + v623) &= ~v624;
          if (v616 != v614)
            goto LABEL_930;
LABEL_936:
          v625 = 0;
          goto LABEL_937;
        }
        *((_QWORD *)v1054[0] + v623) |= v624;
        if (v616 == v614)
          goto LABEL_936;
LABEL_930:
        while (1)
        {
          v625 = 1;
          if (((1 << v614) & v594[v614 >> 6]) != 0)
            break;
          if ((v595[v614 >> 6] & (1 << v614)) == 0)
          {
            v625 = 1;
            v626 = (unint64_t)v1038[1];
            v627 = v1038[2];
            if (v1038[1] == (void *)((uint64_t)v1038[2] << 6))
              goto LABEL_938;
            goto LABEL_945;
          }
          if (v616 == ++v614)
          {
            v625 = 0;
            v626 = (unint64_t)v1038[1];
            v627 = v1038[2];
            if (v1038[1] == (void *)((uint64_t)v1038[2] << 6))
              goto LABEL_938;
            goto LABEL_945;
          }
        }
LABEL_937:
        v626 = (unint64_t)v1038[1];
        v627 = v1038[2];
        if (v1038[1] == (void *)((uint64_t)v1038[2] << 6))
        {
LABEL_938:
          if ((uint64_t)(v626 + 1) < 0)
            sub_207D159B0();
          v628 = (_QWORD)v627 << 7;
          if (v628 <= (v626 & 0xFFFFFFFFFFFFFFC0) + 64)
            v628 = (v626 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v626 <= 0x3FFFFFFFFFFFFFFELL)
            v629 = v628;
          else
            v629 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)v1038, v629);
          v626 = (unint64_t)v1038[1];
        }
LABEL_945:
        v1038[1] = (void *)(v626 + 1);
        v630 = v626 >> 6;
        v631 = 1 << v626;
        if ((v625 & 1) == 0)
          break;
        v597 += 2;
        *((_QWORD *)v1038[0] + v630) &= ~v631;
        i += 2;
        if (i >= v1001)
          goto LABEL_950;
      }
      v597 += 2;
      *((_QWORD *)v1038[0] + v630) |= v631;
    }
LABEL_950:
    v611 = (unint64_t)v1054[1];
    v612 = (float *)v991;
    if (v958 <= 0x59F)
      goto LABEL_951;
LABEL_989:
    v632 = v997;
    v644 = v611 & 0x3F;
    if (v611 <= 0x3F)
    {
LABEL_990:
      if (!v644)
        goto LABEL_991;
    }
LABEL_1031:
    v671 = 0;
    v672 = (uint64_t *)v1054[0];
    v673 = (uint64_t *)((char *)v1054[0] + 8 * (v611 >> 6));
    while (1)
    {
      v675 = v644 - 1;
      v676 = v644 == 0;
      v677 = v644 ? 0 : -1;
      v673 += v677;
      v644 = v676 ? 63 : v675;
      if (v672 >= v673 && (v672 != v673 || v671 >= v644))
        break;
      v679 = 1 << v644;
      v680 = *v672;
      if ((*v673 & (1 << v644)) != 0)
        v681 = *v672 | (1 << v671);
      else
        v681 = *v672 & ~(1 << v671);
      *v672 = v681;
      if ((v680 & (1 << v671)) != 0)
        v674 = *v673 | v679;
      else
        v674 = *v673 & ~v679;
      *v673 = v674;
      v672 += v671 == 63;
      if (v671 == 63)
        v671 = 0;
      else
        ++v671;
    }
LABEL_991:
    v647 = (uint64_t)v1038[1] & 0x3F;
    if (v1038[1] > (void *)0x3F || v647 != 0)
    {
      v649 = 0;
      v650 = (uint64_t *)v1038[0];
      v651 = (uint64_t *)((char *)v1038[0] + 8 * ((unint64_t)v1038[1] >> 6));
      while (1)
      {
        v653 = v647 - 1;
        v654 = v647 == 0;
        v655 = v647 ? 0 : -1;
        v651 += v655;
        v647 = v654 ? 63 : v653;
        if (v650 >= v651)
        {
          v656 = v650 != v651 || v649 >= v647;
          if (v656)
            break;
        }
        v657 = 1 << v647;
        v658 = *v650;
        if ((*v651 & (1 << v647)) != 0)
          v659 = *v650 | (1 << v649);
        else
          v659 = *v650 & ~(1 << v649);
        *v650 = v659;
        if ((v658 & (1 << v649)) != 0)
          v652 = *v651 | v657;
        else
          v652 = *v651 & ~v657;
        *v651 = v652;
        v650 += v649 == 63;
        if (v649 == 63)
          v649 = 0;
        else
          ++v649;
      }
    }
    sub_207DDDB70(v1069, (uint64_t)v1054);
    sub_207DDDB70(&v1069[3], (uint64_t)v1038);
    if (v1038[0])
      operator delete(v1038[0]);
    if (v1054[0])
      operator delete(v1054[0]);
    v660 = &v1105[3 * v632];
    if (*v660)
    {
      operator delete(*v660);
      v660[1] = 0;
      v660[2] = 0;
    }
    v661 = &v1098[24 * v632];
    *v660 = v1069[0];
    *(_OWORD *)&v1105[3 * v632 + 1] = *(_OWORD *)&v1069[1];
    memset(v1069, 0, 24);
    v662 = *(void **)v661;
    if (*(_QWORD *)v661)
    {
      operator delete(v662);
      *((_QWORD *)v661 + 1) = 0;
      *((_QWORD *)v661 + 2) = 0;
      v662 = v1069[0];
    }
    *(void **)v661 = v1069[3];
    *(_OWORD *)&v1098[24 * v632 + 8] = v1070;
    v1070 = 0uLL;
    v1069[3] = 0;
    if (v662)
      operator delete(v662);
    v663 = 0;
    v664 = &v964[23 * v632];
    memset(v1054, 0, 24);
    memset(v1038, 0, 24);
    v665 = v612 - 2;
    v666 = &v960[23 * v632];
    v667 = vcvts_n_u32_f32(*(v612 - 1), 2uLL) - 1439;
    if (v667 > 0xFFFFFFFFFFFFFA5FLL)
    {
      if (v596 != v612)
        goto LABEL_1103;
      goto LABEL_1153;
    }
    v668 = vcvts_n_u32_f32(*(v612 - 2), 2uLL);
    v992 = v665;
    v669 = 0;
    if (v668 == 1440)
    {
      v670 = 0;
      goto LABEL_1064;
    }
    for (j = v668; j != 1440; ++j)
    {
      if (((1 << j) & v666[j >> 6]) == 0 && (v664[j >> 6] & (1 << j)) == 0)
        ++v669;
    }
    v683 = 1440 - v668;
    if (1440 - v668 < 2)
    {
      v670 = 0;
      v684 = v668;
      goto LABEL_1063;
    }
    v685 = 0;
    v686 = 0;
    v684 = (v683 & 0xFFFFFFFFFFFFFFFELL) + v668;
    v687 = v668;
    v688 = v683 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v685 += (~*(_QWORD *)((char *)v666 + ((v687 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v687) & 1;
      v686 += (~*(_QWORD *)((char *)v666 + (((v687 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v687 + 1)) & 1;
      v687 += 2;
      v688 -= 2;
    }
    while (v688);
    v670 = v686 + v685;
    if (v683 != (v683 & 0xFFFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_1063:
        v670 += (~*(_QWORD *)((char *)v666 + ((v684 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v684) & 1;
        ++v684;
      }
      while (v684 != 1440);
    }
LABEL_1064:
    v1002 = v669;
    v689 = 0;
    if (v667)
    {
      for (k = 0; k != v667; ++k)
      {
        if (((1 << k) & v666[k >> 6]) == 0 && (v664[k >> 6] & (1 << k)) == 0)
          ++v689;
      }
      if (v667 < 2)
      {
        v691 = 0;
        v692 = 0;
        goto LABEL_1077;
      }
      v693 = 0;
      v694 = 0;
      v695 = 0;
      v692 = v667 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v696 = ~*(_QWORD *)((char *)v666 + ((v693 >> 3) & 0x1FFFFFFFFFFFFFF8));
        v694 += (v696 >> (v693 & 0x3E)) & 1;
        v695 += (v696 >> (v693 & 0x3E | 1)) & 1;
        v693 += 2;
      }
      while (v692 != v693);
      v691 = v695 + v694;
      while (v667 != v692)
      {
LABEL_1077:
        v691 += (~*(_QWORD *)((char *)v666 + ((v692 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v692) & 1;
        ++v692;
      }
    }
    else
    {
      v691 = 0;
    }
    v1054[0] = operator new(8uLL);
    v697 = 2 * (v689 + v1002);
    *(int64x2_t *)&v1054[1] = vdupq_n_s64(1uLL);
    v698 = v691 + v670;
    *(_QWORD *)v1054[0] = v697 < v691 + v670;
    if (v691 + v670)
      v699 = (float)(v689 + v1002) / (float)v698;
    else
      v699 = 0.5;
    if (v697 >= v698)
      v700 = v699;
    else
      v700 = 1.0 - v699;
    while (v668 != 1440)
    {
      if (((1 << v668) & v666[v668 >> 6]) == 0 && (v595[v668 >> 6] & (1 << v668)) == 0)
      {
        v701 = 0;
        if (!v667)
          goto LABEL_1097;
        goto LABEL_1092;
      }
      ++v668;
    }
    v701 = 1;
    if (!v667)
    {
LABEL_1097:
      v703 = 1;
      goto LABEL_1098;
    }
LABEL_1092:
    v702 = 0;
    while (((1 << v702) & v666[v702 >> 6]) != 0 || (v595[v702 >> 6] & (1 << v702)) != 0)
    {
      if (v667 == ++v702)
        goto LABEL_1097;
    }
    v703 = 0;
LABEL_1098:
    v704 = operator new(8uLL);
    v705 = v701 & v703;
    v706 = vdupq_n_s64(1uLL);
    v1038[0] = v704;
    if (v700 < 0.9)
      v705 = 0;
    *(int64x2_t *)&v1038[1] = v706;
    *v704 = v705;
    v663 = 1;
    v612 = v992;
    if (v596 != v992)
    {
      while (1)
      {
LABEL_1103:
        v707 = v612;
        v708 = vcvts_n_u32_f32(*v596, 2uLL);
        v709 = vcvts_n_u32_f32(v596[1], 2uLL);
        v710 = v709 + 1;
        if (v709 + 1 == v708)
        {
          v711 = 0;
          v712 = 0;
          goto LABEL_1117;
        }
        v711 = 0;
        v713 = v708;
        do
        {
          if (((1 << v713) & v666[v713 >> 6]) == 0 && (v664[v713 >> 6] & (1 << v713)) == 0)
            ++v711;
          ++v713;
        }
        while (v710 != v713);
        v714 = v709 - v708 + 1;
        if (v714 < 2)
          break;
        v716 = 0;
        v717 = 0;
        v715 = (v714 & 0xFFFFFFFFFFFFFFFELL) + v708;
        v718 = v708;
        v719 = v714 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v716 += (~*(_QWORD *)((char *)v666 + ((v718 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v718) & 1;
          v717 += (~*(_QWORD *)((char *)v666 + (((v718 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v718 + 1)) & 1;
          v718 += 2;
          v719 -= 2;
        }
        while (v719);
        v712 = v717 + v716;
        if (v714 != (v714 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_1116;
LABEL_1117:
        v720 = (unint64_t)v1054[1];
        if (v1054[1] == (void *)((uint64_t)v1054[2] << 6))
        {
          if ((uint64_t)v1054[1] + 1 < 0)
            sub_207D159B0();
          v721 = (uint64_t)v1054[2] << 7;
          if ((uint64_t)v1054[2] << 7 <= ((unint64_t)v1054[1] & 0xFFFFFFFFFFFFFFC0) + 64)
            v721 = ((unint64_t)v1054[1] & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v1054[1] <= (void *)0x3FFFFFFFFFFFFFFELL)
            v722 = v721;
          else
            v722 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)v1054, v722);
          v720 = (unint64_t)v1054[1];
        }
        v1054[1] = (void *)(v720 + 1);
        v723 = (char *)v1054[0];
        v724 = v720 >> 6;
        v725 = 1 << v720;
        if (2 * v711 >= v712)
        {
          *((_QWORD *)v1054[0] + v724) &= ~v725;
          if (!v712)
          {
LABEL_1129:
            v726 = 0.5;
            goto LABEL_1130;
          }
        }
        else
        {
          *((_QWORD *)v1054[0] + v724) |= v725;
          if (!v712)
            goto LABEL_1129;
        }
        v726 = (float)v711 / (float)v712;
LABEL_1130:
        v612 = v707;
        if (((*(_QWORD *)&v723[(((unint64_t)v1054[1] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (LOBYTE(v1054[1]) - 1)) & 1) != 0)
          v726 = 1.0 - v726;
        while (v710 != v708)
        {
          if (((1 << v708) & v666[v708 >> 6]) == 0 && (v595[v708 >> 6] & (1 << v708)) == 0)
          {
            v727 = 0;
            goto LABEL_1139;
          }
          ++v708;
        }
        v727 = 1;
LABEL_1139:
        if (v726 >= 0.9)
          v728 = v727;
        else
          v728 = 0;
        v729 = (unint64_t)v1038[1];
        if (v1038[1] == (void *)((uint64_t)v1038[2] << 6))
        {
          if ((uint64_t)v1038[1] + 1 < 0)
            sub_207D159B0();
          v730 = (uint64_t)v1038[2] << 7;
          if ((uint64_t)v1038[2] << 7 <= ((unint64_t)v1038[1] & 0xFFFFFFFFFFFFFFC0) + 64)
            v730 = ((unint64_t)v1038[1] & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v1038[1] <= (void *)0x3FFFFFFFFFFFFFFELL)
            v731 = v730;
          else
            v731 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)v1038, v731);
          v729 = (unint64_t)v1038[1];
        }
        v1038[1] = (void *)(v729 + 1);
        v732 = v729 >> 6;
        v733 = 1 << v729;
        if (v728)
        {
          v596 += 2;
          *((_QWORD *)v1038[0] + v732) |= v733;
          if (v596 == v707)
          {
LABEL_1152:
            v663 = (unint64_t)v1054[1];
            goto LABEL_1153;
          }
        }
        else
        {
          v596 += 2;
          *((_QWORD *)v1038[0] + v732) &= ~v733;
          if (v596 == v707)
            goto LABEL_1152;
        }
      }
      v712 = 0;
      v715 = v708;
      do
      {
LABEL_1116:
        v712 += (~*(_QWORD *)((char *)v666 + ((v715 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v715) & 1;
        ++v715;
      }
      while (v710 != v715);
      goto LABEL_1117;
    }
LABEL_1153:
    v734 = v663 & 0x3F;
    if (v663 > 0x3F || (v663 & 0x3F) != 0)
    {
      v751 = 0;
      v752 = (uint64_t *)v1054[0];
      v753 = (uint64_t *)((char *)v1054[0] + 8 * (v663 >> 6));
      while (1)
      {
        v755 = v734 - 1;
        v756 = v734 == 0;
        v757 = v734 ? 0 : -1;
        v753 += v757;
        v734 = v756 ? 63 : v755;
        if (v752 >= v753 && (v752 != v753 || v751 >= v734))
          break;
        v759 = 1 << v734;
        v760 = *v752;
        if ((*v753 & (1 << v734)) != 0)
          v761 = *v752 | (1 << v751);
        else
          v761 = *v752 & ~(1 << v751);
        *v752 = v761;
        if ((v760 & (1 << v751)) != 0)
          v754 = *v753 | v759;
        else
          v754 = *v753 & ~v759;
        *v753 = v754;
        v752 += v751 == 63;
        if (v751 == 63)
          v751 = 0;
        else
          ++v751;
      }
    }
    v735 = (uint64_t)v1038[1] & 0x3F;
    if (v1038[1] > (void *)0x3F || v735 != 0)
    {
      v737 = 0;
      v738 = (uint64_t *)v1038[0];
      v739 = (uint64_t *)((char *)v1038[0] + 8 * ((unint64_t)v1038[1] >> 6));
      while (1)
      {
        v741 = v735 - 1;
        v742 = v735 == 0;
        v743 = v735 ? 0 : -1;
        v739 += v743;
        v735 = v742 ? 63 : v741;
        if (v738 >= v739 && (v738 != v739 || v737 >= v735))
          break;
        v745 = 1 << v735;
        v746 = *v738;
        if ((*v739 & (1 << v735)) != 0)
          v747 = *v738 | (1 << v737);
        else
          v747 = *v738 & ~(1 << v737);
        *v738 = v747;
        if ((v746 & (1 << v737)) != 0)
          v740 = *v739 | v745;
        else
          v740 = *v739 & ~v745;
        *v739 = v740;
        v738 += v737 == 63;
        if (v737 == 63)
          v737 = 0;
        else
          ++v737;
      }
    }
    sub_207DDDB70(v1069, (uint64_t)v1054);
    sub_207DDDB70(&v1069[3], (uint64_t)v1038);
    if (v1038[0])
      operator delete(v1038[0]);
    if (v1054[0])
      operator delete(v1054[0]);
    v748 = &v1005[24 * v997];
    if (*(_QWORD *)v748)
    {
      operator delete(*(void **)v748);
      *((_QWORD *)v748 + 1) = 0;
      *((_QWORD *)v748 + 2) = 0;
    }
    v749 = &v1076[3 * v997];
    *(void **)v748 = v1069[0];
    *(_OWORD *)&v1005[24 * v997 + 8] = *(_OWORD *)&v1069[1];
    memset(v1069, 0, 24);
    v750 = *v749;
    if (*v749)
    {
      operator delete(v750);
      v749[1] = 0;
      v749[2] = 0;
      v750 = v1069[0];
    }
    *v749 = v1069[3];
    *(_OWORD *)&v1076[3 * v997 + 1] = v1070;
    v1070 = 0uLL;
    v1069[3] = 0;
    if (v750)
      operator delete(v750);
    v590 = v997 + 1;
    v591 = v993;
    if (v997 != 4)
      continue;
    break;
  }
  v762 = 0;
  memset(v1054, 0, 24);
  memset(v1038, 0, 24);
  while (2)
  {
    v763 = &v1105[3 * v762];
    v764 = (unint64_t)v763[1];
    v1031[0] = 0;
    v1030[0] = 0;
    v1030[1] = 0;
    if (v764)
    {
      if ((v764 & 0x8000000000000000) != 0)
        sub_207D159B0();
      v766 = (v764 - 1) >> 6;
      v767 = (uint64_t *)operator new(8 * (v766 + 1));
      v768 = v767;
      v1031[0] = (void *)(v766 + 1);
      v1030[0] = v767;
      v1030[1] = (void *)v764;
      if (v764 >= 0x41)
        v769 = (v764 - 1) >> 6;
      else
        v769 = 0;
      v767[v769] = 0;
      v765 = v764 >> 6;
      if (v764 >= 0x40)
        bzero(v767, 8 * v765);
      v591 = v993;
      if ((v764 & 0x3F) != 0)
        v768[v765] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v764 & 0x3F));
    }
    else
    {
      v768 = 0;
    }
    v770 = (uint64_t *)&v1098[24 * v762];
    v771 = v770[1];
    __src[1] = 0;
    v1023[0] = 0;
    __src[0] = 0;
    v1003 = v771 >> 6;
    if (v771)
    {
      if ((v771 & 0x8000000000000000) != 0)
        sub_207D159B0();
      v772 = (v771 - 1) >> 6;
      v773 = (uint64_t *)operator new(8 * (v772 + 1));
      v774 = v773;
      __src[1] = (void *)v771;
      v1023[0] = (void *)(v772 + 1);
      __src[0] = v773;
      if (v771 >= 0x41)
        v775 = (v771 - 1) >> 6;
      else
        v775 = 0;
      v773[v775] = 0;
      if (v771 >= 0x40)
        bzero(v773, 8 * v1003);
      v591 = v993;
      if ((v771 & 0x3F) != 0)
        v774[v1003] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v771 & 0x3F));
      v776 = (uint64_t *)(&off_24C074F00 + 2 * v762);
      v777 = v776[1];
      if (!v777)
        goto LABEL_1242;
    }
    else
    {
      v774 = 0;
      v776 = (uint64_t *)(&off_24C074F00 + 2 * v762);
      v777 = v776[1];
      if (!v777)
        goto LABEL_1242;
    }
    v778 = 0;
    v779 = *v776;
    v780 = (char *)*v763;
    v781 = 8 * v777;
    v782 = *v770;
    do
    {
      while (1)
      {
        v783 = v778 >> 6;
        v784 = 1 << v778;
        v785 = ((*(_QWORD *)&v780[(*(_QWORD *)(v779 + 8 * v778) >> 3) & 0x1FFFFFFFFFFFFFF8] >> *(_QWORD *)(v779 + 8 * v778)) & 1) != 0
             ? v768[v783] | v784
             : v768[v783] & ~v784;
        v768[v783] = v785;
        if (((*(_QWORD *)(v782 + ((*(_QWORD *)(v779 + 8 * v778) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_QWORD *)(v779 + 8 * v778)) & 1) != 0)
          break;
        v774[v783] &= ~v784;
        ++v778;
        v781 -= 8;
        if (!v781)
          goto LABEL_1242;
      }
      v774[v783] |= v784;
      ++v778;
      v781 -= 8;
    }
    while (v781);
LABEL_1242:
    sub_207DDDC78(v768, 0, &v768[v764 >> 6], v764 & 0x3F, (uint64_t *)v1054, (uint64_t **)v1069);
    sub_207DDDC78(v774, 0, &v774[v1003], v771 & 0x3F, (uint64_t *)v1038, (uint64_t **)v1069);
    if (v774)
      operator delete(v774);
    if (v768)
      operator delete(v768);
    if (++v762 != 5)
      continue;
    break;
  }
  v786 = 0;
  while (2)
  {
    v788 = (uint64_t *)&v1005[24 * v786];
    v789 = v788[1];
    v1031[0] = 0;
    v1030[0] = 0;
    v1030[1] = 0;
    if (v789)
    {
      if ((v789 & 0x8000000000000000) != 0)
        sub_207D159B0();
      v791 = (v789 - 1) >> 6;
      v792 = (uint64_t *)operator new(8 * (v791 + 1));
      v793 = v792;
      v1031[0] = (void *)(v791 + 1);
      v1030[0] = v792;
      v1030[1] = (void *)v789;
      if (v789 >= 0x41)
        v794 = (v789 - 1) >> 6;
      else
        v794 = 0;
      v792[v794] = 0;
      v790 = v789 >> 6;
      if (v789 >= 0x40)
        bzero(v792, 8 * v790);
      v591 = v993;
      if ((v789 & 0x3F) != 0)
        v793[v790] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v789 & 0x3F));
    }
    else
    {
      v793 = 0;
    }
    v795 = &v1076[3 * v786];
    v796 = (unint64_t)v795[1];
    __src[1] = 0;
    v1023[0] = 0;
    __src[0] = 0;
    v1004 = v796 >> 6;
    if (v796)
    {
      if ((v796 & 0x8000000000000000) != 0)
        sub_207D159B0();
      v797 = (v796 - 1) >> 6;
      v798 = (uint64_t *)operator new(8 * (v797 + 1));
      v799 = v798;
      __src[1] = (void *)v796;
      v1023[0] = (void *)(v797 + 1);
      __src[0] = v798;
      if (v796 >= 0x41)
        v800 = (v796 - 1) >> 6;
      else
        v800 = 0;
      v798[v800] = 0;
      if (v796 >= 0x40)
        bzero(v798, 8 * v1004);
      v591 = v993;
      if ((v796 & 0x3F) != 0)
        v799[v1004] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v796 & 0x3F));
      v801 = (uint64_t *)(&off_24C074F00 + 2 * v786);
      v802 = v801[1];
      if (!v802)
        goto LABEL_1277;
    }
    else
    {
      v799 = 0;
      v801 = (uint64_t *)(&off_24C074F00 + 2 * v786);
      v802 = v801[1];
      if (!v802)
        goto LABEL_1277;
    }
    v803 = 0;
    v804 = *v801;
    v805 = *v788;
    v806 = 8 * v802;
    v807 = (char *)*v795;
    do
    {
      while (1)
      {
        v808 = v803 >> 6;
        v809 = 1 << v803;
        v810 = ((*(_QWORD *)(v805 + ((*(_QWORD *)(v804 + 8 * v803) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_QWORD *)(v804 + 8 * v803)) & 1) != 0
             ? v793[v808] | v809
             : v793[v808] & ~v809;
        v793[v808] = v810;
        if (((*(_QWORD *)&v807[(*(_QWORD *)(v804 + 8 * v803) >> 3) & 0x1FFFFFFFFFFFFFF8] >> *(_QWORD *)(v804 + 8 * v803)) & 1) != 0)
          break;
        v799[v808] &= ~v809;
        ++v803;
        v806 -= 8;
        if (!v806)
          goto LABEL_1277;
      }
      v799[v808] |= v809;
      ++v803;
      v806 -= 8;
    }
    while (v806);
LABEL_1277:
    sub_207DDDC78(v793, 0, &v793[v789 >> 6], v789 & 0x3F, (uint64_t *)v1054, (uint64_t **)v1069);
    sub_207DDDC78(v799, 0, &v799[v1004], v796 & 0x3F, (uint64_t *)v1038, (uint64_t **)v1069);
    if (v799)
      operator delete(v799);
    if (v793)
      operator delete(v793);
    ++v786;
    v787 = v956;
    if (v786 != 5)
      continue;
    break;
  }
  if (v954)
  {
    memset(v1069, 0, 24);
    v811 = (char *)v1054[0];
    v812 = (uint64_t)v1054[1] & 0x3F;
    v1030[0] = v1069;
    if (v1054[1] > (void *)0x3F || (v813 = 0, v814 = 0, ((uint64_t)v1054[1] & 0x3F) != 0))
    {
      v815 = 0;
      v816 = (char *)v1054[0] + 8 * ((unint64_t)v1054[1] >> 6);
      do
      {
        sub_207DDDDAC((uint64_t *)v1030, (*(_QWORD *)v811 >> v815) & 1);
        v811 += 8 * (v815 == 63);
        if (v815 == 63)
          v815 = 0;
        else
          ++v815;
      }
      while (v811 != v816 || v815 != v812);
      v814 = v1069[1];
      v813 = (char *)v1069[0];
    }
    v818 = v814 - v813;
    v819 = (void *)(((((v814 - v813) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0uLL) >> 2);
    v1030[1] = v819;
    v820 = (_OWORD *)MEMORY[0x20BD028B4]();
    v821 = v955;
    v1030[0] = v820;
    LODWORD(v1031[0]) = 1;
    HIDWORD(v1031[0]) = v818 >> 2;
    if (HIDWORD(v1031[0]))
    {
      v822 = 0;
      v823 = (v818 >> 2);
      if (v823 < 8)
      {
        v824 = v820;
      }
      else
      {
        v824 = v820;
        if ((unint64_t)((char *)v820 - v813) >= 0x20)
        {
          v825 = (v818 >> 2) & 7;
          v822 = v823 - v825;
          v824 = (_DWORD *)v820 + v823 - v825;
          v826 = (__int128 *)(v813 + 16);
          v827 = v820 + 1;
          v828 = v823 - v825;
          do
          {
            v829 = *v826;
            *(v827 - 1) = *(v826 - 1);
            *v827 = v829;
            v826 += 2;
            v827 += 2;
            v828 -= 8;
          }
          while (v828);
          if (!v825)
            goto LABEL_1309;
        }
      }
      v830 = v822 - v823;
      v831 = &v813[4 * v822];
      do
      {
        v832 = *(_DWORD *)v831;
        v831 += 4;
        *v824++ = v832;
        v656 = __CFADD__(v830++, 1);
      }
      while (!v656);
    }
LABEL_1309:
    v833 = v955[1];
    if (v833 >= v955[2])
    {
      v834 = sub_207DDA3EC(v955, (uint64_t)v1030);
      v835 = v1030[0];
      v955[1] = v834;
      if (v835)
        operator delete[](v835);
    }
    else
    {
      *(_QWORD *)v833 = v820;
      v1030[1] = 0;
      v1030[0] = 0;
      *(_QWORD *)(v833 + 8) = v819;
      *(void **)(v833 + 16) = v1031[0];
      v955[1] = v833 + 24;
    }
    v1030[1] = 0;
    v1030[0] = 0;
    v1031[0] = 0;
    v836 = (char *)v1038[0];
    v837 = (uint64_t)v1038[1] & 0x3F;
    __src[0] = v1030;
    if (v1038[1] > (void *)0x3F || (v838 = 0, v839 = 0, ((uint64_t)v1038[1] & 0x3F) != 0))
    {
      v840 = 0;
      v841 = (char *)v1038[0] + 8 * ((unint64_t)v1038[1] >> 6);
      do
      {
        sub_207DDDDAC((uint64_t *)__src, (*(_QWORD *)v836 >> v840) & 1);
        v836 += 8 * (v840 == 63);
        if (v840 == 63)
          v840 = 0;
        else
          ++v840;
      }
      while (v836 != v841 || v840 != v837);
      v839 = v1030[1];
      v838 = (char *)v1030[0];
      v821 = v955;
    }
    v843 = v839 - v838;
    v844 = (void *)(((((v839 - v838) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0uLL) >> 2);
    __src[1] = v844;
    v845 = (_OWORD *)MEMORY[0x20BD028B4]();
    __src[0] = v845;
    LODWORD(v1023[0]) = 1;
    HIDWORD(v1023[0]) = v843 >> 2;
    if (HIDWORD(v1023[0]))
    {
      v846 = 0;
      v847 = (v843 >> 2);
      if (v847 < 8)
      {
        v848 = v845;
      }
      else
      {
        v848 = v845;
        if ((unint64_t)((char *)v845 - v838) >= 0x20)
        {
          v849 = (v843 >> 2) & 7;
          v846 = v847 - v849;
          v848 = (_DWORD *)v845 + v847 - v849;
          v850 = (__int128 *)(v838 + 16);
          v851 = v845 + 1;
          v852 = v847 - v849;
          do
          {
            v853 = *v850;
            *(v851 - 1) = *(v850 - 1);
            *v851 = v853;
            v850 += 2;
            v851 += 2;
            v852 -= 8;
          }
          while (v852);
          if (!v849)
            goto LABEL_1336;
        }
      }
      v854 = v846 - v847;
      v855 = &v838[4 * v846];
      do
      {
        v856 = *(_DWORD *)v855;
        v855 += 4;
        *v848++ = v856;
        v656 = __CFADD__(v854++, 1);
      }
      while (!v656);
    }
LABEL_1336:
    v857 = v821[1];
    if (v857 >= v821[2])
    {
      v859 = sub_207DDA3EC(v821, (uint64_t)__src);
      v860 = __src[0];
      v821[1] = v859;
      v858 = v993;
      if (v860)
        operator delete[](v860);
    }
    else
    {
      *(_QWORD *)v857 = v845;
      __src[0] = 0;
      __src[1] = 0;
      *(_QWORD *)(v857 + 8) = v844;
      *(void **)(v857 + 16) = v1023[0];
      v821[1] = v857 + 24;
      v858 = v993;
    }
    v862 = *((_DWORD *)v858 + 44);
    v861 = *((_DWORD *)v858 + 45);
    __src[1] = (void *)(((4 * v862 * v861 + 31) & 0x7FFFFFFE0uLL) >> 2);
    __src[0] = (void *)MEMORY[0x20BD028B4]();
    v1023[0] = (void *)__PAIR64__(v862, v861);
    v864 = v858[15];
    v865 = (std::__shared_weak_count *)v858[16];
    if (v865)
    {
      v866 = (unint64_t *)&v865->__shared_owners_;
      do
        v867 = __ldxr(v866);
      while (__stxr(v867 + 1, v866));
      do
        v868 = __ldaxr(v866);
      while (__stlxr(v868 - 1, v866));
      if (!v868)
      {
        ((void (*)(std::__shared_weak_count *))v865->__on_zero_shared)(v865);
        std::__shared_weak_count::__release_weak(v865);
      }
    }
    if (v864)
    {
      if (*((_BYTE *)v993 + 193))
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v993[15] + 96))(v1084, v993[15], 1);
        v869 = v993[22];
        v870 = (unsigned __int8 *)v993[18];
        v871 = HIDWORD(v869);
        if (!*((_BYTE *)v993 + 192))
          goto LABEL_1355;
      }
      else
      {
        v1084[0] = 0;
        v869 = v993[22];
        v870 = (unsigned __int8 *)v993[18];
        v871 = HIDWORD(v869);
        if (!*((_BYTE *)v993 + 192))
          goto LABEL_1355;
      }
LABEL_1353:
      if (v870)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v993[15] + 88))(v993[15], 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v870 = (unsigned __int8 *)v993[18];
        LODWORD(v871) = *((_DWORD *)v993 + 45);
      }
    }
    else
    {
      v1084[0] = 0;
      v869 = v993[22];
      v870 = (unsigned __int8 *)v993[18];
      v871 = HIDWORD(v869);
      if (*((_BYTE *)v993 + 192))
        goto LABEL_1353;
    }
LABEL_1355:
    v872 = *((unsigned int *)v993 + 47);
    v873 = (v872 * v871);
    if ((_DWORD)v873)
      v874 = v869 == 0;
    else
      v874 = 1;
    if (!v874)
    {
      v894 = 0;
      v895 = &v870[v873];
      v896 = __src[0];
      v897 = (int)v1023[0];
      v898 = (char *)__src[0] + 4 * v869;
      v899 = v869 - (v869 & 0x1F);
      v900 = v869 - (v869 & 7);
      v901 = v870;
      while (v869 >= 8uLL)
      {
        v902 = 0;
        v906 = __CFADD__((_DWORD)v894, v869 - 1);
        if (v897 != 1 || v906)
          goto LABEL_1379;
        v903 = v901;
        if (!(((unint64_t)v869 - 1) >> 32))
        {
          v907 = v894;
          if (v901 < (unsigned __int8 *)&v898[v907 * 4]
            && &v896[v907] < (_DWORD *)&v870[v869 + v894 * v872])
          {
            break;
          }
          if (v869 < 0x20uLL)
          {
            v908 = 0;
LABEL_1399:
            v903 = &v901[v900];
            do
            {
              v863.i64[0] = *(_QWORD *)&v901[v908];
              v915 = vqtbl1q_s8(v863, (int8x16_t)xmmword_20822AB10);
              v863 = vqtbl1q_s8(v863, (int8x16_t)xmmword_20822AB20);
              v916 = (int8x16_t *)&v896[(v894 + v908)];
              *v916 = v915;
              v916[1] = v863;
              v908 += 8;
            }
            while (v900 != v908);
            v902 = v869 - (v869 & 7);
            if ((v869 & 7) == 0)
              goto LABEL_1382;
            goto LABEL_1380;
          }
          v909 = 0;
          do
          {
            v910 = *(int8x16_t *)&v901[v909];
            v911 = *(int8x16_t *)&v901[v909 + 16];
            v912 = vqtbl1q_s8(v910, (int8x16_t)xmmword_20822AB10);
            v913 = vqtbl1q_s8(v910, (int8x16_t)xmmword_20822AB20);
            v914 = (int8x16_t *)&v896[(v894 + v909)];
            v914[2] = vqtbl1q_s8(v910, (int8x16_t)xmmword_20822AB30);
            v914[3] = vqtbl1q_s8(v910, (int8x16_t)xmmword_20822AB40);
            v863 = vqtbl1q_s8(v911, (int8x16_t)xmmword_20822AB10);
            *v914 = v912;
            v914[1] = v913;
            v914[6] = vqtbl1q_s8(v911, (int8x16_t)xmmword_20822AB30);
            v914[7] = vqtbl1q_s8(v911, (int8x16_t)xmmword_20822AB40);
            v914[4] = v863;
            v914[5] = vqtbl1q_s8(v911, (int8x16_t)xmmword_20822AB20);
            v909 += 32;
          }
          while (v899 != v909);
          if ((v869 & 0x1F) == 0)
            goto LABEL_1382;
          v908 = v869 - (v869 & 0x1F);
          if ((v869 & 0x1F) >= 8)
            goto LABEL_1399;
          v903 = &v901[v899];
          v902 = v869 - (v869 & 0x1F);
        }
LABEL_1380:
        v904 = v894 + v897 * v902;
        do
        {
          v905 = *v903++;
          v896[v904] = v905;
          v904 += v897;
        }
        while (v903 != &v901[v869]);
LABEL_1382:
        v901 += v872;
        ++v894;
        if (v901 == v895)
          goto LABEL_1360;
      }
      v902 = 0;
LABEL_1379:
      v903 = v901;
      goto LABEL_1380;
    }
LABEL_1360:
    v875 = v1084[0];
    v1084[0] = 0;
    if (v875)
      (*(void (**)(void *))(*(_QWORD *)v875 + 8))(v875);
    v876 = v821[1];
    if (v876 >= v821[2])
    {
      v882 = sub_207DDA634(v821, (uint64_t)__src);
    }
    else
    {
      v877 = (int)v1023[0];
      v878 = HIDWORD(v1023[0]);
      v879 = HIDWORD(v1023[0]) * LODWORD(v1023[0]);
      v880 = 4 * (HIDWORD(v1023[0]) * LODWORD(v1023[0]));
      *(_QWORD *)v876 = 0;
      *(_QWORD *)(v876 + 8) = ((v880 + 31) & 0x7FFFFFFE0) >> 2;
      v881 = (void *)MEMORY[0x20BD028B4]();
      *(_QWORD *)v876 = v881;
      if (v879)
        memcpy(v881, __src[0], v880);
      *(_DWORD *)(v876 + 16) = v877;
      *(_DWORD *)(v876 + 20) = v878;
      v882 = v876 + 24;
    }
    v955[1] = v882;
    v883 = *((_DWORD *)v993 + 67);
    v884 = *((_DWORD *)v993 + 66);
    v1084[1] = (void *)(((4 * v884 * v883 + 31) & 0x7FFFFFFE0uLL) >> 2);
    v1084[0] = (void *)MEMORY[0x20BD028B4]();
    *(_QWORD *)&v1085 = __PAIR64__(v884, v883);
    v886 = v993[26];
    v887 = (std::__shared_weak_count *)v993[27];
    if (v887)
    {
      v888 = (unint64_t *)&v887->__shared_owners_;
      do
        v889 = __ldxr(v888);
      while (__stxr(v889 + 1, v888));
      do
        v890 = __ldaxr(v888);
      while (__stlxr(v890 - 1, v888));
      if (!v890)
      {
        ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
        std::__shared_weak_count::__release_weak(v887);
      }
    }
    if (v886)
    {
      if (*((_BYTE *)v993 + 281))
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v993[26] + 96))(&v1019, v993[26], 1);
        v891 = v993[33];
        v892 = (unsigned __int8 *)v993[29];
        v893 = HIDWORD(v891);
        if (!*((_BYTE *)v993 + 280))
          goto LABEL_1408;
      }
      else
      {
        v1019 = 0;
        v891 = v993[33];
        v892 = (unsigned __int8 *)v993[29];
        v893 = HIDWORD(v891);
        if (!*((_BYTE *)v993 + 280))
          goto LABEL_1408;
      }
LABEL_1406:
      if (v892)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)v993[26] + 88))(v993[26], 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v892 = (unsigned __int8 *)v993[29];
        LODWORD(v893) = *((_DWORD *)v993 + 67);
      }
    }
    else
    {
      v1019 = 0;
      v891 = v993[33];
      v892 = (unsigned __int8 *)v993[29];
      v893 = HIDWORD(v891);
      if (*((_BYTE *)v993 + 280))
        goto LABEL_1406;
    }
LABEL_1408:
    v917 = *((unsigned int *)v993 + 69);
    v918 = (v917 * v893);
    if ((_DWORD)v918)
      v919 = v891 == 0;
    else
      v919 = 1;
    if (!v919)
    {
      v928 = 0;
      v929 = &v892[v918];
      v930 = v1084[0];
      v931 = v1085;
      v932 = (char *)v1084[0] + 4 * v891;
      v933 = v891 - (v891 & 0x1F);
      v934 = v891 - (v891 & 7);
      v935 = v892;
      while (v891 >= 8uLL)
      {
        v936 = 0;
        v940 = __CFADD__((_DWORD)v928, v891 - 1);
        if (v931 != 1 || v940)
          goto LABEL_1477;
        v937 = v935;
        if (!(((unint64_t)v891 - 1) >> 32))
        {
          v941 = v928;
          if (v935 < (unsigned __int8 *)&v932[v941 * 4]
            && &v930[v941] < (_DWORD *)&v892[v891 + v928 * v917])
          {
            break;
          }
          if (v891 < 0x20uLL)
          {
            v942 = 0;
LABEL_1497:
            v937 = &v935[v934];
            do
            {
              v885.i64[0] = *(_QWORD *)&v935[v942];
              v949 = vqtbl1q_s8(v885, (int8x16_t)xmmword_20822AB10);
              v885 = vqtbl1q_s8(v885, (int8x16_t)xmmword_20822AB20);
              v950 = (int8x16_t *)&v930[(v928 + v942)];
              *v950 = v949;
              v950[1] = v885;
              v942 += 8;
            }
            while (v934 != v942);
            v936 = v891 - (v891 & 7);
            if ((v891 & 7) == 0)
              goto LABEL_1480;
            goto LABEL_1478;
          }
          v943 = 0;
          do
          {
            v944 = *(int8x16_t *)&v935[v943];
            v945 = *(int8x16_t *)&v935[v943 + 16];
            v946 = vqtbl1q_s8(v944, (int8x16_t)xmmword_20822AB10);
            v947 = vqtbl1q_s8(v944, (int8x16_t)xmmword_20822AB20);
            v948 = (int8x16_t *)&v930[(v928 + v943)];
            v948[2] = vqtbl1q_s8(v944, (int8x16_t)xmmword_20822AB30);
            v948[3] = vqtbl1q_s8(v944, (int8x16_t)xmmword_20822AB40);
            v885 = vqtbl1q_s8(v945, (int8x16_t)xmmword_20822AB10);
            *v948 = v946;
            v948[1] = v947;
            v948[6] = vqtbl1q_s8(v945, (int8x16_t)xmmword_20822AB30);
            v948[7] = vqtbl1q_s8(v945, (int8x16_t)xmmword_20822AB40);
            v948[4] = v885;
            v948[5] = vqtbl1q_s8(v945, (int8x16_t)xmmword_20822AB20);
            v943 += 32;
          }
          while (v933 != v943);
          if ((v891 & 0x1F) == 0)
            goto LABEL_1480;
          v942 = v891 - (v891 & 0x1F);
          if ((v891 & 0x1F) >= 8)
            goto LABEL_1497;
          v937 = &v935[v933];
          v936 = v891 - (v891 & 0x1F);
        }
LABEL_1478:
        v938 = v928 + v931 * v936;
        do
        {
          v939 = *v937++;
          v930[v938] = v939;
          v938 += v931;
        }
        while (v937 != &v935[v891]);
LABEL_1480:
        v935 += v917;
        ++v928;
        if (v935 == v929)
          goto LABEL_1413;
      }
      v936 = 0;
LABEL_1477:
      v937 = v935;
      goto LABEL_1478;
    }
LABEL_1413:
    v920 = v1019;
    v1019 = 0;
    if (v920)
      (*(void (**)(void *))(*(_QWORD *)v920 + 8))(v920);
    v921 = v955[1];
    if (v921 >= v955[2])
    {
      v927 = sub_207DDA634(v955, (uint64_t)v1084);
    }
    else
    {
      v922 = v1085;
      v923 = DWORD1(v1085);
      v924 = DWORD1(v1085) * v1085;
      v925 = 4 * (DWORD1(v1085) * v1085);
      *(_QWORD *)v921 = 0;
      *(_QWORD *)(v921 + 8) = ((v925 + 31) & 0x7FFFFFFE0) >> 2;
      v926 = (void *)MEMORY[0x20BD028B4]();
      *(_QWORD *)v921 = v926;
      if (v924)
        memcpy(v926, v1084[0], v925);
      *(_DWORD *)(v921 + 16) = v922;
      *(_DWORD *)(v921 + 20) = v923;
      v927 = v921 + 24;
    }
    v955[1] = v927;
    v591 = v993;
    if (v1084[0])
      operator delete[](v1084[0]);
    if (__src[0])
      operator delete[](__src[0]);
    if (v1030[0])
    {
      v1030[1] = v1030[0];
      operator delete(v1030[0]);
    }
    if (v1069[0])
    {
      v1069[1] = v1069[0];
      operator delete(v1069[0]);
    }
    v787 = v956;
  }
  sub_208102B48((_QWORD **)v591 + 12, (uint64_t *)v1054, (uint64_t *)v1038, v787);
  if (v1038[0])
    operator delete(v1038[0]);
  if (v1054[0])
    operator delete(v1054[0]);
  if (v1082[0])
    operator delete(v1082[0]);
  if (v1080[1])
    operator delete(v1080[1]);
  if (v1079[0])
    operator delete(v1079[0]);
  if (v1077[1])
    operator delete(v1077[1]);
  if (v1076[0])
    operator delete(v1076[0]);
  if (v1010[0])
    operator delete(v1010[0]);
  if (v1008[1])
    operator delete(v1008[1]);
  if (v1007[0])
    operator delete(v1007[0]);
  if (*(_QWORD *)&v1005[24])
    operator delete(*(void **)&v1005[24]);
  if (*(_QWORD *)v1005)
    operator delete(*(void **)v1005);
  if (v1103[0])
    operator delete(v1103[0]);
  if (v1101[1])
    operator delete(v1101[1]);
  if (v1100[0])
    operator delete(v1100[0]);
  if (*(_QWORD *)&v1098[24])
    operator delete(*(void **)&v1098[24]);
  if (*(_QWORD *)v1098)
    operator delete(*(void **)v1098);
  if (v1111[0])
    operator delete(v1111[0]);
  if (v1109[1])
    operator delete(v1109[1]);
  if (v1108[0])
    operator delete(v1108[0]);
  if (__p[1])
    operator delete(__p[1]);
  if (v1105[0])
    operator delete(v1105[0]);
  return kdebug_trace();
}

void sub_207DD5414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *v68;
  void *v69;

  if (STACK[0x5B0])
    operator delete[]((void *)STACK[0x5B0]);
  if (a67)
    operator delete[](a67);
  v68 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v68;
    operator delete(v68);
  }
  v69 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v69;
    operator delete(v69);
  }
  if (STACK[0x2D0])
    operator delete((void *)STACK[0x2D0]);
  if (STACK[0x3B0])
    operator delete((void *)STACK[0x3B0]);
  sub_207DD6904((uint64_t)&STACK[0x530]);
  sub_207DD6904((uint64_t)&a33);
  sub_207DD6904((uint64_t)&STACK[0x650]);
  sub_207DD6904((uint64_t)&STACK[0x1CD0]);
  sub_207CD822C((uint64_t)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_207DD57F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a67;
  void *v68;
  void *v69;
  void *v70;

  if (a64)
  {
    operator delete(a64);
    v68 = a33;
    if (!a33)
    {
LABEL_3:
      v69 = (void *)STACK[0x650];
      if (!STACK[0x650])
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v68 = a33;
    if (!a33)
      goto LABEL_3;
  }
  operator delete(v68);
  v69 = (void *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_4:
    v70 = (void *)STACK[0x1CD0];
    if (!STACK[0x1CD0])
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  STACK[0x658] = (unint64_t)v69;
  operator delete(v69);
  v70 = (void *)STACK[0x1CD0];
  if (!STACK[0x1CD0])
  {
LABEL_6:
    sub_207DD6904((uint64_t)&a67);
    sub_207DD6904((uint64_t)&STACK[0x250]);
    sub_207DD6960((uint64_t)&STACK[0x2D0]);
    sub_207DD6960((uint64_t)&STACK[0x3B0]);
    sub_207DD6960((uint64_t)&STACK[0x430]);
    sub_207DD6960((uint64_t)&STACK[0x4B0]);
    sub_207DD6960((uint64_t)&STACK[0x530]);
    sub_207CD822C((uint64_t)&STACK[0x5B0]);
    _Unwind_Resume(a1);
  }
LABEL_5:
  STACK[0x1CD8] = (unint64_t)v70;
  operator delete(v70);
  goto LABEL_6;
}

void sub_207DD5894()
{
  unint64_t v0;
  unint64_t v1;

  v0 = STACK[0x650];
  STACK[0x650] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  v1 = STACK[0x1CD0];
  STACK[0x1CD0] = 0;
  if (v1)
    (*(void (**)(unint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x207DD5838);
}

uint64_t sub_207DD58CC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DD5934(uint64_t a1, unsigned int a2, __int128 *a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v9;
  uint64_t v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  void *__p;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned __int8 v36;
  char v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[4];

  v40[2] = *MEMORY[0x24BDAC8D0];
  sub_207CCB3BC(__dst, a3);
  v9 = atomic_load((unsigned __int8 *)&qword_2545308F0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2545308F0))
  {
    __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C50, &dword_207C77000);
    __cxa_guard_release(&qword_2545308F0);
  }
  sub_207CCB3BC(&__p, (__int128 *)__dst);
  v10 = a2;
  if (!v37)
  {
    *(_QWORD *)a1 = a2;
    *(_QWORD *)(a1 + 8) = &off_253E50C50;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    goto LABEL_19;
  }
  v11 = v30;
  if (v30)
  {
    v12 = __p;
    v40[0] = v29;
    *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v29 + 7);
    LOBYTE(a2) = HIBYTE(v29);
    v29 = 0uLL;
    __p = 0;
    v13 = v36;
    if (v36)
      goto LABEL_5;
  }
  else
  {
    v12 = 0;
    v13 = v36;
    if (v36)
    {
LABEL_5:
      v14 = v31;
      v39[0] = v32;
      *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)&v32 + 7);
      v6 = HIBYTE(v32);
      v31 = 0;
      v32 = 0uLL;
      v5 = v33;
      v3 = v34;
      v38[0] = v35;
      *(_QWORD *)((char *)v38 + 7) = *(_QWORD *)((char *)&v35 + 7);
      v4 = HIBYTE(v35);
      v34 = 0;
      v35 = 0uLL;
      if (!v30)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  v14 = 0;
  if (!v30)
    goto LABEL_12;
LABEL_10:
  if (SHIBYTE(v29) < 0)
  {
    v18 = v10;
    operator delete(__p);
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = &off_253E50C50;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    v15 = (_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 40) = 0;
LABEL_13:
    v16 = v40[0];
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v40 + 7);
    *(_BYTE *)(a1 + 39) = a2;
    v40[0] = 0;
    *(_QWORD *)((char *)v40 + 7) = 0;
    *(_BYTE *)(a1 + 40) = 1;
    LOBYTE(a2) = 0;
    v12 = 0;
    goto LABEL_14;
  }
LABEL_12:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = &off_253E50C50;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v15 = (_BYTE *)(a1 + 112);
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_13;
LABEL_14:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    v17 = v39[0];
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v39 + 7);
    *(_BYTE *)(a1 + 71) = v6;
    v39[0] = 0;
    *(_QWORD *)((char *)v39 + 7) = 0;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = v38[0];
    *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v38 + 7);
    *(_BYTE *)(a1 + 103) = v4;
    v38[0] = 0;
    *(_QWORD *)((char *)v38 + 7) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *v15 = 1;
  if (v11 && (a2 & 0x80) != 0)
    operator delete(v12);
LABEL_19:
  if (!v27)
    return;
  if (v26)
  {
    if ((v25 & 0x80000000) == 0)
    {
      if ((v23 & 0x80000000) == 0)
        goto LABEL_23;
LABEL_28:
      operator delete(v22);
      if (!v21)
        return;
      goto LABEL_24;
    }
    operator delete(v24);
    if (v23 < 0)
      goto LABEL_28;
  }
LABEL_23:
  if (!v21)
    return;
LABEL_24:
  if (v20 < 0)
    operator delete(__dst[0]);
}

void sub_207DD5C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CCB148((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DD5C1C(unsigned __int16 *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_207CAB414)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0750B0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C075080[v3])(v5, v2);
  return result;
}

void sub_207DD5D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DD5D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_207DD5D44(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  int64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  unsigned int v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  _BYTE *v50;
  unsigned int *v51;
  int64_t v52;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  unsigned int *v58;
  uint64_t v59;
  __int128 v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t j;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t k;
  _QWORD *v85;
  unsigned int *v86;

  v5 = a1;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 176) = (unint64_t)*(unsigned int *)(a2 + 180) << 32;
  if (a1[5] >= 2uLL)
  {
    v6 = 0;
    v7 = a1[1];
    v8 = 1;
    do
    {
      v9 = a1[4];
      v10 = vcvts_n_u32_f32(*(float *)(*(_QWORD *)(v7 + (((unint64_t)(v9 + v6) >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * ((v9 + v6) & 0x3FF)), 2uLL)% 0x5A0;
      v11 = (unint64_t)(float)((float)(*(float *)(*(_QWORD *)(v7 + (((v9 + v8) >> 7) & 0x1FFFFFFFFFFFFF8))
                                                       + 4 * ((v9 + v8) & 0x3FF))
                                            * 4.0)
                                    + 1.0)
          % 0x5A0;
      if (v10 <= v11)
      {
        for (; v11 != v10; ++v10)
          *(_QWORD *)(a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      }
      else
      {
        do
        {
          *(_QWORD *)(a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
          ++v10;
        }
        while (v10 != 1440);
        if (v11)
        {
          for (i = 0; i != v11; ++i)
            *(_QWORD *)(a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
        }
      }
      v6 += 2;
      v8 += 2;
    }
    while (v8 < a1[5]);
  }
  if (a4)
  {
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_QWORD *)(a3 + 176) = (unint64_t)*(unsigned int *)(a3 + 180) << 32;
    v86 = 0;
    v13 = a1[5];
    if (v13 < 2)
    {
      v14 = 0;
      v15 = 0;
LABEL_48:
      v22 = v14;
LABEL_49:
      v43 = vcvtms_s32_f32(*(float *)(*(_QWORD *)(v5[1] + ((v5[4] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v5[4] & 0x3FFLL))- (float)(*(float *)(*(_QWORD *)(v5[1] + (((v13 + v5[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * ((v13 + v5[4] - 1) & 0x3FF))+ -360.0));
      if (v22 < v15)
      {
        *v22 = v43;
        v44 = (uint64_t)(v22 + 1);
LABEL_72:
        std::__sort<std::__less<int,int> &,int *>();
        if (v44 - (uint64_t)v86 >= 4)
        {
          v63 = v86 + 1;
          v62 = *v86;
          if (v86 + 1 != (unsigned int *)v44)
          {
            v64 = 1;
            v65 = 1;
            do
            {
              v66 = v63;
              v67 = *v63;
              v68 = *(v66 - 1);
              if (v65 <= v64)
                v69 = v62;
              else
                v69 = *(v66 - 1);
              if (v65 <= v64)
                v70 = v64;
              else
                v70 = v65;
              if (v67 == v68)
              {
                ++v65;
              }
              else
              {
                v62 = v69;
                v65 = 1;
              }
              if (v67 != v68)
                v64 = v70;
              v63 = v66 + 1;
            }
            while (v66 + 1 != (unsigned int *)v44);
            if (v65 > v64)
              v62 = *v66;
          }
        }
        else
        {
          v62 = 0;
        }
        v71 = v5[5];
        if (v71 >= 3)
        {
          v72 = v5[1];
          v73 = 2;
          v74 = 1;
          do
          {
            v75 = v5[4];
            v76 = *(float *)(*(_QWORD *)(v72 + (((v75 + v73) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v75 + v73) & 0x3FF));
            v77 = *(float *)(*(_QWORD *)(v72 + (((unint64_t)(v75 + v74) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((v75 + v74) & 0x3FF));
            if (vcvtms_s32_f32(v76 - v77) - v62 + 2 >= 5)
            {
              v78 = vcvts_n_u32_f32(v77, 2uLL) % 0x5A0;
              v79 = (unint64_t)(float)((float)(v76 * 4.0) + 1.0) % 0x5A0;
              if (v78 <= v79)
              {
                for (; v79 != v78; ++v78)
                {
                  if (v78 >= 0x5A0)
                    sub_207CA4018("bitset set argument out of range");
                  *(_QWORD *)(a3 + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v78;
                }
              }
              else
              {
                do
                {
                  *(_QWORD *)(a3 + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v78;
                  ++v78;
                }
                while (v78 != 1440);
                if (v79)
                {
                  for (j = 0; j != v79; ++j)
                  {
                    if (j == 1440)
                      sub_207CA4018("bitset set argument out of range");
                    *(_QWORD *)(a3 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << j;
                  }
                }
              }
            }
            v74 += 2;
            v73 += 2;
            v71 = v5[5];
          }
          while (v73 < v71);
        }
        if (v43 - v62 - 3 < 0xFFFFFFFB)
        {
          v81 = v5[1];
          v82 = vcvts_n_u32_f32(*(float *)(*(_QWORD *)(v81 + (((v71 + v5[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * ((v71 + v5[4] - 1) & 0x3FF)), 2uLL)% 0x5A0;
          v83 = (unint64_t)(float)((float)(*(float *)(*(_QWORD *)(v81 + ((v5[4] >> 7) & 0x1FFFFFFFFFFFFF8))
                                                           + 4 * (v5[4] & 0x3FFLL))
                                                * 4.0)
                                        + 1.0)
              % 0x5A0;
          if (v82 <= v83)
          {
            for (; v83 != v82; ++v82)
            {
              if (v82 >= 0x5A0)
                sub_207CA4018("bitset set argument out of range");
              *(_QWORD *)(a3 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v82;
            }
          }
          else
          {
            do
            {
              *(_QWORD *)(a3 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v82;
              ++v82;
            }
            while (v82 != 1440);
            if (v83)
            {
              for (k = 0; k != v83; ++k)
              {
                if (k == 1440)
                  sub_207CA4018("bitset set argument out of range");
                *(_QWORD *)(a3 + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << k;
              }
            }
          }
        }
        if (v86)
          operator delete(v86);
        return;
      }
      v45 = (char *)v22 - (char *)v14;
      v46 = v22 - v14;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 62)
        sub_207CA420C();
      if (((char *)v15 - (char *)v14) >> 1 > v47)
        v47 = ((char *)v15 - (char *)v14) >> 1;
      if ((unint64_t)((char *)v15 - (char *)v14) >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
      {
        if (v48 >> 62)
          sub_207CA3AB8();
        v49 = v22;
        v50 = operator new(4 * v48);
        v22 = v49;
        v51 = (unsigned int *)&v50[4 * v46];
        *v51 = v43;
        v44 = (uint64_t)(v51 + 1);
        v52 = (char *)v22 - (char *)v14;
        if (v22 == v14)
          goto LABEL_70;
      }
      else
      {
        v50 = 0;
        v51 = (unsigned int *)(4 * v46);
        *(_DWORD *)(4 * v46) = v43;
        v44 = 4 * v46 + 4;
        v52 = (char *)v22 - (char *)v14;
        if (v22 == v14)
          goto LABEL_70;
      }
      v53 = v52 - 4;
      if (v53 >= 0x2C)
      {
        if ((unint64_t)((char *)v22 - v50 - v45) >= 0x20)
        {
          v55 = (v53 >> 2) + 1;
          v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
          v54 = &v22[v56 / 0xFFFFFFFFFFFFFFFCLL];
          v51 = (unsigned int *)((char *)v51 - v56);
          v57 = &v50[4 * v46 - 16];
          v58 = v22 - 4;
          v59 = v55 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            *v57 = v60;
            v57 -= 2;
            v58 -= 8;
            v59 -= 8;
          }
          while (v59);
          if (v55 == (v55 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_70:
            v86 = v51;
            if (v14)
              operator delete(v14);
            goto LABEL_72;
          }
        }
        else
        {
          v54 = v22;
        }
      }
      else
      {
        v54 = v22;
      }
      do
      {
        v61 = *--v54;
        *--v51 = v61;
      }
      while (v54 != v14);
      goto LABEL_70;
    }
    if ((v13 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v16 = v13 >> 1;
    v17 = a1[5];
    v18 = (unsigned int *)operator new(4 * (v13 >> 1));
    v14 = v18;
    v15 = &v18[v16];
    v86 = v18;
    if (v17 < 3)
    {
      v13 = 2;
      goto LABEL_48;
    }
    v13 = v17;
    v19 = 2;
    v20 = 1;
    v21 = v18;
    v85 = v5;
    while (1)
    {
      v23 = v5[4];
      v24 = vcvtms_s32_f32(*(float *)(*(_QWORD *)(v5[1] + (((v23 + v19) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v23 + v19) & 0x3FF))- *(float *)(*(_QWORD *)(v5[1] + (((unint64_t)(v23 + v20) >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * ((v23 + v20) & 0x3FF)));
      if (v21 >= v15)
        break;
      *v21 = v24;
      v22 = v21 + 1;
LABEL_20:
      v20 += 2;
      v19 += 2;
      v21 = v22;
      if (v19 >= v13)
        goto LABEL_49;
    }
    v25 = v21 - v14;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62)
      sub_207CA420C();
    if (((char *)v15 - (char *)v14) >> 1 > v26)
      v26 = ((char *)v15 - (char *)v14) >> 1;
    if ((unint64_t)((char *)v15 - (char *)v14) >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 >> 62)
        sub_207CA3AB8();
      v28 = v13;
      v29 = operator new(4 * v27);
      v13 = v28;
      v30 = (unsigned int *)&v29[4 * v25];
      *v30 = v24;
      v22 = v30 + 1;
      v31 = (char *)v21 - (char *)v14;
      if (v21 != v14)
      {
LABEL_31:
        v32 = v31 - 4;
        if (v32 < 0xBC
          || (v36 = ((char *)(v21 - 1) - (char *)v14) & 0xFFFFFFFFFFFFFFFCLL,
              &v29[(char *)v21 - (char *)v14 - 4 - v36] > &v29[(char *)v21 - (char *)v14 - 4])
          || (unsigned int *)((char *)v21 - v36 - 4) > v21 - 1
          || (unint64_t)((char *)v14 - v29) < 0x20)
        {
          v33 = v21;
          v5 = v85;
        }
        else
        {
          v37 = (v32 >> 2) + 1;
          v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
          v33 = &v21[v38 / 0xFFFFFFFFFFFFFFFCLL];
          v30 = (unsigned int *)((char *)v30 - v38);
          v39 = &v29[4 * v25 - 16];
          v40 = v21 - 4;
          v41 = v37 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 8;
            v41 -= 8;
          }
          while (v41);
          v5 = v85;
          if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_34:
            v15 = (unsigned int *)&v29[4 * v27];
            v86 = v30;
            if (!v14)
            {
LABEL_36:
              v14 = v30;
              goto LABEL_20;
            }
LABEL_35:
            v35 = v22;
            operator delete(v14);
            v22 = v35;
            v13 = v5[5];
            goto LABEL_36;
          }
        }
        do
        {
          v34 = *--v33;
          *--v30 = v34;
        }
        while (v33 != v14);
        goto LABEL_34;
      }
    }
    else
    {
      v29 = 0;
      v30 = (unsigned int *)(4 * v25);
      *(_DWORD *)(4 * v25) = v24;
      v22 = (unsigned int *)(4 * v25 + 4);
      v31 = (char *)v21 - (char *)v14;
      if (v21 != v14)
        goto LABEL_31;
    }
    v5 = v85;
    v15 = (unsigned int *)&v29[4 * v27];
    v86 = v30;
    if (!v14)
      goto LABEL_36;
    goto LABEL_35;
  }
}

void sub_207DD6670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DD66A8()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  float *v11;
  float *v12;
  float *v13;
  int v14;
  _QWORD *v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BYTE v25[5760];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (float *)v0;
  bzero(v25, 0x1680uLL);
  bzero(&v24, 0x1680uLL);
  v14 = 0;
  v15 = &v10[v8 >> 6];
  while (v13 != v12 || v10 != v15 || v14 != (v8 & 0x3F))
  {
    v16 = *v13++;
    v17 = 4 * (vcvts_n_u32_f32(v16, 2uLL) % 0x5A0);
    ++*(_DWORD *)&v25[v17];
    *(_DWORD *)(v25 + v17 + 5758) += (*v10 >> v14) & 1;
    v10 += v14 == 63;
    if (v14 == 63)
      v14 = 0;
    else
      ++v14;
  }
  v18 = 0;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 176) = (unint64_t)*(unsigned int *)(v6 + 180) << 32;
  *(_OWORD *)v6 = 0u;
  do
  {
    v20 = *(_DWORD *)&v25[4 * v18];
    if (v20)
    {
      v21 = v18 >> 6;
      v22 = 1 << v18;
      if (v20 >= 2 * *(_DWORD *)(v25 + 4 * v18 + 5758))
        v19 = *(_QWORD *)(v6 + 8 * v21) & ~v22;
      else
        v19 = *(_QWORD *)(v6 + 8 * v21) | v22;
      *(_QWORD *)(v6 + 8 * v21) = v19;
    }
    ++v18;
  }
  while (v18 != 1440);
  if (v2)
  {
    v23 = 0;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_QWORD *)(v4 + 176) = (unint64_t)*(unsigned int *)(v4 + 180) << 32;
    *(_OWORD *)v4 = 0u;
    do
    {
      if (!*(_DWORD *)&v25[4 * v23])
        *(_QWORD *)(v4 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      ++v23;
    }
    while (v23 != 1440);
  }
}

uint64_t sub_207DD68C4(uint64_t a1)
{
  sub_207DDA328(a1 + 192);
  sub_207DDA328(a1 + 144);
  sub_207DDA328(a1 + 96);
  sub_207DDA328(a1 + 48);
  return sub_207DDA328(a1);
}

uint64_t sub_207DD6904(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 96);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 72);
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 48);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 24);
  if (v5)
    operator delete(v5);
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207DD6960(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_207DD69D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_207DD6A20(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24C074F60;
  a1[1] = 0;
  if (v2)
  {
    v3 = (void *)sub_207DDC0B4(v2);
    operator delete(v3);
  }
  return a1;
}

void sub_207DD6A5C(_QWORD *__p)
{
  uint64_t v2;
  void *v3;

  v2 = __p[1];
  *__p = &off_24C074F60;
  __p[1] = 0;
  if (v2)
  {
    v3 = (void *)sub_207DDC0B4(v2);
    operator delete(v3);
  }
  operator delete(__p);
}

void sub_207DD6A98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  void *v6[2];
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    sub_207DE0F5C(v3, a2);
    return;
  }
  sub_207CCB5A4((uint64_t)v6, "Decoder creation failed");
  v14 = 1;
  sub_207CCAFD0(0xCu, (__int128 *)v6, (uint64_t)&v15);
  *(_OWORD *)a2 = v15;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v25)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v14)
      return;
    goto LABEL_14;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v4 = v18;
  if (v18)
  {
    *(_OWORD *)(a2 + 16) = __p;
    *(_QWORD *)(a2 + 32) = v17;
    v17 = 0;
    __p = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v24)
  {
    v5 = v21;
    *(_QWORD *)(a2 + 64) = v20;
    *(_OWORD *)(a2 + 48) = v19;
    v19 = 0uLL;
    *(_QWORD *)(a2 + 72) = v5;
    *(_OWORD *)(a2 + 80) = v22;
    *(_QWORD *)(a2 + 96) = v23;
    v20 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v4 && SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (v14)
  {
LABEL_14:
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
      if (v10 < 0)
        operator delete(v9);
    }
    if (v8)
    {
      if (v7 < 0)
        operator delete(v6[0]);
    }
  }
}

void sub_207DD6C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DD6C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, char *a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  float32x2_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  __n128 v75;
  uint64_t v76;
  float v77;
  int v78;
  float *v79;
  unint64_t v80;
  float *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float *v85;
  float *v86;
  std::string *v87;
  unint64_t v88;
  void *v89;
  int v90;
  int v91;
  std::__shared_weak_count *v92;
  int v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float *v98;
  float *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  int64_t v109;
  unint64_t v110;
  float *v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  float *v117;
  uint64_t v118;
  __int128 v119;
  float v120;
  int v121;
  float *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  float *v128;
  float *v129;
  int v130;
  float v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  float *v135;
  float *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  float *v147;
  uint64_t v148;
  int64_t v149;
  unint64_t v150;
  float *v151;
  int v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD *v156;
  float *v157;
  uint64_t v158;
  __int128 v159;
  float v160;
  int v161;
  float *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  float *v167;
  float *v168;
  int v169;
  float v170;
  unint64_t v171;
  unint64_t v172;
  float *v173;
  float *v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  float v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  float *v185;
  uint64_t v186;
  int64_t v187;
  unint64_t v188;
  float *v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _OWORD *v194;
  float *v195;
  uint64_t v196;
  __int128 v197;
  __CVBuffer *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  __CVBuffer *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  std::__shared_weak_count_vtbl **v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  VTPixelTransferSessionRef *v213;
  void (**v214)(void);
  void (*v215)(void);
  std::__shared_weak_count *v216;
  uint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count_vtbl *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  __int32 v240;
  __int16 v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t (***v248)();
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::string::size_type size;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  unsigned __int32 v286;
  size_t v287;
  size_t v288;
  const void *v289;
  void *v290;
  std::__shared_weak_count *v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  std::string::size_type v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::logic_error *exception;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  float *v348;
  uint64_t v349;
  unint64_t v350;
  int v351;
  float *v352;
  float *v353;
  unsigned __int32 v355;
  _QWORD v358[2];
  std::__shared_weak_count *v359;
  std::string v360;
  void *__src[2];
  __int128 v362;
  __n128 v363;
  __int128 v364;
  __int128 __p;
  uint64_t v366;
  unsigned __int8 v367;
  __int128 v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  __int128 v371;
  uint64_t v372;
  char v373;
  uint64_t (**v374)();
  uint64_t v375;
  std::__shared_weak_count *v376;
  uint64_t v377;
  char v378;
  uint64_t v379;
  _QWORD v380[4];
  int v381;
  __int128 __dst;
  _BYTE v383[7];
  char v384;
  char v385;
  void *v386;
  char v387;
  void *v388;
  char v389;
  char v390;
  char v391;
  void *v392[2];
  char v393;
  char v394;
  void *v395;
  char v396;
  void *v397;
  char v398;
  char v399;
  char v400;
  __int128 v401;
  __int128 v402;
  int v403;
  int8x16_t v404[5];
  char *v405;
  __int128 v406;
  float32x2_t v407;
  __int32 v408;
  uint64_t v409;
  __int32 v410;
  __int16 v411;
  char *v412;
  uint64_t v413;
  _BYTE v414[32];
  __n128 v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  simd_float3x3 v418;

  v401 = 0u;
  v402 = 0u;
  v403 = 733221696;
  kdebug_trace();
  v9 = *(uint64_t **)(a2 + 8);
  if (!v9)
    goto LABEL_42;
  v10 = *v9;
  v11 = (std::__shared_weak_count *)v9[1];
  if (!v11)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10)
      goto LABEL_42;
  }
  else
  {
LABEL_7:
    if (!v10)
      goto LABEL_42;
  }
  v15 = *(uint64_t **)(a2 + 8);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (!v15)
  {
    v34 = 1;
    goto LABEL_37;
  }
  v19 = *v15;
  v20 = (std::__shared_weak_count *)v15[1];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (!v19)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if (v19)
LABEL_18:
    sub_20815FC78((uint64_t)v15);
LABEL_19:
  v24 = *v15;
  v25 = (std::__shared_weak_count *)v15[1];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    v30 = *v15;
    v29 = (std::__shared_weak_count *)v15[1];
    if (v29)
    {
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v30 = *v15;
  }
  v34 = v24 == 0;
  if (v30)
    sub_20815FE54((uint64_t)v15);
LABEL_37:
  if (v16)
  {
    v35 = (unint64_t *)&v16->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v34)
        goto LABEL_63;
LABEL_42:
      sub_207CCB5A4((uint64_t)v392, "Got invalid camera frame. It should be non-null and readable!");
      v400 = 1;
      sub_207CCAFD0(0x16u, (__int128 *)v392, (uint64_t)&v364);
      *(_OWORD *)a6 = v364;
      *(_BYTE *)(a6 + 16) = 0;
      *(_BYTE *)(a6 + 112) = 0;
      if ((_BYTE)v374)
      {
        *(_BYTE *)(a6 + 40) = 0;
        v37 = v367;
        if (v367)
        {
          *(_OWORD *)(a6 + 16) = __p;
          *(_QWORD *)(a6 + 32) = v366;
          v366 = 0;
          __p = 0uLL;
          *(_BYTE *)(a6 + 40) = 1;
        }
        *(_BYTE *)(a6 + 48) = 0;
        *(_BYTE *)(a6 + 104) = 0;
        if (v373)
        {
          v38 = v370;
          *(_QWORD *)(a6 + 64) = v369;
          *(_OWORD *)(a6 + 48) = v368;
          v368 = 0uLL;
          *(_QWORD *)(a6 + 72) = v38;
          *(_OWORD *)(a6 + 80) = v371;
          *(_QWORD *)(a6 + 96) = v372;
          v369 = 0;
          v371 = 0uLL;
          v372 = 0;
          *(_BYTE *)(a6 + 104) = 1;
        }
        *(_BYTE *)(a6 + 112) = 1;
        *(_BYTE *)(a6 + 120) = 0;
        if (v37 && SHIBYTE(v366) < 0)
          operator delete((void *)__p);
        if (!v400)
          return kdebug_trace();
      }
      else
      {
        *(_BYTE *)(a6 + 120) = 0;
        if (!v400)
          return kdebug_trace();
      }
      if (!v399)
        goto LABEL_56;
      if (v398 < 0)
      {
        operator delete(v397);
        if ((v396 & 0x80000000) == 0)
        {
LABEL_56:
          if (!v394)
            return kdebug_trace();
          goto LABEL_57;
        }
      }
      else if ((v396 & 0x80000000) == 0)
      {
        goto LABEL_56;
      }
      operator delete(v395);
      if (!v394)
        return kdebug_trace();
LABEL_57:
      if (v393 < 0)
        operator delete(v392[0]);
      return kdebug_trace();
    }
  }
  if (v34)
    goto LABEL_42;
LABEL_63:
  if (sub_20815A764(a2) == 875704422)
  {
    memset(v380, 0, sizeof(v380));
    v381 = 733221704;
    kdebug_trace();
    v379 = 0x3F00000000000000;
    v39 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v364 = &off_24C0750D8;
    sub_207DD91FC(v39 + 288, (uint64_t *)&v364 + 1);
    *((_QWORD *)&v368 + 1) = &off_24C0750D8;
    sub_207DD91FC(v39 + 376, &v369);
    v374 = &off_24C0750D8;
    sub_207DD91FC(v39 + 464, &v375);
    v41 = v366;
    v42 = HIDWORD(v366);
    v43 = (float32x2_t *)*((_QWORD *)&__p + 1);
    if ((_BYTE)v368 && *((_QWORD *)&__p + 1))
    {
      v44 = *((_QWORD *)&v364 + 1);
      v45 = (std::__shared_weak_count *)__p;
      if ((_QWORD)__p)
      {
        v46 = (unint64_t *)(__p + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v44 + 88))(v44, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v43 = (float32x2_t *)*((_QWORD *)&__p + 1);
    }
    v49 = v371;
    if (v373 && (_QWORD)v371)
    {
      v50 = v369;
      v51 = v370;
      if (v370)
      {
        v52 = (unint64_t *)&v370->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
        do
          v54 = __ldaxr(v52);
        while (__stlxr(v54 - 1, v52));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v50 + 88))(v50, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v49 = v371;
    }
    v55 = v377;
    if (v378 && v377)
    {
      v56 = v375;
      v57 = v376;
      if (v376)
      {
        v58 = (unint64_t *)&v376->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
        do
          v60 = __ldaxr(v58);
        while (__stlxr(v60 - 1, v58));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v56 + 88))(v56, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v55 = v377;
    }
    v418.columns[0].f32[0] = sub_207DFA444(a2, (uint64_t)a3, v41, v42, &v379, (uint64_t)a4, v43, v40, 0, 0, 0, 0);
    *(uint64_t *)((char *)v404[1].i64 + 4) = 0;
    *(uint64_t *)((char *)&v404[1].i64[1] + 4) = 0x3F80000000000000;
    v404[0] = (int8x16_t)0x3F000000uLL;
    v404[1].i32[0] = 1056964608;
    sub_207CC4868((uint64_t)v404, (uint64_t)&v360, v418);
    v61.i32[0] = v404[1].i32[1];
    v62.i32[0] = v404[2].i32[0];
    v63.i32[0] = a3[1].i32[0];
    v64 = *(float32x2_t *)((char *)a3 + 12);
    v65.i32[0] = a3[2].i32[1];
    v66 = a3[3];
    v67.i32[0] = a3[4].i32[0];
    v68 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v404[0].i8, COERCE_FLOAT(*a3)), *(float32x2_t *)((char *)&v404[0].u64[1] + 4), *a3, 1), (float32x2_t)v404[1].u64[1], v63.f32[0]);
    v69 = (float32x2_t)vextq_s8(v404[0], v404[0], 8uLL).u64[0];
    v70 = vmla_f32(vmla_lane_f32(vmul_f32(v69, *a3), v61, *a3, 1), v63, v62);
    v71 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v404[0].i8, v64.f32[0]), *(float32x2_t *)((char *)&v404[0].u64[1] + 4), v64, 1), (float32x2_t)v404[1].u64[1], v65.f32[0]);
    v72 = vmla_f32(vmla_lane_f32(vmul_f32(v69, v64), v61, v64, 1), v65, v62);
    v73 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v404[0].i8, v66.f32[0]), *(float32x2_t *)((char *)&v404[0].u64[1] + 4), v66, 1), (float32x2_t)v404[1].u64[1], v67.f32[0]);
    v74 = vmla_f32(vmla_lane_f32(vmul_f32(v69, v66), v61, v66, 1), v67, v62);
    v62.i32[0] = HIDWORD(v360.__r_.__value_.__r.__words[2]);
    v65.i32[0] = (__int32)__src[1];
    v405 = (char *)vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v68, *(float *)&v360.__r_.__value_.__l.__data_), v71, (float32x2_t)v360.__r_.__value_.__l.__data_, 1), v73, *(float32x4_t *)&v360.__r_.__value_.__l.__data_, 2);
    *(float32x2_t *)((char *)&v406 + 4) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v68, *((float *)&v360.__r_.__value_.__r.__words[1] + 1)), v71, *(float32x2_t *)((char *)&v360.__r_.__value_.__r.__words[1] + 4), 1), v73, *((float *)&v360.__r_.__value_.__r.__words[2] + 1));
    LODWORD(v406) = vmla_f32(vmla_lane_f32(vmul_f32(v70, (float32x2_t)v360.__r_.__value_.__l.__data_), v72, (float32x2_t)v360.__r_.__value_.__l.__data_, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v360.__r_.__value_.__l.__data_, *(int8x16_t *)&v360.__r_.__value_.__l.__data_, 8uLL), v74).u32[0];
    HIDWORD(v406) = vmla_f32(vmla_lane_f32(vmul_f32(v70, *(float32x2_t *)((char *)&v360.__r_.__value_.__r.__words[1] + 4)), v72, *(float32x2_t *)((char *)&v360.__r_.__value_.__r.__words[1] + 4), 1), v62, v74).u32[0];
    v407 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v68, *(float *)__src), v71, (float32x2_t)__src[0], 1), v73, *(float *)&__src[1]);
    v408 = vmla_f32(vmla_lane_f32(vmul_f32(v70, (float32x2_t)__src[0]), v72, (float32x2_t)__src[0], 1), v65, v74).u32[0];
    v75.n128_f32[0] = sub_207DFA780(a2, (uint64_t)&v405, v41 >> 1, v42 >> 1, &v379, a4, v49, v55, 0, 0, 0, 0);
    if (!*(_BYTE *)(a5 + 80))
      goto LABEL_507;
    v76 = *(_QWORD *)(a1 + 8);
    memset(v404, 0, 72);
    v77 = *((float *)&v379 + 1);
    v78 = *(unsigned __int8 *)(v76 + 368);
    v79 = *(float **)(v76 + 320);
    if (*(_BYTE *)(v76 + 368) && v79)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v76 + 296) + 88))(*(_QWORD *)(v76 + 296), 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1331");
      v79 = *(float **)(v76 + 320);
      v78 = *(unsigned __int8 *)(v76 + 368);
    }
    v81 = *(float **)(v76 + 328);
    v80 = *(_QWORD *)(v76 + 336);
    v82 = HIDWORD(v80);
    v83 = HIDWORD(v80);
    HIDWORD(v84) = HIDWORD(v81);
    if (v78)
    {
      v85 = v79;
      if (v79)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v76 + 296) + 88))(*(_QWORD *)(v76 + 296), 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1338");
        v85 = *(float **)(v76 + 320);
        v84 = *(_QWORD *)(v76 + 328);
        LODWORD(v83) = *(_DWORD *)(v76 + 340);
      }
      v86 = &v85[(HIDWORD(v84) * v83)];
      v343 = v76;
      if (v79 == v86)
        goto LABEL_169;
    }
    else
    {
      v86 = &v79[HIDWORD(v81) * HIDWORD(v80)];
      v343 = v76;
      if (v79 == v86)
      {
LABEL_169:
        v120 = *((float *)&v379 + 1);
        v121 = *(unsigned __int8 *)(v76 + 456);
        v122 = *(float **)(v76 + 408);
        if (*(_BYTE *)(v76 + 456) && v122)
        {
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v76 + 384) + 88))(*(_QWORD *)(v76 + 384), 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1331");
          v122 = *(float **)(v76 + 408);
          v121 = *(unsigned __int8 *)(v76 + 456);
        }
        v124 = *(_QWORD *)(v76 + 416);
        v123 = *(_QWORD *)(v76 + 424);
        v125 = HIDWORD(v123);
        v126 = HIDWORD(v123);
        HIDWORD(v127) = HIDWORD(v124);
        if (v121)
        {
          v128 = v122;
          if (v122)
          {
            (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v76 + 384) + 88))(*(_QWORD *)(v76 + 384), 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1338");
            v128 = *(float **)(v76 + 408);
            v127 = *(_QWORD *)(v76 + 416);
            LODWORD(v126) = *(_DWORD *)(v76 + 428);
          }
          v129 = &v128[(HIDWORD(v127) * v126)];
          if (v122 == v129)
            goto LABEL_214;
        }
        else
        {
          v129 = &v122[HIDWORD(v124) * HIDWORD(v123)];
          if (v122 == v129)
          {
LABEL_214:
            v160 = *((float *)&v379 + 1);
            v161 = *(unsigned __int8 *)(v76 + 544);
            v162 = *(float **)(v76 + 496);
            if (*(_BYTE *)(v76 + 544) && v162)
            {
              (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v76 + 472) + 88))(*(_QWORD *)(v76 + 472), 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1331");
              v162 = *(float **)(v76 + 496);
              v161 = *(unsigned __int8 *)(v76 + 544);
            }
            v164 = *(_QWORD *)(v76 + 504);
            v163 = *(_QWORD *)(v76 + 512);
            v165 = HIDWORD(v163);
            HIDWORD(v166) = HIDWORD(v164);
            if (v161)
            {
              v167 = v162;
              if (v162)
              {
                (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v76 + 472) + 88))(*(_QWORD *)(v76 + 472), 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/Image.h:1338");
                v167 = *(float **)(v76 + 496);
                v166 = *(_QWORD *)(v76 + 504);
                LODWORD(v165) = *(_DWORD *)(v76 + 516);
              }
              v168 = &v167[(HIDWORD(v166) * v165)];
              if (v162 == v168)
              {
LABEL_259:
                v416 = 0x8000000080;
                v405 = (char *)operator new(0x60uLL);
                v406 = xmmword_208236E50;
                strcpy(v405, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/Decoder/src/Decoder.cpp:422");
                sub_20815B468((uint64_t)v414, (unsigned int *)&v416, 0x34323066u, (uint64_t *)&v405, 1u);
                if (SHIBYTE(v406) < 0)
                  operator delete(v405);
                if (*(_QWORD *)&v414[8])
                {
                  v198 = **(__CVBuffer ***)&v414[8];
                  v199 = *(std::__shared_weak_count **)(*(_QWORD *)&v414[8] + 8);
                  if (v199)
                  {
                    v200 = (unint64_t *)&v199->__shared_owners_;
                    do
                      v201 = __ldxr(v200);
                    while (__stxr(v201 + 1, v200));
                    do
                      v202 = __ldaxr(v200);
                    while (__stlxr(v202 - 1, v200));
                    if (!v202)
                    {
                      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                      std::__shared_weak_count::__release_weak(v199);
                    }
                  }
                }
                else
                {
                  v198 = 0;
                }
                sub_207DFD0D0(v198, (int8x16_t *)v404[0].i64[0]);
                if (*(_QWORD *)&v414[8])
                {
                  v203 = **(__CVBuffer ***)&v414[8];
                  v204 = *(std::__shared_weak_count **)(*(_QWORD *)&v414[8] + 8);
                  if (v204)
                  {
                    v205 = (unint64_t *)&v204->__shared_owners_;
                    do
                      v206 = __ldxr(v205);
                    while (__stxr(v206 + 1, v205));
                    do
                      v207 = __ldaxr(v205);
                    while (__stlxr(v207 - 1, v205));
                    if (!v207)
                    {
                      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                      std::__shared_weak_count::__release_weak(v204);
                    }
                  }
                }
                else
                {
                  v203 = 0;
                }
                sub_207DFD384(v203, v404[1].i64[1], v404[3].i64[0]);
                if (!*(_QWORD *)(v76 + 6072))
                {
                  v208 = (std::__shared_weak_count_vtbl **)operator new(0x10uLL);
                  v405 = (char *)operator new(0x60uLL);
                  v406 = xmmword_208236E50;
                  strcpy(v405, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/Decoder/src/Decoder.cpp:432");
                  v416 = 0x8000000080;
                  LODWORD(v412) = 16;
                  BYTE4(v412) = 1;
                  sub_20815A0D8(v208, (unsigned int *)&v416, 0x18u, (uint64_t *)&v405, 1u, (unsigned int *)&v412);
                  if (SHIBYTE(v406) < 0)
                    operator delete(v405);
                  v209 = *(_QWORD **)(v76 + 6072);
                  *(_QWORD *)(v76 + 6072) = v208;
                  if (v209)
                  {
                    v210 = (std::__shared_weak_count *)v209[1];
                    if (v210)
                    {
                      v211 = (unint64_t *)&v210->__shared_owners_;
                      do
                        v212 = __ldaxr(v211);
                      while (__stlxr(v212 - 1, v211));
                      if (!v212)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    operator delete(v209);
                  }
                }
                if (!*(_QWORD *)(v76 + 6080))
                {
                  v213 = (VTPixelTransferSessionRef *)operator new(0x10uLL);
                  sub_207DFF76C(v213);
                  v214 = *(void (***)(void))(v76 + 6080);
                  *(_QWORD *)(v76 + 6080) = v213;
                  if (v214)
                  {
                    v215 = *v214;
                    *v214 = 0;
                    if (v215)
                      v214[1]();
                    operator delete(v214);
                  }
                }
                v216 = (std::__shared_weak_count *)operator new(0x30uLL);
                v216->__shared_owners_ = 0;
                v216->__shared_weak_owners_ = 0;
                v216->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
                v216[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
                v217 = *(_QWORD *)&v414[16];
                v216[1].__shared_owners_ = *(_QWORD *)&v414[8];
                v216[1].__shared_weak_owners_ = v217;
                if (v217)
                {
                  v218 = (unint64_t *)(v217 + 8);
                  do
                    v219 = __ldxr(v218);
                  while (__stxr(v219 + 1, v218));
                }
                v416 = (uint64_t)&v216[1];
                v417 = v216;
                sub_207DFFEE4(*(CVPixelBufferPoolRef **)(v76 + 6072), *(OpaqueVTPixelTransferSession ***)(v76 + 6080), &v416, (uint64_t)&v405);
                if (!BYTE8(v406)
                  && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/Decoder/src/Decoder.cpp", 442, (uint64_t)"rgb_image_data_owner", 20, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  abort();
                }
                v220 = (std::__shared_weak_count *)v406;
                v412 = v405;
                v413 = v406;
                if ((_QWORD)v406)
                {
                  v221 = (unint64_t *)(v406 + 8);
                  do
                    v222 = __ldxr(v221);
                  while (__stxr(v222 + 1, v221));
                }
                v223 = (std::__shared_weak_count_vtbl *)sub_207E00268((uint64_t *)&v412);
                if (v220)
                {
                  v224 = (unint64_t *)&v220->__shared_owners_;
                  do
                    v225 = __ldaxr(v224);
                  while (__stlxr(v225 - 1, v224));
                  if (!v225)
                  {
                    ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                    std::__shared_weak_count::__release_weak(v220);
                  }
                }
                sub_20815B050(v358, v223, 1, 0);
                if (BYTE8(v406))
                {
                  v226 = (std::__shared_weak_count *)v406;
                  if ((_QWORD)v406)
                  {
                    v227 = (unint64_t *)(v406 + 8);
                    do
                      v228 = __ldaxr(v227);
                    while (__stlxr(v228 - 1, v227));
                    if (!v228)
                    {
                      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                      std::__shared_weak_count::__release_weak(v226);
                    }
                  }
                }
                v229 = v417;
                if (v417)
                {
                  v230 = (unint64_t *)&v417->__shared_owners_;
                  do
                    v231 = __ldaxr(v230);
                  while (__stlxr(v231 - 1, v230));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                    std::__shared_weak_count::__release_weak(v229);
                  }
                }
                *(_QWORD *)v414 = &off_24C08A5D8;
                v232 = *(std::__shared_weak_count **)&v414[16];
                if (*(_QWORD *)&v414[16])
                {
                  v233 = (unint64_t *)(*(_QWORD *)&v414[16] + 8);
                  do
                    v234 = __ldaxr(v233);
                  while (__stlxr(v234 - 1, v233));
                  if (!v234)
                  {
                    ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                    std::__shared_weak_count::__release_weak(v232);
                  }
                }
                if (v404[3].i64[0])
                {
                  v404[3].i64[1] = v404[3].i64[0];
                  operator delete((void *)v404[3].i64[0]);
                }
                if (v404[1].i64[1])
                {
                  v404[2].i64[0] = v404[1].i64[1];
                  operator delete((void *)v404[1].i64[1]);
                }
                if (v404[0].i64[0])
                {
                  v404[0].i64[1] = v404[0].i64[0];
                  operator delete((void *)v404[0].i64[0]);
                }
                sub_20814D798((uint64_t)v358, (uint64_t)v404);
                v405 = (char *)off_24C06F140;
                v235 = v404[0].i64[1];
                v236 = (std::__shared_weak_count *)v404[1].i64[0];
                if (v404[1].i64[0])
                {
                  v237 = (unint64_t *)(v404[1].i64[0] + 8);
                  do
                    v238 = __ldxr(v237);
                  while (__stxr(v238 + 1, v237));
                  v239 = v404[2].i64[1];
                  v240 = v404[3].i32[0];
                  v241 = v404[3].i16[2];
                  do
                    v242 = __ldxr(v237);
                  while (__stxr(v242 + 1, v237));
                }
                else
                {
                  v239 = v404[2].i64[1];
                  v240 = v404[3].i32[0];
                  v241 = v404[3].i16[2];
                }
                *(_QWORD *)&v406 = v235;
                *((_QWORD *)&v406 + 1) = v236;
                v407 = (float32x2_t)v404[1].u64[1];
                v408 = v404[2].i32[0];
                v409 = v239;
                v410 = v240;
                v411 = v241;
                if (v236)
                {
                  v243 = (unint64_t *)&v236->__shared_owners_;
                  do
                    v244 = __ldaxr(v243);
                  while (__stlxr(v244 - 1, v243));
                  if (!v244)
                  {
                    ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                    std::__shared_weak_count::__release_weak(v236);
                  }
                }
                v404[0].i64[0] = (uint64_t)&off_24C074C28;
                v245 = (std::__shared_weak_count *)v404[1].i64[0];
                if (v404[1].i64[0])
                {
                  v246 = (unint64_t *)(v404[1].i64[0] + 8);
                  do
                    v247 = __ldaxr(v246);
                  while (__stlxr(v247 - 1, v246));
                  if (!v247)
                  {
                    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                    std::__shared_weak_count::__release_weak(v245);
                  }
                }
                v404[0].i64[0] = (uint64_t)&off_24C072A80;
                sub_207DDCD54((uint64_t)&v405, (uint64_t)&v404[0].i64[1]);
                v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C074F98;
                v248 = (uint64_t (***)())v404[0].i64[1];
                v249 = (std::__shared_weak_count *)v404[1].i64[0];
                v412 = (char *)v404[0].i64[1];
                v413 = v404[1].i64[0];
                if (v404[1].i64[0])
                {
                  v250 = (unint64_t *)(v404[1].i64[0] + 8);
                  do
                    v251 = __ldxr(v250);
                  while (__stxr(v251 + 1, v250));
                }
                if (!v248 || *v248 != &off_24C088EA8)
                {
                  v416 = 0;
                  v417 = 0;
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  sub_207DDC460(v414, (uint64_t)v404);
                  std::logic_error::logic_error(exception, (const std::string *)v414);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
                }
                v416 = (uint64_t)v248;
                v417 = v249;
                if (v249)
                {
                  v252 = (unint64_t *)&v249->__shared_owners_;
                  do
                    v253 = __ldxr(v252);
                  while (__stxr(v253 + 1, v252));
                  *(int8x16_t *)v414 = *(int8x16_t *)((char *)&v404[1] + 8);
                  *(int8x16_t *)&v414[16] = *(int8x16_t *)((char *)&v404[2] + 8);
                  v415 = *(__n128 *)((char *)&v404[3] + 8);
                  do
                    v254 = __ldxr(v252);
                  while (__stxr(v254 + 1, v252));
                  v360.__r_.__value_.__l.__size_ = (std::string::size_type)v248;
                  v360.__r_.__value_.__r.__words[2] = (std::string::size_type)v249;
                  *(_OWORD *)__src = *(_OWORD *)v414;
                  v362 = *(_OWORD *)&v414[16];
                  v75 = v415;
                  v363 = v415;
                  do
                    v255 = __ldaxr(v252);
                  while (__stlxr(v255 - 1, v252));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                    std::__shared_weak_count::__release_weak(v249);
                  }
                }
                else
                {
                  *(_OWORD *)&v360.__r_.__value_.__r.__words[1] = (unint64_t)v248;
                  *(int8x16_t *)__src = *(int8x16_t *)((char *)&v404[1] + 8);
                  v362 = *(__int128 *)((char *)&v404[2] + 8);
                  v75 = *(__n128 *)((char *)&v404[3] + 8);
                  v363 = *(__n128 *)((char *)&v404[3] + 8);
                }
                v256 = (std::__shared_weak_count *)v413;
                if (v413)
                {
                  v257 = (unint64_t *)(v413 + 8);
                  do
                    v258 = __ldaxr(v257);
                  while (__stlxr(v258 - 1, v257));
                  if (!v258)
                  {
                    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                    std::__shared_weak_count::__release_weak(v256);
                  }
                }
                v259 = (std::__shared_weak_count *)v404[1].i64[0];
                if (v404[1].i64[0])
                {
                  v260 = (unint64_t *)(v404[1].i64[0] + 8);
                  do
                    v261 = __ldaxr(v260);
                  while (__stlxr(v261 - 1, v260));
                  if (!v261)
                  {
                    ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                    std::__shared_weak_count::__release_weak(v259);
                  }
                }
                v262 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
                if (*((_QWORD *)&v406 + 1))
                {
                  v263 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 8);
                  do
                    v264 = __ldaxr(v263);
                  while (__stlxr(v264 - 1, v263));
                  if (!v264)
                  {
                    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                    std::__shared_weak_count::__release_weak(v262);
                  }
                }
                v358[0] = &off_24C08A5D8;
                v265 = v359;
                if (v359)
                {
                  v266 = (unint64_t *)&v359->__shared_owners_;
                  do
                    v267 = __ldaxr(v266);
                  while (__stlxr(v267 - 1, v266));
                  if (!v267)
                  {
                    ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                    std::__shared_weak_count::__release_weak(v265);
                  }
                }
                size = v360.__r_.__value_.__l.__size_;
                if (v360.__r_.__value_.__l.__size_)
                {
                  v269 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
                  if (v360.__r_.__value_.__r.__words[2])
                  {
                    v270 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
                    do
                      v271 = __ldxr(v270);
                    while (__stxr(v271 + 1, v270));
                    do
                      v272 = __ldaxr(v270);
                    while (__stlxr(v272 - 1, v270));
                    if (!v272)
                    {
                      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                      std::__shared_weak_count::__release_weak(v269);
                    }
                    v273 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
                    size = v360.__r_.__value_.__l.__size_;
                    if (v360.__r_.__value_.__r.__words[2])
                    {
                      v274 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
                      do
                        v275 = __ldxr(v274);
                      while (__stxr(v275 + 1, v274));
                      do
                        v276 = __ldaxr(v274);
                      while (__stlxr(v276 - 1, v274));
                      if (!v276)
                      {
                        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                        std::__shared_weak_count::__release_weak(v273);
                      }
                    }
                  }
                  (*(void (**)(_BYTE *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)size + 96))(v414, size, 1);
                  v277 = *(_QWORD *)(a5 + 8);
                  if (!v277)
                    goto LABEL_409;
                }
                else
                {
                  *(_QWORD *)v414 = 0;
                  v277 = *(_QWORD *)(a5 + 8);
                  if (!v277)
                    goto LABEL_409;
                }
                v278 = *(std::__shared_weak_count **)(a5 + 16);
                if (v278)
                {
                  v279 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v280 = __ldxr(v279);
                  while (__stxr(v280 + 1, v279));
                  do
                    v281 = __ldaxr(v279);
                  while (__stlxr(v281 - 1, v279));
                  if (!v281)
                  {
                    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                    std::__shared_weak_count::__release_weak(v278);
                  }
                  v277 = *(_QWORD *)(a5 + 8);
                  v282 = *(std::__shared_weak_count **)(a5 + 16);
                  if (v282)
                  {
                    v283 = (unint64_t *)&v282->__shared_owners_;
                    do
                      v284 = __ldxr(v283);
                    while (__stxr(v284 + 1, v283));
                    do
                      v285 = __ldaxr(v283);
                    while (__stlxr(v285 - 1, v283));
                    if (!v285)
                    {
                      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                      std::__shared_weak_count::__release_weak(v282);
                    }
                  }
                }
                if (*(_BYTE *)(a5 + 73))
                {
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v277 + 96))(&v416, v277, 1);
LABEL_410:
                  v286 = v363.n128_u32[0];
                  v287 = 3 * v363.n128_u32[0];
                  if (HIDWORD(v362) == *(_DWORD *)(a5 + 52) && HIDWORD(v362) == (_DWORD)v287)
                  {
                    v288 = v363.n128_u32[1] * (unint64_t)v287;
                    v289 = __src[0];
                    if (!__src[0]
                      && v288
                      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
LABEL_427:
                      abort();
                    }
                    v290 = *(void **)(a5 + 24);
                    if (*(_BYTE *)(a5 + 72) && v290)
                    {
                      v292 = *(_QWORD *)(a5 + 8);
                      v291 = *(std::__shared_weak_count **)(a5 + 16);
                      if (v291)
                      {
                        v293 = (unint64_t *)&v291->__shared_owners_;
                        do
                          v294 = __ldxr(v293);
                        while (__stxr(v294 + 1, v293));
                        do
                          v295 = __ldaxr(v293);
                        while (__stlxr(v295 - 1, v293));
                        if (!v295)
                        {
                          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                          std::__shared_weak_count::__release_weak(v291);
                        }
                      }
                      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v292 + 88))(v292, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                      v290 = *(void **)(a5 + 24);
                    }
                    if (!v288 || v290)
                    {
                      if (!v288)
                      {
LABEL_498:
                        v327 = v416;
                        v416 = 0;
                        if (v327)
                          (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
                        v328 = *(_QWORD *)v414;
                        *(_QWORD *)v414 = 0;
                        if (v328)
                          (*(void (**)(uint64_t))(*(_QWORD *)v328 + 8))(v328);
                        v329 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
                        if (v360.__r_.__value_.__r.__words[2])
                        {
                          v330 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
                          do
                            v331 = __ldaxr(v330);
                          while (__stlxr(v331 - 1, v330));
                          if (!v331)
                          {
                            ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                            std::__shared_weak_count::__release_weak(v329);
                          }
                        }
LABEL_507:
                        v332 = v376;
                        if (v376)
                        {
                          v333 = (unint64_t *)&v376->__shared_owners_;
                          do
                            v334 = __ldaxr(v333);
                          while (__stlxr(v334 - 1, v333));
                          if (!v334)
                          {
                            ((void (*)(std::__shared_weak_count *, __n128))v332->__on_zero_shared)(v332, v75);
                            std::__shared_weak_count::__release_weak(v332);
                          }
                        }
                        v335 = v370;
                        if (v370)
                        {
                          v336 = (unint64_t *)&v370->__shared_owners_;
                          do
                            v337 = __ldaxr(v336);
                          while (__stlxr(v337 - 1, v336));
                          if (!v337)
                          {
                            ((void (*)(std::__shared_weak_count *, __n128))v335->__on_zero_shared)(v335, v75);
                            std::__shared_weak_count::__release_weak(v335);
                          }
                        }
                        v338 = (std::__shared_weak_count *)__p;
                        if ((_QWORD)__p)
                        {
                          v339 = (unint64_t *)(__p + 8);
                          do
                            v340 = __ldaxr(v339);
                          while (__stlxr(v340 - 1, v339));
                          if (!v340)
                          {
                            ((void (*)(std::__shared_weak_count *, __n128))v338->__on_zero_shared)(v338, v75);
                            std::__shared_weak_count::__release_weak(v338);
                          }
                        }
                        kdebug_trace();
                        sub_207DCF7D8();
                        return kdebug_trace();
                      }
                    }
                    else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
                      goto LABEL_427;
                    }
                    memmove(v290, v289, v288);
                    goto LABEL_498;
                  }
                  v296 = v360.__r_.__value_.__l.__size_;
                  if (v360.__r_.__value_.__l.__size_)
                  {
                    v297 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
                    if (v360.__r_.__value_.__r.__words[2])
                    {
                      v298 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
                      do
                        v299 = __ldxr(v298);
                      while (__stxr(v299 + 1, v298));
                      do
                        v300 = __ldaxr(v298);
                      while (__stlxr(v300 - 1, v298));
                      if (!v300)
                      {
                        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                        std::__shared_weak_count::__release_weak(v297);
                      }
                      v301 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
                      v296 = v360.__r_.__value_.__l.__size_;
                      if (v360.__r_.__value_.__r.__words[2])
                      {
                        v302 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
                        do
                          v303 = __ldxr(v302);
                        while (__stxr(v303 + 1, v302));
                        do
                          v304 = __ldaxr(v302);
                        while (__stlxr(v304 - 1, v302));
                        if (!v304)
                        {
                          ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                          std::__shared_weak_count::__release_weak(v301);
                        }
                      }
                    }
                    (*(void (**)(int8x16_t *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v296 + 96))(v404, v296, 1);
                  }
                  else
                  {
                    v404[0].i64[0] = 0;
                  }
                  v305 = *(_QWORD *)(a5 + 8);
                  if (!v305)
                    goto LABEL_460;
                  v306 = *(std::__shared_weak_count **)(a5 + 16);
                  if (v306)
                  {
                    v307 = (unint64_t *)&v306->__shared_owners_;
                    do
                      v308 = __ldxr(v307);
                    while (__stxr(v308 + 1, v307));
                    do
                      v309 = __ldaxr(v307);
                    while (__stlxr(v309 - 1, v307));
                    if (!v309)
                    {
                      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                      std::__shared_weak_count::__release_weak(v306);
                    }
                    v305 = *(_QWORD *)(a5 + 8);
                    v310 = *(std::__shared_weak_count **)(a5 + 16);
                    if (v310)
                    {
                      v311 = (unint64_t *)&v310->__shared_owners_;
                      do
                        v312 = __ldxr(v311);
                      while (__stxr(v312 + 1, v311));
                      do
                        v313 = __ldaxr(v311);
                      while (__stlxr(v313 - 1, v311));
                      if (!v313)
                      {
                        ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                        std::__shared_weak_count::__release_weak(v310);
                      }
                    }
                  }
                  if (*(_BYTE *)(a5 + 73))
                    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v305 + 96))(&v405, v305, 1);
                  else
LABEL_460:
                    v405 = 0;
                  if (!LODWORD(__src[1]))
                    goto LABEL_494;
                  if (!HIDWORD(__src[1]))
                    goto LABEL_494;
                  v314 = v362;
                  if (!(_DWORD)v362)
                    goto LABEL_494;
                  v315 = HIDWORD(v362);
                  v316 = *(unsigned int *)(a5 + 52);
                  v317 = (char *)__src[0];
                  v318 = *(char **)(a5 + 24);
                  if (*(_BYTE *)(a5 + 72) && v318)
                  {
                    v319 = *(_QWORD *)(a5 + 8);
                    v320 = *(std::__shared_weak_count **)(a5 + 16);
                    if (v320)
                    {
                      v321 = (unint64_t *)&v320->__shared_owners_;
                      do
                        v322 = __ldxr(v321);
                      while (__stxr(v322 + 1, v321));
                      do
                        v323 = __ldaxr(v321);
                      while (__stlxr(v323 - 1, v321));
                      if (!v323)
                      {
                        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                        std::__shared_weak_count::__release_weak(v320);
                      }
                    }
                    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v319 + 88))(v319, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
                    v318 = *(char **)(a5 + 24);
                  }
                  v324 = v314 - 1;
                  if (v324)
                  {
                    if (v286)
                    {
                      v355 = v286;
                      while ((v317
                            || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))&& (v318|| !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)))
                      {
                        memmove(v318, v317, v287);
                        v317 += v315;
                        v318 += v316;
                        if (!--v324)
                          goto LABEL_483;
                      }
LABEL_481:
                      abort();
                    }
LABEL_494:
                    v325 = v405;
                    v405 = 0;
                    if (v325)
                      (*(void (**)(char *))(*(_QWORD *)v325 + 8))(v325);
                    v326 = v404[0].i64[0];
                    v404[0].i64[0] = 0;
                    if (v326)
                      (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
                    goto LABEL_498;
                  }
                  v355 = v286;
LABEL_483:
                  if (!v355 || v317)
                  {
                    if (v355 && !v318)
                    {
LABEL_490:
                      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                      {
                        goto LABEL_481;
                      }
                      v318 = 0;
                      goto LABEL_493;
                    }
                    if (!v355)
                      goto LABEL_494;
                  }
                  else
                  {
                    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
                      goto LABEL_481;
                    }
                    if (!v318)
                      goto LABEL_490;
                  }
LABEL_493:
                  memmove(v318, v317, v287);
                  goto LABEL_494;
                }
LABEL_409:
                v416 = 0;
                goto LABEL_410;
              }
            }
            else
            {
              v168 = &v162[HIDWORD(v164) * HIDWORD(v163)];
              if (v162 == v168)
                goto LABEL_259;
            }
            v169 = 0;
            v170 = v160;
            v171 = v163;
            v172 = v404[4].u64[0];
            v173 = (float *)v404[3].i64[1];
            v174 = (float *)v404[3].i64[0];
            v175 = HIDWORD(v163) + v163 - (v163 * v164);
            v350 = v163;
            v353 = v168;
            v347 = v175;
            while (1)
            {
              v178 = *v162 + v170;
              if ((unint64_t)v173 >= v172)
                break;
              *v173++ = v178;
LABEL_225:
              v176 = v169 + 1;
              if (v169 + 1 == (_DWORD)v164)
                v169 = 0;
              else
                ++v169;
              if (v176 == (_DWORD)v164)
                v177 = v175;
              else
                v177 = v171;
              v162 += v177;
              if (v162 == v168)
              {
                v404[4].i64[0] = v172;
                v404[3].i64[1] = (uint64_t)v173;
                v404[3].i64[0] = (uint64_t)v174;
                v76 = v343;
                goto LABEL_259;
              }
            }
            v179 = v164;
            v180 = v173 - v174;
            v181 = v180 + 1;
            if ((unint64_t)(v180 + 1) >> 62)
            {
              v404[4].i64[0] = v172;
              v404[3].i64[1] = (uint64_t)v173;
              v404[3].i64[0] = (uint64_t)v174;
              sub_207D0CD58();
            }
            if ((uint64_t)(v172 - (_QWORD)v174) >> 1 > v181)
              v181 = (uint64_t)(v172 - (_QWORD)v174) >> 1;
            if (v172 - (unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL)
              v182 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v182 = v181;
            if (v182)
            {
              if (v182 >> 62)
              {
                v404[4].i64[0] = v172;
                v404[3].i64[1] = (uint64_t)v173;
                v404[3].i64[0] = (uint64_t)v174;
                sub_207CA3AB8();
              }
              v183 = v182;
              v184 = operator new(4 * v182);
              v182 = v183;
              v185 = (float *)&v184[4 * v180];
              *v185 = v178;
              v186 = (uint64_t)(v185 + 1);
              v187 = (char *)v173 - (char *)v174;
              if (v173 != v174)
              {
LABEL_242:
                v188 = v187 - 4;
                if (v188 < 0xBC
                  || (v191 = ((char *)(v173 - 1) - (char *)v174) & 0xFFFFFFFFFFFFFFFCLL,
                      &v184[(char *)v173 - (char *)v174 - 4 - v191] > &v184[(char *)v173 - (char *)v174 - 4])
                  || (float *)((char *)v173 - v191 - 4) > v173 - 1
                  || (unint64_t)((char *)v174 - v184) < 0x20)
                {
                  v189 = v173;
                  v164 = v179;
                }
                else
                {
                  v192 = (v188 >> 2) + 1;
                  v193 = 4 * (v192 & 0x7FFFFFFFFFFFFFF8);
                  v189 = &v173[v193 / 0xFFFFFFFFFFFFFFFCLL];
                  v185 = (float *)((char *)v185 - v193);
                  v194 = &v184[4 * v180 - 16];
                  v195 = v173 - 4;
                  v196 = v192 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v197 = *(_OWORD *)v195;
                    *(v194 - 1) = *((_OWORD *)v195 - 1);
                    *v194 = v197;
                    v194 -= 2;
                    v195 -= 8;
                    v196 -= 8;
                  }
                  while (v196);
                  v164 = v179;
                  if (v192 == (v192 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_245:
                    v172 = (unint64_t)&v184[4 * v182];
                    if (!v174)
                    {
LABEL_247:
                      v174 = v185;
                      v173 = (float *)v186;
                      v171 = v350;
                      v168 = v353;
                      v175 = v347;
                      goto LABEL_225;
                    }
LABEL_246:
                    operator delete(v174);
                    goto LABEL_247;
                  }
                }
                do
                {
                  v190 = *((_DWORD *)v189-- - 1);
                  *((_DWORD *)v185-- - 1) = v190;
                }
                while (v189 != v174);
                goto LABEL_245;
              }
            }
            else
            {
              v184 = 0;
              v185 = (float *)(4 * v180);
              *(float *)(4 * v180) = v178;
              v186 = 4 * v180 + 4;
              v187 = (char *)v173 - (char *)v174;
              if (v173 != v174)
                goto LABEL_242;
            }
            v164 = v179;
            v172 = (unint64_t)&v184[4 * v182];
            if (!v174)
              goto LABEL_247;
            goto LABEL_246;
          }
        }
        v130 = 0;
        v131 = v120;
        v132 = v123;
        v133 = (v123 * v124);
        v134 = v404[2].u64[1];
        v135 = (float *)v404[2].i64[0];
        v136 = (float *)v404[1].i64[1];
        v137 = v125 + v132 - v133;
        v349 = v132;
        v352 = v129;
        v346 = v137;
        while (1)
        {
          v140 = *v122 + v131;
          if ((unint64_t)v135 >= v134)
            break;
          *v135++ = v140;
LABEL_180:
          v138 = v130 + 1;
          if (v130 + 1 == (_DWORD)v124)
            v130 = 0;
          else
            ++v130;
          if (v138 == (_DWORD)v124)
            v139 = v137;
          else
            v139 = v132;
          v122 += v139;
          if (v122 == v129)
          {
            v404[2].i64[1] = v134;
            v404[2].i64[0] = (uint64_t)v135;
            v404[1].i64[1] = (uint64_t)v136;
            v76 = v343;
            goto LABEL_214;
          }
        }
        v141 = v124;
        v142 = v135 - v136;
        v143 = v142 + 1;
        if ((unint64_t)(v142 + 1) >> 62)
        {
          v404[2].i64[1] = v134;
          v404[2].i64[0] = (uint64_t)v135;
          v404[1].i64[1] = (uint64_t)v136;
          sub_207D0CD58();
        }
        if ((uint64_t)(v134 - (_QWORD)v136) >> 1 > v143)
          v143 = (uint64_t)(v134 - (_QWORD)v136) >> 1;
        if (v134 - (unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
          v144 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v144 = v143;
        if (v144)
        {
          if (v144 >> 62)
          {
            v404[2].i64[1] = v134;
            v404[2].i64[0] = (uint64_t)v135;
            v404[1].i64[1] = (uint64_t)v136;
            sub_207CA3AB8();
          }
          v145 = v144;
          v146 = operator new(4 * v144);
          v144 = v145;
          v147 = (float *)&v146[4 * v142];
          *v147 = v140;
          v148 = (uint64_t)(v147 + 1);
          v149 = (char *)v135 - (char *)v136;
          if (v135 != v136)
          {
LABEL_197:
            v150 = v149 - 4;
            if (v150 < 0xBC
              || (v153 = ((char *)(v135 - 1) - (char *)v136) & 0xFFFFFFFFFFFFFFFCLL,
                  &v146[(char *)v135 - (char *)v136 - 4 - v153] > &v146[(char *)v135 - (char *)v136 - 4])
              || (float *)((char *)v135 - v153 - 4) > v135 - 1
              || (unint64_t)((char *)v136 - v146) < 0x20)
            {
              v151 = v135;
              v124 = v141;
            }
            else
            {
              v154 = (v150 >> 2) + 1;
              v155 = 4 * (v154 & 0x7FFFFFFFFFFFFFF8);
              v151 = &v135[v155 / 0xFFFFFFFFFFFFFFFCLL];
              v147 = (float *)((char *)v147 - v155);
              v156 = &v146[4 * v142 - 16];
              v157 = v135 - 4;
              v158 = v154 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v159 = *(_OWORD *)v157;
                *(v156 - 1) = *((_OWORD *)v157 - 1);
                *v156 = v159;
                v156 -= 2;
                v157 -= 8;
                v158 -= 8;
              }
              while (v158);
              v124 = v141;
              if (v154 == (v154 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_200:
                v134 = (unint64_t)&v146[4 * v144];
                if (!v136)
                {
LABEL_202:
                  v136 = v147;
                  v135 = (float *)v148;
                  v132 = v349;
                  v129 = v352;
                  v137 = v346;
                  goto LABEL_180;
                }
LABEL_201:
                operator delete(v136);
                goto LABEL_202;
              }
            }
            do
            {
              v152 = *((_DWORD *)v151-- - 1);
              *((_DWORD *)v147-- - 1) = v152;
            }
            while (v151 != v136);
            goto LABEL_200;
          }
        }
        else
        {
          v146 = 0;
          v147 = (float *)(4 * v142);
          *(float *)(4 * v142) = v140;
          v148 = 4 * v142 + 4;
          v149 = (char *)v135 - (char *)v136;
          if (v135 != v136)
            goto LABEL_197;
        }
        v124 = v141;
        v134 = (unint64_t)&v146[4 * v144];
        if (!v136)
          goto LABEL_202;
        goto LABEL_201;
      }
    }
    v93 = 0;
    v94 = v77;
    v95 = v80;
    v96 = (v80 * (_DWORD)v81);
    v97 = v404[1].u64[0];
    v98 = (float *)v404[0].i64[1];
    v99 = (float *)v404[0].i64[0];
    v100 = v82 + v95 - v96;
    v348 = v86;
    v351 = (int)v81;
    v344 = v100;
    v345 = v95;
    while (1)
    {
      v103 = *v79 + v94;
      if ((unint64_t)v98 >= v97)
        break;
      *v98++ = v103;
LABEL_133:
      v101 = v93 + 1;
      if (v93 + 1 == (_DWORD)v81)
        v93 = 0;
      else
        ++v93;
      if (v101 == (_DWORD)v81)
        v102 = v100;
      else
        v102 = v95;
      v79 += v102;
      if (v79 == v86)
      {
        v404[1].i64[0] = v97;
        v404[0].i64[1] = (uint64_t)v98;
        v404[0].i64[0] = (uint64_t)v99;
        v76 = v343;
        goto LABEL_169;
      }
    }
    v104 = v98 - v99;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 62)
    {
      v404[1].i64[0] = v97;
      v404[0].i64[1] = (uint64_t)v98;
      v404[0].i64[0] = (uint64_t)v99;
      sub_207D0CD58();
    }
    if ((uint64_t)(v97 - (_QWORD)v99) >> 1 > v105)
      v105 = (uint64_t)(v97 - (_QWORD)v99) >> 1;
    if (v97 - (unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
      v106 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v106 = v105;
    if (v106)
    {
      if (v106 >> 62)
      {
        v404[1].i64[0] = v97;
        v404[0].i64[1] = (uint64_t)v98;
        v404[0].i64[0] = (uint64_t)v99;
        sub_207CA3AB8();
      }
      v107 = operator new(4 * v106);
      v81 = (float *)&v107[4 * v104];
      *v81 = v103;
      v108 = (uint64_t)(v81 + 1);
      v109 = (char *)v98 - (char *)v99;
      if (v98 == v99)
        goto LABEL_155;
    }
    else
    {
      v107 = 0;
      v81 = (float *)(4 * v104);
      *(float *)(4 * v104) = v103;
      v108 = 4 * v104 + 4;
      v109 = (char *)v98 - (char *)v99;
      if (v98 == v99)
        goto LABEL_155;
    }
    v110 = v109 - 4;
    if (v110 >= 0xBC)
    {
      v113 = ((char *)(v98 - 1) - (char *)v99) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v107[(char *)v98 - (char *)v99 - 4 - v113] > &v107[(char *)v98 - (char *)v99 - 4])
      {
        v111 = v98;
      }
      else if ((float *)((char *)v98 - v113 - 4) > v98 - 1)
      {
        v111 = v98;
      }
      else if ((unint64_t)((char *)v99 - v107) >= 0x20)
      {
        v114 = (v110 >> 2) + 1;
        v115 = 4 * (v114 & 0x7FFFFFFFFFFFFFF8);
        v111 = &v98[v115 / 0xFFFFFFFFFFFFFFFCLL];
        v81 = (float *)((char *)v81 - v115);
        v116 = &v107[4 * v104 - 16];
        v117 = v98 - 4;
        v118 = v114 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v119 = *(_OWORD *)v117;
          *(v116 - 1) = *((_OWORD *)v117 - 1);
          *v116 = v119;
          v116 -= 2;
          v117 -= 8;
          v118 -= 8;
        }
        while (v118);
        if (v114 == (v114 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_155;
      }
      else
      {
        v111 = v98;
      }
    }
    else
    {
      v111 = v98;
    }
    do
    {
      v112 = *((_DWORD *)v111-- - 1);
      *((_DWORD *)v81-- - 1) = v112;
    }
    while (v111 != v99);
LABEL_155:
    v97 = (unint64_t)&v107[4 * v106];
    if (v99)
      operator delete(v99);
    v99 = v81;
    v98 = (float *)v108;
    v86 = v348;
    LODWORD(v81) = v351;
    v100 = v344;
    v95 = v345;
    goto LABEL_133;
  }
  LODWORD(v380[0]) = sub_20815A764(a2);
  v404[1].i32[2] = 0;
  sub_207DDDF2C((uint64_t)&v405, (uint64_t)v404, (unsigned int *)v380);
  if (v404[1].i32[2] == -1)
    sub_207CA9F48();
  v405 = (char *)&v416;
  ((void (*)(std::string *__return_ptr, char **, int8x16_t *))off_24C0750B0[v404[1].u32[2]])(&v360, &v405, v404);
  if (v404[1].i32[2] != -1)
    ((void (*)(char **, int8x16_t *))off_24C075080[v404[1].u32[2]])(&v405, v404);
  v87 = std::string::insert(&v360, 0, "Got unsupported pixel format: ", 0x1EuLL);
  v89 = (void *)v87->__r_.__value_.__r.__words[0];
  v88 = v87->__r_.__value_.__l.__size_;
  *(_DWORD *)v414 = v87->__r_.__value_.__r.__words[2];
  *(_DWORD *)&v414[3] = *(_DWORD *)((char *)&v87->__r_.__value_.__r.__words[2] + 3);
  v90 = SHIBYTE(v87->__r_.__value_.__r.__words[2]);
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  if (v90 < 0)
  {
    sub_207CA40D8(&__dst, v89, v88);
  }
  else
  {
    *(_QWORD *)&__dst = v89;
    *((_QWORD *)&__dst + 1) = v88;
    *(_DWORD *)v383 = *(_DWORD *)v414;
    *(_DWORD *)&v383[3] = *(_DWORD *)&v414[3];
    v384 = v90;
  }
  v385 = 1;
  LOBYTE(v386) = 0;
  v390 = 0;
  v391 = 1;
  sub_207CCAFD0(0x2Du, &__dst, (uint64_t)&v364);
  *(_OWORD *)a6 = v364;
  *(_BYTE *)(a6 + 16) = 0;
  *(_BYTE *)(a6 + 112) = 0;
  if ((_BYTE)v374)
  {
    *(_BYTE *)(a6 + 40) = 0;
    v91 = v367;
    if (v367)
    {
      *(_OWORD *)(a6 + 16) = __p;
      *(_QWORD *)(a6 + 32) = v366;
      v366 = 0;
      __p = 0uLL;
      *(_BYTE *)(a6 + 40) = 1;
    }
    *(_BYTE *)(a6 + 48) = 0;
    *(_BYTE *)(a6 + 104) = 0;
    if (v373)
    {
      v92 = v370;
      *(_QWORD *)(a6 + 64) = v369;
      *(_OWORD *)(a6 + 48) = v368;
      v368 = 0uLL;
      *(_QWORD *)(a6 + 72) = v92;
      *(_OWORD *)(a6 + 80) = v371;
      *(_QWORD *)(a6 + 96) = v372;
      v369 = 0;
      v371 = 0uLL;
      v372 = 0;
      *(_BYTE *)(a6 + 104) = 1;
    }
    *(_BYTE *)(a6 + 112) = 1;
    *(_BYTE *)(a6 + 120) = 0;
    if (v91 && SHIBYTE(v366) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a6 + 120) = 0;
  }
  if (v391)
  {
    if (v390)
    {
      if (v389 < 0)
        operator delete(v388);
      if (v387 < 0)
        operator delete(v386);
    }
    if (v385 && v384 < 0)
      operator delete((void *)__dst);
  }
  if (v90 < 0)
    operator delete(v89);
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  return kdebug_trace();
}

void sub_207DD8D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v61 = STACK[0x2C0];
  STACK[0x2C0] = 0;
  if (v61)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v61 + 8))(v61);
    v62 = *(_QWORD *)(v59 - 128);
    *(_QWORD *)(v59 - 128) = 0;
    if (!v62)
    {
LABEL_3:
      v63 = *(_QWORD *)(v59 - 176);
      *(_QWORD *)(v59 - 176) = 0;
      if (!v63)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v62 = *(_QWORD *)(v59 - 128);
    *(_QWORD *)(v59 - 128) = 0;
    if (!v62)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *(_QWORD *)(v59 - 176);
  *(_QWORD *)(v59 - 176) = 0;
  if (!v63)
  {
LABEL_5:
    sub_207DD912C((uint64_t)&__p);
    sub_207DD9570(&a37);
    sub_207CD822C((uint64_t)&a59);
    sub_207CD822C((uint64_t)&STACK[0x290]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  goto LABEL_5;
}

uint64_t sub_207DD912C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207DD9194(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DD91FC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_207DD9418(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207DD92E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_207DD9304(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DD936C()
{
  return 4;
}

uint64_t sub_207DD9374(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207DD937C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_207DD9394(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_207DD9418(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  void *__p;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&__p, v3, 4);
  v9 = __p;
  v10 = *((_QWORD *)__p + 2);
  *((_OWORD *)a1 + 1) = *(_OWORD *)__p;
  a1[4] = v10;
  __p = 0;
  operator delete(v9);
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 20) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_207DD955C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207DD9570(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[16];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

__n128 sub_207DD9654(unsigned int *a1, unsigned int *a2, uint64_t **a3, unint64_t a4, char *a5, uint64_t a6, __n128 result)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  unsigned int *v29;
  uint64_t *v30;
  unsigned int *v31;
  char *v32;
  __n128 *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 *v44;
  char v45;
  unsigned int *v46;
  uint64_t v47;
  __n128 *v48;
  __n128 v49;
  unsigned __int32 v50;
  unint64_t v51;
  unsigned int *v52;
  __n128 *v53;
  unsigned __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 *v59;
  __n128 v60;

  if (a4 >= 2)
  {
    v9 = (__n128 *)a1;
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = *a1;
      v12 = **a3;
      result.n128_u32[0] = *(_DWORD *)(v12 + 4 * v10);
      if (result.n128_f32[0] < *(float *)(v12 + 4 * v11))
      {
        *a1 = v10;
        *(a2 - 1) = v11;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v24 = a4 >> 1;
      v25 = &a1[a4 >> 1];
      v26 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        sub_207DD9654(a1, v25, a3, v26, a5, a6);
        sub_207DD9654((char *)v9 + 4 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        result.n128_u64[0] = sub_207DD9CC8(v9, (unsigned int *)v9 + (a4 >> 1), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6, v27).n128_u64[0];
        return result;
      }
      v28 = sub_207DD99AC(a1, v25, a3, v26, (unsigned int *)a5, result);
      v29 = (unsigned int *)&a5[4 * v24];
      result.n128_u64[0] = sub_207DD99AC((unsigned int *)v9 + (a4 >> 1), a2, a3, a4 - (a4 >> 1), v29, v28).n128_u64[0];
      v30 = *a3;
      v31 = v29;
      v32 = a5;
      v33 = v9;
      v34 = (unsigned int *)&a5[4 * a4];
      do
      {
        if (v31 == v34)
        {
          if (v32 == (char *)v29)
            return result;
          v51 = &a5[4 * v24] - v32 - 4;
          if (v51 >= 0x1C && (unint64_t)((char *)v9 - v32) >= 0x20)
          {
            v55 = 0;
            v56 = (v51 >> 2) + 1;
            v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
            v52 = (unsigned int *)&v32[v57];
            v53 = (__n128 *)((char *)v33 + v57);
            v58 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v59 = &v33[v55];
              result = *(__n128 *)&v32[v55 * 16];
              v60 = *(__n128 *)&v32[v55 * 16 + 16];
              *v59 = result;
              v59[1] = v60;
              v55 += 2;
              v58 -= 8;
            }
            while (v58);
            if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v52 = (unsigned int *)v32;
            v53 = v33;
          }
          do
          {
            v54 = *v52++;
            v53->n128_u32[0] = v54;
            v53 = (__n128 *)((char *)v53 + 4);
          }
          while (v52 != v29);
          return result;
        }
        v35 = v31;
        v36 = *v31;
        v37 = *(unsigned int *)v32;
        result.n128_u32[0] = *(_DWORD *)(*v30 + 4 * v36);
        v38 = *(float *)(*v30 + 4 * v37);
        if (result.n128_f32[0] < v38)
          LODWORD(v37) = v36;
        v32 += 4 * (result.n128_f32[0] >= v38);
        v31 = &v35[result.n128_f32[0] < v38];
        v33->n128_u32[0] = v37;
        v33 = (__n128 *)((char *)v33 + 4);
        v9 = (__n128 *)((char *)v9 + 4);
      }
      while (v32 != (char *)v29);
      if (v31 != v34)
      {
        v39 = -4;
        if (result.n128_f32[0] >= v38)
          v39 = 0;
        v40 = &a5[4 * a4] - (char *)v35 + v39 - 4;
        if (v40 < 0x3C || (unint64_t)((char *)v9 - (char *)&v35[result.n128_f32[0] < v38]) < 0x20)
          goto LABEL_48;
        v41 = 0;
        v42 = (v40 >> 2) + 1;
        v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        v31 = (unsigned int *)((char *)v31 + v43);
        v44 = (__n128 *)((char *)v33 + v43);
        v45 = result.n128_f32[0] < v38 ? 1 : 2;
        v46 = &v35[v45 & 1];
        v47 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v48 = &v33[v41 / 4];
          result = *(__n128 *)&v46[v41];
          v49 = *(__n128 *)&v46[v41 + 4];
          *v48 = result;
          v48[1] = v49;
          v41 += 8;
          v47 -= 8;
        }
        while (v47);
        v33 = v44;
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_48:
          do
          {
            v50 = *v31++;
            v33->n128_u32[0] = v50;
            v33 = (__n128 *)((char *)v33 + 4);
          }
          while (v31 != v34);
        }
      }
    }
    else if (a1 != a2)
    {
      v14 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v15 = 0;
        v16 = **a3;
        v17 = a1;
        do
        {
          v19 = *v17;
          v17 = v14;
          v20 = *v14;
          result.n128_u32[0] = *(_DWORD *)(v16 + 4 * v20);
          if (result.n128_f32[0] < *(float *)(v16 + 4 * v19))
          {
            v21 = v15;
            do
            {
              *(unsigned int *)((char *)a1 + v21 + 4) = v19;
              if (!v21)
              {
                v18 = a1;
                goto LABEL_10;
              }
              v19 = *(unsigned int *)((char *)a1 + v21 - 4);
              v21 -= 4;
            }
            while (result.n128_f32[0] < *(float *)(v16 + 4 * v19));
            v18 = (unsigned int *)((char *)a1 + v21 + 4);
LABEL_10:
            *v18 = v20;
          }
          v14 = v17 + 1;
          v15 += 4;
        }
        while (v17 + 1 != a2);
      }
    }
  }
  return result;
}

__n128 sub_207DD99AC(unsigned int *a1, unsigned int *a2, uint64_t **a3, unint64_t a4, unsigned int *a5, __n128 result)
{
  unsigned int *v6;
  unsigned int *v8;
  uint64_t v11;
  float v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  __int128 v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  __int128 v58;

  if (a4)
  {
    v6 = a5;
    v8 = a1;
    if (a4 == 1)
    {
LABEL_9:
      *v6 = *v8;
      return result;
    }
    if (a4 == 2)
    {
      v11 = **a3;
      result.n128_u32[0] = *(_DWORD *)(v11 + 4 * *(a2 - 1));
      v12 = *(float *)(v11 + 4 * *a1);
      if (result.n128_f32[0] >= v12)
        v13 = *a1;
      else
        v13 = *(a2 - 1);
      *a5 = v13;
      v6 = a5 + 1;
      if (result.n128_f32[0] >= v12)
        v8 = a2 - 1;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v27 = a4 >> 1;
      v28 = a4 >> 1;
      v29 = &a1[v28];
      sub_207DD9654(a1, &a1[v28], a3, a4 >> 1, a5, a4 >> 1);
      sub_207DD9654(&v8[v28], a2, a3, a4 - v27, &v6[v28], a4 - v27);
      v30 = *a3;
      v31 = (char *)v6;
      v32 = (char *)v8;
      v33 = &v8[v28];
      do
      {
        if (v33 == a2)
        {
          if (v32 == (char *)v29)
            return result;
          v49 = (char *)&v8[v27] - v32 - 4;
          if (v49 >= 0x1C && (unint64_t)(v31 - v32) >= 0x20)
          {
            v53 = 0;
            v54 = (v49 >> 2) + 1;
            v55 = v54 & 0x7FFFFFFFFFFFFFF8;
            v50 = &v6[v55];
            v51 = (unsigned int *)&v32[v55 * 4];
            v56 = v54 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v57 = &v6[v53];
              result = *(__n128 *)&v32[v53 * 4];
              v58 = *(_OWORD *)&v32[v53 * 4 + 16];
              *(__n128 *)v57 = result;
              *((_OWORD *)v57 + 1) = v58;
              v53 += 8;
              v56 -= 8;
            }
            while (v56);
            if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v50 = v6;
            v51 = (unsigned int *)v32;
          }
          do
          {
            v52 = *v51++;
            *v50++ = v52;
          }
          while (v51 != v29);
          return result;
        }
        v34 = v33;
        v35 = *v33;
        v36 = *(unsigned int *)v32;
        result.n128_u32[0] = *(_DWORD *)(*v30 + 4 * v35);
        v37 = *(float *)(*v30 + 4 * v36);
        if (result.n128_f32[0] < v37)
          LODWORD(v36) = v35;
        v33 = &v34[result.n128_f32[0] < v37];
        v32 += 4 * (result.n128_f32[0] >= v37);
        *v6++ = v36;
        v31 += 4;
      }
      while (v32 != (char *)v29);
      if (v33 != a2)
      {
        v38 = -4;
        if (result.n128_f32[0] >= v37)
          v38 = 0;
        v39 = (char *)a2 - (char *)v34 + v38 - 4;
        if (v39 < 0x3C)
          goto LABEL_50;
        if ((unint64_t)(v31 - (char *)&v34[result.n128_f32[0] < v37]) < 0x20)
          goto LABEL_50;
        v40 = 0;
        v41 = (v39 >> 2) + 1;
        v42 = v41 & 0x7FFFFFFFFFFFFFF8;
        v43 = &v6[v42];
        v33 = (unsigned int *)((char *)v33 + v42 * 4);
        v44 = &v34[result.n128_f32[0] < v37];
        v45 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v46 = &v6[v40];
          result = *(__n128 *)&v44[v40];
          v47 = *(_OWORD *)&v44[v40 + 4];
          *(__n128 *)v46 = result;
          *((_OWORD *)v46 + 1) = v47;
          v40 += 8;
          v45 -= 8;
        }
        while (v45);
        v6 = v43;
        if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_50:
          do
          {
            v48 = *v33++;
            *v6++ = v48;
          }
          while (v33 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v14 = *a3;
      v15 = a1 + 1;
      *a5 = *a1;
      if (a1 + 1 != a2)
      {
        v16 = 0;
        v17 = *v14;
        v18 = a5;
        v19 = a5;
        do
        {
          while (1)
          {
            v21 = *v19++;
            v20 = v21;
            v22 = *v15;
            result.n128_u32[0] = *(_DWORD *)(v17 + 4 * v22);
            if (result.n128_f32[0] < *(float *)(v17 + 4 * v21))
              break;
            *v19 = v22;
            ++v15;
            v16 += 4;
            v18 = v19;
            if (v15 == a2)
              return result;
          }
          v18[1] = v20;
          v23 = a5;
          if (v18 != a5)
          {
            v24 = v16;
            while (1)
            {
              v23 = (unsigned int *)((char *)a5 + v24);
              v25 = *(unsigned int *)((char *)a5 + v24 - 4);
              result.n128_u32[0] = *(_DWORD *)(v17 + 4 * *v15);
              if (result.n128_f32[0] >= *(float *)(v17 + 4 * v25))
                break;
              *v23 = v25;
              v24 -= 4;
              if (!v24)
              {
                v23 = a5;
                break;
              }
            }
          }
          v26 = *v15++;
          *v23 = v26;
          v16 += 4;
          v18 = v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

__n128 sub_207DD9CC8(__n128 *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v10;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  char *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  __n128 *v62;
  uint64_t **v63;
  char *v64;
  unsigned int *v65;
  unsigned int *v66;
  char *v67;
  uint64_t **v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 *v79;
  __n128 *v80;
  uint64_t v81;
  __n128 v82;
  unint64_t v83;
  char *v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  __n128 *v88;
  __n128 *v89;
  uint64_t v90;
  __n128 v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  float v95;
  int v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  char *v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t **v115;
  uint64_t **v116;
  uint64_t v117;

  if (!a6)
    return result;
  v10 = a6;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    v15 = 0;
    v16 = *a2;
    v17 = **a4;
    result.n128_u32[0] = *(_DWORD *)(v17 + 4 * v16);
    v18 = -a5;
    while (1)
    {
      v19 = a1->n128_u32[v15 / 4];
      if (result.n128_f32[0] < *(float *)(v17 + 4 * v19))
        break;
      v15 += 4;
      if (__CFADD__(v18++, 1))
        return result;
    }
    v21 = (__n128 *)((char *)a1 + v15);
    if (-v18 >= v10)
    {
      if (v18 == -1)
      {
        a1->n128_u32[v15 / 4] = v16;
        *a2 = v19;
        return result;
      }
      if (v18 <= 0)
        v39 = -v18;
      else
        v39 = 1 - v18;
      v31 = v39 >> 1;
      v25 = (unsigned int *)((char *)a1 + 4 * (v39 >> 1) + v15);
      v24 = (char *)a2;
      if (a2 != a3)
      {
        v40 = a3 - a2;
        v24 = (char *)a2;
        do
        {
          v41 = v40 >> 1;
          v42 = (unsigned int *)&v24[4 * (v40 >> 1)];
          v44 = *v42;
          v43 = (char *)(v42 + 1);
          v40 += ~(v40 >> 1);
          if (*(float *)(v17 + 4 * v44) < *(float *)(v17 + 4 * *v25))
            v24 = v43;
          else
            v40 = v41;
        }
        while (v40);
      }
      v23 = (v24 - (char *)a2) >> 2;
      if (v25 != a2)
      {
LABEL_22:
        v32 = v24 - (char *)a2;
        if (v24 == (char *)a2)
        {
          a2 = v25;
        }
        else
        {
          v33 = v25 + 1;
          v117 = v23;
          if (v25 + 1 == a2)
          {
            v110 = *v25;
            v113 = a7;
            v115 = a4;
            v45 = a3;
            v112 = v31;
            memmove(v25, a2, v24 - (char *)a2);
            a4 = v115;
            v23 = v117;
            v31 = v112;
            a7 = v113;
            v21 = (__n128 *)((char *)a1 + v15);
            a3 = v45;
            a2 = (unsigned int *)((char *)v25 + v32);
            *(unsigned int *)((char *)v25 + v32) = v110;
          }
          else
          {
            v34 = v31;
            v35 = (char *)(a2 + 1);
            if (a2 + 1 == (unsigned int *)v24)
            {
              v46 = *((_DWORD *)v24 - 1);
              a2 = v25 + 1;
              if (v24 - 4 != (char *)v25)
              {
                v114 = a7;
                v116 = a4;
                v47 = a3;
                v111 = *((_DWORD *)v24 - 1);
                memmove(v25 + 1, v25, v24 - 4 - (char *)v25);
                v46 = v111;
                v21 = (__n128 *)((char *)a1 + v15);
                a7 = v114;
                a4 = v116;
                a3 = v47;
              }
              *v25 = v46;
              v31 = v34;
              v23 = v117;
            }
            else
            {
              v36 = a2 - v25;
              if (v36 == v32 >> 2)
              {
                do
                {
                  v37 = *(v33 - 1);
                  *(v33 - 1) = *((_DWORD *)v35 - 1);
                  *((_DWORD *)v35 - 1) = v37;
                  if (v33 == a2)
                    break;
                  ++v33;
                  v38 = v35 == v24;
                  v35 += 4;
                }
                while (!v38);
              }
              else
              {
                v48 = v32 >> 2;
                v49 = a2 - v25;
                do
                {
                  v50 = v49;
                  v49 = v48;
                  v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  v51 = &v25[v49];
                  do
                  {
                    v53 = *--v51;
                    v52 = v53;
                    v54 = &v51[v36];
                    v55 = v51;
                    do
                    {
                      v56 = v54;
                      *v55 = *v54;
                      v57 = (v24 - (char *)v54) >> 2;
                      v58 = __OFSUB__(v36, v57);
                      v60 = v36 - v57;
                      v59 = (v60 < 0) ^ v58;
                      v54 = &v25[v60];
                      if (v59)
                        v54 = &v56[v36];
                      v55 = v56;
                    }
                    while (v54 != v51);
                    *v56 = v52;
                  }
                  while (v51 != v25);
                }
                a2 = &v25[v32 >> 2];
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v10 >= 0)
        v22 = v10;
      else
        v22 = v10 + 1;
      v23 = v22 >> 1;
      v24 = (char *)&a2[v22 >> 1];
      v25 = a2;
      if ((char *)a2 - (char *)a1 != v15)
      {
        v26 = (uint64_t)((char *)a2 - (char *)a1 - v15) >> 2;
        v25 = (unsigned int *)((char *)a1 + v15);
        do
        {
          v27 = v26 >> 1;
          v28 = &v25[v26 >> 1];
          v30 = *v28;
          v29 = v28 + 1;
          v26 += ~(v26 >> 1);
          if (*(float *)(v17 + 4 * *(unsigned int *)v24) < *(float *)(v17 + 4 * v30))
            v26 = v27;
          else
            v25 = v29;
        }
        while (v26);
      }
      v31 = (uint64_t)((char *)v25 - (char *)a1 - v15) >> 2;
      if (v25 != a2)
        goto LABEL_22;
    }
    a2 = (unsigned int *)v24;
LABEL_57:
    a5 = -(v31 + v18);
    v61 = v10 - v23;
    if (v31 + v23 >= v10 - (v31 + v23) - v18)
    {
      v66 = a2;
      v67 = v24;
      v68 = a4;
      v69 = v31;
      v70 = v23;
      v71 = a7;
      a1 = v21;
      sub_207DD9CC8(a2, v67, a3);
      a4 = v68;
      a7 = v71;
      a2 = v25;
      v72 = v70;
      a5 = v69;
      a3 = v66;
      v10 = v72;
      if (!v72)
        return result;
    }
    else
    {
      v62 = (__n128 *)((char *)a1 + v15);
      v63 = a4;
      v64 = a7;
      v65 = a3;
      sub_207DD9CC8(v62, v25, a2);
      a4 = v63;
      a3 = v65;
      a7 = v64;
      a1 = (__n128 *)a2;
      a2 = (unsigned int *)v24;
      v10 = v61;
      if (!v61)
        return result;
    }
  }
  if (a5 <= v10)
  {
    if (a1 != (__n128 *)a2)
    {
      v83 = (char *)a2 - (char *)a1 - 4;
      v84 = a7;
      v85 = (unsigned int *)a1;
      if (v83 < 0x1C)
        goto LABEL_107;
      v84 = a7;
      v85 = (unsigned int *)a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20)
        goto LABEL_107;
      v86 = (v83 >> 2) + 1;
      v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
      v84 = &a7[v87];
      v85 = (unsigned int *)((char *)a1 + v87);
      v88 = a1 + 1;
      v89 = (__n128 *)(a7 + 16);
      v90 = v86 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        result = v88[-1];
        v91 = *v88;
        v89[-1] = result;
        *v89 = v91;
        v88 += 2;
        v89 += 2;
        v90 -= 8;
      }
      while (v90);
      if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_107:
        do
        {
          v92 = *v85++;
          *(_DWORD *)v84 = v92;
          v84 += 4;
        }
        while (v85 != a2);
      }
      if (v84 != a7)
      {
        v93 = *a4;
        while (a2 != a3)
        {
          v94 = *a2;
          result.n128_u32[0] = *(_DWORD *)(*v93 + 4 * v94);
          v95 = *(float *)(*v93 + 4 * *(unsigned int *)a7);
          if (result.n128_f32[0] >= v95)
            LODWORD(v94) = *(_DWORD *)a7;
          a2 += result.n128_f32[0] < v95;
          a7 += 4 * (result.n128_f32[0] >= v95);
          a1->n128_u32[0] = v94;
          a1 = (__n128 *)((char *)a1 + 4);
          if (a7 == v84)
            return result;
        }
        memmove(a1, a7, v84 - a7);
      }
    }
    return result;
  }
  v73 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v74 = v73 - 4;
  if ((unint64_t)(v73 - 4) < 0x1C)
  {
    v75 = a7;
    v76 = a2;
    do
    {
LABEL_87:
      v96 = *v76++;
      *(_DWORD *)v75 = v96;
      v75 += 4;
    }
    while (v76 != a3);
    goto LABEL_88;
  }
  v75 = a7;
  v76 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20)
    goto LABEL_87;
  v77 = (v74 >> 2) + 1;
  v78 = v77 & 0x7FFFFFFFFFFFFFF8;
  v75 = &a7[v78 * 4];
  v76 = &a2[v78];
  v79 = (__n128 *)(a2 + 4);
  v80 = (__n128 *)(a7 + 16);
  v81 = v77 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    result = v79[-1];
    v82 = *v79;
    v80[-1] = result;
    *v80 = v82;
    v79 += 2;
    v80 += 2;
    v81 -= 8;
  }
  while (v81);
  if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_87;
LABEL_88:
  if (v75 != a7)
  {
    v97 = a3;
    while (a2 != (unsigned int *)a1)
    {
      v98 = *(a2 - 1);
      v99 = **a4;
      result.n128_u32[0] = *(_DWORD *)(v99 + 4 * *((unsigned int *)v75 - 1));
      if (result.n128_f32[0] < *(float *)(v99 + 4 * v98))
      {
        --a2;
      }
      else
      {
        LODWORD(v98) = *((_DWORD *)v75 - 1);
        v75 -= 4;
      }
      *--a3 = v98;
      --v97;
      if (v75 == a7)
        return result;
    }
    v100 = v75 - a7 - 4;
    if (v100 < 0x2C || (unint64_t)(v75 - (char *)v97) < 0x20)
    {
      v101 = a3;
      v102 = v75;
      goto LABEL_99;
    }
    v105 = 0;
    v106 = (v100 >> 2) + 1;
    v107 = 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
    v101 = &a3[v107 / 0xFFFFFFFFFFFFFFFCLL];
    v102 = &v75[-v107];
    v108 = v106 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      result = *(__n128 *)&v75[v105 * 4 - 16];
      v109 = &a3[v105];
      *((_OWORD *)v109 - 2) = *(_OWORD *)&v75[v105 * 4 - 32];
      *((__n128 *)v109 - 1) = result;
      v105 -= 8;
      v108 -= 8;
    }
    while (v108);
    if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_99:
      v103 = v101 - 1;
      do
      {
        v104 = *((_DWORD *)v102 - 1);
        v102 -= 4;
        *v103-- = v104;
      }
      while (v102 != a7);
    }
  }
  return result;
}

uint64_t sub_207DDA328(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t sub_207DDA3EC(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  const double *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  float64x2x3_t v26;

  v2 = a1[1] - *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3) + 1;
  if (v3 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (unint64_t)&v7[8 * (v2 >> 3)];
  v9 = &v7[24 * v6];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (unint64_t)v9;
  }
  else
  {
    v13 = (unint64_t)&v12[-*a1 - 24];
    if (v13 < 0xD8)
      goto LABEL_21;
    v14 = v13 / 0x18;
    if (&v7[v2 - 24 * v14 - 24] < v12 && (unint64_t)&v12[-24 * v14 - 24] < v8)
      goto LABEL_21;
    v16 = v14 + 1;
    v8 -= 24 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v17 = (const double *)(v12 - 48);
    v18 = (uint64_t)&v7[8 * (v2 >> 3) - 48];
    v19 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v26 = vld3q_f64(v17);
      vst3q_f64((double *)v18, v26);
      *((_OWORD *)v17 + 1) = 0uLL;
      *((_OWORD *)v17 + 2) = 0uLL;
      *(_OWORD *)v17 = 0uLL;
      v17 -= 6;
      v18 -= 48;
      v19 -= 2;
    }
    while (v19);
    v12 -= 24 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_21:
      v20 = v8;
      do
      {
        *(_QWORD *)(v20 - 16) = 0;
        v21 = *((_QWORD *)v12 - 3);
        v12 -= 24;
        *(_QWORD *)(v8 - 24) = v21;
        v8 -= 24;
        *(_QWORD *)(v20 - 16) = *((_QWORD *)v12 + 1);
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v12 + 2);
        *((_QWORD *)v12 + 2) = 0;
        v20 = v8;
      }
      while (v12 != v11);
    }
    v12 = (char *)*a1;
    v22 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (unint64_t)v9;
    while (v22 != v12)
    {
      v24 = (void *)*((_QWORD *)v22 - 3);
      v22 -= 24;
      v23 = v24;
      if (v24)
        operator delete[](v23);
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t sub_207DDA5E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(void **)(v2 - 24);
    v2 -= 24;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      operator delete[](v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t sub_207DDA634(unint64_t *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  int v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  const double *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  unint64_t v28;
  char *v29;
  __int128 v30;
  float64x2x3_t v31;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v2[-*a1] >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  v29 = &v2[-*a1];
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v28 = v4;
  v10 = (unint64_t)&v9[24 * v4];
  *((_QWORD *)&v30 + 1) = &v9[24 * v8];
  v12 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = ((4 * (v11 * v12) + 31) & 0x7FFFFFFE0uLL) >> 2;
  v13 = (void *)MEMORY[0x20BD028B4]();
  *(_QWORD *)v10 = v13;
  if (v11 * v12)
    memcpy(v13, *(const void **)a2, 4 * (v11 * v12));
  *(_DWORD *)(v10 + 16) = v12;
  *(_DWORD *)(v10 + 20) = v11;
  v14 = v10 + 24;
  *(_QWORD *)&v30 = v10 + 24;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = (unint64_t)&v9[24 * v8];
  }
  else
  {
    v15 = v2 - v3 - 24;
    if (v15 < 0xD8)
      goto LABEL_23;
    v16 = v15 / 0x18;
    if (&v29[(_QWORD)v9 - 24 + -24 * v16] < v2 && (unint64_t)&v2[-24 * v16 - 24] < v10)
      goto LABEL_23;
    v18 = v16 + 1;
    v10 -= 24 * (v18 & 0x1FFFFFFFFFFFFFFELL);
    v19 = (const double *)(v2 - 48);
    v20 = (uint64_t)&v9[24 * v28 - 48];
    v21 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v20 + 32) = 0;
      *(_QWORD *)(v20 + 8) = 0;
      v31 = vld3q_f64(v19);
      vst3q_f64((double *)v20, v31);
      *((_OWORD *)v19 + 1) = 0uLL;
      *((_OWORD *)v19 + 2) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      v19 -= 6;
      v20 -= 48;
      v21 -= 2;
    }
    while (v21);
    v2 -= 24 * (v18 & 0x1FFFFFFFFFFFFFFELL);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v22 = v10;
      do
      {
        *(_QWORD *)(v22 - 16) = 0;
        v23 = *((_QWORD *)v2 - 3);
        v2 -= 24;
        *(_QWORD *)(v10 - 24) = v23;
        v10 -= 24;
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v22 - 16) = *((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        *(_QWORD *)(v10 + 16) = *((_QWORD *)v2 + 2);
        *((_QWORD *)v2 + 2) = 0;
        v22 = v10;
      }
      while (v2 != v3);
    }
    v2 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v30;
    v14 = v30;
    while (v24 != v2)
    {
      v26 = (void *)*((_QWORD *)v24 - 3);
      v24 -= 24;
      v25 = v26;
      if (v26)
        operator delete[](v25);
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

void sub_207DDA8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207DDA5E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DDA8B4(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  _DWORD *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  int **v10;
  void *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  BOOL v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  int *v74;
  __int16 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  _DWORD *v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  void **v90;
  void **v91;
  void *v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *__p[2];
  __int128 v102;
  __int128 v103;
  int v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  void *v111[2];
  char v112;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    *(_QWORD *)&v102 = *(_QWORD *)(a2 + 16);
  }
  if (*(_BYTE *)(a2 + 24))
    v4 = 3;
  else
    v4 = 2;
  DWORD2(v102) = v4;
  WORD6(v102) = *(unsigned __int8 *)(a2 + 25);
  v103 = 0uLL;
  v106 = 7;
  v104 = 1;
  strcpy((char *)v105, "image_y");
  v108 = 8;
  strcpy((char *)v107, "image_cb");
  v110 = 8;
  strcpy((char *)v109, "image_cr");
  v112 = 13;
  strcpy((char *)v111, "probabilities");
  sub_207DE1104((_QWORD *)a1, (__int128 *)__p);
  if (v112 < 0)
  {
    operator delete(v111[0]);
    if ((v110 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v108 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_113;
    }
  }
  else if ((v110 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v109[0]);
  if ((v108 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v106 & 0x80000000) == 0)
      goto LABEL_11;
LABEL_114:
    operator delete(v105[0]);
    if ((SBYTE7(v102) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_115:
    operator delete(__p[0]);
    goto LABEL_12;
  }
LABEL_113:
  operator delete(v107[0]);
  if (v106 < 0)
    goto LABEL_114;
LABEL_11:
  if (SBYTE7(v102) < 0)
    goto LABEL_115;
LABEL_12:
  v5 = operator new(8uLL);
  v95 = a1;
  v6 = operator new(0x48uLL);
  *(_QWORD *)v6 = 0x1000000013;
  v6[2] = 0;
  sub_207CB8548(v6 + 4, 19, 16, 0);
  *v5 = v6;
  *(_QWORD *)(a1 + 96) = v5;
  v7 = *(float *)(a2 + 28);
  if (!*(_BYTE *)(a2 + 32))
    v7 = 0.2;
  *(float *)(a1 + 104) = v7;
  __p[0] = (void *)0x8000000080;
  *(_QWORD *)(a1 + 112) = &off_24C0751D0;
  sub_207DDB554(__p, (_QWORD *)(a1 + 120));
  __p[0] = (void *)0x8000000080;
  *(_QWORD *)(a1 + 200) = &off_24C0751D0;
  sub_207DDB554(__p, (_QWORD *)(a1 + 208));
  __p[0] = (void *)0x8000000080;
  *(_QWORD *)(a1 + 288) = &off_24C0738D0;
  sub_207DDBECC(__p, (_QWORD *)(a1 + 296));
  v100 = 0x4000000040;
  *(_QWORD *)(a1 + 376) = &off_24C0738D0;
  sub_207DDBECC(&v100, (_QWORD *)(a1 + 384));
  v99 = 0x4000000040;
  *(_QWORD *)(a1 + 464) = &off_24C0738D0;
  sub_207DDBECC(&v99, (_QWORD *)(a1 + 472));
  v8 = a1 + 552;
  bzero((void *)(a1 + 552), 0x15A0uLL);
  v9 = 0;
  v94 = a1 + 552;
  do
  {
    v10 = (int **)(&off_24C074EB0 + 2 * v9);
    v12 = *v10;
    v11 = v10[1];
    v102 = 0u;
    v103 = 0u;
    v13 = (uint64_t)v11;
    v14 = (4 * (uint64_t)v11) >> 2;
    *(_OWORD *)__p = 0u;
    if (!(4 * (_QWORD)v11))
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      goto LABEL_86;
    }
    if (((v14 + 1) & 0x3FF) != 0)
      v20 = ((unint64_t)(v14 + 1) >> 10) + 1;
    else
      v20 = (unint64_t)(v14 + 1) >> 10;
    if (!v20)
    {
      v17 = 0;
      v16 = *((_QWORD *)&v103 + 1);
      v15 = (char *)((*((_QWORD *)&v103 + 1) >> 7) & 0x1FFFFFFFFFFFFF8);
      v74 = &v12[v13];
      v18 = 0;
      v19 = v15;
      if (v74 != v12)
        goto LABEL_82;
      goto LABEL_86;
    }
    v96 = (uint64_t)v11;
    v97 = (4 * (uint64_t)v11) >> 2;
    v98 = v9;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v20];
    v23 = v21;
    v24 = v21;
    do
    {
      v25 = operator new(0x1000uLL);
      if (v24 != v22)
        goto LABEL_24;
      if (v23 > v21)
      {
        v26 = (v23 - v21) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = v27 >> 1;
        v29 = &v23[-8 * (v27 >> 1)];
        v30 = v22;
        if (v22 != v23)
        {
          memmove(v29, v23, v22 - v23);
          v30 = v23;
        }
        v24 = &v29[v22 - v23];
        v23 = &v30[-8 * v28];
        goto LABEL_24;
      }
      if (v22 == v21)
        v31 = 1;
      else
        v31 = (v22 - v21) >> 2;
      if (v31 >> 61)
        sub_207CA3AB8();
      v32 = (char *)operator new(8 * v31);
      v33 = v32;
      v34 = v31 >> 2;
      v35 = &v32[8 * (v31 >> 2)];
      v24 = v35;
      v36 = v22 - v23;
      if (v22 != v23)
      {
        v24 = &v35[v36 & 0xFFFFFFFFFFFFFFF8];
        v37 = v36 - 8;
        if (v37 >= 0x38 && (v38 = 8 * v34, (unint64_t)(&v32[8 * v34] - v23) >= 0x20))
        {
          v42 = (v37 >> 3) + 1;
          v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v35[v43];
          v40 = &v23[v43];
          v44 = (__int128 *)(v23 + 16);
          v45 = &v32[v38 + 16];
          v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *v44;
            *((_OWORD *)v45 - 1) = *(v44 - 1);
            *(_OWORD *)v45 = v47;
            v44 += 2;
            v45 += 32;
            v46 -= 4;
          }
          while (v46);
          if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_41;
        }
        else
        {
          v39 = &v32[8 * (v31 >> 2)];
          v40 = v23;
        }
        do
        {
          v41 = *(_QWORD *)v40;
          v40 += 8;
          *(_QWORD *)v39 = v41;
          v39 += 8;
        }
        while (v39 != v24);
      }
LABEL_41:
      v22 = &v32[8 * v31];
      if (v21)
        operator delete(v21);
      v23 = v35;
      v21 = v33;
LABEL_24:
      *(_QWORD *)v24 = v25;
      v24 += 8;
      --v20;
    }
    while (v20);
    v48 = (char *)__p[1];
    v49 = (char *)v102;
    while (v49 != v48)
    {
      if (v23 == v21)
      {
        if (v24 >= v22)
        {
          if (v22 == v21)
            v55 = 1;
          else
            v55 = (v22 - v21) >> 2;
          if (v55 >> 61)
            sub_207CA3AB8();
          v56 = (char *)operator new(8 * v55);
          v57 = v56;
          v58 = (v55 + 3) >> 2;
          v23 = &v56[8 * v58];
          v60 = v24 - v21;
          v59 = v24 == v21;
          v24 = v23;
          if (!v59)
          {
            v24 = &v23[v60 & 0xFFFFFFFFFFFFFFF8];
            v61 = v60 - 8;
            v62 = &v56[8 * v58];
            v63 = v21;
            if (v61 < 0x38)
              goto LABEL_120;
            v64 = 8 * v58;
            v62 = &v56[8 * v58];
            v63 = v21;
            if ((unint64_t)(v62 - v21) < 0x20)
              goto LABEL_120;
            v65 = (v61 >> 3) + 1;
            v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            v62 = &v23[v66];
            v63 = &v21[v66];
            v67 = (__int128 *)(v21 + 16);
            v68 = &v56[v64 + 16];
            v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v70 = *v67;
              *((_OWORD *)v68 - 1) = *(v67 - 1);
              *(_OWORD *)v68 = v70;
              v67 += 2;
              v68 += 32;
              v69 -= 4;
            }
            while (v69);
            if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_120:
              do
              {
                v71 = *(_QWORD *)v63;
                v63 += 8;
                *(_QWORD *)v62 = v71;
                v62 += 8;
              }
              while (v62 != v24);
            }
          }
          v22 = &v56[8 * v55];
          if (v21)
            operator delete(v21);
          v21 = v57;
        }
        else
        {
          v51 = (v22 - v24) >> 3;
          if (v51 >= -1)
            v52 = v51 + 1;
          else
            v52 = v51 + 2;
          v53 = v52 >> 1;
          v23 = &v21[8 * (v52 >> 1)];
          v54 = v21;
          if (v24 != v21)
          {
            memmove(v23, v21, v24 - v21);
            v54 = v24;
          }
          v24 = &v54[8 * v53];
        }
      }
      v50 = *((_QWORD *)v49 - 1);
      v49 -= 8;
      *((_QWORD *)v23 - 1) = v50;
      v23 -= 8;
      v48 = (char *)__p[1];
    }
    v72 = __p[0];
    __p[0] = v21;
    __p[1] = v23;
    *(_QWORD *)&v102 = v24;
    *((_QWORD *)&v102 + 1) = v22;
    if (v72)
    {
      operator delete(v72);
      v73 = v103;
      v23 = (char *)__p[1];
      v24 = (char *)v102;
    }
    else
    {
      v73 = v103;
    }
    a1 = v95;
    v14 = v97;
    v16 = *((_QWORD *)&v103 + 1);
    v75 = v73 + WORD4(v103);
    v15 = &v23[8 * ((unint64_t)(v73 + *((_QWORD *)&v103 + 1)) >> 10)];
    if (v24 == v23)
      v17 = 0;
    else
      v17 = *(_QWORD *)v15 + 4 * (v75 & 0x3FF);
    v8 = v94;
    v9 = v98;
    v18 = v17;
    v19 = v15;
    if (&v12[v96] != v12)
    {
LABEL_82:
      v76 = v14 + ((v17 - *(_QWORD *)v15) >> 2);
      if (v76 < 1)
      {
        v77 = 1023 - v76;
        LOWORD(v76) = ~(1023 - v76);
        v19 = &v15[-8 * (v77 >> 10)];
      }
      else
      {
        v19 = &v15[8 * ((unint64_t)v76 >> 10)];
      }
      v18 = *(_QWORD *)v19 + 4 * (v76 & 0x3FF);
    }
LABEL_86:
    if (v17 == v18)
      goto LABEL_103;
    while (2)
    {
      v78 = v18;
      if (v15 != v19)
        v78 = *(_QWORD *)v15 + 4096;
      if (v17 == v78)
      {
        if (v15 == v19)
          break;
      }
      else
      {
        v79 = v78 - v17 - 4;
        if (v79 < 0x1C || (unint64_t)(v17 - (_QWORD)v12) < 0x20)
        {
          v82 = v12;
          v83 = (_DWORD *)v17;
        }
        else
        {
          v80 = (v79 >> 2) + 1;
          v81 = v80 & 0x7FFFFFFFFFFFFFF8;
          v82 = &v12[v81];
          v83 = (_DWORD *)(v17 + v81 * 4);
          v84 = (_OWORD *)(v17 + 16);
          v85 = (__int128 *)(v12 + 4);
          v86 = v80 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v87 = *v85;
            *(v84 - 1) = *(v85 - 1);
            *v84 = v87;
            v84 += 2;
            v85 += 2;
            v86 -= 8;
          }
          while (v86);
          if (v80 == (v80 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_100;
        }
        do
        {
          v88 = *v82++;
          *v83++ = v88;
        }
        while (v83 != (_DWORD *)v78);
LABEL_100:
        v12 = v82;
        v16 += (v78 - v17) >> 2;
        if (v15 == v19)
          break;
      }
      v89 = *((_QWORD *)v15 + 1);
      v15 += 8;
      v17 = v89;
      if (v89 != v18)
        continue;
      break;
    }
    *((_QWORD *)&v103 + 1) = v16;
LABEL_103:
    sub_207DD5D44(__p, v8 + 184 * v9, 0, 0);
    v90 = (void **)__p[1];
    v91 = (void **)v102;
    if ((unint64_t)v102 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v90);
        v91 = (void **)v102;
        v90 = (void **)((char *)__p[1] + 8);
        __p[1] = v90;
      }
      while ((_QWORD)v102 - (_QWORD)v90 > 0x10uLL);
    }
    while (v90 != v91)
    {
      v92 = *v90++;
      operator delete(v92);
    }
    if (__p[0])
      operator delete(__p[0]);
    ++v9;
  }
  while (v9 != 5);
  return a1;
}

void sub_207DDB120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  do
  {
    sub_207C99D78(v15 - 80);
    v15 -= 88;
  }
  while (v15 != a11);
  sub_207C99D78(a12);
  sub_207C99D78(a13);
  sub_208102AD8((_QWORD **)(a15 + 96));
  sub_207DDB480(a15);
  _Unwind_Resume(a1);
}

void sub_207DDB14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  sub_207C99D78(a12);
  sub_207C99D78(a13);
  sub_208102AD8(v13 + 96);
  sub_207DDB480(v13);
  _Unwind_Resume(a1);
}

void sub_207DDB154()
{
  JUMPOUT(0x207DDB270);
}

void sub_207DDB15C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_208102AD8((_QWORD **)(v1 + 96));
  sub_207DDB480(v1);
  _Unwind_Resume(a1);
}

void sub_207DDB178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  void *v16;

  operator delete(v16);
  operator delete(v15);
  sub_207DDB480(a15);
  _Unwind_Resume(a1);
}

void sub_207DDB1A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207DDB480(v1);
  _Unwind_Resume(a1);
}

void sub_207DDB1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_207DDB294((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DDB1D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, _QWORD **a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p)
{
  if (__p)
    operator delete(__p);
  sub_207D06200(a9);
  sub_207CBBB7C(a10);
  sub_207DDB334(a11);
  JUMPOUT(0x207DDB268);
}

void sub_207DDB1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_207DDA328((uint64_t)va);
  JUMPOUT(0x207DDB250);
}

void sub_207DDB1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, _QWORD **a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;

  if (v21)
    operator delete(v21);
  if (a21)
    operator delete(a21);
  sub_207D06200(a9);
  sub_207CBBB7C(a10);
  sub_207DDB334(a11);
  JUMPOUT(0x207DDB268);
}

void sub_207DDB22C()
{
  __cxa_end_catch();
  JUMPOUT(0x207DDB234);
}

uint64_t sub_207DDB294(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_10;
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_11:
  operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_207DDB334(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[24];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_207DDB418(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207DDB480(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (!v5)
      return a1;
  }
  v6 = v5[2];
  v5[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (std::__shared_weak_count *)v5[1];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v5);
  return a1;
}

void sub_207DDB554(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  void *__p;
  _OWORD v14[3];
  uint64_t v15;
  __int128 v16;
  uint64_t (**v17)();

  v17 = &off_24C075318;
  sub_20819EB50(a1, (uint64_t)&__p);
  v3 = (char *)operator new(0x50uLL);
  *(_QWORD *)v3 = &off_24C075360;
  *(_OWORD *)(v3 + 8) = v14[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v14 + 12);
  *(_OWORD *)(v3 + 40) = v14[2];
  *((_QWORD *)v3 + 7) = v15;
  *((_OWORD *)v3 + 4) = v16;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0752C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20818BA64((uint64_t)v3, 1, &__p);
  v7 = __p;
  v8 = *((_QWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  a2[5] = v8;
  __p = 0;
  operator delete(v7);
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a2 + 36) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_207DDB6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207D59A20(&a9);
  _Unwind_Resume(a1);
}

void sub_207DDB710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207D59A20(&a9);
  _Unwind_Resume(a1);
}

void sub_207DDB724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18)
    free(a18);
  _Unwind_Resume(exception_object);
}

void sub_207DDB73C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DDB7A4()
{
  return 1;
}

uint64_t sub_207DDB7AC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_207DDB7B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_207DDB7C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_207DDB84C()
{
  return 1;
}

__int128 *sub_207DDB858()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BD40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BD40))
  {
    v2 = sub_207DDB930();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452BD28, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452BD38 = *((_QWORD *)v2 + 2);
      xmmword_25452BD28 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BD28, &dword_207C77000);
    __cxa_guard_release(&qword_25452BD40);
  }
  if (byte_25452BD3F >= 0)
    return &xmmword_25452BD28;
  else
    return (__int128 *)xmmword_25452BD28;
}

void sub_207DDB918(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BD40);
  _Unwind_Resume(a1);
}

__int128 *sub_207DDB930()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BD60);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BD60))
    return &xmmword_25452BD48;
  v2 = sub_207DDBA0C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452BD48, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452BD58 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452BD48 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BD48, &dword_207C77000);
  __cxa_guard_release(&qword_25452BD60);
  return &xmmword_25452BD48;
}

void sub_207DDB9F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BD60);
  _Unwind_Resume(a1);
}

std::string *sub_207DDBA0C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BD80);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BD80))
    return &stru_25452BD68;
  sub_207DDBC24((uint64_t)__p);
  sub_207DDBAFC((char *)__p, &stru_25452BD68);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BD68, &dword_207C77000);
  __cxa_guard_release(&qword_25452BD80);
  return &stru_25452BD68;
}

void sub_207DDBABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BD80);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BD80);
  _Unwind_Resume(a1);
}

void sub_207DDBAFC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207CABB88();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_207DDBBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207DDBC24(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BDA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BDA0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray8u>]", qword_25452BD88);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BD88, &dword_207C77000);
    __cxa_guard_release(&qword_25452BDA0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452BDC0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452BDC0))
  {
    v5 = sub_207D49434(qword_25452BD88, "<", 0);
    sub_207D49330(qword_25452BD88, 0, v5, qword_25452BDA8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BDA8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BDC0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452BDE0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452BDE0))
  {
    sub_208215C6C((uint64_t)qword_25452BDA8, (uint64_t)&xmmword_25452BDC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BDC8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BDE0);
  }
  if (byte_25452BDDF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452BDC8, *((unint64_t *)&xmmword_25452BDC8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452BDC8;
    *(_QWORD *)(a1 + 16) = unk_25452BDD8;
  }
}

void sub_207DDBDC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BDE0);
  _Unwind_Resume(a1);
}

void sub_207DDBDD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BDC0);
  _Unwind_Resume(a1);
}

void sub_207DDBDF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BDA0);
  _Unwind_Resume(a1);
}

void sub_207DDBE0C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DDBE20(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[6];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_207DDBE5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207DDBECC(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  void *__p;
  _OWORD v14[3];
  uint64_t v15;
  __int128 v16;
  uint64_t (**v17)();

  v17 = &off_24C0739C8;
  sub_20819ED88(a1, (uint64_t)&__p);
  v3 = (char *)operator new(0x50uLL);
  *(_QWORD *)v3 = &off_24C0737D8;
  *(_OWORD *)(v3 + 8) = v14[0];
  *(_OWORD *)(v3 + 20) = *(_OWORD *)((char *)v14 + 12);
  *(_OWORD *)(v3 + 40) = v14[2];
  *((_QWORD *)v3 + 7) = v15;
  *((_OWORD *)v3 + 4) = v16;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C073A00;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20818D1F4((uint64_t)v3, 4, &__p);
  v7 = __p;
  v8 = *((_QWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  a2[5] = v8;
  __p = 0;
  operator delete(v7);
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a2 + 36) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_207DDC054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207D59A20(&a9);
  _Unwind_Resume(a1);
}

void sub_207DDC088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207D59A20(&a9);
  _Unwind_Resume(a1);
}

void sub_207DDC09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18)
    free(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207DDC0B4(uint64_t a1)
{
  void (**v2)(void);
  void (*v3)(void);
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;

  v2 = *(void (***)(void))(a1 + 6080);
  *(_QWORD *)(a1 + 6080) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      v2[1]();
    operator delete(v2);
  }
  v4 = *(_QWORD **)(a1 + 6072);
  *(_QWORD *)(a1 + 6072) = 0;
  if (v4)
  {
    v5 = (std::__shared_weak_count *)v4[1];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v8 = *(std::__shared_weak_count **)(a1 + 480);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 392);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 304);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 216);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 128);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(_QWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v23)
  {
    v24 = (_QWORD *)*v23;
    *v23 = 0;
    if (v24)
    {
      v25 = (void *)v24[6];
      if (v25)
      {
        v24[7] = v25;
        operator delete(v25);
      }
      v26 = (void *)v24[3];
      if (v26)
      {
        v24[4] = v26;
        operator delete(v26);
      }
      operator delete(v24);
    }
    operator delete(v23);
  }
  v27 = *(std::__shared_weak_count **)(a1 + 24);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v30)
  {
    v31 = v30[2];
    v30[2] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = (std::__shared_weak_count *)v30[1];
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    operator delete(v30);
  }
  return a1;
}

void sub_207DDC350(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DDC3B8()
{
  return 21;
}

uint64_t sub_207DDC3C0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_207DDC3C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_207DDC3DC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

double sub_207DDC460(char *a1, uint64_t a2)
{
  unsigned __int8 v4;
  std::string *v5;
  uint64_t *v6;
  unint64_t v7;
  std::string::size_type size;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 *v32;
  int64x2_t v33;
  int8x16_t v34;
  std::string __p;
  void *v36[3];
  void *v37[2];
  char v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253E51098);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51098))
  {
    sub_207C96EE8(v37, "ImageView");
    v31 = sub_207DDC9A0();
    sub_207DDC8E8((uint64_t)&v39, (uint64_t)v31);
    v32 = sub_207CACD14();
    sub_207DDC8E8((uint64_t)&v42, (uint64_t)v32);
    sub_207CAA110(v36, (uint64_t)&v39, 2uLL);
    sub_208215D20((char *)v37, (uint64_t *)v36, (std::string *)&qword_253E510A0, v33, v34);
    sub_207C99DE0(v36);
    if (SHIBYTE(v44) < 0)
    {
      operator delete(v42);
      if ((SHIBYTE(v41) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v38 & 0x80000000) == 0)
        {
LABEL_46:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E510A0, &dword_207C77000);
          __cxa_guard_release(&qword_253E51098);
          goto LABEL_2;
        }
LABEL_50:
        operator delete(v37[0]);
        goto LABEL_46;
      }
    }
    else if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(v39);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_50;
  }
LABEL_2:
  v5 = sub_207DDCA98();
  v39 = "Attempting to create an ";
  v40 = 24;
  v6 = &qword_253E510A0;
  v7 = byte_253E510B7;
  if (byte_253E510B7 < 0)
  {
    v7 = unk_253E510A8;
    v6 = (uint64_t *)qword_253E510A0;
  }
  v41 = (const char *)v6;
  v42 = (void *)v7;
  v43 = " from an ";
  v44 = 9;
  size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v5->__r_.__value_.__l.__size_;
  v45[0] = v9;
  v45[1] = size;
  sub_207CAC8F4((uint64_t)&v39, (uint64_t)&v46, 0, 0, &__p);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v39 = p_p;
    v40 = v21;
    v41 = " but the other image contains an incompatible buffer type ";
    v42 = (void *)58;
    v43 = (const char *)v19;
    v44 = v20;
    sub_207CAC8F4((uint64_t)&v39, (uint64_t)v45, 0, 0, (std::string *)a1);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_25;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v26 <= 0x16)
  {
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    v27 = a1;
    a1[23] = v26;
LABEL_36:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, v30, v25);
    goto LABEL_40;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  *((_QWORD *)a1 + 1) = v26;
  *((_QWORD *)a1 + 2) = v29 | 0x8000000000000000;
  *(_QWORD *)a1 = v27;
  a1 = v27;
  if (v25)
    goto LABEL_36;
LABEL_40:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_207DDC808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_207C99DE0(&a13);
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_253E51098);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a16);
  __cxa_guard_abort(&qword_253E51098);
  _Unwind_Resume(a1);
}

void sub_207DDC8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207DDC8E8(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207DDC984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_207DDC9A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BD20);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BD20))
    return &stru_25452BD08;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb8u]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452BD08);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BD08, &dword_207C77000);
  __cxa_guard_release(&qword_25452BD20);
  return &stru_25452BD08;
}

void sub_207DDCA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BD20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BD20);
  _Unwind_Resume(a1);
}

std::string *sub_207DDCA98()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452BD00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BD00))
  {
    sub_207C96EE8(v7, "ImageView");
    v2 = sub_207DDC9A0();
    sub_207DDCC9C((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207DDCC9C((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452BCE8, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BCE8, &dword_207C77000);
          __cxa_guard_release(&qword_25452BD00);
          return &stru_25452BCE8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452BCE8;
}

void sub_207DDCBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452BD00);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452BD00);
  _Unwind_Resume(a1);
}

void sub_207DDCC9C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207DDCD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DDCD54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::logic_error *exception;
  std::string v29;
  _BYTE v30[12];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 21)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207DDD054(a1);
    std::logic_error::logic_error(exception, &v29);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v29.__r_.__value_.__r.__words[0] = v4;
      v29.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24))
    v12 = 3;
  else
    v12 = 0;
  if (!*(_DWORD *)(a1 + 28))
    v11 = 1;
  v13 = !v11;
  if (v11)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v15 = v14 | v12;
  v16 = *(_QWORD *)(a1 + 24);
  if (!v13)
    v16 = 0;
  *(_QWORD *)&v30[4] = v16;
  v17 = v16;
  *(_DWORD *)v30 = 3;
  v18 = *(_QWORD *)v30;
  v19 = HIDWORD(v16);
  *(_DWORD *)v30 = 1;
  *(_QWORD *)&v30[4] = v15;
  v20 = *(_QWORD *)v30;
  v21 = HIDWORD(v14);
  if (HIDWORD(v16) * HIDWORD(v14) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v22 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
  if (v29.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_QWORD *)a2 = v29.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v21;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v15;
  *(_WORD *)(a2 + 64) = v22;
  if (size)
  {
    v26 = (unint64_t *)&size->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_207DDD008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_207DDD054(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_207DDCA98();
  v3 = sub_207DDD0CC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_207CA9B98("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

std::string *sub_207DDD0CC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452BE00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BE00))
  {
    sub_207C96EE8(v7, "ImageView");
    v2 = sub_207CAC138();
    sub_207DDD2D0((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207DDD2D0((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452BDE8, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BDE8, &dword_207C77000);
          __cxa_guard_release(&qword_25452BE00);
          return &stru_25452BDE8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452BDE8;
}

void sub_207DDD21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452BE00);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452BE00);
  _Unwind_Resume(a1);
}

void sub_207DDD2D0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207DDD36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_207DDD388(char *__dst, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;

  if (a2 >= 0x5A0)
    v3 = 1440;
  else
    v3 = a2;
  v4 = v3 >> 6;
  v5 = &__dst[8 * (v3 >> 6)];
  v6 = v3 & 0x3F;
  if ((v3 & 0x3F) != 0)
  {
    if (a2 >= 0x5A0)
    {
      v7 = 1440 - v3;
    }
    else
    {
      v7 = 1440 - v3;
      v8 = (64 - v6);
      if (1440 - v3 >= v8)
        v9 = (64 - v6);
      else
        v9 = 1440 - v3;
      v10 = v7 - v9;
      v12 = *(_QWORD *)v5;
      v11 = v5 + 8;
      *(_QWORD *)__dst = *(_QWORD *)__dst & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v9) | (((0xFFFFFFFFFFFFFFFFLL >> (v8 - v9)) & (-1 << v3) & v12) >> v3);
      v13 = v9 >> 6;
      v14 = &__dst[8 * (v9 >> 6)];
      v15 = -1 << v9;
      if ((uint64_t)(v7 - v9) >= 64)
      {
        v16 = *(_QWORD *)v14;
        v17 = 8 * v13;
        v18 = __dst;
        do
        {
          v19 = v10;
          v20 = &v18[v17];
          v21 = *(_QWORD *)&v18[8 * v4 + 8];
          v22 = v16 & ~v15 | (v21 << v9);
          v16 = *(_QWORD *)&v18[v17 + 8] & v15 | (v21 >> (64 - v9));
          *(_QWORD *)v20 = v22;
          *((_QWORD *)v20 + 1) = v16;
          v10 = v19 - 64;
          v18 += 8;
        }
        while (v19 > 0x7F);
        v14 = &v18[8 * v13];
        v11 = &v18[8 * v4 + 8];
      }
      if (v10 >= 1)
      {
        v23 = *(_QWORD *)v11 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v10);
        v24 = v10 >= (unint64_t)(64 - v9) ? (64 - v9) : v10;
        *(_QWORD *)v14 = *(_QWORD *)v14 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v9 - v24)) & v15) | (v23 << v9);
        v25 = v10 - v24;
        if (v25 >= 1)
          *(_QWORD *)&v14[((v24 + v9) >> 3) & 0x1FFFFFFFFFFFFFF8] = *(_QWORD *)&v14[((v24 + v9) >> 3) & 0x1FFFFFFFFFFFFFF8] & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v25) | (v23 >> v24);
      }
    }
    v26 = v7 >> 6;
  }
  else
  {
    LOBYTE(v7) = -96 - v3;
    v26 = (1440 - v3) >> 6;
    if (v3 <= 0x560)
      memmove(__dst, &__dst[8 * (v3 >> 6)], 8 * v26);
    if (((-96 - (_BYTE)v3) & 0x3F) != 0)
      *(_QWORD *)&__dst[8 * v26] = *(_QWORD *)&__dst[8 * v26] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F)) | *(_QWORD *)&v5[8 * v26] & (0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  if (v3)
  {
    v27 = &__dst[8 * v26];
    if ((v7 & 0x3F) != 0)
    {
      if (64 - (v7 & 0x3F) >= v3)
        v28 = v3;
      else
        v28 = 64 - (v7 & 0x3F);
      *(_QWORD *)v27 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v7 & 0x3Fu) - v28)) & (-1 << v7));
      v27 += 8;
      v3 -= v28;
      v4 = v3 >> 6;
    }
    if (v3 >= 0x40)
      bzero(v27, 8 * v4);
    if ((v3 & 0x3F) != 0)
      *(_QWORD *)&v27[8 * v4] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
  }
  return __dst;
}

void sub_207DDD610(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v17 = v4;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v15 = v4;
    v16 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v15 = v4;
    v16 = 0;
  }
  sub_207DDD828(a2, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207DDD6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_207DDD718(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DDD780()
{
  return 1;
}

uint64_t sub_207DDD788(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207DDD790@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_207DDD7A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t *sub_207DDD828(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  void *__p;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(&__p, v3, 1);
  v9 = __p;
  v10 = *((_QWORD *)__p + 2);
  *((_OWORD *)a1 + 1) = *(_OWORD *)__p;
  a1[4] = v10;
  __p = 0;
  operator delete(v9);
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 20) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_207DDD96C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

